
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e38  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080130d8  080130d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080134fc  080134fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013504  08013504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013508  08013508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0801350c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031d0  24000160  0801366c  00015160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003330  0801366c  00015330  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000400  38000000  38000000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00016400  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c520  00000000  00000000  0001642e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005cd1  00000000  00000000  0004294e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002028  00000000  00000000  00048620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018d3  00000000  00000000  0004a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f8a8  00000000  00000000  0004bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030e37  00000000  00000000  0008b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001808b3  00000000  00000000  000bc5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0023cead  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009080  00000000  00000000  0023cef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00245f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080130c0 	.word	0x080130c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	080130c0 	.word	0x080130c0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <MX_ADC3_Init+0xd4>)
 80006d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_ADC3_Init+0xd0>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000712:	2201      	movs	r2, #1
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC3_Init+0xd0>)
 800072e:	2201      	movs	r2, #1
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000732:	4816      	ldr	r0, [pc, #88]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000734:	f001 fb52 	bl	8001ddc <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800073e:	f000 fc95 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC3_Init+0xd8>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800074a:	2307      	movs	r3, #7
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000754:	2304      	movs	r3, #4
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000766:	f001 fe0b 	bl	8002380 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000770:	f000 fc7c 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_ADC3_Init+0xdc>)
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8000778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800077c:	69f9      	ldr	r1, [r7, #28]
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000780:	f001 fcce 	bl	8002120 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2400017c 	.word	0x2400017c
 8000790:	58026000 	.word	0x58026000
 8000794:	cb840000 	.word	0xcb840000
 8000798:	38000000 	.word	0x38000000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b4      	sub	sp, #208	@ 0xd0
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	22c0      	movs	r2, #192	@ 0xc0
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f011 fbfb 	bl	8011fa8 <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <HAL_ADC_MspInit+0xe8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d15e      	bne.n	800087a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80007c8:	2319      	movs	r3, #25
 80007ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80007cc:	23c0      	movs	r3, #192	@ 0xc0
 80007ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 fb44 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80007fe:	f000 fc35 	bl	800106c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <HAL_ADC_MspInit+0xf4>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000828:	2211      	movs	r2, #17
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800083a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800084a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000860:	f002 fd1c 	bl	800329c <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 800086a:	f000 fbff 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000872:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000874:	4a05      	ldr	r2, [pc, #20]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	37d0      	adds	r7, #208	@ 0xd0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58026000 	.word	0x58026000
 8000888:	58024400 	.word	0x58024400
 800088c:	240001e0 	.word	0x240001e0
 8000890:	58025408 	.word	0x58025408

08000894 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <HAL_ADC_ConvCpltCallback+0x34>)
 800089e:	f001 fd03 	bl	80022a8 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008ae:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n conversion_count = %d", conversion_count);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008ba:	f011 f9c9 	bl	8011c50 <DebugPrint>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2400017c 	.word	0x2400017c
 80008cc:	24000258 	.word	0x24000258
 80008d0:	080130d8 	.word	0x080130d8

080008d4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008de:	f001 fce3 	bl	80022a8 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008ee:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <HAL_ADC_ErrorCallback+0x40>)
 80008f8:	f011 f9aa 	bl	8011c50 <DebugPrint>
	hadc3.State = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2400017c 	.word	0x2400017c
 8000910:	24000258 	.word	0x24000258
 8000914:	080130f4 	.word	0x080130f4

08000918 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <CalcTemperature+0xe4>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d05c      	beq.n	80009e2 <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8000928:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <CalcTemperature+0xe8>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d030      	beq.n	8000996 <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000934:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <CalcTemperature+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
}
 8000940:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <CalcTemperature+0xe8>)
 8000944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000948:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	0b5b      	lsrs	r3, r3, #13
 800094e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000952:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800095c:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	015a      	lsls	r2, r3, #5
 8000962:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000966:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800096c:	4924      	ldr	r1, [pc, #144]	@ (8000a00 <CalcTemperature+0xe8>)
 800096e:	4313      	orrs	r3, r2
 8000970:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ef      	bne.n	800095e <CalcTemperature+0x46>
    } while(sets-- != 0U);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e5      	bne.n	8000954 <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000994:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	e010      	b.n	80009c2 <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <CalcTemperature+0xec>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a8:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	4413      	add	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <CalcTemperature+0xec>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2100      	movs	r1, #0
 80009b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	ddeb      	ble.n	80009a0 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <CalcTemperature+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <CalcTemperature+0xec>)
 80009d0:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d6:	6939      	ldr	r1, [r7, #16]
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <CalcTemperature+0xf0>)
 80009da:	f001 fba1 	bl	8002120 <HAL_ADC_Start_DMA>

		return total_adc;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	e008      	b.n	80009f4 <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <CalcTemperature+0xec>)
 80009e4:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ea:	6979      	ldr	r1, [r7, #20]
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <CalcTemperature+0xf0>)
 80009ee:	f001 fb97 	bl	8002120 <HAL_ADC_Start_DMA>
	}

	return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	24000258 	.word	0x24000258
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	38000000 	.word	0x38000000
 8000a08:	2400017c 	.word	0x2400017c

08000a0c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2081      	movs	r0, #129	@ 0x81
 8000a36:	f002 fb91 	bl	800315c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000a3a:	2081      	movs	r0, #129	@ 0x81
 8000a3c:	f002 fba8 	bl	8003190 <HAL_NVIC_EnableIRQ>

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400

08000a4c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a31      	ldr	r2, [pc, #196]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a2a      	ldr	r2, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_GPIO_Init+0xe8>)
 8000afe:	f005 f973 	bl	8005de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <MX_GPIO_Init+0xe8>)
 8000b1a:	f004 ffb5 	bl	8005a88 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000b24:	f000 feda 	bl	80018dc <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020000 	.word	0x58020000

08000b38 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f023 030f 	bic.w	r3, r3, #15
 8000b48:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	f043 030c 	orr.w	r3, r3, #12
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	f043 030c 	orr.w	r3, r3, #12
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	2364      	movs	r3, #100	@ 0x64
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2304      	movs	r3, #4
 8000b82:	214e      	movs	r1, #78	@ 0x4e
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <lcd_send_cmd+0x5c>)
 8000b86:	f005 f9e5 	bl	8005f54 <HAL_I2C_Master_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2400025c 	.word	0x2400025c

08000b98 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f023 030f 	bic.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f043 030d 	orr.w	r3, r3, #13
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f043 0309 	orr.w	r3, r3, #9
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	f043 030d 	orr.w	r3, r3, #13
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	f043 0309 	orr.w	r3, r3, #9
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	2364      	movs	r3, #100	@ 0x64
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2304      	movs	r3, #4
 8000be2:	214e      	movs	r1, #78	@ 0x4e
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <lcd_send_data+0x5c>)
 8000be6:	f005 f9b5 	bl	8005f54 <HAL_I2C_Master_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2400025c 	.word	0x2400025c

08000bf8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <lcd_put_cur+0x18>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <lcd_put_cur+0x22>
 8000c0e:	e009      	b.n	8000c24 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c16:	603b      	str	r3, [r7, #0]
            break;
 8000c18:	e004      	b.n	8000c24 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c20:	603b      	str	r3, [r7, #0]
            break;
 8000c22:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff85 	bl	8000b38 <lcd_send_cmd>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <lcd_init>:


void lcd_init (void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c3a:	2032      	movs	r0, #50	@ 0x32
 8000c3c:	f000 fe1e 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c40:	2030      	movs	r0, #48	@ 0x30
 8000c42:	f7ff ff79 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c46:	2005      	movs	r0, #5
 8000c48:	f000 fe18 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c4c:	2030      	movs	r0, #48	@ 0x30
 8000c4e:	f7ff ff73 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 fe12 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c58:	2030      	movs	r0, #48	@ 0x30
 8000c5a:	f7ff ff6d 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 fe0c 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c64:	2020      	movs	r0, #32
 8000c66:	f7ff ff67 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f000 fe06 	bl	800187c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c70:	2028      	movs	r0, #40	@ 0x28
 8000c72:	f7ff ff61 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 fe00 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c7c:	2008      	movs	r0, #8
 8000c7e:	f7ff ff5b 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fdfa 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff ff55 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 fdf4 	bl	800187c <HAL_Delay>
	HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fdf1 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c9a:	2006      	movs	r0, #6
 8000c9c:	f7ff ff4c 	bl	8000b38 <lcd_send_cmd>
	HAL_Delay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fdeb 	bl	800187c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ca6:	200c      	movs	r0, #12
 8000ca8:	f7ff ff46 	bl	8000b38 <lcd_send_cmd>
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cb8:	e006      	b.n	8000cc8 <lcd_send_string+0x18>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff68 	bl	8000b98 <lcd_send_data>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f4      	bne.n	8000cba <lcd_send_string+0xa>
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C1_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C1_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d18:	f005 f880 	bl	8005e1c <HAL_I2C_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 f9a3 	bl	800106c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d2a:	f005 fc45 	bl	80065b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 f99a 	bl	800106c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_I2C1_Init+0x74>)
 8000d3c:	f005 fc87 	bl	800664e <HAL_I2CEx_ConfigDigitalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f991 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400025c 	.word	0x2400025c
 8000d54:	40005400 	.word	0x40005400
 8000d58:	10c0ecff 	.word	0x10c0ecff

08000d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22c0      	movs	r2, #192	@ 0xc0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f011 f913 	bl	8011fa8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a27      	ldr	r2, [pc, #156]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d146      	bne.n	8000e1a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8c:	f04f 0208 	mov.w	r2, #8
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 f86c 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dae:	f000 f95d 	bl	800106c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dea:	2304      	movs	r3, #4
 8000dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <HAL_I2C_MspInit+0xd0>)
 8000df8:	f004 fe46 	bl	8005a88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	37e8      	adds	r7, #232	@ 0xe8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40005400 	.word	0x40005400
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020400 	.word	0x58020400

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e36:	f000 f8d9 	bl	8000fec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3a:	f000 fcc3 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3e:	f000 f85b 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e42:	f7ff fe03 	bl	8000a4c <MX_GPIO_Init>
  MX_BDMA_Init();
 8000e46:	f7ff fde1 	bl	8000a0c <MX_BDMA_Init>
  MX_QUADSPI_Init();
 8000e4a:	f000 f915 	bl	8001078 <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8000e4e:	f7ff fc35 	bl	80006bc <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000e52:	f00f fc99 	bl	8010788 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000e56:	f000 fbbd 	bl	80015d4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e5a:	f7ff ff3f 	bl	8000cdc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e5e:	f7ff feea 	bl	8000c36 <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2102      	movs	r1, #2
 8000e66:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <main+0xb4>)
 8000e68:	f004 ffbe 	bl	8005de8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	@ 0x64
 8000e6e:	f000 fd05 	bl	800187c <HAL_Delay>
		DebugTask();
 8000e72:	f010 fe4d 	bl	8011b10 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2102      	movs	r1, #2
 8000e7a:	481a      	ldr	r0, [pc, #104]	@ (8000ee4 <main+0xb4>)
 8000e7c:	f004 ffb4 	bl	8005de8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	@ 0x64
 8000e82:	f000 fcfb 	bl	800187c <HAL_Delay>
		DebugTask();
 8000e86:	f010 fe43 	bl	8011b10 <DebugTask>
		uint32_t ADC_val = CalcTemperature();
 8000e8a:	f7ff fd45 	bl	8000918 <CalcTemperature>
 8000e8e:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ADC_val>0)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0e5      	beq.n	8000e62 <main+0x32>
		{
			char buffer[32];
			sprintf(buffer, "\r\n ADC_val = %10ld", ADC_val);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e9a:	4913      	ldr	r1, [pc, #76]	@ (8000ee8 <main+0xb8>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f011 f813 	bl	8011ec8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa1b 	bl	80002e0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	1d39      	adds	r1, r7, #4
 8000eb0:	2364      	movs	r3, #100	@ 0x64
 8000eb2:	480e      	ldr	r0, [pc, #56]	@ (8000eec <main+0xbc>)
 8000eb4:	f00a fffa 	bl	800beac <HAL_UART_Transmit>
			lcd_put_cur(0,0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe9c 	bl	8000bf8 <lcd_put_cur>
			lcd_send_string("    ADC_Val     ");
 8000ec0:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <main+0xc0>)
 8000ec2:	f7ff fef5 	bl	8000cb0 <lcd_send_string>
			lcd_put_cur(1,0);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fe95 	bl	8000bf8 <lcd_put_cur>
			sprintf(buffer, "   %10ld   ", ADC_val);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <main+0xc4>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f010 fff7 	bl	8011ec8 <siprintf>
			lcd_send_string(buffer);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fee7 	bl	8000cb0 <lcd_send_string>
	while (1) {
 8000ee2:	e7be      	b.n	8000e62 <main+0x32>
 8000ee4:	58020000 	.word	0x58020000
 8000ee8:	0801310c 	.word	0x0801310c
 8000eec:	2400034c 	.word	0x2400034c
 8000ef0:	08013120 	.word	0x08013120
 8000ef4:	08013134 	.word	0x08013134

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09c      	sub	sp, #112	@ 0x70
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f02:	224c      	movs	r2, #76	@ 0x4c
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f011 f84e 	bl	8011fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f011 f848 	bl	8011fa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f006 fe85 	bl	8007c28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <SystemClock_Config+0xec>)
 8000f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f26:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe4 <SystemClock_Config+0xec>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <SystemClock_Config+0xec>)
 8000f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f50:	bf00      	nop
 8000f52:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <SystemClock_Config+0xf0>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f5e:	d1f8      	bne.n	8000f52 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f72:	2305      	movs	r3, #5
 8000f74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f76:	23a0      	movs	r3, #160	@ 0xa0
 8000f78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f86:	2308      	movs	r3, #8
 8000f88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 ff4a 	bl	8007e30 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fa2:	f000 f863 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	233f      	movs	r3, #63	@ 0x3f
 8000fa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 fb89 	bl	80086e4 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000fd8:	f000 f848 	bl	800106c <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3770      	adds	r7, #112	@ 0x70
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	58000400 	.word	0x58000400
 8000fe8:	58024800 	.word	0x58024800

08000fec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ffe:	f002 f8d5 	bl	80031ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001002:	2301      	movs	r3, #1
 8001004:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001006:	2300      	movs	r3, #0
 8001008:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800100a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800100e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001010:	230f      	movs	r3, #15
 8001012:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001014:	2300      	movs	r3, #0
 8001016:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001018:	2301      	movs	r3, #1
 800101a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800101c:	2303      	movs	r3, #3
 800101e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001030:	463b      	mov	r3, r7
 8001032:	4618      	mov	r0, r3
 8001034:	f002 f8f2 	bl	800321c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001038:	2004      	movs	r0, #4
 800103a:	f002 f8cf 	bl	80031dc <HAL_MPU_Enable>

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800105a:	f000 fbef 	bl	800183c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <MX_QUADSPI_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 8001084:	2202      	movs	r2, #2
 8001086:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 800108a:	2204      	movs	r2, #4
 800108c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 8001096:	2216      	movs	r2, #22
 8001098:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_QUADSPI_Init+0x50>)
 80010b4:	f006 fe02 	bl	8007cbc <HAL_QSPI_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010be:	f7ff ffd5 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	240002b0 	.word	0x240002b0
 80010cc:	52005000 	.word	0x52005000

080010d0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0bc      	sub	sp, #240	@ 0xf0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	22c0      	movs	r2, #192	@ 0xc0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f010 ff59 	bl	8011fa8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a55      	ldr	r2, [pc, #340]	@ (8001250 <HAL_QSPI_MspInit+0x180>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	f040 80a3 	bne.w	8001248 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001102:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800110e:	2300      	movs	r3, #0
 8001110:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f007 feb2 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001122:	f7ff ffa3 	bl	800106c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001126:	4b4b      	ldr	r3, [pc, #300]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001128:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800112c:	4a49      	ldr	r2, [pc, #292]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001136:	4b47      	ldr	r3, [pc, #284]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001138:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800113c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001144:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	4a42      	ldr	r2, [pc, #264]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001154:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001168:	4a3a      	ldr	r2, [pc, #232]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a33      	ldr	r2, [pc, #204]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <HAL_QSPI_MspInit+0x184>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800119e:	2304      	movs	r3, #4
 80011a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011b6:	2309      	movs	r3, #9
 80011b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011c0:	4619      	mov	r1, r3
 80011c2:	4825      	ldr	r0, [pc, #148]	@ (8001258 <HAL_QSPI_MspInit+0x188>)
 80011c4:	f004 fc60 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011e0:	2309      	movs	r3, #9
 80011e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011ea:	4619      	mov	r1, r3
 80011ec:	481b      	ldr	r0, [pc, #108]	@ (800125c <HAL_QSPI_MspInit+0x18c>)
 80011ee:	f004 fc4b 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80011f2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800120c:	2309      	movs	r3, #9
 800120e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001212:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001216:	4619      	mov	r1, r3
 8001218:	4811      	ldr	r0, [pc, #68]	@ (8001260 <HAL_QSPI_MspInit+0x190>)
 800121a:	f004 fc35 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800121e:	2340      	movs	r3, #64	@ 0x40
 8001220:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122a:	2301      	movs	r3, #1
 800122c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001236:	230a      	movs	r3, #10
 8001238:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <HAL_QSPI_MspInit+0x18c>)
 8001244:	f004 fc20 	bl	8005a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	37f0      	adds	r7, #240	@ 0xf0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	52005000 	.word	0x52005000
 8001254:	58024400 	.word	0x58024400
 8001258:	58021000 	.word	0x58021000
 800125c:	58020400 	.word	0x58020400
 8001260:	58020c00 	.word	0x58020c00

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_MspInit+0x30>)
 800126c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_MspInit+0x30>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_MspInit+0x30>)
 800127c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	58024400 	.word	0x58024400

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d844      	bhi.n	8001330 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	2019      	movs	r0, #25
 80012ac:	f001 ff56 	bl	800315c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012b0:	2019      	movs	r0, #25
 80012b2:	f001 ff6d 	bl	8003190 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80012b6:	4a24      	ldr	r2, [pc, #144]	@ (8001348 <HAL_InitTick+0xb0>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <HAL_InitTick+0xb4>)
 80012be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <HAL_InitTick+0xb4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_InitTick+0xb4>)
 80012ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f007 fd89 	bl	8008dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012ea:	f007 fd71 	bl	8008dd0 <HAL_RCC_GetPCLK2Freq>
 80012ee:	4603      	mov	r3, r0
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f6:	4a16      	ldr	r2, [pc, #88]	@ (8001350 <HAL_InitTick+0xb8>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	0c9b      	lsrs	r3, r3, #18
 80012fe:	3b01      	subs	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_InitTick+0xbc>)
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <HAL_InitTick+0xc0>)
 8001306:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_InitTick+0xbc>)
 800130a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <HAL_InitTick+0xbc>)
 8001312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001314:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_InitTick+0xbc>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_InitTick+0xbc>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001322:	480c      	ldr	r0, [pc, #48]	@ (8001354 <HAL_InitTick+0xbc>)
 8001324:	f00a faaa 	bl	800b87c <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <HAL_InitTick+0xa6>
 800132e:	e001      	b.n	8001334 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e005      	b.n	8001340 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001334:	4807      	ldr	r0, [pc, #28]	@ (8001354 <HAL_InitTick+0xbc>)
 8001336:	f00a fb03 	bl	800b940 <HAL_TIM_Base_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24000008 	.word	0x24000008
 800134c:	58024400 	.word	0x58024400
 8001350:	431bde83 	.word	0x431bde83
 8001354:	240002fc 	.word	0x240002fc
 8001358:	40010000 	.word	0x40010000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <TIM1_UP_IRQHandler+0x10>)
 80013c2:	f00a fb35 	bl	800ba30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	240002fc 	.word	0x240002fc

080013d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <OTG_FS_IRQHandler+0x10>)
 80013d6:	f005 fac7 	bl	8006968 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	240018c4 	.word	0x240018c4

080013e4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <BDMA_Channel0_IRQHandler+0x10>)
 80013ea:	f003 f83b 	bl	8004464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240001e0 	.word	0x240001e0

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f010 fdc6 	bl	8011fb8 <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	24080000 	.word	0x24080000
 8001458:	00000400 	.word	0x00000400
 800145c:	24000348 	.word	0x24000348
 8001460:	24003330 	.word	0x24003330

08001464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001468:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <SystemInit+0x114>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146e:	4a42      	ldr	r2, [pc, #264]	@ (8001578 <SystemInit+0x114>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001478:	4b40      	ldr	r3, [pc, #256]	@ (800157c <SystemInit+0x118>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	2b06      	cmp	r3, #6
 8001482:	d807      	bhi.n	8001494 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <SystemInit+0x118>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 030f 	bic.w	r3, r3, #15
 800148c:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <SystemInit+0x118>)
 800148e:	f043 0307 	orr.w	r3, r3, #7
 8001492:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001494:	4b3a      	ldr	r3, [pc, #232]	@ (8001580 <SystemInit+0x11c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a39      	ldr	r2, [pc, #228]	@ (8001580 <SystemInit+0x11c>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <SystemInit+0x11c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <SystemInit+0x11c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4935      	ldr	r1, [pc, #212]	@ (8001580 <SystemInit+0x11c>)
 80014ac:	4b35      	ldr	r3, [pc, #212]	@ (8001584 <SystemInit+0x120>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b2:	4b32      	ldr	r3, [pc, #200]	@ (800157c <SystemInit+0x118>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <SystemInit+0x118>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 030f 	bic.w	r3, r3, #15
 80014c6:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <SystemInit+0x118>)
 80014c8:	f043 0307 	orr.w	r3, r3, #7
 80014cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <SystemInit+0x11c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <SystemInit+0x11c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014da:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <SystemInit+0x11c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <SystemInit+0x11c>)
 80014e2:	4a29      	ldr	r2, [pc, #164]	@ (8001588 <SystemInit+0x124>)
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014e6:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <SystemInit+0x11c>)
 80014e8:	4a28      	ldr	r2, [pc, #160]	@ (800158c <SystemInit+0x128>)
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014ec:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <SystemInit+0x11c>)
 80014ee:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <SystemInit+0x12c>)
 80014f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014f2:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <SystemInit+0x11c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <SystemInit+0x11c>)
 80014fa:	4a25      	ldr	r2, [pc, #148]	@ (8001590 <SystemInit+0x12c>)
 80014fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <SystemInit+0x11c>)
 8001500:	2200      	movs	r2, #0
 8001502:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <SystemInit+0x11c>)
 8001506:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <SystemInit+0x12c>)
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <SystemInit+0x11c>)
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <SystemInit+0x11c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1a      	ldr	r2, [pc, #104]	@ (8001580 <SystemInit+0x11c>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <SystemInit+0x11c>)
 800151e:	2200      	movs	r2, #0
 8001520:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <SystemInit+0x130>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <SystemInit+0x134>)
 8001528:	4013      	ands	r3, r2
 800152a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800152e:	d202      	bcs.n	8001536 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <SystemInit+0x138>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <SystemInit+0x11c>)
 8001538:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800153c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d113      	bne.n	800156c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <SystemInit+0x11c>)
 8001546:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800154a:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <SystemInit+0x11c>)
 800154c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001550:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <SystemInit+0x13c>)
 8001556:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800155a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <SystemInit+0x11c>)
 800155e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001562:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <SystemInit+0x11c>)
 8001564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001568:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	52002000 	.word	0x52002000
 8001580:	58024400 	.word	0x58024400
 8001584:	eaf6ed7f 	.word	0xeaf6ed7f
 8001588:	02020200 	.word	0x02020200
 800158c:	01ff0000 	.word	0x01ff0000
 8001590:	01010280 	.word	0x01010280
 8001594:	5c001000 	.word	0x5c001000
 8001598:	ffff0000 	.word	0xffff0000
 800159c:	51008108 	.word	0x51008108
 80015a0:	52004000 	.word	0x52004000

080015a4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <ExitRun0Mode+0x2c>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <ExitRun0Mode+0x2c>)
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015b4:	bf00      	nop
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <ExitRun0Mode+0x2c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f9      	beq.n	80015b6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	58024800 	.word	0x58024800

080015d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015da:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <MX_USART1_UART_Init+0x94>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 800161e:	f00a fbf5 	bl	800be0c <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fd20 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001630:	f00b fc8b 	bl	800cf4a <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800163a:	f7ff fd17 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001642:	f00b fcc0 	bl	800cfc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800164c:	f7ff fd0e 	bl	800106c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_USART1_UART_Init+0x90>)
 8001652:	f00b fc41 	bl	800ced8 <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800165c:	f7ff fd06 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2400034c 	.word	0x2400034c
 8001668:	40011000 	.word	0x40011000

0800166c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ba      	sub	sp, #232	@ 0xe8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	22c0      	movs	r2, #192	@ 0xc0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f010 fc8b 	bl	8011fa8 <memset>
  if(uartHandle->Instance==USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a32      	ldr	r2, [pc, #200]	@ (8001760 <HAL_UART_MspInit+0xf4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d15c      	bne.n	8001756 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800169c:	f04f 0201 	mov.w	r2, #1
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f007 fbe4 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016be:	f7ff fcd5 	bl	800106c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c2:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016c8:	4a26      	ldr	r2, [pc, #152]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_UART_MspInit+0xf8>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001718:	2304      	movs	r3, #4
 800171a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001722:	4619      	mov	r1, r3
 8001724:	4810      	ldr	r0, [pc, #64]	@ (8001768 <HAL_UART_MspInit+0xfc>)
 8001726:	f004 f9af 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800172a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800172e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001744:	2304      	movs	r3, #4
 8001746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_UART_MspInit+0xfc>)
 8001752:	f004 f999 	bl	8005a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	37e8      	adds	r7, #232	@ 0xe8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40011000 	.word	0x40011000
 8001764:	58024400 	.word	0x58024400
 8001768:	58020400 	.word	0x58020400

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001770:	f7ff ff18 	bl	80015a4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff fe76 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	@ (80017bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f010 fc11 	bl	8011fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fb45 	bl	8000e30 <main>
  bx  lr
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017b0:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80017b4:	0801350c 	.word	0x0801350c
  ldr r2, =_sbss
 80017b8:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80017bc:	24003330 	.word	0x24003330

080017c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC3_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f001 fcbb 	bl	8003146 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017d0:	f007 f93e 	bl	8008a50 <HAL_RCC_GetSysClockFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_Init+0x68>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4913      	ldr	r1, [pc, #76]	@ (8001830 <HAL_Init+0x6c>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_Init+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_Init+0x6c>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_Init+0x70>)
 8001806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001808:	4a0b      	ldr	r2, [pc, #44]	@ (8001838 <HAL_Init+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	200f      	movs	r0, #15
 8001810:	f7ff fd42 	bl	8001298 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e002      	b.n	8001824 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181e:	f7ff fd21 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400
 8001830:	0801336c 	.word	0x0801336c
 8001834:	24000004 	.word	0x24000004
 8001838:	24000000 	.word	0x24000000

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2400000c 	.word	0x2400000c
 8001860:	240003e0 	.word	0x240003e0

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	240003e0 	.word	0x240003e0

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2400000c 	.word	0x2400000c

080018c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetREVID+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1b      	lsrs	r3, r3, #16
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	5c001000 	.word	0x5c001000

080018dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	4904      	ldr	r1, [pc, #16]	@ (8001904 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	58000400 	.word	0x58000400

08001908 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <LL_ADC_SetChannelPreselection+0x24>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2201      	movs	r2, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	e015      	b.n	80019c0 <LL_ADC_SetChannelPreselection+0x50>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80019aa:	2320      	movs	r3, #32
 80019ac:	e003      	b.n	80019b6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2201      	movs	r2, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	69d2      	ldr	r2, [r2, #28]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3360      	adds	r3, #96	@ 0x60
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	430b      	orrs	r3, r1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	431a      	orrs	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3360      	adds	r3, #96	@ 0x60
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3330      	adds	r3, #48	@ 0x30
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	4413      	add	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	211f      	movs	r1, #31
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 011f 	and.w	r1, r3, #31
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b087      	sub	sp, #28
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3314      	adds	r3, #20
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	0e5b      	lsrs	r3, r3, #25
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0d1b      	lsrs	r3, r3, #20
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2107      	movs	r1, #7
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	0d1b      	lsrs	r3, r3, #20
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	431a      	orrs	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0318 	and.w	r3, r3, #24
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b9c:	40d9      	lsrs	r1, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	000fffff 	.word	0x000fffff

08001bc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6093      	str	r3, [r2, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	5fffffc0 	.word	0x5fffffc0

08001c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	6fffffc0 	.word	0x6fffffc0

08001c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <LL_ADC_Enable+0x24>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	7fffffc0 	.word	0x7fffffc0

08001ca0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <LL_ADC_Disable+0x24>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	f043 0202 	orr.w	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	7fffffc0 	.word	0x7fffffc0

08001cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <LL_ADC_IsEnabled+0x18>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <LL_ADC_IsEnabled+0x1a>
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDisableOngoing+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDisableOngoing+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <LL_ADC_REG_StartConversion+0x24>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	7fffffc0 	.word	0x7fffffc0

08001d3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <LL_ADC_REG_StopConversion+0x24>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	7fffffc0 	.word	0x7fffffc0

08001d64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <LL_ADC_INJ_StopConversion+0x24>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	f043 0220 	orr.w	r2, r3, #32
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	7fffffc0 	.word	0x7fffffc0

08001db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e18f      	b.n	8002116 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fcc9 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff feef 	bl	8001c00 <LL_ADC_IsDeepPowerDownEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fed5 	bl	8001bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff0a 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d114      	bne.n	8001e6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff feee 	bl	8001c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4c:	4b87      	ldr	r3, [pc, #540]	@ (800206c <HAL_ADC_Init+0x290>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	4a87      	ldr	r2, [pc, #540]	@ (8002070 <HAL_ADC_Init+0x294>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e5e:	e002      	b.n	8001e66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff feed 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f043 0210 	orr.w	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff61 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 8129 	bne.w	8002104 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 8125 	bne.w	8002104 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fefa 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d136      	bne.n	8001f48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a65      	ldr	r2, [pc, #404]	@ (8002074 <HAL_ADC_Init+0x298>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d004      	beq.n	8001eee <HAL_ADC_Init+0x112>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a63      	ldr	r2, [pc, #396]	@ (8002078 <HAL_ADC_Init+0x29c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10e      	bne.n	8001f0c <HAL_ADC_Init+0x130>
 8001eee:	4861      	ldr	r0, [pc, #388]	@ (8002074 <HAL_ADC_Init+0x298>)
 8001ef0:	f7ff feea 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4860      	ldr	r0, [pc, #384]	@ (8002078 <HAL_ADC_Init+0x29c>)
 8001ef8:	f7ff fee6 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4323      	orrs	r3, r4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e008      	b.n	8001f1e <HAL_ADC_Init+0x142>
 8001f0c:	485b      	ldr	r0, [pc, #364]	@ (800207c <HAL_ADC_Init+0x2a0>)
 8001f0e:	f7ff fedb 	bl	8001cc8 <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a53      	ldr	r2, [pc, #332]	@ (8002074 <HAL_ADC_Init+0x298>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_ADC_Init+0x15a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a51      	ldr	r2, [pc, #324]	@ (8002078 <HAL_ADC_Init+0x29c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x15e>
 8001f36:	4a52      	ldr	r2, [pc, #328]	@ (8002080 <HAL_ADC_Init+0x2a4>)
 8001f38:	e000      	b.n	8001f3c <HAL_ADC_Init+0x160>
 8001f3a:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_ADC_Init+0x2a8>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7ff fce0 	bl	8001908 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f48:	f7ff fcbc 	bl	80018c4 <HAL_GetREVID>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d914      	bls.n	8001f80 <HAL_ADC_Init+0x1a4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d110      	bne.n	8001f80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7d5b      	ldrb	r3, [r3, #21]
 8001f62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7f1b      	ldrb	r3, [r3, #28]
 8001f74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f78:	f043 030c 	orr.w	r3, r3, #12
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e00d      	b.n	8001f9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	7d5b      	ldrb	r3, [r3, #21]
 8001f84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7f1b      	ldrb	r3, [r3, #28]
 8001f96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	045b      	lsls	r3, r3, #17
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_ADC_Init+0x2ac>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff febc 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 8001fec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fede 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8001ff8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d15f      	bne.n	80020c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d15c      	bne.n	80020c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7d1b      	ldrb	r3, [r3, #20]
 800200a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <HAL_ADC_Init+0x2b0>)
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	430b      	orrs	r3, r1
 8002026:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800202e:	2b01      	cmp	r3, #1
 8002030:	d130      	bne.n	8002094 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_ADC_Init+0x2b4>)
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002046:	3a01      	subs	r2, #1
 8002048:	0411      	lsls	r1, r2, #16
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205a:	430a      	orrs	r2, r1
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	e01c      	b.n	80020a4 <HAL_ADC_Init+0x2c8>
 800206a:	bf00      	nop
 800206c:	24000000 	.word	0x24000000
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	40022000 	.word	0x40022000
 8002078:	40022100 	.word	0x40022100
 800207c:	58026000 	.word	0x58026000
 8002080:	40022300 	.word	0x40022300
 8002084:	58026300 	.word	0x58026300
 8002088:	fff0c003 	.word	0xfff0c003
 800208c:	ffffbffc 	.word	0xffffbffc
 8002090:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fe8a 	bl	8002dd4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10c      	bne.n	80020e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f023 010f 	bic.w	r1, r3, #15
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e0:	e007      	b.n	80020f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020f 	bic.w	r2, r2, #15
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
 8002102:	e007      	b.n	8002114 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002114:	7ffb      	ldrb	r3, [r7, #31]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop

08002120 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a55      	ldr	r2, [pc, #340]	@ (8002288 <HAL_ADC_Start_DMA+0x168>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_ADC_Start_DMA+0x20>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a54      	ldr	r2, [pc, #336]	@ (800228c <HAL_ADC_Start_DMA+0x16c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_ADC_Start_DMA+0x24>
 8002140:	4b53      	ldr	r3, [pc, #332]	@ (8002290 <HAL_ADC_Start_DMA+0x170>)
 8002142:	e000      	b.n	8002146 <HAL_ADC_Start_DMA+0x26>
 8002144:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <HAL_ADC_Start_DMA+0x174>)
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fd3a 	bl	8001bc0 <LL_ADC_GetMultimode>
 800214c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe06 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 808c 	bne.w	8002278 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Start_DMA+0x4e>
 800216a:	2302      	movs	r3, #2
 800216c:	e087      	b.n	800227e <HAL_ADC_Start_DMA+0x15e>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d002      	beq.n	8002188 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d170      	bne.n	800226a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fca5 	bl	8002ad8 <ADC_Enable>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d163      	bne.n	8002260 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800219c:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <HAL_ADC_Start_DMA+0x178>)
 800219e:	4013      	ands	r3, r2
 80021a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a37      	ldr	r2, [pc, #220]	@ (800228c <HAL_ADC_Start_DMA+0x16c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d002      	beq.n	80021b8 <HAL_ADC_Start_DMA+0x98>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e000      	b.n	80021ba <HAL_ADC_Start_DMA+0x9a>
 80021b8:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <HAL_ADC_Start_DMA+0x168>)
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d002      	beq.n	80021c8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f023 0206 	bic.w	r2, r3, #6
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	4a28      	ldr	r2, [pc, #160]	@ (800229c <HAL_ADC_Start_DMA+0x17c>)
 80021fa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	4a27      	ldr	r2, [pc, #156]	@ (80022a0 <HAL_ADC_Start_DMA+0x180>)
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002208:	4a26      	ldr	r2, [pc, #152]	@ (80022a4 <HAL_ADC_Start_DMA+0x184>)
 800220a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	221c      	movs	r2, #28
 8002212:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0210 	orr.w	r2, r2, #16
 800222a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7ff fc60 	bl	8001afc <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3340      	adds	r3, #64	@ 0x40
 8002246:	4619      	mov	r1, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f001 fb82 	bl	8003954 <HAL_DMA_Start_IT>
 8002250:	4603      	mov	r3, r0
 8002252:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fd5b 	bl	8001d14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800225e:	e00d      	b.n	800227c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002268:	e008      	b.n	800227c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002276:	e001      	b.n	800227c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002278:	2302      	movs	r3, #2
 800227a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800227c:	7dfb      	ldrb	r3, [r7, #23]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000
 800228c:	40022100 	.word	0x40022100
 8002290:	40022300 	.word	0x40022300
 8002294:	58026300 	.word	0x58026300
 8002298:	fffff0fe 	.word	0xfffff0fe
 800229c:	08002cab 	.word	0x08002cab
 80022a0:	08002d83 	.word	0x08002d83
 80022a4:	08002d9f 	.word	0x08002d9f

080022a8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Stop_DMA+0x16>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e04f      	b.n	800235e <HAL_ADC_Stop_DMA+0xb6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022c6:	2103      	movs	r1, #3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb49 	bl	8002960 <ADC_ConversionStop>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d13d      	bne.n	8002354 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0203 	bic.w	r2, r2, #3
 80022e6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d10f      	bne.n	8002316 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fd94 	bl	8003e28 <HAL_DMA_Abort>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0210 	bic.w	r2, r2, #16
 8002324:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fc5d 	bl	8002bec <ADC_Disable>
 8002332:	4603      	mov	r3, r0
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e002      	b.n	800233e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fc57 	bl	8002bec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002348:	4b07      	ldr	r3, [pc, #28]	@ (8002368 <HAL_ADC_Stop_DMA+0xc0>)
 800234a:	4013      	ands	r3, r2
 800234c:	f043 0201 	orr.w	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	ffffeefe 	.word	0xffffeefe

0800236c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b08d      	sub	sp, #52	@ 0x34
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <HAL_ADC_ConfigChannel+0x1b0>)
 800239a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x2a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e2c7      	b.n	800293a <HAL_ADC_ConfigChannel+0x5ba>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fcd4 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 82ac 	bne.w	800291c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db2c      	blt.n	8002426 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x6a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2201      	movs	r2, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	e016      	b.n	8002418 <HAL_ADC_ConfigChannel+0x98>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	613b      	str	r3, [r7, #16]
  return result;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002402:	2320      	movs	r3, #32
 8002404:	e003      	b.n	800240e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2201      	movs	r2, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	69d1      	ldr	r1, [r2, #28]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	430b      	orrs	r3, r1
 8002424:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f7ff fb36 	bl	8001aa4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fc91 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 8002442:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fcb3 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80b8 	bne.w	80025c8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 80b4 	bne.w	80025c8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6819      	ldr	r1, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	461a      	mov	r2, r3
 800246e:	f7ff fb58 	bl	8001b22 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002472:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <HAL_ADC_ConfigChannel+0x1b4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800247a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x118>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	e01d      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x154>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <HAL_ADC_ConfigChannel+0x13e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	e00a      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x154>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d02c      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6919      	ldr	r1, [r3, #16]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f7ff fa73 	bl	80019d6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7e5b      	ldrb	r3, [r3, #25]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d102      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x186>
 8002500:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002504:	e000      	b.n	8002508 <HAL_ADC_ConfigChannel+0x188>
 8002506:	2300      	movs	r3, #0
 8002508:	461a      	mov	r2, r3
 800250a:	f7ff fa9d 	bl	8001a48 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6919      	ldr	r1, [r3, #16]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	7e1b      	ldrb	r3, [r3, #24]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1a4>
 800251e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002522:	e000      	b.n	8002526 <HAL_ADC_ConfigChannel+0x1a6>
 8002524:	2300      	movs	r3, #0
 8002526:	461a      	mov	r2, r3
 8002528:	f7ff fa75 	bl	8001a16 <LL_ADC_SetDataRightShift>
 800252c:	e04c      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x248>
 800252e:	bf00      	nop
 8002530:	47ff0000 	.word	0x47ff0000
 8002534:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	069b      	lsls	r3, r3, #26
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800255a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	429a      	cmp	r2, r3
 800256e:	d107      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800257e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	069b      	lsls	r3, r3, #26
 8002590:	429a      	cmp	r2, r3
 8002592:	d107      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025a2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	069b      	lsls	r3, r3, #26
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d107      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fb7b 	bl	8001cc8 <LL_ADC_IsEnabled>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 81aa 	bne.w	800292e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7ff fac6 	bl	8001b78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a87      	ldr	r2, [pc, #540]	@ (8002810 <HAL_ADC_ConfigChannel+0x490>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	f040 809a 	bne.w	800272c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4984      	ldr	r1, [pc, #528]	@ (8002814 <HAL_ADC_ConfigChannel+0x494>)
 8002602:	428b      	cmp	r3, r1
 8002604:	d147      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x316>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4983      	ldr	r1, [pc, #524]	@ (8002818 <HAL_ADC_ConfigChannel+0x498>)
 800260c:	428b      	cmp	r3, r1
 800260e:	d040      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x312>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4981      	ldr	r1, [pc, #516]	@ (800281c <HAL_ADC_ConfigChannel+0x49c>)
 8002616:	428b      	cmp	r3, r1
 8002618:	d039      	beq.n	800268e <HAL_ADC_ConfigChannel+0x30e>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4980      	ldr	r1, [pc, #512]	@ (8002820 <HAL_ADC_ConfigChannel+0x4a0>)
 8002620:	428b      	cmp	r3, r1
 8002622:	d032      	beq.n	800268a <HAL_ADC_ConfigChannel+0x30a>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	497e      	ldr	r1, [pc, #504]	@ (8002824 <HAL_ADC_ConfigChannel+0x4a4>)
 800262a:	428b      	cmp	r3, r1
 800262c:	d02b      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x306>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	497d      	ldr	r1, [pc, #500]	@ (8002828 <HAL_ADC_ConfigChannel+0x4a8>)
 8002634:	428b      	cmp	r3, r1
 8002636:	d024      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x302>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	497b      	ldr	r1, [pc, #492]	@ (800282c <HAL_ADC_ConfigChannel+0x4ac>)
 800263e:	428b      	cmp	r3, r1
 8002640:	d01d      	beq.n	800267e <HAL_ADC_ConfigChannel+0x2fe>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	497a      	ldr	r1, [pc, #488]	@ (8002830 <HAL_ADC_ConfigChannel+0x4b0>)
 8002648:	428b      	cmp	r3, r1
 800264a:	d016      	beq.n	800267a <HAL_ADC_ConfigChannel+0x2fa>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4978      	ldr	r1, [pc, #480]	@ (8002834 <HAL_ADC_ConfigChannel+0x4b4>)
 8002652:	428b      	cmp	r3, r1
 8002654:	d00f      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x2f6>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4977      	ldr	r1, [pc, #476]	@ (8002838 <HAL_ADC_ConfigChannel+0x4b8>)
 800265c:	428b      	cmp	r3, r1
 800265e:	d008      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x2f2>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4975      	ldr	r1, [pc, #468]	@ (800283c <HAL_ADC_ConfigChannel+0x4bc>)
 8002666:	428b      	cmp	r3, r1
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x2ee>
 800266a:	4b75      	ldr	r3, [pc, #468]	@ (8002840 <HAL_ADC_ConfigChannel+0x4c0>)
 800266c:	e05a      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800266e:	2300      	movs	r3, #0
 8002670:	e058      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002672:	4b74      	ldr	r3, [pc, #464]	@ (8002844 <HAL_ADC_ConfigChannel+0x4c4>)
 8002674:	e056      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002676:	4b74      	ldr	r3, [pc, #464]	@ (8002848 <HAL_ADC_ConfigChannel+0x4c8>)
 8002678:	e054      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800267a:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <HAL_ADC_ConfigChannel+0x4b4>)
 800267c:	e052      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800267e:	4b6c      	ldr	r3, [pc, #432]	@ (8002830 <HAL_ADC_ConfigChannel+0x4b0>)
 8002680:	e050      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002682:	4b72      	ldr	r3, [pc, #456]	@ (800284c <HAL_ADC_ConfigChannel+0x4cc>)
 8002684:	e04e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002686:	4b72      	ldr	r3, [pc, #456]	@ (8002850 <HAL_ADC_ConfigChannel+0x4d0>)
 8002688:	e04c      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800268a:	4b72      	ldr	r3, [pc, #456]	@ (8002854 <HAL_ADC_ConfigChannel+0x4d4>)
 800268c:	e04a      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800268e:	4b72      	ldr	r3, [pc, #456]	@ (8002858 <HAL_ADC_ConfigChannel+0x4d8>)
 8002690:	e048      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002692:	2301      	movs	r3, #1
 8002694:	e046      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4970      	ldr	r1, [pc, #448]	@ (800285c <HAL_ADC_ConfigChannel+0x4dc>)
 800269c:	428b      	cmp	r3, r1
 800269e:	d140      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x3a2>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	495c      	ldr	r1, [pc, #368]	@ (8002818 <HAL_ADC_ConfigChannel+0x498>)
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d039      	beq.n	800271e <HAL_ADC_ConfigChannel+0x39e>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	495b      	ldr	r1, [pc, #364]	@ (800281c <HAL_ADC_ConfigChannel+0x49c>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d032      	beq.n	800271a <HAL_ADC_ConfigChannel+0x39a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4959      	ldr	r1, [pc, #356]	@ (8002820 <HAL_ADC_ConfigChannel+0x4a0>)
 80026ba:	428b      	cmp	r3, r1
 80026bc:	d02b      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x396>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4958      	ldr	r1, [pc, #352]	@ (8002824 <HAL_ADC_ConfigChannel+0x4a4>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d024      	beq.n	8002712 <HAL_ADC_ConfigChannel+0x392>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4956      	ldr	r1, [pc, #344]	@ (8002828 <HAL_ADC_ConfigChannel+0x4a8>)
 80026ce:	428b      	cmp	r3, r1
 80026d0:	d01d      	beq.n	800270e <HAL_ADC_ConfigChannel+0x38e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4955      	ldr	r1, [pc, #340]	@ (800282c <HAL_ADC_ConfigChannel+0x4ac>)
 80026d8:	428b      	cmp	r3, r1
 80026da:	d016      	beq.n	800270a <HAL_ADC_ConfigChannel+0x38a>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4953      	ldr	r1, [pc, #332]	@ (8002830 <HAL_ADC_ConfigChannel+0x4b0>)
 80026e2:	428b      	cmp	r3, r1
 80026e4:	d00f      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x386>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4952      	ldr	r1, [pc, #328]	@ (8002834 <HAL_ADC_ConfigChannel+0x4b4>)
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d008      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x382>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4951      	ldr	r1, [pc, #324]	@ (800283c <HAL_ADC_ConfigChannel+0x4bc>)
 80026f6:	428b      	cmp	r3, r1
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x37e>
 80026fa:	4b51      	ldr	r3, [pc, #324]	@ (8002840 <HAL_ADC_ConfigChannel+0x4c0>)
 80026fc:	e012      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 80026fe:	2300      	movs	r3, #0
 8002700:	e010      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002702:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HAL_ADC_ConfigChannel+0x4c8>)
 8002704:	e00e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002706:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <HAL_ADC_ConfigChannel+0x4b4>)
 8002708:	e00c      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800270a:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <HAL_ADC_ConfigChannel+0x4b0>)
 800270c:	e00a      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800270e:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <HAL_ADC_ConfigChannel+0x4cc>)
 8002710:	e008      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002712:	4b4f      	ldr	r3, [pc, #316]	@ (8002850 <HAL_ADC_ConfigChannel+0x4d0>)
 8002714:	e006      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002716:	4b4f      	ldr	r3, [pc, #316]	@ (8002854 <HAL_ADC_ConfigChannel+0x4d4>)
 8002718:	e004      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800271a:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <HAL_ADC_ConfigChannel+0x4d8>)
 800271c:	e002      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3a4>
 8002722:	2300      	movs	r3, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7ff f922 	bl	8001970 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f280 80fc 	bge.w	800292e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	@ (8002814 <HAL_ADC_ConfigChannel+0x494>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_ADC_ConfigChannel+0x3ca>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_ADC_ConfigChannel+0x4dc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x3ce>
 800274a:	4b45      	ldr	r3, [pc, #276]	@ (8002860 <HAL_ADC_ConfigChannel+0x4e0>)
 800274c:	e000      	b.n	8002750 <HAL_ADC_ConfigChannel+0x3d0>
 800274e:	4b45      	ldr	r3, [pc, #276]	@ (8002864 <HAL_ADC_ConfigChannel+0x4e4>)
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff f8ff 	bl	8001954 <LL_ADC_GetCommonPathInternalCh>
 8002756:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2d      	ldr	r2, [pc, #180]	@ (8002814 <HAL_ADC_ConfigChannel+0x494>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_ADC_ConfigChannel+0x3ec>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3d      	ldr	r2, [pc, #244]	@ (800285c <HAL_ADC_ConfigChannel+0x4dc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10e      	bne.n	800278a <HAL_ADC_ConfigChannel+0x40a>
 800276c:	4829      	ldr	r0, [pc, #164]	@ (8002814 <HAL_ADC_ConfigChannel+0x494>)
 800276e:	f7ff faab 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002772:	4604      	mov	r4, r0
 8002774:	4839      	ldr	r0, [pc, #228]	@ (800285c <HAL_ADC_ConfigChannel+0x4dc>)
 8002776:	f7ff faa7 	bl	8001cc8 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	4323      	orrs	r3, r4
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e008      	b.n	800279c <HAL_ADC_ConfigChannel+0x41c>
 800278a:	4837      	ldr	r0, [pc, #220]	@ (8002868 <HAL_ADC_ConfigChannel+0x4e8>)
 800278c:	f7ff fa9c 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80b3 	beq.w	8002908 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a31      	ldr	r2, [pc, #196]	@ (800286c <HAL_ADC_ConfigChannel+0x4ec>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d165      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x4f8>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d160      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002868 <HAL_ADC_ConfigChannel+0x4e8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	f040 80b6 	bne.w	800292e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a13      	ldr	r2, [pc, #76]	@ (8002814 <HAL_ADC_ConfigChannel+0x494>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x456>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a22      	ldr	r2, [pc, #136]	@ (800285c <HAL_ADC_ConfigChannel+0x4dc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x45a>
 80027d6:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <HAL_ADC_ConfigChannel+0x4e0>)
 80027d8:	e000      	b.n	80027dc <HAL_ADC_ConfigChannel+0x45c>
 80027da:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <HAL_ADC_ConfigChannel+0x4e4>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7ff f8a2 	bl	800192e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ea:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <HAL_ADC_ConfigChannel+0x4f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	4a20      	ldr	r2, [pc, #128]	@ (8002874 <HAL_ADC_ConfigChannel+0x4f4>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	3301      	adds	r3, #1
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80027fe:	e002      	b.n	8002806 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3b01      	subs	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f9      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800280c:	e08f      	b.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
 800280e:	bf00      	nop
 8002810:	47ff0000 	.word	0x47ff0000
 8002814:	40022000 	.word	0x40022000
 8002818:	04300002 	.word	0x04300002
 800281c:	08600004 	.word	0x08600004
 8002820:	0c900008 	.word	0x0c900008
 8002824:	10c00010 	.word	0x10c00010
 8002828:	14f00020 	.word	0x14f00020
 800282c:	2a000400 	.word	0x2a000400
 8002830:	2e300800 	.word	0x2e300800
 8002834:	32601000 	.word	0x32601000
 8002838:	43210000 	.word	0x43210000
 800283c:	4b840000 	.word	0x4b840000
 8002840:	4fb80000 	.word	0x4fb80000
 8002844:	47520000 	.word	0x47520000
 8002848:	36902000 	.word	0x36902000
 800284c:	25b00200 	.word	0x25b00200
 8002850:	21800100 	.word	0x21800100
 8002854:	1d500080 	.word	0x1d500080
 8002858:	19200040 	.word	0x19200040
 800285c:	40022100 	.word	0x40022100
 8002860:	40022300 	.word	0x40022300
 8002864:	58026300 	.word	0x58026300
 8002868:	58026000 	.word	0x58026000
 800286c:	cb840000 	.word	0xcb840000
 8002870:	24000000 	.word	0x24000000
 8002874:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a31      	ldr	r2, [pc, #196]	@ (8002944 <HAL_ADC_ConfigChannel+0x5c4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11e      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x540>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d119      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2d      	ldr	r2, [pc, #180]	@ (8002948 <HAL_ADC_ConfigChannel+0x5c8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d14b      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2c      	ldr	r2, [pc, #176]	@ (800294c <HAL_ADC_ConfigChannel+0x5cc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x52a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002950 <HAL_ADC_ConfigChannel+0x5d0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x52e>
 80028aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002954 <HAL_ADC_ConfigChannel+0x5d4>)
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x530>
 80028ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002958 <HAL_ADC_ConfigChannel+0x5d8>)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7ff f838 	bl	800192e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028be:	e036      	b.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_ADC_ConfigChannel+0x5dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d131      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d12c      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002948 <HAL_ADC_ConfigChannel+0x5c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d127      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_ADC_ConfigChannel+0x5cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x572>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_ADC_ConfigChannel+0x5d0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x576>
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <HAL_ADC_ConfigChannel+0x5d4>)
 80028f4:	e000      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x578>
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_ADC_ConfigChannel+0x5d8>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f7ff f814 	bl	800192e <LL_ADC_SetCommonPathInternalCh>
 8002906:	e012      	b.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800291a:	e008      	b.n	800292e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800293a:	4618      	mov	r0, r3
 800293c:	3734      	adds	r7, #52	@ 0x34
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
 8002942:	bf00      	nop
 8002944:	c7520000 	.word	0xc7520000
 8002948:	58026000 	.word	0x58026000
 800294c:	40022000 	.word	0x40022000
 8002950:	40022100 	.word	0x40022100
 8002954:	40022300 	.word	0x40022300
 8002958:	58026300 	.word	0x58026300
 800295c:	cfb80000 	.word	0xcfb80000

08002960 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f9f4 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 800297c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fa16 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8002988:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8098 	beq.w	8002ac8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02a      	beq.n	80029fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7d5b      	ldrb	r3, [r3, #21]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d126      	bne.n	80029fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7d1b      	ldrb	r3, [r3, #20]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d122      	bne.n	80029fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029ba:	e014      	b.n	80029e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4a45      	ldr	r2, [pc, #276]	@ (8002ad4 <ADC_ConversionStop+0x174>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d90d      	bls.n	80029e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f043 0210 	orr.w	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e074      	b.n	8002aca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3301      	adds	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d1e3      	bne.n	80029bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2240      	movs	r2, #64	@ 0x40
 80029fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d014      	beq.n	8002a2c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f9ac 	bl	8001d64 <LL_ADC_REG_IsConversionOngoing>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f969 	bl	8001cee <LL_ADC_IsDisableOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f988 	bl	8001d3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d014      	beq.n	8002a5c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f9bc 	bl	8001db4 <LL_ADC_INJ_IsConversionOngoing>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f951 	bl	8001cee <LL_ADC_IsDisableOngoing>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f998 	bl	8001d8c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d005      	beq.n	8002a6e <ADC_ConversionStop+0x10e>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d105      	bne.n	8002a74 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a68:	230c      	movs	r3, #12
 8002a6a:	617b      	str	r3, [r7, #20]
        break;
 8002a6c:	e005      	b.n	8002a7a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	617b      	str	r3, [r7, #20]
        break;
 8002a72:	e002      	b.n	8002a7a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a74:	2304      	movs	r3, #4
 8002a76:	617b      	str	r3, [r7, #20]
        break;
 8002a78:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fef3 	bl	8001864 <HAL_GetTick>
 8002a7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a80:	e01b      	b.n	8002aba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a82:	f7fe feef 	bl	8001864 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d914      	bls.n	8002aba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1dc      	bne.n	8002a82 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	000cdbff 	.word	0x000cdbff

08002ad8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f8ef 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d16e      	bne.n	8002bce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <ADC_Enable+0x100>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e05a      	b.n	8002bd0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f8aa 	bl	8001c78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b24:	f7fe fe9e 	bl	8001864 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <ADC_Enable+0x104>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <ADC_Enable+0x66>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <ADC_Enable+0x108>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <ADC_Enable+0x6a>
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <ADC_Enable+0x10c>)
 8002b40:	e000      	b.n	8002b44 <ADC_Enable+0x6c>
 8002b42:	4b29      	ldr	r3, [pc, #164]	@ (8002be8 <ADC_Enable+0x110>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f83b 	bl	8001bc0 <LL_ADC_GetMultimode>
 8002b4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <ADC_Enable+0x108>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d002      	beq.n	8002b5c <ADC_Enable+0x84>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e000      	b.n	8002b5e <ADC_Enable+0x86>
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <ADC_Enable+0x104>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02c      	beq.n	8002bc0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d130      	bne.n	8002bce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6c:	e028      	b.n	8002bc0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f8a8 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f878 	bl	8001c78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b88:	f7fe fe6c 	bl	8001864 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d914      	bls.n	8002bc0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d00d      	beq.n	8002bc0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e007      	b.n	8002bd0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d1cf      	bne.n	8002b6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	8000003f 	.word	0x8000003f
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40022100 	.word	0x40022100
 8002be4:	40022300 	.word	0x40022300
 8002be8:	58026300 	.word	0x58026300

08002bec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f878 	bl	8001cee <LL_ADC_IsDisableOngoing>
 8002bfe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff f85f 	bl	8001cc8 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d047      	beq.n	8002ca0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d144      	bne.n	8002ca0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030d 	and.w	r3, r3, #13
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10c      	bne.n	8002c3e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f839 	bl	8001ca0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2203      	movs	r2, #3
 8002c34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c36:	f7fe fe15 	bl	8001864 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3c:	e029      	b.n	8002c92 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e023      	b.n	8002ca2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c5a:	f7fe fe03 	bl	8001864 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d914      	bls.n	8002c92 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f043 0210 	orr.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1dc      	bne.n	8002c5a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d14b      	bne.n	8002d5c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d021      	beq.n	8002d22 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fecb 	bl	8001a7e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d032      	beq.n	8002d54 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d12b      	bne.n	8002d54 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11f      	bne.n	8002d54 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d20:	e018      	b.n	8002d54 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7fd fd9d 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d5a:	e00e      	b.n	8002d7a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7fd fdb3 	bl	80008d4 <HAL_ADC_ErrorCallback>
}
 8002d6e:	e004      	b.n	8002d7a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff faeb 	bl	800236c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7fd fd85 	bl	80008d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7a      	ldr	r2, [pc, #488]	@ (8002fcc <ADC_ConfigureBoostMode+0x1f8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <ADC_ConfigureBoostMode+0x1c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a79      	ldr	r2, [pc, #484]	@ (8002fd0 <ADC_ConfigureBoostMode+0x1fc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <ADC_ConfigureBoostMode+0x30>
 8002df0:	4b78      	ldr	r3, [pc, #480]	@ (8002fd4 <ADC_ConfigureBoostMode+0x200>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e008      	b.n	8002e16 <ADC_ConfigureBoostMode+0x42>
 8002e04:	4b74      	ldr	r3, [pc, #464]	@ (8002fd8 <ADC_ConfigureBoostMode+0x204>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01c      	beq.n	8002e54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e1a:	f005 ff93 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 8002e1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e28:	d010      	beq.n	8002e4c <ADC_ConfigureBoostMode+0x78>
 8002e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e2e:	d873      	bhi.n	8002f18 <ADC_ConfigureBoostMode+0x144>
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e34:	d002      	beq.n	8002e3c <ADC_ConfigureBoostMode+0x68>
 8002e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e3a:	d16d      	bne.n	8002f18 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	60fb      	str	r3, [r7, #12]
        break;
 8002e4a:	e068      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	60fb      	str	r3, [r7, #12]
        break;
 8002e52:	e064      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e54:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f007 fa1a 	bl	800a294 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e6a:	d051      	beq.n	8002f10 <ADC_ConfigureBoostMode+0x13c>
 8002e6c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e70:	d854      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002e72:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e76:	d047      	beq.n	8002f08 <ADC_ConfigureBoostMode+0x134>
 8002e78:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e7c:	d84e      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002e7e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e82:	d03d      	beq.n	8002f00 <ADC_ConfigureBoostMode+0x12c>
 8002e84:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e88:	d848      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e8e:	d033      	beq.n	8002ef8 <ADC_ConfigureBoostMode+0x124>
 8002e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e94:	d842      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002e96:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e9a:	d029      	beq.n	8002ef0 <ADC_ConfigureBoostMode+0x11c>
 8002e9c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ea0:	d83c      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002ea2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ea6:	d01a      	beq.n	8002ede <ADC_ConfigureBoostMode+0x10a>
 8002ea8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002eac:	d836      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002eae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002eb2:	d014      	beq.n	8002ede <ADC_ConfigureBoostMode+0x10a>
 8002eb4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002eb8:	d830      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebe:	d00e      	beq.n	8002ede <ADC_ConfigureBoostMode+0x10a>
 8002ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec4:	d82a      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002ec6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002eca:	d008      	beq.n	8002ede <ADC_ConfigureBoostMode+0x10a>
 8002ecc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ed0:	d824      	bhi.n	8002f1c <ADC_ConfigureBoostMode+0x148>
 8002ed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ed6:	d002      	beq.n	8002ede <ADC_ConfigureBoostMode+0x10a>
 8002ed8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002edc:	d11e      	bne.n	8002f1c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	60fb      	str	r3, [r7, #12]
        break;
 8002eee:	e016      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
        break;
 8002ef6:	e012      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	60fb      	str	r3, [r7, #12]
        break;
 8002efe:	e00e      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	60fb      	str	r3, [r7, #12]
        break;
 8002f06:	e00a      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	09db      	lsrs	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]
        break;
 8002f0e:	e006      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	60fb      	str	r3, [r7, #12]
        break;
 8002f16:	e002      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f18:	bf00      	nop
 8002f1a:	e000      	b.n	8002f1e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f1c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f1e:	f7fe fcd1 	bl	80018c4 <HAL_GetREVID>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d815      	bhi.n	8002f58 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002fdc <ADC_ConfigureBoostMode+0x208>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d908      	bls.n	8002f46 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f42:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f44:	e03e      	b.n	8002fc4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	e035      	b.n	8002fc4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <ADC_ConfigureBoostMode+0x20c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d808      	bhi.n	8002f78 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f74:	609a      	str	r2, [r3, #8]
}
 8002f76:	e025      	b.n	8002fc4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe4 <ADC_ConfigureBoostMode+0x210>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d80a      	bhi.n	8002f96 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	e016      	b.n	8002fc4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a13      	ldr	r2, [pc, #76]	@ (8002fe8 <ADC_ConfigureBoostMode+0x214>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d80a      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	e007      	b.n	8002fc4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40022100 	.word	0x40022100
 8002fd4:	40022300 	.word	0x40022300
 8002fd8:	58026300 	.word	0x58026300
 8002fdc:	01312d00 	.word	0x01312d00
 8002fe0:	005f5e10 	.word	0x005f5e10
 8002fe4:	00bebc20 	.word	0x00bebc20
 8002fe8:	017d7840 	.word	0x017d7840

08002fec <__NVIC_SetPriorityGrouping>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <__NVIC_SetPriorityGrouping+0x40>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x40>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	05fa0000 	.word	0x05fa0000

08003034 <__NVIC_GetPriorityGrouping>:
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	@ (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	@ 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff4c 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff63 	bl	8003034 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb3 	bl	80030e0 <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff82 	bl	800308c <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff56 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80031b0:	f3bf 8f5f 	dmb	sy
}
 80031b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <HAL_MPU_Disable+0x28>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	4a06      	ldr	r2, [pc, #24]	@ (80031d4 <HAL_MPU_Disable+0x28>)
 80031bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_MPU_Disable+0x2c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00
 80031d8:	e000ed90 	.word	0xe000ed90

080031dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80031e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <HAL_MPU_Enable+0x38>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_MPU_Enable+0x3c>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <HAL_MPU_Enable+0x3c>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80031fa:	f3bf 8f4f 	dsb	sy
}
 80031fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003200:	f3bf 8f6f 	isb	sy
}
 8003204:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed90 	.word	0xe000ed90
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	785a      	ldrb	r2, [r3, #1]
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_MPU_ConfigRegion+0x7c>)
 800322a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_MPU_ConfigRegion+0x7c>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_MPU_ConfigRegion+0x7c>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_MPU_ConfigRegion+0x7c>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7b1b      	ldrb	r3, [r3, #12]
 8003244:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7adb      	ldrb	r3, [r3, #11]
 800324a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800324c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7a9b      	ldrb	r3, [r3, #10]
 8003252:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003254:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7b5b      	ldrb	r3, [r3, #13]
 800325a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800325c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7b9b      	ldrb	r3, [r3, #14]
 8003262:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003264:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7bdb      	ldrb	r3, [r3, #15]
 800326a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800326c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7a5b      	ldrb	r3, [r3, #9]
 8003272:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7a1b      	ldrb	r3, [r3, #8]
 800327a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800327c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003284:	4a04      	ldr	r2, [pc, #16]	@ (8003298 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003286:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003288:	6113      	str	r3, [r2, #16]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000ed90 	.word	0xe000ed90

0800329c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7fe fade 	bl	8001864 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e316      	b.n	80038e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a66      	ldr	r2, [pc, #408]	@ (8003454 <HAL_DMA_Init+0x1b8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a65      	ldr	r2, [pc, #404]	@ (8003458 <HAL_DMA_Init+0x1bc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a63      	ldr	r2, [pc, #396]	@ (800345c <HAL_DMA_Init+0x1c0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d040      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a62      	ldr	r2, [pc, #392]	@ (8003460 <HAL_DMA_Init+0x1c4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a60      	ldr	r2, [pc, #384]	@ (8003464 <HAL_DMA_Init+0x1c8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003468 <HAL_DMA_Init+0x1cc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5d      	ldr	r2, [pc, #372]	@ (800346c <HAL_DMA_Init+0x1d0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003470 <HAL_DMA_Init+0x1d4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d027      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a5a      	ldr	r2, [pc, #360]	@ (8003474 <HAL_DMA_Init+0x1d8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a59      	ldr	r2, [pc, #356]	@ (8003478 <HAL_DMA_Init+0x1dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01d      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a57      	ldr	r2, [pc, #348]	@ (800347c <HAL_DMA_Init+0x1e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a56      	ldr	r2, [pc, #344]	@ (8003480 <HAL_DMA_Init+0x1e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a54      	ldr	r2, [pc, #336]	@ (8003484 <HAL_DMA_Init+0x1e8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a53      	ldr	r2, [pc, #332]	@ (8003488 <HAL_DMA_Init+0x1ec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a51      	ldr	r2, [pc, #324]	@ (800348c <HAL_DMA_Init+0x1f0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a50      	ldr	r2, [pc, #320]	@ (8003490 <HAL_DMA_Init+0x1f4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Init+0xbc>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_DMA_Init+0xbe>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 813b 	beq.w	80035d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a37      	ldr	r2, [pc, #220]	@ (8003454 <HAL_DMA_Init+0x1b8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d04a      	beq.n	8003410 <HAL_DMA_Init+0x174>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a36      	ldr	r2, [pc, #216]	@ (8003458 <HAL_DMA_Init+0x1bc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d045      	beq.n	8003410 <HAL_DMA_Init+0x174>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a34      	ldr	r2, [pc, #208]	@ (800345c <HAL_DMA_Init+0x1c0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d040      	beq.n	8003410 <HAL_DMA_Init+0x174>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a33      	ldr	r2, [pc, #204]	@ (8003460 <HAL_DMA_Init+0x1c4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d03b      	beq.n	8003410 <HAL_DMA_Init+0x174>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <HAL_DMA_Init+0x1c8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d036      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <HAL_DMA_Init+0x1cc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d031      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2e      	ldr	r2, [pc, #184]	@ (800346c <HAL_DMA_Init+0x1d0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02c      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <HAL_DMA_Init+0x1d4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d027      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003474 <HAL_DMA_Init+0x1d8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003478 <HAL_DMA_Init+0x1dc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d01d      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a28      	ldr	r2, [pc, #160]	@ (800347c <HAL_DMA_Init+0x1e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <HAL_DMA_Init+0x1e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a25      	ldr	r2, [pc, #148]	@ (8003484 <HAL_DMA_Init+0x1e8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a24      	ldr	r2, [pc, #144]	@ (8003488 <HAL_DMA_Init+0x1ec>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_DMA_Init+0x174>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_DMA_Init+0x1f0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_DMA_Init+0x1f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <HAL_DMA_Init+0x186>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e007      	b.n	8003432 <HAL_DMA_Init+0x196>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003432:	e02f      	b.n	8003494 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003434:	f7fe fa16 	bl	8001864 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b05      	cmp	r3, #5
 8003440:	d928      	bls.n	8003494 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2203      	movs	r2, #3
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e246      	b.n	80038e2 <HAL_DMA_Init+0x646>
 8003454:	40020010 	.word	0x40020010
 8003458:	40020028 	.word	0x40020028
 800345c:	40020040 	.word	0x40020040
 8003460:	40020058 	.word	0x40020058
 8003464:	40020070 	.word	0x40020070
 8003468:	40020088 	.word	0x40020088
 800346c:	400200a0 	.word	0x400200a0
 8003470:	400200b8 	.word	0x400200b8
 8003474:	40020410 	.word	0x40020410
 8003478:	40020428 	.word	0x40020428
 800347c:	40020440 	.word	0x40020440
 8003480:	40020458 	.word	0x40020458
 8003484:	40020470 	.word	0x40020470
 8003488:	40020488 	.word	0x40020488
 800348c:	400204a0 	.word	0x400204a0
 8003490:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1c8      	bne.n	8003434 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4b83      	ldr	r3, [pc, #524]	@ (80036bc <HAL_DMA_Init+0x420>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	4313      	orrs	r3, r2
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034f8:	4b71      	ldr	r3, [pc, #452]	@ (80036c0 <HAL_DMA_Init+0x424>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b71      	ldr	r3, [pc, #452]	@ (80036c4 <HAL_DMA_Init+0x428>)
 80034fe:	4013      	ands	r3, r2
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003504:	d328      	bcc.n	8003558 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b28      	cmp	r3, #40	@ 0x28
 800350c:	d903      	bls.n	8003516 <HAL_DMA_Init+0x27a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b2e      	cmp	r3, #46	@ 0x2e
 8003514:	d917      	bls.n	8003546 <HAL_DMA_Init+0x2aa>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b3e      	cmp	r3, #62	@ 0x3e
 800351c:	d903      	bls.n	8003526 <HAL_DMA_Init+0x28a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b42      	cmp	r3, #66	@ 0x42
 8003524:	d90f      	bls.n	8003546 <HAL_DMA_Init+0x2aa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b46      	cmp	r3, #70	@ 0x46
 800352c:	d903      	bls.n	8003536 <HAL_DMA_Init+0x29a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b48      	cmp	r3, #72	@ 0x48
 8003534:	d907      	bls.n	8003546 <HAL_DMA_Init+0x2aa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b4e      	cmp	r3, #78	@ 0x4e
 800353c:	d905      	bls.n	800354a <HAL_DMA_Init+0x2ae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b52      	cmp	r3, #82	@ 0x52
 8003544:	d801      	bhi.n	800354a <HAL_DMA_Init+0x2ae>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_DMA_Init+0x2b0>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003556:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0307 	bic.w	r3, r3, #7
 800356e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	2b04      	cmp	r3, #4
 8003580:	d117      	bne.n	80035b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f002 f8ed 	bl	8005774 <DMA_CheckFifoParam>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e197      	b.n	80038e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f002 f828 	bl	8005610 <DMA_CalcBaseAndBitshift>
 80035c0:	4603      	mov	r3, r0
 80035c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	223f      	movs	r2, #63	@ 0x3f
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e0cd      	b.n	8003772 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3b      	ldr	r2, [pc, #236]	@ (80036c8 <HAL_DMA_Init+0x42c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a39      	ldr	r2, [pc, #228]	@ (80036cc <HAL_DMA_Init+0x430>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a38      	ldr	r2, [pc, #224]	@ (80036d0 <HAL_DMA_Init+0x434>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a36      	ldr	r2, [pc, #216]	@ (80036d4 <HAL_DMA_Init+0x438>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a35      	ldr	r2, [pc, #212]	@ (80036d8 <HAL_DMA_Init+0x43c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a33      	ldr	r2, [pc, #204]	@ (80036dc <HAL_DMA_Init+0x440>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a32      	ldr	r2, [pc, #200]	@ (80036e0 <HAL_DMA_Init+0x444>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Init+0x38a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a30      	ldr	r2, [pc, #192]	@ (80036e4 <HAL_DMA_Init+0x448>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_DMA_Init+0x38e>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_DMA_Init+0x390>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8097 	beq.w	8003760 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a24      	ldr	r2, [pc, #144]	@ (80036c8 <HAL_DMA_Init+0x42c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d021      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <HAL_DMA_Init+0x430>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01c      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <HAL_DMA_Init+0x434>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d017      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1f      	ldr	r2, [pc, #124]	@ (80036d4 <HAL_DMA_Init+0x438>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d012      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1e      	ldr	r2, [pc, #120]	@ (80036d8 <HAL_DMA_Init+0x43c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00d      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1c      	ldr	r2, [pc, #112]	@ (80036dc <HAL_DMA_Init+0x440>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d008      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	@ (80036e0 <HAL_DMA_Init+0x444>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <HAL_DMA_Init+0x3e4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <HAL_DMA_Init+0x448>)
 800367e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <HAL_DMA_Init+0x44c>)
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d021      	beq.n	80036ec <HAL_DMA_Init+0x450>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b80      	cmp	r3, #128	@ 0x80
 80036ae:	d102      	bne.n	80036b6 <HAL_DMA_Init+0x41a>
 80036b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036b4:	e01b      	b.n	80036ee <HAL_DMA_Init+0x452>
 80036b6:	2300      	movs	r3, #0
 80036b8:	e019      	b.n	80036ee <HAL_DMA_Init+0x452>
 80036ba:	bf00      	nop
 80036bc:	fe10803f 	.word	0xfe10803f
 80036c0:	5c001000 	.word	0x5c001000
 80036c4:	ffff0000 	.word	0xffff0000
 80036c8:	58025408 	.word	0x58025408
 80036cc:	5802541c 	.word	0x5802541c
 80036d0:	58025430 	.word	0x58025430
 80036d4:	58025444 	.word	0x58025444
 80036d8:	58025458 	.word	0x58025458
 80036dc:	5802546c 	.word	0x5802546c
 80036e0:	58025480 	.word	0x58025480
 80036e4:	58025494 	.word	0x58025494
 80036e8:	fffe000f 	.word	0xfffe000f
 80036ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800370c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800371c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4b6e      	ldr	r3, [pc, #440]	@ (80038ec <HAL_DMA_Init+0x650>)
 8003734:	4413      	add	r3, r2
 8003736:	4a6e      	ldr	r2, [pc, #440]	@ (80038f0 <HAL_DMA_Init+0x654>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 ff63 	bl	8005610 <DMA_CalcBaseAndBitshift>
 800374a:	4603      	mov	r3, r0
 800374c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2201      	movs	r2, #1
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e008      	b.n	8003772 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2240      	movs	r2, #64	@ 0x40
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2203      	movs	r2, #3
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0b7      	b.n	80038e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5f      	ldr	r2, [pc, #380]	@ (80038f4 <HAL_DMA_Init+0x658>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d072      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5d      	ldr	r2, [pc, #372]	@ (80038f8 <HAL_DMA_Init+0x65c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d06d      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a5c      	ldr	r2, [pc, #368]	@ (80038fc <HAL_DMA_Init+0x660>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d068      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a5a      	ldr	r2, [pc, #360]	@ (8003900 <HAL_DMA_Init+0x664>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d063      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a59      	ldr	r2, [pc, #356]	@ (8003904 <HAL_DMA_Init+0x668>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d05e      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a57      	ldr	r2, [pc, #348]	@ (8003908 <HAL_DMA_Init+0x66c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d059      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a56      	ldr	r2, [pc, #344]	@ (800390c <HAL_DMA_Init+0x670>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d054      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a54      	ldr	r2, [pc, #336]	@ (8003910 <HAL_DMA_Init+0x674>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d04f      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a53      	ldr	r2, [pc, #332]	@ (8003914 <HAL_DMA_Init+0x678>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d04a      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a51      	ldr	r2, [pc, #324]	@ (8003918 <HAL_DMA_Init+0x67c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d045      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a50      	ldr	r2, [pc, #320]	@ (800391c <HAL_DMA_Init+0x680>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d040      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003920 <HAL_DMA_Init+0x684>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d03b      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003924 <HAL_DMA_Init+0x688>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d036      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <HAL_DMA_Init+0x68c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d031      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4a      	ldr	r2, [pc, #296]	@ (800392c <HAL_DMA_Init+0x690>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d02c      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a48      	ldr	r2, [pc, #288]	@ (8003930 <HAL_DMA_Init+0x694>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d027      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a47      	ldr	r2, [pc, #284]	@ (8003934 <HAL_DMA_Init+0x698>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d022      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a45      	ldr	r2, [pc, #276]	@ (8003938 <HAL_DMA_Init+0x69c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01d      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a44      	ldr	r2, [pc, #272]	@ (800393c <HAL_DMA_Init+0x6a0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d018      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <HAL_DMA_Init+0x6a4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a41      	ldr	r2, [pc, #260]	@ (8003944 <HAL_DMA_Init+0x6a8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a3f      	ldr	r2, [pc, #252]	@ (8003948 <HAL_DMA_Init+0x6ac>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a3e      	ldr	r2, [pc, #248]	@ (800394c <HAL_DMA_Init+0x6b0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_DMA_Init+0x5c6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3c      	ldr	r2, [pc, #240]	@ (8003950 <HAL_DMA_Init+0x6b4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Init+0x5ca>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_DMA_Init+0x5cc>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d032      	beq.n	80038d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 fffd 	bl	800586c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d102      	bne.n	8003880 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003894:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d010      	beq.n	80038c0 <HAL_DMA_Init+0x624>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d80c      	bhi.n	80038c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f002 f87a 	bl	80059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e008      	b.n	80038d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	a7fdabf8 	.word	0xa7fdabf8
 80038f0:	cccccccd 	.word	0xcccccccd
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
 8003934:	58025408 	.word	0x58025408
 8003938:	5802541c 	.word	0x5802541c
 800393c:	58025430 	.word	0x58025430
 8003940:	58025444 	.word	0x58025444
 8003944:	58025458 	.word	0x58025458
 8003948:	5802546c 	.word	0x5802546c
 800394c:	58025480 	.word	0x58025480
 8003950:	58025494 	.word	0x58025494

08003954 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e226      	b.n	8003dbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_DMA_Start_IT+0x2a>
 800397a:	2302      	movs	r3, #2
 800397c:	e21f      	b.n	8003dbe <HAL_DMA_Start_IT+0x46a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 820a 	bne.w	8003da8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a68      	ldr	r2, [pc, #416]	@ (8003b48 <HAL_DMA_Start_IT+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d04a      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a66      	ldr	r2, [pc, #408]	@ (8003b4c <HAL_DMA_Start_IT+0x1f8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d045      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_DMA_Start_IT+0x1fc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d040      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a63      	ldr	r2, [pc, #396]	@ (8003b54 <HAL_DMA_Start_IT+0x200>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d03b      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a62      	ldr	r2, [pc, #392]	@ (8003b58 <HAL_DMA_Start_IT+0x204>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d036      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a60      	ldr	r2, [pc, #384]	@ (8003b5c <HAL_DMA_Start_IT+0x208>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b60 <HAL_DMA_Start_IT+0x20c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_DMA_Start_IT+0x210>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b68 <HAL_DMA_Start_IT+0x214>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5a      	ldr	r2, [pc, #360]	@ (8003b6c <HAL_DMA_Start_IT+0x218>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a59      	ldr	r2, [pc, #356]	@ (8003b70 <HAL_DMA_Start_IT+0x21c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a57      	ldr	r2, [pc, #348]	@ (8003b74 <HAL_DMA_Start_IT+0x220>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a56      	ldr	r2, [pc, #344]	@ (8003b78 <HAL_DMA_Start_IT+0x224>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_DMA_Start_IT+0x228>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a53      	ldr	r2, [pc, #332]	@ (8003b80 <HAL_DMA_Start_IT+0x22c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_Start_IT+0xee>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a51      	ldr	r2, [pc, #324]	@ (8003b84 <HAL_DMA_Start_IT+0x230>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <HAL_DMA_Start_IT+0x100>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_DMA_Start_IT+0x110>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f001 fc24 	bl	80052b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a34      	ldr	r2, [pc, #208]	@ (8003b48 <HAL_DMA_Start_IT+0x1f4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04a      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a33      	ldr	r2, [pc, #204]	@ (8003b4c <HAL_DMA_Start_IT+0x1f8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d045      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a31      	ldr	r2, [pc, #196]	@ (8003b50 <HAL_DMA_Start_IT+0x1fc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d040      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a30      	ldr	r2, [pc, #192]	@ (8003b54 <HAL_DMA_Start_IT+0x200>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d03b      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b58 <HAL_DMA_Start_IT+0x204>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d036      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b5c <HAL_DMA_Start_IT+0x208>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d031      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b60 <HAL_DMA_Start_IT+0x20c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02c      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2a      	ldr	r2, [pc, #168]	@ (8003b64 <HAL_DMA_Start_IT+0x210>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d027      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	@ (8003b68 <HAL_DMA_Start_IT+0x214>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a27      	ldr	r2, [pc, #156]	@ (8003b6c <HAL_DMA_Start_IT+0x218>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d01d      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <HAL_DMA_Start_IT+0x21c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <HAL_DMA_Start_IT+0x220>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_DMA_Start_IT+0x224>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a21      	ldr	r2, [pc, #132]	@ (8003b7c <HAL_DMA_Start_IT+0x228>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <HAL_DMA_Start_IT+0x22c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_DMA_Start_IT+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_DMA_Start_IT+0x230>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA_Start_IT+0x1c0>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_Start_IT+0x1c2>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 021e 	bic.w	r2, r3, #30
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0216 	orr.w	r2, r2, #22
 8003b2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d03e      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0208 	orr.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e035      	b.n	8003bb4 <HAL_DMA_Start_IT+0x260>
 8003b48:	40020010 	.word	0x40020010
 8003b4c:	40020028 	.word	0x40020028
 8003b50:	40020040 	.word	0x40020040
 8003b54:	40020058 	.word	0x40020058
 8003b58:	40020070 	.word	0x40020070
 8003b5c:	40020088 	.word	0x40020088
 8003b60:	400200a0 	.word	0x400200a0
 8003b64:	400200b8 	.word	0x400200b8
 8003b68:	40020410 	.word	0x40020410
 8003b6c:	40020428 	.word	0x40020428
 8003b70:	40020440 	.word	0x40020440
 8003b74:	40020458 	.word	0x40020458
 8003b78:	40020470 	.word	0x40020470
 8003b7c:	40020488 	.word	0x40020488
 8003b80:	400204a0 	.word	0x400204a0
 8003b84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 020e 	bic.w	r2, r3, #14
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 020a 	orr.w	r2, r2, #10
 8003b9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0204 	orr.w	r2, r2, #4
 8003bb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a83      	ldr	r2, [pc, #524]	@ (8003dc8 <HAL_DMA_Start_IT+0x474>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d072      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a82      	ldr	r2, [pc, #520]	@ (8003dcc <HAL_DMA_Start_IT+0x478>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d06d      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a80      	ldr	r2, [pc, #512]	@ (8003dd0 <HAL_DMA_Start_IT+0x47c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d068      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7f      	ldr	r2, [pc, #508]	@ (8003dd4 <HAL_DMA_Start_IT+0x480>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d063      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd8 <HAL_DMA_Start_IT+0x484>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d05e      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7c      	ldr	r2, [pc, #496]	@ (8003ddc <HAL_DMA_Start_IT+0x488>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d059      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7a      	ldr	r2, [pc, #488]	@ (8003de0 <HAL_DMA_Start_IT+0x48c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d054      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a79      	ldr	r2, [pc, #484]	@ (8003de4 <HAL_DMA_Start_IT+0x490>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04f      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a77      	ldr	r2, [pc, #476]	@ (8003de8 <HAL_DMA_Start_IT+0x494>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d04a      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a76      	ldr	r2, [pc, #472]	@ (8003dec <HAL_DMA_Start_IT+0x498>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d045      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a74      	ldr	r2, [pc, #464]	@ (8003df0 <HAL_DMA_Start_IT+0x49c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d040      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a73      	ldr	r2, [pc, #460]	@ (8003df4 <HAL_DMA_Start_IT+0x4a0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d03b      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a71      	ldr	r2, [pc, #452]	@ (8003df8 <HAL_DMA_Start_IT+0x4a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d036      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a70      	ldr	r2, [pc, #448]	@ (8003dfc <HAL_DMA_Start_IT+0x4a8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d031      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_DMA_Start_IT+0x4ac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02c      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e04 <HAL_DMA_Start_IT+0x4b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d027      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6b      	ldr	r2, [pc, #428]	@ (8003e08 <HAL_DMA_Start_IT+0x4b4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d022      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6a      	ldr	r2, [pc, #424]	@ (8003e0c <HAL_DMA_Start_IT+0x4b8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d01d      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	@ (8003e10 <HAL_DMA_Start_IT+0x4bc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d018      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a67      	ldr	r2, [pc, #412]	@ (8003e14 <HAL_DMA_Start_IT+0x4c0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d013      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a65      	ldr	r2, [pc, #404]	@ (8003e18 <HAL_DMA_Start_IT+0x4c4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00e      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a64      	ldr	r2, [pc, #400]	@ (8003e1c <HAL_DMA_Start_IT+0x4c8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a62      	ldr	r2, [pc, #392]	@ (8003e20 <HAL_DMA_Start_IT+0x4cc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d004      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x350>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a61      	ldr	r2, [pc, #388]	@ (8003e24 <HAL_DMA_Start_IT+0x4d0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_DMA_Start_IT+0x354>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_DMA_Start_IT+0x356>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01a      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a37      	ldr	r2, [pc, #220]	@ (8003dc8 <HAL_DMA_Start_IT+0x474>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a36      	ldr	r2, [pc, #216]	@ (8003dcc <HAL_DMA_Start_IT+0x478>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	@ (8003dd0 <HAL_DMA_Start_IT+0x47c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a33      	ldr	r2, [pc, #204]	@ (8003dd4 <HAL_DMA_Start_IT+0x480>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a31      	ldr	r2, [pc, #196]	@ (8003dd8 <HAL_DMA_Start_IT+0x484>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a30      	ldr	r2, [pc, #192]	@ (8003ddc <HAL_DMA_Start_IT+0x488>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <HAL_DMA_Start_IT+0x48c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <HAL_DMA_Start_IT+0x490>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2b      	ldr	r2, [pc, #172]	@ (8003de8 <HAL_DMA_Start_IT+0x494>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2a      	ldr	r2, [pc, #168]	@ (8003dec <HAL_DMA_Start_IT+0x498>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	@ (8003df0 <HAL_DMA_Start_IT+0x49c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <HAL_DMA_Start_IT+0x4a0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a25      	ldr	r2, [pc, #148]	@ (8003df8 <HAL_DMA_Start_IT+0x4a4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a24      	ldr	r2, [pc, #144]	@ (8003dfc <HAL_DMA_Start_IT+0x4a8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <HAL_DMA_Start_IT+0x4ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_Start_IT+0x430>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a21      	ldr	r2, [pc, #132]	@ (8003e04 <HAL_DMA_Start_IT+0x4b0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <HAL_DMA_Start_IT+0x442>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e012      	b.n	8003dbc <HAL_DMA_Start_IT+0x468>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e009      	b.n	8003dbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020010 	.word	0x40020010
 8003dcc:	40020028 	.word	0x40020028
 8003dd0:	40020040 	.word	0x40020040
 8003dd4:	40020058 	.word	0x40020058
 8003dd8:	40020070 	.word	0x40020070
 8003ddc:	40020088 	.word	0x40020088
 8003de0:	400200a0 	.word	0x400200a0
 8003de4:	400200b8 	.word	0x400200b8
 8003de8:	40020410 	.word	0x40020410
 8003dec:	40020428 	.word	0x40020428
 8003df0:	40020440 	.word	0x40020440
 8003df4:	40020458 	.word	0x40020458
 8003df8:	40020470 	.word	0x40020470
 8003dfc:	40020488 	.word	0x40020488
 8003e00:	400204a0 	.word	0x400204a0
 8003e04:	400204b8 	.word	0x400204b8
 8003e08:	58025408 	.word	0x58025408
 8003e0c:	5802541c 	.word	0x5802541c
 8003e10:	58025430 	.word	0x58025430
 8003e14:	58025444 	.word	0x58025444
 8003e18:	58025458 	.word	0x58025458
 8003e1c:	5802546c 	.word	0x5802546c
 8003e20:	58025480 	.word	0x58025480
 8003e24:	58025494 	.word	0x58025494

08003e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7fd fd18 	bl	8001864 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e2dc      	b.n	80043fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d008      	beq.n	8003e5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e2cd      	b.n	80043fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a76      	ldr	r2, [pc, #472]	@ (800403c <HAL_DMA_Abort+0x214>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d04a      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a74      	ldr	r2, [pc, #464]	@ (8004040 <HAL_DMA_Abort+0x218>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d045      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	@ (8004044 <HAL_DMA_Abort+0x21c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d040      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a71      	ldr	r2, [pc, #452]	@ (8004048 <HAL_DMA_Abort+0x220>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d03b      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a70      	ldr	r2, [pc, #448]	@ (800404c <HAL_DMA_Abort+0x224>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d036      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a6e      	ldr	r2, [pc, #440]	@ (8004050 <HAL_DMA_Abort+0x228>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8004054 <HAL_DMA_Abort+0x22c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d02c      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a6b      	ldr	r2, [pc, #428]	@ (8004058 <HAL_DMA_Abort+0x230>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d027      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800405c <HAL_DMA_Abort+0x234>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a68      	ldr	r2, [pc, #416]	@ (8004060 <HAL_DMA_Abort+0x238>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a67      	ldr	r2, [pc, #412]	@ (8004064 <HAL_DMA_Abort+0x23c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d018      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_DMA_Abort+0x240>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a64      	ldr	r2, [pc, #400]	@ (800406c <HAL_DMA_Abort+0x244>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a62      	ldr	r2, [pc, #392]	@ (8004070 <HAL_DMA_Abort+0x248>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_DMA_Abort+0x24c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_DMA_Abort+0xd6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5f      	ldr	r2, [pc, #380]	@ (8004078 <HAL_DMA_Abort+0x250>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_DMA_Abort+0xda>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_DMA_Abort+0xdc>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 021e 	bic.w	r2, r2, #30
 8003f16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e00a      	b.n	8003f46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 020e 	bic.w	r2, r2, #14
 8003f3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800403c <HAL_DMA_Abort+0x214>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d072      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3a      	ldr	r2, [pc, #232]	@ (8004040 <HAL_DMA_Abort+0x218>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d06d      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a39      	ldr	r2, [pc, #228]	@ (8004044 <HAL_DMA_Abort+0x21c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d068      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a37      	ldr	r2, [pc, #220]	@ (8004048 <HAL_DMA_Abort+0x220>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d063      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a36      	ldr	r2, [pc, #216]	@ (800404c <HAL_DMA_Abort+0x224>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d05e      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_DMA_Abort+0x228>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d059      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <HAL_DMA_Abort+0x22c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d054      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <HAL_DMA_Abort+0x230>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04f      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a30      	ldr	r2, [pc, #192]	@ (800405c <HAL_DMA_Abort+0x234>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d04a      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8004060 <HAL_DMA_Abort+0x238>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d045      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	@ (8004064 <HAL_DMA_Abort+0x23c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d040      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <HAL_DMA_Abort+0x240>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800406c <HAL_DMA_Abort+0x244>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d036      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	@ (8004070 <HAL_DMA_Abort+0x248>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d031      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_DMA_Abort+0x24c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d02c      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <HAL_DMA_Abort+0x250>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d027      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <HAL_DMA_Abort+0x254>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <HAL_DMA_Abort+0x258>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_DMA_Abort+0x25c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <HAL_DMA_Abort+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <HAL_DMA_Abort+0x264>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <HAL_DMA_Abort+0x268>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <HAL_DMA_Abort+0x26c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_DMA_Abort+0x20e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <HAL_DMA_Abort+0x270>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d132      	bne.n	800409c <HAL_DMA_Abort+0x274>
 8004036:	2301      	movs	r3, #1
 8004038:	e031      	b.n	800409e <HAL_DMA_Abort+0x276>
 800403a:	bf00      	nop
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	58025408 	.word	0x58025408
 8004080:	5802541c 	.word	0x5802541c
 8004084:	58025430 	.word	0x58025430
 8004088:	58025444 	.word	0x58025444
 800408c:	58025458 	.word	0x58025458
 8004090:	5802546c 	.word	0x5802546c
 8004094:	58025480 	.word	0x58025480
 8004098:	58025494 	.word	0x58025494
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6d      	ldr	r2, [pc, #436]	@ (800426c <HAL_DMA_Abort+0x444>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004270 <HAL_DMA_Abort+0x448>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <HAL_DMA_Abort+0x44c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	@ (8004278 <HAL_DMA_Abort+0x450>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a67      	ldr	r2, [pc, #412]	@ (800427c <HAL_DMA_Abort+0x454>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a65      	ldr	r2, [pc, #404]	@ (8004280 <HAL_DMA_Abort+0x458>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a64      	ldr	r2, [pc, #400]	@ (8004284 <HAL_DMA_Abort+0x45c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a62      	ldr	r2, [pc, #392]	@ (8004288 <HAL_DMA_Abort+0x460>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a61      	ldr	r2, [pc, #388]	@ (800428c <HAL_DMA_Abort+0x464>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5f      	ldr	r2, [pc, #380]	@ (8004290 <HAL_DMA_Abort+0x468>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5e      	ldr	r2, [pc, #376]	@ (8004294 <HAL_DMA_Abort+0x46c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5c      	ldr	r2, [pc, #368]	@ (8004298 <HAL_DMA_Abort+0x470>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5b      	ldr	r2, [pc, #364]	@ (800429c <HAL_DMA_Abort+0x474>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a59      	ldr	r2, [pc, #356]	@ (80042a0 <HAL_DMA_Abort+0x478>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a58      	ldr	r2, [pc, #352]	@ (80042a4 <HAL_DMA_Abort+0x47c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_DMA_Abort+0x32a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a56      	ldr	r2, [pc, #344]	@ (80042a8 <HAL_DMA_Abort+0x480>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <HAL_DMA_Abort+0x33c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e007      	b.n	8004174 <HAL_DMA_Abort+0x34c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004174:	e013      	b.n	800419e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004176:	f7fd fb75 	bl	8001864 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b05      	cmp	r3, #5
 8004182:	d90c      	bls.n	800419e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e12d      	b.n	80043fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2f      	ldr	r2, [pc, #188]	@ (800426c <HAL_DMA_Abort+0x444>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d04a      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004270 <HAL_DMA_Abort+0x448>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d045      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004274 <HAL_DMA_Abort+0x44c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d040      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004278 <HAL_DMA_Abort+0x450>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a29      	ldr	r2, [pc, #164]	@ (800427c <HAL_DMA_Abort+0x454>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d036      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <HAL_DMA_Abort+0x458>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HAL_DMA_Abort+0x45c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d02c      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a24      	ldr	r2, [pc, #144]	@ (8004288 <HAL_DMA_Abort+0x460>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d027      	beq.n	800424a <HAL_DMA_Abort+0x422>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a23      	ldr	r2, [pc, #140]	@ (800428c <HAL_DMA_Abort+0x464>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_DMA_Abort+0x422>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a21      	ldr	r2, [pc, #132]	@ (8004290 <HAL_DMA_Abort+0x468>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01d      	beq.n	800424a <HAL_DMA_Abort+0x422>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a20      	ldr	r2, [pc, #128]	@ (8004294 <HAL_DMA_Abort+0x46c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_DMA_Abort+0x422>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1e      	ldr	r2, [pc, #120]	@ (8004298 <HAL_DMA_Abort+0x470>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_DMA_Abort+0x422>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1d      	ldr	r2, [pc, #116]	@ (800429c <HAL_DMA_Abort+0x474>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Abort+0x422>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <HAL_DMA_Abort+0x478>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_DMA_Abort+0x422>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1a      	ldr	r2, [pc, #104]	@ (80042a4 <HAL_DMA_Abort+0x47c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_DMA_Abort+0x422>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_DMA_Abort+0x480>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_DMA_Abort+0x426>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_DMA_Abort+0x428>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02b      	beq.n	80042ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	223f      	movs	r2, #63	@ 0x3f
 8004264:	409a      	lsls	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	e02a      	b.n	80042c2 <HAL_DMA_Abort+0x49a>
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4f      	ldr	r2, [pc, #316]	@ (8004404 <HAL_DMA_Abort+0x5dc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d072      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004408 <HAL_DMA_Abort+0x5e0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d06d      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4c      	ldr	r2, [pc, #304]	@ (800440c <HAL_DMA_Abort+0x5e4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d068      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004410 <HAL_DMA_Abort+0x5e8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d063      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a49      	ldr	r2, [pc, #292]	@ (8004414 <HAL_DMA_Abort+0x5ec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d05e      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a47      	ldr	r2, [pc, #284]	@ (8004418 <HAL_DMA_Abort+0x5f0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d059      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a46      	ldr	r2, [pc, #280]	@ (800441c <HAL_DMA_Abort+0x5f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d054      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a44      	ldr	r2, [pc, #272]	@ (8004420 <HAL_DMA_Abort+0x5f8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04f      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a43      	ldr	r2, [pc, #268]	@ (8004424 <HAL_DMA_Abort+0x5fc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04a      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a41      	ldr	r2, [pc, #260]	@ (8004428 <HAL_DMA_Abort+0x600>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d045      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a40      	ldr	r2, [pc, #256]	@ (800442c <HAL_DMA_Abort+0x604>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d040      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3e      	ldr	r2, [pc, #248]	@ (8004430 <HAL_DMA_Abort+0x608>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d03b      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3d      	ldr	r2, [pc, #244]	@ (8004434 <HAL_DMA_Abort+0x60c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d036      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3b      	ldr	r2, [pc, #236]	@ (8004438 <HAL_DMA_Abort+0x610>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3a      	ldr	r2, [pc, #232]	@ (800443c <HAL_DMA_Abort+0x614>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d02c      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <HAL_DMA_Abort+0x618>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d027      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a37      	ldr	r2, [pc, #220]	@ (8004444 <HAL_DMA_Abort+0x61c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a35      	ldr	r2, [pc, #212]	@ (8004448 <HAL_DMA_Abort+0x620>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01d      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a34      	ldr	r2, [pc, #208]	@ (800444c <HAL_DMA_Abort+0x624>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a32      	ldr	r2, [pc, #200]	@ (8004450 <HAL_DMA_Abort+0x628>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <HAL_DMA_Abort+0x62c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <HAL_DMA_Abort+0x630>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2e      	ldr	r2, [pc, #184]	@ (800445c <HAL_DMA_Abort+0x634>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_DMA_Abort+0x58a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <HAL_DMA_Abort+0x638>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_DMA_Abort+0x58e>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_DMA_Abort+0x590>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40020010 	.word	0x40020010
 8004408:	40020028 	.word	0x40020028
 800440c:	40020040 	.word	0x40020040
 8004410:	40020058 	.word	0x40020058
 8004414:	40020070 	.word	0x40020070
 8004418:	40020088 	.word	0x40020088
 800441c:	400200a0 	.word	0x400200a0
 8004420:	400200b8 	.word	0x400200b8
 8004424:	40020410 	.word	0x40020410
 8004428:	40020428 	.word	0x40020428
 800442c:	40020440 	.word	0x40020440
 8004430:	40020458 	.word	0x40020458
 8004434:	40020470 	.word	0x40020470
 8004438:	40020488 	.word	0x40020488
 800443c:	400204a0 	.word	0x400204a0
 8004440:	400204b8 	.word	0x400204b8
 8004444:	58025408 	.word	0x58025408
 8004448:	5802541c 	.word	0x5802541c
 800444c:	58025430 	.word	0x58025430
 8004450:	58025444 	.word	0x58025444
 8004454:	58025458 	.word	0x58025458
 8004458:	5802546c 	.word	0x5802546c
 800445c:	58025480 	.word	0x58025480
 8004460:	58025494 	.word	0x58025494

08004464 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004470:	4b67      	ldr	r3, [pc, #412]	@ (8004610 <HAL_DMA_IRQHandler+0x1ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a67      	ldr	r2, [pc, #412]	@ (8004614 <HAL_DMA_IRQHandler+0x1b0>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004482:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a5f      	ldr	r2, [pc, #380]	@ (8004618 <HAL_DMA_IRQHandler+0x1b4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04a      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a5d      	ldr	r2, [pc, #372]	@ (800461c <HAL_DMA_IRQHandler+0x1b8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d045      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004620 <HAL_DMA_IRQHandler+0x1bc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d040      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004624 <HAL_DMA_IRQHandler+0x1c0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d03b      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a59      	ldr	r2, [pc, #356]	@ (8004628 <HAL_DMA_IRQHandler+0x1c4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d036      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a57      	ldr	r2, [pc, #348]	@ (800462c <HAL_DMA_IRQHandler+0x1c8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a56      	ldr	r2, [pc, #344]	@ (8004630 <HAL_DMA_IRQHandler+0x1cc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a54      	ldr	r2, [pc, #336]	@ (8004634 <HAL_DMA_IRQHandler+0x1d0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d027      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a53      	ldr	r2, [pc, #332]	@ (8004638 <HAL_DMA_IRQHandler+0x1d4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a51      	ldr	r2, [pc, #324]	@ (800463c <HAL_DMA_IRQHandler+0x1d8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a50      	ldr	r2, [pc, #320]	@ (8004640 <HAL_DMA_IRQHandler+0x1dc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a4e      	ldr	r2, [pc, #312]	@ (8004644 <HAL_DMA_IRQHandler+0x1e0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a4d      	ldr	r2, [pc, #308]	@ (8004648 <HAL_DMA_IRQHandler+0x1e4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a4b      	ldr	r2, [pc, #300]	@ (800464c <HAL_DMA_IRQHandler+0x1e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a4a      	ldr	r2, [pc, #296]	@ (8004650 <HAL_DMA_IRQHandler+0x1ec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_DMA_IRQHandler+0xd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a48      	ldr	r2, [pc, #288]	@ (8004654 <HAL_DMA_IRQHandler+0x1f0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_DMA_IRQHandler+0xd6>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_DMA_IRQHandler+0xd8>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 842b 	beq.w	8004d98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2208      	movs	r2, #8
 800454c:	409a      	lsls	r2, r3
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a2 	beq.w	800469c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2e      	ldr	r2, [pc, #184]	@ (8004618 <HAL_DMA_IRQHandler+0x1b4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04a      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2d      	ldr	r2, [pc, #180]	@ (800461c <HAL_DMA_IRQHandler+0x1b8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d045      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2b      	ldr	r2, [pc, #172]	@ (8004620 <HAL_DMA_IRQHandler+0x1bc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d040      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2a      	ldr	r2, [pc, #168]	@ (8004624 <HAL_DMA_IRQHandler+0x1c0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d03b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a28      	ldr	r2, [pc, #160]	@ (8004628 <HAL_DMA_IRQHandler+0x1c4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d036      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a27      	ldr	r2, [pc, #156]	@ (800462c <HAL_DMA_IRQHandler+0x1c8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d031      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a25      	ldr	r2, [pc, #148]	@ (8004630 <HAL_DMA_IRQHandler+0x1cc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a24      	ldr	r2, [pc, #144]	@ (8004634 <HAL_DMA_IRQHandler+0x1d0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d027      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <HAL_DMA_IRQHandler+0x1d4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	@ (800463c <HAL_DMA_IRQHandler+0x1d8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d01d      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_DMA_IRQHandler+0x1dc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <HAL_DMA_IRQHandler+0x1e0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <HAL_DMA_IRQHandler+0x1e4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	@ (800464c <HAL_DMA_IRQHandler+0x1e8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	@ (8004650 <HAL_DMA_IRQHandler+0x1ec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x194>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_DMA_IRQHandler+0x1f0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d12f      	bne.n	8004658 <HAL_DMA_IRQHandler+0x1f4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e02e      	b.n	800466c <HAL_DMA_IRQHandler+0x208>
 800460e:	bf00      	nop
 8004610:	24000000 	.word	0x24000000
 8004614:	1b4e81b5 	.word	0x1b4e81b5
 8004618:	40020010 	.word	0x40020010
 800461c:	40020028 	.word	0x40020028
 8004620:	40020040 	.word	0x40020040
 8004624:	40020058 	.word	0x40020058
 8004628:	40020070 	.word	0x40020070
 800462c:	40020088 	.word	0x40020088
 8004630:	400200a0 	.word	0x400200a0
 8004634:	400200b8 	.word	0x400200b8
 8004638:	40020410 	.word	0x40020410
 800463c:	40020428 	.word	0x40020428
 8004640:	40020440 	.word	0x40020440
 8004644:	40020458 	.word	0x40020458
 8004648:	40020470 	.word	0x40020470
 800464c:	40020488 	.word	0x40020488
 8004650:	400204a0 	.word	0x400204a0
 8004654:	400204b8 	.word	0x400204b8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	bf14      	ite	ne
 8004666:	2301      	movne	r3, #1
 8004668:	2300      	moveq	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d015      	beq.n	800469c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2208      	movs	r2, #8
 800468a:	409a      	lsls	r2, r3
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	f043 0201 	orr.w	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d06e      	beq.n	8004790 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a69      	ldr	r2, [pc, #420]	@ (800485c <HAL_DMA_IRQHandler+0x3f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d04a      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a67      	ldr	r2, [pc, #412]	@ (8004860 <HAL_DMA_IRQHandler+0x3fc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d045      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a66      	ldr	r2, [pc, #408]	@ (8004864 <HAL_DMA_IRQHandler+0x400>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d040      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a64      	ldr	r2, [pc, #400]	@ (8004868 <HAL_DMA_IRQHandler+0x404>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d03b      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a63      	ldr	r2, [pc, #396]	@ (800486c <HAL_DMA_IRQHandler+0x408>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d036      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a61      	ldr	r2, [pc, #388]	@ (8004870 <HAL_DMA_IRQHandler+0x40c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d031      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a60      	ldr	r2, [pc, #384]	@ (8004874 <HAL_DMA_IRQHandler+0x410>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d02c      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004878 <HAL_DMA_IRQHandler+0x414>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d027      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5d      	ldr	r2, [pc, #372]	@ (800487c <HAL_DMA_IRQHandler+0x418>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5b      	ldr	r2, [pc, #364]	@ (8004880 <HAL_DMA_IRQHandler+0x41c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5a      	ldr	r2, [pc, #360]	@ (8004884 <HAL_DMA_IRQHandler+0x420>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a58      	ldr	r2, [pc, #352]	@ (8004888 <HAL_DMA_IRQHandler+0x424>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a57      	ldr	r2, [pc, #348]	@ (800488c <HAL_DMA_IRQHandler+0x428>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a55      	ldr	r2, [pc, #340]	@ (8004890 <HAL_DMA_IRQHandler+0x42c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a54      	ldr	r2, [pc, #336]	@ (8004894 <HAL_DMA_IRQHandler+0x430>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_DMA_IRQHandler+0x2ee>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a52      	ldr	r2, [pc, #328]	@ (8004898 <HAL_DMA_IRQHandler+0x434>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10a      	bne.n	8004768 <HAL_DMA_IRQHandler+0x304>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e003      	b.n	8004770 <HAL_DMA_IRQHandler+0x30c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f043 0202 	orr.w	r2, r3, #2
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2204      	movs	r2, #4
 800479a:	409a      	lsls	r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 808f 	beq.w	80048c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <HAL_DMA_IRQHandler+0x3f8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <HAL_DMA_IRQHandler+0x3fc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a29      	ldr	r2, [pc, #164]	@ (8004864 <HAL_DMA_IRQHandler+0x400>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a27      	ldr	r2, [pc, #156]	@ (8004868 <HAL_DMA_IRQHandler+0x404>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a26      	ldr	r2, [pc, #152]	@ (800486c <HAL_DMA_IRQHandler+0x408>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_DMA_IRQHandler+0x40c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <HAL_DMA_IRQHandler+0x410>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_DMA_IRQHandler+0x414>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a20      	ldr	r2, [pc, #128]	@ (800487c <HAL_DMA_IRQHandler+0x418>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_DMA_IRQHandler+0x41c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <HAL_DMA_IRQHandler+0x420>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_DMA_IRQHandler+0x424>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <HAL_DMA_IRQHandler+0x428>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_DMA_IRQHandler+0x42c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_DMA_IRQHandler+0x430>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_IRQHandler+0x3e2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <HAL_DMA_IRQHandler+0x434>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d12a      	bne.n	800489c <HAL_DMA_IRQHandler+0x438>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e023      	b.n	80048a4 <HAL_DMA_IRQHandler+0x440>
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2204      	movs	r2, #4
 80048b2:	409a      	lsls	r2, r3
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	f043 0204 	orr.w	r2, r3, #4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2210      	movs	r2, #16
 80048ce:	409a      	lsls	r2, r3
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80a6 	beq.w	8004a26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a85      	ldr	r2, [pc, #532]	@ (8004af4 <HAL_DMA_IRQHandler+0x690>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d04a      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a83      	ldr	r2, [pc, #524]	@ (8004af8 <HAL_DMA_IRQHandler+0x694>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d045      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a82      	ldr	r2, [pc, #520]	@ (8004afc <HAL_DMA_IRQHandler+0x698>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d040      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a80      	ldr	r2, [pc, #512]	@ (8004b00 <HAL_DMA_IRQHandler+0x69c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d03b      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7f      	ldr	r2, [pc, #508]	@ (8004b04 <HAL_DMA_IRQHandler+0x6a0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d036      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7d      	ldr	r2, [pc, #500]	@ (8004b08 <HAL_DMA_IRQHandler+0x6a4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d031      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b0c <HAL_DMA_IRQHandler+0x6a8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d02c      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a7a      	ldr	r2, [pc, #488]	@ (8004b10 <HAL_DMA_IRQHandler+0x6ac>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d027      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a79      	ldr	r2, [pc, #484]	@ (8004b14 <HAL_DMA_IRQHandler+0x6b0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a77      	ldr	r2, [pc, #476]	@ (8004b18 <HAL_DMA_IRQHandler+0x6b4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01d      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a76      	ldr	r2, [pc, #472]	@ (8004b1c <HAL_DMA_IRQHandler+0x6b8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a74      	ldr	r2, [pc, #464]	@ (8004b20 <HAL_DMA_IRQHandler+0x6bc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a73      	ldr	r2, [pc, #460]	@ (8004b24 <HAL_DMA_IRQHandler+0x6c0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a71      	ldr	r2, [pc, #452]	@ (8004b28 <HAL_DMA_IRQHandler+0x6c4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a70      	ldr	r2, [pc, #448]	@ (8004b2c <HAL_DMA_IRQHandler+0x6c8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_DMA_IRQHandler+0x516>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6e      	ldr	r2, [pc, #440]	@ (8004b30 <HAL_DMA_IRQHandler+0x6cc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10a      	bne.n	8004990 <HAL_DMA_IRQHandler+0x52c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e009      	b.n	80049a4 <HAL_DMA_IRQHandler+0x540>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d03e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2210      	movs	r2, #16
 80049b2:	409a      	lsls	r2, r3
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d024      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
 80049e4:	e01f      	b.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01b      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
 80049f6:	e016      	b.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d107      	bne.n	8004a16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2220      	movs	r2, #32
 8004a30:	409a      	lsls	r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8110 	beq.w	8004c5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	@ (8004af4 <HAL_DMA_IRQHandler+0x690>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <HAL_DMA_IRQHandler+0x694>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a29      	ldr	r2, [pc, #164]	@ (8004afc <HAL_DMA_IRQHandler+0x698>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	@ (8004b00 <HAL_DMA_IRQHandler+0x69c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_DMA_IRQHandler+0x6a0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <HAL_DMA_IRQHandler+0x6a4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	@ (8004b0c <HAL_DMA_IRQHandler+0x6a8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a22      	ldr	r2, [pc, #136]	@ (8004b10 <HAL_DMA_IRQHandler+0x6ac>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a20      	ldr	r2, [pc, #128]	@ (8004b14 <HAL_DMA_IRQHandler+0x6b0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b18 <HAL_DMA_IRQHandler+0x6b4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <HAL_DMA_IRQHandler+0x6b8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <HAL_DMA_IRQHandler+0x6bc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <HAL_DMA_IRQHandler+0x6c0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	@ (8004b28 <HAL_DMA_IRQHandler+0x6c4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <HAL_DMA_IRQHandler+0x6c8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_IRQHandler+0x678>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a16      	ldr	r2, [pc, #88]	@ (8004b30 <HAL_DMA_IRQHandler+0x6cc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d12b      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x6d0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	e02a      	b.n	8004b48 <HAL_DMA_IRQHandler+0x6e4>
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8087 	beq.w	8004c5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2220      	movs	r2, #32
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d139      	bne.n	8004bde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0216 	bic.w	r2, r2, #22
 8004b78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <HAL_DMA_IRQHandler+0x736>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0208 	bic.w	r2, r2, #8
 8004ba8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	223f      	movs	r2, #63	@ 0x3f
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 834a 	beq.w	8005268 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
          }
          return;
 8004bdc:	e344      	b.n	8005268 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d108      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
 8004c0a:	e027      	b.n	8004c5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d023      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
 8004c1c:	e01e      	b.n	8004c5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0210 	bic.w	r2, r2, #16
 8004c3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8306 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8088 	beq.w	8004d84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2204      	movs	r2, #4
 8004c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a7a      	ldr	r2, [pc, #488]	@ (8004e6c <HAL_DMA_IRQHandler+0xa08>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d04a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a79      	ldr	r2, [pc, #484]	@ (8004e70 <HAL_DMA_IRQHandler+0xa0c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d045      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a77      	ldr	r2, [pc, #476]	@ (8004e74 <HAL_DMA_IRQHandler+0xa10>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d040      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a76      	ldr	r2, [pc, #472]	@ (8004e78 <HAL_DMA_IRQHandler+0xa14>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d03b      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a74      	ldr	r2, [pc, #464]	@ (8004e7c <HAL_DMA_IRQHandler+0xa18>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d036      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a73      	ldr	r2, [pc, #460]	@ (8004e80 <HAL_DMA_IRQHandler+0xa1c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d031      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a71      	ldr	r2, [pc, #452]	@ (8004e84 <HAL_DMA_IRQHandler+0xa20>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02c      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a70      	ldr	r2, [pc, #448]	@ (8004e88 <HAL_DMA_IRQHandler+0xa24>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d027      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e8c <HAL_DMA_IRQHandler+0xa28>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a6d      	ldr	r2, [pc, #436]	@ (8004e90 <HAL_DMA_IRQHandler+0xa2c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01d      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e94 <HAL_DMA_IRQHandler+0xa30>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6a      	ldr	r2, [pc, #424]	@ (8004e98 <HAL_DMA_IRQHandler+0xa34>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	@ (8004e9c <HAL_DMA_IRQHandler+0xa38>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a67      	ldr	r2, [pc, #412]	@ (8004ea0 <HAL_DMA_IRQHandler+0xa3c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ea4 <HAL_DMA_IRQHandler+0xa40>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x8b8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a64      	ldr	r2, [pc, #400]	@ (8004ea8 <HAL_DMA_IRQHandler+0xa44>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <HAL_DMA_IRQHandler+0x8ca>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e007      	b.n	8004d3e <HAL_DMA_IRQHandler+0x8da>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d307      	bcc.n	8004d5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f2      	bne.n	8004d3e <HAL_DMA_IRQHandler+0x8da>
 8004d58:	e000      	b.n	8004d5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d72:	e003      	b.n	8004d7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8272 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
 8004d96:	e26c      	b.n	8005272 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a43      	ldr	r2, [pc, #268]	@ (8004eac <HAL_DMA_IRQHandler+0xa48>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a42      	ldr	r2, [pc, #264]	@ (8004eb0 <HAL_DMA_IRQHandler+0xa4c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a40      	ldr	r2, [pc, #256]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa50>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa54>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <HAL_DMA_IRQHandler+0xa58>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa5c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa60>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x984>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a39      	ldr	r2, [pc, #228]	@ (8004ec8 <HAL_DMA_IRQHandler+0xa64>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d101      	bne.n	8004dec <HAL_DMA_IRQHandler+0x988>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_DMA_IRQHandler+0x98a>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 823f 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2204      	movs	r2, #4
 8004e06:	409a      	lsls	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80cd 	beq.w	8004fac <HAL_DMA_IRQHandler+0xb48>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80c7 	beq.w	8004fac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2204      	movs	r2, #4
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d049      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8210 	beq.w	800526c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e54:	e20a      	b.n	800526c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8206 	beq.w	800526c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e68:	e200      	b.n	800526c <HAL_DMA_IRQHandler+0xe08>
 8004e6a:	bf00      	nop
 8004e6c:	40020010 	.word	0x40020010
 8004e70:	40020028 	.word	0x40020028
 8004e74:	40020040 	.word	0x40020040
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	40020070 	.word	0x40020070
 8004e80:	40020088 	.word	0x40020088
 8004e84:	400200a0 	.word	0x400200a0
 8004e88:	400200b8 	.word	0x400200b8
 8004e8c:	40020410 	.word	0x40020410
 8004e90:	40020428 	.word	0x40020428
 8004e94:	40020440 	.word	0x40020440
 8004e98:	40020458 	.word	0x40020458
 8004e9c:	40020470 	.word	0x40020470
 8004ea0:	40020488 	.word	0x40020488
 8004ea4:	400204a0 	.word	0x400204a0
 8004ea8:	400204b8 	.word	0x400204b8
 8004eac:	58025408 	.word	0x58025408
 8004eb0:	5802541c 	.word	0x5802541c
 8004eb4:	58025430 	.word	0x58025430
 8004eb8:	58025444 	.word	0x58025444
 8004ebc:	58025458 	.word	0x58025458
 8004ec0:	5802546c 	.word	0x5802546c
 8004ec4:	58025480 	.word	0x58025480
 8004ec8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d160      	bne.n	8004f98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7f      	ldr	r2, [pc, #508]	@ (80050d8 <HAL_DMA_IRQHandler+0xc74>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d04a      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7d      	ldr	r2, [pc, #500]	@ (80050dc <HAL_DMA_IRQHandler+0xc78>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d045      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7c      	ldr	r2, [pc, #496]	@ (80050e0 <HAL_DMA_IRQHandler+0xc7c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d040      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	@ (80050e4 <HAL_DMA_IRQHandler+0xc80>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d03b      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a79      	ldr	r2, [pc, #484]	@ (80050e8 <HAL_DMA_IRQHandler+0xc84>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d036      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a77      	ldr	r2, [pc, #476]	@ (80050ec <HAL_DMA_IRQHandler+0xc88>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d031      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a76      	ldr	r2, [pc, #472]	@ (80050f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d02c      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a74      	ldr	r2, [pc, #464]	@ (80050f4 <HAL_DMA_IRQHandler+0xc90>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d027      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	@ (80050f8 <HAL_DMA_IRQHandler+0xc94>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a71      	ldr	r2, [pc, #452]	@ (80050fc <HAL_DMA_IRQHandler+0xc98>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a70      	ldr	r2, [pc, #448]	@ (8005100 <HAL_DMA_IRQHandler+0xc9c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	@ (8005104 <HAL_DMA_IRQHandler+0xca0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6d      	ldr	r2, [pc, #436]	@ (8005108 <HAL_DMA_IRQHandler+0xca4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <HAL_DMA_IRQHandler+0xca8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6a      	ldr	r2, [pc, #424]	@ (8005110 <HAL_DMA_IRQHandler+0xcac>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a68      	ldr	r2, [pc, #416]	@ (8005114 <HAL_DMA_IRQHandler+0xcb0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <HAL_DMA_IRQHandler+0xb24>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0208 	bic.w	r2, r2, #8
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e007      	b.n	8004f98 <HAL_DMA_IRQHandler+0xb34>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8165 	beq.w	800526c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004faa:	e15f      	b.n	800526c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80c5 	beq.w	800514c <HAL_DMA_IRQHandler+0xce8>
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80bf 	beq.w	800514c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 813a 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005004:	e134      	b.n	8005270 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8130 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e12a      	b.n	8005270 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 8089 	bne.w	8005138 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2b      	ldr	r2, [pc, #172]	@ (80050d8 <HAL_DMA_IRQHandler+0xc74>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d04a      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a29      	ldr	r2, [pc, #164]	@ (80050dc <HAL_DMA_IRQHandler+0xc78>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d045      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	@ (80050e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d040      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a26      	ldr	r2, [pc, #152]	@ (80050e4 <HAL_DMA_IRQHandler+0xc80>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d03b      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a25      	ldr	r2, [pc, #148]	@ (80050e8 <HAL_DMA_IRQHandler+0xc84>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d036      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <HAL_DMA_IRQHandler+0xc88>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d031      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02c      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a20      	ldr	r2, [pc, #128]	@ (80050f4 <HAL_DMA_IRQHandler+0xc90>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d027      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1f      	ldr	r2, [pc, #124]	@ (80050f8 <HAL_DMA_IRQHandler+0xc94>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <HAL_DMA_IRQHandler+0xc98>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_DMA_IRQHandler+0xc9c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1a      	ldr	r2, [pc, #104]	@ (8005104 <HAL_DMA_IRQHandler+0xca0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a19      	ldr	r2, [pc, #100]	@ (8005108 <HAL_DMA_IRQHandler+0xca4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a17      	ldr	r2, [pc, #92]	@ (800510c <HAL_DMA_IRQHandler+0xca8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <HAL_DMA_IRQHandler+0xcac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xc62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <HAL_DMA_IRQHandler+0xcb0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d128      	bne.n	8005118 <HAL_DMA_IRQHandler+0xcb4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0214 	bic.w	r2, r2, #20
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e027      	b.n	8005128 <HAL_DMA_IRQHandler+0xcc4>
 80050d8:	40020010 	.word	0x40020010
 80050dc:	40020028 	.word	0x40020028
 80050e0:	40020040 	.word	0x40020040
 80050e4:	40020058 	.word	0x40020058
 80050e8:	40020070 	.word	0x40020070
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	400200b8 	.word	0x400200b8
 80050f8:	40020410 	.word	0x40020410
 80050fc:	40020428 	.word	0x40020428
 8005100:	40020440 	.word	0x40020440
 8005104:	40020458 	.word	0x40020458
 8005108:	40020470 	.word	0x40020470
 800510c:	40020488 	.word	0x40020488
 8005110:	400204a0 	.word	0x400204a0
 8005114:	400204b8 	.word	0x400204b8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 020a 	bic.w	r2, r2, #10
 8005126:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514a:	e091      	b.n	8005270 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2208      	movs	r2, #8
 8005156:	409a      	lsls	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8088 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe0e>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8082 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a41      	ldr	r2, [pc, #260]	@ (8005278 <HAL_DMA_IRQHandler+0xe14>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d04a      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3f      	ldr	r2, [pc, #252]	@ (800527c <HAL_DMA_IRQHandler+0xe18>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d045      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3e      	ldr	r2, [pc, #248]	@ (8005280 <HAL_DMA_IRQHandler+0xe1c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d040      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3c      	ldr	r2, [pc, #240]	@ (8005284 <HAL_DMA_IRQHandler+0xe20>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d03b      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3b      	ldr	r2, [pc, #236]	@ (8005288 <HAL_DMA_IRQHandler+0xe24>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d036      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a39      	ldr	r2, [pc, #228]	@ (800528c <HAL_DMA_IRQHandler+0xe28>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d031      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	@ (8005290 <HAL_DMA_IRQHandler+0xe2c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d02c      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a36      	ldr	r2, [pc, #216]	@ (8005294 <HAL_DMA_IRQHandler+0xe30>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d027      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a35      	ldr	r2, [pc, #212]	@ (8005298 <HAL_DMA_IRQHandler+0xe34>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a33      	ldr	r2, [pc, #204]	@ (800529c <HAL_DMA_IRQHandler+0xe38>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a32      	ldr	r2, [pc, #200]	@ (80052a0 <HAL_DMA_IRQHandler+0xe3c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	@ (80052a4 <HAL_DMA_IRQHandler+0xe40>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <HAL_DMA_IRQHandler+0xe44>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	@ (80052ac <HAL_DMA_IRQHandler+0xe48>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2c      	ldr	r2, [pc, #176]	@ (80052b0 <HAL_DMA_IRQHandler+0xe4c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_DMA_IRQHandler+0xdaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2a      	ldr	r2, [pc, #168]	@ (80052b4 <HAL_DMA_IRQHandler+0xe50>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <HAL_DMA_IRQHandler+0xdbc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 021c 	bic.w	r2, r2, #28
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <HAL_DMA_IRQHandler+0xdcc>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 020e 	bic.w	r2, r2, #14
 800522e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
 8005266:	e004      	b.n	8005272 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005268:	bf00      	nop
 800526a:	e002      	b.n	8005272 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005270:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005272:	3728      	adds	r7, #40	@ 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8

080052b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7f      	ldr	r2, [pc, #508]	@ (80054d4 <DMA_SetConfig+0x21c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d072      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a7d      	ldr	r2, [pc, #500]	@ (80054d8 <DMA_SetConfig+0x220>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d06d      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7c      	ldr	r2, [pc, #496]	@ (80054dc <DMA_SetConfig+0x224>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d068      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7a      	ldr	r2, [pc, #488]	@ (80054e0 <DMA_SetConfig+0x228>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d063      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a79      	ldr	r2, [pc, #484]	@ (80054e4 <DMA_SetConfig+0x22c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d05e      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a77      	ldr	r2, [pc, #476]	@ (80054e8 <DMA_SetConfig+0x230>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d059      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a76      	ldr	r2, [pc, #472]	@ (80054ec <DMA_SetConfig+0x234>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d054      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a74      	ldr	r2, [pc, #464]	@ (80054f0 <DMA_SetConfig+0x238>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d04f      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a73      	ldr	r2, [pc, #460]	@ (80054f4 <DMA_SetConfig+0x23c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d04a      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a71      	ldr	r2, [pc, #452]	@ (80054f8 <DMA_SetConfig+0x240>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d045      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a70      	ldr	r2, [pc, #448]	@ (80054fc <DMA_SetConfig+0x244>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d040      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6e      	ldr	r2, [pc, #440]	@ (8005500 <DMA_SetConfig+0x248>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d03b      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6d      	ldr	r2, [pc, #436]	@ (8005504 <DMA_SetConfig+0x24c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d036      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a6b      	ldr	r2, [pc, #428]	@ (8005508 <DMA_SetConfig+0x250>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6a      	ldr	r2, [pc, #424]	@ (800550c <DMA_SetConfig+0x254>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d02c      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a68      	ldr	r2, [pc, #416]	@ (8005510 <DMA_SetConfig+0x258>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d027      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a67      	ldr	r2, [pc, #412]	@ (8005514 <DMA_SetConfig+0x25c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d022      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a65      	ldr	r2, [pc, #404]	@ (8005518 <DMA_SetConfig+0x260>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01d      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a64      	ldr	r2, [pc, #400]	@ (800551c <DMA_SetConfig+0x264>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a62      	ldr	r2, [pc, #392]	@ (8005520 <DMA_SetConfig+0x268>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a61      	ldr	r2, [pc, #388]	@ (8005524 <DMA_SetConfig+0x26c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005528 <DMA_SetConfig+0x270>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5e      	ldr	r2, [pc, #376]	@ (800552c <DMA_SetConfig+0x274>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005530 <DMA_SetConfig+0x278>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <DMA_SetConfig+0x10e>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <DMA_SetConfig+0x110>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a39      	ldr	r2, [pc, #228]	@ (80054d4 <DMA_SetConfig+0x21c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a38      	ldr	r2, [pc, #224]	@ (80054d8 <DMA_SetConfig+0x220>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d045      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a36      	ldr	r2, [pc, #216]	@ (80054dc <DMA_SetConfig+0x224>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d040      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <DMA_SetConfig+0x228>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03b      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a33      	ldr	r2, [pc, #204]	@ (80054e4 <DMA_SetConfig+0x22c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d036      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a32      	ldr	r2, [pc, #200]	@ (80054e8 <DMA_SetConfig+0x230>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d031      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <DMA_SetConfig+0x234>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02c      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2f      	ldr	r2, [pc, #188]	@ (80054f0 <DMA_SetConfig+0x238>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d027      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2d      	ldr	r2, [pc, #180]	@ (80054f4 <DMA_SetConfig+0x23c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <DMA_SetConfig+0x240>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <DMA_SetConfig+0x244>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a29      	ldr	r2, [pc, #164]	@ (8005500 <DMA_SetConfig+0x248>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <DMA_SetConfig+0x24c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a26      	ldr	r2, [pc, #152]	@ (8005508 <DMA_SetConfig+0x250>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a24      	ldr	r2, [pc, #144]	@ (800550c <DMA_SetConfig+0x254>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a23      	ldr	r2, [pc, #140]	@ (8005510 <DMA_SetConfig+0x258>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <DMA_SetConfig+0x1d4>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <DMA_SetConfig+0x1d6>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d059      	beq.n	8005546 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	223f      	movs	r2, #63	@ 0x3f
 800549c:	409a      	lsls	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d138      	bne.n	8005534 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054d2:	e086      	b.n	80055e2 <DMA_SetConfig+0x32a>
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	e04d      	b.n	80055e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a29      	ldr	r2, [pc, #164]	@ (80055f0 <DMA_SetConfig+0x338>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <DMA_SetConfig+0x2de>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a27      	ldr	r2, [pc, #156]	@ (80055f4 <DMA_SetConfig+0x33c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01d      	beq.n	8005596 <DMA_SetConfig+0x2de>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <DMA_SetConfig+0x340>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <DMA_SetConfig+0x2de>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a24      	ldr	r2, [pc, #144]	@ (80055fc <DMA_SetConfig+0x344>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <DMA_SetConfig+0x2de>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a23      	ldr	r2, [pc, #140]	@ (8005600 <DMA_SetConfig+0x348>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <DMA_SetConfig+0x2de>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a21      	ldr	r2, [pc, #132]	@ (8005604 <DMA_SetConfig+0x34c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <DMA_SetConfig+0x2de>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a20      	ldr	r2, [pc, #128]	@ (8005608 <DMA_SetConfig+0x350>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <DMA_SetConfig+0x2de>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1e      	ldr	r2, [pc, #120]	@ (800560c <DMA_SetConfig+0x354>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <DMA_SetConfig+0x2e2>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <DMA_SetConfig+0x2e4>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d108      	bne.n	80055d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	60da      	str	r2, [r3, #12]
}
 80055d0:	e007      	b.n	80055e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	60da      	str	r2, [r3, #12]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	58025408 	.word	0x58025408
 80055f4:	5802541c 	.word	0x5802541c
 80055f8:	58025430 	.word	0x58025430
 80055fc:	58025444 	.word	0x58025444
 8005600:	58025458 	.word	0x58025458
 8005604:	5802546c 	.word	0x5802546c
 8005608:	58025480 	.word	0x58025480
 800560c:	58025494 	.word	0x58025494

08005610 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a42      	ldr	r2, [pc, #264]	@ (8005728 <DMA_CalcBaseAndBitshift+0x118>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a41      	ldr	r2, [pc, #260]	@ (800572c <DMA_CalcBaseAndBitshift+0x11c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a3f      	ldr	r2, [pc, #252]	@ (8005730 <DMA_CalcBaseAndBitshift+0x120>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a3e      	ldr	r2, [pc, #248]	@ (8005734 <DMA_CalcBaseAndBitshift+0x124>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3c      	ldr	r2, [pc, #240]	@ (8005738 <DMA_CalcBaseAndBitshift+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a3b      	ldr	r2, [pc, #236]	@ (800573c <DMA_CalcBaseAndBitshift+0x12c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a39      	ldr	r2, [pc, #228]	@ (8005740 <DMA_CalcBaseAndBitshift+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a38      	ldr	r2, [pc, #224]	@ (8005744 <DMA_CalcBaseAndBitshift+0x134>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a36      	ldr	r2, [pc, #216]	@ (8005748 <DMA_CalcBaseAndBitshift+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a35      	ldr	r2, [pc, #212]	@ (800574c <DMA_CalcBaseAndBitshift+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a33      	ldr	r2, [pc, #204]	@ (8005750 <DMA_CalcBaseAndBitshift+0x140>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a32      	ldr	r2, [pc, #200]	@ (8005754 <DMA_CalcBaseAndBitshift+0x144>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a30      	ldr	r2, [pc, #192]	@ (8005758 <DMA_CalcBaseAndBitshift+0x148>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <DMA_CalcBaseAndBitshift+0x14c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005760 <DMA_CalcBaseAndBitshift+0x150>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <DMA_CalcBaseAndBitshift+0xa8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005764 <DMA_CalcBaseAndBitshift+0x154>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <DMA_CalcBaseAndBitshift+0xac>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <DMA_CalcBaseAndBitshift+0xae>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d024      	beq.n	800570c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3b10      	subs	r3, #16
 80056ca:	4a27      	ldr	r2, [pc, #156]	@ (8005768 <DMA_CalcBaseAndBitshift+0x158>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	4a24      	ldr	r2, [pc, #144]	@ (800576c <DMA_CalcBaseAndBitshift+0x15c>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d908      	bls.n	80056fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <DMA_CalcBaseAndBitshift+0x160>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	1d1a      	adds	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80056fa:	e00d      	b.n	8005718 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <DMA_CalcBaseAndBitshift+0x160>)
 8005704:	4013      	ands	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6593      	str	r3, [r2, #88]	@ 0x58
 800570a:	e005      	b.n	8005718 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40020010 	.word	0x40020010
 800572c:	40020028 	.word	0x40020028
 8005730:	40020040 	.word	0x40020040
 8005734:	40020058 	.word	0x40020058
 8005738:	40020070 	.word	0x40020070
 800573c:	40020088 	.word	0x40020088
 8005740:	400200a0 	.word	0x400200a0
 8005744:	400200b8 	.word	0x400200b8
 8005748:	40020410 	.word	0x40020410
 800574c:	40020428 	.word	0x40020428
 8005750:	40020440 	.word	0x40020440
 8005754:	40020458 	.word	0x40020458
 8005758:	40020470 	.word	0x40020470
 800575c:	40020488 	.word	0x40020488
 8005760:	400204a0 	.word	0x400204a0
 8005764:	400204b8 	.word	0x400204b8
 8005768:	aaaaaaab 	.word	0xaaaaaaab
 800576c:	0801337c 	.word	0x0801337c
 8005770:	fffffc00 	.word	0xfffffc00

08005774 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d120      	bne.n	80057ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	2b03      	cmp	r3, #3
 800578e:	d858      	bhi.n	8005842 <DMA_CheckFifoParam+0xce>
 8005790:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <DMA_CheckFifoParam+0x24>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057bb 	.word	0x080057bb
 80057a0:	080057a9 	.word	0x080057a9
 80057a4:	08005843 	.word	0x08005843
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d048      	beq.n	8005846 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057b8:	e045      	b.n	8005846 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057c2:	d142      	bne.n	800584a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057c8:	e03f      	b.n	800584a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057d2:	d123      	bne.n	800581c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d838      	bhi.n	800584e <DMA_CheckFifoParam+0xda>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <DMA_CheckFifoParam+0x70>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	080057fb 	.word	0x080057fb
 80057ec:	080057f5 	.word	0x080057f5
 80057f0:	0800580d 	.word	0x0800580d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
        break;
 80057f8:	e030      	b.n	800585c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d025      	beq.n	8005852 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800580a:	e022      	b.n	8005852 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005814:	d11f      	bne.n	8005856 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800581a:	e01c      	b.n	8005856 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b02      	cmp	r3, #2
 8005822:	d902      	bls.n	800582a <DMA_CheckFifoParam+0xb6>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d003      	beq.n	8005830 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005828:	e018      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
        break;
 800582e:	e015      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
    break;
 8005840:	e00b      	b.n	800585a <DMA_CheckFifoParam+0xe6>
        break;
 8005842:	bf00      	nop
 8005844:	e00a      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        break;
 8005846:	bf00      	nop
 8005848:	e008      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        break;
 800584a:	bf00      	nop
 800584c:	e006      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        break;
 800584e:	bf00      	nop
 8005850:	e004      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        break;
 8005852:	bf00      	nop
 8005854:	e002      	b.n	800585c <DMA_CheckFifoParam+0xe8>
        break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <DMA_CheckFifoParam+0xe8>
    break;
 800585a:	bf00      	nop
    }
  }

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop

0800586c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a38      	ldr	r2, [pc, #224]	@ (8005960 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a36      	ldr	r2, [pc, #216]	@ (8005964 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a35      	ldr	r2, [pc, #212]	@ (8005968 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a33      	ldr	r2, [pc, #204]	@ (800596c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a32      	ldr	r2, [pc, #200]	@ (8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a30      	ldr	r2, [pc, #192]	@ (8005974 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005978 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d101      	bne.n	80058ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	3b08      	subs	r3, #8
 80058dc:	4a28      	ldr	r2, [pc, #160]	@ (8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4b26      	ldr	r3, [pc, #152]	@ (8005984 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a24      	ldr	r2, [pc, #144]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80058f8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2201      	movs	r2, #1
 8005902:	409a      	lsls	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005908:	e024      	b.n	8005954 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	3b10      	subs	r3, #16
 8005912:	4a1e      	ldr	r2, [pc, #120]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d806      	bhi.n	8005932 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a1b      	ldr	r2, [pc, #108]	@ (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d902      	bls.n	8005932 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3308      	adds	r3, #8
 8005930:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a16      	ldr	r2, [pc, #88]	@ (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005944:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	2201      	movs	r2, #1
 800594e:	409a      	lsls	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	58025408 	.word	0x58025408
 8005964:	5802541c 	.word	0x5802541c
 8005968:	58025430 	.word	0x58025430
 800596c:	58025444 	.word	0x58025444
 8005970:	58025458 	.word	0x58025458
 8005974:	5802546c 	.word	0x5802546c
 8005978:	58025480 	.word	0x58025480
 800597c:	58025494 	.word	0x58025494
 8005980:	cccccccd 	.word	0xcccccccd
 8005984:	16009600 	.word	0x16009600
 8005988:	58025880 	.word	0x58025880
 800598c:	aaaaaaab 	.word	0xaaaaaaab
 8005990:	400204b8 	.word	0x400204b8
 8005994:	4002040f 	.word	0x4002040f
 8005998:	10008200 	.word	0x10008200
 800599c:	40020880 	.word	0x40020880

080059a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d04a      	beq.n	8005a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d847      	bhi.n	8005a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a25      	ldr	r2, [pc, #148]	@ (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d022      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a24      	ldr	r2, [pc, #144]	@ (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01d      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a22      	ldr	r2, [pc, #136]	@ (8005a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a21      	ldr	r2, [pc, #132]	@ (8005a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a28:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a2a:	e009      	b.n	8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	461a      	mov	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a11      	ldr	r2, [pc, #68]	@ (8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	58025408 	.word	0x58025408
 8005a5c:	5802541c 	.word	0x5802541c
 8005a60:	58025430 	.word	0x58025430
 8005a64:	58025444 	.word	0x58025444
 8005a68:	58025458 	.word	0x58025458
 8005a6c:	5802546c 	.word	0x5802546c
 8005a70:	58025480 	.word	0x58025480
 8005a74:	58025494 	.word	0x58025494
 8005a78:	1600963f 	.word	0x1600963f
 8005a7c:	58025940 	.word	0x58025940
 8005a80:	1000823f 	.word	0x1000823f
 8005a84:	40020940 	.word	0x40020940

08005a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	@ 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a96:	4b89      	ldr	r3, [pc, #548]	@ (8005cbc <HAL_GPIO_Init+0x234>)
 8005a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a9a:	e194      	b.n	8005dc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8186 	beq.w	8005dc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d005      	beq.n	8005acc <HAL_GPIO_Init+0x44>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d130      	bne.n	8005b2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b02:	2201      	movs	r2, #1
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f003 0201 	and.w	r2, r3, #1
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d017      	beq.n	8005b6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d123      	bne.n	8005bbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	08da      	lsrs	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3208      	adds	r2, #8
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	220f      	movs	r2, #15
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	08da      	lsrs	r2, r3, #3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3208      	adds	r2, #8
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	2203      	movs	r2, #3
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 0203 	and.w	r2, r3, #3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80e0 	beq.w	8005dc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c00:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc0 <HAL_GPIO_Init+0x238>)
 8005c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c06:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc0 <HAL_GPIO_Init+0x238>)
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c10:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc0 <HAL_GPIO_Init+0x238>)
 8005c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c1e:	4a29      	ldr	r2, [pc, #164]	@ (8005cc4 <HAL_GPIO_Init+0x23c>)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	3302      	adds	r3, #2
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	220f      	movs	r2, #15
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a20      	ldr	r2, [pc, #128]	@ (8005cc8 <HAL_GPIO_Init+0x240>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d052      	beq.n	8005cf0 <HAL_GPIO_Init+0x268>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ccc <HAL_GPIO_Init+0x244>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_GPIO_Init+0x22e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd0 <HAL_GPIO_Init+0x248>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02b      	beq.n	8005cb2 <HAL_GPIO_Init+0x22a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <HAL_GPIO_Init+0x24c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d025      	beq.n	8005cae <HAL_GPIO_Init+0x226>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <HAL_GPIO_Init+0x250>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01f      	beq.n	8005caa <HAL_GPIO_Init+0x222>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cdc <HAL_GPIO_Init+0x254>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d019      	beq.n	8005ca6 <HAL_GPIO_Init+0x21e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce0 <HAL_GPIO_Init+0x258>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_GPIO_Init+0x21a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a19      	ldr	r2, [pc, #100]	@ (8005ce4 <HAL_GPIO_Init+0x25c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00d      	beq.n	8005c9e <HAL_GPIO_Init+0x216>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a18      	ldr	r2, [pc, #96]	@ (8005ce8 <HAL_GPIO_Init+0x260>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <HAL_GPIO_Init+0x212>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a17      	ldr	r2, [pc, #92]	@ (8005cec <HAL_GPIO_Init+0x264>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d101      	bne.n	8005c96 <HAL_GPIO_Init+0x20e>
 8005c92:	2309      	movs	r3, #9
 8005c94:	e02d      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005c96:	230a      	movs	r3, #10
 8005c98:	e02b      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	e029      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005c9e:	2307      	movs	r3, #7
 8005ca0:	e027      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005ca2:	2306      	movs	r3, #6
 8005ca4:	e025      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005ca6:	2305      	movs	r3, #5
 8005ca8:	e023      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005caa:	2304      	movs	r3, #4
 8005cac:	e021      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e01f      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e01d      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e01b      	b.n	8005cf2 <HAL_GPIO_Init+0x26a>
 8005cba:	bf00      	nop
 8005cbc:	58000080 	.word	0x58000080
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	58000400 	.word	0x58000400
 8005cc8:	58020000 	.word	0x58020000
 8005ccc:	58020400 	.word	0x58020400
 8005cd0:	58020800 	.word	0x58020800
 8005cd4:	58020c00 	.word	0x58020c00
 8005cd8:	58021000 	.word	0x58021000
 8005cdc:	58021400 	.word	0x58021400
 8005ce0:	58021800 	.word	0x58021800
 8005ce4:	58021c00 	.word	0x58021c00
 8005ce8:	58022000 	.word	0x58022000
 8005cec:	58022400 	.word	0x58022400
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	f002 0203 	and.w	r2, r2, #3
 8005cf8:	0092      	lsls	r2, r2, #2
 8005cfa:	4093      	lsls	r3, r2
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d02:	4938      	ldr	r1, [pc, #224]	@ (8005de4 <HAL_GPIO_Init+0x35c>)
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f ae63 	bne.w	8005a9c <HAL_GPIO_Init+0x14>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	3724      	adds	r7, #36	@ 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	58000400 	.word	0x58000400

08005de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
 8005df4:	4613      	mov	r3, r2
 8005df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005df8:	787b      	ldrb	r3, [r7, #1]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dfe:	887a      	ldrh	r2, [r7, #2]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e04:	e003      	b.n	8005e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e06:	887b      	ldrh	r3, [r7, #2]
 8005e08:	041a      	lsls	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	619a      	str	r2, [r3, #24]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e08b      	b.n	8005f46 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fa ff8a 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2224      	movs	r2, #36	@ 0x24
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d107      	bne.n	8005e96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	e006      	b.n	8005ea4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d108      	bne.n	8005ebe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eba:	605a      	str	r2, [r3, #4]
 8005ebc:	e007      	b.n	8005ece <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ecc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f50 <HAL_I2C_Init+0x134>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69d9      	ldr	r1, [r3, #28]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	02008000 	.word	0x02008000

08005f54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	460b      	mov	r3, r1
 8005f62:	817b      	strh	r3, [r7, #10]
 8005f64:	4613      	mov	r3, r2
 8005f66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	f040 80fd 	bne.w	8006170 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_I2C_Master_Transmit+0x30>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0f6      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f8c:	f7fb fc6a 	bl	8001864 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2319      	movs	r3, #25
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f914 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0e1      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2221      	movs	r2, #33	@ 0x21
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	893a      	ldrh	r2, [r7, #8]
 8005fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2bff      	cmp	r3, #255	@ 0xff
 8005fde:	d906      	bls.n	8005fee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e007      	b.n	8005ffe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ffc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d024      	beq.n	8006050 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2db      	uxtb	r3, r3
 800603c:	3301      	adds	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	8979      	ldrh	r1, [r7, #10]
 8006042:	4b4e      	ldr	r3, [pc, #312]	@ (800617c <HAL_I2C_Master_Transmit+0x228>)
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa83 	bl	8006554 <I2C_TransferConfig>
 800604e:	e066      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	b2da      	uxtb	r2, r3
 8006056:	8979      	ldrh	r1, [r7, #10]
 8006058:	4b48      	ldr	r3, [pc, #288]	@ (800617c <HAL_I2C_Master_Transmit+0x228>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fa78 	bl	8006554 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006064:	e05b      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f907 	bl	800627e <I2C_WaitOnTXISFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e07b      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d034      	beq.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d130      	bne.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	@ 0x80
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f880 	bl	80061cc <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e04d      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2bff      	cmp	r3, #255	@ 0xff
 80060de:	d90e      	bls.n	80060fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	22ff      	movs	r2, #255	@ 0xff
 80060e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fa2c 	bl	8006554 <I2C_TransferConfig>
 80060fc:	e00f      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa1b 	bl	8006554 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d19e      	bne.n	8006066 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f8ed 	bl	800630c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e01a      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2220      	movs	r2, #32
 8006142:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <HAL_I2C_Master_Transmit+0x22c>)
 8006150:	400b      	ands	r3, r1
 8006152:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e000      	b.n	8006172 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006170:	2302      	movs	r3, #2
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	80002000 	.word	0x80002000
 8006180:	fe00e800 	.word	0xfe00e800

08006184 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d103      	bne.n	80061a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d007      	beq.n	80061c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	619a      	str	r2, [r3, #24]
  }
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061dc:	e03b      	b.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f8d6 	bl	8006394 <I2C_IsErrorOccurred>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e041      	b.n	8006276 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d02d      	beq.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fb fb33 	bl	8001864 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <I2C_WaitOnFlagUntilTimeout+0x44>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d122      	bne.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4013      	ands	r3, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	429a      	cmp	r2, r3
 800622c:	d113      	bne.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e00f      	b.n	8006276 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf0c      	ite	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	2300      	movne	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d0b4      	beq.n	80061de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800628a:	e033      	b.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f87f 	bl	8006394 <I2C_IsErrorOccurred>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e031      	b.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d025      	beq.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a8:	f7fb fadc 	bl	8001864 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d302      	bcc.n	80062be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d11a      	bne.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d013      	beq.n	80062f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e007      	b.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d1c4      	bne.n	800628c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006318:	e02f      	b.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f838 	bl	8006394 <I2C_IsErrorOccurred>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e02d      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632e:	f7fb fa99 	bl	8001864 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d302      	bcc.n	8006344 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d013      	beq.n	800637a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e007      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b20      	cmp	r3, #32
 8006386:	d1c8      	bne.n	800631a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d068      	beq.n	8006492 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2210      	movs	r2, #16
 80063c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063c8:	e049      	b.n	800645e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d045      	beq.n	800645e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fb fa47 	bl	8001864 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_IsErrorOccurred+0x54>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13a      	bne.n	800645e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640a:	d121      	bne.n	8006450 <I2C_IsErrorOccurred+0xbc>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006412:	d01d      	beq.n	8006450 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d01a      	beq.n	8006450 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006428:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800642a:	f7fb fa1b 	bl	8001864 <HAL_GetTick>
 800642e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006430:	e00e      	b.n	8006450 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006432:	f7fb fa17 	bl	8001864 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b19      	cmp	r3, #25
 800643e:	d907      	bls.n	8006450 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f043 0320 	orr.w	r3, r3, #32
 8006446:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800644e:	e006      	b.n	800645e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d1e9      	bne.n	8006432 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d003      	beq.n	8006474 <I2C_IsErrorOccurred+0xe0>
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0aa      	beq.n	80063ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2220      	movs	r2, #32
 8006482:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f043 0302 	orr.w	r3, r3, #2
 80064ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01c      	beq.n	8006542 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff fe3b 	bl	8006184 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <I2C_IsErrorOccurred+0x1bc>)
 800651a:	400b      	ands	r3, r1
 800651c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	@ 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	fe00e800 	.word	0xfe00e800

08006554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	817b      	strh	r3, [r7, #10]
 8006562:	4613      	mov	r3, r2
 8006564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006566:	897b      	ldrh	r3, [r7, #10]
 8006568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800656c:	7a7b      	ldrb	r3, [r7, #9]
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006574:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	4313      	orrs	r3, r2
 800657e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006582:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	0d5b      	lsrs	r3, r3, #21
 800658e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006592:	4b08      	ldr	r3, [pc, #32]	@ (80065b4 <I2C_TransferConfig+0x60>)
 8006594:	430b      	orrs	r3, r1
 8006596:	43db      	mvns	r3, r3
 8006598:	ea02 0103 	and.w	r1, r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	03ff63ff 	.word	0x03ff63ff

080065b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d138      	bne.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065d8:	2302      	movs	r3, #2
 80065da:	e032      	b.n	8006642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	@ 0x24
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800660a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b20      	cmp	r3, #32
 8006662:	d139      	bne.n	80066d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800666e:	2302      	movs	r3, #2
 8006670:	e033      	b.n	80066da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2224      	movs	r2, #36	@ 0x24
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b086      	sub	sp, #24
 80066ea:	af02      	add	r7, sp, #8
 80066ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0fe      	b.n	80068f6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f00a fab3 	bl	8010c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2203      	movs	r2, #3
 8006716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f006 fe03 	bl	800d32a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	7c1a      	ldrb	r2, [r3, #16]
 800672c:	f88d 2000 	strb.w	r2, [sp]
 8006730:	3304      	adds	r3, #4
 8006732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006734:	f006 fcd4 	bl	800d0e0 <USB_CoreInit>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e0d5      	b.n	80068f6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f006 fdfb 	bl	800d34c <USB_SetCurrentMode>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0c6      	b.n	80068f6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e04a      	b.n	8006804 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800676e:	7bfa      	ldrb	r2, [r7, #15]
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	3315      	adds	r3, #21
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3314      	adds	r3, #20
 8006792:	7bfa      	ldrb	r2, [r7, #15]
 8006794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	b298      	uxth	r0, r3
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	332e      	adds	r3, #46	@ 0x2e
 80067aa:	4602      	mov	r2, r0
 80067ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3318      	adds	r3, #24
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	331c      	adds	r3, #28
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3320      	adds	r3, #32
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	3324      	adds	r3, #36	@ 0x24
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	3301      	adds	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	7bfa      	ldrb	r2, [r7, #15]
 800680a:	429a      	cmp	r2, r3
 800680c:	d3af      	bcc.n	800676e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
 8006812:	e044      	b.n	800689e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006840:	7bfa      	ldrb	r2, [r7, #15]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006856:	7bfa      	ldrb	r2, [r7, #15]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800686c:	7bfa      	ldrb	r2, [r7, #15]
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	3301      	adds	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	791b      	ldrb	r3, [r3, #4]
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d3b5      	bcc.n	8006814 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7c1a      	ldrb	r2, [r3, #16]
 80068b0:	f88d 2000 	strb.w	r2, [sp]
 80068b4:	3304      	adds	r3, #4
 80068b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b8:	f006 fd94 	bl	800d3e4 <USB_DevInit>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e013      	b.n	80068f6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7b1b      	ldrb	r3, [r3, #12]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d102      	bne.n	80068ea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f96f 	bl	8007bc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f007 fdd7 	bl	800e4a2 <USB_DevDisconnect>

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_PCD_Start+0x1c>
 8006916:	2302      	movs	r3, #2
 8006918:	e022      	b.n	8006960 <HAL_PCD_Start+0x62>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006932:	2b01      	cmp	r3, #1
 8006934:	d105      	bne.n	8006942 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f006 fcde 	bl	800d308 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f007 fd85 	bl	800e460 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b08d      	sub	sp, #52	@ 0x34
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f007 fe43 	bl	800e60a <USB_GetMode>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 84b9 	bne.w	80072fe <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f007 fda7 	bl	800e4e4 <USB_ReadInterrupts>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 84af 	beq.w	80072fc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f007 fd94 	bl	800e4e4 <USB_ReadInterrupts>
 80069bc:	4603      	mov	r3, r0
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d107      	bne.n	80069d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f002 0202 	and.w	r2, r2, #2
 80069d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f007 fd82 	bl	800e4e4 <USB_ReadInterrupts>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d161      	bne.n	8006aae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0210 	bic.w	r2, r2, #16
 80069f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	3304      	adds	r3, #4
 8006a18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a24:	d124      	bne.n	8006a70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d035      	beq.n	8006a9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	6a38      	ldr	r0, [r7, #32]
 8006a46:	f007 fbb9 	bl	800e1bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a56:	441a      	add	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a68:	441a      	add	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	615a      	str	r2, [r3, #20]
 8006a6e:	e016      	b.n	8006a9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a7a:	d110      	bne.n	8006a9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a82:	2208      	movs	r2, #8
 8006a84:	4619      	mov	r1, r3
 8006a86:	6a38      	ldr	r0, [r7, #32]
 8006a88:	f007 fb98 	bl	800e1bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a98:	441a      	add	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0210 	orr.w	r2, r2, #16
 8006aac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f007 fd16 	bl	800e4e4 <USB_ReadInterrupts>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006abe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ac2:	f040 80a7 	bne.w	8006c14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f007 fd1b 	bl	800e50a <USB_ReadDevAllOutEpInterrupt>
 8006ad4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006ad6:	e099      	b.n	8006c0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 808e 	beq.w	8006c00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f007 fd3f 	bl	800e572 <USB_ReadDevOutEPInterrupt>
 8006af4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fed1 	bl	80078bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b30:	461a      	mov	r2, r3
 8006b32:	2308      	movs	r3, #8
 8006b34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 ffa7 	bl	8007a8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b54:	461a      	mov	r2, r3
 8006b56:	2310      	movs	r3, #16
 8006b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d030      	beq.n	8006bc6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6c:	2b80      	cmp	r3, #128	@ 0x80
 8006b6e:	d109      	bne.n	8006b84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b86:	4613      	mov	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	3304      	adds	r3, #4
 8006b98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	78db      	ldrb	r3, [r3, #3]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f00a f996 	bl	8010ee0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2320      	movs	r3, #32
 8006be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	3301      	adds	r3, #1
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f47f af62 	bne.w	8006ad8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f007 fc63 	bl	800e4e4 <USB_ReadInterrupts>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c28:	f040 80db 	bne.w	8006de2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f007 fc84 	bl	800e53e <USB_ReadDevAllInEpInterrupt>
 8006c36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006c3c:	e0cd      	b.n	8006dda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80c2 	beq.w	8006dce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f007 fcaa 	bl	800e5ae <USB_ReadDevInEPInterrupt>
 8006c5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d057      	beq.n	8006d16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	69f9      	ldr	r1, [r7, #28]
 8006c82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c86:	4013      	ands	r3, r2
 8006c88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c96:	461a      	mov	r2, r3
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	799b      	ldrb	r3, [r3, #6]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d132      	bne.n	8006d0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca8:	4613      	mov	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3320      	adds	r3, #32
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cba:	4613      	mov	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4403      	add	r3, r0
 8006cc4:	331c      	adds	r3, #28
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4419      	add	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cce:	4613      	mov	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4403      	add	r3, r0
 8006cd8:	3320      	adds	r3, #32
 8006cda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d113      	bne.n	8006d0a <HAL_PCD_IRQHandler+0x3a2>
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	3324      	adds	r3, #36	@ 0x24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d02:	461a      	mov	r2, r3
 8006d04:	2101      	movs	r1, #1
 8006d06:	f007 fcb3 	bl	800e670 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f00a f860 	bl	8010dd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2308      	movs	r3, #8
 8006d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f003 0310 	and.w	r3, r3, #16
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	2340      	movs	r3, #64	@ 0x40
 8006d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d023      	beq.n	8006dbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d76:	6a38      	ldr	r0, [r7, #32]
 8006d78:	f006 fc92 	bl	800d6a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	3310      	adds	r3, #16
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	78db      	ldrb	r3, [r3, #3]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d108      	bne.n	8006daa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f00a f8ad 	bl	8010f04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db6:	461a      	mov	r2, r3
 8006db8:	2302      	movs	r3, #2
 8006dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fcea 	bl	80077a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f47f af2e 	bne.w	8006c3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f007 fb7c 	bl	800e4e4 <USB_ReadInterrupts>
 8006dec:	4603      	mov	r3, r0
 8006dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df6:	d122      	bne.n	8006e3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d108      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fef5 	bl	8007c10 <HAL_PCDEx_LPM_Callback>
 8006e26:	e002      	b.n	8006e2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f00a f84b 	bl	8010ec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f007 fb4e 	bl	800e4e4 <USB_ReadInterrupts>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e52:	d112      	bne.n	8006e7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f00a f807 	bl	8010e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f007 fb30 	bl	800e4e4 <USB_ReadInterrupts>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e8e:	d121      	bne.n	8006ed4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006e9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d111      	bne.n	8006ece <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fea2 	bl	8007c10 <HAL_PCDEx_LPM_Callback>
 8006ecc:	e002      	b.n	8006ed4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f009 ffd2 	bl	8010e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f007 fb03 	bl	800e4e4 <USB_ReadInterrupts>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee8:	f040 80b7 	bne.w	800705a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2110      	movs	r1, #16
 8006f06:	4618      	mov	r0, r3
 8006f08:	f006 fbca 	bl	800d6a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f10:	e046      	b.n	8006fa0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f52:	461a      	mov	r2, r3
 8006f54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d3b2      	bcc.n	8006f12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006fbe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7bdb      	ldrb	r3, [r3, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d016      	beq.n	8006ff6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fd8:	f043 030b 	orr.w	r3, r3, #11
 8006fdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fee:	f043 030b 	orr.w	r3, r3, #11
 8006ff2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ff4:	e015      	b.n	8007022 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007004:	4619      	mov	r1, r3
 8007006:	f242 032b 	movw	r3, #8235	@ 0x202b
 800700a:	4313      	orrs	r3, r2
 800700c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800701c:	f043 030b 	orr.w	r3, r3, #11
 8007020:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007030:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007034:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007044:	461a      	mov	r2, r3
 8007046:	f007 fb13 	bl	800e670 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f007 fa40 	bl	800e4e4 <USB_ReadInterrupts>
 8007064:	4603      	mov	r3, r0
 8007066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706e:	d123      	bne.n	80070b8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f007 fad7 	bl	800e628 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f006 fb87 	bl	800d792 <USB_GetDevSpeed>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681c      	ldr	r4, [r3, #0]
 8007090:	f001 fe58 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 8007094:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800709a:	461a      	mov	r2, r3
 800709c:	4620      	mov	r0, r4
 800709e:	f006 f891 	bl	800d1c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f009 febf 	bl	8010e26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80070b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f007 fa11 	bl	800e4e4 <USB_ReadInterrupts>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d10a      	bne.n	80070e2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f009 fe9c 	bl	8010e0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f002 0208 	and.w	r2, r2, #8
 80070e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f007 f9fc 	bl	800e4e4 <USB_ReadInterrupts>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b80      	cmp	r3, #128	@ 0x80
 80070f4:	d123      	bne.n	800713e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007102:	2301      	movs	r3, #1
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
 8007106:	e014      	b.n	8007132 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800710c:	4613      	mov	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d105      	bne.n	800712c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	b2db      	uxtb	r3, r3
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb0a 	bl	8007740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	3301      	adds	r3, #1
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	791b      	ldrb	r3, [r3, #4]
 8007136:	461a      	mov	r2, r3
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	4293      	cmp	r3, r2
 800713c:	d3e4      	bcc.n	8007108 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f007 f9ce 	bl	800e4e4 <USB_ReadInterrupts>
 8007148:	4603      	mov	r3, r0
 800714a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007152:	d13c      	bne.n	80071ce <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007154:	2301      	movs	r3, #1
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
 8007158:	e02b      	b.n	80071b2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	3318      	adds	r3, #24
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d115      	bne.n	80071ac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007180:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007182:	2b00      	cmp	r3, #0
 8007184:	da12      	bge.n	80071ac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718a:	4613      	mov	r3, r2
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3317      	adds	r3, #23
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 faca 	bl	8007740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	3301      	adds	r3, #1
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d3cd      	bcc.n	800715a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80071cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f007 f986 	bl	800e4e4 <USB_ReadInterrupts>
 80071d8:	4603      	mov	r3, r0
 80071da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e2:	d156      	bne.n	8007292 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071e4:	2301      	movs	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e8:	e045      	b.n	8007276 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fe:	4613      	mov	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d12e      	bne.n	8007270 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007212:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	da2b      	bge.n	8007270 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	0c1a      	lsrs	r2, r3, #16
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007222:	4053      	eors	r3, r2
 8007224:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007228:	2b00      	cmp	r3, #0
 800722a:	d121      	bne.n	8007270 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800723e:	2201      	movs	r2, #1
 8007240:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007268:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800726c:	6053      	str	r3, [r2, #4]
            break;
 800726e:	e008      	b.n	8007282 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	3301      	adds	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	@ 0x24
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	791b      	ldrb	r3, [r3, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	4293      	cmp	r3, r2
 8007280:	d3b3      	bcc.n	80071ea <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f007 f924 	bl	800e4e4 <USB_ReadInterrupts>
 800729c:	4603      	mov	r3, r0
 800729e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a6:	d10a      	bne.n	80072be <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f009 fe3d 	bl	8010f28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80072bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f007 f90e 	bl	800e4e4 <USB_ReadInterrupts>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d115      	bne.n	80072fe <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f009 fe2d 	bl	8010f44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6859      	ldr	r1, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	e000      	b.n	80072fe <HAL_PCD_IRQHandler+0x996>
      return;
 80072fc:	bf00      	nop
    }
  }
}
 80072fe:	3734      	adds	r7, #52	@ 0x34
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}

08007304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_PCD_SetAddress+0x1a>
 800731a:	2302      	movs	r3, #2
 800731c:	e012      	b.n	8007344 <HAL_PCD_SetAddress+0x40>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f007 f86d 	bl	800e414 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	4608      	mov	r0, r1
 8007356:	4611      	mov	r1, r2
 8007358:	461a      	mov	r2, r3
 800735a:	4603      	mov	r3, r0
 800735c:	70fb      	strb	r3, [r7, #3]
 800735e:	460b      	mov	r3, r1
 8007360:	803b      	strh	r3, [r7, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800736a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da0f      	bge.n	8007392 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	705a      	strb	r2, [r3, #1]
 8007390:	e00f      	b.n	80073b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	f003 020f 	and.w	r2, r3, #15
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80073be:	883b      	ldrh	r3, [r7, #0]
 80073c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	78ba      	ldrb	r2, [r7, #2]
 80073cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073e0:	78bb      	ldrb	r3, [r7, #2]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d102      	bne.n	80073ec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_PCD_EP_Open+0xae>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e00e      	b.n	8007418 <HAL_PCD_EP_Open+0xcc>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68f9      	ldr	r1, [r7, #12]
 8007408:	4618      	mov	r0, r3
 800740a:	f006 f9e7 	bl	800d7dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007416:	7afb      	ldrb	r3, [r7, #11]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800742c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da0f      	bge.n	8007454 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	f003 020f 	and.w	r2, r3, #15
 800743a:	4613      	mov	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	3310      	adds	r3, #16
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	705a      	strb	r2, [r3, #1]
 8007452:	e00f      	b.n	8007474 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	f003 020f 	and.w	r2, r3, #15
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	3304      	adds	r3, #4
 800746c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_PCD_EP_Close+0x6e>
 800748a:	2302      	movs	r3, #2
 800748c:	e00e      	b.n	80074ac <HAL_PCD_EP_Close+0x8c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	4618      	mov	r0, r3
 800749e:	f006 fa25 	bl	800d8ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	460b      	mov	r3, r1
 80074c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	4613      	mov	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2200      	movs	r2, #0
 80074f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	799b      	ldrb	r3, [r3, #6]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d102      	bne.n	8007510 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	799b      	ldrb	r3, [r3, #6]
 8007518:	461a      	mov	r2, r3
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	f006 fac2 	bl	800daa4 <USB_EPStartXfer>

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	f003 020f 	and.w	r2, r3, #15
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800754c:	681b      	ldr	r3, [r3, #0]
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	460b      	mov	r3, r1
 8007568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800756a:	7afb      	ldrb	r3, [r7, #11]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	3310      	adds	r3, #16
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2201      	movs	r2, #1
 8007598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	799b      	ldrb	r3, [r3, #6]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d102      	bne.n	80075b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	799b      	ldrb	r3, [r3, #6]
 80075bc:	461a      	mov	r2, r3
 80075be:	6979      	ldr	r1, [r7, #20]
 80075c0:	f006 fa70 	bl	800daa4 <USB_EPStartXfer>

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7912      	ldrb	r2, [r2, #4]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e04f      	b.n	800768c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da0f      	bge.n	8007614 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 020f 	and.w	r2, r3, #15
 80075fa:	4613      	mov	r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	3310      	adds	r3, #16
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	3304      	adds	r3, #4
 800760a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	705a      	strb	r2, [r3, #1]
 8007612:	e00d      	b.n	8007630 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b2da      	uxtb	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_PCD_EP_SetStall+0x82>
 800764c:	2302      	movs	r3, #2
 800764e:	e01d      	b.n	800768c <HAL_PCD_EP_SetStall+0xbe>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	4618      	mov	r0, r3
 8007660:	f006 fe04 	bl	800e26c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7999      	ldrb	r1, [r3, #6]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800767c:	461a      	mov	r2, r3
 800767e:	f006 fff7 	bl	800e670 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	7912      	ldrb	r2, [r2, #4]
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e042      	b.n	8007738 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da0f      	bge.n	80076da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	f003 020f 	and.w	r2, r3, #15
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	3310      	adds	r3, #16
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	3304      	adds	r3, #4
 80076d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	705a      	strb	r2, [r3, #1]
 80076d8:	e00f      	b.n	80076fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	4613      	mov	r3, r2
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	b2da      	uxtb	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_PCD_EP_ClrStall+0x86>
 8007716:	2302      	movs	r3, #2
 8007718:	e00e      	b.n	8007738 <HAL_PCD_EP_ClrStall+0xa4>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	4618      	mov	r0, r3
 800772a:	f006 fe0d 	bl	800e348 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800774c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007750:	2b00      	cmp	r3, #0
 8007752:	da0c      	bge.n	800776e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	f003 020f 	and.w	r2, r3, #15
 800775a:	4613      	mov	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	3310      	adds	r3, #16
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	3304      	adds	r3, #4
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e00c      	b.n	8007788 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	4413      	add	r3, r2
 8007784:	3304      	adds	r3, #4
 8007786:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	f006 fc2c 	bl	800dfec <USB_EPStopXfer>
 8007794:	4603      	mov	r3, r0
 8007796:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007798:	7afb      	ldrb	r3, [r7, #11]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b08a      	sub	sp, #40	@ 0x28
 80077a6:	af02      	add	r7, sp, #8
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	3310      	adds	r3, #16
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	3304      	adds	r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	695a      	ldr	r2, [r3, #20]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d901      	bls.n	80077da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e06b      	b.n	80078b2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d902      	bls.n	80077f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	3303      	adds	r3, #3
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077fe:	e02a      	b.n	8007856 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	429a      	cmp	r2, r3
 8007814:	d902      	bls.n	800781c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	3303      	adds	r3, #3
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68d9      	ldr	r1, [r3, #12]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4603      	mov	r3, r0
 8007838:	6978      	ldr	r0, [r7, #20]
 800783a:	f006 fc81 	bl	800e140 <USB_WritePacket>

    ep->xfer_buff  += len;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	695a      	ldr	r2, [r3, #20]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	429a      	cmp	r2, r3
 800786a:	d809      	bhi.n	8007880 <PCD_WriteEmptyTxFifo+0xde>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	695a      	ldr	r2, [r3, #20]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007874:	429a      	cmp	r2, r3
 8007876:	d203      	bcs.n	8007880 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1bf      	bne.n	8007800 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	429a      	cmp	r2, r3
 800788a:	d811      	bhi.n	80078b0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	2201      	movs	r2, #1
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	43db      	mvns	r3, r3
 80078a6:	6939      	ldr	r1, [r7, #16]
 80078a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078ac:	4013      	ands	r3, r2
 80078ae:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	333c      	adds	r3, #60	@ 0x3c
 80078d4:	3304      	adds	r3, #4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	799b      	ldrb	r3, [r3, #6]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d17b      	bne.n	80079ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d015      	beq.n	8007928 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4a61      	ldr	r2, [pc, #388]	@ (8007a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	f240 80b9 	bls.w	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80b3 	beq.w	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791e:	461a      	mov	r2, r3
 8007920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007924:	6093      	str	r3, [r2, #8]
 8007926:	e0a7      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793e:	461a      	mov	r2, r3
 8007940:	2320      	movs	r3, #32
 8007942:	6093      	str	r3, [r2, #8]
 8007944:	e098      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8093 	bne.w	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4a4b      	ldr	r2, [pc, #300]	@ (8007a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d90f      	bls.n	800797a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007970:	461a      	mov	r2, r3
 8007972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007976:	6093      	str	r3, [r2, #8]
 8007978:	e07e      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	4413      	add	r3, r2
 800798c:	3304      	adds	r3, #4
 800798e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1a      	ldr	r2, [r3, #32]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	0159      	lsls	r1, r3, #5
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	440b      	add	r3, r1
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d114      	bne.n	80079dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079c4:	461a      	mov	r2, r3
 80079c6:	2101      	movs	r1, #1
 80079c8:	f006 fe52 	bl	800e670 <USB_EP0_OutStart>
 80079cc:	e006      	b.n	80079dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	441a      	add	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f009 f9dc 	bl	8010da0 <HAL_PCD_DataOutStageCallback>
 80079e8:	e046      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d124      	bne.n	8007a3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a0e:	6093      	str	r3, [r2, #8]
 8007a10:	e032      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2320      	movs	r3, #32
 8007a2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f009 f9b3 	bl	8010da0 <HAL_PCD_DataOutStageCallback>
 8007a3a:	e01d      	b.n	8007a78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d114      	bne.n	8007a6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d108      	bne.n	8007a6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a64:	461a      	mov	r2, r3
 8007a66:	2100      	movs	r1, #0
 8007a68:	f006 fe02 	bl	800e670 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f009 f994 	bl	8010da0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	4f54300a 	.word	0x4f54300a
 8007a88:	4f54310a 	.word	0x4f54310a

08007a8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	333c      	adds	r3, #60	@ 0x3c
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a15      	ldr	r2, [pc, #84]	@ (8007b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d90e      	bls.n	8007ae0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ade:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f009 f94b 	bl	8010d7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8007b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d90c      	bls.n	8007b08 <PCD_EP_OutSetupPacket_int+0x7c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	799b      	ldrb	r3, [r3, #6]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d108      	bne.n	8007b08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b00:	461a      	mov	r2, r3
 8007b02:	2101      	movs	r1, #1
 8007b04:	f006 fdb4 	bl	800e670 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	4f54300a 	.word	0x4f54300a

08007b18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
 8007b24:	4613      	mov	r3, r2
 8007b26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b36:	883b      	ldrh	r3, [r7, #0]
 8007b38:	0419      	lsls	r1, r3, #16
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b44:	e028      	b.n	8007b98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	0c1b      	lsrs	r3, r3, #16
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
 8007b58:	e00d      	b.n	8007b76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	3340      	adds	r3, #64	@ 0x40
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	3301      	adds	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	7bfa      	ldrb	r2, [r7, #15]
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d3ec      	bcc.n	8007b5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b80:	883b      	ldrh	r3, [r7, #0]
 8007b82:	0418      	lsls	r0, r3, #16
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6819      	ldr	r1, [r3, #0]
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4302      	orrs	r2, r0
 8007b90:	3340      	adds	r3, #64	@ 0x40
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	887a      	ldrh	r2, [r7, #2]
 8007bb8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bf6:	4b05      	ldr	r3, [pc, #20]	@ (8007c0c <HAL_PCDEx_ActivateLPM+0x44>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	10000003 	.word	0x10000003

08007c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c30:	4b19      	ldr	r3, [pc, #100]	@ (8007c98 <HAL_PWREx_ConfigSupply+0x70>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d00a      	beq.n	8007c52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c3c:	4b16      	ldr	r3, [pc, #88]	@ (8007c98 <HAL_PWREx_ConfigSupply+0x70>)
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d001      	beq.n	8007c4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e01f      	b.n	8007c8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e01d      	b.n	8007c8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c52:	4b11      	ldr	r3, [pc, #68]	@ (8007c98 <HAL_PWREx_ConfigSupply+0x70>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f023 0207 	bic.w	r2, r3, #7
 8007c5a:	490f      	ldr	r1, [pc, #60]	@ (8007c98 <HAL_PWREx_ConfigSupply+0x70>)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c62:	f7f9 fdff 	bl	8001864 <HAL_GetTick>
 8007c66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c68:	e009      	b.n	8007c7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c6a:	f7f9 fdfb 	bl	8001864 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c78:	d901      	bls.n	8007c7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e007      	b.n	8007c8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c7e:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <HAL_PWREx_ConfigSupply+0x70>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8a:	d1ee      	bne.n	8007c6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	58024800 	.word	0x58024800

08007c9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ca0:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	4a04      	ldr	r2, [pc, #16]	@ (8007cb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007caa:	60d3      	str	r3, [r2, #12]
}
 8007cac:	bf00      	nop
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	58024800 	.word	0x58024800

08007cbc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cc4:	f7f9 fdce 	bl	8001864 <HAL_GetTick>
 8007cc8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e05f      	b.n	8007d94 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d107      	bne.n	8007cf0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7f9 f9f5 	bl	80010d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007ce6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f85a 	bl	8007da4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	021a      	lsls	r2, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2120      	movs	r1, #32
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f852 	bl	8007dc0 <QSPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d135      	bne.n	8007d92 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d9c <HAL_QSPI_Init+0xe0>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6852      	ldr	r2, [r2, #4]
 8007d34:	0611      	lsls	r1, r2, #24
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68d2      	ldr	r2, [r2, #12]
 8007d3a:	4311      	orrs	r1, r2
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	69d2      	ldr	r2, [r2, #28]
 8007d40:	4311      	orrs	r1, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6a12      	ldr	r2, [r2, #32]
 8007d46:	4311      	orrs	r1, r2
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	4b12      	ldr	r3, [pc, #72]	@ (8007da0 <HAL_QSPI_Init+0xe4>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6912      	ldr	r2, [r2, #16]
 8007d5e:	0411      	lsls	r1, r2, #16
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6952      	ldr	r2, [r2, #20]
 8007d64:	4311      	orrs	r1, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6992      	ldr	r2, [r2, #24]
 8007d6a:	4311      	orrs	r1, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	430b      	orrs	r3, r1
 8007d72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	00ffff2f 	.word	0x00ffff2f
 8007da0:	ffe0f8fe 	.word	0xffe0f8fe

08007da4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007dd0:	e01a      	b.n	8007e08 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d016      	beq.n	8007e08 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dda:	f7f9 fd43 	bl	8001864 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d302      	bcc.n	8007df0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2204      	movs	r2, #4
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfc:	f043 0201 	orr.w	r2, r3, #1
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e00e      	b.n	8007e26 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d1d6      	bne.n	8007dd2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	@ 0x30
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f000 bc48 	b.w	80086d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8088 	beq.w	8007f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e52:	4b99      	ldr	r3, [pc, #612]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e5c:	4b96      	ldr	r3, [pc, #600]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d007      	beq.n	8007e78 <HAL_RCC_OscConfig+0x48>
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	2b18      	cmp	r3, #24
 8007e6c:	d111      	bne.n	8007e92 <HAL_RCC_OscConfig+0x62>
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d10c      	bne.n	8007e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e78:	4b8f      	ldr	r3, [pc, #572]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d06d      	beq.n	8007f60 <HAL_RCC_OscConfig+0x130>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d169      	bne.n	8007f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f000 bc21 	b.w	80086d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCC_OscConfig+0x7a>
 8007e9c:	4b86      	ldr	r3, [pc, #536]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a85      	ldr	r2, [pc, #532]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	e02e      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x9c>
 8007eb2:	4b81      	ldr	r3, [pc, #516]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a80      	ldr	r2, [pc, #512]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	4b7e      	ldr	r3, [pc, #504]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ec4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e01d      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_RCC_OscConfig+0xc0>
 8007ed6:	4b78      	ldr	r3, [pc, #480]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a77      	ldr	r2, [pc, #476]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	4b75      	ldr	r3, [pc, #468]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a74      	ldr	r2, [pc, #464]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	e00b      	b.n	8007f08 <HAL_RCC_OscConfig+0xd8>
 8007ef0:	4b71      	ldr	r3, [pc, #452]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a70      	ldr	r2, [pc, #448]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4b6e      	ldr	r3, [pc, #440]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6d      	ldr	r2, [pc, #436]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d013      	beq.n	8007f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7f9 fca8 	bl	8001864 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f18:	f7f9 fca4 	bl	8001864 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b64      	cmp	r3, #100	@ 0x64
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e3d4      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f2a:	4b63      	ldr	r3, [pc, #396]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0xe8>
 8007f36:	e014      	b.n	8007f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7f9 fc94 	bl	8001864 <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f40:	f7f9 fc90 	bl	8001864 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	@ 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e3c0      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f52:	4b59      	ldr	r3, [pc, #356]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x110>
 8007f5e:	e000      	b.n	8007f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80ca 	beq.w	8008104 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f70:	4b51      	ldr	r3, [pc, #324]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d007      	beq.n	8007f96 <HAL_RCC_OscConfig+0x166>
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	2b18      	cmp	r3, #24
 8007f8a:	d156      	bne.n	800803a <HAL_RCC_OscConfig+0x20a>
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d151      	bne.n	800803a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f96:	4b48      	ldr	r3, [pc, #288]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <HAL_RCC_OscConfig+0x17e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e392      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fae:	4b42      	ldr	r3, [pc, #264]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 0219 	bic.w	r2, r3, #25
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	493f      	ldr	r1, [pc, #252]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc0:	f7f9 fc50 	bl	8001864 <HAL_GetTick>
 8007fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fc8:	f7f9 fc4c 	bl	8001864 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e37c      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fda:	4b37      	ldr	r3, [pc, #220]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe6:	f7f9 fc6d 	bl	80018c4 <HAL_GetREVID>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d817      	bhi.n	8008024 <HAL_RCC_OscConfig+0x1f4>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d108      	bne.n	800800e <HAL_RCC_OscConfig+0x1de>
 8007ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008004:	4a2c      	ldr	r2, [pc, #176]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800c:	e07a      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800e:	4b2a      	ldr	r3, [pc, #168]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	031b      	lsls	r3, r3, #12
 800801c:	4926      	ldr	r1, [pc, #152]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 800801e:	4313      	orrs	r3, r2
 8008020:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008022:	e06f      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008024:	4b24      	ldr	r3, [pc, #144]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	4921      	ldr	r1, [pc, #132]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008034:	4313      	orrs	r3, r2
 8008036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008038:	e064      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d047      	beq.n	80080d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008042:	4b1d      	ldr	r3, [pc, #116]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f023 0219 	bic.w	r2, r3, #25
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	491a      	ldr	r1, [pc, #104]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008054:	f7f9 fc06 	bl	8001864 <HAL_GetTick>
 8008058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800805c:	f7f9 fc02 	bl	8001864 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e332      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800806e:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f0      	beq.n	800805c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800807a:	f7f9 fc23 	bl	80018c4 <HAL_GetREVID>
 800807e:	4603      	mov	r3, r0
 8008080:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008084:	4293      	cmp	r3, r2
 8008086:	d819      	bhi.n	80080bc <HAL_RCC_OscConfig+0x28c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d108      	bne.n	80080a2 <HAL_RCC_OscConfig+0x272>
 8008090:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008098:	4a07      	ldr	r2, [pc, #28]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 800809a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800809e:	6053      	str	r3, [r2, #4]
 80080a0:	e030      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
 80080a2:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	031b      	lsls	r3, r3, #12
 80080b0:	4901      	ldr	r1, [pc, #4]	@ (80080b8 <HAL_RCC_OscConfig+0x288>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	604b      	str	r3, [r1, #4]
 80080b6:	e025      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
 80080b8:	58024400 	.word	0x58024400
 80080bc:	4b9a      	ldr	r3, [pc, #616]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	061b      	lsls	r3, r3, #24
 80080ca:	4997      	ldr	r1, [pc, #604]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	e018      	b.n	8008104 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080d2:	4b95      	ldr	r3, [pc, #596]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a94      	ldr	r2, [pc, #592]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080de:	f7f9 fbc1 	bl	8001864 <HAL_GetTick>
 80080e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080e4:	e008      	b.n	80080f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080e6:	f7f9 fbbd 	bl	8001864 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e2ed      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080f8:	4b8b      	ldr	r3, [pc, #556]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80a9 	beq.w	8008264 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008112:	4b85      	ldr	r3, [pc, #532]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800811a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800811c:	4b82      	ldr	r3, [pc, #520]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800811e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008120:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d007      	beq.n	8008138 <HAL_RCC_OscConfig+0x308>
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	2b18      	cmp	r3, #24
 800812c:	d13a      	bne.n	80081a4 <HAL_RCC_OscConfig+0x374>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	2b01      	cmp	r3, #1
 8008136:	d135      	bne.n	80081a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008138:	4b7b      	ldr	r3, [pc, #492]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_RCC_OscConfig+0x320>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	2b80      	cmp	r3, #128	@ 0x80
 800814a:	d001      	beq.n	8008150 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e2c1      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008150:	f7f9 fbb8 	bl	80018c4 <HAL_GetREVID>
 8008154:	4603      	mov	r3, r0
 8008156:	f241 0203 	movw	r2, #4099	@ 0x1003
 800815a:	4293      	cmp	r3, r2
 800815c:	d817      	bhi.n	800818e <HAL_RCC_OscConfig+0x35e>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	2b20      	cmp	r3, #32
 8008164:	d108      	bne.n	8008178 <HAL_RCC_OscConfig+0x348>
 8008166:	4b70      	ldr	r3, [pc, #448]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800816e:	4a6e      	ldr	r2, [pc, #440]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008174:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008176:	e075      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008178:	4b6b      	ldr	r3, [pc, #428]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	069b      	lsls	r3, r3, #26
 8008186:	4968      	ldr	r1, [pc, #416]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008188:	4313      	orrs	r3, r2
 800818a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800818c:	e06a      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800818e:	4b66      	ldr	r3, [pc, #408]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	061b      	lsls	r3, r3, #24
 800819c:	4962      	ldr	r1, [pc, #392]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081a2:	e05f      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d042      	beq.n	8008232 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081ac:	4b5e      	ldr	r3, [pc, #376]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a5d      	ldr	r2, [pc, #372]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80081b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7f9 fb54 	bl	8001864 <HAL_GetTick>
 80081bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081c0:	f7f9 fb50 	bl	8001864 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e280      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081d2:	4b55      	ldr	r3, [pc, #340]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081de:	f7f9 fb71 	bl	80018c4 <HAL_GetREVID>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d817      	bhi.n	800821c <HAL_RCC_OscConfig+0x3ec>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d108      	bne.n	8008206 <HAL_RCC_OscConfig+0x3d6>
 80081f4:	4b4c      	ldr	r3, [pc, #304]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80081fc:	4a4a      	ldr	r2, [pc, #296]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80081fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008202:	6053      	str	r3, [r2, #4]
 8008204:	e02e      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
 8008206:	4b48      	ldr	r3, [pc, #288]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	069b      	lsls	r3, r3, #26
 8008214:	4944      	ldr	r1, [pc, #272]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008216:	4313      	orrs	r3, r2
 8008218:	604b      	str	r3, [r1, #4]
 800821a:	e023      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
 800821c:	4b42      	ldr	r3, [pc, #264]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	493f      	ldr	r1, [pc, #252]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800822c:	4313      	orrs	r3, r2
 800822e:	60cb      	str	r3, [r1, #12]
 8008230:	e018      	b.n	8008264 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008232:	4b3d      	ldr	r3, [pc, #244]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a3c      	ldr	r2, [pc, #240]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 8008238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800823c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823e:	f7f9 fb11 	bl	8001864 <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008246:	f7f9 fb0d 	bl	8001864 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e23d      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008258:	4b33      	ldr	r3, [pc, #204]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1f0      	bne.n	8008246 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d036      	beq.n	80082de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d019      	beq.n	80082ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008278:	4b2b      	ldr	r3, [pc, #172]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800827a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827c:	4a2a      	ldr	r2, [pc, #168]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008284:	f7f9 faee 	bl	8001864 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828c:	f7f9 faea 	bl	8001864 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e21a      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800829e:	4b22      	ldr	r3, [pc, #136]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0x45c>
 80082aa:	e018      	b.n	80082de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b8:	f7f9 fad4 	bl	8001864 <HAL_GetTick>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082be:	e008      	b.n	80082d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082c0:	f7f9 fad0 	bl	8001864 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e200      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082d2:	4b15      	ldr	r3, [pc, #84]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f0      	bne.n	80082c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d039      	beq.n	800835e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01c      	beq.n	800832c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 80082f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082fe:	f7f9 fab1 	bl	8001864 <HAL_GetTick>
 8008302:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008306:	f7f9 faad 	bl	8001864 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e1dd      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008318:	4b03      	ldr	r3, [pc, #12]	@ (8008328 <HAL_RCC_OscConfig+0x4f8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x4d6>
 8008324:	e01b      	b.n	800835e <HAL_RCC_OscConfig+0x52e>
 8008326:	bf00      	nop
 8008328:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800832c:	4b9b      	ldr	r3, [pc, #620]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a9a      	ldr	r2, [pc, #616]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008336:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008338:	f7f9 fa94 	bl	8001864 <HAL_GetTick>
 800833c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008340:	f7f9 fa90 	bl	8001864 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e1c0      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008352:	4b92      	ldr	r3, [pc, #584]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8081 	beq.w	800846e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800836c:	4b8c      	ldr	r3, [pc, #560]	@ (80085a0 <HAL_RCC_OscConfig+0x770>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a8b      	ldr	r2, [pc, #556]	@ (80085a0 <HAL_RCC_OscConfig+0x770>)
 8008372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008378:	f7f9 fa74 	bl	8001864 <HAL_GetTick>
 800837c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008380:	f7f9 fa70 	bl	8001864 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b64      	cmp	r3, #100	@ 0x64
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e1a0      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008392:	4b83      	ldr	r3, [pc, #524]	@ (80085a0 <HAL_RCC_OscConfig+0x770>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f0      	beq.n	8008380 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d106      	bne.n	80083b4 <HAL_RCC_OscConfig+0x584>
 80083a6:	4b7d      	ldr	r3, [pc, #500]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	4a7c      	ldr	r2, [pc, #496]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083ac:	f043 0301 	orr.w	r3, r3, #1
 80083b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b2:	e02d      	b.n	8008410 <HAL_RCC_OscConfig+0x5e0>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <HAL_RCC_OscConfig+0x5a6>
 80083bc:	4b77      	ldr	r3, [pc, #476]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c0:	4a76      	ldr	r2, [pc, #472]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083c8:	4b74      	ldr	r3, [pc, #464]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083cc:	4a73      	ldr	r2, [pc, #460]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083ce:	f023 0304 	bic.w	r3, r3, #4
 80083d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d4:	e01c      	b.n	8008410 <HAL_RCC_OscConfig+0x5e0>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCC_OscConfig+0x5c8>
 80083de:	4b6f      	ldr	r3, [pc, #444]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e2:	4a6e      	ldr	r2, [pc, #440]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083e4:	f043 0304 	orr.w	r3, r3, #4
 80083e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083ea:	4b6c      	ldr	r3, [pc, #432]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	4a6b      	ldr	r2, [pc, #428]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80083f6:	e00b      	b.n	8008410 <HAL_RCC_OscConfig+0x5e0>
 80083f8:	4b68      	ldr	r3, [pc, #416]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083fc:	4a67      	ldr	r2, [pc, #412]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80083fe:	f023 0301 	bic.w	r3, r3, #1
 8008402:	6713      	str	r3, [r2, #112]	@ 0x70
 8008404:	4b65      	ldr	r3, [pc, #404]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008408:	4a64      	ldr	r2, [pc, #400]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800840a:	f023 0304 	bic.w	r3, r3, #4
 800840e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d015      	beq.n	8008444 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008418:	f7f9 fa24 	bl	8001864 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800841e:	e00a      	b.n	8008436 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008420:	f7f9 fa20 	bl	8001864 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800842e:	4293      	cmp	r3, r2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e14e      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008436:	4b59      	ldr	r3, [pc, #356]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0ee      	beq.n	8008420 <HAL_RCC_OscConfig+0x5f0>
 8008442:	e014      	b.n	800846e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008444:	f7f9 fa0e 	bl	8001864 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800844a:	e00a      	b.n	8008462 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800844c:	f7f9 fa0a 	bl	8001864 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800845a:	4293      	cmp	r3, r2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e138      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008462:	4b4e      	ldr	r3, [pc, #312]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1ee      	bne.n	800844c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 812d 	beq.w	80086d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008478:	4b48      	ldr	r3, [pc, #288]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008480:	2b18      	cmp	r3, #24
 8008482:	f000 80bd 	beq.w	8008600 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	2b02      	cmp	r3, #2
 800848c:	f040 809e 	bne.w	80085cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008490:	4b42      	ldr	r3, [pc, #264]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a41      	ldr	r2, [pc, #260]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800849a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849c:	f7f9 f9e2 	bl	8001864 <HAL_GetTick>
 80084a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a4:	f7f9 f9de 	bl	8001864 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e10e      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084b6:	4b39      	ldr	r3, [pc, #228]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1f0      	bne.n	80084a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084c2:	4b36      	ldr	r3, [pc, #216]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80084c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084c6:	4b37      	ldr	r3, [pc, #220]	@ (80085a4 <HAL_RCC_OscConfig+0x774>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084d2:	0112      	lsls	r2, r2, #4
 80084d4:	430a      	orrs	r2, r1
 80084d6:	4931      	ldr	r1, [pc, #196]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	628b      	str	r3, [r1, #40]	@ 0x28
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	3b01      	subs	r3, #1
 80084e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ea:	3b01      	subs	r3, #1
 80084ec:	025b      	lsls	r3, r3, #9
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	3b01      	subs	r3, #1
 80084f8:	041b      	lsls	r3, r3, #16
 80084fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008504:	3b01      	subs	r3, #1
 8008506:	061b      	lsls	r3, r3, #24
 8008508:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800850c:	4923      	ldr	r1, [pc, #140]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008512:	4b22      	ldr	r3, [pc, #136]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	4a21      	ldr	r2, [pc, #132]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800851e:	4b1f      	ldr	r3, [pc, #124]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008522:	4b21      	ldr	r3, [pc, #132]	@ (80085a8 <HAL_RCC_OscConfig+0x778>)
 8008524:	4013      	ands	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800852a:	00d2      	lsls	r2, r2, #3
 800852c:	491b      	ldr	r1, [pc, #108]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800852e:	4313      	orrs	r3, r2
 8008530:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008532:	4b1a      	ldr	r3, [pc, #104]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	f023 020c 	bic.w	r2, r3, #12
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	4917      	ldr	r1, [pc, #92]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008540:	4313      	orrs	r3, r2
 8008542:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008544:	4b15      	ldr	r3, [pc, #84]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008548:	f023 0202 	bic.w	r2, r3, #2
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008550:	4912      	ldr	r1, [pc, #72]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008552:	4313      	orrs	r3, r2
 8008554:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008556:	4b11      	ldr	r3, [pc, #68]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855a:	4a10      	ldr	r2, [pc, #64]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800855c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008562:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008566:	4a0d      	ldr	r2, [pc, #52]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800856c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800856e:	4b0b      	ldr	r3, [pc, #44]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008572:	4a0a      	ldr	r2, [pc, #40]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800857a:	4b08      	ldr	r3, [pc, #32]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800857c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857e:	4a07      	ldr	r2, [pc, #28]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008586:	4b05      	ldr	r3, [pc, #20]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a04      	ldr	r2, [pc, #16]	@ (800859c <HAL_RCC_OscConfig+0x76c>)
 800858c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008592:	f7f9 f967 	bl	8001864 <HAL_GetTick>
 8008596:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008598:	e011      	b.n	80085be <HAL_RCC_OscConfig+0x78e>
 800859a:	bf00      	nop
 800859c:	58024400 	.word	0x58024400
 80085a0:	58024800 	.word	0x58024800
 80085a4:	fffffc0c 	.word	0xfffffc0c
 80085a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ac:	f7f9 f95a 	bl	8001864 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e08a      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085be:	4b47      	ldr	r3, [pc, #284]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <HAL_RCC_OscConfig+0x77c>
 80085ca:	e082      	b.n	80086d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085cc:	4b43      	ldr	r3, [pc, #268]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a42      	ldr	r2, [pc, #264]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80085d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7f9 f944 	bl	8001864 <HAL_GetTick>
 80085dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e0:	f7f9 f940 	bl	8001864 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e070      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085f2:	4b3a      	ldr	r3, [pc, #232]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x7b0>
 80085fe:	e068      	b.n	80086d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008600:	4b36      	ldr	r3, [pc, #216]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008606:	4b35      	ldr	r3, [pc, #212]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008610:	2b01      	cmp	r3, #1
 8008612:	d031      	beq.n	8008678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f003 0203 	and.w	r2, r3, #3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800861e:	429a      	cmp	r2, r3
 8008620:	d12a      	bne.n	8008678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800862e:	429a      	cmp	r2, r3
 8008630:	d122      	bne.n	8008678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800863e:	429a      	cmp	r2, r3
 8008640:	d11a      	bne.n	8008678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	0a5b      	lsrs	r3, r3, #9
 8008646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008650:	429a      	cmp	r2, r3
 8008652:	d111      	bne.n	8008678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008660:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008662:	429a      	cmp	r2, r3
 8008664:	d108      	bne.n	8008678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	0e1b      	lsrs	r3, r3, #24
 800866a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008672:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d001      	beq.n	800867c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e02b      	b.n	80086d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800867c:	4b17      	ldr	r3, [pc, #92]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 800867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008686:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	429a      	cmp	r2, r3
 8008690:	d01f      	beq.n	80086d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008692:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 8008694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008696:	4a11      	ldr	r2, [pc, #68]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800869e:	f7f9 f8e1 	bl	8001864 <HAL_GetTick>
 80086a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80086a4:	bf00      	nop
 80086a6:	f7f9 f8dd 	bl	8001864 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d0f9      	beq.n	80086a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086b2:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80086b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086b6:	4b0a      	ldr	r3, [pc, #40]	@ (80086e0 <HAL_RCC_OscConfig+0x8b0>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086be:	00d2      	lsls	r2, r2, #3
 80086c0:	4906      	ldr	r1, [pc, #24]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80086c6:	4b05      	ldr	r3, [pc, #20]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80086c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ca:	4a04      	ldr	r2, [pc, #16]	@ (80086dc <HAL_RCC_OscConfig+0x8ac>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3730      	adds	r7, #48	@ 0x30
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	58024400 	.word	0x58024400
 80086e0:	ffff0007 	.word	0xffff0007

080086e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e19c      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086f8:	4b8a      	ldr	r3, [pc, #552]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 030f 	and.w	r3, r3, #15
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d910      	bls.n	8008728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008706:	4b87      	ldr	r3, [pc, #540]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f023 020f 	bic.w	r2, r3, #15
 800870e:	4985      	ldr	r1, [pc, #532]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	4313      	orrs	r3, r2
 8008714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008716:	4b83      	ldr	r3, [pc, #524]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e184      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d010      	beq.n	8008756 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691a      	ldr	r2, [r3, #16]
 8008738:	4b7b      	ldr	r3, [pc, #492]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008740:	429a      	cmp	r2, r3
 8008742:	d908      	bls.n	8008756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008744:	4b78      	ldr	r3, [pc, #480]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	4975      	ldr	r1, [pc, #468]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008752:	4313      	orrs	r3, r2
 8008754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0308 	and.w	r3, r3, #8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d010      	beq.n	8008784 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695a      	ldr	r2, [r3, #20]
 8008766:	4b70      	ldr	r3, [pc, #448]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800876e:	429a      	cmp	r2, r3
 8008770:	d908      	bls.n	8008784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008772:	4b6d      	ldr	r3, [pc, #436]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	496a      	ldr	r1, [pc, #424]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008780:	4313      	orrs	r3, r2
 8008782:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699a      	ldr	r2, [r3, #24]
 8008794:	4b64      	ldr	r3, [pc, #400]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800879c:	429a      	cmp	r2, r3
 800879e:	d908      	bls.n	80087b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087a0:	4b61      	ldr	r3, [pc, #388]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	495e      	ldr	r1, [pc, #376]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69da      	ldr	r2, [r3, #28]
 80087c2:	4b59      	ldr	r3, [pc, #356]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d908      	bls.n	80087e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087ce:	4b56      	ldr	r3, [pc, #344]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	4953      	ldr	r1, [pc, #332]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d908      	bls.n	800880e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f023 020f 	bic.w	r2, r3, #15
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4947      	ldr	r1, [pc, #284]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 800880a:	4313      	orrs	r3, r2
 800880c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d055      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800881a:	4b43      	ldr	r3, [pc, #268]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	4940      	ldr	r1, [pc, #256]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008828:	4313      	orrs	r3, r2
 800882a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d107      	bne.n	8008844 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008834:	4b3c      	ldr	r3, [pc, #240]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d121      	bne.n	8008884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e0f6      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2b03      	cmp	r3, #3
 800884a:	d107      	bne.n	800885c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800884c:	4b36      	ldr	r3, [pc, #216]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e0ea      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d107      	bne.n	8008874 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008864:	4b30      	ldr	r3, [pc, #192]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d109      	bne.n	8008884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e0de      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008874:	4b2c      	ldr	r3, [pc, #176]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0d6      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008884:	4b28      	ldr	r3, [pc, #160]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f023 0207 	bic.w	r2, r3, #7
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	4925      	ldr	r1, [pc, #148]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008896:	f7f8 ffe5 	bl	8001864 <HAL_GetTick>
 800889a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889c:	e00a      	b.n	80088b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800889e:	f7f8 ffe1 	bl	8001864 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e0be      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d1eb      	bne.n	800889e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d010      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	429a      	cmp	r2, r3
 80088e0:	d208      	bcs.n	80088f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088e2:	4b11      	ldr	r3, [pc, #68]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f023 020f 	bic.w	r2, r3, #15
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	490e      	ldr	r1, [pc, #56]	@ (8008928 <HAL_RCC_ClockConfig+0x244>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d214      	bcs.n	800892c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008902:	4b08      	ldr	r3, [pc, #32]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f023 020f 	bic.w	r2, r3, #15
 800890a:	4906      	ldr	r1, [pc, #24]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008912:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <HAL_RCC_ClockConfig+0x240>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d005      	beq.n	800892c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e086      	b.n	8008a32 <HAL_RCC_ClockConfig+0x34e>
 8008924:	52002000 	.word	0x52002000
 8008928:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008944:	429a      	cmp	r2, r3
 8008946:	d208      	bcs.n	800895a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008948:	4b3c      	ldr	r3, [pc, #240]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	4939      	ldr	r1, [pc, #228]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 8008956:	4313      	orrs	r3, r2
 8008958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695a      	ldr	r2, [r3, #20]
 800896a:	4b34      	ldr	r3, [pc, #208]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008972:	429a      	cmp	r2, r3
 8008974:	d208      	bcs.n	8008988 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008976:	4b31      	ldr	r3, [pc, #196]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	492e      	ldr	r1, [pc, #184]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 8008984:	4313      	orrs	r3, r2
 8008986:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	d010      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	4b28      	ldr	r3, [pc, #160]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d208      	bcs.n	80089b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089a4:	4b25      	ldr	r3, [pc, #148]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	4922      	ldr	r1, [pc, #136]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d010      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69da      	ldr	r2, [r3, #28]
 80089c6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d208      	bcs.n	80089e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089d2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4917      	ldr	r1, [pc, #92]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089e4:	f000 f834 	bl	8008a50 <HAL_RCC_GetSysClockFreq>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b14      	ldr	r3, [pc, #80]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	4912      	ldr	r1, [pc, #72]	@ (8008a40 <HAL_RCC_ClockConfig+0x35c>)
 80089f6:	5ccb      	ldrb	r3, [r1, r3]
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008a00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a02:	4b0e      	ldr	r3, [pc, #56]	@ (8008a3c <HAL_RCC_ClockConfig+0x358>)
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a40 <HAL_RCC_ClockConfig+0x35c>)
 8008a0c:	5cd3      	ldrb	r3, [r2, r3]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
 8008a18:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <HAL_RCC_ClockConfig+0x360>)
 8008a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a48 <HAL_RCC_ClockConfig+0x364>)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a22:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <HAL_RCC_ClockConfig+0x368>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f8 fc36 	bl	8001298 <HAL_InitTick>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	58024400 	.word	0x58024400
 8008a40:	0801336c 	.word	0x0801336c
 8008a44:	24000004 	.word	0x24000004
 8008a48:	24000000 	.word	0x24000000
 8008a4c:	24000008 	.word	0x24000008

08008a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	@ 0x24
 8008a54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a56:	4bb3      	ldr	r3, [pc, #716]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a5e:	2b18      	cmp	r3, #24
 8008a60:	f200 8155 	bhi.w	8008d0e <HAL_RCC_GetSysClockFreq+0x2be>
 8008a64:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008d0f 	.word	0x08008d0f
 8008a74:	08008d0f 	.word	0x08008d0f
 8008a78:	08008d0f 	.word	0x08008d0f
 8008a7c:	08008d0f 	.word	0x08008d0f
 8008a80:	08008d0f 	.word	0x08008d0f
 8008a84:	08008d0f 	.word	0x08008d0f
 8008a88:	08008d0f 	.word	0x08008d0f
 8008a8c:	08008af7 	.word	0x08008af7
 8008a90:	08008d0f 	.word	0x08008d0f
 8008a94:	08008d0f 	.word	0x08008d0f
 8008a98:	08008d0f 	.word	0x08008d0f
 8008a9c:	08008d0f 	.word	0x08008d0f
 8008aa0:	08008d0f 	.word	0x08008d0f
 8008aa4:	08008d0f 	.word	0x08008d0f
 8008aa8:	08008d0f 	.word	0x08008d0f
 8008aac:	08008afd 	.word	0x08008afd
 8008ab0:	08008d0f 	.word	0x08008d0f
 8008ab4:	08008d0f 	.word	0x08008d0f
 8008ab8:	08008d0f 	.word	0x08008d0f
 8008abc:	08008d0f 	.word	0x08008d0f
 8008ac0:	08008d0f 	.word	0x08008d0f
 8008ac4:	08008d0f 	.word	0x08008d0f
 8008ac8:	08008d0f 	.word	0x08008d0f
 8008acc:	08008b03 	.word	0x08008b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad0:	4b94      	ldr	r3, [pc, #592]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d009      	beq.n	8008af0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008adc:	4b91      	ldr	r3, [pc, #580]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	4a90      	ldr	r2, [pc, #576]	@ (8008d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008aee:	e111      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008af0:	4b8d      	ldr	r3, [pc, #564]	@ (8008d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008af2:	61bb      	str	r3, [r7, #24]
      break;
 8008af4:	e10e      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008af6:	4b8d      	ldr	r3, [pc, #564]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008af8:	61bb      	str	r3, [r7, #24]
      break;
 8008afa:	e10b      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008afc:	4b8c      	ldr	r3, [pc, #560]	@ (8008d30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008afe:	61bb      	str	r3, [r7, #24]
      break;
 8008b00:	e108      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b02:	4b88      	ldr	r3, [pc, #544]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008b0c:	4b85      	ldr	r3, [pc, #532]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	091b      	lsrs	r3, r3, #4
 8008b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b18:	4b82      	ldr	r3, [pc, #520]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b22:	4b80      	ldr	r3, [pc, #512]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b26:	08db      	lsrs	r3, r3, #3
 8008b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80e1 	beq.w	8008d08 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	f000 8083 	beq.w	8008c54 <HAL_RCC_GetSysClockFreq+0x204>
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	f200 80a1 	bhi.w	8008c98 <HAL_RCC_GetSysClockFreq+0x248>
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <HAL_RCC_GetSysClockFreq+0x114>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d056      	beq.n	8008c10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b62:	e099      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b64:	4b6f      	ldr	r3, [pc, #444]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d02d      	beq.n	8008bcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b70:	4b6c      	ldr	r3, [pc, #432]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8008d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9a:	4b62      	ldr	r3, [pc, #392]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008bca:	e087      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bde:	4b51      	ldr	r3, [pc, #324]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bf2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c0e:	e065      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c22:	4b40      	ldr	r3, [pc, #256]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c52:	e043      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c66:	4b2f      	ldr	r3, [pc, #188]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c96:	e021      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008caa:	4b1e      	ldr	r3, [pc, #120]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cbe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008cdc:	4b11      	ldr	r3, [pc, #68]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce0:	0a5b      	lsrs	r3, r3, #9
 8008ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d00:	ee17 3a90 	vmov	r3, s15
 8008d04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008d06:	e005      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61bb      	str	r3, [r7, #24]
      break;
 8008d0c:	e002      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008d0e:	4b07      	ldr	r3, [pc, #28]	@ (8008d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d10:	61bb      	str	r3, [r7, #24]
      break;
 8008d12:	bf00      	nop
  }

  return sysclockfreq;
 8008d14:	69bb      	ldr	r3, [r7, #24]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3724      	adds	r7, #36	@ 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	58024400 	.word	0x58024400
 8008d28:	03d09000 	.word	0x03d09000
 8008d2c:	003d0900 	.word	0x003d0900
 8008d30:	017d7840 	.word	0x017d7840
 8008d34:	46000000 	.word	0x46000000
 8008d38:	4c742400 	.word	0x4c742400
 8008d3c:	4a742400 	.word	0x4a742400
 8008d40:	4bbebc20 	.word	0x4bbebc20

08008d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d4a:	f7ff fe81 	bl	8008a50 <HAL_RCC_GetSysClockFreq>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	490f      	ldr	r1, [pc, #60]	@ (8008d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d5c:	5ccb      	ldrb	r3, [r1, r3]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d68:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	4a09      	ldr	r2, [pc, #36]	@ (8008d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d72:	5cd3      	ldrb	r3, [r2, r3]
 8008d74:	f003 031f 	and.w	r3, r3, #31
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7e:	4a07      	ldr	r2, [pc, #28]	@ (8008d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d82:	4a07      	ldr	r2, [pc, #28]	@ (8008da0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	58024400 	.word	0x58024400
 8008d98:	0801336c 	.word	0x0801336c
 8008d9c:	24000004 	.word	0x24000004
 8008da0:	24000000 	.word	0x24000000

08008da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008da8:	f7ff ffcc 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 8008dac:	4602      	mov	r2, r0
 8008dae:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	4904      	ldr	r1, [pc, #16]	@ (8008dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008dba:	5ccb      	ldrb	r3, [r1, r3]
 8008dbc:	f003 031f 	and.w	r3, r3, #31
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	0801336c 	.word	0x0801336c

08008dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dd4:	f7ff ffb6 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	4904      	ldr	r1, [pc, #16]	@ (8008df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	58024400 	.word	0x58024400
 8008df8:	0801336c 	.word	0x0801336c

08008dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	223f      	movs	r2, #63	@ 0x3f
 8008e0a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f003 0207 	and.w	r2, r3, #7
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008e18:	4b17      	ldr	r3, [pc, #92]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008e24:	4b14      	ldr	r3, [pc, #80]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	f003 020f 	and.w	r2, r3, #15
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008e30:	4b11      	ldr	r3, [pc, #68]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008e48:	4b0b      	ldr	r3, [pc, #44]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008e54:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <HAL_RCC_GetClockConfig+0x7c>)
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e60:	4b06      	ldr	r3, [pc, #24]	@ (8008e7c <HAL_RCC_GetClockConfig+0x80>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	601a      	str	r2, [r3, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	58024400 	.word	0x58024400
 8008e7c:	52002000 	.word	0x52002000

08008e80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e84:	b0ca      	sub	sp, #296	@ 0x128
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e92:	2300      	movs	r3, #0
 8008e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	ea54 0305 	orrs.w	r3, r4, r5
 8008eaa:	d049      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008eb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008eb6:	d02f      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008eb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ebc:	d828      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ebe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ec2:	d01a      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ec4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ec8:	d822      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ed2:	d007      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ed4:	e01c      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed6:	4bb8      	ldr	r3, [pc, #736]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eda:	4ab7      	ldr	r2, [pc, #732]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ee2:	e01a      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee8:	3308      	adds	r3, #8
 8008eea:	2102      	movs	r1, #2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 fb61 	bl	800b5b4 <RCCEx_PLL2_Config>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ef8:	e00f      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efe:	3328      	adds	r3, #40	@ 0x28
 8008f00:	2102      	movs	r1, #2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 fc08 	bl	800b718 <RCCEx_PLL3_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f0e:	e004      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f16:	e000      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f22:	4ba5      	ldr	r3, [pc, #660]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f30:	4aa1      	ldr	r2, [pc, #644]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f32:	430b      	orrs	r3, r1
 8008f34:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f4c:	f04f 0900 	mov.w	r9, #0
 8008f50:	ea58 0309 	orrs.w	r3, r8, r9
 8008f54:	d047      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d82a      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f60:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008f7d 	.word	0x08008f7d
 8008f6c:	08008f8b 	.word	0x08008f8b
 8008f70:	08008fa1 	.word	0x08008fa1
 8008f74:	08008fbf 	.word	0x08008fbf
 8008f78:	08008fbf 	.word	0x08008fbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	4a8d      	ldr	r2, [pc, #564]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f88:	e01a      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8e:	3308      	adds	r3, #8
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f002 fb0e 	bl	800b5b4 <RCCEx_PLL2_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f9e:	e00f      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa4:	3328      	adds	r3, #40	@ 0x28
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f002 fbb5 	bl	800b718 <RCCEx_PLL3_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fb4:	e004      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fbc:	e000      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fc8:	4b7b      	ldr	r3, [pc, #492]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fcc:	f023 0107 	bic.w	r1, r3, #7
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd6:	4a78      	ldr	r2, [pc, #480]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fdc:	e003      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008ff2:	f04f 0b00 	mov.w	fp, #0
 8008ff6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ffa:	d04c      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009006:	d030      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800900c:	d829      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800900e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009010:	d02d      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009012:	2bc0      	cmp	r3, #192	@ 0xc0
 8009014:	d825      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009016:	2b80      	cmp	r3, #128	@ 0x80
 8009018:	d018      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	d821      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	d007      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009026:	e01c      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009028:	4b63      	ldr	r3, [pc, #396]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	4a62      	ldr	r2, [pc, #392]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800902e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009034:	e01c      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903a:	3308      	adds	r3, #8
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f002 fab8 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800904a:	e011      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009050:	3328      	adds	r3, #40	@ 0x28
 8009052:	2100      	movs	r1, #0
 8009054:	4618      	mov	r0, r3
 8009056:	f002 fb5f 	bl	800b718 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009060:	e006      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009068:	e002      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800906e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009078:	4b4f      	ldr	r3, [pc, #316]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800907a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800907c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	4a4c      	ldr	r2, [pc, #304]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009088:	430b      	orrs	r3, r1
 800908a:	6513      	str	r3, [r2, #80]	@ 0x50
 800908c:	e003      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80090a6:	2300      	movs	r3, #0
 80090a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80090b0:	460b      	mov	r3, r1
 80090b2:	4313      	orrs	r3, r2
 80090b4:	d053      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090c2:	d035      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80090c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090c8:	d82e      	bhi.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090ce:	d031      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090d4:	d828      	bhi.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090da:	d01a      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80090dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090e0:	d822      	bhi.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80090e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090ea:	d007      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80090ec:	e01c      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ee:	4b32      	ldr	r3, [pc, #200]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f2:	4a31      	ldr	r2, [pc, #196]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090fa:	e01c      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009100:	3308      	adds	r3, #8
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f002 fa55 	bl	800b5b4 <RCCEx_PLL2_Config>
 800910a:	4603      	mov	r3, r0
 800910c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009110:	e011      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009116:	3328      	adds	r3, #40	@ 0x28
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f002 fafc 	bl	800b718 <RCCEx_PLL3_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009126:	e006      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800912e:	e002      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009130:	bf00      	nop
 8009132:	e000      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800913e:	4b1e      	ldr	r3, [pc, #120]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800914e:	4a1a      	ldr	r2, [pc, #104]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009150:	430b      	orrs	r3, r1
 8009152:	6593      	str	r3, [r2, #88]	@ 0x58
 8009154:	e003      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800916a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800916e:	2300      	movs	r3, #0
 8009170:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009174:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009178:	460b      	mov	r3, r1
 800917a:	4313      	orrs	r3, r2
 800917c:	d056      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800918a:	d038      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800918c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009190:	d831      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009192:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009196:	d034      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009198:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800919c:	d82b      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800919e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091a2:	d01d      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80091a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091a8:	d825      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091b2:	d00a      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091b4:	e01f      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091b6:	bf00      	nop
 80091b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091bc:	4ba2      	ldr	r3, [pc, #648]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c0:	4aa1      	ldr	r2, [pc, #644]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091c8:	e01c      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ce:	3308      	adds	r3, #8
 80091d0:	2100      	movs	r1, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f002 f9ee 	bl	800b5b4 <RCCEx_PLL2_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80091de:	e011      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	3328      	adds	r3, #40	@ 0x28
 80091e6:	2100      	movs	r1, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fa95 	bl	800b718 <RCCEx_PLL3_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091f4:	e006      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091fc:	e002      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10b      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800920c:	4b8e      	ldr	r3, [pc, #568]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800920e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009210:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800921c:	4a8a      	ldr	r2, [pc, #552]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800921e:	430b      	orrs	r3, r1
 8009220:	6593      	str	r3, [r2, #88]	@ 0x58
 8009222:	e003      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009228:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800923c:	2300      	movs	r3, #0
 800923e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009242:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009246:	460b      	mov	r3, r1
 8009248:	4313      	orrs	r3, r2
 800924a:	d03a      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009252:	2b30      	cmp	r3, #48	@ 0x30
 8009254:	d01f      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009256:	2b30      	cmp	r3, #48	@ 0x30
 8009258:	d819      	bhi.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800925a:	2b20      	cmp	r3, #32
 800925c:	d00c      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800925e:	2b20      	cmp	r3, #32
 8009260:	d815      	bhi.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d019      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009266:	2b10      	cmp	r3, #16
 8009268:	d111      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800926a:	4b77      	ldr	r3, [pc, #476]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a76      	ldr	r2, [pc, #472]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009276:	e011      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927c:	3308      	adds	r3, #8
 800927e:	2102      	movs	r1, #2
 8009280:	4618      	mov	r0, r3
 8009282:	f002 f997 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800928c:	e006      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009294:	e002      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800929a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800929c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80092a4:	4b68      	ldr	r3, [pc, #416]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b2:	4a65      	ldr	r2, [pc, #404]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092b4:	430b      	orrs	r3, r1
 80092b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092b8:	e003      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80092ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092d2:	2300      	movs	r3, #0
 80092d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80092dc:	460b      	mov	r3, r1
 80092de:	4313      	orrs	r3, r2
 80092e0:	d051      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092ec:	d035      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80092ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092f2:	d82e      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092f8:	d031      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092fe:	d828      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009304:	d01a      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800930a:	d822      	bhi.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009314:	d007      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009316:	e01c      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009318:	4b4b      	ldr	r3, [pc, #300]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	4a4a      	ldr	r2, [pc, #296]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800931e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009324:	e01c      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800932a:	3308      	adds	r3, #8
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f002 f940 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800933a:	e011      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800933c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009340:	3328      	adds	r3, #40	@ 0x28
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f002 f9e7 	bl	800b718 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800935e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009368:	4b37      	ldr	r3, [pc, #220]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800936a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009376:	4a34      	ldr	r2, [pc, #208]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009378:	430b      	orrs	r3, r1
 800937a:	6513      	str	r3, [r2, #80]	@ 0x50
 800937c:	e003      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009396:	2300      	movs	r3, #0
 8009398:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800939c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80093a0:	460b      	mov	r3, r1
 80093a2:	4313      	orrs	r3, r2
 80093a4:	d056      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093b0:	d033      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093b6:	d82c      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093bc:	d02f      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093c2:	d826      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093c8:	d02b      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80093ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093ce:	d820      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093d4:	d012      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093da:	d81a      	bhi.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d022      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80093e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e4:	d115      	bne.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ea:	3308      	adds	r3, #8
 80093ec:	2101      	movs	r1, #1
 80093ee:	4618      	mov	r0, r3
 80093f0:	f002 f8e0 	bl	800b5b4 <RCCEx_PLL2_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093fa:	e015      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009400:	3328      	adds	r3, #40	@ 0x28
 8009402:	2101      	movs	r1, #1
 8009404:	4618      	mov	r0, r3
 8009406:	f002 f987 	bl	800b718 <RCCEx_PLL3_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009410:	e00a      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009418:	e006      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800941a:	bf00      	nop
 800941c:	e004      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800941e:	bf00      	nop
 8009420:	e002      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009422:	bf00      	nop
 8009424:	e000      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10d      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009430:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009434:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943e:	4a02      	ldr	r2, [pc, #8]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009440:	430b      	orrs	r3, r1
 8009442:	6513      	str	r3, [r2, #80]	@ 0x50
 8009444:	e006      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009446:	bf00      	nop
 8009448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800946a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d055      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009480:	d033      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009486:	d82c      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948c:	d02f      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009492:	d826      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009494:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009498:	d02b      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800949a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800949e:	d820      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a4:	d012      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80094a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094aa:	d81a      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d022      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094b4:	d115      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ba:	3308      	adds	r3, #8
 80094bc:	2101      	movs	r1, #1
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 f878 	bl	800b5b4 <RCCEx_PLL2_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094ca:	e015      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d0:	3328      	adds	r3, #40	@ 0x28
 80094d2:	2101      	movs	r1, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	f002 f91f 	bl	800b718 <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094e0:	e00a      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094e8:	e006      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094ea:	bf00      	nop
 80094ec:	e004      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094ee:	bf00      	nop
 80094f0:	e002      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009500:	4ba3      	ldr	r3, [pc, #652]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009504:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009510:	4a9f      	ldr	r2, [pc, #636]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009512:	430b      	orrs	r3, r1
 8009514:	6593      	str	r3, [r2, #88]	@ 0x58
 8009516:	e003      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800951c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800952c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800953a:	460b      	mov	r3, r1
 800953c:	4313      	orrs	r3, r2
 800953e:	d037      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800954a:	d00e      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800954c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009550:	d816      	bhi.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d018      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800955a:	d111      	bne.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955c:	4b8c      	ldr	r3, [pc, #560]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	4a8b      	ldr	r2, [pc, #556]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009568:	e00f      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	3308      	adds	r3, #8
 8009570:	2101      	movs	r1, #1
 8009572:	4618      	mov	r0, r3
 8009574:	f002 f81e 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800957e:	e004      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009586:	e000      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800958a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009592:	4b7f      	ldr	r3, [pc, #508]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009596:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a0:	4a7b      	ldr	r2, [pc, #492]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80095a6:	e003      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80095bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80095c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4313      	orrs	r3, r2
 80095ce:	d039      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d81c      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80095da:	a201      	add	r2, pc, #4	@ (adr r2, 80095e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	0800961d 	.word	0x0800961d
 80095e4:	080095f1 	.word	0x080095f1
 80095e8:	080095ff 	.word	0x080095ff
 80095ec:	0800961d 	.word	0x0800961d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f0:	4b67      	ldr	r3, [pc, #412]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	4a66      	ldr	r2, [pc, #408]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095fc:	e00f      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009602:	3308      	adds	r3, #8
 8009604:	2102      	movs	r1, #2
 8009606:	4618      	mov	r0, r3
 8009608:	f001 ffd4 	bl	800b5b4 <RCCEx_PLL2_Config>
 800960c:	4603      	mov	r3, r0
 800960e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009612:	e004      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800961a:	e000      	b.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800961c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800961e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009626:	4b5a      	ldr	r3, [pc, #360]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962a:	f023 0103 	bic.w	r1, r3, #3
 800962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009634:	4a56      	ldr	r2, [pc, #344]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009636:	430b      	orrs	r3, r1
 8009638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800963a:	e003      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800965a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800965e:	460b      	mov	r3, r1
 8009660:	4313      	orrs	r3, r2
 8009662:	f000 809f 	beq.w	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009666:	4b4b      	ldr	r3, [pc, #300]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a4a      	ldr	r2, [pc, #296]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800966c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009672:	f7f8 f8f7 	bl	8001864 <HAL_GetTick>
 8009676:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800967a:	e00b      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800967c:	f7f8 f8f2 	bl	8001864 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b64      	cmp	r3, #100	@ 0x64
 800968a:	d903      	bls.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009692:	e005      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009694:	4b3f      	ldr	r3, [pc, #252]	@ (8009794 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0ed      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80096a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d179      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096a8:	4b39      	ldr	r3, [pc, #228]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096b4:	4053      	eors	r3, r2
 80096b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d015      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096be:	4b34      	ldr	r3, [pc, #208]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096ca:	4b31      	ldr	r3, [pc, #196]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ce:	4a30      	ldr	r2, [pc, #192]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096da:	4a2d      	ldr	r2, [pc, #180]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f6:	d118      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096f8:	f7f8 f8b4 	bl	8001864 <HAL_GetTick>
 80096fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009700:	e00d      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009702:	f7f8 f8af 	bl	8001864 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800970c:	1ad2      	subs	r2, r2, r3
 800970e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009712:	429a      	cmp	r2, r3
 8009714:	d903      	bls.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800971c:	e005      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800971e:	4b1c      	ldr	r3, [pc, #112]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0eb      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800972a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972e:	2b00      	cmp	r3, #0
 8009730:	d129      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800973a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800973e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009742:	d10e      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009744:	4b12      	ldr	r3, [pc, #72]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009750:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009754:	091a      	lsrs	r2, r3, #4
 8009756:	4b10      	ldr	r3, [pc, #64]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009758:	4013      	ands	r3, r2
 800975a:	4a0d      	ldr	r2, [pc, #52]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975c:	430b      	orrs	r3, r1
 800975e:	6113      	str	r3, [r2, #16]
 8009760:	e005      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009762:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	4a0a      	ldr	r2, [pc, #40]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009768:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800976c:	6113      	str	r3, [r2, #16]
 800976e:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009770:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800977a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800977e:	4a04      	ldr	r2, [pc, #16]	@ (8009790 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6713      	str	r3, [r2, #112]	@ 0x70
 8009784:	e00e      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800978e:	e009      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009790:	58024400 	.word	0x58024400
 8009794:	58024800 	.word	0x58024800
 8009798:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f002 0301 	and.w	r3, r2, #1
 80097b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097be:	460b      	mov	r3, r1
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f000 8089 	beq.w	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097cc:	2b28      	cmp	r3, #40	@ 0x28
 80097ce:	d86b      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097d0:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	080098b1 	.word	0x080098b1
 80097dc:	080098a9 	.word	0x080098a9
 80097e0:	080098a9 	.word	0x080098a9
 80097e4:	080098a9 	.word	0x080098a9
 80097e8:	080098a9 	.word	0x080098a9
 80097ec:	080098a9 	.word	0x080098a9
 80097f0:	080098a9 	.word	0x080098a9
 80097f4:	080098a9 	.word	0x080098a9
 80097f8:	0800987d 	.word	0x0800987d
 80097fc:	080098a9 	.word	0x080098a9
 8009800:	080098a9 	.word	0x080098a9
 8009804:	080098a9 	.word	0x080098a9
 8009808:	080098a9 	.word	0x080098a9
 800980c:	080098a9 	.word	0x080098a9
 8009810:	080098a9 	.word	0x080098a9
 8009814:	080098a9 	.word	0x080098a9
 8009818:	08009893 	.word	0x08009893
 800981c:	080098a9 	.word	0x080098a9
 8009820:	080098a9 	.word	0x080098a9
 8009824:	080098a9 	.word	0x080098a9
 8009828:	080098a9 	.word	0x080098a9
 800982c:	080098a9 	.word	0x080098a9
 8009830:	080098a9 	.word	0x080098a9
 8009834:	080098a9 	.word	0x080098a9
 8009838:	080098b1 	.word	0x080098b1
 800983c:	080098a9 	.word	0x080098a9
 8009840:	080098a9 	.word	0x080098a9
 8009844:	080098a9 	.word	0x080098a9
 8009848:	080098a9 	.word	0x080098a9
 800984c:	080098a9 	.word	0x080098a9
 8009850:	080098a9 	.word	0x080098a9
 8009854:	080098a9 	.word	0x080098a9
 8009858:	080098b1 	.word	0x080098b1
 800985c:	080098a9 	.word	0x080098a9
 8009860:	080098a9 	.word	0x080098a9
 8009864:	080098a9 	.word	0x080098a9
 8009868:	080098a9 	.word	0x080098a9
 800986c:	080098a9 	.word	0x080098a9
 8009870:	080098a9 	.word	0x080098a9
 8009874:	080098a9 	.word	0x080098a9
 8009878:	080098b1 	.word	0x080098b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009880:	3308      	adds	r3, #8
 8009882:	2101      	movs	r1, #1
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fe95 	bl	800b5b4 <RCCEx_PLL2_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009890:	e00f      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009896:	3328      	adds	r3, #40	@ 0x28
 8009898:	2101      	movs	r1, #1
 800989a:	4618      	mov	r0, r3
 800989c:	f001 ff3c 	bl	800b718 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098a6:	e004      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ae:	e000      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098ba:	4bbf      	ldr	r3, [pc, #764]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098c8:	4abb      	ldr	r2, [pc, #748]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098ca:	430b      	orrs	r3, r1
 80098cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80098ce:	e003      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f002 0302 	and.w	r3, r2, #2
 80098e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80098f2:	460b      	mov	r3, r1
 80098f4:	4313      	orrs	r3, r2
 80098f6:	d041      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d824      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009902:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009908:	08009955 	.word	0x08009955
 800990c:	08009921 	.word	0x08009921
 8009910:	08009937 	.word	0x08009937
 8009914:	08009955 	.word	0x08009955
 8009918:	08009955 	.word	0x08009955
 800991c:	08009955 	.word	0x08009955
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009924:	3308      	adds	r3, #8
 8009926:	2101      	movs	r1, #1
 8009928:	4618      	mov	r0, r3
 800992a:	f001 fe43 	bl	800b5b4 <RCCEx_PLL2_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993a:	3328      	adds	r3, #40	@ 0x28
 800993c:	2101      	movs	r1, #1
 800993e:	4618      	mov	r0, r3
 8009940:	f001 feea 	bl	800b718 <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800994a:	e004      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009952:	e000      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800995e:	4b96      	ldr	r3, [pc, #600]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009962:	f023 0107 	bic.w	r1, r3, #7
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800996c:	4a92      	ldr	r2, [pc, #584]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800996e:	430b      	orrs	r3, r1
 8009970:	6553      	str	r3, [r2, #84]	@ 0x54
 8009972:	e003      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f002 0304 	and.w	r3, r2, #4
 8009988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800998c:	2300      	movs	r3, #0
 800998e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009992:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d044      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800999c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d825      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80099a8:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099fd 	.word	0x080099fd
 80099b4:	080099c9 	.word	0x080099c9
 80099b8:	080099df 	.word	0x080099df
 80099bc:	080099fd 	.word	0x080099fd
 80099c0:	080099fd 	.word	0x080099fd
 80099c4:	080099fd 	.word	0x080099fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099cc:	3308      	adds	r3, #8
 80099ce:	2101      	movs	r1, #1
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 fdef 	bl	800b5b4 <RCCEx_PLL2_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099dc:	e00f      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	3328      	adds	r3, #40	@ 0x28
 80099e4:	2101      	movs	r1, #1
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fe96 	bl	800b718 <RCCEx_PLL3_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099f2:	e004      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099fa:	e000      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a06:	4b6c      	ldr	r3, [pc, #432]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0a:	f023 0107 	bic.w	r1, r3, #7
 8009a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a16:	4a68      	ldr	r2, [pc, #416]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a1c:	e003      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f002 0320 	and.w	r3, r2, #32
 8009a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a36:	2300      	movs	r3, #0
 8009a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a40:	460b      	mov	r3, r1
 8009a42:	4313      	orrs	r3, r2
 8009a44:	d055      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a52:	d033      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a58:	d82c      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5e:	d02f      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a64:	d826      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a6a:	d02b      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a70:	d820      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a76:	d012      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a7c:	d81a      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d022      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a86:	d115      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fd8f 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a9c:	e015      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	3328      	adds	r3, #40	@ 0x28
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fe36 	bl	800b718 <RCCEx_PLL3_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ab2:	e00a      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aba:	e006      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009abc:	bf00      	nop
 8009abe:	e004      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ac0:	bf00      	nop
 8009ac2:	e002      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ac4:	bf00      	nop
 8009ac6:	e000      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10b      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ad2:	4b39      	ldr	r3, [pc, #228]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae2:	4a35      	ldr	r2, [pc, #212]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ae8:	e003      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b02:	2300      	movs	r3, #0
 8009b04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	d058      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b1e:	d033      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b24:	d82c      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b2a:	d02f      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b30:	d826      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b36:	d02b      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b3c:	d820      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b42:	d012      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b48:	d81a      	bhi.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d022      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b52:	d115      	bne.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b58:	3308      	adds	r3, #8
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fd29 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b68:	e015      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b6e:	3328      	adds	r3, #40	@ 0x28
 8009b70:	2102      	movs	r1, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fdd0 	bl	800b718 <RCCEx_PLL3_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b7e:	e00a      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b86:	e006      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b88:	bf00      	nop
 8009b8a:	e004      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b8c:	bf00      	nop
 8009b8e:	e002      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b90:	bf00      	nop
 8009b92:	e000      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10e      	bne.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b9e:	4b06      	ldr	r3, [pc, #24]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bae:	4a02      	ldr	r2, [pc, #8]	@ (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bb4:	e006      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009bb6:	bf00      	nop
 8009bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bde:	460b      	mov	r3, r1
 8009be0:	4313      	orrs	r3, r2
 8009be2:	d055      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bf0:	d033      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009bf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bf6:	d82c      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bfc:	d02f      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c02:	d826      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c08:	d02b      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c0e:	d820      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c14:	d012      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c1a:	d81a      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d022      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c24:	d115      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 fcc0 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c3a:	e015      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c40:	3328      	adds	r3, #40	@ 0x28
 8009c42:	2102      	movs	r1, #2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fd67 	bl	800b718 <RCCEx_PLL3_Config>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c50:	e00a      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c5a:	bf00      	nop
 8009c5c:	e004      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c5e:	bf00      	nop
 8009c60:	e002      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c62:	bf00      	nop
 8009c64:	e000      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10b      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c70:	4ba1      	ldr	r3, [pc, #644]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c80:	4a9d      	ldr	r2, [pc, #628]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c82:	430b      	orrs	r3, r1
 8009c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c86:	e003      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f002 0308 	and.w	r3, r2, #8
 8009c9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ca6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d01e      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cbc:	d10c      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc2:	3328      	adds	r3, #40	@ 0x28
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fd26 	bl	800b718 <RCCEx_PLL3_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cd8:	4b87      	ldr	r3, [pc, #540]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce8:	4a83      	ldr	r2, [pc, #524]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cea:	430b      	orrs	r3, r1
 8009cec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f002 0310 	and.w	r3, r2, #16
 8009cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d01e      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d1a:	d10c      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d20:	3328      	adds	r3, #40	@ 0x28
 8009d22:	2102      	movs	r1, #2
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 fcf7 	bl	800b718 <RCCEx_PLL3_Config>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d36:	4b70      	ldr	r3, [pc, #448]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d46:	4a6c      	ldr	r2, [pc, #432]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d03e      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d78:	d022      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d7e:	d81b      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d88:	d00b      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d8a:	e015      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	3308      	adds	r3, #8
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f001 fc0d 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009da0:	e00f      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	3328      	adds	r3, #40	@ 0x28
 8009da8:	2102      	movs	r1, #2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 fcb4 	bl	800b718 <RCCEx_PLL3_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009db6:	e004      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dbe:	e000      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10b      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dca:	4b4b      	ldr	r3, [pc, #300]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dda:	4a47      	ldr	r2, [pc, #284]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8009de0:	e003      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009df6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009df8:	2300      	movs	r3, #0
 8009dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d03b      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e12:	d01f      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e18:	d818      	bhi.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e1e:	d003      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e24:	d007      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e26:	e011      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e28:	4b33      	ldr	r3, [pc, #204]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	4a32      	ldr	r2, [pc, #200]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e34:	e00f      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3a:	3328      	adds	r3, #40	@ 0x28
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fc6a 	bl	800b718 <RCCEx_PLL3_Config>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e4a:	e004      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e52:	e000      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e5e:	4b26      	ldr	r3, [pc, #152]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e6e:	4a22      	ldr	r2, [pc, #136]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e74:	e003      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e94:	460b      	mov	r3, r1
 8009e96:	4313      	orrs	r3, r2
 8009e98:	d034      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea8:	d007      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009eaa:	e011      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eac:	4b12      	ldr	r3, [pc, #72]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	4a11      	ldr	r2, [pc, #68]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009eb8:	e00e      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fb76 	bl	800b5b4 <RCCEx_PLL2_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ece:	e003      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10d      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ee0:	4b05      	ldr	r3, [pc, #20]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ee4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eee:	4a02      	ldr	r2, [pc, #8]	@ (8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef0:	430b      	orrs	r3, r1
 8009ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ef4:	e006      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ef6:	bf00      	nop
 8009ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f12:	2300      	movs	r3, #0
 8009f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d00c      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f24:	3328      	adds	r3, #40	@ 0x28
 8009f26:	2102      	movs	r1, #2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fbf5 	bl	800b718 <RCCEx_PLL3_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f48:	2300      	movs	r3, #0
 8009f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f50:	460b      	mov	r3, r1
 8009f52:	4313      	orrs	r3, r2
 8009f54:	d038      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f62:	d018      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f68:	d811      	bhi.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f6e:	d014      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f74:	d80b      	bhi.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d011      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f7e:	d106      	bne.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f80:	4bc3      	ldr	r3, [pc, #780]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f84:	4ac2      	ldr	r2, [pc, #776]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f8c:	e008      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f94:	e004      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f96:	bf00      	nop
 8009f98:	e002      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f9a:	bf00      	nop
 8009f9c:	e000      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fa8:	4bb9      	ldr	r3, [pc, #740]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb8:	4ab5      	ldr	r2, [pc, #724]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fbe:	e003      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	d009      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fe4:	4baa      	ldr	r3, [pc, #680]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ff2:	4aa7      	ldr	r2, [pc, #668]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a004:	653b      	str	r3, [r7, #80]	@ 0x50
 800a006:	2300      	movs	r3, #0
 800a008:	657b      	str	r3, [r7, #84]	@ 0x54
 800a00a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	d00a      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a014:	4b9e      	ldr	r3, [pc, #632]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a024:	4a9a      	ldr	r2, [pc, #616]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a026:	430b      	orrs	r3, r1
 800a028:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a036:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a038:	2300      	movs	r3, #0
 800a03a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a03c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a040:	460b      	mov	r3, r1
 800a042:	4313      	orrs	r3, r2
 800a044:	d009      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a046:	4b92      	ldr	r3, [pc, #584]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a04a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a054:	4a8e      	ldr	r2, [pc, #568]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a056:	430b      	orrs	r3, r1
 800a058:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a066:	643b      	str	r3, [r7, #64]	@ 0x40
 800a068:	2300      	movs	r3, #0
 800a06a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a06c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a070:	460b      	mov	r3, r1
 800a072:	4313      	orrs	r3, r2
 800a074:	d00e      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a076:	4b86      	ldr	r3, [pc, #536]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	4a85      	ldr	r2, [pc, #532]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a07c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a080:	6113      	str	r3, [r2, #16]
 800a082:	4b83      	ldr	r3, [pc, #524]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a084:	6919      	ldr	r1, [r3, #16]
 800a086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a08e:	4a80      	ldr	r2, [pc, #512]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a090:	430b      	orrs	r3, r1
 800a092:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	d009      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0b0:	4b77      	ldr	r3, [pc, #476]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0be:	4a74      	ldr	r2, [pc, #464]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	d00a      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0e0:	4b6b      	ldr	r3, [pc, #428]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0f0:	4a67      	ldr	r2, [pc, #412]	@ (800a290 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	2100      	movs	r1, #0
 800a100:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a108:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a10c:	460b      	mov	r3, r1
 800a10e:	4313      	orrs	r3, r2
 800a110:	d011      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a116:	3308      	adds	r3, #8
 800a118:	2100      	movs	r1, #0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 fa4a 	bl	800b5b4 <RCCEx_PLL2_Config>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	2100      	movs	r1, #0
 800a140:	6239      	str	r1, [r7, #32]
 800a142:	f003 0302 	and.w	r3, r3, #2
 800a146:	627b      	str	r3, [r7, #36]	@ 0x24
 800a148:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a14c:	460b      	mov	r3, r1
 800a14e:	4313      	orrs	r3, r2
 800a150:	d011      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a156:	3308      	adds	r3, #8
 800a158:	2101      	movs	r1, #1
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fa2a 	bl	800b5b4 <RCCEx_PLL2_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	2100      	movs	r1, #0
 800a180:	61b9      	str	r1, [r7, #24]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	61fb      	str	r3, [r7, #28]
 800a188:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a18c:	460b      	mov	r3, r1
 800a18e:	4313      	orrs	r3, r2
 800a190:	d011      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	3308      	adds	r3, #8
 800a198:	2102      	movs	r1, #2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fa0a 	bl	800b5b4 <RCCEx_PLL2_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6139      	str	r1, [r7, #16]
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	617b      	str	r3, [r7, #20]
 800a1c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d011      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d6:	3328      	adds	r3, #40	@ 0x28
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fa9c 	bl	800b718 <RCCEx_PLL3_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	2100      	movs	r1, #0
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a20c:	460b      	mov	r3, r1
 800a20e:	4313      	orrs	r3, r2
 800a210:	d011      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	3328      	adds	r3, #40	@ 0x28
 800a218:	2101      	movs	r1, #1
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fa7c 	bl	800b718 <RCCEx_PLL3_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	2100      	movs	r1, #0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a24c:	460b      	mov	r3, r1
 800a24e:	4313      	orrs	r3, r2
 800a250:	d011      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	3328      	adds	r3, #40	@ 0x28
 800a258:	2102      	movs	r1, #2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fa5c 	bl	800b718 <RCCEx_PLL3_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a276:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e000      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
}
 800a284:	4618      	mov	r0, r3
 800a286:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a28a:	46bd      	mov	sp, r7
 800a28c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a290:	58024400 	.word	0x58024400

0800a294 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b090      	sub	sp, #64	@ 0x40
 800a298:	af00      	add	r7, sp, #0
 800a29a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	f040 8094 	bne.w	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2ac:	4b9e      	ldr	r3, [pc, #632]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	f200 8087 	bhi.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2be:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2d9 	.word	0x0800a2d9
 800a2c8:	0800a301 	.word	0x0800a301
 800a2cc:	0800a329 	.word	0x0800a329
 800a2d0:	0800a3c5 	.word	0x0800a3c5
 800a2d4:	0800a351 	.word	0x0800a351
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2d8:	4b93      	ldr	r3, [pc, #588]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2e4:	d108      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 f810 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f4:	f000 bd45 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2fc:	f000 bd41 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a300:	4b89      	ldr	r3, [pc, #548]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a30c:	d108      	bne.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30e:	f107 0318 	add.w	r3, r7, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fd54 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a31c:	f000 bd31 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a324:	f000 bd2d 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a328:	4b7f      	ldr	r3, [pc, #508]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a334:	d108      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a336:	f107 030c 	add.w	r3, r7, #12
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fe94 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a344:	f000 bd1d 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	f000 bd19 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a350:	4b75      	ldr	r3, [pc, #468]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a354:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a358:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a35a:	4b73      	ldr	r3, [pc, #460]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b04      	cmp	r3, #4
 800a364:	d10c      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d109      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a36c:	4b6e      	ldr	r3, [pc, #440]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	08db      	lsrs	r3, r3, #3
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	4a6d      	ldr	r2, [pc, #436]	@ (800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a378:	fa22 f303 	lsr.w	r3, r2, r3
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a37e:	e01f      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a380:	4b69      	ldr	r3, [pc, #420]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a38c:	d106      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a394:	d102      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a396:	4b66      	ldr	r3, [pc, #408]	@ (800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a39a:	e011      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a39c:	4b62      	ldr	r3, [pc, #392]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a8:	d106      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b0:	d102      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3b2:	4b60      	ldr	r3, [pc, #384]	@ (800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b6:	e003      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3bc:	f000 bce1 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3c0:	f000 bcdf 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c8:	f000 bcdb 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d0:	f000 bcd7 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	f040 80ad 	bne.w	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a3e2:	4b51      	ldr	r3, [pc, #324]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a3ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f2:	d056      	beq.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3fa:	f200 8090 	bhi.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	2bc0      	cmp	r3, #192	@ 0xc0
 800a402:	f000 8088 	beq.w	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a408:	2bc0      	cmp	r3, #192	@ 0xc0
 800a40a:	f200 8088 	bhi.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	2b80      	cmp	r3, #128	@ 0x80
 800a412:	d032      	beq.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a416:	2b80      	cmp	r3, #128	@ 0x80
 800a418:	f200 8081 	bhi.w	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2b40      	cmp	r3, #64	@ 0x40
 800a426:	d014      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a428:	e079      	b.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42a:	4b3f      	ldr	r3, [pc, #252]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a436:	d108      	bne.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 ff67 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	f000 bc9c 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44e:	f000 bc98 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a452:	4b35      	ldr	r3, [pc, #212]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a45a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45e:	d108      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a460:	f107 0318 	add.w	r3, r7, #24
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fcab 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46e:	f000 bc88 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a476:	f000 bc84 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a47a:	4b2b      	ldr	r3, [pc, #172]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a486:	d108      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a488:	f107 030c 	add.w	r3, r7, #12
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fdeb 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a496:	f000 bc74 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49e:	f000 bc70 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4a2:	4b21      	ldr	r3, [pc, #132]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0304 	and.w	r3, r3, #4
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d10c      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d109      	bne.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4be:	4b1a      	ldr	r3, [pc, #104]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	08db      	lsrs	r3, r3, #3
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	4a18      	ldr	r2, [pc, #96]	@ (800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4d0:	e01f      	b.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4d2:	4b15      	ldr	r3, [pc, #84]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4de:	d106      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4e6:	d102      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4e8:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4ec:	e011      	b.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4fa:	d106      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a502:	d102      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a504:	4b0b      	ldr	r3, [pc, #44]	@ (800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a508:	e003      	b.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a50e:	f000 bc38 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a512:	f000 bc36 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a516:	4b08      	ldr	r3, [pc, #32]	@ (800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51a:	f000 bc32 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a522:	f000 bc2e 	b.w	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a526:	bf00      	nop
 800a528:	58024400 	.word	0x58024400
 800a52c:	03d09000 	.word	0x03d09000
 800a530:	003d0900 	.word	0x003d0900
 800a534:	017d7840 	.word	0x017d7840
 800a538:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a540:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a544:	430b      	orrs	r3, r1
 800a546:	f040 809c 	bne.w	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a54a:	4b9e      	ldr	r3, [pc, #632]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a54e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a552:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a55a:	d054      	beq.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a562:	f200 808b 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a56c:	f000 8083 	beq.w	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a572:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a576:	f200 8081 	bhi.w	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a580:	d02f      	beq.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a588:	d878      	bhi.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d004      	beq.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a596:	d012      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a598:	e070      	b.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a59a:	4b8a      	ldr	r3, [pc, #552]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5a6:	d107      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 feaf 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b6:	e3e4      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e3e1      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5be:	4b81      	ldr	r3, [pc, #516]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5cc:	f107 0318 	add.w	r3, r7, #24
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fbf5 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5da:	e3d2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e0:	e3cf      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5e2:	4b78      	ldr	r3, [pc, #480]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ee:	d107      	bne.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5f0:	f107 030c 	add.w	r3, r7, #12
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fd37 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fe:	e3c0      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a604:	e3bd      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a606:	4b6f      	ldr	r3, [pc, #444]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a60a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a610:	4b6c      	ldr	r3, [pc, #432]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d10c      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d109      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a622:	4b68      	ldr	r3, [pc, #416]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	08db      	lsrs	r3, r3, #3
 800a628:	f003 0303 	and.w	r3, r3, #3
 800a62c:	4a66      	ldr	r2, [pc, #408]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a62e:	fa22 f303 	lsr.w	r3, r2, r3
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a634:	e01e      	b.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a636:	4b63      	ldr	r3, [pc, #396]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a642:	d106      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a64a:	d102      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a64c:	4b5f      	ldr	r3, [pc, #380]	@ (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a650:	e010      	b.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a652:	4b5c      	ldr	r3, [pc, #368]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a65a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a65e:	d106      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a666:	d102      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a668:	4b59      	ldr	r3, [pc, #356]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a66c:	e002      	b.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a672:	e386      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a674:	e385      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a676:	4b57      	ldr	r3, [pc, #348]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a67a:	e382      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a680:	e37f      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a686:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a68a:	430b      	orrs	r3, r1
 800a68c:	f040 80a7 	bne.w	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a690:	4b4c      	ldr	r3, [pc, #304]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a694:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a698:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6a0:	d055      	beq.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6a8:	f200 8096 	bhi.w	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6b2:	f000 8084 	beq.w	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6bc:	f200 808c 	bhi.w	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6c6:	d030      	beq.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ce:	f200 8083 	bhi.w	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d004      	beq.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6de:	d012      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a6e0:	e07a      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6e2:	4b38      	ldr	r3, [pc, #224]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ee:	d107      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fe0b 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fe:	e340      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e33d      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a706:	4b2f      	ldr	r3, [pc, #188]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a70e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a712:	d107      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a714:	f107 0318 	add.w	r3, r7, #24
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fb51 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a722:	e32e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e32b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a72a:	4b26      	ldr	r3, [pc, #152]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a736:	d107      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a738:	f107 030c 	add.w	r3, r7, #12
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fc93 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a746:	e31c      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74c:	e319      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a74e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a756:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a758:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d10c      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	2b00      	cmp	r3, #0
 800a768:	d109      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a76a:	4b16      	ldr	r3, [pc, #88]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	08db      	lsrs	r3, r3, #3
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	4a14      	ldr	r2, [pc, #80]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a776:	fa22 f303 	lsr.w	r3, r2, r3
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77c:	e01e      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a77e:	4b11      	ldr	r3, [pc, #68]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a78a:	d106      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a792:	d102      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a794:	4b0d      	ldr	r3, [pc, #52]	@ (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a798:	e010      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a79a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a6:	d106      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ae:	d102      	bne.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7b0:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7b4:	e002      	b.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7ba:	e2e2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7bc:	e2e1      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7be:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c2:	e2de      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	03d09000 	.word	0x03d09000
 800a7cc:	003d0900 	.word	0x003d0900
 800a7d0:	017d7840 	.word	0x017d7840
 800a7d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e2d1      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	f040 809c 	bne.w	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a7ec:	4b93      	ldr	r3, [pc, #588]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a7f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7fc:	d054      	beq.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a804:	f200 808b 	bhi.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a80e:	f000 8083 	beq.w	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a814:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a818:	f200 8081 	bhi.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a822:	d02f      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a82a:	d878      	bhi.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a838:	d012      	beq.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a83a:	e070      	b.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a83c:	4b7f      	ldr	r3, [pc, #508]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a848:	d107      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fd5e 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a858:	e293      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85e:	e290      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a860:	4b76      	ldr	r3, [pc, #472]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a86c:	d107      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86e:	f107 0318 	add.w	r3, r7, #24
 800a872:	4618      	mov	r0, r3
 800a874:	f000 faa4 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87c:	e281      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a882:	e27e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a884:	4b6d      	ldr	r3, [pc, #436]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a88c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a890:	d107      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a892:	f107 030c 	add.w	r3, r7, #12
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fbe6 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a0:	e26f      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a6:	e26c      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8a8:	4b64      	ldr	r3, [pc, #400]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8b2:	4b62      	ldr	r3, [pc, #392]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d10c      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d109      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8c4:	4b5d      	ldr	r3, [pc, #372]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	08db      	lsrs	r3, r3, #3
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	4a5c      	ldr	r2, [pc, #368]	@ (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8d6:	e01e      	b.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8d8:	4b58      	ldr	r3, [pc, #352]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8e4:	d106      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ec:	d102      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8ee:	4b55      	ldr	r3, [pc, #340]	@ (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8f2:	e010      	b.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8f4:	4b51      	ldr	r3, [pc, #324]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a900:	d106      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a908:	d102      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a90a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a90e:	e002      	b.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a914:	e235      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a916:	e234      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a918:	4b4c      	ldr	r3, [pc, #304]	@ (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91c:	e231      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a922:	e22e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a924:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a928:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a92c:	430b      	orrs	r3, r1
 800a92e:	f040 808f 	bne.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a932:	4b42      	ldr	r3, [pc, #264]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a936:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a93a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a942:	d06b      	beq.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a94a:	d874      	bhi.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a952:	d056      	beq.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a95a:	d86c      	bhi.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a962:	d03b      	beq.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a96a:	d864      	bhi.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a972:	d021      	beq.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a97a:	d85c      	bhi.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d004      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a988:	d004      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a98a:	e054      	b.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a98c:	f7fe fa0a 	bl	8008da4 <HAL_RCC_GetPCLK1Freq>
 800a990:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a992:	e1f6      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a994:	4b29      	ldr	r3, [pc, #164]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a99c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9a0:	d107      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fa0a 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b0:	e1e7      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b6:	e1e4      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b8:	4b20      	ldr	r3, [pc, #128]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9c4:	d107      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c6:	f107 030c 	add.w	r3, r7, #12
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fb4c 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d4:	e1d5      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9da:	e1d2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9dc:	4b17      	ldr	r3, [pc, #92]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d109      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9e8:	4b14      	ldr	r3, [pc, #80]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	4a13      	ldr	r2, [pc, #76]	@ (800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fa:	e1c2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa00:	e1bf      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa02:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa0e:	d102      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa10:	4b0c      	ldr	r3, [pc, #48]	@ (800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa14:	e1b5      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa1a:	e1b2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa1c:	4b07      	ldr	r3, [pc, #28]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa28:	d102      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	@ (800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2e:	e1a8      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa34:	e1a5      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3a:	e1a2      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	03d09000 	.word	0x03d09000
 800aa44:	003d0900 	.word	0x003d0900
 800aa48:	017d7840 	.word	0x017d7840
 800aa4c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	d173      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa5c:	4b9c      	ldr	r3, [pc, #624]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa6c:	d02f      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa74:	d863      	bhi.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa82:	d012      	beq.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa84:	e05b      	b.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa86:	4b92      	ldr	r3, [pc, #584]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa92:	d107      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa94:	f107 0318 	add.w	r3, r7, #24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 f991 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa2:	e16e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa8:	e16b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaaa:	4b89      	ldr	r3, [pc, #548]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aab6:	d107      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab8:	f107 030c 	add.w	r3, r7, #12
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fad3 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac6:	e15c      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aacc:	e159      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aace:	4b80      	ldr	r3, [pc, #512]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aad2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aad6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aad8:	4b7d      	ldr	r3, [pc, #500]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d10c      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d109      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaea:	4b79      	ldr	r3, [pc, #484]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	08db      	lsrs	r3, r3, #3
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	4a77      	ldr	r2, [pc, #476]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaf6:	fa22 f303 	lsr.w	r3, r2, r3
 800aafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafc:	e01e      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aafe:	4b74      	ldr	r3, [pc, #464]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab0a:	d106      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab14:	4b70      	ldr	r3, [pc, #448]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab18:	e010      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab1a:	4b6d      	ldr	r3, [pc, #436]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab26:	d106      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab2e:	d102      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab30:	4b6a      	ldr	r3, [pc, #424]	@ (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab34:	e002      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab3a:	e122      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab3c:	e121      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab42:	e11e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab48:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	d133      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab50:	4b5f      	ldr	r3, [pc, #380]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab66:	d012      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab68:	e023      	b.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab6a:	4b59      	ldr	r3, [pc, #356]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab76:	d107      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fbc7 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e0fc      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab8c:	e0f9      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab8e:	4b50      	ldr	r3, [pc, #320]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab9c:	f107 0318 	add.w	r3, r7, #24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 f90d 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e0ea      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e0e7      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb6:	e0e4      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abbc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800abc0:	430b      	orrs	r3, r1
 800abc2:	f040 808d 	bne.w	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800abc6:	4b42      	ldr	r3, [pc, #264]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800abce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abd6:	d06b      	beq.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abde:	d874      	bhi.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe6:	d056      	beq.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800abe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abee:	d86c      	bhi.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abf6:	d03b      	beq.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800abf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abfe:	d864      	bhi.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac06:	d021      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac0e:	d85c      	bhi.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac1c:	d004      	beq.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ac1e:	e054      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac20:	f000 f8b8 	bl	800ad94 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac26:	e0ac      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac28:	4b29      	ldr	r3, [pc, #164]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac34:	d107      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac36:	f107 0318 	add.w	r3, r7, #24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f8c0 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac44:	e09d      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4a:	e09a      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac4c:	4b20      	ldr	r3, [pc, #128]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac58:	d107      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5a:	f107 030c 	add.w	r3, r7, #12
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fa02 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac68:	e08b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6e:	e088      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac70:	4b17      	ldr	r3, [pc, #92]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d109      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac7c:	4b14      	ldr	r3, [pc, #80]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	08db      	lsrs	r3, r3, #3
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	4a13      	ldr	r2, [pc, #76]	@ (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac88:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8e:	e078      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac94:	e075      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac96:	4b0e      	ldr	r3, [pc, #56]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca2:	d102      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aca4:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca8:	e06b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acae:	e068      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acb0:	4b07      	ldr	r3, [pc, #28]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acbc:	d102      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800acbe:	4b07      	ldr	r3, [pc, #28]	@ (800acdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc2:	e05e      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc8:	e05b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acce:	e058      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acd0:	58024400 	.word	0x58024400
 800acd4:	03d09000 	.word	0x03d09000
 800acd8:	003d0900 	.word	0x003d0900
 800acdc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ace0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ace8:	430b      	orrs	r3, r1
 800acea:	d148      	bne.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800acec:	4b27      	ldr	r3, [pc, #156]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acf4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acfc:	d02a      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad04:	d838      	bhi.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad12:	d00d      	beq.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad14:	e030      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad16:	4b1d      	ldr	r3, [pc, #116]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad22:	d102      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ad24:	4b1a      	ldr	r3, [pc, #104]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad28:	e02b      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2e:	e028      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad30:	4b16      	ldr	r3, [pc, #88]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad3c:	d107      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 fae4 	bl	800b310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4c:	e019      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad52:	e016      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad54:	4b0d      	ldr	r3, [pc, #52]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad60:	d107      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad62:	f107 0318 	add.w	r3, r7, #24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 f82a 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad70:	e007      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad76:	e004      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7c:	e001      	b.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ad82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3740      	adds	r7, #64	@ 0x40
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	017d7840 	.word	0x017d7840

0800ad94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad98:	f7fd ffd4 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	4b06      	ldr	r3, [pc, #24]	@ (800adb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	091b      	lsrs	r3, r3, #4
 800ada4:	f003 0307 	and.w	r3, r3, #7
 800ada8:	4904      	ldr	r1, [pc, #16]	@ (800adbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800adaa:	5ccb      	ldrb	r3, [r1, r3]
 800adac:	f003 031f 	and.w	r3, r3, #31
 800adb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	58024400 	.word	0x58024400
 800adbc:	0801336c 	.word	0x0801336c

0800adc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	@ 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc8:	4ba1      	ldr	r3, [pc, #644]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800add2:	4b9f      	ldr	r3, [pc, #636]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add6:	0b1b      	lsrs	r3, r3, #12
 800add8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800addc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adde:	4b9c      	ldr	r3, [pc, #624]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800adea:	4b99      	ldr	r3, [pc, #612]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adee:	08db      	lsrs	r3, r3, #3
 800adf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	fb02 f303 	mul.w	r3, r2, r3
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8111 	beq.w	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	f000 8083 	beq.w	800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	f200 80a1 	bhi.w	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d056      	beq.n	800aed8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae2a:	e099      	b.n	800af60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2c:	4b88      	ldr	r3, [pc, #544]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02d      	beq.n	800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae38:	4b85      	ldr	r3, [pc, #532]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	08db      	lsrs	r3, r3, #3
 800ae3e:	f003 0303 	and.w	r3, r3, #3
 800ae42:	4a84      	ldr	r2, [pc, #528]	@ (800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae44:	fa22 f303 	lsr.w	r3, r2, r3
 800ae48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae62:	4b7b      	ldr	r3, [pc, #492]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae92:	e087      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea6:	4b6a      	ldr	r3, [pc, #424]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aed6:	e065      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeea:	4b59      	ldr	r3, [pc, #356]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af1a:	e043      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2e:	4b48      	ldr	r3, [pc, #288]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af5e:	e021      	b.n	800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b37      	ldr	r3, [pc, #220]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afa4:	4b2a      	ldr	r3, [pc, #168]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa8:	0a5b      	lsrs	r3, r3, #9
 800afaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800afc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afca:	ee17 2a90 	vmov	r2, s15
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800afd2:	4b1f      	ldr	r3, [pc, #124]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd6:	0c1b      	lsrs	r3, r3, #16
 800afd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afec:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff8:	ee17 2a90 	vmov	r2, s15
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b000:	4b13      	ldr	r3, [pc, #76]	@ (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b026:	ee17 2a90 	vmov	r2, s15
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b02e:	e008      	b.n	800b042 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	609a      	str	r2, [r3, #8]
}
 800b042:	bf00      	nop
 800b044:	3724      	adds	r7, #36	@ 0x24
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	58024400 	.word	0x58024400
 800b054:	03d09000 	.word	0x03d09000
 800b058:	46000000 	.word	0x46000000
 800b05c:	4c742400 	.word	0x4c742400
 800b060:	4a742400 	.word	0x4a742400
 800b064:	4bbebc20 	.word	0x4bbebc20

0800b068 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b068:	b480      	push	{r7}
 800b06a:	b089      	sub	sp, #36	@ 0x24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b070:	4ba1      	ldr	r3, [pc, #644]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	f003 0303 	and.w	r3, r3, #3
 800b078:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b07a:	4b9f      	ldr	r3, [pc, #636]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07e:	0d1b      	lsrs	r3, r3, #20
 800b080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b086:	4b9c      	ldr	r3, [pc, #624]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b092:	4b99      	ldr	r3, [pc, #612]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b096:	08db      	lsrs	r3, r3, #3
 800b098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	fb02 f303 	mul.w	r3, r2, r3
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 8111 	beq.w	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	f000 8083 	beq.w	800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	f200 80a1 	bhi.w	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d056      	beq.n	800b180 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0d2:	e099      	b.n	800b208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d4:	4b88      	ldr	r3, [pc, #544]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d02d      	beq.n	800b13c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0e0:	4b85      	ldr	r3, [pc, #532]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	08db      	lsrs	r3, r3, #3
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	4a84      	ldr	r2, [pc, #528]	@ (800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	ee07 3a90 	vmov	s15, r3
 800b0f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10a:	4b7b      	ldr	r3, [pc, #492]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b13a:	e087      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14e:	4b6a      	ldr	r3, [pc, #424]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b17e:	e065      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b192:	4b59      	ldr	r3, [pc, #356]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1c2:	e043      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d6:	4b48      	ldr	r3, [pc, #288]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b206:	e021      	b.n	800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21a:	4b37      	ldr	r3, [pc, #220]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b24a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b24c:	4b2a      	ldr	r3, [pc, #168]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b250:	0a5b      	lsrs	r3, r3, #9
 800b252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b262:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b266:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b272:	ee17 2a90 	vmov	r2, s15
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b27a:	4b1f      	ldr	r3, [pc, #124]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b290:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b294:	edd7 6a07 	vldr	s13, [r7, #28]
 800b298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a0:	ee17 2a90 	vmov	r2, s15
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	@ (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ac:	0e1b      	lsrs	r3, r3, #24
 800b2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ce:	ee17 2a90 	vmov	r2, s15
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2d6:	e008      	b.n	800b2ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	609a      	str	r2, [r3, #8]
}
 800b2ea:	bf00      	nop
 800b2ec:	3724      	adds	r7, #36	@ 0x24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	58024400 	.word	0x58024400
 800b2fc:	03d09000 	.word	0x03d09000
 800b300:	46000000 	.word	0x46000000
 800b304:	4c742400 	.word	0x4c742400
 800b308:	4a742400 	.word	0x4a742400
 800b30c:	4bbebc20 	.word	0x4bbebc20

0800b310 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b310:	b480      	push	{r7}
 800b312:	b089      	sub	sp, #36	@ 0x24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b318:	4ba0      	ldr	r3, [pc, #640]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31c:	f003 0303 	and.w	r3, r3, #3
 800b320:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b322:	4b9e      	ldr	r3, [pc, #632]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	091b      	lsrs	r3, r3, #4
 800b328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b32c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b32e:	4b9b      	ldr	r3, [pc, #620]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b338:	4b98      	ldr	r3, [pc, #608]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b33a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	fb02 f303 	mul.w	r3, r2, r3
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b350:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f000 8111 	beq.w	800b57e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	2b02      	cmp	r3, #2
 800b360:	f000 8083 	beq.w	800b46a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	2b02      	cmp	r3, #2
 800b368:	f200 80a1 	bhi.w	800b4ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d056      	beq.n	800b426 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b378:	e099      	b.n	800b4ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b37a:	4b88      	ldr	r3, [pc, #544]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d02d      	beq.n	800b3e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b386:	4b85      	ldr	r3, [pc, #532]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	08db      	lsrs	r3, r3, #3
 800b38c:	f003 0303 	and.w	r3, r3, #3
 800b390:	4a83      	ldr	r2, [pc, #524]	@ (800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b392:	fa22 f303 	lsr.w	r3, r2, r3
 800b396:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	ee07 3a90 	vmov	s15, r3
 800b3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b0:	4b7a      	ldr	r3, [pc, #488]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b8:	ee07 3a90 	vmov	s15, r3
 800b3bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3e0:	e087      	b.n	800b4f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	ee07 3a90 	vmov	s15, r3
 800b3e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f4:	4b69      	ldr	r3, [pc, #420]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fc:	ee07 3a90 	vmov	s15, r3
 800b400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b404:	ed97 6a03 	vldr	s12, [r7, #12]
 800b408:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b40c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b424:	e065      	b.n	800b4f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b430:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b438:	4b58      	ldr	r3, [pc, #352]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b440:	ee07 3a90 	vmov	s15, r3
 800b444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b448:	ed97 6a03 	vldr	s12, [r7, #12]
 800b44c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b45c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b468:	e043      	b.n	800b4f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b474:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47c:	4b47      	ldr	r3, [pc, #284]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b484:	ee07 3a90 	vmov	s15, r3
 800b488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b490:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ac:	e021      	b.n	800b4f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	ee07 3a90 	vmov	s15, r3
 800b4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c0:	4b36      	ldr	r3, [pc, #216]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b4f2:	4b2a      	ldr	r3, [pc, #168]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f6:	0a5b      	lsrs	r3, r3, #9
 800b4f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4fc:	ee07 3a90 	vmov	s15, r3
 800b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b50c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b518:	ee17 2a90 	vmov	r2, s15
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b520:	4b1e      	ldr	r3, [pc, #120]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b53a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b53e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b546:	ee17 2a90 	vmov	r2, s15
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b54e:	4b13      	ldr	r3, [pc, #76]	@ (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b552:	0e1b      	lsrs	r3, r3, #24
 800b554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b564:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b568:	edd7 6a07 	vldr	s13, [r7, #28]
 800b56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b574:	ee17 2a90 	vmov	r2, s15
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b57c:	e008      	b.n	800b590 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	609a      	str	r2, [r3, #8]
}
 800b590:	bf00      	nop
 800b592:	3724      	adds	r7, #36	@ 0x24
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	58024400 	.word	0x58024400
 800b5a0:	03d09000 	.word	0x03d09000
 800b5a4:	46000000 	.word	0x46000000
 800b5a8:	4c742400 	.word	0x4c742400
 800b5ac:	4a742400 	.word	0x4a742400
 800b5b0:	4bbebc20 	.word	0x4bbebc20

0800b5b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5c2:	4b53      	ldr	r3, [pc, #332]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d101      	bne.n	800b5d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e099      	b.n	800b706 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5d2:	4b4f      	ldr	r3, [pc, #316]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a4e      	ldr	r2, [pc, #312]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b5d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5de:	f7f6 f941 	bl	8001864 <HAL_GetTick>
 800b5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5e4:	e008      	b.n	800b5f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5e6:	f7f6 f93d 	bl	8001864 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d901      	bls.n	800b5f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e086      	b.n	800b706 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5f8:	4b45      	ldr	r3, [pc, #276]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f0      	bne.n	800b5e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b604:	4b42      	ldr	r3, [pc, #264]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b608:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	031b      	lsls	r3, r3, #12
 800b612:	493f      	ldr	r1, [pc, #252]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b614:	4313      	orrs	r3, r2
 800b616:	628b      	str	r3, [r1, #40]	@ 0x28
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	3b01      	subs	r3, #1
 800b628:	025b      	lsls	r3, r3, #9
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	431a      	orrs	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	3b01      	subs	r3, #1
 800b634:	041b      	lsls	r3, r3, #16
 800b636:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	3b01      	subs	r3, #1
 800b642:	061b      	lsls	r3, r3, #24
 800b644:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b648:	4931      	ldr	r1, [pc, #196]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b64a:	4313      	orrs	r3, r2
 800b64c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b64e:	4b30      	ldr	r3, [pc, #192]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	492d      	ldr	r1, [pc, #180]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b660:	4b2b      	ldr	r3, [pc, #172]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	f023 0220 	bic.w	r2, r3, #32
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	4928      	ldr	r1, [pc, #160]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b66e:	4313      	orrs	r3, r2
 800b670:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b672:	4b27      	ldr	r3, [pc, #156]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	4a26      	ldr	r2, [pc, #152]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b678:	f023 0310 	bic.w	r3, r3, #16
 800b67c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b67e:	4b24      	ldr	r3, [pc, #144]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b682:	4b24      	ldr	r3, [pc, #144]	@ (800b714 <RCCEx_PLL2_Config+0x160>)
 800b684:	4013      	ands	r3, r2
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	69d2      	ldr	r2, [r2, #28]
 800b68a:	00d2      	lsls	r2, r2, #3
 800b68c:	4920      	ldr	r1, [pc, #128]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b692:	4b1f      	ldr	r3, [pc, #124]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b696:	4a1e      	ldr	r2, [pc, #120]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b698:	f043 0310 	orr.w	r3, r3, #16
 800b69c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d106      	bne.n	800b6b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a8:	4a19      	ldr	r2, [pc, #100]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6b0:	e00f      	b.n	800b6d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d106      	bne.n	800b6c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6b8:	4b15      	ldr	r3, [pc, #84]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6bc:	4a14      	ldr	r2, [pc, #80]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6c4:	e005      	b.n	800b6d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6c6:	4b12      	ldr	r3, [pc, #72]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	4a11      	ldr	r2, [pc, #68]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a0e      	ldr	r2, [pc, #56]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6de:	f7f6 f8c1 	bl	8001864 <HAL_GetTick>
 800b6e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6e4:	e008      	b.n	800b6f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6e6:	f7f6 f8bd 	bl	8001864 <HAL_GetTick>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d901      	bls.n	800b6f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e006      	b.n	800b706 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6f8:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <RCCEx_PLL2_Config+0x15c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d0f0      	beq.n	800b6e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b704:	7bfb      	ldrb	r3, [r7, #15]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	58024400 	.word	0x58024400
 800b714:	ffff0007 	.word	0xffff0007

0800b718 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b726:	4b53      	ldr	r3, [pc, #332]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d101      	bne.n	800b736 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e099      	b.n	800b86a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b736:	4b4f      	ldr	r3, [pc, #316]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a4e      	ldr	r2, [pc, #312]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b73c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b742:	f7f6 f88f 	bl	8001864 <HAL_GetTick>
 800b746:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b748:	e008      	b.n	800b75c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b74a:	f7f6 f88b 	bl	8001864 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d901      	bls.n	800b75c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e086      	b.n	800b86a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b75c:	4b45      	ldr	r3, [pc, #276]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1f0      	bne.n	800b74a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b768:	4b42      	ldr	r3, [pc, #264]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	051b      	lsls	r3, r3, #20
 800b776:	493f      	ldr	r1, [pc, #252]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b778:	4313      	orrs	r3, r2
 800b77a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	3b01      	subs	r3, #1
 800b782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	025b      	lsls	r3, r3, #9
 800b78e:	b29b      	uxth	r3, r3
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	3b01      	subs	r3, #1
 800b798:	041b      	lsls	r3, r3, #16
 800b79a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	061b      	lsls	r3, r3, #24
 800b7a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7ac:	4931      	ldr	r1, [pc, #196]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7b2:	4b30      	ldr	r3, [pc, #192]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	492d      	ldr	r1, [pc, #180]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	4928      	ldr	r1, [pc, #160]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7d6:	4b27      	ldr	r3, [pc, #156]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7da:	4a26      	ldr	r2, [pc, #152]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7e2:	4b24      	ldr	r3, [pc, #144]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7e6:	4b24      	ldr	r3, [pc, #144]	@ (800b878 <RCCEx_PLL3_Config+0x160>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	69d2      	ldr	r2, [r2, #28]
 800b7ee:	00d2      	lsls	r2, r2, #3
 800b7f0:	4920      	ldr	r1, [pc, #128]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b7fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b808:	4b1a      	ldr	r3, [pc, #104]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80c:	4a19      	ldr	r2, [pc, #100]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b80e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b812:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b814:	e00f      	b.n	800b836 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d106      	bne.n	800b82a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b81c:	4b15      	ldr	r3, [pc, #84]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b820:	4a14      	ldr	r2, [pc, #80]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b822:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b826:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b828:	e005      	b.n	800b836 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b82a:	4b12      	ldr	r3, [pc, #72]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82e:	4a11      	ldr	r2, [pc, #68]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b830:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b834:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b836:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a0e      	ldr	r2, [pc, #56]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b83c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b842:	f7f6 f80f 	bl	8001864 <HAL_GetTick>
 800b846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b848:	e008      	b.n	800b85c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b84a:	f7f6 f80b 	bl	8001864 <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	2b02      	cmp	r3, #2
 800b856:	d901      	bls.n	800b85c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b858:	2303      	movs	r3, #3
 800b85a:	e006      	b.n	800b86a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b85c:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <RCCEx_PLL3_Config+0x15c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d0f0      	beq.n	800b84a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	58024400 	.word	0x58024400
 800b878:	ffff0007 	.word	0xffff0007

0800b87c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e049      	b.n	800b922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f841 	bl	800b92a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	f000 f9e8 	bl	800bc90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
	...

0800b940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b01      	cmp	r3, #1
 800b952:	d001      	beq.n	800b958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e054      	b.n	800ba02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68da      	ldr	r2, [r3, #12]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f042 0201 	orr.w	r2, r2, #1
 800b96e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a26      	ldr	r2, [pc, #152]	@ (800ba10 <HAL_TIM_Base_Start_IT+0xd0>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d022      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b982:	d01d      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a22      	ldr	r2, [pc, #136]	@ (800ba14 <HAL_TIM_Base_Start_IT+0xd4>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d018      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a21      	ldr	r2, [pc, #132]	@ (800ba18 <HAL_TIM_Base_Start_IT+0xd8>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d013      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a1f      	ldr	r2, [pc, #124]	@ (800ba1c <HAL_TIM_Base_Start_IT+0xdc>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d00e      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d009      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a1c      	ldr	r2, [pc, #112]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xe4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d004      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x80>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1b      	ldr	r2, [pc, #108]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d115      	bne.n	800b9ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	4b19      	ldr	r3, [pc, #100]	@ (800ba2c <HAL_TIM_Base_Start_IT+0xec>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b06      	cmp	r3, #6
 800b9d0:	d015      	beq.n	800b9fe <HAL_TIM_Base_Start_IT+0xbe>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9d8:	d011      	beq.n	800b9fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f042 0201 	orr.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ea:	e008      	b.n	800b9fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f042 0201 	orr.w	r2, r2, #1
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	e000      	b.n	800ba00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40010000 	.word	0x40010000
 800ba14:	40000400 	.word	0x40000400
 800ba18:	40000800 	.word	0x40000800
 800ba1c:	40000c00 	.word	0x40000c00
 800ba20:	40010400 	.word	0x40010400
 800ba24:	40001800 	.word	0x40001800
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	00010007 	.word	0x00010007

0800ba30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 0302 	and.w	r3, r3, #2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d020      	beq.n	800ba94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01b      	beq.n	800ba94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0202 	mvn.w	r2, #2
 800ba64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	699b      	ldr	r3, [r3, #24]
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f8e9 	bl	800bc52 <HAL_TIM_IC_CaptureCallback>
 800ba80:	e005      	b.n	800ba8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f8db 	bl	800bc3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f8ec 	bl	800bc66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d020      	beq.n	800bae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d01b      	beq.n	800bae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f06f 0204 	mvn.w	r2, #4
 800bab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2202      	movs	r2, #2
 800bab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f8c3 	bl	800bc52 <HAL_TIM_IC_CaptureCallback>
 800bacc:	e005      	b.n	800bada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8b5 	bl	800bc3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f8c6 	bl	800bc66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d020      	beq.n	800bb2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f003 0308 	and.w	r3, r3, #8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d01b      	beq.n	800bb2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0208 	mvn.w	r2, #8
 800bafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2204      	movs	r2, #4
 800bb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f003 0303 	and.w	r3, r3, #3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f89d 	bl	800bc52 <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f88f 	bl	800bc3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8a0 	bl	800bc66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f003 0310 	and.w	r3, r3, #16
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d020      	beq.n	800bb78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f003 0310 	and.w	r3, r3, #16
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01b      	beq.n	800bb78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f06f 0210 	mvn.w	r2, #16
 800bb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2208      	movs	r2, #8
 800bb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f877 	bl	800bc52 <HAL_TIM_IC_CaptureCallback>
 800bb64:	e005      	b.n	800bb72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f869 	bl	800bc3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f87a 	bl	800bc66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00c      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d007      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0201 	mvn.w	r2, #1
 800bb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7f5 fa56 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d104      	bne.n	800bbb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00c      	beq.n	800bbca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d007      	beq.n	800bbca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f90d 	bl	800bde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00c      	beq.n	800bbee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f905 	bl	800bdf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00c      	beq.n	800bc12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d007      	beq.n	800bc12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f834 	bl	800bc7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f003 0320 	and.w	r3, r3, #32
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00c      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f003 0320 	and.w	r3, r3, #32
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f06f 0220 	mvn.w	r2, #32
 800bc2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f8cd 	bl	800bdd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc36:	bf00      	nop
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
	...

0800bc90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a43      	ldr	r2, [pc, #268]	@ (800bdb0 <TIM_Base_SetConfig+0x120>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d013      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcae:	d00f      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a40      	ldr	r2, [pc, #256]	@ (800bdb4 <TIM_Base_SetConfig+0x124>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00b      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a3f      	ldr	r2, [pc, #252]	@ (800bdb8 <TIM_Base_SetConfig+0x128>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d007      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a3e      	ldr	r2, [pc, #248]	@ (800bdbc <TIM_Base_SetConfig+0x12c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d003      	beq.n	800bcd0 <TIM_Base_SetConfig+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a3d      	ldr	r2, [pc, #244]	@ (800bdc0 <TIM_Base_SetConfig+0x130>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d108      	bne.n	800bce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a32      	ldr	r2, [pc, #200]	@ (800bdb0 <TIM_Base_SetConfig+0x120>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d01f      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf0:	d01b      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a2f      	ldr	r2, [pc, #188]	@ (800bdb4 <TIM_Base_SetConfig+0x124>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d017      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a2e      	ldr	r2, [pc, #184]	@ (800bdb8 <TIM_Base_SetConfig+0x128>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d013      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a2d      	ldr	r2, [pc, #180]	@ (800bdbc <TIM_Base_SetConfig+0x12c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d00f      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2c      	ldr	r2, [pc, #176]	@ (800bdc0 <TIM_Base_SetConfig+0x130>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00b      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a2b      	ldr	r2, [pc, #172]	@ (800bdc4 <TIM_Base_SetConfig+0x134>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d007      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2a      	ldr	r2, [pc, #168]	@ (800bdc8 <TIM_Base_SetConfig+0x138>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d003      	beq.n	800bd2a <TIM_Base_SetConfig+0x9a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a29      	ldr	r2, [pc, #164]	@ (800bdcc <TIM_Base_SetConfig+0x13c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d108      	bne.n	800bd3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a14      	ldr	r2, [pc, #80]	@ (800bdb0 <TIM_Base_SetConfig+0x120>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d00f      	beq.n	800bd82 <TIM_Base_SetConfig+0xf2>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a16      	ldr	r2, [pc, #88]	@ (800bdc0 <TIM_Base_SetConfig+0x130>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00b      	beq.n	800bd82 <TIM_Base_SetConfig+0xf2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a15      	ldr	r2, [pc, #84]	@ (800bdc4 <TIM_Base_SetConfig+0x134>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d007      	beq.n	800bd82 <TIM_Base_SetConfig+0xf2>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a14      	ldr	r2, [pc, #80]	@ (800bdc8 <TIM_Base_SetConfig+0x138>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d003      	beq.n	800bd82 <TIM_Base_SetConfig+0xf2>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4a13      	ldr	r2, [pc, #76]	@ (800bdcc <TIM_Base_SetConfig+0x13c>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d103      	bne.n	800bd8a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	691a      	ldr	r2, [r3, #16]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f043 0204 	orr.w	r2, r3, #4
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]
}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	40010000 	.word	0x40010000
 800bdb4:	40000400 	.word	0x40000400
 800bdb8:	40000800 	.word	0x40000800
 800bdbc:	40000c00 	.word	0x40000c00
 800bdc0:	40010400 	.word	0x40010400
 800bdc4:	40014000 	.word	0x40014000
 800bdc8:	40014400 	.word	0x40014400
 800bdcc:	40014800 	.word	0x40014800

0800bdd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e042      	b.n	800bea4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be24:	2b00      	cmp	r3, #0
 800be26:	d106      	bne.n	800be36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7f5 fc1b 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2224      	movs	r2, #36	@ 0x24
 800be3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fe1e 	bl	800ca98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f8b3 	bl	800bfc8 <UART_SetConfig>
 800be62:	4603      	mov	r3, r0
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e01b      	b.n	800bea4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0201 	orr.w	r2, r2, #1
 800be9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fe9d 	bl	800cbdc <UART_CheckIdleState>
 800bea2:	4603      	mov	r3, r0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	@ 0x28
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	603b      	str	r3, [r7, #0]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	d17b      	bne.n	800bfbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <HAL_UART_Transmit+0x26>
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e074      	b.n	800bfc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2221      	movs	r2, #33	@ 0x21
 800bee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bee6:	f7f5 fcbd 	bl	8001864 <HAL_GetTick>
 800beea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	88fa      	ldrh	r2, [r7, #6]
 800bef0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf04:	d108      	bne.n	800bf18 <HAL_UART_Transmit+0x6c>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d104      	bne.n	800bf18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	e003      	b.n	800bf20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf20:	e030      	b.n	800bf84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2180      	movs	r1, #128	@ 0x80
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 feff 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d005      	beq.n	800bf44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2220      	movs	r2, #32
 800bf3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf40:	2303      	movs	r3, #3
 800bf42:	e03d      	b.n	800bfc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10b      	bne.n	800bf62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	881b      	ldrh	r3, [r3, #0]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	3302      	adds	r3, #2
 800bf5e:	61bb      	str	r3, [r7, #24]
 800bf60:	e007      	b.n	800bf72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1c8      	bne.n	800bf22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2200      	movs	r2, #0
 800bf98:	2140      	movs	r1, #64	@ 0x40
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 fec8 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d005      	beq.n	800bfb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e006      	b.n	800bfc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e000      	b.n	800bfc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfbe:	2302      	movs	r3, #2
  }
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3720      	adds	r7, #32
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfcc:	b092      	sub	sp, #72	@ 0x48
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	4bbe      	ldr	r3, [pc, #760]	@ (800c2f0 <UART_SetConfig+0x328>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	6812      	ldr	r2, [r2, #0]
 800bffe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c000:	430b      	orrs	r3, r1
 800c002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	68da      	ldr	r2, [r3, #12]
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	430a      	orrs	r2, r1
 800c018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4ab3      	ldr	r2, [pc, #716]	@ (800c2f4 <UART_SetConfig+0x32c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d004      	beq.n	800c034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c030:	4313      	orrs	r3, r2
 800c032:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689a      	ldr	r2, [r3, #8]
 800c03a:	4baf      	ldr	r3, [pc, #700]	@ (800c2f8 <UART_SetConfig+0x330>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	6812      	ldr	r2, [r2, #0]
 800c042:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c044:	430b      	orrs	r3, r1
 800c046:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04e:	f023 010f 	bic.w	r1, r3, #15
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4aa6      	ldr	r2, [pc, #664]	@ (800c2fc <UART_SetConfig+0x334>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d177      	bne.n	800c158 <UART_SetConfig+0x190>
 800c068:	4ba5      	ldr	r3, [pc, #660]	@ (800c300 <UART_SetConfig+0x338>)
 800c06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c070:	2b28      	cmp	r3, #40	@ 0x28
 800c072:	d86d      	bhi.n	800c150 <UART_SetConfig+0x188>
 800c074:	a201      	add	r2, pc, #4	@ (adr r2, 800c07c <UART_SetConfig+0xb4>)
 800c076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07a:	bf00      	nop
 800c07c:	0800c121 	.word	0x0800c121
 800c080:	0800c151 	.word	0x0800c151
 800c084:	0800c151 	.word	0x0800c151
 800c088:	0800c151 	.word	0x0800c151
 800c08c:	0800c151 	.word	0x0800c151
 800c090:	0800c151 	.word	0x0800c151
 800c094:	0800c151 	.word	0x0800c151
 800c098:	0800c151 	.word	0x0800c151
 800c09c:	0800c129 	.word	0x0800c129
 800c0a0:	0800c151 	.word	0x0800c151
 800c0a4:	0800c151 	.word	0x0800c151
 800c0a8:	0800c151 	.word	0x0800c151
 800c0ac:	0800c151 	.word	0x0800c151
 800c0b0:	0800c151 	.word	0x0800c151
 800c0b4:	0800c151 	.word	0x0800c151
 800c0b8:	0800c151 	.word	0x0800c151
 800c0bc:	0800c131 	.word	0x0800c131
 800c0c0:	0800c151 	.word	0x0800c151
 800c0c4:	0800c151 	.word	0x0800c151
 800c0c8:	0800c151 	.word	0x0800c151
 800c0cc:	0800c151 	.word	0x0800c151
 800c0d0:	0800c151 	.word	0x0800c151
 800c0d4:	0800c151 	.word	0x0800c151
 800c0d8:	0800c151 	.word	0x0800c151
 800c0dc:	0800c139 	.word	0x0800c139
 800c0e0:	0800c151 	.word	0x0800c151
 800c0e4:	0800c151 	.word	0x0800c151
 800c0e8:	0800c151 	.word	0x0800c151
 800c0ec:	0800c151 	.word	0x0800c151
 800c0f0:	0800c151 	.word	0x0800c151
 800c0f4:	0800c151 	.word	0x0800c151
 800c0f8:	0800c151 	.word	0x0800c151
 800c0fc:	0800c141 	.word	0x0800c141
 800c100:	0800c151 	.word	0x0800c151
 800c104:	0800c151 	.word	0x0800c151
 800c108:	0800c151 	.word	0x0800c151
 800c10c:	0800c151 	.word	0x0800c151
 800c110:	0800c151 	.word	0x0800c151
 800c114:	0800c151 	.word	0x0800c151
 800c118:	0800c151 	.word	0x0800c151
 800c11c:	0800c149 	.word	0x0800c149
 800c120:	2301      	movs	r3, #1
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c126:	e222      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c128:	2304      	movs	r3, #4
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12e:	e21e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c130:	2308      	movs	r3, #8
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c136:	e21a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c138:	2310      	movs	r3, #16
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13e:	e216      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c140:	2320      	movs	r3, #32
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c146:	e212      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c148:	2340      	movs	r3, #64	@ 0x40
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e20e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c150:	2380      	movs	r3, #128	@ 0x80
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c156:	e20a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a69      	ldr	r2, [pc, #420]	@ (800c304 <UART_SetConfig+0x33c>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d130      	bne.n	800c1c4 <UART_SetConfig+0x1fc>
 800c162:	4b67      	ldr	r3, [pc, #412]	@ (800c300 <UART_SetConfig+0x338>)
 800c164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	d826      	bhi.n	800c1bc <UART_SetConfig+0x1f4>
 800c16e:	a201      	add	r2, pc, #4	@ (adr r2, 800c174 <UART_SetConfig+0x1ac>)
 800c170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c174:	0800c18d 	.word	0x0800c18d
 800c178:	0800c195 	.word	0x0800c195
 800c17c:	0800c19d 	.word	0x0800c19d
 800c180:	0800c1a5 	.word	0x0800c1a5
 800c184:	0800c1ad 	.word	0x0800c1ad
 800c188:	0800c1b5 	.word	0x0800c1b5
 800c18c:	2300      	movs	r3, #0
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c192:	e1ec      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c194:	2304      	movs	r3, #4
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19a:	e1e8      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c19c:	2308      	movs	r3, #8
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a2:	e1e4      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1aa:	e1e0      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c1ac:	2320      	movs	r3, #32
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b2:	e1dc      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c1b4:	2340      	movs	r3, #64	@ 0x40
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e1d8      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c1bc:	2380      	movs	r3, #128	@ 0x80
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e1d4      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a4f      	ldr	r2, [pc, #316]	@ (800c308 <UART_SetConfig+0x340>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d130      	bne.n	800c230 <UART_SetConfig+0x268>
 800c1ce:	4b4c      	ldr	r3, [pc, #304]	@ (800c300 <UART_SetConfig+0x338>)
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d826      	bhi.n	800c228 <UART_SetConfig+0x260>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <UART_SetConfig+0x218>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1f9 	.word	0x0800c1f9
 800c1e4:	0800c201 	.word	0x0800c201
 800c1e8:	0800c209 	.word	0x0800c209
 800c1ec:	0800c211 	.word	0x0800c211
 800c1f0:	0800c219 	.word	0x0800c219
 800c1f4:	0800c221 	.word	0x0800c221
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fe:	e1b6      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c200:	2304      	movs	r3, #4
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c206:	e1b2      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c208:	2308      	movs	r3, #8
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20e:	e1ae      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c210:	2310      	movs	r3, #16
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c216:	e1aa      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c218:	2320      	movs	r3, #32
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21e:	e1a6      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c220:	2340      	movs	r3, #64	@ 0x40
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e1a2      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c228:	2380      	movs	r3, #128	@ 0x80
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e19e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a35      	ldr	r2, [pc, #212]	@ (800c30c <UART_SetConfig+0x344>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d130      	bne.n	800c29c <UART_SetConfig+0x2d4>
 800c23a:	4b31      	ldr	r3, [pc, #196]	@ (800c300 <UART_SetConfig+0x338>)
 800c23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b05      	cmp	r3, #5
 800c244:	d826      	bhi.n	800c294 <UART_SetConfig+0x2cc>
 800c246:	a201      	add	r2, pc, #4	@ (adr r2, 800c24c <UART_SetConfig+0x284>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c265 	.word	0x0800c265
 800c250:	0800c26d 	.word	0x0800c26d
 800c254:	0800c275 	.word	0x0800c275
 800c258:	0800c27d 	.word	0x0800c27d
 800c25c:	0800c285 	.word	0x0800c285
 800c260:	0800c28d 	.word	0x0800c28d
 800c264:	2300      	movs	r3, #0
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26a:	e180      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c26c:	2304      	movs	r3, #4
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c272:	e17c      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c274:	2308      	movs	r3, #8
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27a:	e178      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c27c:	2310      	movs	r3, #16
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c282:	e174      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c284:	2320      	movs	r3, #32
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28a:	e170      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c28c:	2340      	movs	r3, #64	@ 0x40
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e16c      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c294:	2380      	movs	r3, #128	@ 0x80
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e168      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c310 <UART_SetConfig+0x348>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d142      	bne.n	800c32c <UART_SetConfig+0x364>
 800c2a6:	4b16      	ldr	r3, [pc, #88]	@ (800c300 <UART_SetConfig+0x338>)
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	d838      	bhi.n	800c324 <UART_SetConfig+0x35c>
 800c2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b8 <UART_SetConfig+0x2f0>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c2d1 	.word	0x0800c2d1
 800c2bc:	0800c2d9 	.word	0x0800c2d9
 800c2c0:	0800c2e1 	.word	0x0800c2e1
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c315 	.word	0x0800c315
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e14a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c2d8:	2304      	movs	r3, #4
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2de:	e146      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c2e0:	2308      	movs	r3, #8
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e6:	e142      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ee:	e13e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c2f0:	cfff69f3 	.word	0xcfff69f3
 800c2f4:	58000c00 	.word	0x58000c00
 800c2f8:	11fff4ff 	.word	0x11fff4ff
 800c2fc:	40011000 	.word	0x40011000
 800c300:	58024400 	.word	0x58024400
 800c304:	40004400 	.word	0x40004400
 800c308:	40004800 	.word	0x40004800
 800c30c:	40004c00 	.word	0x40004c00
 800c310:	40005000 	.word	0x40005000
 800c314:	2320      	movs	r3, #32
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31a:	e128      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c31c:	2340      	movs	r3, #64	@ 0x40
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c322:	e124      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c324:	2380      	movs	r3, #128	@ 0x80
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32a:	e120      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4acb      	ldr	r2, [pc, #812]	@ (800c660 <UART_SetConfig+0x698>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d176      	bne.n	800c424 <UART_SetConfig+0x45c>
 800c336:	4bcb      	ldr	r3, [pc, #812]	@ (800c664 <UART_SetConfig+0x69c>)
 800c338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c33e:	2b28      	cmp	r3, #40	@ 0x28
 800c340:	d86c      	bhi.n	800c41c <UART_SetConfig+0x454>
 800c342:	a201      	add	r2, pc, #4	@ (adr r2, 800c348 <UART_SetConfig+0x380>)
 800c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c348:	0800c3ed 	.word	0x0800c3ed
 800c34c:	0800c41d 	.word	0x0800c41d
 800c350:	0800c41d 	.word	0x0800c41d
 800c354:	0800c41d 	.word	0x0800c41d
 800c358:	0800c41d 	.word	0x0800c41d
 800c35c:	0800c41d 	.word	0x0800c41d
 800c360:	0800c41d 	.word	0x0800c41d
 800c364:	0800c41d 	.word	0x0800c41d
 800c368:	0800c3f5 	.word	0x0800c3f5
 800c36c:	0800c41d 	.word	0x0800c41d
 800c370:	0800c41d 	.word	0x0800c41d
 800c374:	0800c41d 	.word	0x0800c41d
 800c378:	0800c41d 	.word	0x0800c41d
 800c37c:	0800c41d 	.word	0x0800c41d
 800c380:	0800c41d 	.word	0x0800c41d
 800c384:	0800c41d 	.word	0x0800c41d
 800c388:	0800c3fd 	.word	0x0800c3fd
 800c38c:	0800c41d 	.word	0x0800c41d
 800c390:	0800c41d 	.word	0x0800c41d
 800c394:	0800c41d 	.word	0x0800c41d
 800c398:	0800c41d 	.word	0x0800c41d
 800c39c:	0800c41d 	.word	0x0800c41d
 800c3a0:	0800c41d 	.word	0x0800c41d
 800c3a4:	0800c41d 	.word	0x0800c41d
 800c3a8:	0800c405 	.word	0x0800c405
 800c3ac:	0800c41d 	.word	0x0800c41d
 800c3b0:	0800c41d 	.word	0x0800c41d
 800c3b4:	0800c41d 	.word	0x0800c41d
 800c3b8:	0800c41d 	.word	0x0800c41d
 800c3bc:	0800c41d 	.word	0x0800c41d
 800c3c0:	0800c41d 	.word	0x0800c41d
 800c3c4:	0800c41d 	.word	0x0800c41d
 800c3c8:	0800c40d 	.word	0x0800c40d
 800c3cc:	0800c41d 	.word	0x0800c41d
 800c3d0:	0800c41d 	.word	0x0800c41d
 800c3d4:	0800c41d 	.word	0x0800c41d
 800c3d8:	0800c41d 	.word	0x0800c41d
 800c3dc:	0800c41d 	.word	0x0800c41d
 800c3e0:	0800c41d 	.word	0x0800c41d
 800c3e4:	0800c41d 	.word	0x0800c41d
 800c3e8:	0800c415 	.word	0x0800c415
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f2:	e0bc      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c3f4:	2304      	movs	r3, #4
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fa:	e0b8      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c3fc:	2308      	movs	r3, #8
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c402:	e0b4      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c404:	2310      	movs	r3, #16
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40a:	e0b0      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c40c:	2320      	movs	r3, #32
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c412:	e0ac      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c414:	2340      	movs	r3, #64	@ 0x40
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e0a8      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c41c:	2380      	movs	r3, #128	@ 0x80
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e0a4      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a8f      	ldr	r2, [pc, #572]	@ (800c668 <UART_SetConfig+0x6a0>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d130      	bne.n	800c490 <UART_SetConfig+0x4c8>
 800c42e:	4b8d      	ldr	r3, [pc, #564]	@ (800c664 <UART_SetConfig+0x69c>)
 800c430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	2b05      	cmp	r3, #5
 800c438:	d826      	bhi.n	800c488 <UART_SetConfig+0x4c0>
 800c43a:	a201      	add	r2, pc, #4	@ (adr r2, 800c440 <UART_SetConfig+0x478>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c459 	.word	0x0800c459
 800c444:	0800c461 	.word	0x0800c461
 800c448:	0800c469 	.word	0x0800c469
 800c44c:	0800c471 	.word	0x0800c471
 800c450:	0800c479 	.word	0x0800c479
 800c454:	0800c481 	.word	0x0800c481
 800c458:	2300      	movs	r3, #0
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45e:	e086      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c460:	2304      	movs	r3, #4
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c466:	e082      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c468:	2308      	movs	r3, #8
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46e:	e07e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c470:	2310      	movs	r3, #16
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c476:	e07a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c478:	2320      	movs	r3, #32
 800c47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47e:	e076      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c480:	2340      	movs	r3, #64	@ 0x40
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c486:	e072      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c488:	2380      	movs	r3, #128	@ 0x80
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e06e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a75      	ldr	r2, [pc, #468]	@ (800c66c <UART_SetConfig+0x6a4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d130      	bne.n	800c4fc <UART_SetConfig+0x534>
 800c49a:	4b72      	ldr	r3, [pc, #456]	@ (800c664 <UART_SetConfig+0x69c>)
 800c49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c49e:	f003 0307 	and.w	r3, r3, #7
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	d826      	bhi.n	800c4f4 <UART_SetConfig+0x52c>
 800c4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <UART_SetConfig+0x4e4>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4c5 	.word	0x0800c4c5
 800c4b0:	0800c4cd 	.word	0x0800c4cd
 800c4b4:	0800c4d5 	.word	0x0800c4d5
 800c4b8:	0800c4dd 	.word	0x0800c4dd
 800c4bc:	0800c4e5 	.word	0x0800c4e5
 800c4c0:	0800c4ed 	.word	0x0800c4ed
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ca:	e050      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d2:	e04c      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4da:	e048      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4dc:	2310      	movs	r3, #16
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e2:	e044      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4e4:	2320      	movs	r3, #32
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ea:	e040      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4ec:	2340      	movs	r3, #64	@ 0x40
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f2:	e03c      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4f4:	2380      	movs	r3, #128	@ 0x80
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fa:	e038      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a5b      	ldr	r2, [pc, #364]	@ (800c670 <UART_SetConfig+0x6a8>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d130      	bne.n	800c568 <UART_SetConfig+0x5a0>
 800c506:	4b57      	ldr	r3, [pc, #348]	@ (800c664 <UART_SetConfig+0x69c>)
 800c508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	2b05      	cmp	r3, #5
 800c510:	d826      	bhi.n	800c560 <UART_SetConfig+0x598>
 800c512:	a201      	add	r2, pc, #4	@ (adr r2, 800c518 <UART_SetConfig+0x550>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c531 	.word	0x0800c531
 800c51c:	0800c539 	.word	0x0800c539
 800c520:	0800c541 	.word	0x0800c541
 800c524:	0800c549 	.word	0x0800c549
 800c528:	0800c551 	.word	0x0800c551
 800c52c:	0800c559 	.word	0x0800c559
 800c530:	2302      	movs	r3, #2
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c536:	e01a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c538:	2304      	movs	r3, #4
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53e:	e016      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c540:	2308      	movs	r3, #8
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c546:	e012      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c548:	2310      	movs	r3, #16
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54e:	e00e      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c550:	2320      	movs	r3, #32
 800c552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c556:	e00a      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c558:	2340      	movs	r3, #64	@ 0x40
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55e:	e006      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c560:	2380      	movs	r3, #128	@ 0x80
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c566:	e002      	b.n	800c56e <UART_SetConfig+0x5a6>
 800c568:	2380      	movs	r3, #128	@ 0x80
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a3f      	ldr	r2, [pc, #252]	@ (800c670 <UART_SetConfig+0x6a8>)
 800c574:	4293      	cmp	r3, r2
 800c576:	f040 80f8 	bne.w	800c76a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c57a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c57e:	2b20      	cmp	r3, #32
 800c580:	dc46      	bgt.n	800c610 <UART_SetConfig+0x648>
 800c582:	2b02      	cmp	r3, #2
 800c584:	f2c0 8082 	blt.w	800c68c <UART_SetConfig+0x6c4>
 800c588:	3b02      	subs	r3, #2
 800c58a:	2b1e      	cmp	r3, #30
 800c58c:	d87e      	bhi.n	800c68c <UART_SetConfig+0x6c4>
 800c58e:	a201      	add	r2, pc, #4	@ (adr r2, 800c594 <UART_SetConfig+0x5cc>)
 800c590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c594:	0800c617 	.word	0x0800c617
 800c598:	0800c68d 	.word	0x0800c68d
 800c59c:	0800c61f 	.word	0x0800c61f
 800c5a0:	0800c68d 	.word	0x0800c68d
 800c5a4:	0800c68d 	.word	0x0800c68d
 800c5a8:	0800c68d 	.word	0x0800c68d
 800c5ac:	0800c62f 	.word	0x0800c62f
 800c5b0:	0800c68d 	.word	0x0800c68d
 800c5b4:	0800c68d 	.word	0x0800c68d
 800c5b8:	0800c68d 	.word	0x0800c68d
 800c5bc:	0800c68d 	.word	0x0800c68d
 800c5c0:	0800c68d 	.word	0x0800c68d
 800c5c4:	0800c68d 	.word	0x0800c68d
 800c5c8:	0800c68d 	.word	0x0800c68d
 800c5cc:	0800c63f 	.word	0x0800c63f
 800c5d0:	0800c68d 	.word	0x0800c68d
 800c5d4:	0800c68d 	.word	0x0800c68d
 800c5d8:	0800c68d 	.word	0x0800c68d
 800c5dc:	0800c68d 	.word	0x0800c68d
 800c5e0:	0800c68d 	.word	0x0800c68d
 800c5e4:	0800c68d 	.word	0x0800c68d
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c68d 	.word	0x0800c68d
 800c5f0:	0800c68d 	.word	0x0800c68d
 800c5f4:	0800c68d 	.word	0x0800c68d
 800c5f8:	0800c68d 	.word	0x0800c68d
 800c5fc:	0800c68d 	.word	0x0800c68d
 800c600:	0800c68d 	.word	0x0800c68d
 800c604:	0800c68d 	.word	0x0800c68d
 800c608:	0800c68d 	.word	0x0800c68d
 800c60c:	0800c67f 	.word	0x0800c67f
 800c610:	2b40      	cmp	r3, #64	@ 0x40
 800c612:	d037      	beq.n	800c684 <UART_SetConfig+0x6bc>
 800c614:	e03a      	b.n	800c68c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c616:	f7fe fbbd 	bl	800ad94 <HAL_RCCEx_GetD3PCLK1Freq>
 800c61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c61c:	e03c      	b.n	800c698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c61e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fbcc 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c62c:	e034      	b.n	800c698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c62e:	f107 0318 	add.w	r3, r7, #24
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fd18 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c63c:	e02c      	b.n	800c698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c63e:	4b09      	ldr	r3, [pc, #36]	@ (800c664 <UART_SetConfig+0x69c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 0320 	and.w	r3, r3, #32
 800c646:	2b00      	cmp	r3, #0
 800c648:	d016      	beq.n	800c678 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c64a:	4b06      	ldr	r3, [pc, #24]	@ (800c664 <UART_SetConfig+0x69c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	08db      	lsrs	r3, r3, #3
 800c650:	f003 0303 	and.w	r3, r3, #3
 800c654:	4a07      	ldr	r2, [pc, #28]	@ (800c674 <UART_SetConfig+0x6ac>)
 800c656:	fa22 f303 	lsr.w	r3, r2, r3
 800c65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c65c:	e01c      	b.n	800c698 <UART_SetConfig+0x6d0>
 800c65e:	bf00      	nop
 800c660:	40011400 	.word	0x40011400
 800c664:	58024400 	.word	0x58024400
 800c668:	40007800 	.word	0x40007800
 800c66c:	40007c00 	.word	0x40007c00
 800c670:	58000c00 	.word	0x58000c00
 800c674:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c678:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f0 <UART_SetConfig+0x928>)
 800c67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c67c:	e00c      	b.n	800c698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c67e:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f4 <UART_SetConfig+0x92c>)
 800c680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c682:	e009      	b.n	800c698 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68a:	e005      	b.n	800c698 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f000 81de 	beq.w	800ca5c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a4:	4a94      	ldr	r2, [pc, #592]	@ (800c8f8 <UART_SetConfig+0x930>)
 800c6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	4413      	add	r3, r2
 800c6be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d305      	bcc.n	800c6d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d903      	bls.n	800c6d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6d6:	e1c1      	b.n	800ca5c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6da:	2200      	movs	r2, #0
 800c6dc:	60bb      	str	r3, [r7, #8]
 800c6de:	60fa      	str	r2, [r7, #12]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e4:	4a84      	ldr	r2, [pc, #528]	@ (800c8f8 <UART_SetConfig+0x930>)
 800c6e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6fa:	f7f3 fe49 	bl	8000390 <__aeabi_uldivmod>
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4610      	mov	r0, r2
 800c704:	4619      	mov	r1, r3
 800c706:	f04f 0200 	mov.w	r2, #0
 800c70a:	f04f 0300 	mov.w	r3, #0
 800c70e:	020b      	lsls	r3, r1, #8
 800c710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c714:	0202      	lsls	r2, r0, #8
 800c716:	6979      	ldr	r1, [r7, #20]
 800c718:	6849      	ldr	r1, [r1, #4]
 800c71a:	0849      	lsrs	r1, r1, #1
 800c71c:	2000      	movs	r0, #0
 800c71e:	460c      	mov	r4, r1
 800c720:	4605      	mov	r5, r0
 800c722:	eb12 0804 	adds.w	r8, r2, r4
 800c726:	eb43 0905 	adc.w	r9, r3, r5
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	469a      	mov	sl, r3
 800c732:	4693      	mov	fp, r2
 800c734:	4652      	mov	r2, sl
 800c736:	465b      	mov	r3, fp
 800c738:	4640      	mov	r0, r8
 800c73a:	4649      	mov	r1, r9
 800c73c:	f7f3 fe28 	bl	8000390 <__aeabi_uldivmod>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4613      	mov	r3, r2
 800c746:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c74e:	d308      	bcc.n	800c762 <UART_SetConfig+0x79a>
 800c750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c756:	d204      	bcs.n	800c762 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c75e:	60da      	str	r2, [r3, #12]
 800c760:	e17c      	b.n	800ca5c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c768:	e178      	b.n	800ca5c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c772:	f040 80c5 	bne.w	800c900 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c776:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c77a:	2b20      	cmp	r3, #32
 800c77c:	dc48      	bgt.n	800c810 <UART_SetConfig+0x848>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	db7b      	blt.n	800c87a <UART_SetConfig+0x8b2>
 800c782:	2b20      	cmp	r3, #32
 800c784:	d879      	bhi.n	800c87a <UART_SetConfig+0x8b2>
 800c786:	a201      	add	r2, pc, #4	@ (adr r2, 800c78c <UART_SetConfig+0x7c4>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c817 	.word	0x0800c817
 800c790:	0800c81f 	.word	0x0800c81f
 800c794:	0800c87b 	.word	0x0800c87b
 800c798:	0800c87b 	.word	0x0800c87b
 800c79c:	0800c827 	.word	0x0800c827
 800c7a0:	0800c87b 	.word	0x0800c87b
 800c7a4:	0800c87b 	.word	0x0800c87b
 800c7a8:	0800c87b 	.word	0x0800c87b
 800c7ac:	0800c837 	.word	0x0800c837
 800c7b0:	0800c87b 	.word	0x0800c87b
 800c7b4:	0800c87b 	.word	0x0800c87b
 800c7b8:	0800c87b 	.word	0x0800c87b
 800c7bc:	0800c87b 	.word	0x0800c87b
 800c7c0:	0800c87b 	.word	0x0800c87b
 800c7c4:	0800c87b 	.word	0x0800c87b
 800c7c8:	0800c87b 	.word	0x0800c87b
 800c7cc:	0800c847 	.word	0x0800c847
 800c7d0:	0800c87b 	.word	0x0800c87b
 800c7d4:	0800c87b 	.word	0x0800c87b
 800c7d8:	0800c87b 	.word	0x0800c87b
 800c7dc:	0800c87b 	.word	0x0800c87b
 800c7e0:	0800c87b 	.word	0x0800c87b
 800c7e4:	0800c87b 	.word	0x0800c87b
 800c7e8:	0800c87b 	.word	0x0800c87b
 800c7ec:	0800c87b 	.word	0x0800c87b
 800c7f0:	0800c87b 	.word	0x0800c87b
 800c7f4:	0800c87b 	.word	0x0800c87b
 800c7f8:	0800c87b 	.word	0x0800c87b
 800c7fc:	0800c87b 	.word	0x0800c87b
 800c800:	0800c87b 	.word	0x0800c87b
 800c804:	0800c87b 	.word	0x0800c87b
 800c808:	0800c87b 	.word	0x0800c87b
 800c80c:	0800c86d 	.word	0x0800c86d
 800c810:	2b40      	cmp	r3, #64	@ 0x40
 800c812:	d02e      	beq.n	800c872 <UART_SetConfig+0x8aa>
 800c814:	e031      	b.n	800c87a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c816:	f7fc fac5 	bl	8008da4 <HAL_RCC_GetPCLK1Freq>
 800c81a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c81c:	e033      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c81e:	f7fc fad7 	bl	8008dd0 <HAL_RCC_GetPCLK2Freq>
 800c822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c824:	e02f      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe fac8 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c834:	e027      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c836:	f107 0318 	add.w	r3, r7, #24
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fc14 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c844:	e01f      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c846:	4b2d      	ldr	r3, [pc, #180]	@ (800c8fc <UART_SetConfig+0x934>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 0320 	and.w	r3, r3, #32
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d009      	beq.n	800c866 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c852:	4b2a      	ldr	r3, [pc, #168]	@ (800c8fc <UART_SetConfig+0x934>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	08db      	lsrs	r3, r3, #3
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	4a24      	ldr	r2, [pc, #144]	@ (800c8f0 <UART_SetConfig+0x928>)
 800c85e:	fa22 f303 	lsr.w	r3, r2, r3
 800c862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c864:	e00f      	b.n	800c886 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c866:	4b22      	ldr	r3, [pc, #136]	@ (800c8f0 <UART_SetConfig+0x928>)
 800c868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86a:	e00c      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c86c:	4b21      	ldr	r3, [pc, #132]	@ (800c8f4 <UART_SetConfig+0x92c>)
 800c86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c870:	e009      	b.n	800c886 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c878:	e005      	b.n	800c886 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 80e7 	beq.w	800ca5c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c892:	4a19      	ldr	r2, [pc, #100]	@ (800c8f8 <UART_SetConfig+0x930>)
 800c894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c898:	461a      	mov	r2, r3
 800c89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8a0:	005a      	lsls	r2, r3, #1
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	085b      	lsrs	r3, r3, #1
 800c8a8:	441a      	add	r2, r3
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b6:	2b0f      	cmp	r3, #15
 800c8b8:	d916      	bls.n	800c8e8 <UART_SetConfig+0x920>
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8c0:	d212      	bcs.n	800c8e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	f023 030f 	bic.w	r3, r3, #15
 800c8ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ce:	085b      	lsrs	r3, r3, #1
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c8e4:	60da      	str	r2, [r3, #12]
 800c8e6:	e0b9      	b.n	800ca5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8ee:	e0b5      	b.n	800ca5c <UART_SetConfig+0xa94>
 800c8f0:	03d09000 	.word	0x03d09000
 800c8f4:	003d0900 	.word	0x003d0900
 800c8f8:	08013384 	.word	0x08013384
 800c8fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c900:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c904:	2b20      	cmp	r3, #32
 800c906:	dc49      	bgt.n	800c99c <UART_SetConfig+0x9d4>
 800c908:	2b00      	cmp	r3, #0
 800c90a:	db7c      	blt.n	800ca06 <UART_SetConfig+0xa3e>
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	d87a      	bhi.n	800ca06 <UART_SetConfig+0xa3e>
 800c910:	a201      	add	r2, pc, #4	@ (adr r2, 800c918 <UART_SetConfig+0x950>)
 800c912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c916:	bf00      	nop
 800c918:	0800c9a3 	.word	0x0800c9a3
 800c91c:	0800c9ab 	.word	0x0800c9ab
 800c920:	0800ca07 	.word	0x0800ca07
 800c924:	0800ca07 	.word	0x0800ca07
 800c928:	0800c9b3 	.word	0x0800c9b3
 800c92c:	0800ca07 	.word	0x0800ca07
 800c930:	0800ca07 	.word	0x0800ca07
 800c934:	0800ca07 	.word	0x0800ca07
 800c938:	0800c9c3 	.word	0x0800c9c3
 800c93c:	0800ca07 	.word	0x0800ca07
 800c940:	0800ca07 	.word	0x0800ca07
 800c944:	0800ca07 	.word	0x0800ca07
 800c948:	0800ca07 	.word	0x0800ca07
 800c94c:	0800ca07 	.word	0x0800ca07
 800c950:	0800ca07 	.word	0x0800ca07
 800c954:	0800ca07 	.word	0x0800ca07
 800c958:	0800c9d3 	.word	0x0800c9d3
 800c95c:	0800ca07 	.word	0x0800ca07
 800c960:	0800ca07 	.word	0x0800ca07
 800c964:	0800ca07 	.word	0x0800ca07
 800c968:	0800ca07 	.word	0x0800ca07
 800c96c:	0800ca07 	.word	0x0800ca07
 800c970:	0800ca07 	.word	0x0800ca07
 800c974:	0800ca07 	.word	0x0800ca07
 800c978:	0800ca07 	.word	0x0800ca07
 800c97c:	0800ca07 	.word	0x0800ca07
 800c980:	0800ca07 	.word	0x0800ca07
 800c984:	0800ca07 	.word	0x0800ca07
 800c988:	0800ca07 	.word	0x0800ca07
 800c98c:	0800ca07 	.word	0x0800ca07
 800c990:	0800ca07 	.word	0x0800ca07
 800c994:	0800ca07 	.word	0x0800ca07
 800c998:	0800c9f9 	.word	0x0800c9f9
 800c99c:	2b40      	cmp	r3, #64	@ 0x40
 800c99e:	d02e      	beq.n	800c9fe <UART_SetConfig+0xa36>
 800c9a0:	e031      	b.n	800ca06 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9a2:	f7fc f9ff 	bl	8008da4 <HAL_RCC_GetPCLK1Freq>
 800c9a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9a8:	e033      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9aa:	f7fc fa11 	bl	8008dd0 <HAL_RCC_GetPCLK2Freq>
 800c9ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9b0:	e02f      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe fa02 	bl	800adc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c0:	e027      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9c2:	f107 0318 	add.w	r3, r7, #24
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fb4e 	bl	800b068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9d0:	e01f      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d2:	4b2d      	ldr	r3, [pc, #180]	@ (800ca88 <UART_SetConfig+0xac0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d009      	beq.n	800c9f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9de:	4b2a      	ldr	r3, [pc, #168]	@ (800ca88 <UART_SetConfig+0xac0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	08db      	lsrs	r3, r3, #3
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	4a28      	ldr	r2, [pc, #160]	@ (800ca8c <UART_SetConfig+0xac4>)
 800c9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9f0:	e00f      	b.n	800ca12 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9f2:	4b26      	ldr	r3, [pc, #152]	@ (800ca8c <UART_SetConfig+0xac4>)
 800c9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f6:	e00c      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9f8:	4b25      	ldr	r3, [pc, #148]	@ (800ca90 <UART_SetConfig+0xac8>)
 800c9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9fc:	e009      	b.n	800ca12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca04:	e005      	b.n	800ca12 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca10:	bf00      	nop
    }

    if (pclk != 0U)
 800ca12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d021      	beq.n	800ca5c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	4a1d      	ldr	r2, [pc, #116]	@ (800ca94 <UART_SetConfig+0xacc>)
 800ca1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca22:	461a      	mov	r2, r3
 800ca24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	085b      	lsrs	r3, r3, #1
 800ca30:	441a      	add	r2, r3
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3e:	2b0f      	cmp	r3, #15
 800ca40:	d909      	bls.n	800ca56 <UART_SetConfig+0xa8e>
 800ca42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca48:	d205      	bcs.n	800ca56 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	60da      	str	r2, [r3, #12]
 800ca54:	e002      	b.n	800ca5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2200      	movs	r2, #0
 800ca76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca78:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3748      	adds	r7, #72	@ 0x48
 800ca80:	46bd      	mov	sp, r7
 800ca82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca86:	bf00      	nop
 800ca88:	58024400 	.word	0x58024400
 800ca8c:	03d09000 	.word	0x03d09000
 800ca90:	003d0900 	.word	0x003d0900
 800ca94:	08013384 	.word	0x08013384

0800ca98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	430a      	orrs	r2, r1
 800cac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae8:	f003 0302 	and.w	r3, r3, #2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00a      	beq.n	800cb06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0a:	f003 0304 	and.w	r3, r3, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00a      	beq.n	800cb28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb2c:	f003 0310 	and.w	r3, r3, #16
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00a      	beq.n	800cb4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	430a      	orrs	r2, r1
 800cb48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb4e:	f003 0320 	and.w	r3, r3, #32
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00a      	beq.n	800cb6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01a      	beq.n	800cbae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb96:	d10a      	bne.n	800cbae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00a      	beq.n	800cbd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	430a      	orrs	r2, r1
 800cbce:	605a      	str	r2, [r3, #4]
  }
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b098      	sub	sp, #96	@ 0x60
 800cbe0:	af02      	add	r7, sp, #8
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbec:	f7f4 fe3a 	bl	8001864 <HAL_GetTick>
 800cbf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0308 	and.w	r3, r3, #8
 800cbfc:	2b08      	cmp	r3, #8
 800cbfe:	d12f      	bne.n	800cc60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f88e 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d022      	beq.n	800cc60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc22:	e853 3f00 	ldrex	r3, [r3]
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	461a      	mov	r2, r3
 800cc36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc38:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc40:	e841 2300 	strex	r3, r2, [r1]
 800cc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1e6      	bne.n	800cc1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2220      	movs	r2, #32
 800cc50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	e063      	b.n	800cd28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0304 	and.w	r3, r3, #4
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	d149      	bne.n	800cd02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc76:	2200      	movs	r2, #0
 800cc78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f857 	bl	800cd30 <UART_WaitOnFlagUntilTimeout>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d03c      	beq.n	800cd02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc90:	e853 3f00 	ldrex	r3, [r3]
 800cc94:	623b      	str	r3, [r7, #32]
   return(result);
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccae:	e841 2300 	strex	r3, r2, [r1]
 800ccb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1e6      	bne.n	800cc88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	e853 3f00 	ldrex	r3, [r3]
 800ccc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f023 0301 	bic.w	r3, r3, #1
 800ccd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccda:	61fa      	str	r2, [r7, #28]
 800ccdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccde:	69b9      	ldr	r1, [r7, #24]
 800cce0:	69fa      	ldr	r2, [r7, #28]
 800cce2:	e841 2300 	strex	r3, r2, [r1]
 800cce6:	617b      	str	r3, [r7, #20]
   return(result);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1e5      	bne.n	800ccba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2220      	movs	r2, #32
 800ccf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e012      	b.n	800cd28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2220      	movs	r2, #32
 800cd06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3758      	adds	r7, #88	@ 0x58
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	603b      	str	r3, [r7, #0]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd40:	e04f      	b.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd48:	d04b      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd4a:	f7f4 fd8b 	bl	8001864 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d302      	bcc.n	800cd60 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e04e      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0304 	and.w	r3, r3, #4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d037      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2b80      	cmp	r3, #128	@ 0x80
 800cd76:	d034      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b40      	cmp	r3, #64	@ 0x40
 800cd7c:	d031      	beq.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b08      	cmp	r3, #8
 800cd8a:	d110      	bne.n	800cdae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2208      	movs	r2, #8
 800cd92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 f839 	bl	800ce0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2208      	movs	r2, #8
 800cd9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e029      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdbc:	d111      	bne.n	800cde2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 f81f 	bl	800ce0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e00f      	b.n	800ce02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	69da      	ldr	r2, [r3, #28]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	4013      	ands	r3, r2
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	bf0c      	ite	eq
 800cdf2:	2301      	moveq	r3, #1
 800cdf4:	2300      	movne	r3, #0
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d0a0      	beq.n	800cd42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b095      	sub	sp, #84	@ 0x54
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1c:	e853 3f00 	ldrex	r3, [r3]
 800ce20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce32:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce3a:	e841 2300 	strex	r3, r2, [r1]
 800ce3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e6      	bne.n	800ce14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce56:	69fa      	ldr	r2, [r7, #28]
 800ce58:	4b1e      	ldr	r3, [pc, #120]	@ (800ced4 <UART_EndRxTransfer+0xc8>)
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3308      	adds	r3, #8
 800ce64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e5      	bne.n	800ce46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d118      	bne.n	800ceb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	e853 3f00 	ldrex	r3, [r3]
 800ce8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	f023 0310 	bic.w	r3, r3, #16
 800ce96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea4:	6979      	ldr	r1, [r7, #20]
 800cea6:	69ba      	ldr	r2, [r7, #24]
 800cea8:	e841 2300 	strex	r3, r2, [r1]
 800ceac:	613b      	str	r3, [r7, #16]
   return(result);
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1e6      	bne.n	800ce82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cec8:	bf00      	nop
 800ceca:	3754      	adds	r7, #84	@ 0x54
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	effffffe 	.word	0xeffffffe

0800ced8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d101      	bne.n	800ceee <HAL_UARTEx_DisableFifoMode+0x16>
 800ceea:	2302      	movs	r3, #2
 800ceec:	e027      	b.n	800cf3e <HAL_UARTEx_DisableFifoMode+0x66>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2224      	movs	r2, #36	@ 0x24
 800cefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0201 	bic.w	r2, r2, #1
 800cf14:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2220      	movs	r2, #32
 800cf30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d101      	bne.n	800cf62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e02d      	b.n	800cfbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2224      	movs	r2, #36	@ 0x24
 800cf6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0201 	bic.w	r2, r2, #1
 800cf88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f850 	bl	800d044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d101      	bne.n	800cfde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfda:	2302      	movs	r3, #2
 800cfdc:	e02d      	b.n	800d03a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2224      	movs	r2, #36	@ 0x24
 800cfea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f022 0201 	bic.w	r2, r2, #1
 800d004:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f812 	bl	800d044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2220      	movs	r2, #32
 800d02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d050:	2b00      	cmp	r3, #0
 800d052:	d108      	bne.n	800d066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d064:	e031      	b.n	800d0ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d066:	2310      	movs	r3, #16
 800d068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d06a:	2310      	movs	r3, #16
 800d06c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	0e5b      	lsrs	r3, r3, #25
 800d076:	b2db      	uxtb	r3, r3
 800d078:	f003 0307 	and.w	r3, r3, #7
 800d07c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	0f5b      	lsrs	r3, r3, #29
 800d086:	b2db      	uxtb	r3, r3
 800d088:	f003 0307 	and.w	r3, r3, #7
 800d08c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	7b3a      	ldrb	r2, [r7, #12]
 800d092:	4911      	ldr	r1, [pc, #68]	@ (800d0d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d094:	5c8a      	ldrb	r2, [r1, r2]
 800d096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d09a:	7b3a      	ldrb	r2, [r7, #12]
 800d09c:	490f      	ldr	r1, [pc, #60]	@ (800d0dc <UARTEx_SetNbDataToProcess+0x98>)
 800d09e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0ac:	7bfb      	ldrb	r3, [r7, #15]
 800d0ae:	7b7a      	ldrb	r2, [r7, #13]
 800d0b0:	4909      	ldr	r1, [pc, #36]	@ (800d0d8 <UARTEx_SetNbDataToProcess+0x94>)
 800d0b2:	5c8a      	ldrb	r2, [r1, r2]
 800d0b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d0b8:	7b7a      	ldrb	r2, [r7, #13]
 800d0ba:	4908      	ldr	r1, [pc, #32]	@ (800d0dc <UARTEx_SetNbDataToProcess+0x98>)
 800d0bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0be:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	0801339c 	.word	0x0801339c
 800d0dc:	080133a4 	.word	0x080133a4

0800d0e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b084      	sub	sp, #16
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	f107 001c 	add.w	r0, r7, #28
 800d0ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d121      	bne.n	800d13e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68da      	ldr	r2, [r3, #12]
 800d10a:	4b2c      	ldr	r3, [pc, #176]	@ (800d1bc <USB_CoreInit+0xdc>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d11e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d122:	2b01      	cmp	r3, #1
 800d124:	d105      	bne.n	800d132 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f001 fafa 	bl	800e72c <USB_CoreReset>
 800d138:	4603      	mov	r3, r0
 800d13a:	73fb      	strb	r3, [r7, #15]
 800d13c:	e01b      	b.n	800d176 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 faee 	bl	800e72c <USB_CoreReset>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d154:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d160:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	639a      	str	r2, [r3, #56]	@ 0x38
 800d168:	e005      	b.n	800d176 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d176:	7fbb      	ldrb	r3, [r7, #30]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d116      	bne.n	800d1aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d180:	b29a      	uxth	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d18a:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c0 <USB_CoreInit+0xe0>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f043 0206 	orr.w	r2, r3, #6
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f043 0220 	orr.w	r2, r3, #32
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1b6:	b004      	add	sp, #16
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	ffbdffbf 	.word	0xffbdffbf
 800d1c0:	03ee0000 	.word	0x03ee0000

0800d1c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d165      	bne.n	800d2a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	4a41      	ldr	r2, [pc, #260]	@ (800d2e0 <USB_SetTurnaroundTime+0x11c>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d906      	bls.n	800d1ee <USB_SetTurnaroundTime+0x2a>
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	4a40      	ldr	r2, [pc, #256]	@ (800d2e4 <USB_SetTurnaroundTime+0x120>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d202      	bcs.n	800d1ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d1e8:	230f      	movs	r3, #15
 800d1ea:	617b      	str	r3, [r7, #20]
 800d1ec:	e062      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	4a3c      	ldr	r2, [pc, #240]	@ (800d2e4 <USB_SetTurnaroundTime+0x120>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d306      	bcc.n	800d204 <USB_SetTurnaroundTime+0x40>
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	4a3b      	ldr	r2, [pc, #236]	@ (800d2e8 <USB_SetTurnaroundTime+0x124>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d202      	bcs.n	800d204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d1fe:	230e      	movs	r3, #14
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	e057      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4a38      	ldr	r2, [pc, #224]	@ (800d2e8 <USB_SetTurnaroundTime+0x124>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d306      	bcc.n	800d21a <USB_SetTurnaroundTime+0x56>
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	4a37      	ldr	r2, [pc, #220]	@ (800d2ec <USB_SetTurnaroundTime+0x128>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d202      	bcs.n	800d21a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d214:	230d      	movs	r3, #13
 800d216:	617b      	str	r3, [r7, #20]
 800d218:	e04c      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	4a33      	ldr	r2, [pc, #204]	@ (800d2ec <USB_SetTurnaroundTime+0x128>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d306      	bcc.n	800d230 <USB_SetTurnaroundTime+0x6c>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	4a32      	ldr	r2, [pc, #200]	@ (800d2f0 <USB_SetTurnaroundTime+0x12c>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d802      	bhi.n	800d230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d22a:	230c      	movs	r3, #12
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	e041      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	4a2f      	ldr	r2, [pc, #188]	@ (800d2f0 <USB_SetTurnaroundTime+0x12c>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d906      	bls.n	800d246 <USB_SetTurnaroundTime+0x82>
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	4a2e      	ldr	r2, [pc, #184]	@ (800d2f4 <USB_SetTurnaroundTime+0x130>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d802      	bhi.n	800d246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d240:	230b      	movs	r3, #11
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	e036      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	4a2a      	ldr	r2, [pc, #168]	@ (800d2f4 <USB_SetTurnaroundTime+0x130>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d906      	bls.n	800d25c <USB_SetTurnaroundTime+0x98>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	4a29      	ldr	r2, [pc, #164]	@ (800d2f8 <USB_SetTurnaroundTime+0x134>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d802      	bhi.n	800d25c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d256:	230a      	movs	r3, #10
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	e02b      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	4a26      	ldr	r2, [pc, #152]	@ (800d2f8 <USB_SetTurnaroundTime+0x134>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d906      	bls.n	800d272 <USB_SetTurnaroundTime+0xae>
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	4a25      	ldr	r2, [pc, #148]	@ (800d2fc <USB_SetTurnaroundTime+0x138>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d202      	bcs.n	800d272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d26c:	2309      	movs	r3, #9
 800d26e:	617b      	str	r3, [r7, #20]
 800d270:	e020      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	4a21      	ldr	r2, [pc, #132]	@ (800d2fc <USB_SetTurnaroundTime+0x138>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d306      	bcc.n	800d288 <USB_SetTurnaroundTime+0xc4>
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	4a20      	ldr	r2, [pc, #128]	@ (800d300 <USB_SetTurnaroundTime+0x13c>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d802      	bhi.n	800d288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d282:	2308      	movs	r3, #8
 800d284:	617b      	str	r3, [r7, #20]
 800d286:	e015      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	4a1d      	ldr	r2, [pc, #116]	@ (800d300 <USB_SetTurnaroundTime+0x13c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d906      	bls.n	800d29e <USB_SetTurnaroundTime+0xda>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	4a1c      	ldr	r2, [pc, #112]	@ (800d304 <USB_SetTurnaroundTime+0x140>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d202      	bcs.n	800d29e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d298:	2307      	movs	r3, #7
 800d29a:	617b      	str	r3, [r7, #20]
 800d29c:	e00a      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d29e:	2306      	movs	r3, #6
 800d2a0:	617b      	str	r3, [r7, #20]
 800d2a2:	e007      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d2aa:	2309      	movs	r3, #9
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e001      	b.n	800d2b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d2b0:	2309      	movs	r3, #9
 800d2b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68da      	ldr	r2, [r3, #12]
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	029b      	lsls	r3, r3, #10
 800d2c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d2cc:	431a      	orrs	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	371c      	adds	r7, #28
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	00d8acbf 	.word	0x00d8acbf
 800d2e4:	00e4e1c0 	.word	0x00e4e1c0
 800d2e8:	00f42400 	.word	0x00f42400
 800d2ec:	01067380 	.word	0x01067380
 800d2f0:	011a499f 	.word	0x011a499f
 800d2f4:	01312cff 	.word	0x01312cff
 800d2f8:	014ca43f 	.word	0x014ca43f
 800d2fc:	016e3600 	.word	0x016e3600
 800d300:	01a6ab1f 	.word	0x01a6ab1f
 800d304:	01e84800 	.word	0x01e84800

0800d308 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	f043 0201 	orr.w	r2, r3, #1
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d32a:	b480      	push	{r7}
 800d32c:	b083      	sub	sp, #12
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	f023 0201 	bic.w	r2, r3, #1
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d115      	bne.n	800d39a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d37a:	200a      	movs	r0, #10
 800d37c:	f7f4 fa7e 	bl	800187c <HAL_Delay>
      ms += 10U;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	330a      	adds	r3, #10
 800d384:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f001 f93f 	bl	800e60a <USB_GetMode>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d01e      	beq.n	800d3d0 <USB_SetCurrentMode+0x84>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2bc7      	cmp	r3, #199	@ 0xc7
 800d396:	d9f0      	bls.n	800d37a <USB_SetCurrentMode+0x2e>
 800d398:	e01a      	b.n	800d3d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d39a:	78fb      	ldrb	r3, [r7, #3]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d115      	bne.n	800d3cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d3ac:	200a      	movs	r0, #10
 800d3ae:	f7f4 fa65 	bl	800187c <HAL_Delay>
      ms += 10U;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	330a      	adds	r3, #10
 800d3b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f001 f926 	bl	800e60a <USB_GetMode>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d005      	beq.n	800d3d0 <USB_SetCurrentMode+0x84>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2bc7      	cmp	r3, #199	@ 0xc7
 800d3c8:	d9f0      	bls.n	800d3ac <USB_SetCurrentMode+0x60>
 800d3ca:	e001      	b.n	800d3d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e005      	b.n	800d3dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2bc8      	cmp	r3, #200	@ 0xc8
 800d3d4:	d101      	bne.n	800d3da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e000      	b.n	800d3dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b086      	sub	sp, #24
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d3fe:	2300      	movs	r3, #0
 800d400:	613b      	str	r3, [r7, #16]
 800d402:	e009      	b.n	800d418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	3340      	adds	r3, #64	@ 0x40
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	2200      	movs	r2, #0
 800d410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	3301      	adds	r3, #1
 800d416:	613b      	str	r3, [r7, #16]
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2b0e      	cmp	r3, #14
 800d41c:	d9f2      	bls.n	800d404 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d41e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d422:	2b00      	cmp	r3, #0
 800d424:	d11c      	bne.n	800d460 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d434:	f043 0302 	orr.w	r3, r3, #2
 800d438:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d43e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	e005      	b.n	800d46c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d464:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d472:	461a      	mov	r2, r3
 800d474:	2300      	movs	r3, #0
 800d476:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d478:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d10d      	bne.n	800d49c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d484:	2b00      	cmp	r3, #0
 800d486:	d104      	bne.n	800d492 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d488:	2100      	movs	r1, #0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f968 	bl	800d760 <USB_SetDevSpeed>
 800d490:	e008      	b.n	800d4a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d492:	2101      	movs	r1, #1
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f963 	bl	800d760 <USB_SetDevSpeed>
 800d49a:	e003      	b.n	800d4a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d49c:	2103      	movs	r1, #3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f95e 	bl	800d760 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d4a4:	2110      	movs	r1, #16
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f8fa 	bl	800d6a0 <USB_FlushTxFifo>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f924 	bl	800d704 <USB_FlushRxFifo>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4d8:	461a      	mov	r2, r3
 800d4da:	2300      	movs	r3, #0
 800d4dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	613b      	str	r3, [r7, #16]
 800d4ee:	e043      	b.n	800d578 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d506:	d118      	bne.n	800d53a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10a      	bne.n	800d524 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	015a      	lsls	r2, r3, #5
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	4413      	add	r3, r2
 800d516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d51a:	461a      	mov	r2, r3
 800d51c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d520:	6013      	str	r3, [r2, #0]
 800d522:	e013      	b.n	800d54c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d530:	461a      	mov	r2, r3
 800d532:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	e008      	b.n	800d54c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d546:	461a      	mov	r2, r3
 800d548:	2300      	movs	r3, #0
 800d54a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d558:	461a      	mov	r2, r3
 800d55a:	2300      	movs	r3, #0
 800d55c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	015a      	lsls	r2, r3, #5
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	4413      	add	r3, r2
 800d566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d56a:	461a      	mov	r2, r3
 800d56c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	3301      	adds	r3, #1
 800d576:	613b      	str	r3, [r7, #16]
 800d578:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d57c:	461a      	mov	r2, r3
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	4293      	cmp	r3, r2
 800d582:	d3b5      	bcc.n	800d4f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d584:	2300      	movs	r3, #0
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	e043      	b.n	800d612 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	015a      	lsls	r2, r3, #5
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	4413      	add	r3, r2
 800d592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d59c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5a0:	d118      	bne.n	800d5d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d5ba:	6013      	str	r3, [r2, #0]
 800d5bc:	e013      	b.n	800d5e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	e008      	b.n	800d5e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	015a      	lsls	r2, r3, #5
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4413      	add	r3, r2
 800d5dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	015a      	lsls	r2, r3, #5
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d604:	461a      	mov	r2, r3
 800d606:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d60a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	3301      	adds	r3, #1
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d616:	461a      	mov	r2, r3
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d3b5      	bcc.n	800d58a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d62c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d630:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d63e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d644:	2b00      	cmp	r3, #0
 800d646:	d105      	bne.n	800d654 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	f043 0210 	orr.w	r2, r3, #16
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	699a      	ldr	r2, [r3, #24]
 800d658:	4b0f      	ldr	r3, [pc, #60]	@ (800d698 <USB_DevInit+0x2b4>)
 800d65a:	4313      	orrs	r3, r2
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	f043 0208 	orr.w	r2, r3, #8
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d674:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d105      	bne.n	800d688 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	4b06      	ldr	r3, [pc, #24]	@ (800d69c <USB_DevInit+0x2b8>)
 800d682:	4313      	orrs	r3, r2
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d688:	7dfb      	ldrb	r3, [r7, #23]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d694:	b004      	add	sp, #16
 800d696:	4770      	bx	lr
 800d698:	803c3800 	.word	0x803c3800
 800d69c:	40000004 	.word	0x40000004

0800d6a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6ba:	d901      	bls.n	800d6c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d6bc:	2303      	movs	r3, #3
 800d6be:	e01b      	b.n	800d6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	daf2      	bge.n	800d6ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	019b      	lsls	r3, r3, #6
 800d6d0:	f043 0220 	orr.w	r2, r3, #32
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6e4:	d901      	bls.n	800d6ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	e006      	b.n	800d6f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b20      	cmp	r3, #32
 800d6f4:	d0f0      	beq.n	800d6d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	3301      	adds	r3, #1
 800d714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d71c:	d901      	bls.n	800d722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d71e:	2303      	movs	r3, #3
 800d720:	e018      	b.n	800d754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	2b00      	cmp	r3, #0
 800d728:	daf2      	bge.n	800d710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2210      	movs	r2, #16
 800d732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3301      	adds	r3, #1
 800d738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d740:	d901      	bls.n	800d746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	e006      	b.n	800d754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	f003 0310 	and.w	r3, r3, #16
 800d74e:	2b10      	cmp	r3, #16
 800d750:	d0f0      	beq.n	800d734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	78fb      	ldrb	r3, [r7, #3]
 800d77a:	68f9      	ldr	r1, [r7, #12]
 800d77c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d780:	4313      	orrs	r3, r2
 800d782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d792:	b480      	push	{r7}
 800d794:	b087      	sub	sp, #28
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f003 0306 	and.w	r3, r3, #6
 800d7aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d102      	bne.n	800d7b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75fb      	strb	r3, [r7, #23]
 800d7b6:	e00a      	b.n	800d7ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d002      	beq.n	800d7c4 <USB_GetDevSpeed+0x32>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b06      	cmp	r3, #6
 800d7c2:	d102      	bne.n	800d7ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	75fb      	strb	r3, [r7, #23]
 800d7c8:	e001      	b.n	800d7ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d7ca:	230f      	movs	r3, #15
 800d7cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	371c      	adds	r7, #28
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	785b      	ldrb	r3, [r3, #1]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d139      	bne.n	800d86c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7fe:	69da      	ldr	r2, [r3, #28]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	2101      	movs	r1, #1
 800d80a:	fa01 f303 	lsl.w	r3, r1, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	68f9      	ldr	r1, [r7, #12]
 800d812:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d816:	4313      	orrs	r3, r2
 800d818:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d153      	bne.n	800d8d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	015a      	lsls	r2, r3, #5
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4413      	add	r3, r2
 800d838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	791b      	ldrb	r3, [r3, #4]
 800d84a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d84c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	059b      	lsls	r3, r3, #22
 800d852:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d854:	431a      	orrs	r2, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	0159      	lsls	r1, r3, #5
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	440b      	add	r3, r1
 800d85e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d862:	4619      	mov	r1, r3
 800d864:	4b20      	ldr	r3, [pc, #128]	@ (800d8e8 <USB_ActivateEndpoint+0x10c>)
 800d866:	4313      	orrs	r3, r2
 800d868:	600b      	str	r3, [r1, #0]
 800d86a:	e035      	b.n	800d8d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d872:	69da      	ldr	r2, [r3, #28]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	2101      	movs	r1, #1
 800d87e:	fa01 f303 	lsl.w	r3, r1, r3
 800d882:	041b      	lsls	r3, r3, #16
 800d884:	68f9      	ldr	r1, [r7, #12]
 800d886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d88a:	4313      	orrs	r3, r2
 800d88c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d119      	bne.n	800d8d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	015a      	lsls	r2, r3, #5
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	791b      	ldrb	r3, [r3, #4]
 800d8be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d8c0:	430b      	orrs	r3, r1
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	0159      	lsls	r1, r3, #5
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	440b      	add	r3, r1
 800d8cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	4b05      	ldr	r3, [pc, #20]	@ (800d8e8 <USB_ActivateEndpoint+0x10c>)
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	10008000 	.word	0x10008000

0800d8ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	785b      	ldrb	r3, [r3, #1]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d161      	bne.n	800d9cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	015a      	lsls	r2, r3, #5
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	4413      	add	r3, r2
 800d910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d91a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d91e:	d11f      	bne.n	800d960 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	015a      	lsls	r2, r3, #5
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	4413      	add	r3, r2
 800d928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68ba      	ldr	r2, [r7, #8]
 800d930:	0151      	lsls	r1, r2, #5
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	440a      	add	r2, r1
 800d936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d93a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d93e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	440a      	add	r2, r1
 800d956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d95a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d95e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	f003 030f 	and.w	r3, r3, #15
 800d970:	2101      	movs	r1, #1
 800d972:	fa01 f303 	lsl.w	r3, r1, r3
 800d976:	b29b      	uxth	r3, r3
 800d978:	43db      	mvns	r3, r3
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d980:	4013      	ands	r3, r2
 800d982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d98a:	69da      	ldr	r2, [r3, #28]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	f003 030f 	and.w	r3, r3, #15
 800d994:	2101      	movs	r1, #1
 800d996:	fa01 f303 	lsl.w	r3, r1, r3
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	43db      	mvns	r3, r3
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	015a      	lsls	r2, r3, #5
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	0159      	lsls	r1, r3, #5
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	440b      	add	r3, r1
 800d9be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4b35      	ldr	r3, [pc, #212]	@ (800da9c <USB_DeactivateEndpoint+0x1b0>)
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	600b      	str	r3, [r1, #0]
 800d9ca:	e060      	b.n	800da8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	015a      	lsls	r2, r3, #5
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d9de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d9e2:	d11f      	bne.n	800da24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	015a      	lsls	r2, r3, #5
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	0151      	lsls	r1, r2, #5
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	440a      	add	r2, r1
 800d9fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800da02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	0151      	lsls	r1, r2, #5
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	440a      	add	r2, r1
 800da1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 030f 	and.w	r3, r3, #15
 800da34:	2101      	movs	r1, #1
 800da36:	fa01 f303 	lsl.w	r3, r1, r3
 800da3a:	041b      	lsls	r3, r3, #16
 800da3c:	43db      	mvns	r3, r3
 800da3e:	68f9      	ldr	r1, [r7, #12]
 800da40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da44:	4013      	ands	r3, r2
 800da46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da4e:	69da      	ldr	r2, [r3, #28]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	2101      	movs	r1, #1
 800da5a:	fa01 f303 	lsl.w	r3, r1, r3
 800da5e:	041b      	lsls	r3, r3, #16
 800da60:	43db      	mvns	r3, r3
 800da62:	68f9      	ldr	r1, [r7, #12]
 800da64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da68:	4013      	ands	r3, r2
 800da6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	015a      	lsls	r2, r3, #5
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4413      	add	r3, r2
 800da74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	0159      	lsls	r1, r3, #5
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	440b      	add	r3, r1
 800da82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da86:	4619      	mov	r1, r3
 800da88:	4b05      	ldr	r3, [pc, #20]	@ (800daa0 <USB_DeactivateEndpoint+0x1b4>)
 800da8a:	4013      	ands	r3, r2
 800da8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	ec337800 	.word	0xec337800
 800daa0:	eff37800 	.word	0xeff37800

0800daa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08a      	sub	sp, #40	@ 0x28
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	f040 8185 	bne.w	800ddd0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d132      	bne.n	800db34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	015a      	lsls	r2, r3, #5
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	4413      	add	r3, r2
 800dad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dada:	691a      	ldr	r2, [r3, #16]
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	0159      	lsls	r1, r3, #5
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	440b      	add	r3, r1
 800dae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae8:	4619      	mov	r1, r3
 800daea:	4ba7      	ldr	r3, [pc, #668]	@ (800dd88 <USB_EPStartXfer+0x2e4>)
 800daec:	4013      	ands	r3, r2
 800daee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	69ba      	ldr	r2, [r7, #24]
 800db00:	0151      	lsls	r1, r2, #5
 800db02:	69fa      	ldr	r2, [r7, #28]
 800db04:	440a      	add	r2, r1
 800db06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800db0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	4413      	add	r3, r2
 800db18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db1c:	691a      	ldr	r2, [r3, #16]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	0159      	lsls	r1, r3, #5
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	440b      	add	r3, r1
 800db26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db2a:	4619      	mov	r1, r3
 800db2c:	4b97      	ldr	r3, [pc, #604]	@ (800dd8c <USB_EPStartXfer+0x2e8>)
 800db2e:	4013      	ands	r3, r2
 800db30:	610b      	str	r3, [r1, #16]
 800db32:	e097      	b.n	800dc64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db40:	691a      	ldr	r2, [r3, #16]
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	0159      	lsls	r1, r3, #5
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	440b      	add	r3, r1
 800db4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db4e:	4619      	mov	r1, r3
 800db50:	4b8e      	ldr	r3, [pc, #568]	@ (800dd8c <USB_EPStartXfer+0x2e8>)
 800db52:	4013      	ands	r3, r2
 800db54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	4413      	add	r3, r2
 800db5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db62:	691a      	ldr	r2, [r3, #16]
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	0159      	lsls	r1, r3, #5
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	440b      	add	r3, r1
 800db6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db70:	4619      	mov	r1, r3
 800db72:	4b85      	ldr	r3, [pc, #532]	@ (800dd88 <USB_EPStartXfer+0x2e4>)
 800db74:	4013      	ands	r3, r2
 800db76:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d11a      	bne.n	800dbb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	691a      	ldr	r2, [r3, #16]
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	d903      	bls.n	800db92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	689a      	ldr	r2, [r3, #8]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	015a      	lsls	r2, r3, #5
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	4413      	add	r3, r2
 800db9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	69ba      	ldr	r2, [r7, #24]
 800dba2:	0151      	lsls	r1, r2, #5
 800dba4:	69fa      	ldr	r2, [r7, #28]
 800dba6:	440a      	add	r2, r1
 800dba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dbac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbb0:	6113      	str	r3, [r2, #16]
 800dbb2:	e044      	b.n	800dc3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	691a      	ldr	r2, [r3, #16]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	1e5a      	subs	r2, r3, #1
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	015a      	lsls	r2, r3, #5
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbd6:	691a      	ldr	r2, [r3, #16]
 800dbd8:	8afb      	ldrh	r3, [r7, #22]
 800dbda:	04d9      	lsls	r1, r3, #19
 800dbdc:	4b6c      	ldr	r3, [pc, #432]	@ (800dd90 <USB_EPStartXfer+0x2ec>)
 800dbde:	400b      	ands	r3, r1
 800dbe0:	69b9      	ldr	r1, [r7, #24]
 800dbe2:	0148      	lsls	r0, r1, #5
 800dbe4:	69f9      	ldr	r1, [r7, #28]
 800dbe6:	4401      	add	r1, r0
 800dbe8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dbec:	4313      	orrs	r3, r2
 800dbee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	791b      	ldrb	r3, [r3, #4]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d122      	bne.n	800dc3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc04:	691b      	ldr	r3, [r3, #16]
 800dc06:	69ba      	ldr	r2, [r7, #24]
 800dc08:	0151      	lsls	r1, r2, #5
 800dc0a:	69fa      	ldr	r2, [r7, #28]
 800dc0c:	440a      	add	r2, r1
 800dc0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800dc16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	015a      	lsls	r2, r3, #5
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	4413      	add	r3, r2
 800dc20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc24:	691a      	ldr	r2, [r3, #16]
 800dc26:	8afb      	ldrh	r3, [r7, #22]
 800dc28:	075b      	lsls	r3, r3, #29
 800dc2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800dc2e:	69b9      	ldr	r1, [r7, #24]
 800dc30:	0148      	lsls	r0, r1, #5
 800dc32:	69f9      	ldr	r1, [r7, #28]
 800dc34:	4401      	add	r1, r0
 800dc36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	015a      	lsls	r2, r3, #5
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	4413      	add	r3, r2
 800dc46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc4a:	691a      	ldr	r2, [r3, #16]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc54:	69b9      	ldr	r1, [r7, #24]
 800dc56:	0148      	lsls	r0, r1, #5
 800dc58:	69f9      	ldr	r1, [r7, #28]
 800dc5a:	4401      	add	r1, r0
 800dc5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dc60:	4313      	orrs	r3, r2
 800dc62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc64:	79fb      	ldrb	r3, [r7, #7]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d14b      	bne.n	800dd02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d009      	beq.n	800dc86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	015a      	lsls	r2, r3, #5
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	4413      	add	r3, r2
 800dc7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc7e:	461a      	mov	r2, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	69db      	ldr	r3, [r3, #28]
 800dc84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	791b      	ldrb	r3, [r3, #4]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d128      	bne.n	800dce0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d110      	bne.n	800dcc0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	015a      	lsls	r2, r3, #5
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	4413      	add	r3, r2
 800dca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	0151      	lsls	r1, r2, #5
 800dcb0:	69fa      	ldr	r2, [r7, #28]
 800dcb2:	440a      	add	r2, r1
 800dcb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	e00f      	b.n	800dce0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	015a      	lsls	r2, r3, #5
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	0151      	lsls	r1, r2, #5
 800dcd2:	69fa      	ldr	r2, [r7, #28]
 800dcd4:	440a      	add	r2, r1
 800dcd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dcde:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	0151      	lsls	r1, r2, #5
 800dcf2:	69fa      	ldr	r2, [r7, #28]
 800dcf4:	440a      	add	r2, r1
 800dcf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dcfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	e169      	b.n	800dfd6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	015a      	lsls	r2, r3, #5
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	4413      	add	r3, r2
 800dd0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	69ba      	ldr	r2, [r7, #24]
 800dd12:	0151      	lsls	r1, r2, #5
 800dd14:	69fa      	ldr	r2, [r7, #28]
 800dd16:	440a      	add	r2, r1
 800dd18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dd20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	791b      	ldrb	r3, [r3, #4]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d015      	beq.n	800dd56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8151 	beq.w	800dfd6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	2101      	movs	r1, #1
 800dd46:	fa01 f303 	lsl.w	r3, r1, r3
 800dd4a:	69f9      	ldr	r1, [r7, #28]
 800dd4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd50:	4313      	orrs	r3, r2
 800dd52:	634b      	str	r3, [r1, #52]	@ 0x34
 800dd54:	e13f      	b.n	800dfd6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d116      	bne.n	800dd94 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	69ba      	ldr	r2, [r7, #24]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dd84:	6013      	str	r3, [r2, #0]
 800dd86:	e015      	b.n	800ddb4 <USB_EPStartXfer+0x310>
 800dd88:	e007ffff 	.word	0xe007ffff
 800dd8c:	fff80000 	.word	0xfff80000
 800dd90:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	69ba      	ldr	r2, [r7, #24]
 800dda4:	0151      	lsls	r1, r2, #5
 800dda6:	69fa      	ldr	r2, [r7, #28]
 800dda8:	440a      	add	r2, r1
 800ddaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddb2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	68d9      	ldr	r1, [r3, #12]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	781a      	ldrb	r2, [r3, #0]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	b298      	uxth	r0, r3
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f000 f9b9 	bl	800e140 <USB_WritePacket>
 800ddce:	e102      	b.n	800dfd6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dddc:	691a      	ldr	r2, [r3, #16]
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	0159      	lsls	r1, r3, #5
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	440b      	add	r3, r1
 800dde6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddea:	4619      	mov	r1, r3
 800ddec:	4b7c      	ldr	r3, [pc, #496]	@ (800dfe0 <USB_EPStartXfer+0x53c>)
 800ddee:	4013      	ands	r3, r2
 800ddf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	015a      	lsls	r2, r3, #5
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	4413      	add	r3, r2
 800ddfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddfe:	691a      	ldr	r2, [r3, #16]
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	0159      	lsls	r1, r3, #5
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	440b      	add	r3, r1
 800de08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de0c:	4619      	mov	r1, r3
 800de0e:	4b75      	ldr	r3, [pc, #468]	@ (800dfe4 <USB_EPStartXfer+0x540>)
 800de10:	4013      	ands	r3, r2
 800de12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d12f      	bne.n	800de7a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	689a      	ldr	r2, [r3, #8]
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	689a      	ldr	r2, [r3, #8]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	015a      	lsls	r2, r3, #5
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	4413      	add	r3, r2
 800de3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de3e:	691a      	ldr	r2, [r3, #16]
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	6a1b      	ldr	r3, [r3, #32]
 800de44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	0148      	lsls	r0, r1, #5
 800de4c:	69f9      	ldr	r1, [r7, #28]
 800de4e:	4401      	add	r1, r0
 800de50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800de54:	4313      	orrs	r3, r2
 800de56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	015a      	lsls	r2, r3, #5
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	4413      	add	r3, r2
 800de60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	69ba      	ldr	r2, [r7, #24]
 800de68:	0151      	lsls	r1, r2, #5
 800de6a:	69fa      	ldr	r2, [r7, #28]
 800de6c:	440a      	add	r2, r1
 800de6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de76:	6113      	str	r3, [r2, #16]
 800de78:	e05f      	b.n	800df3a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d123      	bne.n	800deca <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de8e:	691a      	ldr	r2, [r3, #16]
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de98:	69b9      	ldr	r1, [r7, #24]
 800de9a:	0148      	lsls	r0, r1, #5
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	4401      	add	r1, r0
 800dea0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800dea4:	4313      	orrs	r3, r2
 800dea6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	015a      	lsls	r2, r3, #5
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	4413      	add	r3, r2
 800deb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	0151      	lsls	r1, r2, #5
 800deba:	69fa      	ldr	r2, [r7, #28]
 800debc:	440a      	add	r2, r1
 800debe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dec6:	6113      	str	r3, [r2, #16]
 800dec8:	e037      	b.n	800df3a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	691a      	ldr	r2, [r3, #16]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	4413      	add	r3, r2
 800ded4:	1e5a      	subs	r2, r3, #1
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	fbb2 f3f3 	udiv	r3, r2, r3
 800dede:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	8afa      	ldrh	r2, [r7, #22]
 800dee6:	fb03 f202 	mul.w	r2, r3, r2
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	015a      	lsls	r2, r3, #5
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	4413      	add	r3, r2
 800def6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800defa:	691a      	ldr	r2, [r3, #16]
 800defc:	8afb      	ldrh	r3, [r7, #22]
 800defe:	04d9      	lsls	r1, r3, #19
 800df00:	4b39      	ldr	r3, [pc, #228]	@ (800dfe8 <USB_EPStartXfer+0x544>)
 800df02:	400b      	ands	r3, r1
 800df04:	69b9      	ldr	r1, [r7, #24]
 800df06:	0148      	lsls	r0, r1, #5
 800df08:	69f9      	ldr	r1, [r7, #28]
 800df0a:	4401      	add	r1, r0
 800df0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800df10:	4313      	orrs	r3, r2
 800df12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	015a      	lsls	r2, r3, #5
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df20:	691a      	ldr	r2, [r3, #16]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df2a:	69b9      	ldr	r1, [r7, #24]
 800df2c:	0148      	lsls	r0, r1, #5
 800df2e:	69f9      	ldr	r1, [r7, #28]
 800df30:	4401      	add	r1, r0
 800df32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800df36:	4313      	orrs	r3, r2
 800df38:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d10d      	bne.n	800df5c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d009      	beq.n	800df5c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	68d9      	ldr	r1, [r3, #12]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df58:	460a      	mov	r2, r1
 800df5a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	791b      	ldrb	r3, [r3, #4]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d128      	bne.n	800dfb6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df70:	2b00      	cmp	r3, #0
 800df72:	d110      	bne.n	800df96 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	69ba      	ldr	r2, [r7, #24]
 800df84:	0151      	lsls	r1, r2, #5
 800df86:	69fa      	ldr	r2, [r7, #28]
 800df88:	440a      	add	r2, r1
 800df8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	e00f      	b.n	800dfb6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	69ba      	ldr	r2, [r7, #24]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	69fa      	ldr	r2, [r7, #28]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfb4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	0151      	lsls	r1, r2, #5
 800dfc8:	69fa      	ldr	r2, [r7, #28]
 800dfca:	440a      	add	r2, r1
 800dfcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dfd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3720      	adds	r7, #32
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	fff80000 	.word	0xfff80000
 800dfe4:	e007ffff 	.word	0xe007ffff
 800dfe8:	1ff80000 	.word	0x1ff80000

0800dfec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b087      	sub	sp, #28
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	785b      	ldrb	r3, [r3, #1]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d14a      	bne.n	800e0a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e01e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e022:	f040 8086 	bne.w	800e132 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	7812      	ldrb	r2, [r2, #0]
 800e03a:	0151      	lsls	r1, r2, #5
 800e03c:	693a      	ldr	r2, [r7, #16]
 800e03e:	440a      	add	r2, r1
 800e040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e044:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e048:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	7812      	ldrb	r2, [r2, #0]
 800e05e:	0151      	lsls	r1, r2, #5
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	440a      	add	r2, r1
 800e064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e06c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	3301      	adds	r3, #1
 800e072:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d902      	bls.n	800e084 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	75fb      	strb	r3, [r7, #23]
          break;
 800e082:	e056      	b.n	800e132 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	015a      	lsls	r2, r3, #5
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	4413      	add	r3, r2
 800e08e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e09c:	d0e7      	beq.n	800e06e <USB_EPStopXfer+0x82>
 800e09e:	e048      	b.n	800e132 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	015a      	lsls	r2, r3, #5
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0b8:	d13b      	bne.n	800e132 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	015a      	lsls	r2, r3, #5
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	7812      	ldrb	r2, [r2, #0]
 800e0ce:	0151      	lsls	r1, r2, #5
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	440a      	add	r2, r1
 800e0d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e0dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	7812      	ldrb	r2, [r2, #0]
 800e0f2:	0151      	lsls	r1, r2, #5
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	440a      	add	r2, r1
 800e0f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e100:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e10e:	4293      	cmp	r3, r2
 800e110:	d902      	bls.n	800e118 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	75fb      	strb	r3, [r7, #23]
          break;
 800e116:	e00c      	b.n	800e132 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	015a      	lsls	r2, r3, #5
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	4413      	add	r3, r2
 800e122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e12c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e130:	d0e7      	beq.n	800e102 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e132:	7dfb      	ldrb	r3, [r7, #23]
}
 800e134:	4618      	mov	r0, r3
 800e136:	371c      	adds	r7, #28
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e140:	b480      	push	{r7}
 800e142:	b089      	sub	sp, #36	@ 0x24
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	4611      	mov	r1, r2
 800e14c:	461a      	mov	r2, r3
 800e14e:	460b      	mov	r3, r1
 800e150:	71fb      	strb	r3, [r7, #7]
 800e152:	4613      	mov	r3, r2
 800e154:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e15e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e162:	2b00      	cmp	r3, #0
 800e164:	d123      	bne.n	800e1ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e166:	88bb      	ldrh	r3, [r7, #4]
 800e168:	3303      	adds	r3, #3
 800e16a:	089b      	lsrs	r3, r3, #2
 800e16c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e16e:	2300      	movs	r3, #0
 800e170:	61bb      	str	r3, [r7, #24]
 800e172:	e018      	b.n	800e1a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	031a      	lsls	r2, r3, #12
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	4413      	add	r3, r2
 800e17c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e180:	461a      	mov	r2, r3
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	3301      	adds	r3, #1
 800e18c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	3301      	adds	r3, #1
 800e192:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	3301      	adds	r3, #1
 800e198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	3301      	adds	r3, #1
 800e19e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	61bb      	str	r3, [r7, #24]
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d3e2      	bcc.n	800e174 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3724      	adds	r7, #36	@ 0x24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b08b      	sub	sp, #44	@ 0x2c
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	089b      	lsrs	r3, r3, #2
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e1da:	88fb      	ldrh	r3, [r7, #6]
 800e1dc:	f003 0303 	and.w	r3, r3, #3
 800e1e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	623b      	str	r3, [r7, #32]
 800e1e6:	e014      	b.n	800e212 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f2:	601a      	str	r2, [r3, #0]
    pDest++;
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	3301      	adds	r3, #1
 800e204:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e208:	3301      	adds	r3, #1
 800e20a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	3301      	adds	r3, #1
 800e210:	623b      	str	r3, [r7, #32]
 800e212:	6a3a      	ldr	r2, [r7, #32]
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	429a      	cmp	r2, r3
 800e218:	d3e6      	bcc.n	800e1e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e21a:	8bfb      	ldrh	r3, [r7, #30]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d01e      	beq.n	800e25e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e220:	2300      	movs	r3, #0
 800e222:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e22a:	461a      	mov	r2, r3
 800e22c:	f107 0310 	add.w	r3, r7, #16
 800e230:	6812      	ldr	r2, [r2, #0]
 800e232:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e234:	693a      	ldr	r2, [r7, #16]
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	fa22 f303 	lsr.w	r3, r2, r3
 800e240:	b2da      	uxtb	r2, r3
 800e242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e244:	701a      	strb	r2, [r3, #0]
      i++;
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	3301      	adds	r3, #1
 800e24a:	623b      	str	r3, [r7, #32]
      pDest++;
 800e24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24e:	3301      	adds	r3, #1
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e252:	8bfb      	ldrh	r3, [r7, #30]
 800e254:	3b01      	subs	r3, #1
 800e256:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e258:	8bfb      	ldrh	r3, [r7, #30]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1ea      	bne.n	800e234 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e260:	4618      	mov	r0, r3
 800e262:	372c      	adds	r7, #44	@ 0x2c
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	785b      	ldrb	r3, [r3, #1]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d12c      	bne.n	800e2e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	015a      	lsls	r2, r3, #5
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	db12      	blt.n	800e2c0 <USB_EPSetStall+0x54>
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00f      	beq.n	800e2c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	015a      	lsls	r2, r3, #5
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	68ba      	ldr	r2, [r7, #8]
 800e2b0:	0151      	lsls	r1, r2, #5
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	440a      	add	r2, r1
 800e2b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e2be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	015a      	lsls	r2, r3, #5
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	0151      	lsls	r1, r2, #5
 800e2d2:	68fa      	ldr	r2, [r7, #12]
 800e2d4:	440a      	add	r2, r1
 800e2d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e2de:	6013      	str	r3, [r2, #0]
 800e2e0:	e02b      	b.n	800e33a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	db12      	blt.n	800e31a <USB_EPSetStall+0xae>
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00f      	beq.n	800e31a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	015a      	lsls	r2, r3, #5
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	4413      	add	r3, r2
 800e302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	0151      	lsls	r1, r2, #5
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	440a      	add	r2, r1
 800e310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e314:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e318:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	0151      	lsls	r1, r2, #5
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	440a      	add	r2, r1
 800e330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e338:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	785b      	ldrb	r3, [r3, #1]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d128      	bne.n	800e3b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	015a      	lsls	r2, r3, #5
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	4413      	add	r3, r2
 800e36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	0151      	lsls	r1, r2, #5
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	440a      	add	r2, r1
 800e37a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e37e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e382:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	791b      	ldrb	r3, [r3, #4]
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d003      	beq.n	800e394 <USB_EPClearStall+0x4c>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	791b      	ldrb	r3, [r3, #4]
 800e390:	2b02      	cmp	r3, #2
 800e392:	d138      	bne.n	800e406 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	0151      	lsls	r1, r2, #5
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	e027      	b.n	800e406 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	0151      	lsls	r1, r2, #5
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	440a      	add	r2, r1
 800e3cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e3d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	791b      	ldrb	r3, [r3, #4]
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d003      	beq.n	800e3e6 <USB_EPClearStall+0x9e>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	791b      	ldrb	r3, [r3, #4]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d10f      	bne.n	800e406 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	015a      	lsls	r2, r3, #5
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	0151      	lsls	r1, r2, #5
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	440a      	add	r2, r1
 800e3fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e404:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e432:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e436:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e448:	68f9      	ldr	r1, [r7, #12]
 800e44a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e44e:	4313      	orrs	r3, r2
 800e450:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e47a:	f023 0303 	bic.w	r3, r3, #3
 800e47e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e48e:	f023 0302 	bic.w	r3, r3, #2
 800e492:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4a2:	b480      	push	{r7}
 800e4a4:	b085      	sub	sp, #20
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e4bc:	f023 0303 	bic.w	r3, r3, #3
 800e4c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e4d0:	f043 0302 	orr.w	r3, r3, #2
 800e4d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e50a:	b480      	push	{r7}
 800e50c:	b085      	sub	sp, #20
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e526:	69db      	ldr	r3, [r3, #28]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	4013      	ands	r3, r2
 800e52c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	0c1b      	lsrs	r3, r3, #16
}
 800e532:	4618      	mov	r0, r3
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e53e:	b480      	push	{r7}
 800e540:	b085      	sub	sp, #20
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	4013      	ands	r3, r2
 800e560:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	b29b      	uxth	r3, r3
}
 800e566:	4618      	mov	r0, r3
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e572:	b480      	push	{r7}
 800e574:	b085      	sub	sp, #20
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	460b      	mov	r3, r1
 800e57c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e582:	78fb      	ldrb	r3, [r7, #3]
 800e584:	015a      	lsls	r2, r3, #5
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	4413      	add	r3, r2
 800e58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e598:	695b      	ldr	r3, [r3, #20]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4013      	ands	r3, r2
 800e59e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5a0:	68bb      	ldr	r3, [r7, #8]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr

0800e5ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e5ae:	b480      	push	{r7}
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e5d2:	78fb      	ldrb	r3, [r7, #3]
 800e5d4:	f003 030f 	and.w	r3, r3, #15
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	fa22 f303 	lsr.w	r3, r2, r3
 800e5de:	01db      	lsls	r3, r3, #7
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e5e8:	78fb      	ldrb	r3, [r7, #3]
 800e5ea:	015a      	lsls	r2, r3, #5
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5f4:	689b      	ldr	r3, [r3, #8]
 800e5f6:	693a      	ldr	r2, [r7, #16]
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5fc:	68bb      	ldr	r3, [r7, #8]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	371c      	adds	r7, #28
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e60a:	b480      	push	{r7}
 800e60c:	b083      	sub	sp, #12
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	695b      	ldr	r3, [r3, #20]
 800e616:	f003 0301 	and.w	r3, r3, #1
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
	...

0800e628 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e642:	4619      	mov	r1, r3
 800e644:	4b09      	ldr	r3, [pc, #36]	@ (800e66c <USB_ActivateSetup+0x44>)
 800e646:	4013      	ands	r3, r2
 800e648:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e65c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	fffff800 	.word	0xfffff800

0800e670 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e670:	b480      	push	{r7}
 800e672:	b087      	sub	sp, #28
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	460b      	mov	r3, r1
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	333c      	adds	r3, #60	@ 0x3c
 800e686:	3304      	adds	r3, #4
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	4a26      	ldr	r2, [pc, #152]	@ (800e728 <USB_EP0_OutStart+0xb8>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d90a      	bls.n	800e6aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6a4:	d101      	bne.n	800e6aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e037      	b.n	800e71a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	697a      	ldr	r2, [r7, #20]
 800e6d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6d8:	f043 0318 	orr.w	r3, r3, #24
 800e6dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e6f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e6f2:	7afb      	ldrb	r3, [r7, #11]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d10f      	bne.n	800e718 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6fe:	461a      	mov	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e712:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	4f54300a 	.word	0x4f54300a

0800e72c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e734:	2300      	movs	r3, #0
 800e736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e744:	d901      	bls.n	800e74a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e746:	2303      	movs	r3, #3
 800e748:	e01b      	b.n	800e782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	daf2      	bge.n	800e738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e752:	2300      	movs	r3, #0
 800e754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	f043 0201 	orr.w	r2, r3, #1
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3301      	adds	r3, #1
 800e766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e76e:	d901      	bls.n	800e774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e770:	2303      	movs	r3, #3
 800e772:	e006      	b.n	800e782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d0f0      	beq.n	800e762 <USB_CoreReset+0x36>

  return HAL_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
	...

0800e790 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e79c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e7a0:	f002 fd6c 	bl	801127c <USBD_static_malloc>
 800e7a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	32b0      	adds	r2, #176	@ 0xb0
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e7bc:	2302      	movs	r3, #2
 800e7be:	e0d4      	b.n	800e96a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e7c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f003 fbee 	bl	8011fa8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	32b0      	adds	r2, #176	@ 0xb0
 800e7d6:	68f9      	ldr	r1, [r7, #12]
 800e7d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	32b0      	adds	r2, #176	@ 0xb0
 800e7e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	7c1b      	ldrb	r3, [r3, #16]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d138      	bne.n	800e86a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e7f8:	4b5e      	ldr	r3, [pc, #376]	@ (800e974 <USBD_CDC_Init+0x1e4>)
 800e7fa:	7819      	ldrb	r1, [r3, #0]
 800e7fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e800:	2202      	movs	r2, #2
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f002 fc17 	bl	8011036 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e808:	4b5a      	ldr	r3, [pc, #360]	@ (800e974 <USBD_CDC_Init+0x1e4>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	f003 020f 	and.w	r2, r3, #15
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	4613      	mov	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	4413      	add	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	440b      	add	r3, r1
 800e81c:	3324      	adds	r3, #36	@ 0x24
 800e81e:	2201      	movs	r2, #1
 800e820:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e822:	4b55      	ldr	r3, [pc, #340]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e824:	7819      	ldrb	r1, [r3, #0]
 800e826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e82a:	2202      	movs	r2, #2
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f002 fc02 	bl	8011036 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e832:	4b51      	ldr	r3, [pc, #324]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	f003 020f 	and.w	r2, r3, #15
 800e83a:	6879      	ldr	r1, [r7, #4]
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e84a:	2201      	movs	r2, #1
 800e84c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e84e:	4b4b      	ldr	r3, [pc, #300]	@ (800e97c <USBD_CDC_Init+0x1ec>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f003 020f 	and.w	r2, r3, #15
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	4613      	mov	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	440b      	add	r3, r1
 800e862:	3326      	adds	r3, #38	@ 0x26
 800e864:	2210      	movs	r2, #16
 800e866:	801a      	strh	r2, [r3, #0]
 800e868:	e035      	b.n	800e8d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e86a:	4b42      	ldr	r3, [pc, #264]	@ (800e974 <USBD_CDC_Init+0x1e4>)
 800e86c:	7819      	ldrb	r1, [r3, #0]
 800e86e:	2340      	movs	r3, #64	@ 0x40
 800e870:	2202      	movs	r2, #2
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f002 fbdf 	bl	8011036 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e878:	4b3e      	ldr	r3, [pc, #248]	@ (800e974 <USBD_CDC_Init+0x1e4>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	f003 020f 	and.w	r2, r3, #15
 800e880:	6879      	ldr	r1, [r7, #4]
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	440b      	add	r3, r1
 800e88c:	3324      	adds	r3, #36	@ 0x24
 800e88e:	2201      	movs	r2, #1
 800e890:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e892:	4b39      	ldr	r3, [pc, #228]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e894:	7819      	ldrb	r1, [r3, #0]
 800e896:	2340      	movs	r3, #64	@ 0x40
 800e898:	2202      	movs	r2, #2
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f002 fbcb 	bl	8011036 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e8a0:	4b35      	ldr	r3, [pc, #212]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	f003 020f 	and.w	r2, r3, #15
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e8bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e97c <USBD_CDC_Init+0x1ec>)
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f003 020f 	and.w	r2, r3, #15
 800e8c4:	6879      	ldr	r1, [r7, #4]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	4413      	add	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	440b      	add	r3, r1
 800e8d0:	3326      	adds	r3, #38	@ 0x26
 800e8d2:	2210      	movs	r2, #16
 800e8d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e8d6:	4b29      	ldr	r3, [pc, #164]	@ (800e97c <USBD_CDC_Init+0x1ec>)
 800e8d8:	7819      	ldrb	r1, [r3, #0]
 800e8da:	2308      	movs	r3, #8
 800e8dc:	2203      	movs	r2, #3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f002 fba9 	bl	8011036 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e8e4:	4b25      	ldr	r3, [pc, #148]	@ (800e97c <USBD_CDC_Init+0x1ec>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f003 020f 	and.w	r2, r3, #15
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	440b      	add	r3, r1
 800e8f8:	3324      	adds	r3, #36	@ 0x24
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	33b0      	adds	r3, #176	@ 0xb0
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e934:	2302      	movs	r3, #2
 800e936:	e018      	b.n	800e96a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7c1b      	ldrb	r3, [r3, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10a      	bne.n	800e956 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e940:	4b0d      	ldr	r3, [pc, #52]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e942:	7819      	ldrb	r1, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e94a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f002 fc60 	bl	8011214 <USBD_LL_PrepareReceive>
 800e954:	e008      	b.n	800e968 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e956:	4b08      	ldr	r3, [pc, #32]	@ (800e978 <USBD_CDC_Init+0x1e8>)
 800e958:	7819      	ldrb	r1, [r3, #0]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e960:	2340      	movs	r3, #64	@ 0x40
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f002 fc56 	bl	8011214 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3710      	adds	r7, #16
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	24000097 	.word	0x24000097
 800e978:	24000098 	.word	0x24000098
 800e97c:	24000099 	.word	0x24000099

0800e980 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e98c:	4b3a      	ldr	r3, [pc, #232]	@ (800ea78 <USBD_CDC_DeInit+0xf8>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f002 fb75 	bl	8011082 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e998:	4b37      	ldr	r3, [pc, #220]	@ (800ea78 <USBD_CDC_DeInit+0xf8>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 020f 	and.w	r2, r3, #15
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	3324      	adds	r3, #36	@ 0x24
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e9b2:	4b32      	ldr	r3, [pc, #200]	@ (800ea7c <USBD_CDC_DeInit+0xfc>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f002 fb62 	bl	8011082 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e9be:	4b2f      	ldr	r3, [pc, #188]	@ (800ea7c <USBD_CDC_DeInit+0xfc>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	f003 020f 	and.w	r2, r3, #15
 800e9c6:	6879      	ldr	r1, [r7, #4]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	440b      	add	r3, r1
 800e9d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e9da:	4b29      	ldr	r3, [pc, #164]	@ (800ea80 <USBD_CDC_DeInit+0x100>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f002 fb4e 	bl	8011082 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e9e6:	4b26      	ldr	r3, [pc, #152]	@ (800ea80 <USBD_CDC_DeInit+0x100>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 020f 	and.w	r2, r3, #15
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	440b      	add	r3, r1
 800e9fa:	3324      	adds	r3, #36	@ 0x24
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ea00:	4b1f      	ldr	r3, [pc, #124]	@ (800ea80 <USBD_CDC_DeInit+0x100>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 020f 	and.w	r2, r3, #15
 800ea08:	6879      	ldr	r1, [r7, #4]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	440b      	add	r3, r1
 800ea14:	3326      	adds	r3, #38	@ 0x26
 800ea16:	2200      	movs	r2, #0
 800ea18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	32b0      	adds	r2, #176	@ 0xb0
 800ea24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01f      	beq.n	800ea6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	33b0      	adds	r3, #176	@ 0xb0
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	4413      	add	r3, r2
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	32b0      	adds	r2, #176	@ 0xb0
 800ea4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f002 fc22 	bl	8011298 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	32b0      	adds	r2, #176	@ 0xb0
 800ea5e:	2100      	movs	r1, #0
 800ea60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	24000097 	.word	0x24000097
 800ea7c:	24000098 	.word	0x24000098
 800ea80:	24000099 	.word	0x24000099

0800ea84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	32b0      	adds	r2, #176	@ 0xb0
 800ea98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e0bf      	b.n	800ec34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d050      	beq.n	800eb62 <USBD_CDC_Setup+0xde>
 800eac0:	2b20      	cmp	r3, #32
 800eac2:	f040 80af 	bne.w	800ec24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	88db      	ldrh	r3, [r3, #6]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d03a      	beq.n	800eb44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	da1b      	bge.n	800eb10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	33b0      	adds	r3, #176	@ 0xb0
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	4413      	add	r3, r2
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800eaee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eaf0:	683a      	ldr	r2, [r7, #0]
 800eaf2:	88d2      	ldrh	r2, [r2, #6]
 800eaf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	88db      	ldrh	r3, [r3, #6]
 800eafa:	2b07      	cmp	r3, #7
 800eafc:	bf28      	it	cs
 800eafe:	2307      	movcs	r3, #7
 800eb00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	89fa      	ldrh	r2, [r7, #14]
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f001 fdbd 	bl	8010688 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800eb0e:	e090      	b.n	800ec32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	785a      	ldrb	r2, [r3, #1]
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	88db      	ldrh	r3, [r3, #6]
 800eb1e:	2b3f      	cmp	r3, #63	@ 0x3f
 800eb20:	d803      	bhi.n	800eb2a <USBD_CDC_Setup+0xa6>
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	88db      	ldrh	r3, [r3, #6]
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	e000      	b.n	800eb2c <USBD_CDC_Setup+0xa8>
 800eb2a:	2240      	movs	r2, #64	@ 0x40
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eb32:	6939      	ldr	r1, [r7, #16]
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f001 fdcf 	bl	80106e0 <USBD_CtlPrepareRx>
      break;
 800eb42:	e076      	b.n	800ec32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	33b0      	adds	r3, #176	@ 0xb0
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4413      	add	r3, r2
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	7850      	ldrb	r0, [r2, #1]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	6839      	ldr	r1, [r7, #0]
 800eb5e:	4798      	blx	r3
      break;
 800eb60:	e067      	b.n	800ec32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b0b      	cmp	r3, #11
 800eb68:	d851      	bhi.n	800ec0e <USBD_CDC_Setup+0x18a>
 800eb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb70 <USBD_CDC_Setup+0xec>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800eba1 	.word	0x0800eba1
 800eb74:	0800ec1d 	.word	0x0800ec1d
 800eb78:	0800ec0f 	.word	0x0800ec0f
 800eb7c:	0800ec0f 	.word	0x0800ec0f
 800eb80:	0800ec0f 	.word	0x0800ec0f
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec0f 	.word	0x0800ec0f
 800eb8c:	0800ec0f 	.word	0x0800ec0f
 800eb90:	0800ec0f 	.word	0x0800ec0f
 800eb94:	0800ec0f 	.word	0x0800ec0f
 800eb98:	0800ebcb 	.word	0x0800ebcb
 800eb9c:	0800ebf5 	.word	0x0800ebf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b03      	cmp	r3, #3
 800ebaa:	d107      	bne.n	800ebbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ebac:	f107 030a 	add.w	r3, r7, #10
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f001 fd67 	bl	8010688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebba:	e032      	b.n	800ec22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f001 fce5 	bl	801058e <USBD_CtlError>
            ret = USBD_FAIL;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	75fb      	strb	r3, [r7, #23]
          break;
 800ebc8:	e02b      	b.n	800ec22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	2b03      	cmp	r3, #3
 800ebd4:	d107      	bne.n	800ebe6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ebd6:	f107 030d 	add.w	r3, r7, #13
 800ebda:	2201      	movs	r2, #1
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f001 fd52 	bl	8010688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebe4:	e01d      	b.n	800ec22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebe6:	6839      	ldr	r1, [r7, #0]
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 fcd0 	bl	801058e <USBD_CtlError>
            ret = USBD_FAIL;
 800ebee:	2303      	movs	r3, #3
 800ebf0:	75fb      	strb	r3, [r7, #23]
          break;
 800ebf2:	e016      	b.n	800ec22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b03      	cmp	r3, #3
 800ebfe:	d00f      	beq.n	800ec20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 fcc3 	bl	801058e <USBD_CtlError>
            ret = USBD_FAIL;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ec0c:	e008      	b.n	800ec20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 fcbc 	bl	801058e <USBD_CtlError>
          ret = USBD_FAIL;
 800ec16:	2303      	movs	r3, #3
 800ec18:	75fb      	strb	r3, [r7, #23]
          break;
 800ec1a:	e002      	b.n	800ec22 <USBD_CDC_Setup+0x19e>
          break;
 800ec1c:	bf00      	nop
 800ec1e:	e008      	b.n	800ec32 <USBD_CDC_Setup+0x1ae>
          break;
 800ec20:	bf00      	nop
      }
      break;
 800ec22:	e006      	b.n	800ec32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ec24:	6839      	ldr	r1, [r7, #0]
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f001 fcb1 	bl	801058e <USBD_CtlError>
      ret = USBD_FAIL;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ec30:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	460b      	mov	r3, r1
 800ec46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	32b0      	adds	r2, #176	@ 0xb0
 800ec5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ec62:	2303      	movs	r3, #3
 800ec64:	e065      	b.n	800ed32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	32b0      	adds	r2, #176	@ 0xb0
 800ec70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ec76:	78fb      	ldrb	r3, [r7, #3]
 800ec78:	f003 020f 	and.w	r2, r3, #15
 800ec7c:	6879      	ldr	r1, [r7, #4]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	4413      	add	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	440b      	add	r3, r1
 800ec88:	3318      	adds	r3, #24
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d02f      	beq.n	800ecf0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	f003 020f 	and.w	r2, r3, #15
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	4413      	add	r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	440b      	add	r3, r1
 800eca2:	3318      	adds	r3, #24
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	f003 010f 	and.w	r1, r3, #15
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	440b      	add	r3, r1
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4403      	add	r3, r0
 800ecb8:	331c      	adds	r3, #28
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	fbb2 f1f3 	udiv	r1, r2, r3
 800ecc0:	fb01 f303 	mul.w	r3, r1, r3
 800ecc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d112      	bne.n	800ecf0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	f003 020f 	and.w	r2, r3, #15
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	440b      	add	r3, r1
 800ecdc:	3318      	adds	r3, #24
 800ecde:	2200      	movs	r2, #0
 800ece0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ece2:	78f9      	ldrb	r1, [r7, #3]
 800ece4:	2300      	movs	r3, #0
 800ece6:	2200      	movs	r2, #0
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f002 fa72 	bl	80111d2 <USBD_LL_Transmit>
 800ecee:	e01f      	b.n	800ed30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	33b0      	adds	r3, #176	@ 0xb0
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4413      	add	r3, r2
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	691b      	ldr	r3, [r3, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d010      	beq.n	800ed30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	33b0      	adds	r3, #176	@ 0xb0
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	691b      	ldr	r3, [r3, #16]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ed2c:	78fa      	ldrb	r2, [r7, #3]
 800ed2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	460b      	mov	r3, r1
 800ed44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	32b0      	adds	r2, #176	@ 0xb0
 800ed50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	32b0      	adds	r2, #176	@ 0xb0
 800ed60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e01a      	b.n	800eda2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f002 fa70 	bl	8011256 <USBD_LL_GetRxDataSize>
 800ed76:	4602      	mov	r2, r0
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	33b0      	adds	r3, #176	@ 0xb0
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	32b0      	adds	r2, #176	@ 0xb0
 800edbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edc8:	2303      	movs	r3, #3
 800edca:	e024      	b.n	800ee16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	33b0      	adds	r3, #176	@ 0xb0
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	4413      	add	r3, r2
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d019      	beq.n	800ee14 <USBD_CDC_EP0_RxReady+0x6a>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ede6:	2bff      	cmp	r3, #255	@ 0xff
 800ede8:	d014      	beq.n	800ee14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	33b0      	adds	r3, #176	@ 0xb0
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4413      	add	r3, r2
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ee02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	22ff      	movs	r2, #255	@ 0xff
 800ee10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
	...

0800ee20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee28:	2182      	movs	r1, #130	@ 0x82
 800ee2a:	4818      	ldr	r0, [pc, #96]	@ (800ee8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee2c:	f000 fd4f 	bl	800f8ce <USBD_GetEpDesc>
 800ee30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee32:	2101      	movs	r1, #1
 800ee34:	4815      	ldr	r0, [pc, #84]	@ (800ee8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee36:	f000 fd4a 	bl	800f8ce <USBD_GetEpDesc>
 800ee3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee3c:	2181      	movs	r1, #129	@ 0x81
 800ee3e:	4813      	ldr	r0, [pc, #76]	@ (800ee8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee40:	f000 fd45 	bl	800f8ce <USBD_GetEpDesc>
 800ee44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2210      	movs	r2, #16
 800ee50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d006      	beq.n	800ee66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee60:	711a      	strb	r2, [r3, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d006      	beq.n	800ee7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee74:	711a      	strb	r2, [r3, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2243      	movs	r2, #67	@ 0x43
 800ee7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ee80:	4b02      	ldr	r3, [pc, #8]	@ (800ee8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3718      	adds	r7, #24
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	24000054 	.word	0x24000054

0800ee90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee98:	2182      	movs	r1, #130	@ 0x82
 800ee9a:	4818      	ldr	r0, [pc, #96]	@ (800eefc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ee9c:	f000 fd17 	bl	800f8ce <USBD_GetEpDesc>
 800eea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eea2:	2101      	movs	r1, #1
 800eea4:	4815      	ldr	r0, [pc, #84]	@ (800eefc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eea6:	f000 fd12 	bl	800f8ce <USBD_GetEpDesc>
 800eeaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eeac:	2181      	movs	r1, #129	@ 0x81
 800eeae:	4813      	ldr	r0, [pc, #76]	@ (800eefc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eeb0:	f000 fd0d 	bl	800f8ce <USBD_GetEpDesc>
 800eeb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2210      	movs	r2, #16
 800eec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d006      	beq.n	800eed6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	2200      	movs	r2, #0
 800eecc:	711a      	strb	r2, [r3, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f042 0202 	orr.w	r2, r2, #2
 800eed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d006      	beq.n	800eeea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2200      	movs	r2, #0
 800eee0:	711a      	strb	r2, [r3, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f042 0202 	orr.w	r2, r2, #2
 800eee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2243      	movs	r2, #67	@ 0x43
 800eeee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eef0:	4b02      	ldr	r3, [pc, #8]	@ (800eefc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	24000054 	.word	0x24000054

0800ef00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ef08:	2182      	movs	r1, #130	@ 0x82
 800ef0a:	4818      	ldr	r0, [pc, #96]	@ (800ef6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef0c:	f000 fcdf 	bl	800f8ce <USBD_GetEpDesc>
 800ef10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ef12:	2101      	movs	r1, #1
 800ef14:	4815      	ldr	r0, [pc, #84]	@ (800ef6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef16:	f000 fcda 	bl	800f8ce <USBD_GetEpDesc>
 800ef1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ef1c:	2181      	movs	r1, #129	@ 0x81
 800ef1e:	4813      	ldr	r0, [pc, #76]	@ (800ef6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef20:	f000 fcd5 	bl	800f8ce <USBD_GetEpDesc>
 800ef24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2210      	movs	r2, #16
 800ef30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d006      	beq.n	800ef46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef40:	711a      	strb	r2, [r3, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d006      	beq.n	800ef5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef54:	711a      	strb	r2, [r3, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2243      	movs	r2, #67	@ 0x43
 800ef5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef60:	4b02      	ldr	r3, [pc, #8]	@ (800ef6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3718      	adds	r7, #24
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	24000054 	.word	0x24000054

0800ef70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	220a      	movs	r2, #10
 800ef7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef7e:	4b03      	ldr	r3, [pc, #12]	@ (800ef8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	24000010 	.word	0x24000010

0800ef90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800efa0:	2303      	movs	r3, #3
 800efa2:	e009      	b.n	800efb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	33b0      	adds	r3, #176	@ 0xb0
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800efb6:	2300      	movs	r3, #0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	32b0      	adds	r2, #176	@ 0xb0
 800efda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e008      	b.n	800effc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	371c      	adds	r7, #28
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	32b0      	adds	r2, #176	@ 0xb0
 800f01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f020:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f028:	2303      	movs	r3, #3
 800f02a:	e004      	b.n	800f036 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
	...

0800f044 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	32b0      	adds	r2, #176	@ 0xb0
 800f056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f05a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f05c:	2301      	movs	r3, #1
 800f05e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f066:	2303      	movs	r3, #3
 800f068:	e025      	b.n	800f0b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f070:	2b00      	cmp	r3, #0
 800f072:	d11f      	bne.n	800f0b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	2201      	movs	r2, #1
 800f078:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f07c:	4b10      	ldr	r3, [pc, #64]	@ (800f0c0 <USBD_CDC_TransmitPacket+0x7c>)
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	f003 020f 	and.w	r2, r3, #15
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	4613      	mov	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4403      	add	r3, r0
 800f096:	3318      	adds	r3, #24
 800f098:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f09a:	4b09      	ldr	r3, [pc, #36]	@ (800f0c0 <USBD_CDC_TransmitPacket+0x7c>)
 800f09c:	7819      	ldrb	r1, [r3, #0]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f002 f891 	bl	80111d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	24000097 	.word	0x24000097

0800f0c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	32b0      	adds	r2, #176	@ 0xb0
 800f0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	32b0      	adds	r2, #176	@ 0xb0
 800f0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f0ee:	2303      	movs	r3, #3
 800f0f0:	e018      	b.n	800f124 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	7c1b      	ldrb	r3, [r3, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d10a      	bne.n	800f110 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f12c <USBD_CDC_ReceivePacket+0x68>)
 800f0fc:	7819      	ldrb	r1, [r3, #0]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f104:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f002 f883 	bl	8011214 <USBD_LL_PrepareReceive>
 800f10e:	e008      	b.n	800f122 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f110:	4b06      	ldr	r3, [pc, #24]	@ (800f12c <USBD_CDC_ReceivePacket+0x68>)
 800f112:	7819      	ldrb	r1, [r3, #0]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f11a:	2340      	movs	r3, #64	@ 0x40
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f002 f879 	bl	8011214 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	24000098 	.word	0x24000098

0800f130 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	4613      	mov	r3, r2
 800f13c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	e01f      	b.n	800f188 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2200      	movs	r2, #0
 800f154:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	79fa      	ldrb	r2, [r7, #7]
 800f17a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f001 feef 	bl	8010f60 <USBD_LL_Init>
 800f182:	4603      	mov	r3, r0
 800f184:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f186:	7dfb      	ldrb	r3, [r7, #23]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f19a:	2300      	movs	r3, #0
 800f19c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	e025      	b.n	800f1f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	32ae      	adds	r2, #174	@ 0xae
 800f1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00f      	beq.n	800f1e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	32ae      	adds	r2, #174	@ 0xae
 800f1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d4:	f107 020e 	add.w	r2, r7, #14
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4798      	blx	r3
 800f1dc:	4602      	mov	r2, r0
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 fefb 	bl	8011000 <USBD_LL_Start>
 800f20a:	4603      	mov	r3, r0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f21c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f21e:	4618      	mov	r0, r3
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b084      	sub	sp, #16
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	460b      	mov	r3, r1
 800f234:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f240:	2b00      	cmp	r3, #0
 800f242:	d009      	beq.n	800f258 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	78fa      	ldrb	r2, [r7, #3]
 800f24e:	4611      	mov	r1, r2
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	4798      	blx	r3
 800f254:	4603      	mov	r3, r0
 800f256:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f258:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	78fa      	ldrb	r2, [r7, #3]
 800f27c:	4611      	mov	r1, r2
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	4798      	blx	r3
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f288:	2303      	movs	r3, #3
 800f28a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f001 f936 	bl	801051a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f2bc:	461a      	mov	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f2ca:	f003 031f 	and.w	r3, r3, #31
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	d01a      	beq.n	800f308 <USBD_LL_SetupStage+0x72>
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d822      	bhi.n	800f31c <USBD_LL_SetupStage+0x86>
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d002      	beq.n	800f2e0 <USBD_LL_SetupStage+0x4a>
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d00a      	beq.n	800f2f4 <USBD_LL_SetupStage+0x5e>
 800f2de:	e01d      	b.n	800f31c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fb63 	bl	800f9b4 <USBD_StdDevReq>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f2f2:	e020      	b.n	800f336 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fbcb 	bl	800fa98 <USBD_StdItfReq>
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]
      break;
 800f306:	e016      	b.n	800f336 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fc2d 	bl	800fb70 <USBD_StdEPReq>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
      break;
 800f31a:	e00c      	b.n	800f336 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f322:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f326:	b2db      	uxtb	r3, r3
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f001 fec8 	bl	80110c0 <USBD_LL_StallEP>
 800f330:	4603      	mov	r3, r0
 800f332:	73fb      	strb	r3, [r7, #15]
      break;
 800f334:	bf00      	nop
  }

  return ret;
 800f336:	7bfb      	ldrb	r3, [r7, #15]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3710      	adds	r7, #16
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	460b      	mov	r3, r1
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f34e:	2300      	movs	r3, #0
 800f350:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f352:	7afb      	ldrb	r3, [r7, #11]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d16e      	bne.n	800f436 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f35e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f366:	2b03      	cmp	r3, #3
 800f368:	f040 8098 	bne.w	800f49c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	689a      	ldr	r2, [r3, #8]
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	429a      	cmp	r2, r3
 800f376:	d913      	bls.n	800f3a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	1ad2      	subs	r2, r2, r3
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	68da      	ldr	r2, [r3, #12]
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	689b      	ldr	r3, [r3, #8]
 800f38e:	4293      	cmp	r3, r2
 800f390:	bf28      	it	cs
 800f392:	4613      	movcs	r3, r2
 800f394:	461a      	mov	r2, r3
 800f396:	6879      	ldr	r1, [r7, #4]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f001 f9be 	bl	801071a <USBD_CtlContinueRx>
 800f39e:	e07d      	b.n	800f49c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f3a6:	f003 031f 	and.w	r3, r3, #31
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d014      	beq.n	800f3d8 <USBD_LL_DataOutStage+0x98>
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d81d      	bhi.n	800f3ee <USBD_LL_DataOutStage+0xae>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <USBD_LL_DataOutStage+0x7c>
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d003      	beq.n	800f3c2 <USBD_LL_DataOutStage+0x82>
 800f3ba:	e018      	b.n	800f3ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	75bb      	strb	r3, [r7, #22]
            break;
 800f3c0:	e018      	b.n	800f3f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 fa64 	bl	800f89a <USBD_CoreFindIF>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	75bb      	strb	r3, [r7, #22]
            break;
 800f3d6:	e00d      	b.n	800f3f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f000 fa66 	bl	800f8b4 <USBD_CoreFindEP>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	75bb      	strb	r3, [r7, #22]
            break;
 800f3ec:	e002      	b.n	800f3f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	75bb      	strb	r3, [r7, #22]
            break;
 800f3f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f3f4:	7dbb      	ldrb	r3, [r7, #22]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d119      	bne.n	800f42e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b03      	cmp	r3, #3
 800f404:	d113      	bne.n	800f42e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f406:	7dba      	ldrb	r2, [r7, #22]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	32ae      	adds	r2, #174	@ 0xae
 800f40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f410:	691b      	ldr	r3, [r3, #16]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00b      	beq.n	800f42e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f416:	7dba      	ldrb	r2, [r7, #22]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f41e:	7dba      	ldrb	r2, [r7, #22]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	32ae      	adds	r2, #174	@ 0xae
 800f424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f001 f984 	bl	801073c <USBD_CtlSendStatus>
 800f434:	e032      	b.n	800f49c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	4619      	mov	r1, r3
 800f440:	68f8      	ldr	r0, [r7, #12]
 800f442:	f000 fa37 	bl	800f8b4 <USBD_CoreFindEP>
 800f446:	4603      	mov	r3, r0
 800f448:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f44a:	7dbb      	ldrb	r3, [r7, #22]
 800f44c:	2bff      	cmp	r3, #255	@ 0xff
 800f44e:	d025      	beq.n	800f49c <USBD_LL_DataOutStage+0x15c>
 800f450:	7dbb      	ldrb	r3, [r7, #22]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d122      	bne.n	800f49c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d117      	bne.n	800f492 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f462:	7dba      	ldrb	r2, [r7, #22]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	32ae      	adds	r2, #174	@ 0xae
 800f468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00f      	beq.n	800f492 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f472:	7dba      	ldrb	r2, [r7, #22]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f47a:	7dba      	ldrb	r2, [r7, #22]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	32ae      	adds	r2, #174	@ 0xae
 800f480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f484:	699b      	ldr	r3, [r3, #24]
 800f486:	7afa      	ldrb	r2, [r7, #11]
 800f488:	4611      	mov	r1, r2
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	4798      	blx	r3
 800f48e:	4603      	mov	r3, r0
 800f490:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f498:	7dfb      	ldrb	r3, [r7, #23]
 800f49a:	e000      	b.n	800f49e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f49c:	2300      	movs	r3, #0
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3718      	adds	r7, #24
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b086      	sub	sp, #24
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	60f8      	str	r0, [r7, #12]
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	607a      	str	r2, [r7, #4]
 800f4b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f4b4:	7afb      	ldrb	r3, [r7, #11]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d16f      	bne.n	800f59a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3314      	adds	r3, #20
 800f4be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d15a      	bne.n	800f580 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	689a      	ldr	r2, [r3, #8]
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d914      	bls.n	800f500 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	1ad2      	subs	r2, r2, r3
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	6879      	ldr	r1, [r7, #4]
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f001 f8e6 	bl	80106be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f001 fe8b 	bl	8011214 <USBD_LL_PrepareReceive>
 800f4fe:	e03f      	b.n	800f580 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d11c      	bne.n	800f546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f514:	429a      	cmp	r2, r3
 800f516:	d316      	bcc.n	800f546 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	685a      	ldr	r2, [r3, #4]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f522:	429a      	cmp	r2, r3
 800f524:	d20f      	bcs.n	800f546 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f526:	2200      	movs	r2, #0
 800f528:	2100      	movs	r1, #0
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f001 f8c7 	bl	80106be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2200      	movs	r2, #0
 800f534:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f538:	2300      	movs	r3, #0
 800f53a:	2200      	movs	r2, #0
 800f53c:	2100      	movs	r1, #0
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f001 fe68 	bl	8011214 <USBD_LL_PrepareReceive>
 800f544:	e01c      	b.n	800f580 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d10f      	bne.n	800f572 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d009      	beq.n	800f572 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f572:	2180      	movs	r1, #128	@ 0x80
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f001 fda3 	bl	80110c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f57a:	68f8      	ldr	r0, [r7, #12]
 800f57c:	f001 f8f1 	bl	8010762 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d03a      	beq.n	800f600 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f7ff fe42 	bl	800f214 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2200      	movs	r2, #0
 800f594:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f598:	e032      	b.n	800f600 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f59a:	7afb      	ldrb	r3, [r7, #11]
 800f59c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f000 f985 	bl	800f8b4 <USBD_CoreFindEP>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
 800f5b0:	2bff      	cmp	r3, #255	@ 0xff
 800f5b2:	d025      	beq.n	800f600 <USBD_LL_DataInStage+0x15a>
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d122      	bne.n	800f600 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d11c      	bne.n	800f600 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f5c6:	7dfa      	ldrb	r2, [r7, #23]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	32ae      	adds	r2, #174	@ 0xae
 800f5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d0:	695b      	ldr	r3, [r3, #20]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d014      	beq.n	800f600 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f5d6:	7dfa      	ldrb	r2, [r7, #23]
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f5de:	7dfa      	ldrb	r2, [r7, #23]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	32ae      	adds	r2, #174	@ 0xae
 800f5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	7afa      	ldrb	r2, [r7, #11]
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	4798      	blx	r3
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f5f6:	7dbb      	ldrb	r3, [r7, #22]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f5fc:	7dbb      	ldrb	r3, [r7, #22]
 800f5fe:	e000      	b.n	800f602 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3718      	adds	r7, #24
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f612:	2300      	movs	r3, #0
 800f614:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2201      	movs	r2, #1
 800f61a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f642:	2b00      	cmp	r3, #0
 800f644:	d014      	beq.n	800f670 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00e      	beq.n	800f670 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	6852      	ldr	r2, [r2, #4]
 800f65e:	b2d2      	uxtb	r2, r2
 800f660:	4611      	mov	r1, r2
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	4798      	blx	r3
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f66c:	2303      	movs	r3, #3
 800f66e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f670:	2340      	movs	r3, #64	@ 0x40
 800f672:	2200      	movs	r2, #0
 800f674:	2100      	movs	r1, #0
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f001 fcdd 	bl	8011036 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2240      	movs	r2, #64	@ 0x40
 800f688:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f68c:	2340      	movs	r3, #64	@ 0x40
 800f68e:	2200      	movs	r2, #0
 800f690:	2180      	movs	r1, #128	@ 0x80
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f001 fccf 	bl	8011036 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2240      	movs	r2, #64	@ 0x40
 800f6a2:	621a      	str	r2, [r3, #32]

  return ret;
 800f6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6ae:	b480      	push	{r7}
 800f6b0:	b083      	sub	sp, #12
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	78fa      	ldrb	r2, [r7, #3]
 800f6be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	370c      	adds	r7, #12
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr

0800f6ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b083      	sub	sp, #12
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d006      	beq.n	800f6f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6e8:	b2da      	uxtb	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2204      	movs	r2, #4
 800f6f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b04      	cmp	r3, #4
 800f718:	d106      	bne.n	800f728 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f720:	b2da      	uxtb	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	370c      	adds	r7, #12
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b082      	sub	sp, #8
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b03      	cmp	r3, #3
 800f748:	d110      	bne.n	800f76c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00b      	beq.n	800f76c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f75a:	69db      	ldr	r3, [r3, #28]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d005      	beq.n	800f76c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	460b      	mov	r3, r1
 800f780:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	32ae      	adds	r2, #174	@ 0xae
 800f78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f794:	2303      	movs	r3, #3
 800f796:	e01c      	b.n	800f7d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d115      	bne.n	800f7d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	32ae      	adds	r2, #174	@ 0xae
 800f7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00b      	beq.n	800f7d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	32ae      	adds	r2, #174	@ 0xae
 800f7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c6:	6a1b      	ldr	r3, [r3, #32]
 800f7c8:	78fa      	ldrb	r2, [r7, #3]
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b082      	sub	sp, #8
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	32ae      	adds	r2, #174	@ 0xae
 800f7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d101      	bne.n	800f7fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e01c      	b.n	800f836 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b03      	cmp	r3, #3
 800f806:	d115      	bne.n	800f834 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	32ae      	adds	r2, #174	@ 0xae
 800f812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00b      	beq.n	800f834 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	32ae      	adds	r2, #174	@ 0xae
 800f826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f82c:	78fa      	ldrb	r2, [r7, #3]
 800f82e:	4611      	mov	r1, r2
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}

0800f83e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f83e:	b480      	push	{r7}
 800f840:	b083      	sub	sp, #12
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00e      	beq.n	800f890 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	6852      	ldr	r2, [r2, #4]
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	4611      	mov	r1, r2
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	4798      	blx	r3
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d001      	beq.n	800f890 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f88c:	2303      	movs	r3, #3
 800f88e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f890:	7bfb      	ldrb	r3, [r7, #15]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	370c      	adds	r7, #12
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr

0800f8b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	370c      	adds	r7, #12
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr

0800f8ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b086      	sub	sp, #24
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	885b      	ldrh	r3, [r3, #2]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	7812      	ldrb	r2, [r2, #0]
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d91f      	bls.n	800f934 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f8fa:	e013      	b.n	800f924 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f8fc:	f107 030a 	add.w	r3, r7, #10
 800f900:	4619      	mov	r1, r3
 800f902:	6978      	ldr	r0, [r7, #20]
 800f904:	f000 f81b 	bl	800f93e <USBD_GetNextDesc>
 800f908:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	785b      	ldrb	r3, [r3, #1]
 800f90e:	2b05      	cmp	r3, #5
 800f910:	d108      	bne.n	800f924 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	789b      	ldrb	r3, [r3, #2]
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d008      	beq.n	800f932 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f920:	2300      	movs	r3, #0
 800f922:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	885b      	ldrh	r3, [r3, #2]
 800f928:	b29a      	uxth	r2, r3
 800f92a:	897b      	ldrh	r3, [r7, #10]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d8e5      	bhi.n	800f8fc <USBD_GetEpDesc+0x2e>
 800f930:	e000      	b.n	800f934 <USBD_GetEpDesc+0x66>
          break;
 800f932:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f934:	693b      	ldr	r3, [r7, #16]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f93e:	b480      	push	{r7}
 800f940:	b085      	sub	sp, #20
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	7812      	ldrb	r2, [r2, #0]
 800f954:	4413      	add	r3, r2
 800f956:	b29a      	uxth	r2, r3
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	461a      	mov	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4413      	add	r3, r2
 800f966:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f968:	68fb      	ldr	r3, [r7, #12]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f976:	b480      	push	{r7}
 800f978:	b087      	sub	sp, #28
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	3301      	adds	r3, #1
 800f98c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f994:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f998:	021b      	lsls	r3, r3, #8
 800f99a:	b21a      	sxth	r2, r3
 800f99c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b21b      	sxth	r3, r3
 800f9a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f9a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	371c      	adds	r7, #28
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9ca:	2b40      	cmp	r3, #64	@ 0x40
 800f9cc:	d005      	beq.n	800f9da <USBD_StdDevReq+0x26>
 800f9ce:	2b40      	cmp	r3, #64	@ 0x40
 800f9d0:	d857      	bhi.n	800fa82 <USBD_StdDevReq+0xce>
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00f      	beq.n	800f9f6 <USBD_StdDevReq+0x42>
 800f9d6:	2b20      	cmp	r3, #32
 800f9d8:	d153      	bne.n	800fa82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	32ae      	adds	r2, #174	@ 0xae
 800f9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	6839      	ldr	r1, [r7, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	4798      	blx	r3
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f4:	e04a      	b.n	800fa8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	785b      	ldrb	r3, [r3, #1]
 800f9fa:	2b09      	cmp	r3, #9
 800f9fc:	d83b      	bhi.n	800fa76 <USBD_StdDevReq+0xc2>
 800f9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800fa04 <USBD_StdDevReq+0x50>)
 800fa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa04:	0800fa59 	.word	0x0800fa59
 800fa08:	0800fa6d 	.word	0x0800fa6d
 800fa0c:	0800fa77 	.word	0x0800fa77
 800fa10:	0800fa63 	.word	0x0800fa63
 800fa14:	0800fa77 	.word	0x0800fa77
 800fa18:	0800fa37 	.word	0x0800fa37
 800fa1c:	0800fa2d 	.word	0x0800fa2d
 800fa20:	0800fa77 	.word	0x0800fa77
 800fa24:	0800fa4f 	.word	0x0800fa4f
 800fa28:	0800fa41 	.word	0x0800fa41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa2c:	6839      	ldr	r1, [r7, #0]
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 fa3c 	bl	800feac <USBD_GetDescriptor>
          break;
 800fa34:	e024      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fbcb 	bl	80101d4 <USBD_SetAddress>
          break;
 800fa3e:	e01f      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 fc0a 	bl	801025c <USBD_SetConfig>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	73fb      	strb	r3, [r7, #15]
          break;
 800fa4c:	e018      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 fcad 	bl	80103b0 <USBD_GetConfig>
          break;
 800fa56:	e013      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fcde 	bl	801041c <USBD_GetStatus>
          break;
 800fa60:	e00e      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fd0d 	bl	8010484 <USBD_SetFeature>
          break;
 800fa6a:	e009      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fa6c:	6839      	ldr	r1, [r7, #0]
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fd31 	bl	80104d6 <USBD_ClrFeature>
          break;
 800fa74:	e004      	b.n	800fa80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fd88 	bl	801058e <USBD_CtlError>
          break;
 800fa7e:	bf00      	nop
      }
      break;
 800fa80:	e004      	b.n	800fa8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fd82 	bl	801058e <USBD_CtlError>
      break;
 800fa8a:	bf00      	nop
  }

  return ret;
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop

0800fa98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800faae:	2b40      	cmp	r3, #64	@ 0x40
 800fab0:	d005      	beq.n	800fabe <USBD_StdItfReq+0x26>
 800fab2:	2b40      	cmp	r3, #64	@ 0x40
 800fab4:	d852      	bhi.n	800fb5c <USBD_StdItfReq+0xc4>
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <USBD_StdItfReq+0x26>
 800faba:	2b20      	cmp	r3, #32
 800fabc:	d14e      	bne.n	800fb5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	3b01      	subs	r3, #1
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d840      	bhi.n	800fb4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	889b      	ldrh	r3, [r3, #4]
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d836      	bhi.n	800fb44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	889b      	ldrh	r3, [r3, #4]
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fedb 	bl	800f89a <USBD_CoreFindIF>
 800fae4:	4603      	mov	r3, r0
 800fae6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
 800faea:	2bff      	cmp	r3, #255	@ 0xff
 800faec:	d01d      	beq.n	800fb2a <USBD_StdItfReq+0x92>
 800faee:	7bbb      	ldrb	r3, [r7, #14]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d11a      	bne.n	800fb2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800faf4:	7bba      	ldrb	r2, [r7, #14]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	32ae      	adds	r2, #174	@ 0xae
 800fafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d00f      	beq.n	800fb24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fb04:	7bba      	ldrb	r2, [r7, #14]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb0c:	7bba      	ldrb	r2, [r7, #14]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	32ae      	adds	r2, #174	@ 0xae
 800fb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	6839      	ldr	r1, [r7, #0]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	4798      	blx	r3
 800fb1e:	4603      	mov	r3, r0
 800fb20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb22:	e004      	b.n	800fb2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fb24:	2303      	movs	r3, #3
 800fb26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb28:	e001      	b.n	800fb2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	88db      	ldrh	r3, [r3, #6]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d110      	bne.n	800fb58 <USBD_StdItfReq+0xc0>
 800fb36:	7bfb      	ldrb	r3, [r7, #15]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10d      	bne.n	800fb58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fdfd 	bl	801073c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb42:	e009      	b.n	800fb58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fd21 	bl	801058e <USBD_CtlError>
          break;
 800fb4c:	e004      	b.n	800fb58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fb4e:	6839      	ldr	r1, [r7, #0]
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fd1c 	bl	801058e <USBD_CtlError>
          break;
 800fb56:	e000      	b.n	800fb5a <USBD_StdItfReq+0xc2>
          break;
 800fb58:	bf00      	nop
      }
      break;
 800fb5a:	e004      	b.n	800fb66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 fd15 	bl	801058e <USBD_CtlError>
      break;
 800fb64:	bf00      	nop
  }

  return ret;
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	889b      	ldrh	r3, [r3, #4]
 800fb82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb8c:	2b40      	cmp	r3, #64	@ 0x40
 800fb8e:	d007      	beq.n	800fba0 <USBD_StdEPReq+0x30>
 800fb90:	2b40      	cmp	r3, #64	@ 0x40
 800fb92:	f200 817f 	bhi.w	800fe94 <USBD_StdEPReq+0x324>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d02a      	beq.n	800fbf0 <USBD_StdEPReq+0x80>
 800fb9a:	2b20      	cmp	r3, #32
 800fb9c:	f040 817a 	bne.w	800fe94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fba0:	7bbb      	ldrb	r3, [r7, #14]
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7ff fe85 	bl	800f8b4 <USBD_CoreFindEP>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fbae:	7b7b      	ldrb	r3, [r7, #13]
 800fbb0:	2bff      	cmp	r3, #255	@ 0xff
 800fbb2:	f000 8174 	beq.w	800fe9e <USBD_StdEPReq+0x32e>
 800fbb6:	7b7b      	ldrb	r3, [r7, #13]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f040 8170 	bne.w	800fe9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fbbe:	7b7a      	ldrb	r2, [r7, #13]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fbc6:	7b7a      	ldrb	r2, [r7, #13]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	32ae      	adds	r2, #174	@ 0xae
 800fbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 8163 	beq.w	800fe9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fbd8:	7b7a      	ldrb	r2, [r7, #13]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	32ae      	adds	r2, #174	@ 0xae
 800fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	6839      	ldr	r1, [r7, #0]
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	4798      	blx	r3
 800fbea:	4603      	mov	r3, r0
 800fbec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fbee:	e156      	b.n	800fe9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	785b      	ldrb	r3, [r3, #1]
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	d008      	beq.n	800fc0a <USBD_StdEPReq+0x9a>
 800fbf8:	2b03      	cmp	r3, #3
 800fbfa:	f300 8145 	bgt.w	800fe88 <USBD_StdEPReq+0x318>
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 809b 	beq.w	800fd3a <USBD_StdEPReq+0x1ca>
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d03c      	beq.n	800fc82 <USBD_StdEPReq+0x112>
 800fc08:	e13e      	b.n	800fe88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d002      	beq.n	800fc1c <USBD_StdEPReq+0xac>
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	d016      	beq.n	800fc48 <USBD_StdEPReq+0xd8>
 800fc1a:	e02c      	b.n	800fc76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc1c:	7bbb      	ldrb	r3, [r7, #14]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00d      	beq.n	800fc3e <USBD_StdEPReq+0xce>
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
 800fc24:	2b80      	cmp	r3, #128	@ 0x80
 800fc26:	d00a      	beq.n	800fc3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc28:	7bbb      	ldrb	r3, [r7, #14]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f001 fa47 	bl	80110c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc32:	2180      	movs	r1, #128	@ 0x80
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f001 fa43 	bl	80110c0 <USBD_LL_StallEP>
 800fc3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc3c:	e020      	b.n	800fc80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 fca4 	bl	801058e <USBD_CtlError>
              break;
 800fc46:	e01b      	b.n	800fc80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	885b      	ldrh	r3, [r3, #2]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d10e      	bne.n	800fc6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00b      	beq.n	800fc6e <USBD_StdEPReq+0xfe>
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
 800fc58:	2b80      	cmp	r3, #128	@ 0x80
 800fc5a:	d008      	beq.n	800fc6e <USBD_StdEPReq+0xfe>
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	88db      	ldrh	r3, [r3, #6]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d104      	bne.n	800fc6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc64:	7bbb      	ldrb	r3, [r7, #14]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 fa29 	bl	80110c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fd64 	bl	801073c <USBD_CtlSendStatus>

              break;
 800fc74:	e004      	b.n	800fc80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fc76:	6839      	ldr	r1, [r7, #0]
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fc88 	bl	801058e <USBD_CtlError>
              break;
 800fc7e:	bf00      	nop
          }
          break;
 800fc80:	e107      	b.n	800fe92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d002      	beq.n	800fc94 <USBD_StdEPReq+0x124>
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d016      	beq.n	800fcc0 <USBD_StdEPReq+0x150>
 800fc92:	e04b      	b.n	800fd2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00d      	beq.n	800fcb6 <USBD_StdEPReq+0x146>
 800fc9a:	7bbb      	ldrb	r3, [r7, #14]
 800fc9c:	2b80      	cmp	r3, #128	@ 0x80
 800fc9e:	d00a      	beq.n	800fcb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fca0:	7bbb      	ldrb	r3, [r7, #14]
 800fca2:	4619      	mov	r1, r3
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f001 fa0b 	bl	80110c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcaa:	2180      	movs	r1, #128	@ 0x80
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f001 fa07 	bl	80110c0 <USBD_LL_StallEP>
 800fcb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fcb4:	e040      	b.n	800fd38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fcb6:	6839      	ldr	r1, [r7, #0]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 fc68 	bl	801058e <USBD_CtlError>
              break;
 800fcbe:	e03b      	b.n	800fd38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	885b      	ldrh	r3, [r3, #2]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d136      	bne.n	800fd36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d004      	beq.n	800fcdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcd2:	7bbb      	ldrb	r3, [r7, #14]
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f001 fa11 	bl	80110fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 fd2d 	bl	801073c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fce2:	7bbb      	ldrb	r3, [r7, #14]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff fde4 	bl	800f8b4 <USBD_CoreFindEP>
 800fcec:	4603      	mov	r3, r0
 800fcee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fcf0:	7b7b      	ldrb	r3, [r7, #13]
 800fcf2:	2bff      	cmp	r3, #255	@ 0xff
 800fcf4:	d01f      	beq.n	800fd36 <USBD_StdEPReq+0x1c6>
 800fcf6:	7b7b      	ldrb	r3, [r7, #13]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d11c      	bne.n	800fd36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fcfc:	7b7a      	ldrb	r2, [r7, #13]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fd04:	7b7a      	ldrb	r2, [r7, #13]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	32ae      	adds	r2, #174	@ 0xae
 800fd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d010      	beq.n	800fd36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fd14:	7b7a      	ldrb	r2, [r7, #13]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	32ae      	adds	r2, #174	@ 0xae
 800fd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	6839      	ldr	r1, [r7, #0]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	4798      	blx	r3
 800fd26:	4603      	mov	r3, r0
 800fd28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fd2a:	e004      	b.n	800fd36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fc2d 	bl	801058e <USBD_CtlError>
              break;
 800fd34:	e000      	b.n	800fd38 <USBD_StdEPReq+0x1c8>
              break;
 800fd36:	bf00      	nop
          }
          break;
 800fd38:	e0ab      	b.n	800fe92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d002      	beq.n	800fd4c <USBD_StdEPReq+0x1dc>
 800fd46:	2b03      	cmp	r3, #3
 800fd48:	d032      	beq.n	800fdb0 <USBD_StdEPReq+0x240>
 800fd4a:	e097      	b.n	800fe7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd4c:	7bbb      	ldrb	r3, [r7, #14]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d007      	beq.n	800fd62 <USBD_StdEPReq+0x1f2>
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	2b80      	cmp	r3, #128	@ 0x80
 800fd56:	d004      	beq.n	800fd62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 fc17 	bl	801058e <USBD_CtlError>
                break;
 800fd60:	e091      	b.n	800fe86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	da0b      	bge.n	800fd82 <USBD_StdEPReq+0x212>
 800fd6a:	7bbb      	ldrb	r3, [r7, #14]
 800fd6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd70:	4613      	mov	r3, r2
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	4413      	add	r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	3310      	adds	r3, #16
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	3304      	adds	r3, #4
 800fd80:	e00b      	b.n	800fd9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd82:	7bbb      	ldrb	r3, [r7, #14]
 800fd84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd88:	4613      	mov	r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	4413      	add	r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	4413      	add	r3, r2
 800fd98:	3304      	adds	r3, #4
 800fd9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	2202      	movs	r2, #2
 800fda6:	4619      	mov	r1, r3
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 fc6d 	bl	8010688 <USBD_CtlSendData>
              break;
 800fdae:	e06a      	b.n	800fe86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fdb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	da11      	bge.n	800fddc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fdb8:	7bbb      	ldrb	r3, [r7, #14]
 800fdba:	f003 020f 	and.w	r2, r3, #15
 800fdbe:	6879      	ldr	r1, [r7, #4]
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	4413      	add	r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	440b      	add	r3, r1
 800fdca:	3324      	adds	r3, #36	@ 0x24
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d117      	bne.n	800fe02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fdd2:	6839      	ldr	r1, [r7, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 fbda 	bl	801058e <USBD_CtlError>
                  break;
 800fdda:	e054      	b.n	800fe86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fddc:	7bbb      	ldrb	r3, [r7, #14]
 800fdde:	f003 020f 	and.w	r2, r3, #15
 800fde2:	6879      	ldr	r1, [r7, #4]
 800fde4:	4613      	mov	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	440b      	add	r3, r1
 800fdee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fdf2:	881b      	ldrh	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d104      	bne.n	800fe02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fdf8:	6839      	ldr	r1, [r7, #0]
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fbc7 	bl	801058e <USBD_CtlError>
                  break;
 800fe00:	e041      	b.n	800fe86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	da0b      	bge.n	800fe22 <USBD_StdEPReq+0x2b2>
 800fe0a:	7bbb      	ldrb	r3, [r7, #14]
 800fe0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe10:	4613      	mov	r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	3310      	adds	r3, #16
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	3304      	adds	r3, #4
 800fe20:	e00b      	b.n	800fe3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe22:	7bbb      	ldrb	r3, [r7, #14]
 800fe24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe28:	4613      	mov	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	4413      	add	r3, r2
 800fe38:	3304      	adds	r3, #4
 800fe3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe3c:	7bbb      	ldrb	r3, [r7, #14]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d002      	beq.n	800fe48 <USBD_StdEPReq+0x2d8>
 800fe42:	7bbb      	ldrb	r3, [r7, #14]
 800fe44:	2b80      	cmp	r3, #128	@ 0x80
 800fe46:	d103      	bne.n	800fe50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	e00e      	b.n	800fe6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe50:	7bbb      	ldrb	r3, [r7, #14]
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 f971 	bl	801113c <USBD_LL_IsStallEP>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d003      	beq.n	800fe68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2201      	movs	r2, #1
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	e002      	b.n	800fe6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2202      	movs	r2, #2
 800fe72:	4619      	mov	r1, r3
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fc07 	bl	8010688 <USBD_CtlSendData>
              break;
 800fe7a:	e004      	b.n	800fe86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fb85 	bl	801058e <USBD_CtlError>
              break;
 800fe84:	bf00      	nop
          }
          break;
 800fe86:	e004      	b.n	800fe92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fe88:	6839      	ldr	r1, [r7, #0]
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 fb7f 	bl	801058e <USBD_CtlError>
          break;
 800fe90:	bf00      	nop
      }
      break;
 800fe92:	e005      	b.n	800fea0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fe94:	6839      	ldr	r1, [r7, #0]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 fb79 	bl	801058e <USBD_CtlError>
      break;
 800fe9c:	e000      	b.n	800fea0 <USBD_StdEPReq+0x330>
      break;
 800fe9e:	bf00      	nop
  }

  return ret;
 800fea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
	...

0800feac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800feb6:	2300      	movs	r3, #0
 800feb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800feba:	2300      	movs	r3, #0
 800febc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800febe:	2300      	movs	r3, #0
 800fec0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	885b      	ldrh	r3, [r3, #2]
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	b29b      	uxth	r3, r3
 800feca:	3b01      	subs	r3, #1
 800fecc:	2b0e      	cmp	r3, #14
 800fece:	f200 8152 	bhi.w	8010176 <USBD_GetDescriptor+0x2ca>
 800fed2:	a201      	add	r2, pc, #4	@ (adr r2, 800fed8 <USBD_GetDescriptor+0x2c>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	0800ff49 	.word	0x0800ff49
 800fedc:	0800ff61 	.word	0x0800ff61
 800fee0:	0800ffa1 	.word	0x0800ffa1
 800fee4:	08010177 	.word	0x08010177
 800fee8:	08010177 	.word	0x08010177
 800feec:	08010117 	.word	0x08010117
 800fef0:	08010143 	.word	0x08010143
 800fef4:	08010177 	.word	0x08010177
 800fef8:	08010177 	.word	0x08010177
 800fefc:	08010177 	.word	0x08010177
 800ff00:	08010177 	.word	0x08010177
 800ff04:	08010177 	.word	0x08010177
 800ff08:	08010177 	.word	0x08010177
 800ff0c:	08010177 	.word	0x08010177
 800ff10:	0800ff15 	.word	0x0800ff15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff1a:	69db      	ldr	r3, [r3, #28]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00b      	beq.n	800ff38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	7c12      	ldrb	r2, [r2, #16]
 800ff2c:	f107 0108 	add.w	r1, r7, #8
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
 800ff34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff36:	e126      	b.n	8010186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff38:	6839      	ldr	r1, [r7, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 fb27 	bl	801058e <USBD_CtlError>
        err++;
 800ff40:	7afb      	ldrb	r3, [r7, #11]
 800ff42:	3301      	adds	r3, #1
 800ff44:	72fb      	strb	r3, [r7, #11]
      break;
 800ff46:	e11e      	b.n	8010186 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	7c12      	ldrb	r2, [r2, #16]
 800ff54:	f107 0108 	add.w	r1, r7, #8
 800ff58:	4610      	mov	r0, r2
 800ff5a:	4798      	blx	r3
 800ff5c:	60f8      	str	r0, [r7, #12]
      break;
 800ff5e:	e112      	b.n	8010186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	7c1b      	ldrb	r3, [r3, #16]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10d      	bne.n	800ff84 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff70:	f107 0208 	add.w	r2, r7, #8
 800ff74:	4610      	mov	r0, r2
 800ff76:	4798      	blx	r3
 800ff78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	2202      	movs	r2, #2
 800ff80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ff82:	e100      	b.n	8010186 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff8c:	f107 0208 	add.w	r2, r7, #8
 800ff90:	4610      	mov	r0, r2
 800ff92:	4798      	blx	r3
 800ff94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	701a      	strb	r2, [r3, #0]
      break;
 800ff9e:	e0f2      	b.n	8010186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	885b      	ldrh	r3, [r3, #2]
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b05      	cmp	r3, #5
 800ffa8:	f200 80ac 	bhi.w	8010104 <USBD_GetDescriptor+0x258>
 800ffac:	a201      	add	r2, pc, #4	@ (adr r2, 800ffb4 <USBD_GetDescriptor+0x108>)
 800ffae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb2:	bf00      	nop
 800ffb4:	0800ffcd 	.word	0x0800ffcd
 800ffb8:	08010001 	.word	0x08010001
 800ffbc:	08010035 	.word	0x08010035
 800ffc0:	08010069 	.word	0x08010069
 800ffc4:	0801009d 	.word	0x0801009d
 800ffc8:	080100d1 	.word	0x080100d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00b      	beq.n	800fff0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	7c12      	ldrb	r2, [r2, #16]
 800ffe4:	f107 0108 	add.w	r1, r7, #8
 800ffe8:	4610      	mov	r0, r2
 800ffea:	4798      	blx	r3
 800ffec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffee:	e091      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fff0:	6839      	ldr	r1, [r7, #0]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 facb 	bl	801058e <USBD_CtlError>
            err++;
 800fff8:	7afb      	ldrb	r3, [r7, #11]
 800fffa:	3301      	adds	r3, #1
 800fffc:	72fb      	strb	r3, [r7, #11]
          break;
 800fffe:	e089      	b.n	8010114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00b      	beq.n	8010024 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	7c12      	ldrb	r2, [r2, #16]
 8010018:	f107 0108 	add.w	r1, r7, #8
 801001c:	4610      	mov	r0, r2
 801001e:	4798      	blx	r3
 8010020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010022:	e077      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 fab1 	bl	801058e <USBD_CtlError>
            err++;
 801002c:	7afb      	ldrb	r3, [r7, #11]
 801002e:	3301      	adds	r3, #1
 8010030:	72fb      	strb	r3, [r7, #11]
          break;
 8010032:	e06f      	b.n	8010114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00b      	beq.n	8010058 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	7c12      	ldrb	r2, [r2, #16]
 801004c:	f107 0108 	add.w	r1, r7, #8
 8010050:	4610      	mov	r0, r2
 8010052:	4798      	blx	r3
 8010054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010056:	e05d      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fa97 	bl	801058e <USBD_CtlError>
            err++;
 8010060:	7afb      	ldrb	r3, [r7, #11]
 8010062:	3301      	adds	r3, #1
 8010064:	72fb      	strb	r3, [r7, #11]
          break;
 8010066:	e055      	b.n	8010114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00b      	beq.n	801008c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801007a:	691b      	ldr	r3, [r3, #16]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	7c12      	ldrb	r2, [r2, #16]
 8010080:	f107 0108 	add.w	r1, r7, #8
 8010084:	4610      	mov	r0, r2
 8010086:	4798      	blx	r3
 8010088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801008a:	e043      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 fa7d 	bl	801058e <USBD_CtlError>
            err++;
 8010094:	7afb      	ldrb	r3, [r7, #11]
 8010096:	3301      	adds	r3, #1
 8010098:	72fb      	strb	r3, [r7, #11]
          break;
 801009a:	e03b      	b.n	8010114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100a2:	695b      	ldr	r3, [r3, #20]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00b      	beq.n	80100c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100ae:	695b      	ldr	r3, [r3, #20]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	7c12      	ldrb	r2, [r2, #16]
 80100b4:	f107 0108 	add.w	r1, r7, #8
 80100b8:	4610      	mov	r0, r2
 80100ba:	4798      	blx	r3
 80100bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100be:	e029      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 fa63 	bl	801058e <USBD_CtlError>
            err++;
 80100c8:	7afb      	ldrb	r3, [r7, #11]
 80100ca:	3301      	adds	r3, #1
 80100cc:	72fb      	strb	r3, [r7, #11]
          break;
 80100ce:	e021      	b.n	8010114 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00b      	beq.n	80100f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100e2:	699b      	ldr	r3, [r3, #24]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	7c12      	ldrb	r2, [r2, #16]
 80100e8:	f107 0108 	add.w	r1, r7, #8
 80100ec:	4610      	mov	r0, r2
 80100ee:	4798      	blx	r3
 80100f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100f2:	e00f      	b.n	8010114 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fa49 	bl	801058e <USBD_CtlError>
            err++;
 80100fc:	7afb      	ldrb	r3, [r7, #11]
 80100fe:	3301      	adds	r3, #1
 8010100:	72fb      	strb	r3, [r7, #11]
          break;
 8010102:	e007      	b.n	8010114 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010104:	6839      	ldr	r1, [r7, #0]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 fa41 	bl	801058e <USBD_CtlError>
          err++;
 801010c:	7afb      	ldrb	r3, [r7, #11]
 801010e:	3301      	adds	r3, #1
 8010110:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010112:	bf00      	nop
      }
      break;
 8010114:	e037      	b.n	8010186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	7c1b      	ldrb	r3, [r3, #16]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d109      	bne.n	8010132 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010126:	f107 0208 	add.w	r2, r7, #8
 801012a:	4610      	mov	r0, r2
 801012c:	4798      	blx	r3
 801012e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010130:	e029      	b.n	8010186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 fa2a 	bl	801058e <USBD_CtlError>
        err++;
 801013a:	7afb      	ldrb	r3, [r7, #11]
 801013c:	3301      	adds	r3, #1
 801013e:	72fb      	strb	r3, [r7, #11]
      break;
 8010140:	e021      	b.n	8010186 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	7c1b      	ldrb	r3, [r3, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10d      	bne.n	8010166 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010152:	f107 0208 	add.w	r2, r7, #8
 8010156:	4610      	mov	r0, r2
 8010158:	4798      	blx	r3
 801015a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	3301      	adds	r3, #1
 8010160:	2207      	movs	r2, #7
 8010162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010164:	e00f      	b.n	8010186 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f000 fa10 	bl	801058e <USBD_CtlError>
        err++;
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	3301      	adds	r3, #1
 8010172:	72fb      	strb	r3, [r7, #11]
      break;
 8010174:	e007      	b.n	8010186 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fa08 	bl	801058e <USBD_CtlError>
      err++;
 801017e:	7afb      	ldrb	r3, [r7, #11]
 8010180:	3301      	adds	r3, #1
 8010182:	72fb      	strb	r3, [r7, #11]
      break;
 8010184:	bf00      	nop
  }

  if (err != 0U)
 8010186:	7afb      	ldrb	r3, [r7, #11]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d11e      	bne.n	80101ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	88db      	ldrh	r3, [r3, #6]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d016      	beq.n	80101c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010194:	893b      	ldrh	r3, [r7, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00e      	beq.n	80101b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	88da      	ldrh	r2, [r3, #6]
 801019e:	893b      	ldrh	r3, [r7, #8]
 80101a0:	4293      	cmp	r3, r2
 80101a2:	bf28      	it	cs
 80101a4:	4613      	movcs	r3, r2
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80101aa:	893b      	ldrh	r3, [r7, #8]
 80101ac:	461a      	mov	r2, r3
 80101ae:	68f9      	ldr	r1, [r7, #12]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fa69 	bl	8010688 <USBD_CtlSendData>
 80101b6:	e009      	b.n	80101cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 f9e7 	bl	801058e <USBD_CtlError>
 80101c0:	e004      	b.n	80101cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 faba 	bl	801073c <USBD_CtlSendStatus>
 80101c8:	e000      	b.n	80101cc <USBD_GetDescriptor+0x320>
    return;
 80101ca:	bf00      	nop
  }
}
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop

080101d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	889b      	ldrh	r3, [r3, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d131      	bne.n	801024a <USBD_SetAddress+0x76>
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	88db      	ldrh	r3, [r3, #6]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d12d      	bne.n	801024a <USBD_SetAddress+0x76>
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	885b      	ldrh	r3, [r3, #2]
 80101f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80101f4:	d829      	bhi.n	801024a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	885b      	ldrh	r3, [r3, #2]
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010208:	b2db      	uxtb	r3, r3
 801020a:	2b03      	cmp	r3, #3
 801020c:	d104      	bne.n	8010218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f9bc 	bl	801058e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010216:	e01d      	b.n	8010254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	7bfa      	ldrb	r2, [r7, #15]
 801021c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010220:	7bfb      	ldrb	r3, [r7, #15]
 8010222:	4619      	mov	r1, r3
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 ffb5 	bl	8011194 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 fa86 	bl	801073c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010230:	7bfb      	ldrb	r3, [r7, #15]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d004      	beq.n	8010240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2202      	movs	r2, #2
 801023a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801023e:	e009      	b.n	8010254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010248:	e004      	b.n	8010254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f99e 	bl	801058e <USBD_CtlError>
  }
}
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	885b      	ldrh	r3, [r3, #2]
 801026e:	b2da      	uxtb	r2, r3
 8010270:	4b4e      	ldr	r3, [pc, #312]	@ (80103ac <USBD_SetConfig+0x150>)
 8010272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010274:	4b4d      	ldr	r3, [pc, #308]	@ (80103ac <USBD_SetConfig+0x150>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d905      	bls.n	8010288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801027c:	6839      	ldr	r1, [r7, #0]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 f985 	bl	801058e <USBD_CtlError>
    return USBD_FAIL;
 8010284:	2303      	movs	r3, #3
 8010286:	e08c      	b.n	80103a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b02      	cmp	r3, #2
 8010292:	d002      	beq.n	801029a <USBD_SetConfig+0x3e>
 8010294:	2b03      	cmp	r3, #3
 8010296:	d029      	beq.n	80102ec <USBD_SetConfig+0x90>
 8010298:	e075      	b.n	8010386 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801029a:	4b44      	ldr	r3, [pc, #272]	@ (80103ac <USBD_SetConfig+0x150>)
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d020      	beq.n	80102e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80102a2:	4b42      	ldr	r3, [pc, #264]	@ (80103ac <USBD_SetConfig+0x150>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102ac:	4b3f      	ldr	r3, [pc, #252]	@ (80103ac <USBD_SetConfig+0x150>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	4619      	mov	r1, r3
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7fe ffb9 	bl	800f22a <USBD_SetClassConfig>
 80102b8:	4603      	mov	r3, r0
 80102ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80102bc:	7bfb      	ldrb	r3, [r7, #15]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d008      	beq.n	80102d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80102c2:	6839      	ldr	r1, [r7, #0]
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f962 	bl	801058e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2202      	movs	r2, #2
 80102ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80102d2:	e065      	b.n	80103a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 fa31 	bl	801073c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2203      	movs	r2, #3
 80102de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80102e2:	e05d      	b.n	80103a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fa29 	bl	801073c <USBD_CtlSendStatus>
      break;
 80102ea:	e059      	b.n	80103a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80102ec:	4b2f      	ldr	r3, [pc, #188]	@ (80103ac <USBD_SetConfig+0x150>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d112      	bne.n	801031a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2202      	movs	r2, #2
 80102f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80102fc:	4b2b      	ldr	r3, [pc, #172]	@ (80103ac <USBD_SetConfig+0x150>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	461a      	mov	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010306:	4b29      	ldr	r3, [pc, #164]	@ (80103ac <USBD_SetConfig+0x150>)
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7fe ffa8 	bl	800f262 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fa12 	bl	801073c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010318:	e042      	b.n	80103a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801031a:	4b24      	ldr	r3, [pc, #144]	@ (80103ac <USBD_SetConfig+0x150>)
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	429a      	cmp	r2, r3
 8010326:	d02a      	beq.n	801037e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	b2db      	uxtb	r3, r3
 801032e:	4619      	mov	r1, r3
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7fe ff96 	bl	800f262 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010336:	4b1d      	ldr	r3, [pc, #116]	@ (80103ac <USBD_SetConfig+0x150>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	461a      	mov	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010340:	4b1a      	ldr	r3, [pc, #104]	@ (80103ac <USBD_SetConfig+0x150>)
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7fe ff6f 	bl	800f22a <USBD_SetClassConfig>
 801034c:	4603      	mov	r3, r0
 801034e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010350:	7bfb      	ldrb	r3, [r7, #15]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00f      	beq.n	8010376 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010356:	6839      	ldr	r1, [r7, #0]
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f000 f918 	bl	801058e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	b2db      	uxtb	r3, r3
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7fe ff7b 	bl	800f262 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2202      	movs	r2, #2
 8010370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010374:	e014      	b.n	80103a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f9e0 	bl	801073c <USBD_CtlSendStatus>
      break;
 801037c:	e010      	b.n	80103a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 f9dc 	bl	801073c <USBD_CtlSendStatus>
      break;
 8010384:	e00c      	b.n	80103a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010386:	6839      	ldr	r1, [r7, #0]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f900 	bl	801058e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801038e:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <USBD_SetConfig+0x150>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	4619      	mov	r1, r3
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7fe ff64 	bl	800f262 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801039a:	2303      	movs	r3, #3
 801039c:	73fb      	strb	r3, [r7, #15]
      break;
 801039e:	bf00      	nop
  }

  return ret;
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	240003e4 	.word	0x240003e4

080103b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	88db      	ldrh	r3, [r3, #6]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d004      	beq.n	80103cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80103c2:	6839      	ldr	r1, [r7, #0]
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f000 f8e2 	bl	801058e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80103ca:	e023      	b.n	8010414 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	dc02      	bgt.n	80103de <USBD_GetConfig+0x2e>
 80103d8:	2b00      	cmp	r3, #0
 80103da:	dc03      	bgt.n	80103e4 <USBD_GetConfig+0x34>
 80103dc:	e015      	b.n	801040a <USBD_GetConfig+0x5a>
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d00b      	beq.n	80103fa <USBD_GetConfig+0x4a>
 80103e2:	e012      	b.n	801040a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	3308      	adds	r3, #8
 80103ee:	2201      	movs	r2, #1
 80103f0:	4619      	mov	r1, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f948 	bl	8010688 <USBD_CtlSendData>
        break;
 80103f8:	e00c      	b.n	8010414 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3304      	adds	r3, #4
 80103fe:	2201      	movs	r2, #1
 8010400:	4619      	mov	r1, r3
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f940 	bl	8010688 <USBD_CtlSendData>
        break;
 8010408:	e004      	b.n	8010414 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f8be 	bl	801058e <USBD_CtlError>
        break;
 8010412:	bf00      	nop
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801042c:	b2db      	uxtb	r3, r3
 801042e:	3b01      	subs	r3, #1
 8010430:	2b02      	cmp	r3, #2
 8010432:	d81e      	bhi.n	8010472 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	88db      	ldrh	r3, [r3, #6]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d004      	beq.n	8010446 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801043c:	6839      	ldr	r1, [r7, #0]
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f8a5 	bl	801058e <USBD_CtlError>
        break;
 8010444:	e01a      	b.n	801047c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010452:	2b00      	cmp	r3, #0
 8010454:	d005      	beq.n	8010462 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	f043 0202 	orr.w	r2, r3, #2
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	330c      	adds	r3, #12
 8010466:	2202      	movs	r2, #2
 8010468:	4619      	mov	r1, r3
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f000 f90c 	bl	8010688 <USBD_CtlSendData>
      break;
 8010470:	e004      	b.n	801047c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010472:	6839      	ldr	r1, [r7, #0]
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f88a 	bl	801058e <USBD_CtlError>
      break;
 801047a:	bf00      	nop
  }
}
 801047c:	bf00      	nop
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	885b      	ldrh	r3, [r3, #2]
 8010492:	2b01      	cmp	r3, #1
 8010494:	d107      	bne.n	80104a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2201      	movs	r2, #1
 801049a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f94c 	bl	801073c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80104a4:	e013      	b.n	80104ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	885b      	ldrh	r3, [r3, #2]
 80104aa:	2b02      	cmp	r3, #2
 80104ac:	d10b      	bne.n	80104c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	889b      	ldrh	r3, [r3, #4]
 80104b2:	0a1b      	lsrs	r3, r3, #8
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f93c 	bl	801073c <USBD_CtlSendStatus>
}
 80104c4:	e003      	b.n	80104ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 f860 	bl	801058e <USBD_CtlError>
}
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b082      	sub	sp, #8
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	3b01      	subs	r3, #1
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d80b      	bhi.n	8010506 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	885b      	ldrh	r3, [r3, #2]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d10c      	bne.n	8010510 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 f91c 	bl	801073c <USBD_CtlSendStatus>
      }
      break;
 8010504:	e004      	b.n	8010510 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 f840 	bl	801058e <USBD_CtlError>
      break;
 801050e:	e000      	b.n	8010512 <USBD_ClrFeature+0x3c>
      break;
 8010510:	bf00      	nop
  }
}
 8010512:	bf00      	nop
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b084      	sub	sp, #16
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	781a      	ldrb	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3301      	adds	r3, #1
 8010534:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	781a      	ldrb	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	3301      	adds	r3, #1
 8010542:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f7ff fa16 	bl	800f976 <SWAPBYTE>
 801054a:	4603      	mov	r3, r0
 801054c:	461a      	mov	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3301      	adds	r3, #1
 8010556:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	3301      	adds	r3, #1
 801055c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801055e:	68f8      	ldr	r0, [r7, #12]
 8010560:	f7ff fa09 	bl	800f976 <SWAPBYTE>
 8010564:	4603      	mov	r3, r0
 8010566:	461a      	mov	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	3301      	adds	r3, #1
 8010570:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	3301      	adds	r3, #1
 8010576:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff f9fc 	bl	800f976 <SWAPBYTE>
 801057e:	4603      	mov	r3, r0
 8010580:	461a      	mov	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	80da      	strh	r2, [r3, #6]
}
 8010586:	bf00      	nop
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010598:	2180      	movs	r1, #128	@ 0x80
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 fd90 	bl	80110c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80105a0:	2100      	movs	r1, #0
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fd8c 	bl	80110c0 <USBD_LL_StallEP>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80105bc:	2300      	movs	r3, #0
 80105be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d042      	beq.n	801064c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80105ca:	6938      	ldr	r0, [r7, #16]
 80105cc:	f000 f842 	bl	8010654 <USBD_GetLen>
 80105d0:	4603      	mov	r3, r0
 80105d2:	3301      	adds	r3, #1
 80105d4:	005b      	lsls	r3, r3, #1
 80105d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80105da:	d808      	bhi.n	80105ee <USBD_GetString+0x3e>
 80105dc:	6938      	ldr	r0, [r7, #16]
 80105de:	f000 f839 	bl	8010654 <USBD_GetLen>
 80105e2:	4603      	mov	r3, r0
 80105e4:	3301      	adds	r3, #1
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	005b      	lsls	r3, r3, #1
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	e001      	b.n	80105f2 <USBD_GetString+0x42>
 80105ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80105f6:	7dfb      	ldrb	r3, [r7, #23]
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	4413      	add	r3, r2
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	7812      	ldrb	r2, [r2, #0]
 8010600:	701a      	strb	r2, [r3, #0]
  idx++;
 8010602:	7dfb      	ldrb	r3, [r7, #23]
 8010604:	3301      	adds	r3, #1
 8010606:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010608:	7dfb      	ldrb	r3, [r7, #23]
 801060a:	68ba      	ldr	r2, [r7, #8]
 801060c:	4413      	add	r3, r2
 801060e:	2203      	movs	r2, #3
 8010610:	701a      	strb	r2, [r3, #0]
  idx++;
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	3301      	adds	r3, #1
 8010616:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010618:	e013      	b.n	8010642 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801061a:	7dfb      	ldrb	r3, [r7, #23]
 801061c:	68ba      	ldr	r2, [r7, #8]
 801061e:	4413      	add	r3, r2
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	7812      	ldrb	r2, [r2, #0]
 8010624:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	3301      	adds	r3, #1
 801062a:	613b      	str	r3, [r7, #16]
    idx++;
 801062c:	7dfb      	ldrb	r3, [r7, #23]
 801062e:	3301      	adds	r3, #1
 8010630:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010632:	7dfb      	ldrb	r3, [r7, #23]
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	4413      	add	r3, r2
 8010638:	2200      	movs	r2, #0
 801063a:	701a      	strb	r2, [r3, #0]
    idx++;
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	3301      	adds	r3, #1
 8010640:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1e7      	bne.n	801061a <USBD_GetString+0x6a>
 801064a:	e000      	b.n	801064e <USBD_GetString+0x9e>
    return;
 801064c:	bf00      	nop
  }
}
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801065c:	2300      	movs	r3, #0
 801065e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010664:	e005      	b.n	8010672 <USBD_GetLen+0x1e>
  {
    len++;
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	3301      	adds	r3, #1
 801066a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	3301      	adds	r3, #1
 8010670:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1f5      	bne.n	8010666 <USBD_GetLen+0x12>
  }

  return len;
 801067a:	7bfb      	ldrb	r3, [r7, #15]
}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2202      	movs	r2, #2
 8010698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	2100      	movs	r1, #0
 80106ae:	68f8      	ldr	r0, [r7, #12]
 80106b0:	f000 fd8f 	bl	80111d2 <USBD_LL_Transmit>

  return USBD_OK;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80106be:	b580      	push	{r7, lr}
 80106c0:	b084      	sub	sp, #16
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	60f8      	str	r0, [r7, #12]
 80106c6:	60b9      	str	r1, [r7, #8]
 80106c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	2100      	movs	r1, #0
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 fd7e 	bl	80111d2 <USBD_LL_Transmit>

  return USBD_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2203      	movs	r2, #3
 80106f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	2100      	movs	r1, #0
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f000 fd82 	bl	8011214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b084      	sub	sp, #16
 801071e:	af00      	add	r7, sp, #0
 8010720:	60f8      	str	r0, [r7, #12]
 8010722:	60b9      	str	r1, [r7, #8]
 8010724:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	2100      	movs	r1, #0
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 fd71 	bl	8011214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010732:	2300      	movs	r3, #0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2204      	movs	r2, #4
 8010748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801074c:	2300      	movs	r3, #0
 801074e:	2200      	movs	r2, #0
 8010750:	2100      	movs	r1, #0
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 fd3d 	bl	80111d2 <USBD_LL_Transmit>

  return USBD_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2205      	movs	r2, #5
 801076e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010772:	2300      	movs	r3, #0
 8010774:	2200      	movs	r2, #0
 8010776:	2100      	movs	r1, #0
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 fd4b 	bl	8011214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801078c:	2200      	movs	r2, #0
 801078e:	4913      	ldr	r1, [pc, #76]	@ (80107dc <MX_USB_DEVICE_Init+0x54>)
 8010790:	4813      	ldr	r0, [pc, #76]	@ (80107e0 <MX_USB_DEVICE_Init+0x58>)
 8010792:	f7fe fccd 	bl	800f130 <USBD_Init>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d001      	beq.n	80107a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801079c:	f7f0 fc66 	bl	800106c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80107a0:	4910      	ldr	r1, [pc, #64]	@ (80107e4 <MX_USB_DEVICE_Init+0x5c>)
 80107a2:	480f      	ldr	r0, [pc, #60]	@ (80107e0 <MX_USB_DEVICE_Init+0x58>)
 80107a4:	f7fe fcf4 	bl	800f190 <USBD_RegisterClass>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80107ae:	f7f0 fc5d 	bl	800106c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80107b2:	490d      	ldr	r1, [pc, #52]	@ (80107e8 <MX_USB_DEVICE_Init+0x60>)
 80107b4:	480a      	ldr	r0, [pc, #40]	@ (80107e0 <MX_USB_DEVICE_Init+0x58>)
 80107b6:	f7fe fbeb 	bl	800ef90 <USBD_CDC_RegisterInterface>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80107c0:	f7f0 fc54 	bl	800106c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80107c4:	4806      	ldr	r0, [pc, #24]	@ (80107e0 <MX_USB_DEVICE_Init+0x58>)
 80107c6:	f7fe fd19 	bl	800f1fc <USBD_Start>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80107d0:	f7f0 fc4c 	bl	800106c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80107d4:	f7f7 fa62 	bl	8007c9c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80107d8:	bf00      	nop
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	240000b8 	.word	0x240000b8
 80107e0:	240003e8 	.word	0x240003e8
 80107e4:	2400001c 	.word	0x2400001c
 80107e8:	240000a4 	.word	0x240000a4

080107ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80107f0:	2200      	movs	r2, #0
 80107f2:	4905      	ldr	r1, [pc, #20]	@ (8010808 <CDC_Init_FS+0x1c>)
 80107f4:	4805      	ldr	r0, [pc, #20]	@ (801080c <CDC_Init_FS+0x20>)
 80107f6:	f7fe fbe5 	bl	800efc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80107fa:	4905      	ldr	r1, [pc, #20]	@ (8010810 <CDC_Init_FS+0x24>)
 80107fc:	4803      	ldr	r0, [pc, #12]	@ (801080c <CDC_Init_FS+0x20>)
 80107fe:	f7fe fc03 	bl	800f008 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010802:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010804:	4618      	mov	r0, r3
 8010806:	bd80      	pop	{r7, pc}
 8010808:	24000ec4 	.word	0x24000ec4
 801080c:	240003e8 	.word	0x240003e8
 8010810:	240006c4 	.word	0x240006c4

08010814 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010814:	b480      	push	{r7}
 8010816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010818:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801081a:	4618      	mov	r0, r3
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	4603      	mov	r3, r0
 801082c:	6039      	str	r1, [r7, #0]
 801082e:	71fb      	strb	r3, [r7, #7]
 8010830:	4613      	mov	r3, r2
 8010832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	2b23      	cmp	r3, #35	@ 0x23
 8010838:	f200 8098 	bhi.w	801096c <CDC_Control_FS+0x148>
 801083c:	a201      	add	r2, pc, #4	@ (adr r2, 8010844 <CDC_Control_FS+0x20>)
 801083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010842:	bf00      	nop
 8010844:	0801096d 	.word	0x0801096d
 8010848:	0801096d 	.word	0x0801096d
 801084c:	0801096d 	.word	0x0801096d
 8010850:	0801096d 	.word	0x0801096d
 8010854:	0801096d 	.word	0x0801096d
 8010858:	0801096d 	.word	0x0801096d
 801085c:	0801096d 	.word	0x0801096d
 8010860:	0801096d 	.word	0x0801096d
 8010864:	0801096d 	.word	0x0801096d
 8010868:	0801096d 	.word	0x0801096d
 801086c:	0801096d 	.word	0x0801096d
 8010870:	0801096d 	.word	0x0801096d
 8010874:	0801096d 	.word	0x0801096d
 8010878:	0801096d 	.word	0x0801096d
 801087c:	0801096d 	.word	0x0801096d
 8010880:	0801096d 	.word	0x0801096d
 8010884:	0801096d 	.word	0x0801096d
 8010888:	0801096d 	.word	0x0801096d
 801088c:	0801096d 	.word	0x0801096d
 8010890:	0801096d 	.word	0x0801096d
 8010894:	0801096d 	.word	0x0801096d
 8010898:	0801096d 	.word	0x0801096d
 801089c:	0801096d 	.word	0x0801096d
 80108a0:	0801096d 	.word	0x0801096d
 80108a4:	0801096d 	.word	0x0801096d
 80108a8:	0801096d 	.word	0x0801096d
 80108ac:	0801096d 	.word	0x0801096d
 80108b0:	0801096d 	.word	0x0801096d
 80108b4:	0801096d 	.word	0x0801096d
 80108b8:	0801096d 	.word	0x0801096d
 80108bc:	0801096d 	.word	0x0801096d
 80108c0:	0801096d 	.word	0x0801096d
 80108c4:	080108d5 	.word	0x080108d5
 80108c8:	08010919 	.word	0x08010919
 80108cc:	0801096d 	.word	0x0801096d
 80108d0:	0801096d 	.word	0x0801096d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	461a      	mov	r2, r3
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	3301      	adds	r3, #1
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	021b      	lsls	r3, r3, #8
 80108e2:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	3302      	adds	r3, #2
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80108ec:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	3303      	adds	r3, #3
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	061b      	lsls	r3, r3, #24
 80108f6:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80108f8:	461a      	mov	r2, r3
 80108fa:	4b20      	ldr	r3, [pc, #128]	@ (801097c <CDC_Control_FS+0x158>)
 80108fc:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	791a      	ldrb	r2, [r3, #4]
 8010902:	4b1e      	ldr	r3, [pc, #120]	@ (801097c <CDC_Control_FS+0x158>)
 8010904:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	795a      	ldrb	r2, [r3, #5]
 801090a:	4b1c      	ldr	r3, [pc, #112]	@ (801097c <CDC_Control_FS+0x158>)
 801090c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	799a      	ldrb	r2, [r3, #6]
 8010912:	4b1a      	ldr	r3, [pc, #104]	@ (801097c <CDC_Control_FS+0x158>)
 8010914:	719a      	strb	r2, [r3, #6]

    break;
 8010916:	e02a      	b.n	801096e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8010918:	4b18      	ldr	r3, [pc, #96]	@ (801097c <CDC_Control_FS+0x158>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	b2da      	uxtb	r2, r3
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8010922:	4b16      	ldr	r3, [pc, #88]	@ (801097c <CDC_Control_FS+0x158>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	0a1a      	lsrs	r2, r3, #8
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	3301      	adds	r3, #1
 801092c:	b2d2      	uxtb	r2, r2
 801092e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8010930:	4b12      	ldr	r3, [pc, #72]	@ (801097c <CDC_Control_FS+0x158>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	0c1a      	lsrs	r2, r3, #16
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	3302      	adds	r3, #2
 801093a:	b2d2      	uxtb	r2, r2
 801093c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 801093e:	4b0f      	ldr	r3, [pc, #60]	@ (801097c <CDC_Control_FS+0x158>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	0e1a      	lsrs	r2, r3, #24
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	3303      	adds	r3, #3
 8010948:	b2d2      	uxtb	r2, r2
 801094a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	3304      	adds	r3, #4
 8010950:	4a0a      	ldr	r2, [pc, #40]	@ (801097c <CDC_Control_FS+0x158>)
 8010952:	7912      	ldrb	r2, [r2, #4]
 8010954:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	3305      	adds	r3, #5
 801095a:	4a08      	ldr	r2, [pc, #32]	@ (801097c <CDC_Control_FS+0x158>)
 801095c:	7952      	ldrb	r2, [r2, #5]
 801095e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	3306      	adds	r3, #6
 8010964:	4a05      	ldr	r2, [pc, #20]	@ (801097c <CDC_Control_FS+0x158>)
 8010966:	7992      	ldrb	r2, [r2, #6]
 8010968:	701a      	strb	r2, [r3, #0]

    break;
 801096a:	e000      	b.n	801096e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801096c:	bf00      	nop
  }

  return (USBD_OK);
 801096e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010970:	4618      	mov	r0, r3
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	2400009c 	.word	0x2400009c

08010980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801098a:	6879      	ldr	r1, [r7, #4]
 801098c:	480d      	ldr	r0, [pc, #52]	@ (80109c4 <CDC_Receive_FS+0x44>)
 801098e:	f7fe fb3b 	bl	800f008 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010992:	480c      	ldr	r0, [pc, #48]	@ (80109c4 <CDC_Receive_FS+0x44>)
 8010994:	f7fe fb96 	bl	800f0c4 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d00d      	beq.n	80109ba <CDC_Receive_FS+0x3a>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00a      	beq.n	80109ba <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 80109aa:	89fb      	ldrh	r3, [r7, #14]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 80109b0:	89fb      	ldrh	r3, [r7, #14]
 80109b2:	4619      	mov	r1, r3
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f001 f9bf 	bl	8011d38 <USB_Receive>
	  }
  }
  return (USBD_OK);
 80109ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3710      	adds	r7, #16
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	240003e8 	.word	0x240003e8

080109c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80109d4:	2300      	movs	r3, #0
 80109d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80109d8:	4b0d      	ldr	r3, [pc, #52]	@ (8010a10 <CDC_Transmit_FS+0x48>)
 80109da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80109de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80109ea:	2301      	movs	r3, #1
 80109ec:	e00b      	b.n	8010a06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80109ee:	887b      	ldrh	r3, [r7, #2]
 80109f0:	461a      	mov	r2, r3
 80109f2:	6879      	ldr	r1, [r7, #4]
 80109f4:	4806      	ldr	r0, [pc, #24]	@ (8010a10 <CDC_Transmit_FS+0x48>)
 80109f6:	f7fe fae5 	bl	800efc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80109fa:	4805      	ldr	r0, [pc, #20]	@ (8010a10 <CDC_Transmit_FS+0x48>)
 80109fc:	f7fe fb22 	bl	800f044 <USBD_CDC_TransmitPacket>
 8010a00:	4603      	mov	r3, r0
 8010a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	240003e8 	.word	0x240003e8

08010a14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b087      	sub	sp, #28
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a22:	2300      	movs	r3, #0
 8010a24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	371c      	adds	r7, #28
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b082      	sub	sp, #8
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
 8010a3e:	460b      	mov	r3, r1
 8010a40:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 8010a42:	887b      	ldrh	r3, [r7, #2]
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7ff ffbe 	bl	80109c8 <CDC_Transmit_FS>
 8010a4c:	4603      	mov	r3, r0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3708      	adds	r7, #8
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
	...

08010a58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2212      	movs	r2, #18
 8010a68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a6a:	4b03      	ldr	r3, [pc, #12]	@ (8010a78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr
 8010a78:	240000d8 	.word	0x240000d8

08010a7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	6039      	str	r1, [r7, #0]
 8010a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	2204      	movs	r2, #4
 8010a8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a8e:	4b03      	ldr	r3, [pc, #12]	@ (8010a9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr
 8010a9c:	240000ec 	.word	0x240000ec

08010aa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	6039      	str	r1, [r7, #0]
 8010aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010aac:	79fb      	ldrb	r3, [r7, #7]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d105      	bne.n	8010abe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	4907      	ldr	r1, [pc, #28]	@ (8010ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ab6:	4808      	ldr	r0, [pc, #32]	@ (8010ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ab8:	f7ff fd7a 	bl	80105b0 <USBD_GetString>
 8010abc:	e004      	b.n	8010ac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	4904      	ldr	r1, [pc, #16]	@ (8010ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ac2:	4805      	ldr	r0, [pc, #20]	@ (8010ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ac4:	f7ff fd74 	bl	80105b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ac8:	4b02      	ldr	r3, [pc, #8]	@ (8010ad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	240016c4 	.word	0x240016c4
 8010ad8:	08013140 	.word	0x08013140

08010adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	6039      	str	r1, [r7, #0]
 8010ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	4904      	ldr	r1, [pc, #16]	@ (8010afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010aec:	4804      	ldr	r0, [pc, #16]	@ (8010b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010aee:	f7ff fd5f 	bl	80105b0 <USBD_GetString>
  return USBD_StrDesc;
 8010af2:	4b02      	ldr	r3, [pc, #8]	@ (8010afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	240016c4 	.word	0x240016c4
 8010b00:	08013158 	.word	0x08013158

08010b04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	221a      	movs	r2, #26
 8010b14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b16:	f000 f843 	bl	8010ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b1a:	4b02      	ldr	r3, [pc, #8]	@ (8010b24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	240000f0 	.word	0x240000f0

08010b28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	4603      	mov	r3, r0
 8010b30:	6039      	str	r1, [r7, #0]
 8010b32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b34:	79fb      	ldrb	r3, [r7, #7]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d105      	bne.n	8010b46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	4907      	ldr	r1, [pc, #28]	@ (8010b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b3e:	4808      	ldr	r0, [pc, #32]	@ (8010b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b40:	f7ff fd36 	bl	80105b0 <USBD_GetString>
 8010b44:	e004      	b.n	8010b50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	4904      	ldr	r1, [pc, #16]	@ (8010b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b4a:	4805      	ldr	r0, [pc, #20]	@ (8010b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b4c:	f7ff fd30 	bl	80105b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b50:	4b02      	ldr	r3, [pc, #8]	@ (8010b5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	240016c4 	.word	0x240016c4
 8010b60:	0801316c 	.word	0x0801316c

08010b64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	6039      	str	r1, [r7, #0]
 8010b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b70:	79fb      	ldrb	r3, [r7, #7]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d105      	bne.n	8010b82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	4907      	ldr	r1, [pc, #28]	@ (8010b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b7a:	4808      	ldr	r0, [pc, #32]	@ (8010b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b7c:	f7ff fd18 	bl	80105b0 <USBD_GetString>
 8010b80:	e004      	b.n	8010b8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b82:	683a      	ldr	r2, [r7, #0]
 8010b84:	4904      	ldr	r1, [pc, #16]	@ (8010b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b86:	4805      	ldr	r0, [pc, #20]	@ (8010b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b88:	f7ff fd12 	bl	80105b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b8c:	4b02      	ldr	r3, [pc, #8]	@ (8010b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3708      	adds	r7, #8
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	240016c4 	.word	0x240016c4
 8010b9c:	08013178 	.word	0x08013178

08010ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8010be4 <Get_SerialNum+0x44>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010bac:	4b0e      	ldr	r3, [pc, #56]	@ (8010be8 <Get_SerialNum+0x48>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010bec <Get_SerialNum+0x4c>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d009      	beq.n	8010bda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bc6:	2208      	movs	r2, #8
 8010bc8:	4909      	ldr	r1, [pc, #36]	@ (8010bf0 <Get_SerialNum+0x50>)
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f000 f814 	bl	8010bf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bd0:	2204      	movs	r2, #4
 8010bd2:	4908      	ldr	r1, [pc, #32]	@ (8010bf4 <Get_SerialNum+0x54>)
 8010bd4:	68b8      	ldr	r0, [r7, #8]
 8010bd6:	f000 f80f 	bl	8010bf8 <IntToUnicode>
  }
}
 8010bda:	bf00      	nop
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	1ff1e800 	.word	0x1ff1e800
 8010be8:	1ff1e804 	.word	0x1ff1e804
 8010bec:	1ff1e808 	.word	0x1ff1e808
 8010bf0:	240000f2 	.word	0x240000f2
 8010bf4:	24000102 	.word	0x24000102

08010bf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b087      	sub	sp, #28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	4613      	mov	r3, r2
 8010c04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	75fb      	strb	r3, [r7, #23]
 8010c0e:	e027      	b.n	8010c60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	0f1b      	lsrs	r3, r3, #28
 8010c14:	2b09      	cmp	r3, #9
 8010c16:	d80b      	bhi.n	8010c30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	0f1b      	lsrs	r3, r3, #28
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	7dfb      	ldrb	r3, [r7, #23]
 8010c20:	005b      	lsls	r3, r3, #1
 8010c22:	4619      	mov	r1, r3
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	440b      	add	r3, r1
 8010c28:	3230      	adds	r2, #48	@ 0x30
 8010c2a:	b2d2      	uxtb	r2, r2
 8010c2c:	701a      	strb	r2, [r3, #0]
 8010c2e:	e00a      	b.n	8010c46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	0f1b      	lsrs	r3, r3, #28
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	7dfb      	ldrb	r3, [r7, #23]
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	440b      	add	r3, r1
 8010c40:	3237      	adds	r2, #55	@ 0x37
 8010c42:	b2d2      	uxtb	r2, r2
 8010c44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	011b      	lsls	r3, r3, #4
 8010c4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c4c:	7dfb      	ldrb	r3, [r7, #23]
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	3301      	adds	r3, #1
 8010c52:	68ba      	ldr	r2, [r7, #8]
 8010c54:	4413      	add	r3, r2
 8010c56:	2200      	movs	r2, #0
 8010c58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c5a:	7dfb      	ldrb	r3, [r7, #23]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	75fb      	strb	r3, [r7, #23]
 8010c60:	7dfa      	ldrb	r2, [r7, #23]
 8010c62:	79fb      	ldrb	r3, [r7, #7]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d3d3      	bcc.n	8010c10 <IntToUnicode+0x18>
  }
}
 8010c68:	bf00      	nop
 8010c6a:	bf00      	nop
 8010c6c:	371c      	adds	r7, #28
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
	...

08010c78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010c84:	2200      	movs	r2, #0
 8010c86:	601a      	str	r2, [r3, #0]
 8010c88:	605a      	str	r2, [r3, #4]
 8010c8a:	609a      	str	r2, [r3, #8]
 8010c8c:	60da      	str	r2, [r3, #12]
 8010c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010c90:	f107 0310 	add.w	r3, r7, #16
 8010c94:	22c0      	movs	r2, #192	@ 0xc0
 8010c96:	2100      	movs	r1, #0
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f001 f985 	bl	8011fa8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4a33      	ldr	r2, [pc, #204]	@ (8010d70 <HAL_PCD_MspInit+0xf8>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d15f      	bne.n	8010d68 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010ca8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010cac:	f04f 0300 	mov.w	r3, #0
 8010cb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8010cb4:	2319      	movs	r3, #25
 8010cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8010cb8:	23c0      	movs	r3, #192	@ 0xc0
 8010cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010cbc:	2302      	movs	r3, #2
 8010cbe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8010cc0:	2304      	movs	r3, #4
 8010cc2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010cd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010cd8:	f107 0310 	add.w	r3, r7, #16
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f8 f8cf 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 8010ce8:	f7f0 f9c0 	bl	800106c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010cec:	f7f6 ffd6 	bl	8007c9c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cf0:	4b20      	ldr	r3, [pc, #128]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010cf8:	f043 0301 	orr.w	r3, r3, #1
 8010cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d00:	4b1c      	ldr	r3, [pc, #112]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	60fb      	str	r3, [r7, #12]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d16:	2302      	movs	r3, #2
 8010d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d22:	2300      	movs	r3, #0
 8010d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010d28:	230a      	movs	r3, #10
 8010d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010d32:	4619      	mov	r1, r3
 8010d34:	4810      	ldr	r0, [pc, #64]	@ (8010d78 <HAL_PCD_MspInit+0x100>)
 8010d36:	f7f4 fea7 	bl	8005a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010d40:	4a0c      	ldr	r2, [pc, #48]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010d42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010d46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d74 <HAL_PCD_MspInit+0xfc>)
 8010d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d54:	60bb      	str	r3, [r7, #8]
 8010d56:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010d58:	2200      	movs	r2, #0
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	2065      	movs	r0, #101	@ 0x65
 8010d5e:	f7f2 f9fd 	bl	800315c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d62:	2065      	movs	r0, #101	@ 0x65
 8010d64:	f7f2 fa14 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d68:	bf00      	nop
 8010d6a:	37e8      	adds	r7, #232	@ 0xe8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	40080000 	.word	0x40080000
 8010d74:	58024400 	.word	0x58024400
 8010d78:	58020000 	.word	0x58020000

08010d7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010d90:	4619      	mov	r1, r3
 8010d92:	4610      	mov	r0, r2
 8010d94:	f7fe fa7f 	bl	800f296 <USBD_LL_SetupStage>
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	6879      	ldr	r1, [r7, #4]
 8010db6:	4613      	mov	r3, r2
 8010db8:	00db      	lsls	r3, r3, #3
 8010dba:	4413      	add	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	440b      	add	r3, r1
 8010dc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	78fb      	ldrb	r3, [r7, #3]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f7fe fab9 	bl	800f340 <USBD_LL_DataOutStage>
}
 8010dce:	bf00      	nop
 8010dd0:	3708      	adds	r7, #8
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b082      	sub	sp, #8
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010de8:	78fa      	ldrb	r2, [r7, #3]
 8010dea:	6879      	ldr	r1, [r7, #4]
 8010dec:	4613      	mov	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	4413      	add	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	440b      	add	r3, r1
 8010df6:	3320      	adds	r3, #32
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	78fb      	ldrb	r3, [r7, #3]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	f7fe fb52 	bl	800f4a6 <USBD_LL_DataInStage>
}
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fc8c 	bl	800f736 <USBD_LL_SOF>
}
 8010e1e:	bf00      	nop
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	79db      	ldrb	r3, [r3, #7]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d102      	bne.n	8010e40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	73fb      	strb	r3, [r7, #15]
 8010e3e:	e008      	b.n	8010e52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	79db      	ldrb	r3, [r3, #7]
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d102      	bne.n	8010e4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	73fb      	strb	r3, [r7, #15]
 8010e4c:	e001      	b.n	8010e52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010e4e:	f7f0 f90d 	bl	800106c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e58:	7bfa      	ldrb	r2, [r7, #15]
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fe fc26 	bl	800f6ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fe fbce 	bl	800f60a <USBD_LL_Reset>
}
 8010e6e:	bf00      	nop
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
	...

08010e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fe fc21 	bl	800f6ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	6812      	ldr	r2, [r2, #0]
 8010e9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010e9e:	f043 0301 	orr.w	r3, r3, #1
 8010ea2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	7adb      	ldrb	r3, [r3, #11]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d005      	beq.n	8010eb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010eac:	4b04      	ldr	r3, [pc, #16]	@ (8010ec0 <HAL_PCD_SuspendCallback+0x48>)
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	4a03      	ldr	r2, [pc, #12]	@ (8010ec0 <HAL_PCD_SuspendCallback+0x48>)
 8010eb2:	f043 0306 	orr.w	r3, r3, #6
 8010eb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010eb8:	bf00      	nop
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	e000ed00 	.word	0xe000ed00

08010ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fc17 	bl	800f706 <USBD_LL_Resume>
}
 8010ed8:	bf00      	nop
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	460b      	mov	r3, r1
 8010eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ef2:	78fa      	ldrb	r2, [r7, #3]
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fe fc6f 	bl	800f7da <USBD_LL_IsoOUTIncomplete>
}
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f16:	78fa      	ldrb	r2, [r7, #3]
 8010f18:	4611      	mov	r1, r2
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fe fc2b 	bl	800f776 <USBD_LL_IsoINIncomplete>
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fe fc81 	bl	800f83e <USBD_LL_DevConnected>
}
 8010f3c:	bf00      	nop
 8010f3e:	3708      	adds	r7, #8
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fe fc7e 	bl	800f854 <USBD_LL_DevDisconnected>
}
 8010f58:	bf00      	nop
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d13e      	bne.n	8010fee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f70:	4a21      	ldr	r2, [pc, #132]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f80:	4b1d      	ldr	r3, [pc, #116]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f82:	4a1e      	ldr	r2, [pc, #120]	@ (8010ffc <USBD_LL_Init+0x9c>)
 8010f84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010f86:	4b1c      	ldr	r3, [pc, #112]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f88:	2209      	movs	r2, #9
 8010f8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f8e:	2202      	movs	r2, #2
 8010f90:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f92:	4b19      	ldr	r3, [pc, #100]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010f98:	4b17      	ldr	r3, [pc, #92]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010f9a:	2202      	movs	r2, #2
 8010f9c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f9e:	4b16      	ldr	r3, [pc, #88]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010fa4:	4b14      	ldr	r3, [pc, #80]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010faa:	4b13      	ldr	r3, [pc, #76]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010fb0:	4b11      	ldr	r3, [pc, #68]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010fb6:	4b10      	ldr	r3, [pc, #64]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fc2:	480d      	ldr	r0, [pc, #52]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fc4:	f7f5 fb8f 	bl	80066e6 <HAL_PCD_Init>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010fce:	f7f0 f84d 	bl	800106c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010fd2:	2180      	movs	r1, #128	@ 0x80
 8010fd4:	4808      	ldr	r0, [pc, #32]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fd6:	f7f6 fde6 	bl	8007ba6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010fda:	2240      	movs	r2, #64	@ 0x40
 8010fdc:	2100      	movs	r1, #0
 8010fde:	4806      	ldr	r0, [pc, #24]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fe0:	f7f6 fd9a 	bl	8007b18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010fe4:	2280      	movs	r2, #128	@ 0x80
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	4803      	ldr	r0, [pc, #12]	@ (8010ff8 <USBD_LL_Init+0x98>)
 8010fea:	f7f6 fd95 	bl	8007b18 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	240018c4 	.word	0x240018c4
 8010ffc:	40080000 	.word	0x40080000

08011000 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011008:	2300      	movs	r3, #0
 801100a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801100c:	2300      	movs	r3, #0
 801100e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011016:	4618      	mov	r0, r3
 8011018:	f7f5 fc71 	bl	80068fe <HAL_PCD_Start>
 801101c:	4603      	mov	r3, r0
 801101e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011020:	7bfb      	ldrb	r3, [r7, #15]
 8011022:	4618      	mov	r0, r3
 8011024:	f000 f942 	bl	80112ac <USBD_Get_USB_Status>
 8011028:	4603      	mov	r3, r0
 801102a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801102c:	7bbb      	ldrb	r3, [r7, #14]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b084      	sub	sp, #16
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
 801103e:	4608      	mov	r0, r1
 8011040:	4611      	mov	r1, r2
 8011042:	461a      	mov	r2, r3
 8011044:	4603      	mov	r3, r0
 8011046:	70fb      	strb	r3, [r7, #3]
 8011048:	460b      	mov	r3, r1
 801104a:	70bb      	strb	r3, [r7, #2]
 801104c:	4613      	mov	r3, r2
 801104e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011054:	2300      	movs	r3, #0
 8011056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801105e:	78bb      	ldrb	r3, [r7, #2]
 8011060:	883a      	ldrh	r2, [r7, #0]
 8011062:	78f9      	ldrb	r1, [r7, #3]
 8011064:	f7f6 f972 	bl	800734c <HAL_PCD_EP_Open>
 8011068:	4603      	mov	r3, r0
 801106a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801106c:	7bfb      	ldrb	r3, [r7, #15]
 801106e:	4618      	mov	r0, r3
 8011070:	f000 f91c 	bl	80112ac <USBD_Get_USB_Status>
 8011074:	4603      	mov	r3, r0
 8011076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011078:	7bbb      	ldrb	r3, [r7, #14]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3710      	adds	r7, #16
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}

08011082 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011082:	b580      	push	{r7, lr}
 8011084:	b084      	sub	sp, #16
 8011086:	af00      	add	r7, sp, #0
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	460b      	mov	r3, r1
 801108c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801108e:	2300      	movs	r3, #0
 8011090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011092:	2300      	movs	r3, #0
 8011094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801109c:	78fa      	ldrb	r2, [r7, #3]
 801109e:	4611      	mov	r1, r2
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7f6 f9bd 	bl	8007420 <HAL_PCD_EP_Close>
 80110a6:	4603      	mov	r3, r0
 80110a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 f8fd 	bl	80112ac <USBD_Get_USB_Status>
 80110b2:	4603      	mov	r3, r0
 80110b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3710      	adds	r7, #16
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d0:	2300      	movs	r3, #0
 80110d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110da:	78fa      	ldrb	r2, [r7, #3]
 80110dc:	4611      	mov	r1, r2
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f6 fa75 	bl	80075ce <HAL_PCD_EP_SetStall>
 80110e4:	4603      	mov	r3, r0
 80110e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 f8de 	bl	80112ac <USBD_Get_USB_Status>
 80110f0:	4603      	mov	r3, r0
 80110f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	460b      	mov	r3, r1
 8011108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801110e:	2300      	movs	r3, #0
 8011110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011118:	78fa      	ldrb	r2, [r7, #3]
 801111a:	4611      	mov	r1, r2
 801111c:	4618      	mov	r0, r3
 801111e:	f7f6 fab9 	bl	8007694 <HAL_PCD_EP_ClrStall>
 8011122:	4603      	mov	r3, r0
 8011124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011126:	7bfb      	ldrb	r3, [r7, #15]
 8011128:	4618      	mov	r0, r3
 801112a:	f000 f8bf 	bl	80112ac <USBD_Get_USB_Status>
 801112e:	4603      	mov	r3, r0
 8011130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011132:	7bbb      	ldrb	r3, [r7, #14]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801114e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011154:	2b00      	cmp	r3, #0
 8011156:	da0b      	bge.n	8011170 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011158:	78fb      	ldrb	r3, [r7, #3]
 801115a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801115e:	68f9      	ldr	r1, [r7, #12]
 8011160:	4613      	mov	r3, r2
 8011162:	00db      	lsls	r3, r3, #3
 8011164:	4413      	add	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	440b      	add	r3, r1
 801116a:	3316      	adds	r3, #22
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	e00b      	b.n	8011188 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011170:	78fb      	ldrb	r3, [r7, #3]
 8011172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011176:	68f9      	ldr	r1, [r7, #12]
 8011178:	4613      	mov	r3, r2
 801117a:	00db      	lsls	r3, r3, #3
 801117c:	4413      	add	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	440b      	add	r3, r1
 8011182:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011186:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011188:	4618      	mov	r0, r3
 801118a:	3714      	adds	r7, #20
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	460b      	mov	r3, r1
 801119e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111a0:	2300      	movs	r3, #0
 80111a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111a4:	2300      	movs	r3, #0
 80111a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111ae:	78fa      	ldrb	r2, [r7, #3]
 80111b0:	4611      	mov	r1, r2
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7f6 f8a6 	bl	8007304 <HAL_PCD_SetAddress>
 80111b8:	4603      	mov	r3, r0
 80111ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111bc:	7bfb      	ldrb	r3, [r7, #15]
 80111be:	4618      	mov	r0, r3
 80111c0:	f000 f874 	bl	80112ac <USBD_Get_USB_Status>
 80111c4:	4603      	mov	r3, r0
 80111c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b086      	sub	sp, #24
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	60f8      	str	r0, [r7, #12]
 80111da:	607a      	str	r2, [r7, #4]
 80111dc:	603b      	str	r3, [r7, #0]
 80111de:	460b      	mov	r3, r1
 80111e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111e2:	2300      	movs	r3, #0
 80111e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111e6:	2300      	movs	r3, #0
 80111e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80111f0:	7af9      	ldrb	r1, [r7, #11]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	f7f6 f9b0 	bl	800755a <HAL_PCD_EP_Transmit>
 80111fa:	4603      	mov	r3, r0
 80111fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
 8011200:	4618      	mov	r0, r3
 8011202:	f000 f853 	bl	80112ac <USBD_Get_USB_Status>
 8011206:	4603      	mov	r3, r0
 8011208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801120a:	7dbb      	ldrb	r3, [r7, #22]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3718      	adds	r7, #24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	607a      	str	r2, [r7, #4]
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	460b      	mov	r3, r1
 8011222:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011224:	2300      	movs	r3, #0
 8011226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011232:	7af9      	ldrb	r1, [r7, #11]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	f7f6 f93c 	bl	80074b4 <HAL_PCD_EP_Receive>
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	4618      	mov	r0, r3
 8011244:	f000 f832 	bl	80112ac <USBD_Get_USB_Status>
 8011248:	4603      	mov	r3, r0
 801124a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801124c:	7dbb      	ldrb	r3, [r7, #22]
}
 801124e:	4618      	mov	r0, r3
 8011250:	3718      	adds	r7, #24
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}

08011256 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011256:	b580      	push	{r7, lr}
 8011258:	b082      	sub	sp, #8
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
 801125e:	460b      	mov	r3, r1
 8011260:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011268:	78fa      	ldrb	r2, [r7, #3]
 801126a:	4611      	mov	r1, r2
 801126c:	4618      	mov	r0, r3
 801126e:	f7f6 f95c 	bl	800752a <HAL_PCD_EP_GetRxCount>
 8011272:	4603      	mov	r3, r0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011284:	4b03      	ldr	r3, [pc, #12]	@ (8011294 <USBD_static_malloc+0x18>)
}
 8011286:	4618      	mov	r0, r3
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	24001da8 	.word	0x24001da8

08011298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	4603      	mov	r3, r0
 80112b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112b6:	2300      	movs	r3, #0
 80112b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112ba:	79fb      	ldrb	r3, [r7, #7]
 80112bc:	2b03      	cmp	r3, #3
 80112be:	d817      	bhi.n	80112f0 <USBD_Get_USB_Status+0x44>
 80112c0:	a201      	add	r2, pc, #4	@ (adr r2, 80112c8 <USBD_Get_USB_Status+0x1c>)
 80112c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c6:	bf00      	nop
 80112c8:	080112d9 	.word	0x080112d9
 80112cc:	080112df 	.word	0x080112df
 80112d0:	080112e5 	.word	0x080112e5
 80112d4:	080112eb 	.word	0x080112eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80112d8:	2300      	movs	r3, #0
 80112da:	73fb      	strb	r3, [r7, #15]
    break;
 80112dc:	e00b      	b.n	80112f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112de:	2303      	movs	r3, #3
 80112e0:	73fb      	strb	r3, [r7, #15]
    break;
 80112e2:	e008      	b.n	80112f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112e4:	2301      	movs	r3, #1
 80112e6:	73fb      	strb	r3, [r7, #15]
    break;
 80112e8:	e005      	b.n	80112f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112ea:	2303      	movs	r3, #3
 80112ec:	73fb      	strb	r3, [r7, #15]
    break;
 80112ee:	e002      	b.n	80112f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80112f0:	2303      	movs	r3, #3
 80112f2:	73fb      	strb	r3, [r7, #15]
    break;
 80112f4:	bf00      	nop
  }
  return usb_status;
 80112f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3714      	adds	r7, #20
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 8011304:	b5b0      	push	{r4, r5, r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 801130a:	4b3e      	ldr	r3, [pc, #248]	@ (8011404 <do_dump+0x100>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a3e      	ldr	r2, [pc, #248]	@ (8011408 <do_dump+0x104>)
 8011310:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 8011312:	4b3c      	ldr	r3, [pc, #240]	@ (8011404 <do_dump+0x100>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f023 030f 	bic.w	r3, r3, #15
 801131a:	4619      	mov	r1, r3
 801131c:	483b      	ldr	r0, [pc, #236]	@ (801140c <do_dump+0x108>)
 801131e:	f000 fc97 	bl	8011c50 <DebugPrint>
	strcpy(ascii_result,"................");
 8011322:	1d3b      	adds	r3, r7, #4
 8011324:	4a3a      	ldr	r2, [pc, #232]	@ (8011410 <do_dump+0x10c>)
 8011326:	461c      	mov	r4, r3
 8011328:	4615      	mov	r5, r2
 801132a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801132c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801132e:	682b      	ldr	r3, [r5, #0]
 8011330:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 8011332:	2300      	movs	r3, #0
 8011334:	61fb      	str	r3, [r7, #28]
 8011336:	e005      	b.n	8011344 <do_dump+0x40>
 8011338:	4836      	ldr	r0, [pc, #216]	@ (8011414 <do_dump+0x110>)
 801133a:	f000 fc6f 	bl	8011c1c <DebugSend>
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	3301      	adds	r3, #1
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	4b2f      	ldr	r3, [pc, #188]	@ (8011404 <do_dump+0x100>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f003 020f 	and.w	r2, r3, #15
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	429a      	cmp	r2, r3
 8011350:	d8f2      	bhi.n	8011338 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 8011352:	e049      	b.n	80113e8 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 8011354:	4b2b      	ldr	r3, [pc, #172]	@ (8011404 <do_dump+0x100>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	1c5a      	adds	r2, r3, #1
 801135a:	492a      	ldr	r1, [pc, #168]	@ (8011404 <do_dump+0x100>)
 801135c:	600a      	str	r2, [r1, #0]
 801135e:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 8011366:	7dfb      	ldrb	r3, [r7, #23]
 8011368:	4619      	mov	r1, r3
 801136a:	482b      	ldr	r0, [pc, #172]	@ (8011418 <do_dump+0x114>)
 801136c:	f000 fc70 	bl	8011c50 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011376:	3301      	adds	r3, #1
 8011378:	4a28      	ldr	r2, [pc, #160]	@ (801141c <do_dump+0x118>)
 801137a:	4413      	add	r3, r2
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f003 0320 	and.w	r3, r3, #32
 8011382:	2b00      	cmp	r3, #0
 8011384:	d104      	bne.n	8011390 <do_dump+0x8c>
 8011386:	1d3a      	adds	r2, r7, #4
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	4413      	add	r3, r2
 801138c:	7dfa      	ldrb	r2, [r7, #23]
 801138e:	701a      	strb	r2, [r3, #0]
		i1++;
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	3301      	adds	r3, #1
 8011394:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 8011396:	4b1b      	ldr	r3, [pc, #108]	@ (8011404 <do_dump+0x100>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f003 030f 	and.w	r3, r3, #15
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d122      	bne.n	80113e8 <do_dump+0xe4>
		{
			DebugSend("  ");
 80113a2:	481f      	ldr	r0, [pc, #124]	@ (8011420 <do_dump+0x11c>)
 80113a4:	f000 fc3a 	bl	8011c1c <DebugSend>
			DebugSend(ascii_result);
 80113a8:	1d3b      	adds	r3, r7, #4
 80113aa:	4618      	mov	r0, r3
 80113ac:	f000 fc36 	bl	8011c1c <DebugSend>
			i1 = 0;
 80113b0:	2300      	movs	r3, #0
 80113b2:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 80113b4:	1d3b      	adds	r3, r7, #4
 80113b6:	4a16      	ldr	r2, [pc, #88]	@ (8011410 <do_dump+0x10c>)
 80113b8:	461c      	mov	r4, r3
 80113ba:	4615      	mov	r5, r2
 80113bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 80113c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011404 <do_dump+0x100>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d014      	beq.n	80113f6 <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 80113cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011404 <do_dump+0x100>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	4b14      	ldr	r3, [pc, #80]	@ (8011424 <do_dump+0x120>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d807      	bhi.n	80113e8 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 80113d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011404 <do_dump+0x100>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f023 030f 	bic.w	r3, r3, #15
 80113e0:	4619      	mov	r1, r3
 80113e2:	480a      	ldr	r0, [pc, #40]	@ (801140c <do_dump+0x108>)
 80113e4:	f000 fc34 	bl	8011c50 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 80113e8:	4b06      	ldr	r3, [pc, #24]	@ (8011404 <do_dump+0x100>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011424 <do_dump+0x120>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d9af      	bls.n	8011354 <do_dump+0x50>
 80113f4:	e000      	b.n	80113f8 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 80113f6:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 80113f8:	4b02      	ldr	r3, [pc, #8]	@ (8011404 <do_dump+0x100>)
 80113fa:	681b      	ldr	r3, [r3, #0]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3720      	adds	r7, #32
 8011400:	46bd      	mov	sp, r7
 8011402:	bdb0      	pop	{r4, r5, r7, pc}
 8011404:	24001fc8 	.word	0x24001fc8
 8011408:	24001fcc 	.word	0x24001fcc
 801140c:	08013188 	.word	0x08013188
 8011410:	08013194 	.word	0x08013194
 8011414:	080131a8 	.word	0x080131a8
 8011418:	080131ac 	.word	0x080131ac
 801141c:	080133ac 	.word	0x080133ac
 8011420:	080131b4 	.word	0x080131b4
 8011424:	24001fd0 	.word	0x24001fd0

08011428 <debug_parse>:


void debug_parse(char *cmd_line)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b08e      	sub	sp, #56	@ 0x38
 801142c:	af02      	add	r7, sp, #8
 801142e:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 8011430:	e002      	b.n	8011438 <debug_parse+0x10>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	3301      	adds	r3, #1
 8011436:	607b      	str	r3, [r7, #4]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	2b20      	cmp	r3, #32
 801143e:	d0f8      	beq.n	8011432 <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	607a      	str	r2, [r7, #4]
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801144c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011450:	3301      	adds	r3, #1
 8011452:	4aac      	ldr	r2, [pc, #688]	@ (8011704 <debug_parse+0x2dc>)
 8011454:	4413      	add	r3, r2
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 0303 	and.w	r3, r3, #3
 801145c:	2b02      	cmp	r3, #2
 801145e:	d103      	bne.n	8011468 <debug_parse+0x40>
 8011460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011464:	3b20      	subs	r3, #32
 8011466:	e001      	b.n	801146c <debug_parse+0x44>
 8011468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801146c:	3b3f      	subs	r3, #63	@ 0x3f
 801146e:	2b1b      	cmp	r3, #27
 8011470:	f200 82dc 	bhi.w	8011a2c <debug_parse+0x604>
 8011474:	a201      	add	r2, pc, #4	@ (adr r2, 801147c <debug_parse+0x54>)
 8011476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801147a:	bf00      	nop
 801147c:	080114ed 	.word	0x080114ed
 8011480:	08011a2d 	.word	0x08011a2d
 8011484:	080114f9 	.word	0x080114f9
 8011488:	08011a0b 	.word	0x08011a0b
 801148c:	08011a0b 	.word	0x08011a0b
 8011490:	08011509 	.word	0x08011509
 8011494:	08011569 	.word	0x08011569
 8011498:	0801158d 	.word	0x0801158d
 801149c:	08011a0b 	.word	0x08011a0b
 80114a0:	08011a0b 	.word	0x08011a0b
 80114a4:	080115b9 	.word	0x080115b9
 80114a8:	080115ff 	.word	0x080115ff
 80114ac:	08011a0b 	.word	0x08011a0b
 80114b0:	08011639 	.word	0x08011639
 80114b4:	0801167d 	.word	0x0801167d
 80114b8:	080116d1 	.word	0x080116d1
 80114bc:	08011755 	.word	0x08011755
 80114c0:	080117a9 	.word	0x080117a9
 80114c4:	08011a0b 	.word	0x08011a0b
 80114c8:	08011a0b 	.word	0x08011a0b
 80114cc:	08011a0b 	.word	0x08011a0b
 80114d0:	080117b9 	.word	0x080117b9
 80114d4:	080117fb 	.word	0x080117fb
 80114d8:	08011889 	.word	0x08011889
 80114dc:	080118d9 	.word	0x080118d9
 80114e0:	08011971 	.word	0x08011971
 80114e4:	08011981 	.word	0x08011981
 80114e8:	080119e5 	.word	0x080119e5
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 80114ec:	4a86      	ldr	r2, [pc, #536]	@ (8011708 <debug_parse+0x2e0>)
 80114ee:	4987      	ldr	r1, [pc, #540]	@ (801170c <debug_parse+0x2e4>)
 80114f0:	4887      	ldr	r0, [pc, #540]	@ (8011710 <debug_parse+0x2e8>)
 80114f2:	f000 fbad 	bl	8011c50 <DebugPrint>
		break;
 80114f6:	e299      	b.n	8011a2c <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 80114f8:	f7ef fa0e 	bl	8000918 <CalcTemperature>
 80114fc:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 80114fe:	6a39      	ldr	r1, [r7, #32]
 8011500:	4884      	ldr	r0, [pc, #528]	@ (8011714 <debug_parse+0x2ec>)
 8011502:	f000 fba5 	bl	8011c50 <DebugPrint>
	}
		break;
 8011506:	e291      	b.n	8011a2c <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f107 010c 	add.w	r1, r7, #12
 8011512:	2210      	movs	r2, #16
 8011514:	4618      	mov	r0, r3
 8011516:	f000 fccd 	bl	8011eb4 <strtoul>
 801151a:	4603      	mov	r3, r0
 801151c:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d019      	beq.n	8011558 <debug_parse+0x130>
			_debug_dump_beg = temp2;
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	4a7c      	ldr	r2, [pc, #496]	@ (8011718 <debug_parse+0x2f0>)
 8011528:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f107 010c 	add.w	r1, r7, #12
 8011530:	2210      	movs	r2, #16
 8011532:	4618      	mov	r0, r3
 8011534:	f000 fcbe 	bl	8011eb4 <strtoul>
 8011538:	4603      	mov	r3, r0
 801153a:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	429a      	cmp	r2, r3
 8011542:	d903      	bls.n	801154c <debug_parse+0x124>
				_debug_dump_end = temp3;
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	4a75      	ldr	r2, [pc, #468]	@ (801171c <debug_parse+0x2f4>)
 8011548:	6013      	str	r3, [r2, #0]
 801154a:	e00a      	b.n	8011562 <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 801154c:	4b72      	ldr	r3, [pc, #456]	@ (8011718 <debug_parse+0x2f0>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	337f      	adds	r3, #127	@ 0x7f
 8011552:	4a72      	ldr	r2, [pc, #456]	@ (801171c <debug_parse+0x2f4>)
 8011554:	6013      	str	r3, [r2, #0]
 8011556:	e004      	b.n	8011562 <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 8011558:	4b6f      	ldr	r3, [pc, #444]	@ (8011718 <debug_parse+0x2f0>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	337f      	adds	r3, #127	@ 0x7f
 801155e:	4a6f      	ldr	r2, [pc, #444]	@ (801171c <debug_parse+0x2f4>)
 8011560:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 8011562:	f7ff fecf 	bl	8011304 <do_dump>
		break;
 8011566:	e261      	b.n	8011a2c <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 801156e:	f107 031c 	add.w	r3, r7, #28
 8011572:	461a      	mov	r2, r3
 8011574:	496a      	ldr	r1, [pc, #424]	@ (8011720 <debug_parse+0x2f8>)
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fcc8 	bl	8011f0c <siscanf>
 801157c:	4603      	mov	r3, r0
 801157e:	2b01      	cmp	r3, #1
 8011580:	f040 8245 	bne.w	8011a0e <debug_parse+0x5e6>
			tempbyte = temp1;
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 801158a:	e240      	b.n	8011a0e <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 801158c:	f107 0114 	add.w	r1, r7, #20
 8011590:	f107 0218 	add.w	r2, r7, #24
 8011594:	f107 0310 	add.w	r3, r7, #16
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	460b      	mov	r3, r1
 801159c:	4961      	ldr	r1, [pc, #388]	@ (8011724 <debug_parse+0x2fc>)
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 fcb4 	bl	8011f0c <siscanf>
 80115a4:	6278      	str	r0, [r7, #36]	@ 0x24
		switch (params) {
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	2b03      	cmp	r3, #3
 80115aa:	d003      	beq.n	80115b4 <debug_parse+0x18c>
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 80115ac:	485e      	ldr	r0, [pc, #376]	@ (8011728 <debug_parse+0x300>)
 80115ae:	f000 fb35 	bl	8011c1c <DebugSend>
			}
			break;
 80115b2:	e000      	b.n	80115b6 <debug_parse+0x18e>
			break;
 80115b4:	bf00      	nop
		}
		break;
 80115b6:	e239      	b.n	8011a2c <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 80115b8:	f107 031c 	add.w	r3, r7, #28
 80115bc:	461a      	mov	r2, r3
 80115be:	4958      	ldr	r1, [pc, #352]	@ (8011720 <debug_parse+0x2f8>)
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f000 fca3 	bl	8011f0c <siscanf>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	f040 8222 	bne.w	8011a12 <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	461a      	mov	r2, r3
 80115d2:	4b56      	ldr	r3, [pc, #344]	@ (801172c <debug_parse+0x304>)
 80115d4:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 80115d6:	4b55      	ldr	r3, [pc, #340]	@ (801172c <debug_parse+0x304>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 80115e0:	4b52      	ldr	r3, [pc, #328]	@ (801172c <debug_parse+0x304>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4619      	mov	r1, r3
 80115e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115ea:	461a      	mov	r2, r3
 80115ec:	4850      	ldr	r0, [pc, #320]	@ (8011730 <debug_parse+0x308>)
 80115ee:	f000 fb2f 	bl	8011c50 <DebugPrint>
			debug_port += sizeof(tempbyte);
 80115f2:	4b4e      	ldr	r3, [pc, #312]	@ (801172c <debug_parse+0x304>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	3301      	adds	r3, #1
 80115f8:	4a4c      	ldr	r2, [pc, #304]	@ (801172c <debug_parse+0x304>)
 80115fa:	6013      	str	r3, [r2, #0]
		}
		break;
 80115fc:	e209      	b.n	8011a12 <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 80115fe:	f107 031c 	add.w	r3, r7, #28
 8011602:	461a      	mov	r2, r3
 8011604:	4946      	ldr	r1, [pc, #280]	@ (8011720 <debug_parse+0x2f8>)
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f000 fc80 	bl	8011f0c <siscanf>
 801160c:	4603      	mov	r3, r0
 801160e:	2b01      	cmp	r3, #1
 8011610:	d105      	bne.n	801161e <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	f023 0301 	bic.w	r3, r3, #1
 8011618:	461a      	mov	r2, r3
 801161a:	4b44      	ldr	r3, [pc, #272]	@ (801172c <debug_parse+0x304>)
 801161c:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 801161e:	4b43      	ldr	r3, [pc, #268]	@ (801172c <debug_parse+0x304>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 8011626:	4b41      	ldr	r3, [pc, #260]	@ (801172c <debug_parse+0x304>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4619      	mov	r1, r3
 801162c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801162e:	461a      	mov	r2, r3
 8011630:	4840      	ldr	r0, [pc, #256]	@ (8011734 <debug_parse+0x30c>)
 8011632:	f000 fb0d 	bl	8011c50 <DebugPrint>
		break;
 8011636:	e1f9      	b.n	8011a2c <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 8011638:	f7f7 fa0a 	bl	8008a50 <HAL_RCC_GetSysClockFreq>
 801163c:	4603      	mov	r3, r0
 801163e:	4a3e      	ldr	r2, [pc, #248]	@ (8011738 <debug_parse+0x310>)
 8011640:	fba2 2303 	umull	r2, r3, r2, r3
 8011644:	0c9b      	lsrs	r3, r3, #18
 8011646:	4619      	mov	r1, r3
 8011648:	483c      	ldr	r0, [pc, #240]	@ (801173c <debug_parse+0x314>)
 801164a:	f000 fb01 	bl	8011c50 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 801164e:	f7f7 fb79 	bl	8008d44 <HAL_RCC_GetHCLKFreq>
 8011652:	4603      	mov	r3, r0
 8011654:	4a38      	ldr	r2, [pc, #224]	@ (8011738 <debug_parse+0x310>)
 8011656:	fba2 2303 	umull	r2, r3, r2, r3
 801165a:	0c9b      	lsrs	r3, r3, #18
 801165c:	4619      	mov	r1, r3
 801165e:	4838      	ldr	r0, [pc, #224]	@ (8011740 <debug_parse+0x318>)
 8011660:	f000 faf6 	bl	8011c50 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 8011664:	f7f7 fb9e 	bl	8008da4 <HAL_RCC_GetPCLK1Freq>
 8011668:	4603      	mov	r3, r0
 801166a:	4a33      	ldr	r2, [pc, #204]	@ (8011738 <debug_parse+0x310>)
 801166c:	fba2 2303 	umull	r2, r3, r2, r3
 8011670:	0c9b      	lsrs	r3, r3, #18
 8011672:	4619      	mov	r1, r3
 8011674:	4833      	ldr	r0, [pc, #204]	@ (8011744 <debug_parse+0x31c>)
 8011676:	f000 faeb 	bl	8011c50 <DebugPrint>
		break;
 801167a:	e1d7      	b.n	8011a2c <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 801167c:	f107 0318 	add.w	r3, r7, #24
 8011680:	f107 021c 	add.w	r2, r7, #28
 8011684:	4930      	ldr	r1, [pc, #192]	@ (8011748 <debug_parse+0x320>)
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 fc40 	bl	8011f0c <siscanf>
 801168c:	4603      	mov	r3, r0
 801168e:	2b02      	cmp	r3, #2
 8011690:	d117      	bne.n	80116c2 <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	f023 0303 	bic.w	r3, r3, #3
 8011698:	461a      	mov	r2, r3
 801169a:	4b24      	ldr	r3, [pc, #144]	@ (801172c <debug_parse+0x304>)
 801169c:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 801169e:	4b23      	ldr	r3, [pc, #140]	@ (801172c <debug_parse+0x304>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4619      	mov	r1, r3
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	461a      	mov	r2, r3
 80116a8:	4828      	ldr	r0, [pc, #160]	@ (801174c <debug_parse+0x324>)
 80116aa:	f000 fad1 	bl	8011c50 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 80116ae:	4b1f      	ldr	r3, [pc, #124]	@ (801172c <debug_parse+0x304>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	69ba      	ldr	r2, [r7, #24]
 80116b4:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 80116b6:	4b1d      	ldr	r3, [pc, #116]	@ (801172c <debug_parse+0x304>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3304      	adds	r3, #4
 80116bc:	4a1b      	ldr	r2, [pc, #108]	@ (801172c <debug_parse+0x304>)
 80116be:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 80116c0:	e1b4      	b.n	8011a2c <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 80116c2:	4819      	ldr	r0, [pc, #100]	@ (8011728 <debug_parse+0x300>)
 80116c4:	f000 faaa 	bl	8011c1c <DebugSend>
		break;
 80116c8:	e1b0      	b.n	8011a2c <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	3301      	adds	r3, #1
 80116ce:	607b      	str	r3, [r7, #4]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	2b20      	cmp	r3, #32
 80116d6:	d103      	bne.n	80116e0 <debug_parse+0x2b8>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d1f4      	bne.n	80116ca <debug_parse+0x2a2>
		DebugSend("\r\n");
 80116e0:	481b      	ldr	r0, [pc, #108]	@ (8011750 <debug_parse+0x328>)
 80116e2:	f000 fa9b 	bl	8011c1c <DebugSend>
		while (*cmd_line!=0) {
 80116e6:	e007      	b.n	80116f8 <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 fa53 	bl	8011b98 <DebugPutChar>
			cmd_line++;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	3301      	adds	r3, #1
 80116f6:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1f3      	bne.n	80116e8 <debug_parse+0x2c0>
		}
		break;
 8011700:	e194      	b.n	8011a2c <debug_parse+0x604>
 8011702:	bf00      	nop
 8011704:	080133ac 	.word	0x080133ac
 8011708:	080131b8 	.word	0x080131b8
 801170c:	080131c4 	.word	0x080131c4
 8011710:	080131d0 	.word	0x080131d0
 8011714:	080131f0 	.word	0x080131f0
 8011718:	24001fc8 	.word	0x24001fc8
 801171c:	24001fd0 	.word	0x24001fd0
 8011720:	08013204 	.word	0x08013204
 8011724:	08013208 	.word	0x08013208
 8011728:	08013214 	.word	0x08013214
 801172c:	2400010c 	.word	0x2400010c
 8011730:	0801321c 	.word	0x0801321c
 8011734:	0801322c 	.word	0x0801322c
 8011738:	431bde83 	.word	0x431bde83
 801173c:	0801323c 	.word	0x0801323c
 8011740:	08013264 	.word	0x08013264
 8011744:	08013288 	.word	0x08013288
 8011748:	080132ac 	.word	0x080132ac
 801174c:	080132b4 	.word	0x080132b4
 8011750:	080132c4 	.word	0x080132c4
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 8011754:	f107 0318 	add.w	r3, r7, #24
 8011758:	f107 021c 	add.w	r2, r7, #28
 801175c:	49b5      	ldr	r1, [pc, #724]	@ (8011a34 <debug_parse+0x60c>)
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f000 fbd4 	bl	8011f0c <siscanf>
 8011764:	4603      	mov	r3, r0
 8011766:	2b02      	cmp	r3, #2
 8011768:	d11a      	bne.n	80117a0 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	461a      	mov	r2, r3
 801176e:	4bb2      	ldr	r3, [pc, #712]	@ (8011a38 <debug_parse+0x610>)
 8011770:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 8011778:	4baf      	ldr	r3, [pc, #700]	@ (8011a38 <debug_parse+0x610>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4619      	mov	r1, r3
 801177e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011782:	461a      	mov	r2, r3
 8011784:	48ad      	ldr	r0, [pc, #692]	@ (8011a3c <debug_parse+0x614>)
 8011786:	f000 fa63 	bl	8011c50 <DebugPrint>
			*debug_port = tempbyte;
 801178a:	4bab      	ldr	r3, [pc, #684]	@ (8011a38 <debug_parse+0x610>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8011792:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 8011794:	4ba8      	ldr	r3, [pc, #672]	@ (8011a38 <debug_parse+0x610>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	3301      	adds	r3, #1
 801179a:	4aa7      	ldr	r2, [pc, #668]	@ (8011a38 <debug_parse+0x610>)
 801179c:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 801179e:	e145      	b.n	8011a2c <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 80117a0:	48a7      	ldr	r0, [pc, #668]	@ (8011a40 <debug_parse+0x618>)
 80117a2:	f000 fa3b 	bl	8011c1c <DebugSend>
		break;
 80117a6:	e141      	b.n	8011a2c <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80117a8:	f107 031c 	add.w	r3, r7, #28
 80117ac:	461a      	mov	r2, r3
 80117ae:	49a5      	ldr	r1, [pc, #660]	@ (8011a44 <debug_parse+0x61c>)
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fbab 	bl	8011f0c <siscanf>
		{
		}
		else
		{
		}
		break;
 80117b6:	e139      	b.n	8011a2c <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80117b8:	f107 031c 	add.w	r3, r7, #28
 80117bc:	461a      	mov	r2, r3
 80117be:	49a1      	ldr	r1, [pc, #644]	@ (8011a44 <debug_parse+0x61c>)
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 fba3 	bl	8011f0c <siscanf>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	f000 8124 	beq.w	8011a16 <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 80117ce:	4b9e      	ldr	r3, [pc, #632]	@ (8011a48 <debug_parse+0x620>)
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	bf0c      	ite	eq
 80117d6:	2301      	moveq	r3, #1
 80117d8:	2300      	movne	r3, #0
 80117da:	b2db      	uxtb	r3, r3
 80117dc:	461a      	mov	r2, r3
 80117de:	4b9a      	ldr	r3, [pc, #616]	@ (8011a48 <debug_parse+0x620>)
 80117e0:	701a      	strb	r2, [r3, #0]
			if (bTest)
 80117e2:	4b99      	ldr	r3, [pc, #612]	@ (8011a48 <debug_parse+0x620>)
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d003      	beq.n	80117f2 <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 80117ea:	4898      	ldr	r0, [pc, #608]	@ (8011a4c <debug_parse+0x624>)
 80117ec:	f000 fa16 	bl	8011c1c <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 80117f0:	e111      	b.n	8011a16 <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 80117f2:	4897      	ldr	r0, [pc, #604]	@ (8011a50 <debug_parse+0x628>)
 80117f4:	f000 fa12 	bl	8011c1c <DebugSend>
		break;
 80117f8:	e10d      	b.n	8011a16 <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 80117fa:	f107 0318 	add.w	r3, r7, #24
 80117fe:	f107 021c 	add.w	r2, r7, #28
 8011802:	4994      	ldr	r1, [pc, #592]	@ (8011a54 <debug_parse+0x62c>)
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 fb81 	bl	8011f0c <siscanf>
 801180a:	4603      	mov	r3, r0
 801180c:	2b02      	cmp	r3, #2
 801180e:	f000 8104 	beq.w	8011a1a <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8011812:	f107 031c 	add.w	r3, r7, #28
 8011816:	461a      	mov	r2, r3
 8011818:	498a      	ldr	r1, [pc, #552]	@ (8011a44 <debug_parse+0x61c>)
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fb76 	bl	8011f0c <siscanf>
 8011820:	4603      	mov	r3, r0
 8011822:	2b01      	cmp	r3, #1
 8011824:	f040 80f9 	bne.w	8011a1a <debug_parse+0x5f2>
		{
			switch (temp1){
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	2b12      	cmp	r3, #18
 801182c:	f200 80f5 	bhi.w	8011a1a <debug_parse+0x5f2>
 8011830:	a201      	add	r2, pc, #4	@ (adr r2, 8011838 <debug_parse+0x410>)
 8011832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011836:	bf00      	nop
 8011838:	08011885 	.word	0x08011885
 801183c:	08011885 	.word	0x08011885
 8011840:	08011885 	.word	0x08011885
 8011844:	08011885 	.word	0x08011885
 8011848:	08011885 	.word	0x08011885
 801184c:	08011885 	.word	0x08011885
 8011850:	08011885 	.word	0x08011885
 8011854:	08011885 	.word	0x08011885
 8011858:	08011885 	.word	0x08011885
 801185c:	08011885 	.word	0x08011885
 8011860:	08011885 	.word	0x08011885
 8011864:	08011885 	.word	0x08011885
 8011868:	08011885 	.word	0x08011885
 801186c:	08011885 	.word	0x08011885
 8011870:	08011885 	.word	0x08011885
 8011874:	08011885 	.word	0x08011885
 8011878:	08011885 	.word	0x08011885
 801187c:	08011885 	.word	0x08011885
 8011880:	08011885 	.word	0x08011885
			case 0:
				break;
 8011884:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 8011886:	e0c8      	b.n	8011a1a <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8011888:	f107 031c 	add.w	r3, r7, #28
 801188c:	461a      	mov	r2, r3
 801188e:	496d      	ldr	r1, [pc, #436]	@ (8011a44 <debug_parse+0x61c>)
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fb3b 	bl	8011f0c <siscanf>
 8011896:	4603      	mov	r3, r0
 8011898:	2b01      	cmp	r3, #1
 801189a:	f040 80c0 	bne.w	8011a1e <debug_parse+0x5f6>
		{
			switch (temp1){
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	2b09      	cmp	r3, #9
 80118a2:	f200 80bc 	bhi.w	8011a1e <debug_parse+0x5f6>
 80118a6:	a201      	add	r2, pc, #4	@ (adr r2, 80118ac <debug_parse+0x484>)
 80118a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ac:	080118d5 	.word	0x080118d5
 80118b0:	080118d5 	.word	0x080118d5
 80118b4:	080118d5 	.word	0x080118d5
 80118b8:	080118d5 	.word	0x080118d5
 80118bc:	080118d5 	.word	0x080118d5
 80118c0:	080118d5 	.word	0x080118d5
 80118c4:	080118d5 	.word	0x080118d5
 80118c8:	080118d5 	.word	0x080118d5
 80118cc:	080118d5 	.word	0x080118d5
 80118d0:	080118d5 	.word	0x080118d5
			case 0:	//V0
				break;
 80118d4:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 80118d6:	e0a2      	b.n	8011a1e <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 80118d8:	f107 0318 	add.w	r3, r7, #24
 80118dc:	f107 021c 	add.w	r2, r7, #28
 80118e0:	4954      	ldr	r1, [pc, #336]	@ (8011a34 <debug_parse+0x60c>)
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fb12 	bl	8011f0c <siscanf>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d119      	bne.n	8011922 <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	f023 0301 	bic.w	r3, r3, #1
 80118f4:	461a      	mov	r2, r3
 80118f6:	4b50      	ldr	r3, [pc, #320]	@ (8011a38 <debug_parse+0x610>)
 80118f8:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 80118fe:	4b4e      	ldr	r3, [pc, #312]	@ (8011a38 <debug_parse+0x610>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4619      	mov	r1, r3
 8011904:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011906:	461a      	mov	r2, r3
 8011908:	4853      	ldr	r0, [pc, #332]	@ (8011a58 <debug_parse+0x630>)
 801190a:	f000 f9a1 	bl	8011c50 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 801190e:	4b4a      	ldr	r3, [pc, #296]	@ (8011a38 <debug_parse+0x610>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8011914:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 8011916:	4b48      	ldr	r3, [pc, #288]	@ (8011a38 <debug_parse+0x610>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	3302      	adds	r3, #2
 801191c:	4a46      	ldr	r2, [pc, #280]	@ (8011a38 <debug_parse+0x610>)
 801191e:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 8011920:	e07f      	b.n	8011a22 <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 8011922:	f107 031c 	add.w	r3, r7, #28
 8011926:	461a      	mov	r2, r3
 8011928:	4946      	ldr	r1, [pc, #280]	@ (8011a44 <debug_parse+0x61c>)
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 faee 	bl	8011f0c <siscanf>
 8011930:	4603      	mov	r3, r0
 8011932:	2b01      	cmp	r3, #1
 8011934:	d175      	bne.n	8011a22 <debug_parse+0x5fa>
			switch (temp1){
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	2b09      	cmp	r3, #9
 801193a:	d872      	bhi.n	8011a22 <debug_parse+0x5fa>
 801193c:	a201      	add	r2, pc, #4	@ (adr r2, 8011944 <debug_parse+0x51c>)
 801193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011942:	bf00      	nop
 8011944:	0801196d 	.word	0x0801196d
 8011948:	0801196d 	.word	0x0801196d
 801194c:	0801196d 	.word	0x0801196d
 8011950:	0801196d 	.word	0x0801196d
 8011954:	0801196d 	.word	0x0801196d
 8011958:	0801196d 	.word	0x0801196d
 801195c:	0801196d 	.word	0x0801196d
 8011960:	0801196d 	.word	0x0801196d
 8011964:	0801196d 	.word	0x0801196d
 8011968:	0801196d 	.word	0x0801196d
			break;
 801196c:	bf00      	nop
		break;
 801196e:	e058      	b.n	8011a22 <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8011970:	f107 031c 	add.w	r3, r7, #28
 8011974:	461a      	mov	r2, r3
 8011976:	4933      	ldr	r1, [pc, #204]	@ (8011a44 <debug_parse+0x61c>)
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 fac7 	bl	8011f0c <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 801197e:	e055      	b.n	8011a2c <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 8011980:	f107 0318 	add.w	r3, r7, #24
 8011984:	f107 021c 	add.w	r2, r7, #28
 8011988:	4934      	ldr	r1, [pc, #208]	@ (8011a5c <debug_parse+0x634>)
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 fabe 	bl	8011f0c <siscanf>
 8011990:	4603      	mov	r3, r0
 8011992:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	2b0f      	cmp	r3, #15
 8011998:	d845      	bhi.n	8011a26 <debug_parse+0x5fe>
 801199a:	a201      	add	r2, pc, #4	@ (adr r2, 80119a0 <debug_parse+0x578>)
 801199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119a0:	080119e1 	.word	0x080119e1
 80119a4:	080119e1 	.word	0x080119e1
 80119a8:	080119e1 	.word	0x080119e1
 80119ac:	080119e1 	.word	0x080119e1
 80119b0:	080119e1 	.word	0x080119e1
 80119b4:	080119e1 	.word	0x080119e1
 80119b8:	080119e1 	.word	0x080119e1
 80119bc:	080119e1 	.word	0x080119e1
 80119c0:	080119e1 	.word	0x080119e1
 80119c4:	080119e1 	.word	0x080119e1
 80119c8:	080119e1 	.word	0x080119e1
 80119cc:	080119e1 	.word	0x080119e1
 80119d0:	080119e1 	.word	0x080119e1
 80119d4:	080119e1 	.word	0x080119e1
 80119d8:	080119e1 	.word	0x080119e1
 80119dc:	080119e1 	.word	0x080119e1
			case 0:	//Y0
				{
				}
				break;
 80119e0:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 80119e2:	e020      	b.n	8011a26 <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 80119e4:	f107 0318 	add.w	r3, r7, #24
 80119e8:	f107 021c 	add.w	r2, r7, #28
 80119ec:	491c      	ldr	r1, [pc, #112]	@ (8011a60 <debug_parse+0x638>)
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fa8c 	bl	8011f0c <siscanf>
 80119f4:	4603      	mov	r3, r0
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	d017      	beq.n	8011a2a <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 80119fa:	f107 031c 	add.w	r3, r7, #28
 80119fe:	461a      	mov	r2, r3
 8011a00:	4918      	ldr	r1, [pc, #96]	@ (8011a64 <debug_parse+0x63c>)
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 fa82 	bl	8011f0c <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 8011a08:	e00f      	b.n	8011a2a <debug_parse+0x602>
		break;
 8011a0a:	bf00      	nop
 8011a0c:	e00e      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a0e:	bf00      	nop
 8011a10:	e00c      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a12:	bf00      	nop
 8011a14:	e00a      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a16:	bf00      	nop
 8011a18:	e008      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a1a:	bf00      	nop
 8011a1c:	e006      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a1e:	bf00      	nop
 8011a20:	e004      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a22:	bf00      	nop
 8011a24:	e002      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a26:	bf00      	nop
 8011a28:	e000      	b.n	8011a2c <debug_parse+0x604>
		break;
 8011a2a:	bf00      	nop
	default:
		;
	}
}
 8011a2c:	bf00      	nop
 8011a2e:	3730      	adds	r7, #48	@ 0x30
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	080132c8 	.word	0x080132c8
 8011a38:	2400010c 	.word	0x2400010c
 8011a3c:	080132d0 	.word	0x080132d0
 8011a40:	08013214 	.word	0x08013214
 8011a44:	080132e0 	.word	0x080132e0
 8011a48:	24001fd4 	.word	0x24001fd4
 8011a4c:	080132e4 	.word	0x080132e4
 8011a50:	080132f0 	.word	0x080132f0
 8011a54:	08013300 	.word	0x08013300
 8011a58:	08013308 	.word	0x08013308
 8011a5c:	08013318 	.word	0x08013318
 8011a60:	08013320 	.word	0x08013320
 8011a64:	08013328 	.word	0x08013328

08011a68 <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	2b0d      	cmp	r3, #13
 8011a76:	d003      	beq.n	8011a80 <debug_rcv+0x18>
 8011a78:	4b21      	ldr	r3, [pc, #132]	@ (8011b00 <debug_rcv+0x98>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2bff      	cmp	r3, #255	@ 0xff
 8011a7e:	d112      	bne.n	8011aa6 <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 8011a80:	4b1f      	ldr	r3, [pc, #124]	@ (8011b00 <debug_rcv+0x98>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	4a1f      	ldr	r2, [pc, #124]	@ (8011b04 <debug_rcv+0x9c>)
 8011a86:	2100      	movs	r1, #0
 8011a88:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8011b00 <debug_rcv+0x98>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d002      	beq.n	8011a98 <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 8011a92:	481c      	ldr	r0, [pc, #112]	@ (8011b04 <debug_rcv+0x9c>)
 8011a94:	f7ff fcc8 	bl	8011428 <debug_parse>
		}
		lineptr = 0;
 8011a98:	4b19      	ldr	r3, [pc, #100]	@ (8011b00 <debug_rcv+0x98>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 8011a9e:	481a      	ldr	r0, [pc, #104]	@ (8011b08 <debug_rcv+0xa0>)
 8011aa0:	f000 f8bc 	bl	8011c1c <DebugSend>
 8011aa4:	e027      	b.n	8011af6 <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 8011aa6:	79fb      	ldrb	r3, [r7, #7]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	4a18      	ldr	r2, [pc, #96]	@ (8011b0c <debug_rcv+0xa4>)
 8011aac:	4413      	add	r3, r2
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	f003 0320 	and.w	r3, r3, #32
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d010      	beq.n	8011ada <debug_rcv+0x72>
	{
		switch (ch)
 8011ab8:	79fb      	ldrb	r3, [r7, #7]
 8011aba:	2b08      	cmp	r3, #8
 8011abc:	d11b      	bne.n	8011af6 <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 8011abe:	4b10      	ldr	r3, [pc, #64]	@ (8011b00 <debug_rcv+0x98>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d016      	beq.n	8011af4 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 8011ac6:	79fb      	ldrb	r3, [r7, #7]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f865 	bl	8011b98 <DebugPutChar>
				lineptr--;
 8011ace:	4b0c      	ldr	r3, [pc, #48]	@ (8011b00 <debug_rcv+0x98>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8011b00 <debug_rcv+0x98>)
 8011ad6:	6013      	str	r3, [r2, #0]
			}
			break;
 8011ad8:	e00c      	b.n	8011af4 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 8011ada:	4b09      	ldr	r3, [pc, #36]	@ (8011b00 <debug_rcv+0x98>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	4907      	ldr	r1, [pc, #28]	@ (8011b00 <debug_rcv+0x98>)
 8011ae2:	600a      	str	r2, [r1, #0]
 8011ae4:	4907      	ldr	r1, [pc, #28]	@ (8011b04 <debug_rcv+0x9c>)
 8011ae6:	79fa      	ldrb	r2, [r7, #7]
 8011ae8:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 8011aea:	79fb      	ldrb	r3, [r7, #7]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f000 f853 	bl	8011b98 <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 8011af2:	e000      	b.n	8011af6 <debug_rcv+0x8e>
			break;
 8011af4:	bf00      	nop
}
 8011af6:	bf00      	nop
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	240030e0 	.word	0x240030e0
 8011b04:	240030e4 	.word	0x240030e4
 8011b08:	0801332c 	.word	0x0801332c
 8011b0c:	080133ac 	.word	0x080133ac

08011b10 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
	if (!InDebug) {
 8011b16:	4b1c      	ldr	r3, [pc, #112]	@ (8011b88 <DebugTask+0x78>)
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d12d      	bne.n	8011b7a <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 8011b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8011b88 <DebugTask+0x78>)
 8011b20:	2201      	movs	r2, #1
 8011b22:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 8011b24:	4b19      	ldr	r3, [pc, #100]	@ (8011b8c <DebugTask+0x7c>)
 8011b26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b2a:	4b19      	ldr	r3, [pc, #100]	@ (8011b90 <DebugTask+0x80>)
 8011b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d01f      	beq.n	8011b74 <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 8011b34:	4b16      	ldr	r3, [pc, #88]	@ (8011b90 <DebugTask+0x80>)
 8011b36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b3a:	b293      	uxth	r3, r2
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	b219      	sxth	r1, r3
 8011b42:	4b13      	ldr	r3, [pc, #76]	@ (8011b90 <DebugTask+0x80>)
 8011b44:	8019      	strh	r1, [r3, #0]
 8011b46:	4b13      	ldr	r3, [pc, #76]	@ (8011b94 <DebugTask+0x84>)
 8011b48:	5c9b      	ldrb	r3, [r3, r2]
 8011b4a:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 8011b4c:	4b10      	ldr	r3, [pc, #64]	@ (8011b90 <DebugTask+0x80>)
 8011b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b52:	2bff      	cmp	r3, #255	@ 0xff
 8011b54:	dd02      	ble.n	8011b5c <DebugTask+0x4c>
 8011b56:	4b0e      	ldr	r3, [pc, #56]	@ (8011b90 <DebugTask+0x80>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 8011b5c:	79fb      	ldrb	r3, [r7, #7]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff ff82 	bl	8011a68 <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 8011b64:	4b09      	ldr	r3, [pc, #36]	@ (8011b8c <DebugTask+0x7c>)
 8011b66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b6a:	4b09      	ldr	r3, [pc, #36]	@ (8011b90 <DebugTask+0x80>)
 8011b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d1df      	bne.n	8011b34 <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 8011b74:	4b04      	ldr	r3, [pc, #16]	@ (8011b88 <DebugTask+0x78>)
 8011b76:	2200      	movs	r2, #0
 8011b78:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 8011b7a:	f000 f881 	bl	8011c80 <DoDebugSerial>
#endif
}
 8011b7e:	bf00      	nop
 8011b80:	3708      	adds	r7, #8
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	240031e4 	.word	0x240031e4
 8011b8c:	240020d8 	.word	0x240020d8
 8011b90:	240020da 	.word	0x240020da
 8011b94:	24001fd8 	.word	0x24001fd8

08011b98 <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 8011ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8011c10 <DebugPutChar+0x78>)
 8011ba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ba8:	b293      	uxth	r3, r2
 8011baa:	3301      	adds	r3, #1
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	b219      	sxth	r1, r3
 8011bb0:	4b17      	ldr	r3, [pc, #92]	@ (8011c10 <DebugPutChar+0x78>)
 8011bb2:	8019      	strh	r1, [r3, #0]
 8011bb4:	4611      	mov	r1, r2
 8011bb6:	4a17      	ldr	r2, [pc, #92]	@ (8011c14 <DebugPutChar+0x7c>)
 8011bb8:	79fb      	ldrb	r3, [r7, #7]
 8011bba:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 8011bbc:	4b14      	ldr	r3, [pc, #80]	@ (8011c10 <DebugPutChar+0x78>)
 8011bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bc6:	db02      	blt.n	8011bce <DebugPutChar+0x36>
 8011bc8:	4b11      	ldr	r3, [pc, #68]	@ (8011c10 <DebugPutChar+0x78>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 8011bce:	4b10      	ldr	r3, [pc, #64]	@ (8011c10 <DebugPutChar+0x78>)
 8011bd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bd4:	4b10      	ldr	r3, [pc, #64]	@ (8011c18 <DebugPutChar+0x80>)
 8011bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d111      	bne.n	8011c02 <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 8011bde:	4b0e      	ldr	r3, [pc, #56]	@ (8011c18 <DebugPutChar+0x80>)
 8011be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	3301      	adds	r3, #1
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	b21a      	sxth	r2, r3
 8011bec:	4b0a      	ldr	r3, [pc, #40]	@ (8011c18 <DebugPutChar+0x80>)
 8011bee:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 8011bf0:	4b09      	ldr	r3, [pc, #36]	@ (8011c18 <DebugPutChar+0x80>)
 8011bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bfa:	db02      	blt.n	8011c02 <DebugPutChar+0x6a>
 8011bfc:	4b06      	ldr	r3, [pc, #24]	@ (8011c18 <DebugPutChar+0x80>)
 8011bfe:	2200      	movs	r2, #0
 8011c00:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 8011c02:	bf00      	nop
 8011c04:	370c      	adds	r7, #12
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop
 8011c10:	240028dc 	.word	0x240028dc
 8011c14:	240020dc 	.word	0x240020dc
 8011c18:	240028de 	.word	0x240028de

08011c1c <DebugSend>:

void DebugSend(char *message)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
	char ch = *message;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 8011c2a:	e009      	b.n	8011c40 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7ff ffb2 	bl	8011b98 <DebugPutChar>
		message++;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	3301      	adds	r3, #1
 8011c38:	607b      	str	r3, [r7, #4]
		ch = *message;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 8011c40:	7bfb      	ldrb	r3, [r7, #15]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1f2      	bne.n	8011c2c <DebugSend+0x10>
	}
}
 8011c46:	bf00      	nop
 8011c48:	bf00      	nop
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 8011c50:	b40f      	push	{r0, r1, r2, r3}
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b096      	sub	sp, #88	@ 0x58
 8011c56:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 8011c58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011c5c:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 8011c5e:	1d3b      	adds	r3, r7, #4
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 f995 	bl	8011f94 <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 8011c6a:	1d3b      	adds	r3, r7, #4
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7ff ffd5 	bl	8011c1c <DebugSend>
}
 8011c72:	bf00      	nop
 8011c74:	3758      	adds	r7, #88	@ 0x58
 8011c76:	46bd      	mov	sp, r7
 8011c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c7c:	b004      	add	sp, #16
 8011c7e:	4770      	bx	lr

08011c80 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b082      	sub	sp, #8
 8011c84:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 8011c86:	4b28      	ldr	r3, [pc, #160]	@ (8011d28 <DoDebugSerial+0xa8>)
 8011c88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c8c:	4b27      	ldr	r3, [pc, #156]	@ (8011d2c <DoDebugSerial+0xac>)
 8011c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d043      	beq.n	8011d1e <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 8011c96:	4b24      	ldr	r3, [pc, #144]	@ (8011d28 <DoDebugSerial+0xa8>)
 8011c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	4b23      	ldr	r3, [pc, #140]	@ (8011d2c <DoDebugSerial+0xac>)
 8011ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 8011cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da04      	bge.n	8011cbe <DoDebugSerial+0x3e>
 8011cb4:	88fb      	ldrh	r3, [r7, #6]
 8011cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 8011cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cc6:	dd02      	ble.n	8011cce <DoDebugSerial+0x4e>
 8011cc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ccc:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8011cce:	2300      	movs	r3, #0
 8011cd0:	80bb      	strh	r3, [r7, #4]
 8011cd2:	e01a      	b.n	8011d0a <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 8011cd4:	4b15      	ldr	r3, [pc, #84]	@ (8011d2c <DoDebugSerial+0xac>)
 8011cd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cda:	b293      	uxth	r3, r2
 8011cdc:	3301      	adds	r3, #1
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	b219      	sxth	r1, r3
 8011ce2:	4b12      	ldr	r3, [pc, #72]	@ (8011d2c <DoDebugSerial+0xac>)
 8011ce4:	8019      	strh	r1, [r3, #0]
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	88bb      	ldrh	r3, [r7, #4]
 8011cea:	4a11      	ldr	r2, [pc, #68]	@ (8011d30 <DoDebugSerial+0xb0>)
 8011cec:	5c51      	ldrb	r1, [r2, r1]
 8011cee:	4a11      	ldr	r2, [pc, #68]	@ (8011d34 <DoDebugSerial+0xb4>)
 8011cf0:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 8011cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8011d2c <DoDebugSerial+0xac>)
 8011cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cfc:	db02      	blt.n	8011d04 <DoDebugSerial+0x84>
 8011cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8011d2c <DoDebugSerial+0xac>)
 8011d00:	2200      	movs	r2, #0
 8011d02:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8011d04:	88bb      	ldrh	r3, [r7, #4]
 8011d06:	3301      	adds	r3, #1
 8011d08:	80bb      	strh	r3, [r7, #4]
 8011d0a:	88ba      	ldrh	r2, [r7, #4]
 8011d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	dbdf      	blt.n	8011cd4 <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	4619      	mov	r1, r3
 8011d18:	4806      	ldr	r0, [pc, #24]	@ (8011d34 <DoDebugSerial+0xb4>)
 8011d1a:	f7fe fe8c 	bl	8010a36 <USB_Transmit>
	}
}
 8011d1e:	bf00      	nop
 8011d20:	3708      	adds	r7, #8
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	240028dc 	.word	0x240028dc
 8011d2c:	240028de 	.word	0x240028de
 8011d30:	240020dc 	.word	0x240020dc
 8011d34:	240028e0 	.word	0x240028e0

08011d38 <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b085      	sub	sp, #20
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	460b      	mov	r3, r1
 8011d42:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 8011d44:	2300      	movs	r3, #0
 8011d46:	81fb      	strh	r3, [r7, #14]
 8011d48:	e033      	b.n	8011db2 <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 8011d4a:	89fb      	ldrh	r3, [r7, #14]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	4413      	add	r3, r2
 8011d50:	4a1d      	ldr	r2, [pc, #116]	@ (8011dc8 <USB_Receive+0x90>)
 8011d52:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011d56:	b28a      	uxth	r2, r1
 8011d58:	3201      	adds	r2, #1
 8011d5a:	b292      	uxth	r2, r2
 8011d5c:	b210      	sxth	r0, r2
 8011d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8011dc8 <USB_Receive+0x90>)
 8011d60:	8010      	strh	r0, [r2, #0]
 8011d62:	460a      	mov	r2, r1
 8011d64:	7819      	ldrb	r1, [r3, #0]
 8011d66:	4b19      	ldr	r3, [pc, #100]	@ (8011dcc <USB_Receive+0x94>)
 8011d68:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 8011d6a:	4b17      	ldr	r3, [pc, #92]	@ (8011dc8 <USB_Receive+0x90>)
 8011d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d70:	2bff      	cmp	r3, #255	@ 0xff
 8011d72:	dd02      	ble.n	8011d7a <USB_Receive+0x42>
 8011d74:	4b14      	ldr	r3, [pc, #80]	@ (8011dc8 <USB_Receive+0x90>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 8011d7a:	4b13      	ldr	r3, [pc, #76]	@ (8011dc8 <USB_Receive+0x90>)
 8011d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d80:	4b13      	ldr	r3, [pc, #76]	@ (8011dd0 <USB_Receive+0x98>)
 8011d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d110      	bne.n	8011dac <USB_Receive+0x74>
			dbg_rx_tail++;
 8011d8a:	4b11      	ldr	r3, [pc, #68]	@ (8011dd0 <USB_Receive+0x98>)
 8011d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	3301      	adds	r3, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	b21a      	sxth	r2, r3
 8011d98:	4b0d      	ldr	r3, [pc, #52]	@ (8011dd0 <USB_Receive+0x98>)
 8011d9a:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 8011d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8011dd0 <USB_Receive+0x98>)
 8011d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011da2:	2bff      	cmp	r3, #255	@ 0xff
 8011da4:	dd02      	ble.n	8011dac <USB_Receive+0x74>
 8011da6:	4b0a      	ldr	r3, [pc, #40]	@ (8011dd0 <USB_Receive+0x98>)
 8011da8:	2200      	movs	r2, #0
 8011daa:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	3301      	adds	r3, #1
 8011db0:	81fb      	strh	r3, [r7, #14]
 8011db2:	89fa      	ldrh	r2, [r7, #14]
 8011db4:	887b      	ldrh	r3, [r7, #2]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d3c7      	bcc.n	8011d4a <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3714      	adds	r7, #20
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	240020d8 	.word	0x240020d8
 8011dcc:	24001fd8 	.word	0x24001fd8
 8011dd0:	240020da 	.word	0x240020da

08011dd4 <_strtoul_l.isra.0>:
 8011dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dd8:	4e34      	ldr	r6, [pc, #208]	@ (8011eac <_strtoul_l.isra.0+0xd8>)
 8011dda:	4686      	mov	lr, r0
 8011ddc:	460d      	mov	r5, r1
 8011dde:	4628      	mov	r0, r5
 8011de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011de4:	5d37      	ldrb	r7, [r6, r4]
 8011de6:	f017 0708 	ands.w	r7, r7, #8
 8011dea:	d1f8      	bne.n	8011dde <_strtoul_l.isra.0+0xa>
 8011dec:	2c2d      	cmp	r4, #45	@ 0x2d
 8011dee:	d110      	bne.n	8011e12 <_strtoul_l.isra.0+0x3e>
 8011df0:	782c      	ldrb	r4, [r5, #0]
 8011df2:	2701      	movs	r7, #1
 8011df4:	1c85      	adds	r5, r0, #2
 8011df6:	f033 0010 	bics.w	r0, r3, #16
 8011dfa:	d115      	bne.n	8011e28 <_strtoul_l.isra.0+0x54>
 8011dfc:	2c30      	cmp	r4, #48	@ 0x30
 8011dfe:	d10d      	bne.n	8011e1c <_strtoul_l.isra.0+0x48>
 8011e00:	7828      	ldrb	r0, [r5, #0]
 8011e02:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011e06:	2858      	cmp	r0, #88	@ 0x58
 8011e08:	d108      	bne.n	8011e1c <_strtoul_l.isra.0+0x48>
 8011e0a:	786c      	ldrb	r4, [r5, #1]
 8011e0c:	3502      	adds	r5, #2
 8011e0e:	2310      	movs	r3, #16
 8011e10:	e00a      	b.n	8011e28 <_strtoul_l.isra.0+0x54>
 8011e12:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e14:	bf04      	itt	eq
 8011e16:	782c      	ldrbeq	r4, [r5, #0]
 8011e18:	1c85      	addeq	r5, r0, #2
 8011e1a:	e7ec      	b.n	8011df6 <_strtoul_l.isra.0+0x22>
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d1f6      	bne.n	8011e0e <_strtoul_l.isra.0+0x3a>
 8011e20:	2c30      	cmp	r4, #48	@ 0x30
 8011e22:	bf14      	ite	ne
 8011e24:	230a      	movne	r3, #10
 8011e26:	2308      	moveq	r3, #8
 8011e28:	f04f 38ff 	mov.w	r8, #4294967295
 8011e2c:	2600      	movs	r6, #0
 8011e2e:	fbb8 f8f3 	udiv	r8, r8, r3
 8011e32:	fb03 f908 	mul.w	r9, r3, r8
 8011e36:	ea6f 0909 	mvn.w	r9, r9
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011e40:	f1bc 0f09 	cmp.w	ip, #9
 8011e44:	d810      	bhi.n	8011e68 <_strtoul_l.isra.0+0x94>
 8011e46:	4664      	mov	r4, ip
 8011e48:	42a3      	cmp	r3, r4
 8011e4a:	dd1e      	ble.n	8011e8a <_strtoul_l.isra.0+0xb6>
 8011e4c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011e50:	d007      	beq.n	8011e62 <_strtoul_l.isra.0+0x8e>
 8011e52:	4580      	cmp	r8, r0
 8011e54:	d316      	bcc.n	8011e84 <_strtoul_l.isra.0+0xb0>
 8011e56:	d101      	bne.n	8011e5c <_strtoul_l.isra.0+0x88>
 8011e58:	45a1      	cmp	r9, r4
 8011e5a:	db13      	blt.n	8011e84 <_strtoul_l.isra.0+0xb0>
 8011e5c:	fb00 4003 	mla	r0, r0, r3, r4
 8011e60:	2601      	movs	r6, #1
 8011e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e66:	e7e9      	b.n	8011e3c <_strtoul_l.isra.0+0x68>
 8011e68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011e6c:	f1bc 0f19 	cmp.w	ip, #25
 8011e70:	d801      	bhi.n	8011e76 <_strtoul_l.isra.0+0xa2>
 8011e72:	3c37      	subs	r4, #55	@ 0x37
 8011e74:	e7e8      	b.n	8011e48 <_strtoul_l.isra.0+0x74>
 8011e76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011e7a:	f1bc 0f19 	cmp.w	ip, #25
 8011e7e:	d804      	bhi.n	8011e8a <_strtoul_l.isra.0+0xb6>
 8011e80:	3c57      	subs	r4, #87	@ 0x57
 8011e82:	e7e1      	b.n	8011e48 <_strtoul_l.isra.0+0x74>
 8011e84:	f04f 36ff 	mov.w	r6, #4294967295
 8011e88:	e7eb      	b.n	8011e62 <_strtoul_l.isra.0+0x8e>
 8011e8a:	1c73      	adds	r3, r6, #1
 8011e8c:	d106      	bne.n	8011e9c <_strtoul_l.isra.0+0xc8>
 8011e8e:	2322      	movs	r3, #34	@ 0x22
 8011e90:	f8ce 3000 	str.w	r3, [lr]
 8011e94:	4630      	mov	r0, r6
 8011e96:	b932      	cbnz	r2, 8011ea6 <_strtoul_l.isra.0+0xd2>
 8011e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e9c:	b107      	cbz	r7, 8011ea0 <_strtoul_l.isra.0+0xcc>
 8011e9e:	4240      	negs	r0, r0
 8011ea0:	2a00      	cmp	r2, #0
 8011ea2:	d0f9      	beq.n	8011e98 <_strtoul_l.isra.0+0xc4>
 8011ea4:	b106      	cbz	r6, 8011ea8 <_strtoul_l.isra.0+0xd4>
 8011ea6:	1e69      	subs	r1, r5, #1
 8011ea8:	6011      	str	r1, [r2, #0]
 8011eaa:	e7f5      	b.n	8011e98 <_strtoul_l.isra.0+0xc4>
 8011eac:	080133ad 	.word	0x080133ad

08011eb0 <_strtoul_r>:
 8011eb0:	f7ff bf90 	b.w	8011dd4 <_strtoul_l.isra.0>

08011eb4 <strtoul>:
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	460a      	mov	r2, r1
 8011eb8:	4601      	mov	r1, r0
 8011eba:	4802      	ldr	r0, [pc, #8]	@ (8011ec4 <strtoul+0x10>)
 8011ebc:	6800      	ldr	r0, [r0, #0]
 8011ebe:	f7ff bf89 	b.w	8011dd4 <_strtoul_l.isra.0>
 8011ec2:	bf00      	nop
 8011ec4:	24000110 	.word	0x24000110

08011ec8 <siprintf>:
 8011ec8:	b40e      	push	{r1, r2, r3}
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	b09d      	sub	sp, #116	@ 0x74
 8011ece:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ed0:	9002      	str	r0, [sp, #8]
 8011ed2:	9006      	str	r0, [sp, #24]
 8011ed4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ed8:	480a      	ldr	r0, [pc, #40]	@ (8011f04 <siprintf+0x3c>)
 8011eda:	9107      	str	r1, [sp, #28]
 8011edc:	9104      	str	r1, [sp, #16]
 8011ede:	490a      	ldr	r1, [pc, #40]	@ (8011f08 <siprintf+0x40>)
 8011ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ee4:	9105      	str	r1, [sp, #20]
 8011ee6:	2400      	movs	r4, #0
 8011ee8:	a902      	add	r1, sp, #8
 8011eea:	6800      	ldr	r0, [r0, #0]
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011ef0:	f000 f9e2 	bl	80122b8 <_svfiprintf_r>
 8011ef4:	9b02      	ldr	r3, [sp, #8]
 8011ef6:	701c      	strb	r4, [r3, #0]
 8011ef8:	b01d      	add	sp, #116	@ 0x74
 8011efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011efe:	b003      	add	sp, #12
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	24000110 	.word	0x24000110
 8011f08:	ffff0208 	.word	0xffff0208

08011f0c <siscanf>:
 8011f0c:	b40e      	push	{r1, r2, r3}
 8011f0e:	b570      	push	{r4, r5, r6, lr}
 8011f10:	b09d      	sub	sp, #116	@ 0x74
 8011f12:	ac21      	add	r4, sp, #132	@ 0x84
 8011f14:	2500      	movs	r5, #0
 8011f16:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011f1a:	f854 6b04 	ldr.w	r6, [r4], #4
 8011f1e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f22:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011f24:	9002      	str	r0, [sp, #8]
 8011f26:	9006      	str	r0, [sp, #24]
 8011f28:	f7ee f9da 	bl	80002e0 <strlen>
 8011f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8011f5c <siscanf+0x50>)
 8011f2e:	9003      	str	r0, [sp, #12]
 8011f30:	9007      	str	r0, [sp, #28]
 8011f32:	480b      	ldr	r0, [pc, #44]	@ (8011f60 <siscanf+0x54>)
 8011f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f3e:	4632      	mov	r2, r6
 8011f40:	4623      	mov	r3, r4
 8011f42:	a902      	add	r1, sp, #8
 8011f44:	6800      	ldr	r0, [r0, #0]
 8011f46:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011f48:	9514      	str	r5, [sp, #80]	@ 0x50
 8011f4a:	9401      	str	r4, [sp, #4]
 8011f4c:	f000 fb0a 	bl	8012564 <__ssvfiscanf_r>
 8011f50:	b01d      	add	sp, #116	@ 0x74
 8011f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f56:	b003      	add	sp, #12
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	08011f65 	.word	0x08011f65
 8011f60:	24000110 	.word	0x24000110

08011f64 <__seofread>:
 8011f64:	2000      	movs	r0, #0
 8011f66:	4770      	bx	lr

08011f68 <_vsiprintf_r>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	b09a      	sub	sp, #104	@ 0x68
 8011f6c:	2400      	movs	r4, #0
 8011f6e:	9100      	str	r1, [sp, #0]
 8011f70:	9104      	str	r1, [sp, #16]
 8011f72:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f76:	9105      	str	r1, [sp, #20]
 8011f78:	9102      	str	r1, [sp, #8]
 8011f7a:	4905      	ldr	r1, [pc, #20]	@ (8011f90 <_vsiprintf_r+0x28>)
 8011f7c:	9103      	str	r1, [sp, #12]
 8011f7e:	4669      	mov	r1, sp
 8011f80:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f82:	f000 f999 	bl	80122b8 <_svfiprintf_r>
 8011f86:	9b00      	ldr	r3, [sp, #0]
 8011f88:	701c      	strb	r4, [r3, #0]
 8011f8a:	b01a      	add	sp, #104	@ 0x68
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	bf00      	nop
 8011f90:	ffff0208 	.word	0xffff0208

08011f94 <vsiprintf>:
 8011f94:	4613      	mov	r3, r2
 8011f96:	460a      	mov	r2, r1
 8011f98:	4601      	mov	r1, r0
 8011f9a:	4802      	ldr	r0, [pc, #8]	@ (8011fa4 <vsiprintf+0x10>)
 8011f9c:	6800      	ldr	r0, [r0, #0]
 8011f9e:	f7ff bfe3 	b.w	8011f68 <_vsiprintf_r>
 8011fa2:	bf00      	nop
 8011fa4:	24000110 	.word	0x24000110

08011fa8 <memset>:
 8011fa8:	4402      	add	r2, r0
 8011faa:	4603      	mov	r3, r0
 8011fac:	4293      	cmp	r3, r2
 8011fae:	d100      	bne.n	8011fb2 <memset+0xa>
 8011fb0:	4770      	bx	lr
 8011fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8011fb6:	e7f9      	b.n	8011fac <memset+0x4>

08011fb8 <__errno>:
 8011fb8:	4b01      	ldr	r3, [pc, #4]	@ (8011fc0 <__errno+0x8>)
 8011fba:	6818      	ldr	r0, [r3, #0]
 8011fbc:	4770      	bx	lr
 8011fbe:	bf00      	nop
 8011fc0:	24000110 	.word	0x24000110

08011fc4 <__libc_init_array>:
 8011fc4:	b570      	push	{r4, r5, r6, lr}
 8011fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8011ffc <__libc_init_array+0x38>)
 8011fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8012000 <__libc_init_array+0x3c>)
 8011fca:	1b64      	subs	r4, r4, r5
 8011fcc:	10a4      	asrs	r4, r4, #2
 8011fce:	2600      	movs	r6, #0
 8011fd0:	42a6      	cmp	r6, r4
 8011fd2:	d109      	bne.n	8011fe8 <__libc_init_array+0x24>
 8011fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8012004 <__libc_init_array+0x40>)
 8011fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8012008 <__libc_init_array+0x44>)
 8011fd8:	f001 f872 	bl	80130c0 <_init>
 8011fdc:	1b64      	subs	r4, r4, r5
 8011fde:	10a4      	asrs	r4, r4, #2
 8011fe0:	2600      	movs	r6, #0
 8011fe2:	42a6      	cmp	r6, r4
 8011fe4:	d105      	bne.n	8011ff2 <__libc_init_array+0x2e>
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}
 8011fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fec:	4798      	blx	r3
 8011fee:	3601      	adds	r6, #1
 8011ff0:	e7ee      	b.n	8011fd0 <__libc_init_array+0xc>
 8011ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ff6:	4798      	blx	r3
 8011ff8:	3601      	adds	r6, #1
 8011ffa:	e7f2      	b.n	8011fe2 <__libc_init_array+0x1e>
 8011ffc:	08013504 	.word	0x08013504
 8012000:	08013504 	.word	0x08013504
 8012004:	08013504 	.word	0x08013504
 8012008:	08013508 	.word	0x08013508

0801200c <__retarget_lock_acquire_recursive>:
 801200c:	4770      	bx	lr

0801200e <__retarget_lock_release_recursive>:
 801200e:	4770      	bx	lr

08012010 <_free_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	2900      	cmp	r1, #0
 8012016:	d041      	beq.n	801209c <_free_r+0x8c>
 8012018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801201c:	1f0c      	subs	r4, r1, #4
 801201e:	2b00      	cmp	r3, #0
 8012020:	bfb8      	it	lt
 8012022:	18e4      	addlt	r4, r4, r3
 8012024:	f000 f8e0 	bl	80121e8 <__malloc_lock>
 8012028:	4a1d      	ldr	r2, [pc, #116]	@ (80120a0 <_free_r+0x90>)
 801202a:	6813      	ldr	r3, [r2, #0]
 801202c:	b933      	cbnz	r3, 801203c <_free_r+0x2c>
 801202e:	6063      	str	r3, [r4, #4]
 8012030:	6014      	str	r4, [r2, #0]
 8012032:	4628      	mov	r0, r5
 8012034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012038:	f000 b8dc 	b.w	80121f4 <__malloc_unlock>
 801203c:	42a3      	cmp	r3, r4
 801203e:	d908      	bls.n	8012052 <_free_r+0x42>
 8012040:	6820      	ldr	r0, [r4, #0]
 8012042:	1821      	adds	r1, r4, r0
 8012044:	428b      	cmp	r3, r1
 8012046:	bf01      	itttt	eq
 8012048:	6819      	ldreq	r1, [r3, #0]
 801204a:	685b      	ldreq	r3, [r3, #4]
 801204c:	1809      	addeq	r1, r1, r0
 801204e:	6021      	streq	r1, [r4, #0]
 8012050:	e7ed      	b.n	801202e <_free_r+0x1e>
 8012052:	461a      	mov	r2, r3
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	b10b      	cbz	r3, 801205c <_free_r+0x4c>
 8012058:	42a3      	cmp	r3, r4
 801205a:	d9fa      	bls.n	8012052 <_free_r+0x42>
 801205c:	6811      	ldr	r1, [r2, #0]
 801205e:	1850      	adds	r0, r2, r1
 8012060:	42a0      	cmp	r0, r4
 8012062:	d10b      	bne.n	801207c <_free_r+0x6c>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	4401      	add	r1, r0
 8012068:	1850      	adds	r0, r2, r1
 801206a:	4283      	cmp	r3, r0
 801206c:	6011      	str	r1, [r2, #0]
 801206e:	d1e0      	bne.n	8012032 <_free_r+0x22>
 8012070:	6818      	ldr	r0, [r3, #0]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	6053      	str	r3, [r2, #4]
 8012076:	4408      	add	r0, r1
 8012078:	6010      	str	r0, [r2, #0]
 801207a:	e7da      	b.n	8012032 <_free_r+0x22>
 801207c:	d902      	bls.n	8012084 <_free_r+0x74>
 801207e:	230c      	movs	r3, #12
 8012080:	602b      	str	r3, [r5, #0]
 8012082:	e7d6      	b.n	8012032 <_free_r+0x22>
 8012084:	6820      	ldr	r0, [r4, #0]
 8012086:	1821      	adds	r1, r4, r0
 8012088:	428b      	cmp	r3, r1
 801208a:	bf04      	itt	eq
 801208c:	6819      	ldreq	r1, [r3, #0]
 801208e:	685b      	ldreq	r3, [r3, #4]
 8012090:	6063      	str	r3, [r4, #4]
 8012092:	bf04      	itt	eq
 8012094:	1809      	addeq	r1, r1, r0
 8012096:	6021      	streq	r1, [r4, #0]
 8012098:	6054      	str	r4, [r2, #4]
 801209a:	e7ca      	b.n	8012032 <_free_r+0x22>
 801209c:	bd38      	pop	{r3, r4, r5, pc}
 801209e:	bf00      	nop
 80120a0:	2400332c 	.word	0x2400332c

080120a4 <sbrk_aligned>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	4e0f      	ldr	r6, [pc, #60]	@ (80120e4 <sbrk_aligned+0x40>)
 80120a8:	460c      	mov	r4, r1
 80120aa:	6831      	ldr	r1, [r6, #0]
 80120ac:	4605      	mov	r5, r0
 80120ae:	b911      	cbnz	r1, 80120b6 <sbrk_aligned+0x12>
 80120b0:	f000 ff36 	bl	8012f20 <_sbrk_r>
 80120b4:	6030      	str	r0, [r6, #0]
 80120b6:	4621      	mov	r1, r4
 80120b8:	4628      	mov	r0, r5
 80120ba:	f000 ff31 	bl	8012f20 <_sbrk_r>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	d103      	bne.n	80120ca <sbrk_aligned+0x26>
 80120c2:	f04f 34ff 	mov.w	r4, #4294967295
 80120c6:	4620      	mov	r0, r4
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	1cc4      	adds	r4, r0, #3
 80120cc:	f024 0403 	bic.w	r4, r4, #3
 80120d0:	42a0      	cmp	r0, r4
 80120d2:	d0f8      	beq.n	80120c6 <sbrk_aligned+0x22>
 80120d4:	1a21      	subs	r1, r4, r0
 80120d6:	4628      	mov	r0, r5
 80120d8:	f000 ff22 	bl	8012f20 <_sbrk_r>
 80120dc:	3001      	adds	r0, #1
 80120de:	d1f2      	bne.n	80120c6 <sbrk_aligned+0x22>
 80120e0:	e7ef      	b.n	80120c2 <sbrk_aligned+0x1e>
 80120e2:	bf00      	nop
 80120e4:	24003328 	.word	0x24003328

080120e8 <_malloc_r>:
 80120e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120ec:	1ccd      	adds	r5, r1, #3
 80120ee:	f025 0503 	bic.w	r5, r5, #3
 80120f2:	3508      	adds	r5, #8
 80120f4:	2d0c      	cmp	r5, #12
 80120f6:	bf38      	it	cc
 80120f8:	250c      	movcc	r5, #12
 80120fa:	2d00      	cmp	r5, #0
 80120fc:	4606      	mov	r6, r0
 80120fe:	db01      	blt.n	8012104 <_malloc_r+0x1c>
 8012100:	42a9      	cmp	r1, r5
 8012102:	d904      	bls.n	801210e <_malloc_r+0x26>
 8012104:	230c      	movs	r3, #12
 8012106:	6033      	str	r3, [r6, #0]
 8012108:	2000      	movs	r0, #0
 801210a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801210e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121e4 <_malloc_r+0xfc>
 8012112:	f000 f869 	bl	80121e8 <__malloc_lock>
 8012116:	f8d8 3000 	ldr.w	r3, [r8]
 801211a:	461c      	mov	r4, r3
 801211c:	bb44      	cbnz	r4, 8012170 <_malloc_r+0x88>
 801211e:	4629      	mov	r1, r5
 8012120:	4630      	mov	r0, r6
 8012122:	f7ff ffbf 	bl	80120a4 <sbrk_aligned>
 8012126:	1c43      	adds	r3, r0, #1
 8012128:	4604      	mov	r4, r0
 801212a:	d158      	bne.n	80121de <_malloc_r+0xf6>
 801212c:	f8d8 4000 	ldr.w	r4, [r8]
 8012130:	4627      	mov	r7, r4
 8012132:	2f00      	cmp	r7, #0
 8012134:	d143      	bne.n	80121be <_malloc_r+0xd6>
 8012136:	2c00      	cmp	r4, #0
 8012138:	d04b      	beq.n	80121d2 <_malloc_r+0xea>
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	4639      	mov	r1, r7
 801213e:	4630      	mov	r0, r6
 8012140:	eb04 0903 	add.w	r9, r4, r3
 8012144:	f000 feec 	bl	8012f20 <_sbrk_r>
 8012148:	4581      	cmp	r9, r0
 801214a:	d142      	bne.n	80121d2 <_malloc_r+0xea>
 801214c:	6821      	ldr	r1, [r4, #0]
 801214e:	1a6d      	subs	r5, r5, r1
 8012150:	4629      	mov	r1, r5
 8012152:	4630      	mov	r0, r6
 8012154:	f7ff ffa6 	bl	80120a4 <sbrk_aligned>
 8012158:	3001      	adds	r0, #1
 801215a:	d03a      	beq.n	80121d2 <_malloc_r+0xea>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	442b      	add	r3, r5
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	f8d8 3000 	ldr.w	r3, [r8]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	bb62      	cbnz	r2, 80121c4 <_malloc_r+0xdc>
 801216a:	f8c8 7000 	str.w	r7, [r8]
 801216e:	e00f      	b.n	8012190 <_malloc_r+0xa8>
 8012170:	6822      	ldr	r2, [r4, #0]
 8012172:	1b52      	subs	r2, r2, r5
 8012174:	d420      	bmi.n	80121b8 <_malloc_r+0xd0>
 8012176:	2a0b      	cmp	r2, #11
 8012178:	d917      	bls.n	80121aa <_malloc_r+0xc2>
 801217a:	1961      	adds	r1, r4, r5
 801217c:	42a3      	cmp	r3, r4
 801217e:	6025      	str	r5, [r4, #0]
 8012180:	bf18      	it	ne
 8012182:	6059      	strne	r1, [r3, #4]
 8012184:	6863      	ldr	r3, [r4, #4]
 8012186:	bf08      	it	eq
 8012188:	f8c8 1000 	streq.w	r1, [r8]
 801218c:	5162      	str	r2, [r4, r5]
 801218e:	604b      	str	r3, [r1, #4]
 8012190:	4630      	mov	r0, r6
 8012192:	f000 f82f 	bl	80121f4 <__malloc_unlock>
 8012196:	f104 000b 	add.w	r0, r4, #11
 801219a:	1d23      	adds	r3, r4, #4
 801219c:	f020 0007 	bic.w	r0, r0, #7
 80121a0:	1ac2      	subs	r2, r0, r3
 80121a2:	bf1c      	itt	ne
 80121a4:	1a1b      	subne	r3, r3, r0
 80121a6:	50a3      	strne	r3, [r4, r2]
 80121a8:	e7af      	b.n	801210a <_malloc_r+0x22>
 80121aa:	6862      	ldr	r2, [r4, #4]
 80121ac:	42a3      	cmp	r3, r4
 80121ae:	bf0c      	ite	eq
 80121b0:	f8c8 2000 	streq.w	r2, [r8]
 80121b4:	605a      	strne	r2, [r3, #4]
 80121b6:	e7eb      	b.n	8012190 <_malloc_r+0xa8>
 80121b8:	4623      	mov	r3, r4
 80121ba:	6864      	ldr	r4, [r4, #4]
 80121bc:	e7ae      	b.n	801211c <_malloc_r+0x34>
 80121be:	463c      	mov	r4, r7
 80121c0:	687f      	ldr	r7, [r7, #4]
 80121c2:	e7b6      	b.n	8012132 <_malloc_r+0x4a>
 80121c4:	461a      	mov	r2, r3
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	42a3      	cmp	r3, r4
 80121ca:	d1fb      	bne.n	80121c4 <_malloc_r+0xdc>
 80121cc:	2300      	movs	r3, #0
 80121ce:	6053      	str	r3, [r2, #4]
 80121d0:	e7de      	b.n	8012190 <_malloc_r+0xa8>
 80121d2:	230c      	movs	r3, #12
 80121d4:	6033      	str	r3, [r6, #0]
 80121d6:	4630      	mov	r0, r6
 80121d8:	f000 f80c 	bl	80121f4 <__malloc_unlock>
 80121dc:	e794      	b.n	8012108 <_malloc_r+0x20>
 80121de:	6005      	str	r5, [r0, #0]
 80121e0:	e7d6      	b.n	8012190 <_malloc_r+0xa8>
 80121e2:	bf00      	nop
 80121e4:	2400332c 	.word	0x2400332c

080121e8 <__malloc_lock>:
 80121e8:	4801      	ldr	r0, [pc, #4]	@ (80121f0 <__malloc_lock+0x8>)
 80121ea:	f7ff bf0f 	b.w	801200c <__retarget_lock_acquire_recursive>
 80121ee:	bf00      	nop
 80121f0:	24003324 	.word	0x24003324

080121f4 <__malloc_unlock>:
 80121f4:	4801      	ldr	r0, [pc, #4]	@ (80121fc <__malloc_unlock+0x8>)
 80121f6:	f7ff bf0a 	b.w	801200e <__retarget_lock_release_recursive>
 80121fa:	bf00      	nop
 80121fc:	24003324 	.word	0x24003324

08012200 <__ssputs_r>:
 8012200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012204:	688e      	ldr	r6, [r1, #8]
 8012206:	461f      	mov	r7, r3
 8012208:	42be      	cmp	r6, r7
 801220a:	680b      	ldr	r3, [r1, #0]
 801220c:	4682      	mov	sl, r0
 801220e:	460c      	mov	r4, r1
 8012210:	4690      	mov	r8, r2
 8012212:	d82d      	bhi.n	8012270 <__ssputs_r+0x70>
 8012214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801221c:	d026      	beq.n	801226c <__ssputs_r+0x6c>
 801221e:	6965      	ldr	r5, [r4, #20]
 8012220:	6909      	ldr	r1, [r1, #16]
 8012222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012226:	eba3 0901 	sub.w	r9, r3, r1
 801222a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801222e:	1c7b      	adds	r3, r7, #1
 8012230:	444b      	add	r3, r9
 8012232:	106d      	asrs	r5, r5, #1
 8012234:	429d      	cmp	r5, r3
 8012236:	bf38      	it	cc
 8012238:	461d      	movcc	r5, r3
 801223a:	0553      	lsls	r3, r2, #21
 801223c:	d527      	bpl.n	801228e <__ssputs_r+0x8e>
 801223e:	4629      	mov	r1, r5
 8012240:	f7ff ff52 	bl	80120e8 <_malloc_r>
 8012244:	4606      	mov	r6, r0
 8012246:	b360      	cbz	r0, 80122a2 <__ssputs_r+0xa2>
 8012248:	6921      	ldr	r1, [r4, #16]
 801224a:	464a      	mov	r2, r9
 801224c:	f000 fe78 	bl	8012f40 <memcpy>
 8012250:	89a3      	ldrh	r3, [r4, #12]
 8012252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801225a:	81a3      	strh	r3, [r4, #12]
 801225c:	6126      	str	r6, [r4, #16]
 801225e:	6165      	str	r5, [r4, #20]
 8012260:	444e      	add	r6, r9
 8012262:	eba5 0509 	sub.w	r5, r5, r9
 8012266:	6026      	str	r6, [r4, #0]
 8012268:	60a5      	str	r5, [r4, #8]
 801226a:	463e      	mov	r6, r7
 801226c:	42be      	cmp	r6, r7
 801226e:	d900      	bls.n	8012272 <__ssputs_r+0x72>
 8012270:	463e      	mov	r6, r7
 8012272:	6820      	ldr	r0, [r4, #0]
 8012274:	4632      	mov	r2, r6
 8012276:	4641      	mov	r1, r8
 8012278:	f000 fe37 	bl	8012eea <memmove>
 801227c:	68a3      	ldr	r3, [r4, #8]
 801227e:	1b9b      	subs	r3, r3, r6
 8012280:	60a3      	str	r3, [r4, #8]
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	4433      	add	r3, r6
 8012286:	6023      	str	r3, [r4, #0]
 8012288:	2000      	movs	r0, #0
 801228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801228e:	462a      	mov	r2, r5
 8012290:	f000 fe64 	bl	8012f5c <_realloc_r>
 8012294:	4606      	mov	r6, r0
 8012296:	2800      	cmp	r0, #0
 8012298:	d1e0      	bne.n	801225c <__ssputs_r+0x5c>
 801229a:	6921      	ldr	r1, [r4, #16]
 801229c:	4650      	mov	r0, sl
 801229e:	f7ff feb7 	bl	8012010 <_free_r>
 80122a2:	230c      	movs	r3, #12
 80122a4:	f8ca 3000 	str.w	r3, [sl]
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122ae:	81a3      	strh	r3, [r4, #12]
 80122b0:	f04f 30ff 	mov.w	r0, #4294967295
 80122b4:	e7e9      	b.n	801228a <__ssputs_r+0x8a>
	...

080122b8 <_svfiprintf_r>:
 80122b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122bc:	4698      	mov	r8, r3
 80122be:	898b      	ldrh	r3, [r1, #12]
 80122c0:	061b      	lsls	r3, r3, #24
 80122c2:	b09d      	sub	sp, #116	@ 0x74
 80122c4:	4607      	mov	r7, r0
 80122c6:	460d      	mov	r5, r1
 80122c8:	4614      	mov	r4, r2
 80122ca:	d510      	bpl.n	80122ee <_svfiprintf_r+0x36>
 80122cc:	690b      	ldr	r3, [r1, #16]
 80122ce:	b973      	cbnz	r3, 80122ee <_svfiprintf_r+0x36>
 80122d0:	2140      	movs	r1, #64	@ 0x40
 80122d2:	f7ff ff09 	bl	80120e8 <_malloc_r>
 80122d6:	6028      	str	r0, [r5, #0]
 80122d8:	6128      	str	r0, [r5, #16]
 80122da:	b930      	cbnz	r0, 80122ea <_svfiprintf_r+0x32>
 80122dc:	230c      	movs	r3, #12
 80122de:	603b      	str	r3, [r7, #0]
 80122e0:	f04f 30ff 	mov.w	r0, #4294967295
 80122e4:	b01d      	add	sp, #116	@ 0x74
 80122e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ea:	2340      	movs	r3, #64	@ 0x40
 80122ec:	616b      	str	r3, [r5, #20]
 80122ee:	2300      	movs	r3, #0
 80122f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80122f2:	2320      	movs	r3, #32
 80122f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80122fc:	2330      	movs	r3, #48	@ 0x30
 80122fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801249c <_svfiprintf_r+0x1e4>
 8012302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012306:	f04f 0901 	mov.w	r9, #1
 801230a:	4623      	mov	r3, r4
 801230c:	469a      	mov	sl, r3
 801230e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012312:	b10a      	cbz	r2, 8012318 <_svfiprintf_r+0x60>
 8012314:	2a25      	cmp	r2, #37	@ 0x25
 8012316:	d1f9      	bne.n	801230c <_svfiprintf_r+0x54>
 8012318:	ebba 0b04 	subs.w	fp, sl, r4
 801231c:	d00b      	beq.n	8012336 <_svfiprintf_r+0x7e>
 801231e:	465b      	mov	r3, fp
 8012320:	4622      	mov	r2, r4
 8012322:	4629      	mov	r1, r5
 8012324:	4638      	mov	r0, r7
 8012326:	f7ff ff6b 	bl	8012200 <__ssputs_r>
 801232a:	3001      	adds	r0, #1
 801232c:	f000 80a7 	beq.w	801247e <_svfiprintf_r+0x1c6>
 8012330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012332:	445a      	add	r2, fp
 8012334:	9209      	str	r2, [sp, #36]	@ 0x24
 8012336:	f89a 3000 	ldrb.w	r3, [sl]
 801233a:	2b00      	cmp	r3, #0
 801233c:	f000 809f 	beq.w	801247e <_svfiprintf_r+0x1c6>
 8012340:	2300      	movs	r3, #0
 8012342:	f04f 32ff 	mov.w	r2, #4294967295
 8012346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801234a:	f10a 0a01 	add.w	sl, sl, #1
 801234e:	9304      	str	r3, [sp, #16]
 8012350:	9307      	str	r3, [sp, #28]
 8012352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012356:	931a      	str	r3, [sp, #104]	@ 0x68
 8012358:	4654      	mov	r4, sl
 801235a:	2205      	movs	r2, #5
 801235c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012360:	484e      	ldr	r0, [pc, #312]	@ (801249c <_svfiprintf_r+0x1e4>)
 8012362:	f7ed ffc5 	bl	80002f0 <memchr>
 8012366:	9a04      	ldr	r2, [sp, #16]
 8012368:	b9d8      	cbnz	r0, 80123a2 <_svfiprintf_r+0xea>
 801236a:	06d0      	lsls	r0, r2, #27
 801236c:	bf44      	itt	mi
 801236e:	2320      	movmi	r3, #32
 8012370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012374:	0711      	lsls	r1, r2, #28
 8012376:	bf44      	itt	mi
 8012378:	232b      	movmi	r3, #43	@ 0x2b
 801237a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801237e:	f89a 3000 	ldrb.w	r3, [sl]
 8012382:	2b2a      	cmp	r3, #42	@ 0x2a
 8012384:	d015      	beq.n	80123b2 <_svfiprintf_r+0xfa>
 8012386:	9a07      	ldr	r2, [sp, #28]
 8012388:	4654      	mov	r4, sl
 801238a:	2000      	movs	r0, #0
 801238c:	f04f 0c0a 	mov.w	ip, #10
 8012390:	4621      	mov	r1, r4
 8012392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012396:	3b30      	subs	r3, #48	@ 0x30
 8012398:	2b09      	cmp	r3, #9
 801239a:	d94b      	bls.n	8012434 <_svfiprintf_r+0x17c>
 801239c:	b1b0      	cbz	r0, 80123cc <_svfiprintf_r+0x114>
 801239e:	9207      	str	r2, [sp, #28]
 80123a0:	e014      	b.n	80123cc <_svfiprintf_r+0x114>
 80123a2:	eba0 0308 	sub.w	r3, r0, r8
 80123a6:	fa09 f303 	lsl.w	r3, r9, r3
 80123aa:	4313      	orrs	r3, r2
 80123ac:	9304      	str	r3, [sp, #16]
 80123ae:	46a2      	mov	sl, r4
 80123b0:	e7d2      	b.n	8012358 <_svfiprintf_r+0xa0>
 80123b2:	9b03      	ldr	r3, [sp, #12]
 80123b4:	1d19      	adds	r1, r3, #4
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	9103      	str	r1, [sp, #12]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	bfbb      	ittet	lt
 80123be:	425b      	neglt	r3, r3
 80123c0:	f042 0202 	orrlt.w	r2, r2, #2
 80123c4:	9307      	strge	r3, [sp, #28]
 80123c6:	9307      	strlt	r3, [sp, #28]
 80123c8:	bfb8      	it	lt
 80123ca:	9204      	strlt	r2, [sp, #16]
 80123cc:	7823      	ldrb	r3, [r4, #0]
 80123ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80123d0:	d10a      	bne.n	80123e8 <_svfiprintf_r+0x130>
 80123d2:	7863      	ldrb	r3, [r4, #1]
 80123d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80123d6:	d132      	bne.n	801243e <_svfiprintf_r+0x186>
 80123d8:	9b03      	ldr	r3, [sp, #12]
 80123da:	1d1a      	adds	r2, r3, #4
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	9203      	str	r2, [sp, #12]
 80123e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123e4:	3402      	adds	r4, #2
 80123e6:	9305      	str	r3, [sp, #20]
 80123e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80124ac <_svfiprintf_r+0x1f4>
 80123ec:	7821      	ldrb	r1, [r4, #0]
 80123ee:	2203      	movs	r2, #3
 80123f0:	4650      	mov	r0, sl
 80123f2:	f7ed ff7d 	bl	80002f0 <memchr>
 80123f6:	b138      	cbz	r0, 8012408 <_svfiprintf_r+0x150>
 80123f8:	9b04      	ldr	r3, [sp, #16]
 80123fa:	eba0 000a 	sub.w	r0, r0, sl
 80123fe:	2240      	movs	r2, #64	@ 0x40
 8012400:	4082      	lsls	r2, r0
 8012402:	4313      	orrs	r3, r2
 8012404:	3401      	adds	r4, #1
 8012406:	9304      	str	r3, [sp, #16]
 8012408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801240c:	4824      	ldr	r0, [pc, #144]	@ (80124a0 <_svfiprintf_r+0x1e8>)
 801240e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012412:	2206      	movs	r2, #6
 8012414:	f7ed ff6c 	bl	80002f0 <memchr>
 8012418:	2800      	cmp	r0, #0
 801241a:	d036      	beq.n	801248a <_svfiprintf_r+0x1d2>
 801241c:	4b21      	ldr	r3, [pc, #132]	@ (80124a4 <_svfiprintf_r+0x1ec>)
 801241e:	bb1b      	cbnz	r3, 8012468 <_svfiprintf_r+0x1b0>
 8012420:	9b03      	ldr	r3, [sp, #12]
 8012422:	3307      	adds	r3, #7
 8012424:	f023 0307 	bic.w	r3, r3, #7
 8012428:	3308      	adds	r3, #8
 801242a:	9303      	str	r3, [sp, #12]
 801242c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801242e:	4433      	add	r3, r6
 8012430:	9309      	str	r3, [sp, #36]	@ 0x24
 8012432:	e76a      	b.n	801230a <_svfiprintf_r+0x52>
 8012434:	fb0c 3202 	mla	r2, ip, r2, r3
 8012438:	460c      	mov	r4, r1
 801243a:	2001      	movs	r0, #1
 801243c:	e7a8      	b.n	8012390 <_svfiprintf_r+0xd8>
 801243e:	2300      	movs	r3, #0
 8012440:	3401      	adds	r4, #1
 8012442:	9305      	str	r3, [sp, #20]
 8012444:	4619      	mov	r1, r3
 8012446:	f04f 0c0a 	mov.w	ip, #10
 801244a:	4620      	mov	r0, r4
 801244c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012450:	3a30      	subs	r2, #48	@ 0x30
 8012452:	2a09      	cmp	r2, #9
 8012454:	d903      	bls.n	801245e <_svfiprintf_r+0x1a6>
 8012456:	2b00      	cmp	r3, #0
 8012458:	d0c6      	beq.n	80123e8 <_svfiprintf_r+0x130>
 801245a:	9105      	str	r1, [sp, #20]
 801245c:	e7c4      	b.n	80123e8 <_svfiprintf_r+0x130>
 801245e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012462:	4604      	mov	r4, r0
 8012464:	2301      	movs	r3, #1
 8012466:	e7f0      	b.n	801244a <_svfiprintf_r+0x192>
 8012468:	ab03      	add	r3, sp, #12
 801246a:	9300      	str	r3, [sp, #0]
 801246c:	462a      	mov	r2, r5
 801246e:	4b0e      	ldr	r3, [pc, #56]	@ (80124a8 <_svfiprintf_r+0x1f0>)
 8012470:	a904      	add	r1, sp, #16
 8012472:	4638      	mov	r0, r7
 8012474:	f3af 8000 	nop.w
 8012478:	1c42      	adds	r2, r0, #1
 801247a:	4606      	mov	r6, r0
 801247c:	d1d6      	bne.n	801242c <_svfiprintf_r+0x174>
 801247e:	89ab      	ldrh	r3, [r5, #12]
 8012480:	065b      	lsls	r3, r3, #25
 8012482:	f53f af2d 	bmi.w	80122e0 <_svfiprintf_r+0x28>
 8012486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012488:	e72c      	b.n	80122e4 <_svfiprintf_r+0x2c>
 801248a:	ab03      	add	r3, sp, #12
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	462a      	mov	r2, r5
 8012490:	4b05      	ldr	r3, [pc, #20]	@ (80124a8 <_svfiprintf_r+0x1f0>)
 8012492:	a904      	add	r1, sp, #16
 8012494:	4638      	mov	r0, r7
 8012496:	f000 fa49 	bl	801292c <_printf_i>
 801249a:	e7ed      	b.n	8012478 <_svfiprintf_r+0x1c0>
 801249c:	080134ad 	.word	0x080134ad
 80124a0:	080134b7 	.word	0x080134b7
 80124a4:	00000000 	.word	0x00000000
 80124a8:	08012201 	.word	0x08012201
 80124ac:	080134b3 	.word	0x080134b3

080124b0 <_sungetc_r>:
 80124b0:	b538      	push	{r3, r4, r5, lr}
 80124b2:	1c4b      	adds	r3, r1, #1
 80124b4:	4614      	mov	r4, r2
 80124b6:	d103      	bne.n	80124c0 <_sungetc_r+0x10>
 80124b8:	f04f 35ff 	mov.w	r5, #4294967295
 80124bc:	4628      	mov	r0, r5
 80124be:	bd38      	pop	{r3, r4, r5, pc}
 80124c0:	8993      	ldrh	r3, [r2, #12]
 80124c2:	f023 0320 	bic.w	r3, r3, #32
 80124c6:	8193      	strh	r3, [r2, #12]
 80124c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124ca:	6852      	ldr	r2, [r2, #4]
 80124cc:	b2cd      	uxtb	r5, r1
 80124ce:	b18b      	cbz	r3, 80124f4 <_sungetc_r+0x44>
 80124d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80124d2:	4293      	cmp	r3, r2
 80124d4:	dd08      	ble.n	80124e8 <_sungetc_r+0x38>
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	1e5a      	subs	r2, r3, #1
 80124da:	6022      	str	r2, [r4, #0]
 80124dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80124e0:	6863      	ldr	r3, [r4, #4]
 80124e2:	3301      	adds	r3, #1
 80124e4:	6063      	str	r3, [r4, #4]
 80124e6:	e7e9      	b.n	80124bc <_sungetc_r+0xc>
 80124e8:	4621      	mov	r1, r4
 80124ea:	f000 fcc4 	bl	8012e76 <__submore>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d0f1      	beq.n	80124d6 <_sungetc_r+0x26>
 80124f2:	e7e1      	b.n	80124b8 <_sungetc_r+0x8>
 80124f4:	6921      	ldr	r1, [r4, #16]
 80124f6:	6823      	ldr	r3, [r4, #0]
 80124f8:	b151      	cbz	r1, 8012510 <_sungetc_r+0x60>
 80124fa:	4299      	cmp	r1, r3
 80124fc:	d208      	bcs.n	8012510 <_sungetc_r+0x60>
 80124fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012502:	42a9      	cmp	r1, r5
 8012504:	d104      	bne.n	8012510 <_sungetc_r+0x60>
 8012506:	3b01      	subs	r3, #1
 8012508:	3201      	adds	r2, #1
 801250a:	6023      	str	r3, [r4, #0]
 801250c:	6062      	str	r2, [r4, #4]
 801250e:	e7d5      	b.n	80124bc <_sungetc_r+0xc>
 8012510:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012518:	6363      	str	r3, [r4, #52]	@ 0x34
 801251a:	2303      	movs	r3, #3
 801251c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801251e:	4623      	mov	r3, r4
 8012520:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	2301      	movs	r3, #1
 8012528:	e7dc      	b.n	80124e4 <_sungetc_r+0x34>

0801252a <__ssrefill_r>:
 801252a:	b510      	push	{r4, lr}
 801252c:	460c      	mov	r4, r1
 801252e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012530:	b169      	cbz	r1, 801254e <__ssrefill_r+0x24>
 8012532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012536:	4299      	cmp	r1, r3
 8012538:	d001      	beq.n	801253e <__ssrefill_r+0x14>
 801253a:	f7ff fd69 	bl	8012010 <_free_r>
 801253e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012540:	6063      	str	r3, [r4, #4]
 8012542:	2000      	movs	r0, #0
 8012544:	6360      	str	r0, [r4, #52]	@ 0x34
 8012546:	b113      	cbz	r3, 801254e <__ssrefill_r+0x24>
 8012548:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801254a:	6023      	str	r3, [r4, #0]
 801254c:	bd10      	pop	{r4, pc}
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	2300      	movs	r3, #0
 8012554:	6063      	str	r3, [r4, #4]
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	f043 0320 	orr.w	r3, r3, #32
 801255c:	81a3      	strh	r3, [r4, #12]
 801255e:	f04f 30ff 	mov.w	r0, #4294967295
 8012562:	e7f3      	b.n	801254c <__ssrefill_r+0x22>

08012564 <__ssvfiscanf_r>:
 8012564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012568:	460c      	mov	r4, r1
 801256a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801256e:	2100      	movs	r1, #0
 8012570:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012574:	49a6      	ldr	r1, [pc, #664]	@ (8012810 <__ssvfiscanf_r+0x2ac>)
 8012576:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012578:	f10d 0804 	add.w	r8, sp, #4
 801257c:	49a5      	ldr	r1, [pc, #660]	@ (8012814 <__ssvfiscanf_r+0x2b0>)
 801257e:	4fa6      	ldr	r7, [pc, #664]	@ (8012818 <__ssvfiscanf_r+0x2b4>)
 8012580:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012584:	4606      	mov	r6, r0
 8012586:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	f892 9000 	ldrb.w	r9, [r2]
 801258e:	f1b9 0f00 	cmp.w	r9, #0
 8012592:	f000 8158 	beq.w	8012846 <__ssvfiscanf_r+0x2e2>
 8012596:	f817 3009 	ldrb.w	r3, [r7, r9]
 801259a:	f013 0308 	ands.w	r3, r3, #8
 801259e:	f102 0501 	add.w	r5, r2, #1
 80125a2:	d019      	beq.n	80125d8 <__ssvfiscanf_r+0x74>
 80125a4:	6863      	ldr	r3, [r4, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	dd0f      	ble.n	80125ca <__ssvfiscanf_r+0x66>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	781a      	ldrb	r2, [r3, #0]
 80125ae:	5cba      	ldrb	r2, [r7, r2]
 80125b0:	0712      	lsls	r2, r2, #28
 80125b2:	d401      	bmi.n	80125b8 <__ssvfiscanf_r+0x54>
 80125b4:	462a      	mov	r2, r5
 80125b6:	e7e8      	b.n	801258a <__ssvfiscanf_r+0x26>
 80125b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80125ba:	3201      	adds	r2, #1
 80125bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80125be:	6862      	ldr	r2, [r4, #4]
 80125c0:	3301      	adds	r3, #1
 80125c2:	3a01      	subs	r2, #1
 80125c4:	6062      	str	r2, [r4, #4]
 80125c6:	6023      	str	r3, [r4, #0]
 80125c8:	e7ec      	b.n	80125a4 <__ssvfiscanf_r+0x40>
 80125ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125cc:	4621      	mov	r1, r4
 80125ce:	4630      	mov	r0, r6
 80125d0:	4798      	blx	r3
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d0e9      	beq.n	80125aa <__ssvfiscanf_r+0x46>
 80125d6:	e7ed      	b.n	80125b4 <__ssvfiscanf_r+0x50>
 80125d8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80125dc:	f040 8085 	bne.w	80126ea <__ssvfiscanf_r+0x186>
 80125e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80125e2:	9343      	str	r3, [sp, #268]	@ 0x10c
 80125e4:	7853      	ldrb	r3, [r2, #1]
 80125e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125e8:	bf02      	ittt	eq
 80125ea:	2310      	moveq	r3, #16
 80125ec:	1c95      	addeq	r5, r2, #2
 80125ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80125f0:	220a      	movs	r2, #10
 80125f2:	46aa      	mov	sl, r5
 80125f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80125f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80125fc:	2b09      	cmp	r3, #9
 80125fe:	d91e      	bls.n	801263e <__ssvfiscanf_r+0xda>
 8012600:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801281c <__ssvfiscanf_r+0x2b8>
 8012604:	2203      	movs	r2, #3
 8012606:	4658      	mov	r0, fp
 8012608:	f7ed fe72 	bl	80002f0 <memchr>
 801260c:	b138      	cbz	r0, 801261e <__ssvfiscanf_r+0xba>
 801260e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012610:	eba0 000b 	sub.w	r0, r0, fp
 8012614:	2301      	movs	r3, #1
 8012616:	4083      	lsls	r3, r0
 8012618:	4313      	orrs	r3, r2
 801261a:	9341      	str	r3, [sp, #260]	@ 0x104
 801261c:	4655      	mov	r5, sl
 801261e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012622:	2b78      	cmp	r3, #120	@ 0x78
 8012624:	d806      	bhi.n	8012634 <__ssvfiscanf_r+0xd0>
 8012626:	2b57      	cmp	r3, #87	@ 0x57
 8012628:	d810      	bhi.n	801264c <__ssvfiscanf_r+0xe8>
 801262a:	2b25      	cmp	r3, #37	@ 0x25
 801262c:	d05d      	beq.n	80126ea <__ssvfiscanf_r+0x186>
 801262e:	d857      	bhi.n	80126e0 <__ssvfiscanf_r+0x17c>
 8012630:	2b00      	cmp	r3, #0
 8012632:	d075      	beq.n	8012720 <__ssvfiscanf_r+0x1bc>
 8012634:	2303      	movs	r3, #3
 8012636:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012638:	230a      	movs	r3, #10
 801263a:	9342      	str	r3, [sp, #264]	@ 0x108
 801263c:	e088      	b.n	8012750 <__ssvfiscanf_r+0x1ec>
 801263e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012640:	fb02 1103 	mla	r1, r2, r3, r1
 8012644:	3930      	subs	r1, #48	@ 0x30
 8012646:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012648:	4655      	mov	r5, sl
 801264a:	e7d2      	b.n	80125f2 <__ssvfiscanf_r+0x8e>
 801264c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012650:	2a20      	cmp	r2, #32
 8012652:	d8ef      	bhi.n	8012634 <__ssvfiscanf_r+0xd0>
 8012654:	a101      	add	r1, pc, #4	@ (adr r1, 801265c <__ssvfiscanf_r+0xf8>)
 8012656:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801265a:	bf00      	nop
 801265c:	0801272f 	.word	0x0801272f
 8012660:	08012635 	.word	0x08012635
 8012664:	08012635 	.word	0x08012635
 8012668:	08012789 	.word	0x08012789
 801266c:	08012635 	.word	0x08012635
 8012670:	08012635 	.word	0x08012635
 8012674:	08012635 	.word	0x08012635
 8012678:	08012635 	.word	0x08012635
 801267c:	08012635 	.word	0x08012635
 8012680:	08012635 	.word	0x08012635
 8012684:	08012635 	.word	0x08012635
 8012688:	0801279f 	.word	0x0801279f
 801268c:	08012785 	.word	0x08012785
 8012690:	080126e7 	.word	0x080126e7
 8012694:	080126e7 	.word	0x080126e7
 8012698:	080126e7 	.word	0x080126e7
 801269c:	08012635 	.word	0x08012635
 80126a0:	08012741 	.word	0x08012741
 80126a4:	08012635 	.word	0x08012635
 80126a8:	08012635 	.word	0x08012635
 80126ac:	08012635 	.word	0x08012635
 80126b0:	08012635 	.word	0x08012635
 80126b4:	080127af 	.word	0x080127af
 80126b8:	08012749 	.word	0x08012749
 80126bc:	08012727 	.word	0x08012727
 80126c0:	08012635 	.word	0x08012635
 80126c4:	08012635 	.word	0x08012635
 80126c8:	080127ab 	.word	0x080127ab
 80126cc:	08012635 	.word	0x08012635
 80126d0:	08012785 	.word	0x08012785
 80126d4:	08012635 	.word	0x08012635
 80126d8:	08012635 	.word	0x08012635
 80126dc:	0801272f 	.word	0x0801272f
 80126e0:	3b45      	subs	r3, #69	@ 0x45
 80126e2:	2b02      	cmp	r3, #2
 80126e4:	d8a6      	bhi.n	8012634 <__ssvfiscanf_r+0xd0>
 80126e6:	2305      	movs	r3, #5
 80126e8:	e031      	b.n	801274e <__ssvfiscanf_r+0x1ea>
 80126ea:	6863      	ldr	r3, [r4, #4]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	dd0d      	ble.n	801270c <__ssvfiscanf_r+0x1a8>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	781a      	ldrb	r2, [r3, #0]
 80126f4:	454a      	cmp	r2, r9
 80126f6:	f040 80a6 	bne.w	8012846 <__ssvfiscanf_r+0x2e2>
 80126fa:	3301      	adds	r3, #1
 80126fc:	6862      	ldr	r2, [r4, #4]
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012702:	3a01      	subs	r2, #1
 8012704:	3301      	adds	r3, #1
 8012706:	6062      	str	r2, [r4, #4]
 8012708:	9345      	str	r3, [sp, #276]	@ 0x114
 801270a:	e753      	b.n	80125b4 <__ssvfiscanf_r+0x50>
 801270c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801270e:	4621      	mov	r1, r4
 8012710:	4630      	mov	r0, r6
 8012712:	4798      	blx	r3
 8012714:	2800      	cmp	r0, #0
 8012716:	d0eb      	beq.n	80126f0 <__ssvfiscanf_r+0x18c>
 8012718:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801271a:	2800      	cmp	r0, #0
 801271c:	f040 808b 	bne.w	8012836 <__ssvfiscanf_r+0x2d2>
 8012720:	f04f 30ff 	mov.w	r0, #4294967295
 8012724:	e08b      	b.n	801283e <__ssvfiscanf_r+0x2da>
 8012726:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012728:	f042 0220 	orr.w	r2, r2, #32
 801272c:	9241      	str	r2, [sp, #260]	@ 0x104
 801272e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012734:	9241      	str	r2, [sp, #260]	@ 0x104
 8012736:	2210      	movs	r2, #16
 8012738:	2b6e      	cmp	r3, #110	@ 0x6e
 801273a:	9242      	str	r2, [sp, #264]	@ 0x108
 801273c:	d902      	bls.n	8012744 <__ssvfiscanf_r+0x1e0>
 801273e:	e005      	b.n	801274c <__ssvfiscanf_r+0x1e8>
 8012740:	2300      	movs	r3, #0
 8012742:	9342      	str	r3, [sp, #264]	@ 0x108
 8012744:	2303      	movs	r3, #3
 8012746:	e002      	b.n	801274e <__ssvfiscanf_r+0x1ea>
 8012748:	2308      	movs	r3, #8
 801274a:	9342      	str	r3, [sp, #264]	@ 0x108
 801274c:	2304      	movs	r3, #4
 801274e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012750:	6863      	ldr	r3, [r4, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	dd39      	ble.n	80127ca <__ssvfiscanf_r+0x266>
 8012756:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012758:	0659      	lsls	r1, r3, #25
 801275a:	d404      	bmi.n	8012766 <__ssvfiscanf_r+0x202>
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	781a      	ldrb	r2, [r3, #0]
 8012760:	5cba      	ldrb	r2, [r7, r2]
 8012762:	0712      	lsls	r2, r2, #28
 8012764:	d438      	bmi.n	80127d8 <__ssvfiscanf_r+0x274>
 8012766:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012768:	2b02      	cmp	r3, #2
 801276a:	dc47      	bgt.n	80127fc <__ssvfiscanf_r+0x298>
 801276c:	466b      	mov	r3, sp
 801276e:	4622      	mov	r2, r4
 8012770:	a941      	add	r1, sp, #260	@ 0x104
 8012772:	4630      	mov	r0, r6
 8012774:	f000 f9f8 	bl	8012b68 <_scanf_chars>
 8012778:	2801      	cmp	r0, #1
 801277a:	d064      	beq.n	8012846 <__ssvfiscanf_r+0x2e2>
 801277c:	2802      	cmp	r0, #2
 801277e:	f47f af19 	bne.w	80125b4 <__ssvfiscanf_r+0x50>
 8012782:	e7c9      	b.n	8012718 <__ssvfiscanf_r+0x1b4>
 8012784:	220a      	movs	r2, #10
 8012786:	e7d7      	b.n	8012738 <__ssvfiscanf_r+0x1d4>
 8012788:	4629      	mov	r1, r5
 801278a:	4640      	mov	r0, r8
 801278c:	f000 fb3a 	bl	8012e04 <__sccl>
 8012790:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012796:	9341      	str	r3, [sp, #260]	@ 0x104
 8012798:	4605      	mov	r5, r0
 801279a:	2301      	movs	r3, #1
 801279c:	e7d7      	b.n	801274e <__ssvfiscanf_r+0x1ea>
 801279e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80127a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80127a6:	2300      	movs	r3, #0
 80127a8:	e7d1      	b.n	801274e <__ssvfiscanf_r+0x1ea>
 80127aa:	2302      	movs	r3, #2
 80127ac:	e7cf      	b.n	801274e <__ssvfiscanf_r+0x1ea>
 80127ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80127b0:	06c3      	lsls	r3, r0, #27
 80127b2:	f53f aeff 	bmi.w	80125b4 <__ssvfiscanf_r+0x50>
 80127b6:	9b00      	ldr	r3, [sp, #0]
 80127b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80127ba:	1d19      	adds	r1, r3, #4
 80127bc:	9100      	str	r1, [sp, #0]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	07c0      	lsls	r0, r0, #31
 80127c2:	bf4c      	ite	mi
 80127c4:	801a      	strhmi	r2, [r3, #0]
 80127c6:	601a      	strpl	r2, [r3, #0]
 80127c8:	e6f4      	b.n	80125b4 <__ssvfiscanf_r+0x50>
 80127ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80127cc:	4621      	mov	r1, r4
 80127ce:	4630      	mov	r0, r6
 80127d0:	4798      	blx	r3
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d0bf      	beq.n	8012756 <__ssvfiscanf_r+0x1f2>
 80127d6:	e79f      	b.n	8012718 <__ssvfiscanf_r+0x1b4>
 80127d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80127da:	3201      	adds	r2, #1
 80127dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80127de:	6862      	ldr	r2, [r4, #4]
 80127e0:	3a01      	subs	r2, #1
 80127e2:	2a00      	cmp	r2, #0
 80127e4:	6062      	str	r2, [r4, #4]
 80127e6:	dd02      	ble.n	80127ee <__ssvfiscanf_r+0x28a>
 80127e8:	3301      	adds	r3, #1
 80127ea:	6023      	str	r3, [r4, #0]
 80127ec:	e7b6      	b.n	801275c <__ssvfiscanf_r+0x1f8>
 80127ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80127f0:	4621      	mov	r1, r4
 80127f2:	4630      	mov	r0, r6
 80127f4:	4798      	blx	r3
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d0b0      	beq.n	801275c <__ssvfiscanf_r+0x1f8>
 80127fa:	e78d      	b.n	8012718 <__ssvfiscanf_r+0x1b4>
 80127fc:	2b04      	cmp	r3, #4
 80127fe:	dc0f      	bgt.n	8012820 <__ssvfiscanf_r+0x2bc>
 8012800:	466b      	mov	r3, sp
 8012802:	4622      	mov	r2, r4
 8012804:	a941      	add	r1, sp, #260	@ 0x104
 8012806:	4630      	mov	r0, r6
 8012808:	f000 fa08 	bl	8012c1c <_scanf_i>
 801280c:	e7b4      	b.n	8012778 <__ssvfiscanf_r+0x214>
 801280e:	bf00      	nop
 8012810:	080124b1 	.word	0x080124b1
 8012814:	0801252b 	.word	0x0801252b
 8012818:	080133ad 	.word	0x080133ad
 801281c:	080134b3 	.word	0x080134b3
 8012820:	4b0a      	ldr	r3, [pc, #40]	@ (801284c <__ssvfiscanf_r+0x2e8>)
 8012822:	2b00      	cmp	r3, #0
 8012824:	f43f aec6 	beq.w	80125b4 <__ssvfiscanf_r+0x50>
 8012828:	466b      	mov	r3, sp
 801282a:	4622      	mov	r2, r4
 801282c:	a941      	add	r1, sp, #260	@ 0x104
 801282e:	4630      	mov	r0, r6
 8012830:	f3af 8000 	nop.w
 8012834:	e7a0      	b.n	8012778 <__ssvfiscanf_r+0x214>
 8012836:	89a3      	ldrh	r3, [r4, #12]
 8012838:	065b      	lsls	r3, r3, #25
 801283a:	f53f af71 	bmi.w	8012720 <__ssvfiscanf_r+0x1bc>
 801283e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8012842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012846:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012848:	e7f9      	b.n	801283e <__ssvfiscanf_r+0x2da>
 801284a:	bf00      	nop
 801284c:	00000000 	.word	0x00000000

08012850 <_printf_common>:
 8012850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012854:	4616      	mov	r6, r2
 8012856:	4698      	mov	r8, r3
 8012858:	688a      	ldr	r2, [r1, #8]
 801285a:	690b      	ldr	r3, [r1, #16]
 801285c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012860:	4293      	cmp	r3, r2
 8012862:	bfb8      	it	lt
 8012864:	4613      	movlt	r3, r2
 8012866:	6033      	str	r3, [r6, #0]
 8012868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801286c:	4607      	mov	r7, r0
 801286e:	460c      	mov	r4, r1
 8012870:	b10a      	cbz	r2, 8012876 <_printf_common+0x26>
 8012872:	3301      	adds	r3, #1
 8012874:	6033      	str	r3, [r6, #0]
 8012876:	6823      	ldr	r3, [r4, #0]
 8012878:	0699      	lsls	r1, r3, #26
 801287a:	bf42      	ittt	mi
 801287c:	6833      	ldrmi	r3, [r6, #0]
 801287e:	3302      	addmi	r3, #2
 8012880:	6033      	strmi	r3, [r6, #0]
 8012882:	6825      	ldr	r5, [r4, #0]
 8012884:	f015 0506 	ands.w	r5, r5, #6
 8012888:	d106      	bne.n	8012898 <_printf_common+0x48>
 801288a:	f104 0a19 	add.w	sl, r4, #25
 801288e:	68e3      	ldr	r3, [r4, #12]
 8012890:	6832      	ldr	r2, [r6, #0]
 8012892:	1a9b      	subs	r3, r3, r2
 8012894:	42ab      	cmp	r3, r5
 8012896:	dc26      	bgt.n	80128e6 <_printf_common+0x96>
 8012898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801289c:	6822      	ldr	r2, [r4, #0]
 801289e:	3b00      	subs	r3, #0
 80128a0:	bf18      	it	ne
 80128a2:	2301      	movne	r3, #1
 80128a4:	0692      	lsls	r2, r2, #26
 80128a6:	d42b      	bmi.n	8012900 <_printf_common+0xb0>
 80128a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80128ac:	4641      	mov	r1, r8
 80128ae:	4638      	mov	r0, r7
 80128b0:	47c8      	blx	r9
 80128b2:	3001      	adds	r0, #1
 80128b4:	d01e      	beq.n	80128f4 <_printf_common+0xa4>
 80128b6:	6823      	ldr	r3, [r4, #0]
 80128b8:	6922      	ldr	r2, [r4, #16]
 80128ba:	f003 0306 	and.w	r3, r3, #6
 80128be:	2b04      	cmp	r3, #4
 80128c0:	bf02      	ittt	eq
 80128c2:	68e5      	ldreq	r5, [r4, #12]
 80128c4:	6833      	ldreq	r3, [r6, #0]
 80128c6:	1aed      	subeq	r5, r5, r3
 80128c8:	68a3      	ldr	r3, [r4, #8]
 80128ca:	bf0c      	ite	eq
 80128cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128d0:	2500      	movne	r5, #0
 80128d2:	4293      	cmp	r3, r2
 80128d4:	bfc4      	itt	gt
 80128d6:	1a9b      	subgt	r3, r3, r2
 80128d8:	18ed      	addgt	r5, r5, r3
 80128da:	2600      	movs	r6, #0
 80128dc:	341a      	adds	r4, #26
 80128de:	42b5      	cmp	r5, r6
 80128e0:	d11a      	bne.n	8012918 <_printf_common+0xc8>
 80128e2:	2000      	movs	r0, #0
 80128e4:	e008      	b.n	80128f8 <_printf_common+0xa8>
 80128e6:	2301      	movs	r3, #1
 80128e8:	4652      	mov	r2, sl
 80128ea:	4641      	mov	r1, r8
 80128ec:	4638      	mov	r0, r7
 80128ee:	47c8      	blx	r9
 80128f0:	3001      	adds	r0, #1
 80128f2:	d103      	bne.n	80128fc <_printf_common+0xac>
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fc:	3501      	adds	r5, #1
 80128fe:	e7c6      	b.n	801288e <_printf_common+0x3e>
 8012900:	18e1      	adds	r1, r4, r3
 8012902:	1c5a      	adds	r2, r3, #1
 8012904:	2030      	movs	r0, #48	@ 0x30
 8012906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801290a:	4422      	add	r2, r4
 801290c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012914:	3302      	adds	r3, #2
 8012916:	e7c7      	b.n	80128a8 <_printf_common+0x58>
 8012918:	2301      	movs	r3, #1
 801291a:	4622      	mov	r2, r4
 801291c:	4641      	mov	r1, r8
 801291e:	4638      	mov	r0, r7
 8012920:	47c8      	blx	r9
 8012922:	3001      	adds	r0, #1
 8012924:	d0e6      	beq.n	80128f4 <_printf_common+0xa4>
 8012926:	3601      	adds	r6, #1
 8012928:	e7d9      	b.n	80128de <_printf_common+0x8e>
	...

0801292c <_printf_i>:
 801292c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012930:	7e0f      	ldrb	r7, [r1, #24]
 8012932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012934:	2f78      	cmp	r7, #120	@ 0x78
 8012936:	4691      	mov	r9, r2
 8012938:	4680      	mov	r8, r0
 801293a:	460c      	mov	r4, r1
 801293c:	469a      	mov	sl, r3
 801293e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012942:	d807      	bhi.n	8012954 <_printf_i+0x28>
 8012944:	2f62      	cmp	r7, #98	@ 0x62
 8012946:	d80a      	bhi.n	801295e <_printf_i+0x32>
 8012948:	2f00      	cmp	r7, #0
 801294a:	f000 80d1 	beq.w	8012af0 <_printf_i+0x1c4>
 801294e:	2f58      	cmp	r7, #88	@ 0x58
 8012950:	f000 80b8 	beq.w	8012ac4 <_printf_i+0x198>
 8012954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801295c:	e03a      	b.n	80129d4 <_printf_i+0xa8>
 801295e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012962:	2b15      	cmp	r3, #21
 8012964:	d8f6      	bhi.n	8012954 <_printf_i+0x28>
 8012966:	a101      	add	r1, pc, #4	@ (adr r1, 801296c <_printf_i+0x40>)
 8012968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801296c:	080129c5 	.word	0x080129c5
 8012970:	080129d9 	.word	0x080129d9
 8012974:	08012955 	.word	0x08012955
 8012978:	08012955 	.word	0x08012955
 801297c:	08012955 	.word	0x08012955
 8012980:	08012955 	.word	0x08012955
 8012984:	080129d9 	.word	0x080129d9
 8012988:	08012955 	.word	0x08012955
 801298c:	08012955 	.word	0x08012955
 8012990:	08012955 	.word	0x08012955
 8012994:	08012955 	.word	0x08012955
 8012998:	08012ad7 	.word	0x08012ad7
 801299c:	08012a03 	.word	0x08012a03
 80129a0:	08012a91 	.word	0x08012a91
 80129a4:	08012955 	.word	0x08012955
 80129a8:	08012955 	.word	0x08012955
 80129ac:	08012af9 	.word	0x08012af9
 80129b0:	08012955 	.word	0x08012955
 80129b4:	08012a03 	.word	0x08012a03
 80129b8:	08012955 	.word	0x08012955
 80129bc:	08012955 	.word	0x08012955
 80129c0:	08012a99 	.word	0x08012a99
 80129c4:	6833      	ldr	r3, [r6, #0]
 80129c6:	1d1a      	adds	r2, r3, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	6032      	str	r2, [r6, #0]
 80129cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80129d4:	2301      	movs	r3, #1
 80129d6:	e09c      	b.n	8012b12 <_printf_i+0x1e6>
 80129d8:	6833      	ldr	r3, [r6, #0]
 80129da:	6820      	ldr	r0, [r4, #0]
 80129dc:	1d19      	adds	r1, r3, #4
 80129de:	6031      	str	r1, [r6, #0]
 80129e0:	0606      	lsls	r6, r0, #24
 80129e2:	d501      	bpl.n	80129e8 <_printf_i+0xbc>
 80129e4:	681d      	ldr	r5, [r3, #0]
 80129e6:	e003      	b.n	80129f0 <_printf_i+0xc4>
 80129e8:	0645      	lsls	r5, r0, #25
 80129ea:	d5fb      	bpl.n	80129e4 <_printf_i+0xb8>
 80129ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80129f0:	2d00      	cmp	r5, #0
 80129f2:	da03      	bge.n	80129fc <_printf_i+0xd0>
 80129f4:	232d      	movs	r3, #45	@ 0x2d
 80129f6:	426d      	negs	r5, r5
 80129f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129fc:	4858      	ldr	r0, [pc, #352]	@ (8012b60 <_printf_i+0x234>)
 80129fe:	230a      	movs	r3, #10
 8012a00:	e011      	b.n	8012a26 <_printf_i+0xfa>
 8012a02:	6821      	ldr	r1, [r4, #0]
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	0608      	lsls	r0, r1, #24
 8012a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a0c:	d402      	bmi.n	8012a14 <_printf_i+0xe8>
 8012a0e:	0649      	lsls	r1, r1, #25
 8012a10:	bf48      	it	mi
 8012a12:	b2ad      	uxthmi	r5, r5
 8012a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a16:	4852      	ldr	r0, [pc, #328]	@ (8012b60 <_printf_i+0x234>)
 8012a18:	6033      	str	r3, [r6, #0]
 8012a1a:	bf14      	ite	ne
 8012a1c:	230a      	movne	r3, #10
 8012a1e:	2308      	moveq	r3, #8
 8012a20:	2100      	movs	r1, #0
 8012a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a26:	6866      	ldr	r6, [r4, #4]
 8012a28:	60a6      	str	r6, [r4, #8]
 8012a2a:	2e00      	cmp	r6, #0
 8012a2c:	db05      	blt.n	8012a3a <_printf_i+0x10e>
 8012a2e:	6821      	ldr	r1, [r4, #0]
 8012a30:	432e      	orrs	r6, r5
 8012a32:	f021 0104 	bic.w	r1, r1, #4
 8012a36:	6021      	str	r1, [r4, #0]
 8012a38:	d04b      	beq.n	8012ad2 <_printf_i+0x1a6>
 8012a3a:	4616      	mov	r6, r2
 8012a3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a40:	fb03 5711 	mls	r7, r3, r1, r5
 8012a44:	5dc7      	ldrb	r7, [r0, r7]
 8012a46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a4a:	462f      	mov	r7, r5
 8012a4c:	42bb      	cmp	r3, r7
 8012a4e:	460d      	mov	r5, r1
 8012a50:	d9f4      	bls.n	8012a3c <_printf_i+0x110>
 8012a52:	2b08      	cmp	r3, #8
 8012a54:	d10b      	bne.n	8012a6e <_printf_i+0x142>
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	07df      	lsls	r7, r3, #31
 8012a5a:	d508      	bpl.n	8012a6e <_printf_i+0x142>
 8012a5c:	6923      	ldr	r3, [r4, #16]
 8012a5e:	6861      	ldr	r1, [r4, #4]
 8012a60:	4299      	cmp	r1, r3
 8012a62:	bfde      	ittt	le
 8012a64:	2330      	movle	r3, #48	@ 0x30
 8012a66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012a6e:	1b92      	subs	r2, r2, r6
 8012a70:	6122      	str	r2, [r4, #16]
 8012a72:	f8cd a000 	str.w	sl, [sp]
 8012a76:	464b      	mov	r3, r9
 8012a78:	aa03      	add	r2, sp, #12
 8012a7a:	4621      	mov	r1, r4
 8012a7c:	4640      	mov	r0, r8
 8012a7e:	f7ff fee7 	bl	8012850 <_printf_common>
 8012a82:	3001      	adds	r0, #1
 8012a84:	d14a      	bne.n	8012b1c <_printf_i+0x1f0>
 8012a86:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8a:	b004      	add	sp, #16
 8012a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	f043 0320 	orr.w	r3, r3, #32
 8012a96:	6023      	str	r3, [r4, #0]
 8012a98:	4832      	ldr	r0, [pc, #200]	@ (8012b64 <_printf_i+0x238>)
 8012a9a:	2778      	movs	r7, #120	@ 0x78
 8012a9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	6831      	ldr	r1, [r6, #0]
 8012aa4:	061f      	lsls	r7, r3, #24
 8012aa6:	f851 5b04 	ldr.w	r5, [r1], #4
 8012aaa:	d402      	bmi.n	8012ab2 <_printf_i+0x186>
 8012aac:	065f      	lsls	r7, r3, #25
 8012aae:	bf48      	it	mi
 8012ab0:	b2ad      	uxthmi	r5, r5
 8012ab2:	6031      	str	r1, [r6, #0]
 8012ab4:	07d9      	lsls	r1, r3, #31
 8012ab6:	bf44      	itt	mi
 8012ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8012abc:	6023      	strmi	r3, [r4, #0]
 8012abe:	b11d      	cbz	r5, 8012ac8 <_printf_i+0x19c>
 8012ac0:	2310      	movs	r3, #16
 8012ac2:	e7ad      	b.n	8012a20 <_printf_i+0xf4>
 8012ac4:	4826      	ldr	r0, [pc, #152]	@ (8012b60 <_printf_i+0x234>)
 8012ac6:	e7e9      	b.n	8012a9c <_printf_i+0x170>
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	f023 0320 	bic.w	r3, r3, #32
 8012ace:	6023      	str	r3, [r4, #0]
 8012ad0:	e7f6      	b.n	8012ac0 <_printf_i+0x194>
 8012ad2:	4616      	mov	r6, r2
 8012ad4:	e7bd      	b.n	8012a52 <_printf_i+0x126>
 8012ad6:	6833      	ldr	r3, [r6, #0]
 8012ad8:	6825      	ldr	r5, [r4, #0]
 8012ada:	6961      	ldr	r1, [r4, #20]
 8012adc:	1d18      	adds	r0, r3, #4
 8012ade:	6030      	str	r0, [r6, #0]
 8012ae0:	062e      	lsls	r6, r5, #24
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	d501      	bpl.n	8012aea <_printf_i+0x1be>
 8012ae6:	6019      	str	r1, [r3, #0]
 8012ae8:	e002      	b.n	8012af0 <_printf_i+0x1c4>
 8012aea:	0668      	lsls	r0, r5, #25
 8012aec:	d5fb      	bpl.n	8012ae6 <_printf_i+0x1ba>
 8012aee:	8019      	strh	r1, [r3, #0]
 8012af0:	2300      	movs	r3, #0
 8012af2:	6123      	str	r3, [r4, #16]
 8012af4:	4616      	mov	r6, r2
 8012af6:	e7bc      	b.n	8012a72 <_printf_i+0x146>
 8012af8:	6833      	ldr	r3, [r6, #0]
 8012afa:	1d1a      	adds	r2, r3, #4
 8012afc:	6032      	str	r2, [r6, #0]
 8012afe:	681e      	ldr	r6, [r3, #0]
 8012b00:	6862      	ldr	r2, [r4, #4]
 8012b02:	2100      	movs	r1, #0
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7ed fbf3 	bl	80002f0 <memchr>
 8012b0a:	b108      	cbz	r0, 8012b10 <_printf_i+0x1e4>
 8012b0c:	1b80      	subs	r0, r0, r6
 8012b0e:	6060      	str	r0, [r4, #4]
 8012b10:	6863      	ldr	r3, [r4, #4]
 8012b12:	6123      	str	r3, [r4, #16]
 8012b14:	2300      	movs	r3, #0
 8012b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b1a:	e7aa      	b.n	8012a72 <_printf_i+0x146>
 8012b1c:	6923      	ldr	r3, [r4, #16]
 8012b1e:	4632      	mov	r2, r6
 8012b20:	4649      	mov	r1, r9
 8012b22:	4640      	mov	r0, r8
 8012b24:	47d0      	blx	sl
 8012b26:	3001      	adds	r0, #1
 8012b28:	d0ad      	beq.n	8012a86 <_printf_i+0x15a>
 8012b2a:	6823      	ldr	r3, [r4, #0]
 8012b2c:	079b      	lsls	r3, r3, #30
 8012b2e:	d413      	bmi.n	8012b58 <_printf_i+0x22c>
 8012b30:	68e0      	ldr	r0, [r4, #12]
 8012b32:	9b03      	ldr	r3, [sp, #12]
 8012b34:	4298      	cmp	r0, r3
 8012b36:	bfb8      	it	lt
 8012b38:	4618      	movlt	r0, r3
 8012b3a:	e7a6      	b.n	8012a8a <_printf_i+0x15e>
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	4632      	mov	r2, r6
 8012b40:	4649      	mov	r1, r9
 8012b42:	4640      	mov	r0, r8
 8012b44:	47d0      	blx	sl
 8012b46:	3001      	adds	r0, #1
 8012b48:	d09d      	beq.n	8012a86 <_printf_i+0x15a>
 8012b4a:	3501      	adds	r5, #1
 8012b4c:	68e3      	ldr	r3, [r4, #12]
 8012b4e:	9903      	ldr	r1, [sp, #12]
 8012b50:	1a5b      	subs	r3, r3, r1
 8012b52:	42ab      	cmp	r3, r5
 8012b54:	dcf2      	bgt.n	8012b3c <_printf_i+0x210>
 8012b56:	e7eb      	b.n	8012b30 <_printf_i+0x204>
 8012b58:	2500      	movs	r5, #0
 8012b5a:	f104 0619 	add.w	r6, r4, #25
 8012b5e:	e7f5      	b.n	8012b4c <_printf_i+0x220>
 8012b60:	080134be 	.word	0x080134be
 8012b64:	080134cf 	.word	0x080134cf

08012b68 <_scanf_chars>:
 8012b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b6c:	4615      	mov	r5, r2
 8012b6e:	688a      	ldr	r2, [r1, #8]
 8012b70:	4680      	mov	r8, r0
 8012b72:	460c      	mov	r4, r1
 8012b74:	b932      	cbnz	r2, 8012b84 <_scanf_chars+0x1c>
 8012b76:	698a      	ldr	r2, [r1, #24]
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	bf14      	ite	ne
 8012b7c:	f04f 32ff 	movne.w	r2, #4294967295
 8012b80:	2201      	moveq	r2, #1
 8012b82:	608a      	str	r2, [r1, #8]
 8012b84:	6822      	ldr	r2, [r4, #0]
 8012b86:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012c18 <_scanf_chars+0xb0>
 8012b8a:	06d1      	lsls	r1, r2, #27
 8012b8c:	bf5f      	itttt	pl
 8012b8e:	681a      	ldrpl	r2, [r3, #0]
 8012b90:	1d11      	addpl	r1, r2, #4
 8012b92:	6019      	strpl	r1, [r3, #0]
 8012b94:	6816      	ldrpl	r6, [r2, #0]
 8012b96:	2700      	movs	r7, #0
 8012b98:	69a0      	ldr	r0, [r4, #24]
 8012b9a:	b188      	cbz	r0, 8012bc0 <_scanf_chars+0x58>
 8012b9c:	2801      	cmp	r0, #1
 8012b9e:	d107      	bne.n	8012bb0 <_scanf_chars+0x48>
 8012ba0:	682b      	ldr	r3, [r5, #0]
 8012ba2:	781a      	ldrb	r2, [r3, #0]
 8012ba4:	6963      	ldr	r3, [r4, #20]
 8012ba6:	5c9b      	ldrb	r3, [r3, r2]
 8012ba8:	b953      	cbnz	r3, 8012bc0 <_scanf_chars+0x58>
 8012baa:	2f00      	cmp	r7, #0
 8012bac:	d031      	beq.n	8012c12 <_scanf_chars+0xaa>
 8012bae:	e022      	b.n	8012bf6 <_scanf_chars+0x8e>
 8012bb0:	2802      	cmp	r0, #2
 8012bb2:	d120      	bne.n	8012bf6 <_scanf_chars+0x8e>
 8012bb4:	682b      	ldr	r3, [r5, #0]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012bbc:	071b      	lsls	r3, r3, #28
 8012bbe:	d41a      	bmi.n	8012bf6 <_scanf_chars+0x8e>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	06da      	lsls	r2, r3, #27
 8012bc4:	bf5e      	ittt	pl
 8012bc6:	682b      	ldrpl	r3, [r5, #0]
 8012bc8:	781b      	ldrbpl	r3, [r3, #0]
 8012bca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012bce:	682a      	ldr	r2, [r5, #0]
 8012bd0:	686b      	ldr	r3, [r5, #4]
 8012bd2:	3201      	adds	r2, #1
 8012bd4:	602a      	str	r2, [r5, #0]
 8012bd6:	68a2      	ldr	r2, [r4, #8]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	3a01      	subs	r2, #1
 8012bdc:	606b      	str	r3, [r5, #4]
 8012bde:	3701      	adds	r7, #1
 8012be0:	60a2      	str	r2, [r4, #8]
 8012be2:	b142      	cbz	r2, 8012bf6 <_scanf_chars+0x8e>
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dcd7      	bgt.n	8012b98 <_scanf_chars+0x30>
 8012be8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012bec:	4629      	mov	r1, r5
 8012bee:	4640      	mov	r0, r8
 8012bf0:	4798      	blx	r3
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d0d0      	beq.n	8012b98 <_scanf_chars+0x30>
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	f013 0310 	ands.w	r3, r3, #16
 8012bfc:	d105      	bne.n	8012c0a <_scanf_chars+0xa2>
 8012bfe:	68e2      	ldr	r2, [r4, #12]
 8012c00:	3201      	adds	r2, #1
 8012c02:	60e2      	str	r2, [r4, #12]
 8012c04:	69a2      	ldr	r2, [r4, #24]
 8012c06:	b102      	cbz	r2, 8012c0a <_scanf_chars+0xa2>
 8012c08:	7033      	strb	r3, [r6, #0]
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	443b      	add	r3, r7
 8012c0e:	6123      	str	r3, [r4, #16]
 8012c10:	2000      	movs	r0, #0
 8012c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c16:	bf00      	nop
 8012c18:	080133ad 	.word	0x080133ad

08012c1c <_scanf_i>:
 8012c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c20:	4698      	mov	r8, r3
 8012c22:	4b74      	ldr	r3, [pc, #464]	@ (8012df4 <_scanf_i+0x1d8>)
 8012c24:	460c      	mov	r4, r1
 8012c26:	4682      	mov	sl, r0
 8012c28:	4616      	mov	r6, r2
 8012c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c2e:	b087      	sub	sp, #28
 8012c30:	ab03      	add	r3, sp, #12
 8012c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012c36:	4b70      	ldr	r3, [pc, #448]	@ (8012df8 <_scanf_i+0x1dc>)
 8012c38:	69a1      	ldr	r1, [r4, #24]
 8012c3a:	4a70      	ldr	r2, [pc, #448]	@ (8012dfc <_scanf_i+0x1e0>)
 8012c3c:	2903      	cmp	r1, #3
 8012c3e:	bf08      	it	eq
 8012c40:	461a      	moveq	r2, r3
 8012c42:	68a3      	ldr	r3, [r4, #8]
 8012c44:	9201      	str	r2, [sp, #4]
 8012c46:	1e5a      	subs	r2, r3, #1
 8012c48:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012c4c:	bf88      	it	hi
 8012c4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012c52:	4627      	mov	r7, r4
 8012c54:	bf82      	ittt	hi
 8012c56:	eb03 0905 	addhi.w	r9, r3, r5
 8012c5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012c5e:	60a3      	strhi	r3, [r4, #8]
 8012c60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012c64:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012c68:	bf98      	it	ls
 8012c6a:	f04f 0900 	movls.w	r9, #0
 8012c6e:	6023      	str	r3, [r4, #0]
 8012c70:	463d      	mov	r5, r7
 8012c72:	f04f 0b00 	mov.w	fp, #0
 8012c76:	6831      	ldr	r1, [r6, #0]
 8012c78:	ab03      	add	r3, sp, #12
 8012c7a:	7809      	ldrb	r1, [r1, #0]
 8012c7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012c80:	2202      	movs	r2, #2
 8012c82:	f7ed fb35 	bl	80002f0 <memchr>
 8012c86:	b328      	cbz	r0, 8012cd4 <_scanf_i+0xb8>
 8012c88:	f1bb 0f01 	cmp.w	fp, #1
 8012c8c:	d159      	bne.n	8012d42 <_scanf_i+0x126>
 8012c8e:	6862      	ldr	r2, [r4, #4]
 8012c90:	b92a      	cbnz	r2, 8012c9e <_scanf_i+0x82>
 8012c92:	6822      	ldr	r2, [r4, #0]
 8012c94:	2108      	movs	r1, #8
 8012c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012c9a:	6061      	str	r1, [r4, #4]
 8012c9c:	6022      	str	r2, [r4, #0]
 8012c9e:	6822      	ldr	r2, [r4, #0]
 8012ca0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012ca4:	6022      	str	r2, [r4, #0]
 8012ca6:	68a2      	ldr	r2, [r4, #8]
 8012ca8:	1e51      	subs	r1, r2, #1
 8012caa:	60a1      	str	r1, [r4, #8]
 8012cac:	b192      	cbz	r2, 8012cd4 <_scanf_i+0xb8>
 8012cae:	6832      	ldr	r2, [r6, #0]
 8012cb0:	1c51      	adds	r1, r2, #1
 8012cb2:	6031      	str	r1, [r6, #0]
 8012cb4:	7812      	ldrb	r2, [r2, #0]
 8012cb6:	f805 2b01 	strb.w	r2, [r5], #1
 8012cba:	6872      	ldr	r2, [r6, #4]
 8012cbc:	3a01      	subs	r2, #1
 8012cbe:	2a00      	cmp	r2, #0
 8012cc0:	6072      	str	r2, [r6, #4]
 8012cc2:	dc07      	bgt.n	8012cd4 <_scanf_i+0xb8>
 8012cc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012cc8:	4631      	mov	r1, r6
 8012cca:	4650      	mov	r0, sl
 8012ccc:	4790      	blx	r2
 8012cce:	2800      	cmp	r0, #0
 8012cd0:	f040 8085 	bne.w	8012dde <_scanf_i+0x1c2>
 8012cd4:	f10b 0b01 	add.w	fp, fp, #1
 8012cd8:	f1bb 0f03 	cmp.w	fp, #3
 8012cdc:	d1cb      	bne.n	8012c76 <_scanf_i+0x5a>
 8012cde:	6863      	ldr	r3, [r4, #4]
 8012ce0:	b90b      	cbnz	r3, 8012ce6 <_scanf_i+0xca>
 8012ce2:	230a      	movs	r3, #10
 8012ce4:	6063      	str	r3, [r4, #4]
 8012ce6:	6863      	ldr	r3, [r4, #4]
 8012ce8:	4945      	ldr	r1, [pc, #276]	@ (8012e00 <_scanf_i+0x1e4>)
 8012cea:	6960      	ldr	r0, [r4, #20]
 8012cec:	1ac9      	subs	r1, r1, r3
 8012cee:	f000 f889 	bl	8012e04 <__sccl>
 8012cf2:	f04f 0b00 	mov.w	fp, #0
 8012cf6:	68a3      	ldr	r3, [r4, #8]
 8012cf8:	6822      	ldr	r2, [r4, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d03d      	beq.n	8012d7a <_scanf_i+0x15e>
 8012cfe:	6831      	ldr	r1, [r6, #0]
 8012d00:	6960      	ldr	r0, [r4, #20]
 8012d02:	f891 c000 	ldrb.w	ip, [r1]
 8012d06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	d035      	beq.n	8012d7a <_scanf_i+0x15e>
 8012d0e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012d12:	d124      	bne.n	8012d5e <_scanf_i+0x142>
 8012d14:	0510      	lsls	r0, r2, #20
 8012d16:	d522      	bpl.n	8012d5e <_scanf_i+0x142>
 8012d18:	f10b 0b01 	add.w	fp, fp, #1
 8012d1c:	f1b9 0f00 	cmp.w	r9, #0
 8012d20:	d003      	beq.n	8012d2a <_scanf_i+0x10e>
 8012d22:	3301      	adds	r3, #1
 8012d24:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d28:	60a3      	str	r3, [r4, #8]
 8012d2a:	6873      	ldr	r3, [r6, #4]
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	6073      	str	r3, [r6, #4]
 8012d32:	dd1b      	ble.n	8012d6c <_scanf_i+0x150>
 8012d34:	6833      	ldr	r3, [r6, #0]
 8012d36:	3301      	adds	r3, #1
 8012d38:	6033      	str	r3, [r6, #0]
 8012d3a:	68a3      	ldr	r3, [r4, #8]
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	60a3      	str	r3, [r4, #8]
 8012d40:	e7d9      	b.n	8012cf6 <_scanf_i+0xda>
 8012d42:	f1bb 0f02 	cmp.w	fp, #2
 8012d46:	d1ae      	bne.n	8012ca6 <_scanf_i+0x8a>
 8012d48:	6822      	ldr	r2, [r4, #0]
 8012d4a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012d4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012d52:	d1c4      	bne.n	8012cde <_scanf_i+0xc2>
 8012d54:	2110      	movs	r1, #16
 8012d56:	6061      	str	r1, [r4, #4]
 8012d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012d5c:	e7a2      	b.n	8012ca4 <_scanf_i+0x88>
 8012d5e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012d62:	6022      	str	r2, [r4, #0]
 8012d64:	780b      	ldrb	r3, [r1, #0]
 8012d66:	f805 3b01 	strb.w	r3, [r5], #1
 8012d6a:	e7de      	b.n	8012d2a <_scanf_i+0x10e>
 8012d6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012d70:	4631      	mov	r1, r6
 8012d72:	4650      	mov	r0, sl
 8012d74:	4798      	blx	r3
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d0df      	beq.n	8012d3a <_scanf_i+0x11e>
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	05d9      	lsls	r1, r3, #23
 8012d7e:	d50d      	bpl.n	8012d9c <_scanf_i+0x180>
 8012d80:	42bd      	cmp	r5, r7
 8012d82:	d909      	bls.n	8012d98 <_scanf_i+0x17c>
 8012d84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012d88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012d8c:	4632      	mov	r2, r6
 8012d8e:	4650      	mov	r0, sl
 8012d90:	4798      	blx	r3
 8012d92:	f105 39ff 	add.w	r9, r5, #4294967295
 8012d96:	464d      	mov	r5, r9
 8012d98:	42bd      	cmp	r5, r7
 8012d9a:	d028      	beq.n	8012dee <_scanf_i+0x1d2>
 8012d9c:	6822      	ldr	r2, [r4, #0]
 8012d9e:	f012 0210 	ands.w	r2, r2, #16
 8012da2:	d113      	bne.n	8012dcc <_scanf_i+0x1b0>
 8012da4:	702a      	strb	r2, [r5, #0]
 8012da6:	6863      	ldr	r3, [r4, #4]
 8012da8:	9e01      	ldr	r6, [sp, #4]
 8012daa:	4639      	mov	r1, r7
 8012dac:	4650      	mov	r0, sl
 8012dae:	47b0      	blx	r6
 8012db0:	f8d8 3000 	ldr.w	r3, [r8]
 8012db4:	6821      	ldr	r1, [r4, #0]
 8012db6:	1d1a      	adds	r2, r3, #4
 8012db8:	f8c8 2000 	str.w	r2, [r8]
 8012dbc:	f011 0f20 	tst.w	r1, #32
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	d00f      	beq.n	8012de4 <_scanf_i+0x1c8>
 8012dc4:	6018      	str	r0, [r3, #0]
 8012dc6:	68e3      	ldr	r3, [r4, #12]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60e3      	str	r3, [r4, #12]
 8012dcc:	6923      	ldr	r3, [r4, #16]
 8012dce:	1bed      	subs	r5, r5, r7
 8012dd0:	445d      	add	r5, fp
 8012dd2:	442b      	add	r3, r5
 8012dd4:	6123      	str	r3, [r4, #16]
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	b007      	add	sp, #28
 8012dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dde:	f04f 0b00 	mov.w	fp, #0
 8012de2:	e7ca      	b.n	8012d7a <_scanf_i+0x15e>
 8012de4:	07ca      	lsls	r2, r1, #31
 8012de6:	bf4c      	ite	mi
 8012de8:	8018      	strhmi	r0, [r3, #0]
 8012dea:	6018      	strpl	r0, [r3, #0]
 8012dec:	e7eb      	b.n	8012dc6 <_scanf_i+0x1aa>
 8012dee:	2001      	movs	r0, #1
 8012df0:	e7f2      	b.n	8012dd8 <_scanf_i+0x1bc>
 8012df2:	bf00      	nop
 8012df4:	08013360 	.word	0x08013360
 8012df8:	080130ad 	.word	0x080130ad
 8012dfc:	08011eb1 	.word	0x08011eb1
 8012e00:	080134f0 	.word	0x080134f0

08012e04 <__sccl>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	780b      	ldrb	r3, [r1, #0]
 8012e08:	4604      	mov	r4, r0
 8012e0a:	2b5e      	cmp	r3, #94	@ 0x5e
 8012e0c:	bf0b      	itete	eq
 8012e0e:	784b      	ldrbeq	r3, [r1, #1]
 8012e10:	1c4a      	addne	r2, r1, #1
 8012e12:	1c8a      	addeq	r2, r1, #2
 8012e14:	2100      	movne	r1, #0
 8012e16:	bf08      	it	eq
 8012e18:	2101      	moveq	r1, #1
 8012e1a:	3801      	subs	r0, #1
 8012e1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012e20:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012e24:	42a8      	cmp	r0, r5
 8012e26:	d1fb      	bne.n	8012e20 <__sccl+0x1c>
 8012e28:	b90b      	cbnz	r3, 8012e2e <__sccl+0x2a>
 8012e2a:	1e50      	subs	r0, r2, #1
 8012e2c:	bd70      	pop	{r4, r5, r6, pc}
 8012e2e:	f081 0101 	eor.w	r1, r1, #1
 8012e32:	54e1      	strb	r1, [r4, r3]
 8012e34:	4610      	mov	r0, r2
 8012e36:	4602      	mov	r2, r0
 8012e38:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012e3c:	2d2d      	cmp	r5, #45	@ 0x2d
 8012e3e:	d005      	beq.n	8012e4c <__sccl+0x48>
 8012e40:	2d5d      	cmp	r5, #93	@ 0x5d
 8012e42:	d016      	beq.n	8012e72 <__sccl+0x6e>
 8012e44:	2d00      	cmp	r5, #0
 8012e46:	d0f1      	beq.n	8012e2c <__sccl+0x28>
 8012e48:	462b      	mov	r3, r5
 8012e4a:	e7f2      	b.n	8012e32 <__sccl+0x2e>
 8012e4c:	7846      	ldrb	r6, [r0, #1]
 8012e4e:	2e5d      	cmp	r6, #93	@ 0x5d
 8012e50:	d0fa      	beq.n	8012e48 <__sccl+0x44>
 8012e52:	42b3      	cmp	r3, r6
 8012e54:	dcf8      	bgt.n	8012e48 <__sccl+0x44>
 8012e56:	3002      	adds	r0, #2
 8012e58:	461a      	mov	r2, r3
 8012e5a:	3201      	adds	r2, #1
 8012e5c:	4296      	cmp	r6, r2
 8012e5e:	54a1      	strb	r1, [r4, r2]
 8012e60:	dcfb      	bgt.n	8012e5a <__sccl+0x56>
 8012e62:	1af2      	subs	r2, r6, r3
 8012e64:	3a01      	subs	r2, #1
 8012e66:	1c5d      	adds	r5, r3, #1
 8012e68:	42b3      	cmp	r3, r6
 8012e6a:	bfa8      	it	ge
 8012e6c:	2200      	movge	r2, #0
 8012e6e:	18ab      	adds	r3, r5, r2
 8012e70:	e7e1      	b.n	8012e36 <__sccl+0x32>
 8012e72:	4610      	mov	r0, r2
 8012e74:	e7da      	b.n	8012e2c <__sccl+0x28>

08012e76 <__submore>:
 8012e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7a:	460c      	mov	r4, r1
 8012e7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e82:	4299      	cmp	r1, r3
 8012e84:	d11d      	bne.n	8012ec2 <__submore+0x4c>
 8012e86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012e8a:	f7ff f92d 	bl	80120e8 <_malloc_r>
 8012e8e:	b918      	cbnz	r0, 8012e98 <__submore+0x22>
 8012e90:	f04f 30ff 	mov.w	r0, #4294967295
 8012e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012e9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012ea2:	6360      	str	r0, [r4, #52]	@ 0x34
 8012ea4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012ea8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012eac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012eb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012eb4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012eb8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012ebc:	6020      	str	r0, [r4, #0]
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	e7e8      	b.n	8012e94 <__submore+0x1e>
 8012ec2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012ec4:	0077      	lsls	r7, r6, #1
 8012ec6:	463a      	mov	r2, r7
 8012ec8:	f000 f848 	bl	8012f5c <_realloc_r>
 8012ecc:	4605      	mov	r5, r0
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d0de      	beq.n	8012e90 <__submore+0x1a>
 8012ed2:	eb00 0806 	add.w	r8, r0, r6
 8012ed6:	4601      	mov	r1, r0
 8012ed8:	4632      	mov	r2, r6
 8012eda:	4640      	mov	r0, r8
 8012edc:	f000 f830 	bl	8012f40 <memcpy>
 8012ee0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012ee4:	f8c4 8000 	str.w	r8, [r4]
 8012ee8:	e7e9      	b.n	8012ebe <__submore+0x48>

08012eea <memmove>:
 8012eea:	4288      	cmp	r0, r1
 8012eec:	b510      	push	{r4, lr}
 8012eee:	eb01 0402 	add.w	r4, r1, r2
 8012ef2:	d902      	bls.n	8012efa <memmove+0x10>
 8012ef4:	4284      	cmp	r4, r0
 8012ef6:	4623      	mov	r3, r4
 8012ef8:	d807      	bhi.n	8012f0a <memmove+0x20>
 8012efa:	1e43      	subs	r3, r0, #1
 8012efc:	42a1      	cmp	r1, r4
 8012efe:	d008      	beq.n	8012f12 <memmove+0x28>
 8012f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f08:	e7f8      	b.n	8012efc <memmove+0x12>
 8012f0a:	4402      	add	r2, r0
 8012f0c:	4601      	mov	r1, r0
 8012f0e:	428a      	cmp	r2, r1
 8012f10:	d100      	bne.n	8012f14 <memmove+0x2a>
 8012f12:	bd10      	pop	{r4, pc}
 8012f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f1c:	e7f7      	b.n	8012f0e <memmove+0x24>
	...

08012f20 <_sbrk_r>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	4d06      	ldr	r5, [pc, #24]	@ (8012f3c <_sbrk_r+0x1c>)
 8012f24:	2300      	movs	r3, #0
 8012f26:	4604      	mov	r4, r0
 8012f28:	4608      	mov	r0, r1
 8012f2a:	602b      	str	r3, [r5, #0]
 8012f2c:	f7ee fa64 	bl	80013f8 <_sbrk>
 8012f30:	1c43      	adds	r3, r0, #1
 8012f32:	d102      	bne.n	8012f3a <_sbrk_r+0x1a>
 8012f34:	682b      	ldr	r3, [r5, #0]
 8012f36:	b103      	cbz	r3, 8012f3a <_sbrk_r+0x1a>
 8012f38:	6023      	str	r3, [r4, #0]
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	24003320 	.word	0x24003320

08012f40 <memcpy>:
 8012f40:	440a      	add	r2, r1
 8012f42:	4291      	cmp	r1, r2
 8012f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f48:	d100      	bne.n	8012f4c <memcpy+0xc>
 8012f4a:	4770      	bx	lr
 8012f4c:	b510      	push	{r4, lr}
 8012f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f56:	4291      	cmp	r1, r2
 8012f58:	d1f9      	bne.n	8012f4e <memcpy+0xe>
 8012f5a:	bd10      	pop	{r4, pc}

08012f5c <_realloc_r>:
 8012f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f60:	4607      	mov	r7, r0
 8012f62:	4614      	mov	r4, r2
 8012f64:	460d      	mov	r5, r1
 8012f66:	b921      	cbnz	r1, 8012f72 <_realloc_r+0x16>
 8012f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	f7ff b8bb 	b.w	80120e8 <_malloc_r>
 8012f72:	b92a      	cbnz	r2, 8012f80 <_realloc_r+0x24>
 8012f74:	f7ff f84c 	bl	8012010 <_free_r>
 8012f78:	4625      	mov	r5, r4
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	f000 f896 	bl	80130b0 <_malloc_usable_size_r>
 8012f84:	4284      	cmp	r4, r0
 8012f86:	4606      	mov	r6, r0
 8012f88:	d802      	bhi.n	8012f90 <_realloc_r+0x34>
 8012f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f8e:	d8f4      	bhi.n	8012f7a <_realloc_r+0x1e>
 8012f90:	4621      	mov	r1, r4
 8012f92:	4638      	mov	r0, r7
 8012f94:	f7ff f8a8 	bl	80120e8 <_malloc_r>
 8012f98:	4680      	mov	r8, r0
 8012f9a:	b908      	cbnz	r0, 8012fa0 <_realloc_r+0x44>
 8012f9c:	4645      	mov	r5, r8
 8012f9e:	e7ec      	b.n	8012f7a <_realloc_r+0x1e>
 8012fa0:	42b4      	cmp	r4, r6
 8012fa2:	4622      	mov	r2, r4
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	bf28      	it	cs
 8012fa8:	4632      	movcs	r2, r6
 8012faa:	f7ff ffc9 	bl	8012f40 <memcpy>
 8012fae:	4629      	mov	r1, r5
 8012fb0:	4638      	mov	r0, r7
 8012fb2:	f7ff f82d 	bl	8012010 <_free_r>
 8012fb6:	e7f1      	b.n	8012f9c <_realloc_r+0x40>

08012fb8 <_strtol_l.isra.0>:
 8012fb8:	2b24      	cmp	r3, #36	@ 0x24
 8012fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fbe:	4686      	mov	lr, r0
 8012fc0:	4690      	mov	r8, r2
 8012fc2:	d801      	bhi.n	8012fc8 <_strtol_l.isra.0+0x10>
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d106      	bne.n	8012fd6 <_strtol_l.isra.0+0x1e>
 8012fc8:	f7fe fff6 	bl	8011fb8 <__errno>
 8012fcc:	2316      	movs	r3, #22
 8012fce:	6003      	str	r3, [r0, #0]
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd6:	4834      	ldr	r0, [pc, #208]	@ (80130a8 <_strtol_l.isra.0+0xf0>)
 8012fd8:	460d      	mov	r5, r1
 8012fda:	462a      	mov	r2, r5
 8012fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fe0:	5d06      	ldrb	r6, [r0, r4]
 8012fe2:	f016 0608 	ands.w	r6, r6, #8
 8012fe6:	d1f8      	bne.n	8012fda <_strtol_l.isra.0+0x22>
 8012fe8:	2c2d      	cmp	r4, #45	@ 0x2d
 8012fea:	d110      	bne.n	801300e <_strtol_l.isra.0+0x56>
 8012fec:	782c      	ldrb	r4, [r5, #0]
 8012fee:	2601      	movs	r6, #1
 8012ff0:	1c95      	adds	r5, r2, #2
 8012ff2:	f033 0210 	bics.w	r2, r3, #16
 8012ff6:	d115      	bne.n	8013024 <_strtol_l.isra.0+0x6c>
 8012ff8:	2c30      	cmp	r4, #48	@ 0x30
 8012ffa:	d10d      	bne.n	8013018 <_strtol_l.isra.0+0x60>
 8012ffc:	782a      	ldrb	r2, [r5, #0]
 8012ffe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013002:	2a58      	cmp	r2, #88	@ 0x58
 8013004:	d108      	bne.n	8013018 <_strtol_l.isra.0+0x60>
 8013006:	786c      	ldrb	r4, [r5, #1]
 8013008:	3502      	adds	r5, #2
 801300a:	2310      	movs	r3, #16
 801300c:	e00a      	b.n	8013024 <_strtol_l.isra.0+0x6c>
 801300e:	2c2b      	cmp	r4, #43	@ 0x2b
 8013010:	bf04      	itt	eq
 8013012:	782c      	ldrbeq	r4, [r5, #0]
 8013014:	1c95      	addeq	r5, r2, #2
 8013016:	e7ec      	b.n	8012ff2 <_strtol_l.isra.0+0x3a>
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1f6      	bne.n	801300a <_strtol_l.isra.0+0x52>
 801301c:	2c30      	cmp	r4, #48	@ 0x30
 801301e:	bf14      	ite	ne
 8013020:	230a      	movne	r3, #10
 8013022:	2308      	moveq	r3, #8
 8013024:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013028:	f10c 3cff 	add.w	ip, ip, #4294967295
 801302c:	2200      	movs	r2, #0
 801302e:	fbbc f9f3 	udiv	r9, ip, r3
 8013032:	4610      	mov	r0, r2
 8013034:	fb03 ca19 	mls	sl, r3, r9, ip
 8013038:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801303c:	2f09      	cmp	r7, #9
 801303e:	d80f      	bhi.n	8013060 <_strtol_l.isra.0+0xa8>
 8013040:	463c      	mov	r4, r7
 8013042:	42a3      	cmp	r3, r4
 8013044:	dd1b      	ble.n	801307e <_strtol_l.isra.0+0xc6>
 8013046:	1c57      	adds	r7, r2, #1
 8013048:	d007      	beq.n	801305a <_strtol_l.isra.0+0xa2>
 801304a:	4581      	cmp	r9, r0
 801304c:	d314      	bcc.n	8013078 <_strtol_l.isra.0+0xc0>
 801304e:	d101      	bne.n	8013054 <_strtol_l.isra.0+0x9c>
 8013050:	45a2      	cmp	sl, r4
 8013052:	db11      	blt.n	8013078 <_strtol_l.isra.0+0xc0>
 8013054:	fb00 4003 	mla	r0, r0, r3, r4
 8013058:	2201      	movs	r2, #1
 801305a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801305e:	e7eb      	b.n	8013038 <_strtol_l.isra.0+0x80>
 8013060:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013064:	2f19      	cmp	r7, #25
 8013066:	d801      	bhi.n	801306c <_strtol_l.isra.0+0xb4>
 8013068:	3c37      	subs	r4, #55	@ 0x37
 801306a:	e7ea      	b.n	8013042 <_strtol_l.isra.0+0x8a>
 801306c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013070:	2f19      	cmp	r7, #25
 8013072:	d804      	bhi.n	801307e <_strtol_l.isra.0+0xc6>
 8013074:	3c57      	subs	r4, #87	@ 0x57
 8013076:	e7e4      	b.n	8013042 <_strtol_l.isra.0+0x8a>
 8013078:	f04f 32ff 	mov.w	r2, #4294967295
 801307c:	e7ed      	b.n	801305a <_strtol_l.isra.0+0xa2>
 801307e:	1c53      	adds	r3, r2, #1
 8013080:	d108      	bne.n	8013094 <_strtol_l.isra.0+0xdc>
 8013082:	2322      	movs	r3, #34	@ 0x22
 8013084:	f8ce 3000 	str.w	r3, [lr]
 8013088:	4660      	mov	r0, ip
 801308a:	f1b8 0f00 	cmp.w	r8, #0
 801308e:	d0a0      	beq.n	8012fd2 <_strtol_l.isra.0+0x1a>
 8013090:	1e69      	subs	r1, r5, #1
 8013092:	e006      	b.n	80130a2 <_strtol_l.isra.0+0xea>
 8013094:	b106      	cbz	r6, 8013098 <_strtol_l.isra.0+0xe0>
 8013096:	4240      	negs	r0, r0
 8013098:	f1b8 0f00 	cmp.w	r8, #0
 801309c:	d099      	beq.n	8012fd2 <_strtol_l.isra.0+0x1a>
 801309e:	2a00      	cmp	r2, #0
 80130a0:	d1f6      	bne.n	8013090 <_strtol_l.isra.0+0xd8>
 80130a2:	f8c8 1000 	str.w	r1, [r8]
 80130a6:	e794      	b.n	8012fd2 <_strtol_l.isra.0+0x1a>
 80130a8:	080133ad 	.word	0x080133ad

080130ac <_strtol_r>:
 80130ac:	f7ff bf84 	b.w	8012fb8 <_strtol_l.isra.0>

080130b0 <_malloc_usable_size_r>:
 80130b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130b4:	1f18      	subs	r0, r3, #4
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	bfbc      	itt	lt
 80130ba:	580b      	ldrlt	r3, [r1, r0]
 80130bc:	18c0      	addlt	r0, r0, r3
 80130be:	4770      	bx	lr

080130c0 <_init>:
 80130c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c2:	bf00      	nop
 80130c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130c6:	bc08      	pop	{r3}
 80130c8:	469e      	mov	lr, r3
 80130ca:	4770      	bx	lr

080130cc <_fini>:
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ce:	bf00      	nop
 80130d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130d2:	bc08      	pop	{r3}
 80130d4:	469e      	mov	lr, r3
 80130d6:	4770      	bx	lr
