
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001089c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08010b3c  08010b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f04  08010f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f0c  08010f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010f10  08010f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  08010f14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000030e8  24000160  08011074  00012160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003248  08011074  00012248  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000400  38000000  38000000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020b23  00000000  00000000  0001342e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b76  00000000  00000000  00033f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019a0  00000000  00000000  00038ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001381  00000000  00000000  0003a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d7ea  00000000  00000000  0003b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000257fc  00000000  00000000  00078fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001786e5  00000000  00000000  0009e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00216eb4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007318  00000000  00000000  00216ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  0021e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010b24 	.word	0x08010b24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	08010b24 	.word	0x08010b24

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	463b      	mov	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000468 <MX_ADC3_Init+0xd8>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000404:	2201      	movs	r2, #1
 8000406:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000408:	4816      	ldr	r0, [pc, #88]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800040a:	f001 f887 	bl	800151c <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000414:	f000 faac 	bl	8000970 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_ADC3_Init+0xdc>)
 800041a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	2306      	movs	r3, #6
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000420:	2307      	movs	r3, #7
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000424:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042a:	2304      	movs	r3, #4
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	480a      	ldr	r0, [pc, #40]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800043c:	f001 fb40 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000446:	f000 fa93 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_ADC3_Init+0xe0>)
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 800044e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000452:	69f9      	ldr	r1, [r7, #28]
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000456:	f001 fa03 	bl	8001860 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2400017c 	.word	0x2400017c
 8000468:	58026000 	.word	0x58026000
 800046c:	cb840000 	.word	0xcb840000
 8000470:	38000000 	.word	0x38000000

08000474 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b0b4      	sub	sp, #208	@ 0xd0
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	22c0      	movs	r2, #192	@ 0xc0
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00f fac3 	bl	800fa10 <memset>
  if(adcHandle->Instance==ADC3)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a33      	ldr	r2, [pc, #204]	@ (800055c <HAL_ADC_MspInit+0xe8>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d15e      	bne.n	8000552 <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000494:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000498:	f04f 0300 	mov.w	r3, #0
 800049c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004a0:	2319      	movs	r3, #25
 80004a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 fb9a 	bl	8007c04 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80004d6:	f000 fa4b 	bl	8000970 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 80004fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 80004fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000500:	2211      	movs	r2, #17
 8000502:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000504:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000516:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800051a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800051e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000522:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000526:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800052a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800052e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000538:	f002 f9d8 	bl	80028ec <HAL_DMA_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 8000542:	f000 fa15 	bl	8000970 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800054a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800054c:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000552:	bf00      	nop
 8000554:	37d0      	adds	r7, #208	@ 0xd0
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	58026000 	.word	0x58026000
 8000560:	58024400 	.word	0x58024400
 8000564:	240001e0 	.word	0x240001e0
 8000568:	58025408 	.word	0x58025408

0800056c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000576:	f001 fa37 	bl	80019e8 <HAL_ADC_Stop_DMA>
	conversion_count++;
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000586:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n conversion_count = %d", conversion_count);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	b29b      	uxth	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000592:	f00f f8b5 	bl	800f700 <DebugPrint>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2400017c 	.word	0x2400017c
 80005a4:	24000258 	.word	0x24000258
 80005a8:	08010b3c 	.word	0x08010b3c

080005ac <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005b6:	f001 fa17 	bl	80019e8 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <HAL_ADC_ErrorCallback+0x3c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_ADC_ErrorCallback+0x3c>)
 80005c6:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005cc:	4619      	mov	r1, r3
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <HAL_ADC_ErrorCallback+0x40>)
 80005d0:	f00f f896 	bl	800f700 <DebugPrint>
	hadc3.State = 0;
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2400017c 	.word	0x2400017c
 80005e8:	24000258 	.word	0x24000258
 80005ec:	08010b58 	.word	0x08010b58

080005f0 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <CalcTemperature+0xe4>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d05c      	beq.n	80006ba <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8000600:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <CalcTemperature+0xe8>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d030      	beq.n	800066e <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800060c:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <CalcTemperature+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <CalcTemperature+0xe8>)
 800061c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000620:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	0b5b      	lsrs	r3, r3, #13
 8000626:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800062a:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000634:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800063e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000644:	4924      	ldr	r1, [pc, #144]	@ (80006d8 <CalcTemperature+0xe8>)
 8000646:	4313      	orrs	r3, r2
 8000648:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	603a      	str	r2, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1ef      	bne.n	8000636 <CalcTemperature+0x46>
    } while(sets-- != 0U);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1e5      	bne.n	800062c <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	e010      	b.n	800069a <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 8000678:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <CalcTemperature+0xec>)
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	4413      	add	r3, r2
 8000688:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 800068a:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <CalcTemperature+0xec>)
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	2100      	movs	r1, #0
 8000690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	3301      	adds	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2bff      	cmp	r3, #255	@ 0xff
 800069e:	ddeb      	ble.n	8000678 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <CalcTemperature+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <CalcTemperature+0xec>)
 80006a8:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80006aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ae:	6939      	ldr	r1, [r7, #16]
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <CalcTemperature+0xf0>)
 80006b2:	f001 f8d5 	bl	8001860 <HAL_ADC_Start_DMA>

		return total_adc;
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	e008      	b.n	80006cc <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <CalcTemperature+0xec>)
 80006bc:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80006be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006c2:	6979      	ldr	r1, [r7, #20]
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <CalcTemperature+0xf0>)
 80006c6:	f001 f8cb 	bl	8001860 <HAL_ADC_Start_DMA>
	}

	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	24000258 	.word	0x24000258
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	38000000 	.word	0x38000000
 80006e0:	2400017c 	.word	0x2400017c

080006e4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2081      	movs	r0, #129	@ 0x81
 800070e:	f002 f8c5 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000712:	2081      	movs	r0, #129	@ 0x81
 8000714:	f002 f8dc 	bl	80028d0 <HAL_NVIC_EnableIRQ>

}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58024400 	.word	0x58024400

08000724 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	4a19      	ldr	r2, [pc, #100]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_GPIO_Init+0xe0>)
 80007d6:	f004 fe2f 	bl	8005438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xe0>)
 80007f2:	f004 fc71 	bl	80050d8 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	@ 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	58020000 	.word	0x58020000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fb90 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f822 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff86 	bl	8000724 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000818:	f7ff ff64 	bl	80006e4 <MX_BDMA_Init>
  MX_QUADSPI_Init();
 800081c:	f000 f8ae 	bl	800097c <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8000820:	f7ff fdb6 	bl	8000390 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000824:	f00d fd08 	bl	800e238 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	4809      	ldr	r0, [pc, #36]	@ (8000854 <main+0x4c>)
 800082e:	f004 fe03 	bl	8005438 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000832:	2064      	movs	r0, #100	@ 0x64
 8000834:	f000 fbd8 	bl	8000fe8 <HAL_Delay>
		DebugTask();
 8000838:	f00e fec2 	bl	800f5c0 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2102      	movs	r1, #2
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <main+0x4c>)
 8000842:	f004 fdf9 	bl	8005438 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f000 fbce 	bl	8000fe8 <HAL_Delay>
		DebugTask();
 800084c:	f00e feb8 	bl	800f5c0 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000850:	bf00      	nop
 8000852:	e7e9      	b.n	8000828 <main+0x20>
 8000854:	58020000 	.word	0x58020000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	@ 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	224c      	movs	r2, #76	@ 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f8d2 	bl	800fa10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00f f8cc 	bl	800fa10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000878:	2002      	movs	r0, #2
 800087a:	f006 f897 	bl	80069ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b30      	ldr	r3, [pc, #192]	@ (8000944 <SystemClock_Config+0xec>)
 8000884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000886:	4a2f      	ldr	r2, [pc, #188]	@ (8000944 <SystemClock_Config+0xec>)
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <SystemClock_Config+0xec>)
 8000890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <SystemClock_Config+0xf0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a2a      	ldr	r2, [pc, #168]	@ (8000948 <SystemClock_Config+0xf0>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <SystemClock_Config+0xf0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b0:	bf00      	nop
 80008b2:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <SystemClock_Config+0xf0>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008be:	d1f8      	bne.n	80008b2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008d2:	2305      	movs	r3, #5
 80008d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008d6:	23a0      	movs	r3, #160	@ 0xa0
 80008d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008e6:	2308      	movs	r3, #8
 80008e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 f95c 	bl	8006bb4 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000902:	f000 f835 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	233f      	movs	r3, #63	@ 0x3f
 8000908:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2303      	movs	r3, #3
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000912:	2308      	movs	r3, #8
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800091e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000924:	2340      	movs	r3, #64	@ 0x40
 8000926:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fd9b 	bl	8007468 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000938:	f000 f81a 	bl	8000970 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3770      	adds	r7, #112	@ 0x70
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58000400 	.word	0x58000400
 8000948:	58024800 	.word	0x58024800

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 fb23 	bl	8000fa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010000 	.word	0x40010000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <MX_QUADSPI_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 8000988:	2202      	movs	r2, #2
 800098a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 800098e:	2204      	movs	r2, #4
 8000990:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 800099a:	2216      	movs	r2, #22
 800099c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_QUADSPI_Init+0x50>)
 80009b8:	f006 f842 	bl	8006a40 <HAL_QSPI_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f7ff ffd5 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2400025c 	.word	0x2400025c
 80009d0:	52005000 	.word	0x52005000

080009d4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0bc      	sub	sp, #240	@ 0xf0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	22c0      	movs	r2, #192	@ 0xc0
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00f f80b 	bl	800fa10 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a55      	ldr	r2, [pc, #340]	@ (8000b54 <HAL_QSPI_MspInit+0x180>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	f040 80a3 	bne.w	8000b4c <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000a06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f007 f8f2 	bl	8007c04 <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a26:	f7ff ffa3 	bl	8000970 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a30:	4a49      	ldr	r2, [pc, #292]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a36:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a3a:	4b47      	ldr	r3, [pc, #284]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a48:	4b43      	ldr	r3, [pc, #268]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a42      	ldr	r2, [pc, #264]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b38      	ldr	r3, [pc, #224]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a33      	ldr	r2, [pc, #204]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <HAL_QSPI_MspInit+0x184>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aba:	2309      	movs	r3, #9
 8000abc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4825      	ldr	r0, [pc, #148]	@ (8000b5c <HAL_QSPI_MspInit+0x188>)
 8000ac8:	f004 fb06 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000acc:	2304      	movs	r3, #4
 8000ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aee:	4619      	mov	r1, r3
 8000af0:	481b      	ldr	r0, [pc, #108]	@ (8000b60 <HAL_QSPI_MspInit+0x18c>)
 8000af2:	f004 faf1 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000af6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000afa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b10:	2309      	movs	r3, #9
 8000b12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <HAL_QSPI_MspInit+0x190>)
 8000b1e:	f004 fadb 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b22:	2340      	movs	r3, #64	@ 0x40
 8000b24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <HAL_QSPI_MspInit+0x18c>)
 8000b48:	f004 fac6 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	37f0      	adds	r7, #240	@ 0xf0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	52005000 	.word	0x52005000
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58021000 	.word	0x58021000
 8000b60:	58020400 	.word	0x58020400
 8000b64:	58020c00 	.word	0x58020c00

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b74:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_MspInit+0x30>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x30>)
 8000b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58024400 	.word	0x58024400

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d844      	bhi.n	8000c34 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	2019      	movs	r0, #25
 8000bb0:	f001 fe74 	bl	800289c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bb4:	2019      	movs	r0, #25
 8000bb6:	f001 fe8b 	bl	80028d0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000bba:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <HAL_InitTick+0xb0>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <HAL_InitTick+0xb4>)
 8000bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bc6:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <HAL_InitTick+0xb4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_InitTick+0xb4>)
 8000bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 ffc9 	bl	8007b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bee:	f006 ffb1 	bl	8007b54 <HAL_RCC_GetPCLK2Freq>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <HAL_InitTick+0xb8>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	0c9b      	lsrs	r3, r3, #18
 8000c02:	3b01      	subs	r3, #1
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <HAL_InitTick+0xc0>)
 8000c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c12:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c18:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c26:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c28:	f009 fcea 	bl	800a600 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d107      	bne.n	8000c42 <HAL_InitTick+0xa6>
 8000c32:	e001      	b.n	8000c38 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e005      	b.n	8000c44 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <HAL_InitTick+0xbc>)
 8000c3a:	f009 fd43 	bl	800a6c4 <HAL_TIM_Base_Start_IT>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	24000008 	.word	0x24000008
 8000c50:	58024400 	.word	0x58024400
 8000c54:	431bde83 	.word	0x431bde83
 8000c58:	240002a8 	.word	0x240002a8
 8000c5c:	40010000 	.word	0x40010000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM1_UP_IRQHandler+0x10>)
 8000cc6:	f009 fd75 	bl	800a7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	240002a8 	.word	0x240002a8

08000cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <OTG_FS_IRQHandler+0x10>)
 8000cda:	f004 fd07 	bl	80056ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240017dc 	.word	0x240017dc

08000ce8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <BDMA_Channel0_IRQHandler+0x10>)
 8000cee:	f002 fee1 	bl	8003ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	240001e0 	.word	0x240001e0

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f00e fe78 	bl	800fa20 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24080000 	.word	0x24080000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	240002f4 	.word	0x240002f4
 8000d64:	24003248 	.word	0x24003248

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <SystemInit+0x114>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a42      	ldr	r2, [pc, #264]	@ (8000e7c <SystemInit+0x114>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7c:	4b40      	ldr	r3, [pc, #256]	@ (8000e80 <SystemInit+0x118>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	d807      	bhi.n	8000d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d88:	4b3d      	ldr	r3, [pc, #244]	@ (8000e80 <SystemInit+0x118>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	4a3b      	ldr	r2, [pc, #236]	@ (8000e80 <SystemInit+0x118>)
 8000d92:	f043 0307 	orr.w	r3, r3, #7
 8000d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <SystemInit+0x11c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a39      	ldr	r2, [pc, #228]	@ (8000e84 <SystemInit+0x11c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da4:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <SystemInit+0x11c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000daa:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <SystemInit+0x11c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4935      	ldr	r1, [pc, #212]	@ (8000e84 <SystemInit+0x11c>)
 8000db0:	4b35      	ldr	r3, [pc, #212]	@ (8000e88 <SystemInit+0x120>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db6:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <SystemInit+0x118>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <SystemInit+0x118>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 030f 	bic.w	r3, r3, #15
 8000dca:	4a2d      	ldr	r2, [pc, #180]	@ (8000e80 <SystemInit+0x118>)
 8000dcc:	f043 0307 	orr.w	r3, r3, #7
 8000dd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <SystemInit+0x11c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <SystemInit+0x11c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dde:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <SystemInit+0x11c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de4:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <SystemInit+0x11c>)
 8000de6:	4a29      	ldr	r2, [pc, #164]	@ (8000e8c <SystemInit+0x124>)
 8000de8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dea:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <SystemInit+0x11c>)
 8000dec:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <SystemInit+0x128>)
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000df0:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <SystemInit+0x11c>)
 8000df2:	4a28      	ldr	r2, [pc, #160]	@ (8000e94 <SystemInit+0x12c>)
 8000df4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <SystemInit+0x11c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <SystemInit+0x11c>)
 8000dfe:	4a25      	ldr	r2, [pc, #148]	@ (8000e94 <SystemInit+0x12c>)
 8000e00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <SystemInit+0x11c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <SystemInit+0x11c>)
 8000e0a:	4a22      	ldr	r2, [pc, #136]	@ (8000e94 <SystemInit+0x12c>)
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <SystemInit+0x11c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <SystemInit+0x11c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <SystemInit+0x11c>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <SystemInit+0x11c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <SystemInit+0x130>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <SystemInit+0x134>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e32:	d202      	bcs.n	8000e3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <SystemInit+0x138>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e3a:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <SystemInit+0x11c>)
 8000e3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d113      	bne.n	8000e70 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <SystemInit+0x11c>)
 8000e4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <SystemInit+0x11c>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e54:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <SystemInit+0x13c>)
 8000e5a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <SystemInit+0x11c>)
 8000e62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e66:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <SystemInit+0x11c>)
 8000e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	52002000 	.word	0x52002000
 8000e84:	58024400 	.word	0x58024400
 8000e88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e8c:	02020200 	.word	0x02020200
 8000e90:	01ff0000 	.word	0x01ff0000
 8000e94:	01010280 	.word	0x01010280
 8000e98:	5c001000 	.word	0x5c001000
 8000e9c:	ffff0000 	.word	0xffff0000
 8000ea0:	51008108 	.word	0x51008108
 8000ea4:	52004000 	.word	0x52004000

08000ea8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <ExitRun0Mode+0x2c>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <ExitRun0Mode+0x2c>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000eb8:	bf00      	nop
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <ExitRun0Mode+0x2c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	58024800 	.word	0x58024800

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f14 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000edc:	f7ff ffe4 	bl	8000ea8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f7ff ff42 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f00e fd8f 	bl	800fa2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fc7b 	bl	8000808 <main>
  bx  lr
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f1c:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8000f20:	08010f14 	.word	0x08010f14
  ldr r2, =_sbss
 8000f24:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8000f28:	24003248 	.word	0x24003248

08000f2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC3_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f001 fca5 	bl	8002886 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f3c:	f006 fc4a 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_Init+0x68>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	4913      	ldr	r1, [pc, #76]	@ (8000f9c <HAL_Init+0x6c>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_Init+0x68>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_Init+0x6c>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_Init+0x70>)
 8000f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_Init+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f7ff fe0e 	bl	8000b9c <HAL_InitTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e002      	b.n	8000f90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8a:	f7ff fded 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	08010d9c 	.word	0x08010d9c
 8000fa0:	24000004 	.word	0x24000004
 8000fa4:	24000000 	.word	0x24000000

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2400000c 	.word	0x2400000c
 8000fcc:	240002f8 	.word	0x240002f8

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	240002f8 	.word	0x240002f8

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2400000c 	.word	0x2400000c

08001030 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetREVID+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0c1b      	lsrs	r3, r3, #16
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	5c001000 	.word	0x5c001000

08001048 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	609a      	str	r2, [r3, #8]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <LL_ADC_SetChannelPreselection+0x24>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	0e9b      	lsrs	r3, r3, #26
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	2201      	movs	r2, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	e015      	b.n	8001100 <LL_ADC_SetChannelPreselection+0x50>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80010ea:	2320      	movs	r3, #32
 80010ec:	e003      	b.n	80010f6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2201      	movs	r2, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	69d2      	ldr	r2, [r2, #28]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001116:	b480      	push	{r7}
 8001118:	b087      	sub	sp, #28
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3360      	adds	r3, #96	@ 0x60
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	430b      	orrs	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	431a      	orrs	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	611a      	str	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	@ 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
  }
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3330      	adds	r3, #48	@ 0x30
 80011f4:	461a      	mov	r2, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	211f      	movs	r1, #31
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0e9b      	lsrs	r3, r3, #26
 800121c:	f003 011f 	and.w	r1, r3, #31
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f023 0203 	bic.w	r2, r3, #3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60da      	str	r2, [r3, #12]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3314      	adds	r3, #20
 8001272:	461a      	mov	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	0e5b      	lsrs	r3, r3, #25
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	0d1b      	lsrs	r3, r3, #20
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	2107      	movs	r1, #7
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	0d1b      	lsrs	r3, r3, #20
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	431a      	orrs	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0318 	and.w	r3, r3, #24
 80012da:	4908      	ldr	r1, [pc, #32]	@ (80012fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80012dc:	40d9      	lsrs	r1, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	400b      	ands	r3, r1
 80012e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	000fffff 	.word	0x000fffff

08001300 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 031f 	and.w	r3, r3, #31
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <LL_ADC_DisableDeepPowerDown+0x20>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6093      	str	r3, [r2, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	5fffffc0 	.word	0x5fffffc0

08001340 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001354:	d101      	bne.n	800135a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <LL_ADC_EnableInternalRegulator+0x24>)
 8001376:	4013      	ands	r3, r2
 8001378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	6fffffc0 	.word	0x6fffffc0

08001390 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013a4:	d101      	bne.n	80013aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <LL_ADC_Enable+0x24>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	7fffffc0 	.word	0x7fffffc0

080013e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <LL_ADC_Disable+0x24>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	f043 0202 	orr.w	r2, r3, #2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	7fffffc0 	.word	0x7fffffc0

08001408 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <LL_ADC_IsEnabled+0x18>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <LL_ADC_IsEnabled+0x1a>
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d101      	bne.n	8001446 <LL_ADC_IsDisableOngoing+0x18>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_IsDisableOngoing+0x1a>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <LL_ADC_REG_StartConversion+0x24>)
 8001462:	4013      	ands	r3, r2
 8001464:	f043 0204 	orr.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	7fffffc0 	.word	0x7fffffc0

0800147c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <LL_ADC_REG_StopConversion+0x24>)
 800148a:	4013      	ands	r3, r2
 800148c:	f043 0210 	orr.w	r2, r3, #16
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	7fffffc0 	.word	0x7fffffc0

080014a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d101      	bne.n	80014bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <LL_ADC_INJ_StopConversion+0x24>)
 80014da:	4013      	ands	r3, r2
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	7fffffc0 	.word	0x7fffffc0

080014f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b08      	cmp	r3, #8
 8001506:	d101      	bne.n	800150c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e18f      	b.n	8001856 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe ff95 	bl	8000474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feef 	bl	8001340 <LL_ADC_IsDeepPowerDownEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fed5 	bl	800131c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff0a 	bl	8001390 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d114      	bne.n	80015ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff feee 	bl	8001368 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800158c:	4b87      	ldr	r3, [pc, #540]	@ (80017ac <HAL_ADC_Init+0x290>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	4a87      	ldr	r2, [pc, #540]	@ (80017b0 <HAL_ADC_Init+0x294>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800159e:	e002      	b.n	80015a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff feed 	bl	8001390 <LL_ADC_IsInternalRegulatorEnabled>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10d      	bne.n	80015d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	f043 0210 	orr.w	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff61 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 80015e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f040 8129 	bne.w	8001844 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 8125 	bne.w	8001844 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fefa 	bl	8001408 <LL_ADC_IsEnabled>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d136      	bne.n	8001688 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a65      	ldr	r2, [pc, #404]	@ (80017b4 <HAL_ADC_Init+0x298>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d004      	beq.n	800162e <HAL_ADC_Init+0x112>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a63      	ldr	r2, [pc, #396]	@ (80017b8 <HAL_ADC_Init+0x29c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10e      	bne.n	800164c <HAL_ADC_Init+0x130>
 800162e:	4861      	ldr	r0, [pc, #388]	@ (80017b4 <HAL_ADC_Init+0x298>)
 8001630:	f7ff feea 	bl	8001408 <LL_ADC_IsEnabled>
 8001634:	4604      	mov	r4, r0
 8001636:	4860      	ldr	r0, [pc, #384]	@ (80017b8 <HAL_ADC_Init+0x29c>)
 8001638:	f7ff fee6 	bl	8001408 <LL_ADC_IsEnabled>
 800163c:	4603      	mov	r3, r0
 800163e:	4323      	orrs	r3, r4
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e008      	b.n	800165e <HAL_ADC_Init+0x142>
 800164c:	485b      	ldr	r0, [pc, #364]	@ (80017bc <HAL_ADC_Init+0x2a0>)
 800164e:	f7ff fedb 	bl	8001408 <LL_ADC_IsEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a53      	ldr	r2, [pc, #332]	@ (80017b4 <HAL_ADC_Init+0x298>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d004      	beq.n	8001676 <HAL_ADC_Init+0x15a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a51      	ldr	r2, [pc, #324]	@ (80017b8 <HAL_ADC_Init+0x29c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x15e>
 8001676:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_ADC_Init+0x2a4>)
 8001678:	e000      	b.n	800167c <HAL_ADC_Init+0x160>
 800167a:	4a52      	ldr	r2, [pc, #328]	@ (80017c4 <HAL_ADC_Init+0x2a8>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fce0 	bl	8001048 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001688:	f7ff fcd2 	bl	8001030 <HAL_GetREVID>
 800168c:	4603      	mov	r3, r0
 800168e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001692:	4293      	cmp	r3, r2
 8001694:	d914      	bls.n	80016c0 <HAL_ADC_Init+0x1a4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d110      	bne.n	80016c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7d5b      	ldrb	r3, [r3, #21]
 80016a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80016ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7f1b      	ldrb	r3, [r3, #28]
 80016b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80016b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016b8:	f043 030c 	orr.w	r3, r3, #12
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	e00d      	b.n	80016dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7d5b      	ldrb	r3, [r3, #21]
 80016c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80016d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7f1b      	ldrb	r3, [r3, #28]
 80016d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7f1b      	ldrb	r3, [r3, #28]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	045b      	lsls	r3, r3, #17
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001706:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <HAL_ADC_Init+0x2ac>)
 8001716:	4013      	ands	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	430b      	orrs	r3, r1
 8001720:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff febc 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 800172c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fede 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 8001738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d15f      	bne.n	8001800 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d15c      	bne.n	8001800 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7d1b      	ldrb	r3, [r3, #20]
 800174a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_ADC_Init+0x2b0>)
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	430b      	orrs	r3, r1
 8001766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800176e:	2b01      	cmp	r3, #1
 8001770:	d130      	bne.n	80017d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <HAL_ADC_Init+0x2b4>)
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001786:	3a01      	subs	r2, #1
 8001788:	0411      	lsls	r1, r2, #16
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001794:	4311      	orrs	r1, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800179a:	430a      	orrs	r2, r1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	e01c      	b.n	80017e4 <HAL_ADC_Init+0x2c8>
 80017aa:	bf00      	nop
 80017ac:	24000000 	.word	0x24000000
 80017b0:	053e2d63 	.word	0x053e2d63
 80017b4:	40022000 	.word	0x40022000
 80017b8:	40022100 	.word	0x40022100
 80017bc:	58026000 	.word	0x58026000
 80017c0:	40022300 	.word	0x40022300
 80017c4:	58026300 	.word	0x58026300
 80017c8:	fff0c003 	.word	0xfff0c003
 80017cc:	ffffbffc 	.word	0xffffbffc
 80017d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fe8a 	bl	8002514 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10c      	bne.n	8001822 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f023 010f 	bic.w	r1, r3, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	1e5a      	subs	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001820:	e007      	b.n	8001832 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 020f 	bic.w	r2, r2, #15
 8001830:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
 8001842:	e007      	b.n	8001854 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f043 0210 	orr.w	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001854:	7ffb      	ldrb	r3, [r7, #31]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop

08001860 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a55      	ldr	r2, [pc, #340]	@ (80019c8 <HAL_ADC_Start_DMA+0x168>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d004      	beq.n	8001880 <HAL_ADC_Start_DMA+0x20>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a54      	ldr	r2, [pc, #336]	@ (80019cc <HAL_ADC_Start_DMA+0x16c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_ADC_Start_DMA+0x24>
 8001880:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_ADC_Start_DMA+0x170>)
 8001882:	e000      	b.n	8001886 <HAL_ADC_Start_DMA+0x26>
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_ADC_Start_DMA+0x174>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fd3a 	bl	8001300 <LL_ADC_GetMultimode>
 800188c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe06 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 808c 	bne.w	80019b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Start_DMA+0x4e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e087      	b.n	80019be <HAL_ADC_Start_DMA+0x15e>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d002      	beq.n	80018c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d170      	bne.n	80019aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fca5 	bl	8002218 <ADC_Enable>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d163      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018dc:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <HAL_ADC_Start_DMA+0x178>)
 80018de:	4013      	ands	r3, r2
 80018e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a37      	ldr	r2, [pc, #220]	@ (80019cc <HAL_ADC_Start_DMA+0x16c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d002      	beq.n	80018f8 <HAL_ADC_Start_DMA+0x98>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	e000      	b.n	80018fa <HAL_ADC_Start_DMA+0x9a>
 80018f8:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_ADC_Start_DMA+0x168>)
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d002      	beq.n	8001908 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	f023 0206 	bic.w	r2, r3, #6
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	659a      	str	r2, [r3, #88]	@ 0x58
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <HAL_ADC_Start_DMA+0x17c>)
 800193a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001940:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <HAL_ADC_Start_DMA+0x180>)
 8001942:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <HAL_ADC_Start_DMA+0x184>)
 800194a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	221c      	movs	r2, #28
 8001952:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0210 	orr.w	r2, r2, #16
 800196a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f7ff fc60 	bl	800123c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3340      	adds	r3, #64	@ 0x40
 8001986:	4619      	mov	r1, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f001 fb0a 	bl	8002fa4 <HAL_DMA_Start_IT>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd5b 	bl	8001454 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800199e:	e00d      	b.n	80019bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80019a8:	e008      	b.n	80019bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80019b6:	e001      	b.n	80019bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019b8:	2302      	movs	r3, #2
 80019ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022100 	.word	0x40022100
 80019d0:	40022300 	.word	0x40022300
 80019d4:	58026300 	.word	0x58026300
 80019d8:	fffff0fe 	.word	0xfffff0fe
 80019dc:	080023eb 	.word	0x080023eb
 80019e0:	080024c3 	.word	0x080024c3
 80019e4:	080024df 	.word	0x080024df

080019e8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Stop_DMA+0x16>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e04f      	b.n	8001a9e <HAL_ADC_Stop_DMA+0xb6>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a06:	2103      	movs	r1, #3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fb49 	bl	80020a0 <ADC_ConversionStop>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d13d      	bne.n	8001a94 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0203 	bic.w	r2, r2, #3
 8001a26:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d10f      	bne.n	8001a56 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fd1c 	bl	8003478 <HAL_DMA_Abort>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0210 	bic.w	r2, r2, #16
 8001a64:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fc5d 	bl	800232c <ADC_Disable>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e002      	b.n	8001a7e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fc57 	bl	800232c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_ADC_Stop_DMA+0xc0>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	ffffeefe 	.word	0xffffeefe

08001aac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08d      	sub	sp, #52	@ 0x34
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_ADC_ConfigChannel+0x1b0>)
 8001ada:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x2a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e2c7      	b.n	800207a <HAL_ADC_ConfigChannel+0x5ba>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fcd4 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 82ac 	bne.w	800205c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db2c      	blt.n	8001b66 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x6a>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2201      	movs	r2, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	e016      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x98>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	613b      	str	r3, [r7, #16]
  return result;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001b42:	2320      	movs	r3, #32
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2201      	movs	r2, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	69d1      	ldr	r1, [r2, #28]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7ff fb36 	bl	80011e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc91 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 8001b82:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fcb3 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 8001b8e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80b8 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 80b4 	bne.w	8001d08 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f7ff fb58 	bl	8001262 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bb2:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_ADC_ConfigChannel+0x1b4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x118>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	e01d      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x154>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x13e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	e00a      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x154>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d02c      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f7ff fa73 	bl	8001116 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6919      	ldr	r1, [r3, #16]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7e5b      	ldrb	r3, [r3, #25]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x186>
 8001c40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x188>
 8001c46:	2300      	movs	r3, #0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f7ff fa9d 	bl	8001188 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6919      	ldr	r1, [r3, #16]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7e1b      	ldrb	r3, [r3, #24]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1a4>
 8001c5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c62:	e000      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1a6>
 8001c64:	2300      	movs	r3, #0
 8001c66:	461a      	mov	r2, r3
 8001c68:	f7ff fa75 	bl	8001156 <LL_ADC_SetDataRightShift>
 8001c6c:	e04c      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x248>
 8001c6e:	bf00      	nop
 8001c70:	47ff0000 	.word	0x47ff0000
 8001c74:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c9a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cbe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	069b      	lsls	r3, r3, #26
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ce2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	069b      	lsls	r3, r3, #26
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d06:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fb7b 	bl	8001408 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 81aa 	bne.w	800206e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff fac6 	bl	80012b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a87      	ldr	r2, [pc, #540]	@ (8001f50 <HAL_ADC_ConfigChannel+0x490>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 809a 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4984      	ldr	r1, [pc, #528]	@ (8001f54 <HAL_ADC_ConfigChannel+0x494>)
 8001d42:	428b      	cmp	r3, r1
 8001d44:	d147      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x316>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4983      	ldr	r1, [pc, #524]	@ (8001f58 <HAL_ADC_ConfigChannel+0x498>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d040      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x312>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4981      	ldr	r1, [pc, #516]	@ (8001f5c <HAL_ADC_ConfigChannel+0x49c>)
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d039      	beq.n	8001dce <HAL_ADC_ConfigChannel+0x30e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4980      	ldr	r1, [pc, #512]	@ (8001f60 <HAL_ADC_ConfigChannel+0x4a0>)
 8001d60:	428b      	cmp	r3, r1
 8001d62:	d032      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x30a>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	497e      	ldr	r1, [pc, #504]	@ (8001f64 <HAL_ADC_ConfigChannel+0x4a4>)
 8001d6a:	428b      	cmp	r3, r1
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x306>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	497d      	ldr	r1, [pc, #500]	@ (8001f68 <HAL_ADC_ConfigChannel+0x4a8>)
 8001d74:	428b      	cmp	r3, r1
 8001d76:	d024      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x302>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	497b      	ldr	r1, [pc, #492]	@ (8001f6c <HAL_ADC_ConfigChannel+0x4ac>)
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	d01d      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x2fe>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	497a      	ldr	r1, [pc, #488]	@ (8001f70 <HAL_ADC_ConfigChannel+0x4b0>)
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d016      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x2fa>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4978      	ldr	r1, [pc, #480]	@ (8001f74 <HAL_ADC_ConfigChannel+0x4b4>)
 8001d92:	428b      	cmp	r3, r1
 8001d94:	d00f      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x2f6>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4977      	ldr	r1, [pc, #476]	@ (8001f78 <HAL_ADC_ConfigChannel+0x4b8>)
 8001d9c:	428b      	cmp	r3, r1
 8001d9e:	d008      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x2f2>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4975      	ldr	r1, [pc, #468]	@ (8001f7c <HAL_ADC_ConfigChannel+0x4bc>)
 8001da6:	428b      	cmp	r3, r1
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x2ee>
 8001daa:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <HAL_ADC_ConfigChannel+0x4c0>)
 8001dac:	e05a      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dae:	2300      	movs	r3, #0
 8001db0:	e058      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001db2:	4b74      	ldr	r3, [pc, #464]	@ (8001f84 <HAL_ADC_ConfigChannel+0x4c4>)
 8001db4:	e056      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001db6:	4b74      	ldr	r3, [pc, #464]	@ (8001f88 <HAL_ADC_ConfigChannel+0x4c8>)
 8001db8:	e054      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dba:	4b6e      	ldr	r3, [pc, #440]	@ (8001f74 <HAL_ADC_ConfigChannel+0x4b4>)
 8001dbc:	e052      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dbe:	4b6c      	ldr	r3, [pc, #432]	@ (8001f70 <HAL_ADC_ConfigChannel+0x4b0>)
 8001dc0:	e050      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dc2:	4b72      	ldr	r3, [pc, #456]	@ (8001f8c <HAL_ADC_ConfigChannel+0x4cc>)
 8001dc4:	e04e      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dc6:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_ADC_ConfigChannel+0x4d0>)
 8001dc8:	e04c      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dca:	4b72      	ldr	r3, [pc, #456]	@ (8001f94 <HAL_ADC_ConfigChannel+0x4d4>)
 8001dcc:	e04a      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dce:	4b72      	ldr	r3, [pc, #456]	@ (8001f98 <HAL_ADC_ConfigChannel+0x4d8>)
 8001dd0:	e048      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e046      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4970      	ldr	r1, [pc, #448]	@ (8001f9c <HAL_ADC_ConfigChannel+0x4dc>)
 8001ddc:	428b      	cmp	r3, r1
 8001dde:	d140      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x3a2>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	495c      	ldr	r1, [pc, #368]	@ (8001f58 <HAL_ADC_ConfigChannel+0x498>)
 8001de6:	428b      	cmp	r3, r1
 8001de8:	d039      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x39e>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	495b      	ldr	r1, [pc, #364]	@ (8001f5c <HAL_ADC_ConfigChannel+0x49c>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d032      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x39a>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4959      	ldr	r1, [pc, #356]	@ (8001f60 <HAL_ADC_ConfigChannel+0x4a0>)
 8001dfa:	428b      	cmp	r3, r1
 8001dfc:	d02b      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0x396>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4958      	ldr	r1, [pc, #352]	@ (8001f64 <HAL_ADC_ConfigChannel+0x4a4>)
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d024      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x392>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4956      	ldr	r1, [pc, #344]	@ (8001f68 <HAL_ADC_ConfigChannel+0x4a8>)
 8001e0e:	428b      	cmp	r3, r1
 8001e10:	d01d      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x38e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4955      	ldr	r1, [pc, #340]	@ (8001f6c <HAL_ADC_ConfigChannel+0x4ac>)
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	d016      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x38a>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4953      	ldr	r1, [pc, #332]	@ (8001f70 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e22:	428b      	cmp	r3, r1
 8001e24:	d00f      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x386>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4952      	ldr	r1, [pc, #328]	@ (8001f74 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d008      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x382>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4951      	ldr	r1, [pc, #324]	@ (8001f7c <HAL_ADC_ConfigChannel+0x4bc>)
 8001e36:	428b      	cmp	r3, r1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x37e>
 8001e3a:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <HAL_ADC_ConfigChannel+0x4c0>)
 8001e3c:	e012      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e010      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e42:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e44:	e00e      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e46:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e48:	e00c      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e4a:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e4c:	e00a      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <HAL_ADC_ConfigChannel+0x4cc>)
 8001e50:	e008      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e52:	4b4f      	ldr	r3, [pc, #316]	@ (8001f90 <HAL_ADC_ConfigChannel+0x4d0>)
 8001e54:	e006      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e56:	4b4f      	ldr	r3, [pc, #316]	@ (8001f94 <HAL_ADC_ConfigChannel+0x4d4>)
 8001e58:	e004      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <HAL_ADC_ConfigChannel+0x4d8>)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a4>
 8001e62:	2300      	movs	r3, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f7ff f922 	bl	80010b0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f280 80fc 	bge.w	800206e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_ADC_ConfigChannel+0x494>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0x3ca>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a45      	ldr	r2, [pc, #276]	@ (8001f9c <HAL_ADC_ConfigChannel+0x4dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x3ce>
 8001e8a:	4b45      	ldr	r3, [pc, #276]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x4e0>)
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x3d0>
 8001e8e:	4b45      	ldr	r3, [pc, #276]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x4e4>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f8ff 	bl	8001094 <LL_ADC_GetCommonPathInternalCh>
 8001e96:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <HAL_ADC_ConfigChannel+0x494>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_ConfigChannel+0x3ec>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3d      	ldr	r2, [pc, #244]	@ (8001f9c <HAL_ADC_ConfigChannel+0x4dc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10e      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x40a>
 8001eac:	4829      	ldr	r0, [pc, #164]	@ (8001f54 <HAL_ADC_ConfigChannel+0x494>)
 8001eae:	f7ff faab 	bl	8001408 <LL_ADC_IsEnabled>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4839      	ldr	r0, [pc, #228]	@ (8001f9c <HAL_ADC_ConfigChannel+0x4dc>)
 8001eb6:	f7ff faa7 	bl	8001408 <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4323      	orrs	r3, r4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e008      	b.n	8001edc <HAL_ADC_ConfigChannel+0x41c>
 8001eca:	4837      	ldr	r0, [pc, #220]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x4e8>)
 8001ecc:	f7ff fa9c 	bl	8001408 <LL_ADC_IsEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf0c      	ite	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2300      	movne	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80b3 	beq.w	8002048 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a31      	ldr	r2, [pc, #196]	@ (8001fac <HAL_ADC_ConfigChannel+0x4ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d165      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4f8>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d160      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x4e8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 80b6 	bne.w	800206e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <HAL_ADC_ConfigChannel+0x494>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_ConfigChannel+0x456>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_ADC_ConfigChannel+0x4dc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x45a>
 8001f16:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x4e0>)
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x45c>
 8001f1a:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x4e4>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f7ff f8a2 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2a:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x4f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	4a20      	ldr	r2, [pc, #128]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x4f4>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	3301      	adds	r3, #1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001f3e:	e002      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f4c:	e08f      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
 8001f4e:	bf00      	nop
 8001f50:	47ff0000 	.word	0x47ff0000
 8001f54:	40022000 	.word	0x40022000
 8001f58:	04300002 	.word	0x04300002
 8001f5c:	08600004 	.word	0x08600004
 8001f60:	0c900008 	.word	0x0c900008
 8001f64:	10c00010 	.word	0x10c00010
 8001f68:	14f00020 	.word	0x14f00020
 8001f6c:	2a000400 	.word	0x2a000400
 8001f70:	2e300800 	.word	0x2e300800
 8001f74:	32601000 	.word	0x32601000
 8001f78:	43210000 	.word	0x43210000
 8001f7c:	4b840000 	.word	0x4b840000
 8001f80:	4fb80000 	.word	0x4fb80000
 8001f84:	47520000 	.word	0x47520000
 8001f88:	36902000 	.word	0x36902000
 8001f8c:	25b00200 	.word	0x25b00200
 8001f90:	21800100 	.word	0x21800100
 8001f94:	1d500080 	.word	0x1d500080
 8001f98:	19200040 	.word	0x19200040
 8001f9c:	40022100 	.word	0x40022100
 8001fa0:	40022300 	.word	0x40022300
 8001fa4:	58026300 	.word	0x58026300
 8001fa8:	58026000 	.word	0x58026000
 8001fac:	cb840000 	.word	0xcb840000
 8001fb0:	24000000 	.word	0x24000000
 8001fb4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a31      	ldr	r2, [pc, #196]	@ (8002084 <HAL_ADC_ConfigChannel+0x5c4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11e      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x540>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d119      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <HAL_ADC_ConfigChannel+0x5c8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d14b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2c      	ldr	r2, [pc, #176]	@ (800208c <HAL_ADC_ConfigChannel+0x5cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d004      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x52a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8002090 <HAL_ADC_ConfigChannel+0x5d0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x52e>
 8001fea:	4a2a      	ldr	r2, [pc, #168]	@ (8002094 <HAL_ADC_ConfigChannel+0x5d4>)
 8001fec:	e000      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x530>
 8001fee:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <HAL_ADC_ConfigChannel+0x5d8>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f7ff f838 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ffe:	e036      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a25      	ldr	r2, [pc, #148]	@ (800209c <HAL_ADC_ConfigChannel+0x5dc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d131      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d12c      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1b      	ldr	r2, [pc, #108]	@ (8002088 <HAL_ADC_ConfigChannel+0x5c8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d127      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1a      	ldr	r2, [pc, #104]	@ (800208c <HAL_ADC_ConfigChannel+0x5cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x572>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <HAL_ADC_ConfigChannel+0x5d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x576>
 8002032:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <HAL_ADC_ConfigChannel+0x5d4>)
 8002034:	e000      	b.n	8002038 <HAL_ADC_ConfigChannel+0x578>
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <HAL_ADC_ConfigChannel+0x5d8>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff f814 	bl	800106e <LL_ADC_SetCommonPathInternalCh>
 8002046:	e012      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800205a:	e008      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800207a:	4618      	mov	r0, r3
 800207c:	3734      	adds	r7, #52	@ 0x34
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	bf00      	nop
 8002084:	c7520000 	.word	0xc7520000
 8002088:	58026000 	.word	0x58026000
 800208c:	40022000 	.word	0x40022000
 8002090:	40022100 	.word	0x40022100
 8002094:	40022300 	.word	0x40022300
 8002098:	58026300 	.word	0x58026300
 800209c:	cfb80000 	.word	0xcfb80000

080020a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f9f4 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fa16 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 80020c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8098 	beq.w	8002208 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02a      	beq.n	800213c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7d5b      	ldrb	r3, [r3, #21]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d126      	bne.n	800213c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7d1b      	ldrb	r3, [r3, #20]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d122      	bne.n	800213c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020fa:	e014      	b.n	8002126 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <ADC_ConversionStop+0x174>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d90d      	bls.n	8002120 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e074      	b.n	800220a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b40      	cmp	r3, #64	@ 0x40
 8002132:	d1e3      	bne.n	80020fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2240      	movs	r2, #64	@ 0x40
 800213a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d014      	beq.n	800216c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f9ac 	bl	80014a4 <LL_ADC_REG_IsConversionOngoing>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f969 	bl	800142e <LL_ADC_IsDisableOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f988 	bl	800147c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d014      	beq.n	800219c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9bc 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f951 	bl	800142e <LL_ADC_IsDisableOngoing>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f998 	bl	80014cc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d005      	beq.n	80021ae <ADC_ConversionStop+0x10e>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d105      	bne.n	80021b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021a8:	230c      	movs	r3, #12
 80021aa:	617b      	str	r3, [r7, #20]
        break;
 80021ac:	e005      	b.n	80021ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021ae:	2308      	movs	r3, #8
 80021b0:	617b      	str	r3, [r7, #20]
        break;
 80021b2:	e002      	b.n	80021ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021b4:	2304      	movs	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]
        break;
 80021b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021ba:	f7fe ff09 	bl	8000fd0 <HAL_GetTick>
 80021be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021c0:	e01b      	b.n	80021fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021c2:	f7fe ff05 	bl	8000fd0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d914      	bls.n	80021fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	f043 0210 	orr.w	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e007      	b.n	800220a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1dc      	bne.n	80021c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	000cdbff 	.word	0x000cdbff

08002218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f8ef 	bl	8001408 <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d16e      	bne.n	800230e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b38      	ldr	r3, [pc, #224]	@ (8002318 <ADC_Enable+0x100>)
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0210 	orr.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e05a      	b.n	8002310 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8aa 	bl	80013b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002264:	f7fe feb4 	bl	8000fd0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <ADC_Enable+0x104>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <ADC_Enable+0x66>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a29      	ldr	r2, [pc, #164]	@ (8002320 <ADC_Enable+0x108>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d101      	bne.n	8002282 <ADC_Enable+0x6a>
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <ADC_Enable+0x10c>)
 8002280:	e000      	b.n	8002284 <ADC_Enable+0x6c>
 8002282:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <ADC_Enable+0x110>)
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f83b 	bl	8001300 <LL_ADC_GetMultimode>
 800228a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <ADC_Enable+0x108>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d002      	beq.n	800229c <ADC_Enable+0x84>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	e000      	b.n	800229e <ADC_Enable+0x86>
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <ADC_Enable+0x104>)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02c      	beq.n	8002300 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d130      	bne.n	800230e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ac:	e028      	b.n	8002300 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f8a8 	bl	8001408 <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f878 	bl	80013b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022c8:	f7fe fe82 	bl	8000fd0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d914      	bls.n	8002300 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00d      	beq.n	8002300 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	f043 0210 	orr.w	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d1cf      	bne.n	80022ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	8000003f 	.word	0x8000003f
 800231c:	40022000 	.word	0x40022000
 8002320:	40022100 	.word	0x40022100
 8002324:	40022300 	.word	0x40022300
 8002328:	58026300 	.word	0x58026300

0800232c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f878 	bl	800142e <LL_ADC_IsDisableOngoing>
 800233e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f85f 	bl	8001408 <LL_ADC_IsEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d047      	beq.n	80023e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d144      	bne.n	80023e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030d 	and.w	r3, r3, #13
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10c      	bne.n	800237e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f839 	bl	80013e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2203      	movs	r2, #3
 8002374:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002376:	f7fe fe2b 	bl	8000fd0 <HAL_GetTick>
 800237a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800237c:	e029      	b.n	80023d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e023      	b.n	80023e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800239a:	f7fe fe19 	bl	8000fd0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d914      	bls.n	80023d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	f043 0210 	orr.w	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e007      	b.n	80023e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1dc      	bne.n	800239a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d14b      	bne.n	800249c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d021      	beq.n	8002462 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fecb 	bl	80011be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d032      	beq.n	8002494 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d12b      	bne.n	8002494 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002440:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d11f      	bne.n	8002494 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002460:	e018      	b.n	8002494 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d111      	bne.n	8002494 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7fe f869 	bl	800056c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800249a:	e00e      	b.n	80024ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7fe f87f 	bl	80005ac <HAL_ADC_ErrorCallback>
}
 80024ae:	e004      	b.n	80024ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff faeb 	bl	8001aac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7fe f851 	bl	80005ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7a      	ldr	r2, [pc, #488]	@ (800270c <ADC_ConfigureBoostMode+0x1f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <ADC_ConfigureBoostMode+0x1c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a79      	ldr	r2, [pc, #484]	@ (8002710 <ADC_ConfigureBoostMode+0x1fc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d109      	bne.n	8002544 <ADC_ConfigureBoostMode+0x30>
 8002530:	4b78      	ldr	r3, [pc, #480]	@ (8002714 <ADC_ConfigureBoostMode+0x200>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <ADC_ConfigureBoostMode+0x42>
 8002544:	4b74      	ldr	r3, [pc, #464]	@ (8002718 <ADC_ConfigureBoostMode+0x204>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800255a:	f005 fab5 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 800255e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002568:	d010      	beq.n	800258c <ADC_ConfigureBoostMode+0x78>
 800256a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800256e:	d873      	bhi.n	8002658 <ADC_ConfigureBoostMode+0x144>
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002574:	d002      	beq.n	800257c <ADC_ConfigureBoostMode+0x68>
 8002576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800257a:	d16d      	bne.n	8002658 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	60fb      	str	r3, [r7, #12]
        break;
 800258a:	e068      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	60fb      	str	r3, [r7, #12]
        break;
 8002592:	e064      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002594:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f006 fd3c 	bl	8009018 <HAL_RCCEx_GetPeriphCLKFreq>
 80025a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025aa:	d051      	beq.n	8002650 <ADC_ConfigureBoostMode+0x13c>
 80025ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80025b0:	d854      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025b2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025b6:	d047      	beq.n	8002648 <ADC_ConfigureBoostMode+0x134>
 80025b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80025bc:	d84e      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025be:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025c2:	d03d      	beq.n	8002640 <ADC_ConfigureBoostMode+0x12c>
 80025c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80025c8:	d848      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025ce:	d033      	beq.n	8002638 <ADC_ConfigureBoostMode+0x124>
 80025d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025d4:	d842      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025d6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025da:	d029      	beq.n	8002630 <ADC_ConfigureBoostMode+0x11c>
 80025dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80025e0:	d83c      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025e6:	d01a      	beq.n	800261e <ADC_ConfigureBoostMode+0x10a>
 80025e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80025ec:	d836      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025ee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025f2:	d014      	beq.n	800261e <ADC_ConfigureBoostMode+0x10a>
 80025f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80025f8:	d830      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 80025fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025fe:	d00e      	beq.n	800261e <ADC_ConfigureBoostMode+0x10a>
 8002600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002604:	d82a      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 8002606:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800260a:	d008      	beq.n	800261e <ADC_ConfigureBoostMode+0x10a>
 800260c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002610:	d824      	bhi.n	800265c <ADC_ConfigureBoostMode+0x148>
 8002612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002616:	d002      	beq.n	800261e <ADC_ConfigureBoostMode+0x10a>
 8002618:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800261c:	d11e      	bne.n	800265c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	60fb      	str	r3, [r7, #12]
        break;
 800262e:	e016      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
        break;
 8002636:	e012      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	60fb      	str	r3, [r7, #12]
        break;
 800263e:	e00e      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	60fb      	str	r3, [r7, #12]
        break;
 8002646:	e00a      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	09db      	lsrs	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
        break;
 800264e:	e006      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e002      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800265c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800265e:	f7fe fce7 	bl	8001030 <HAL_GetREVID>
 8002662:	4603      	mov	r3, r0
 8002664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002668:	4293      	cmp	r3, r2
 800266a:	d815      	bhi.n	8002698 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a2b      	ldr	r2, [pc, #172]	@ (800271c <ADC_ConfigureBoostMode+0x208>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d908      	bls.n	8002686 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002682:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002684:	e03e      	b.n	8002704 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	e035      	b.n	8002704 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <ADC_ConfigureBoostMode+0x20c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d808      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	e025      	b.n	8002704 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002724 <ADC_ConfigureBoostMode+0x210>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d80a      	bhi.n	80026d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	e016      	b.n	8002704 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <ADC_ConfigureBoostMode+0x214>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d80a      	bhi.n	80026f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	609a      	str	r2, [r3, #8]
}
 80026f2:	e007      	b.n	8002704 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40022000 	.word	0x40022000
 8002710:	40022100 	.word	0x40022100
 8002714:	40022300 	.word	0x40022300
 8002718:	58026300 	.word	0x58026300
 800271c:	01312d00 	.word	0x01312d00
 8002720:	005f5e10 	.word	0x005f5e10
 8002724:	00bebc20 	.word	0x00bebc20
 8002728:	017d7840 	.word	0x017d7840

0800272c <__NVIC_SetPriorityGrouping>:
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	@ (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	05fa0000 	.word	0x05fa0000

08002774 <__NVIC_GetPriorityGrouping>:
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	@ (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	@ (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4c 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028aa:	f7ff ff63 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f7ff ffb3 	bl	8002820 <NVIC_EncodePriority>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff82 	bl	80027cc <__NVIC_SetPriority>
}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff56 	bl	8002790 <__NVIC_EnableIRQ>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7fe fb6c 	bl	8000fd0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e316      	b.n	8002f32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a66      	ldr	r2, [pc, #408]	@ (8002aa4 <HAL_DMA_Init+0x1b8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d04a      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a65      	ldr	r2, [pc, #404]	@ (8002aa8 <HAL_DMA_Init+0x1bc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d045      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a63      	ldr	r2, [pc, #396]	@ (8002aac <HAL_DMA_Init+0x1c0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d040      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a62      	ldr	r2, [pc, #392]	@ (8002ab0 <HAL_DMA_Init+0x1c4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d03b      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a60      	ldr	r2, [pc, #384]	@ (8002ab4 <HAL_DMA_Init+0x1c8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d036      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab8 <HAL_DMA_Init+0x1cc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d031      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5d      	ldr	r2, [pc, #372]	@ (8002abc <HAL_DMA_Init+0x1d0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02c      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac0 <HAL_DMA_Init+0x1d4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d027      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac4 <HAL_DMA_Init+0x1d8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d022      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a59      	ldr	r2, [pc, #356]	@ (8002ac8 <HAL_DMA_Init+0x1dc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01d      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a57      	ldr	r2, [pc, #348]	@ (8002acc <HAL_DMA_Init+0x1e0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d018      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a56      	ldr	r2, [pc, #344]	@ (8002ad0 <HAL_DMA_Init+0x1e4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a54      	ldr	r2, [pc, #336]	@ (8002ad4 <HAL_DMA_Init+0x1e8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a53      	ldr	r2, [pc, #332]	@ (8002ad8 <HAL_DMA_Init+0x1ec>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a51      	ldr	r2, [pc, #324]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_Init+0xb8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a50      	ldr	r2, [pc, #320]	@ (8002ae0 <HAL_DMA_Init+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_DMA_Init+0xbc>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_DMA_Init+0xbe>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 813b 	beq.w	8002c26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <HAL_DMA_Init+0x1b8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04a      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a36      	ldr	r2, [pc, #216]	@ (8002aa8 <HAL_DMA_Init+0x1bc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d045      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_DMA_Init+0x1c0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d040      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a33      	ldr	r2, [pc, #204]	@ (8002ab0 <HAL_DMA_Init+0x1c4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d03b      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a31      	ldr	r2, [pc, #196]	@ (8002ab4 <HAL_DMA_Init+0x1c8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d036      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a30      	ldr	r2, [pc, #192]	@ (8002ab8 <HAL_DMA_Init+0x1cc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d031      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <HAL_DMA_Init+0x1d0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d02c      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac0 <HAL_DMA_Init+0x1d4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d027      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <HAL_DMA_Init+0x1d8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d022      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <HAL_DMA_Init+0x1dc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d01d      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	@ (8002acc <HAL_DMA_Init+0x1e0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d018      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_DMA_Init+0x1e4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_DMA_Init+0x1e8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <HAL_DMA_Init+0x1ec>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_DMA_Init+0x1f0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Init+0x174>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ae0 <HAL_DMA_Init+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <HAL_DMA_Init+0x186>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e007      	b.n	8002a82 <HAL_DMA_Init+0x196>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a82:	e02f      	b.n	8002ae4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a84:	f7fe faa4 	bl	8000fd0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d928      	bls.n	8002ae4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e246      	b.n	8002f32 <HAL_DMA_Init+0x646>
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1c8      	bne.n	8002a84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <HAL_DMA_Init+0x420>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d107      	bne.n	8002b48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4313      	orrs	r3, r2
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b48:	4b71      	ldr	r3, [pc, #452]	@ (8002d10 <HAL_DMA_Init+0x424>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b71      	ldr	r3, [pc, #452]	@ (8002d14 <HAL_DMA_Init+0x428>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b54:	d328      	bcc.n	8002ba8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b28      	cmp	r3, #40	@ 0x28
 8002b5c:	d903      	bls.n	8002b66 <HAL_DMA_Init+0x27a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b64:	d917      	bls.n	8002b96 <HAL_DMA_Init+0x2aa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b6c:	d903      	bls.n	8002b76 <HAL_DMA_Init+0x28a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b42      	cmp	r3, #66	@ 0x42
 8002b74:	d90f      	bls.n	8002b96 <HAL_DMA_Init+0x2aa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b46      	cmp	r3, #70	@ 0x46
 8002b7c:	d903      	bls.n	8002b86 <HAL_DMA_Init+0x29a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b48      	cmp	r3, #72	@ 0x48
 8002b84:	d907      	bls.n	8002b96 <HAL_DMA_Init+0x2aa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b8c:	d905      	bls.n	8002b9a <HAL_DMA_Init+0x2ae>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b52      	cmp	r3, #82	@ 0x52
 8002b94:	d801      	bhi.n	8002b9a <HAL_DMA_Init+0x2ae>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_DMA_Init+0x2b0>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0307 	bic.w	r3, r3, #7
 8002bbe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d117      	bne.n	8002c02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f002 f8ed 	bl	8004dc4 <DMA_CheckFifoParam>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2240      	movs	r2, #64	@ 0x40
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e197      	b.n	8002f32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f002 f828 	bl	8004c60 <DMA_CalcBaseAndBitshift>
 8002c10:	4603      	mov	r3, r0
 8002c12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	223f      	movs	r2, #63	@ 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e0cd      	b.n	8002dc2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d18 <HAL_DMA_Init+0x42c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a39      	ldr	r2, [pc, #228]	@ (8002d1c <HAL_DMA_Init+0x430>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a38      	ldr	r2, [pc, #224]	@ (8002d20 <HAL_DMA_Init+0x434>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a36      	ldr	r2, [pc, #216]	@ (8002d24 <HAL_DMA_Init+0x438>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a35      	ldr	r2, [pc, #212]	@ (8002d28 <HAL_DMA_Init+0x43c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a33      	ldr	r2, [pc, #204]	@ (8002d2c <HAL_DMA_Init+0x440>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a32      	ldr	r2, [pc, #200]	@ (8002d30 <HAL_DMA_Init+0x444>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_Init+0x38a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a30      	ldr	r2, [pc, #192]	@ (8002d34 <HAL_DMA_Init+0x448>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_DMA_Init+0x38e>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_Init+0x390>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8097 	beq.w	8002db0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <HAL_DMA_Init+0x42c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d021      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <HAL_DMA_Init+0x430>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01c      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	@ (8002d20 <HAL_DMA_Init+0x434>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d017      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d24 <HAL_DMA_Init+0x438>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d012      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1e      	ldr	r2, [pc, #120]	@ (8002d28 <HAL_DMA_Init+0x43c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d2c <HAL_DMA_Init+0x440>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d008      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_DMA_Init+0x444>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_DMA_Init+0x3e4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <HAL_DMA_Init+0x448>)
 8002cce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_DMA_Init+0x44c>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b40      	cmp	r3, #64	@ 0x40
 8002cf6:	d021      	beq.n	8002d3c <HAL_DMA_Init+0x450>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b80      	cmp	r3, #128	@ 0x80
 8002cfe:	d102      	bne.n	8002d06 <HAL_DMA_Init+0x41a>
 8002d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d04:	e01b      	b.n	8002d3e <HAL_DMA_Init+0x452>
 8002d06:	2300      	movs	r3, #0
 8002d08:	e019      	b.n	8002d3e <HAL_DMA_Init+0x452>
 8002d0a:	bf00      	nop
 8002d0c:	fe10803f 	.word	0xfe10803f
 8002d10:	5c001000 	.word	0x5c001000
 8002d14:	ffff0000 	.word	0xffff0000
 8002d18:	58025408 	.word	0x58025408
 8002d1c:	5802541c 	.word	0x5802541c
 8002d20:	58025430 	.word	0x58025430
 8002d24:	58025444 	.word	0x58025444
 8002d28:	58025458 	.word	0x58025458
 8002d2c:	5802546c 	.word	0x5802546c
 8002d30:	58025480 	.word	0x58025480
 8002d34:	58025494 	.word	0x58025494
 8002d38:	fffe000f 	.word	0xfffe000f
 8002d3c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d6c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b6e      	ldr	r3, [pc, #440]	@ (8002f3c <HAL_DMA_Init+0x650>)
 8002d84:	4413      	add	r3, r2
 8002d86:	4a6e      	ldr	r2, [pc, #440]	@ (8002f40 <HAL_DMA_Init+0x654>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	009a      	lsls	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f001 ff63 	bl	8004c60 <DMA_CalcBaseAndBitshift>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2201      	movs	r2, #1
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	e008      	b.n	8002dc2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2240      	movs	r2, #64	@ 0x40
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0b7      	b.n	8002f32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f44 <HAL_DMA_Init+0x658>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d072      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_DMA_Init+0x65c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d06d      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <HAL_DMA_Init+0x660>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d068      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f50 <HAL_DMA_Init+0x664>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d063      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a59      	ldr	r2, [pc, #356]	@ (8002f54 <HAL_DMA_Init+0x668>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d05e      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a57      	ldr	r2, [pc, #348]	@ (8002f58 <HAL_DMA_Init+0x66c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d059      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_DMA_Init+0x670>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d054      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a54      	ldr	r2, [pc, #336]	@ (8002f60 <HAL_DMA_Init+0x674>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04f      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a53      	ldr	r2, [pc, #332]	@ (8002f64 <HAL_DMA_Init+0x678>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d04a      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a51      	ldr	r2, [pc, #324]	@ (8002f68 <HAL_DMA_Init+0x67c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d045      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a50      	ldr	r2, [pc, #320]	@ (8002f6c <HAL_DMA_Init+0x680>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d040      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4e      	ldr	r2, [pc, #312]	@ (8002f70 <HAL_DMA_Init+0x684>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d03b      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_DMA_Init+0x688>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d036      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4b      	ldr	r2, [pc, #300]	@ (8002f78 <HAL_DMA_Init+0x68c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4a      	ldr	r2, [pc, #296]	@ (8002f7c <HAL_DMA_Init+0x690>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d02c      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a48      	ldr	r2, [pc, #288]	@ (8002f80 <HAL_DMA_Init+0x694>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a47      	ldr	r2, [pc, #284]	@ (8002f84 <HAL_DMA_Init+0x698>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a45      	ldr	r2, [pc, #276]	@ (8002f88 <HAL_DMA_Init+0x69c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01d      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a44      	ldr	r2, [pc, #272]	@ (8002f8c <HAL_DMA_Init+0x6a0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a42      	ldr	r2, [pc, #264]	@ (8002f90 <HAL_DMA_Init+0x6a4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a41      	ldr	r2, [pc, #260]	@ (8002f94 <HAL_DMA_Init+0x6a8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3f      	ldr	r2, [pc, #252]	@ (8002f98 <HAL_DMA_Init+0x6ac>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8002f9c <HAL_DMA_Init+0x6b0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_Init+0x5c6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa0 <HAL_DMA_Init+0x6b4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DMA_Init+0x5ca>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_Init+0x5cc>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d032      	beq.n	8002f22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f001 fffd 	bl	8004ebc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b80      	cmp	r3, #128	@ 0x80
 8002ec8:	d102      	bne.n	8002ed0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ee4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_DMA_Init+0x624>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d80c      	bhi.n	8002f10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f002 f87a 	bl	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e008      	b.n	8002f22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	a7fdabf8 	.word	0xa7fdabf8
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	40020010 	.word	0x40020010
 8002f48:	40020028 	.word	0x40020028
 8002f4c:	40020040 	.word	0x40020040
 8002f50:	40020058 	.word	0x40020058
 8002f54:	40020070 	.word	0x40020070
 8002f58:	40020088 	.word	0x40020088
 8002f5c:	400200a0 	.word	0x400200a0
 8002f60:	400200b8 	.word	0x400200b8
 8002f64:	40020410 	.word	0x40020410
 8002f68:	40020428 	.word	0x40020428
 8002f6c:	40020440 	.word	0x40020440
 8002f70:	40020458 	.word	0x40020458
 8002f74:	40020470 	.word	0x40020470
 8002f78:	40020488 	.word	0x40020488
 8002f7c:	400204a0 	.word	0x400204a0
 8002f80:	400204b8 	.word	0x400204b8
 8002f84:	58025408 	.word	0x58025408
 8002f88:	5802541c 	.word	0x5802541c
 8002f8c:	58025430 	.word	0x58025430
 8002f90:	58025444 	.word	0x58025444
 8002f94:	58025458 	.word	0x58025458
 8002f98:	5802546c 	.word	0x5802546c
 8002f9c:	58025480 	.word	0x58025480
 8002fa0:	58025494 	.word	0x58025494

08002fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e226      	b.n	800340e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_DMA_Start_IT+0x2a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e21f      	b.n	800340e <HAL_DMA_Start_IT+0x46a>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	f040 820a 	bne.w	80033f8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a68      	ldr	r2, [pc, #416]	@ (8003198 <HAL_DMA_Start_IT+0x1f4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a66      	ldr	r2, [pc, #408]	@ (800319c <HAL_DMA_Start_IT+0x1f8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a65      	ldr	r2, [pc, #404]	@ (80031a0 <HAL_DMA_Start_IT+0x1fc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a63      	ldr	r2, [pc, #396]	@ (80031a4 <HAL_DMA_Start_IT+0x200>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a62      	ldr	r2, [pc, #392]	@ (80031a8 <HAL_DMA_Start_IT+0x204>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a60      	ldr	r2, [pc, #384]	@ (80031ac <HAL_DMA_Start_IT+0x208>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5f      	ldr	r2, [pc, #380]	@ (80031b0 <HAL_DMA_Start_IT+0x20c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5d      	ldr	r2, [pc, #372]	@ (80031b4 <HAL_DMA_Start_IT+0x210>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5c      	ldr	r2, [pc, #368]	@ (80031b8 <HAL_DMA_Start_IT+0x214>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5a      	ldr	r2, [pc, #360]	@ (80031bc <HAL_DMA_Start_IT+0x218>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a59      	ldr	r2, [pc, #356]	@ (80031c0 <HAL_DMA_Start_IT+0x21c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a57      	ldr	r2, [pc, #348]	@ (80031c4 <HAL_DMA_Start_IT+0x220>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a56      	ldr	r2, [pc, #344]	@ (80031c8 <HAL_DMA_Start_IT+0x224>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a54      	ldr	r2, [pc, #336]	@ (80031cc <HAL_DMA_Start_IT+0x228>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a53      	ldr	r2, [pc, #332]	@ (80031d0 <HAL_DMA_Start_IT+0x22c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_Start_IT+0xee>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a51      	ldr	r2, [pc, #324]	@ (80031d4 <HAL_DMA_Start_IT+0x230>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <HAL_DMA_Start_IT+0x100>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <HAL_DMA_Start_IT+0x110>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f001 fc24 	bl	8004908 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <HAL_DMA_Start_IT+0x1f4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a33      	ldr	r2, [pc, #204]	@ (800319c <HAL_DMA_Start_IT+0x1f8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a31      	ldr	r2, [pc, #196]	@ (80031a0 <HAL_DMA_Start_IT+0x1fc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_DMA_Start_IT+0x200>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2e      	ldr	r2, [pc, #184]	@ (80031a8 <HAL_DMA_Start_IT+0x204>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_DMA_Start_IT+0x208>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2b      	ldr	r2, [pc, #172]	@ (80031b0 <HAL_DMA_Start_IT+0x20c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	@ (80031b4 <HAL_DMA_Start_IT+0x210>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_DMA_Start_IT+0x214>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <HAL_DMA_Start_IT+0x218>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	@ (80031c0 <HAL_DMA_Start_IT+0x21c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <HAL_DMA_Start_IT+0x220>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_DMA_Start_IT+0x224>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	@ (80031cc <HAL_DMA_Start_IT+0x228>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_DMA_Start_IT+0x22c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMA_Start_IT+0x1bc>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1e      	ldr	r2, [pc, #120]	@ (80031d4 <HAL_DMA_Start_IT+0x230>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Start_IT+0x1c0>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_DMA_Start_IT+0x1c2>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 021e 	bic.w	r2, r3, #30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0216 	orr.w	r2, r2, #22
 800317c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03e      	beq.n	8003204 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0208 	orr.w	r2, r2, #8
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e035      	b.n	8003204 <HAL_DMA_Start_IT+0x260>
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020e 	bic.w	r2, r3, #14
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 020a 	orr.w	r2, r2, #10
 80031ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0204 	orr.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a83      	ldr	r2, [pc, #524]	@ (8003418 <HAL_DMA_Start_IT+0x474>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d072      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a82      	ldr	r2, [pc, #520]	@ (800341c <HAL_DMA_Start_IT+0x478>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d06d      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a80      	ldr	r2, [pc, #512]	@ (8003420 <HAL_DMA_Start_IT+0x47c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d068      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7f      	ldr	r2, [pc, #508]	@ (8003424 <HAL_DMA_Start_IT+0x480>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d063      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7d      	ldr	r2, [pc, #500]	@ (8003428 <HAL_DMA_Start_IT+0x484>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d05e      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7c      	ldr	r2, [pc, #496]	@ (800342c <HAL_DMA_Start_IT+0x488>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d059      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a7a      	ldr	r2, [pc, #488]	@ (8003430 <HAL_DMA_Start_IT+0x48c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d054      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a79      	ldr	r2, [pc, #484]	@ (8003434 <HAL_DMA_Start_IT+0x490>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04f      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a77      	ldr	r2, [pc, #476]	@ (8003438 <HAL_DMA_Start_IT+0x494>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04a      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a76      	ldr	r2, [pc, #472]	@ (800343c <HAL_DMA_Start_IT+0x498>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d045      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a74      	ldr	r2, [pc, #464]	@ (8003440 <HAL_DMA_Start_IT+0x49c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d040      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a73      	ldr	r2, [pc, #460]	@ (8003444 <HAL_DMA_Start_IT+0x4a0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d03b      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a71      	ldr	r2, [pc, #452]	@ (8003448 <HAL_DMA_Start_IT+0x4a4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d036      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a70      	ldr	r2, [pc, #448]	@ (800344c <HAL_DMA_Start_IT+0x4a8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d031      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6e      	ldr	r2, [pc, #440]	@ (8003450 <HAL_DMA_Start_IT+0x4ac>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02c      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6d      	ldr	r2, [pc, #436]	@ (8003454 <HAL_DMA_Start_IT+0x4b0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d027      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003458 <HAL_DMA_Start_IT+0x4b4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6a      	ldr	r2, [pc, #424]	@ (800345c <HAL_DMA_Start_IT+0x4b8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01d      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a68      	ldr	r2, [pc, #416]	@ (8003460 <HAL_DMA_Start_IT+0x4bc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a67      	ldr	r2, [pc, #412]	@ (8003464 <HAL_DMA_Start_IT+0x4c0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_DMA_Start_IT+0x4c4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a64      	ldr	r2, [pc, #400]	@ (800346c <HAL_DMA_Start_IT+0x4c8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_DMA_Start_IT+0x4cc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_Start_IT+0x350>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a61      	ldr	r2, [pc, #388]	@ (8003474 <HAL_DMA_Start_IT+0x4d0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_DMA_Start_IT+0x354>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_DMA_Start_IT+0x356>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800331a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003332:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a37      	ldr	r2, [pc, #220]	@ (8003418 <HAL_DMA_Start_IT+0x474>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d04a      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a36      	ldr	r2, [pc, #216]	@ (800341c <HAL_DMA_Start_IT+0x478>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d045      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a34      	ldr	r2, [pc, #208]	@ (8003420 <HAL_DMA_Start_IT+0x47c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d040      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <HAL_DMA_Start_IT+0x480>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d03b      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a31      	ldr	r2, [pc, #196]	@ (8003428 <HAL_DMA_Start_IT+0x484>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d036      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a30      	ldr	r2, [pc, #192]	@ (800342c <HAL_DMA_Start_IT+0x488>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d031      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2e      	ldr	r2, [pc, #184]	@ (8003430 <HAL_DMA_Start_IT+0x48c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02c      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <HAL_DMA_Start_IT+0x490>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d027      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <HAL_DMA_Start_IT+0x494>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d022      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <HAL_DMA_Start_IT+0x498>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d01d      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_DMA_Start_IT+0x49c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d018      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <HAL_DMA_Start_IT+0x4a0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_DMA_Start_IT+0x4a4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a24      	ldr	r2, [pc, #144]	@ (800344c <HAL_DMA_Start_IT+0x4a8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <HAL_DMA_Start_IT+0x4ac>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_DMA_Start_IT+0x430>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a21      	ldr	r2, [pc, #132]	@ (8003454 <HAL_DMA_Start_IT+0x4b0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d108      	bne.n	80033e6 <HAL_DMA_Start_IT+0x442>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e012      	b.n	800340c <HAL_DMA_Start_IT+0x468>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e009      	b.n	800340c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	58025408 	.word	0x58025408
 800345c:	5802541c 	.word	0x5802541c
 8003460:	58025430 	.word	0x58025430
 8003464:	58025444 	.word	0x58025444
 8003468:	58025458 	.word	0x58025458
 800346c:	5802546c 	.word	0x5802546c
 8003470:	58025480 	.word	0x58025480
 8003474:	58025494 	.word	0x58025494

08003478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003480:	f7fd fda6 	bl	8000fd0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e2dc      	b.n	8003a4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	@ 0x80
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e2cd      	b.n	8003a4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a76      	ldr	r2, [pc, #472]	@ (800368c <HAL_DMA_Abort+0x214>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a74      	ldr	r2, [pc, #464]	@ (8003690 <HAL_DMA_Abort+0x218>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a73      	ldr	r2, [pc, #460]	@ (8003694 <HAL_DMA_Abort+0x21c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a71      	ldr	r2, [pc, #452]	@ (8003698 <HAL_DMA_Abort+0x220>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a70      	ldr	r2, [pc, #448]	@ (800369c <HAL_DMA_Abort+0x224>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6e      	ldr	r2, [pc, #440]	@ (80036a0 <HAL_DMA_Abort+0x228>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6d      	ldr	r2, [pc, #436]	@ (80036a4 <HAL_DMA_Abort+0x22c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6b      	ldr	r2, [pc, #428]	@ (80036a8 <HAL_DMA_Abort+0x230>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6a      	ldr	r2, [pc, #424]	@ (80036ac <HAL_DMA_Abort+0x234>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a68      	ldr	r2, [pc, #416]	@ (80036b0 <HAL_DMA_Abort+0x238>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a67      	ldr	r2, [pc, #412]	@ (80036b4 <HAL_DMA_Abort+0x23c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <HAL_DMA_Abort+0x240>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a64      	ldr	r2, [pc, #400]	@ (80036bc <HAL_DMA_Abort+0x244>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a62      	ldr	r2, [pc, #392]	@ (80036c0 <HAL_DMA_Abort+0x248>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a61      	ldr	r2, [pc, #388]	@ (80036c4 <HAL_DMA_Abort+0x24c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Abort+0xd6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a5f      	ldr	r2, [pc, #380]	@ (80036c8 <HAL_DMA_Abort+0x250>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Abort+0xda>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_DMA_Abort+0xdc>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 021e 	bic.w	r2, r2, #30
 8003566:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003576:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e00a      	b.n	8003596 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020e 	bic.w	r2, r2, #14
 800358e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3c      	ldr	r2, [pc, #240]	@ (800368c <HAL_DMA_Abort+0x214>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d072      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003690 <HAL_DMA_Abort+0x218>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d06d      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a39      	ldr	r2, [pc, #228]	@ (8003694 <HAL_DMA_Abort+0x21c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d068      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <HAL_DMA_Abort+0x220>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d063      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <HAL_DMA_Abort+0x224>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d05e      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a34      	ldr	r2, [pc, #208]	@ (80036a0 <HAL_DMA_Abort+0x228>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d059      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a33      	ldr	r2, [pc, #204]	@ (80036a4 <HAL_DMA_Abort+0x22c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d054      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <HAL_DMA_Abort+0x230>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04f      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <HAL_DMA_Abort+0x234>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04a      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <HAL_DMA_Abort+0x238>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d045      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2d      	ldr	r2, [pc, #180]	@ (80036b4 <HAL_DMA_Abort+0x23c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d040      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2b      	ldr	r2, [pc, #172]	@ (80036b8 <HAL_DMA_Abort+0x240>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <HAL_DMA_Abort+0x244>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d036      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a28      	ldr	r2, [pc, #160]	@ (80036c0 <HAL_DMA_Abort+0x248>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_DMA_Abort+0x24c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d02c      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	@ (80036c8 <HAL_DMA_Abort+0x250>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d027      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a24      	ldr	r2, [pc, #144]	@ (80036cc <HAL_DMA_Abort+0x254>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <HAL_DMA_Abort+0x258>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <HAL_DMA_Abort+0x25c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1f      	ldr	r2, [pc, #124]	@ (80036d8 <HAL_DMA_Abort+0x260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_DMA_Abort+0x264>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1c      	ldr	r2, [pc, #112]	@ (80036e0 <HAL_DMA_Abort+0x268>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <HAL_DMA_Abort+0x26c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_Abort+0x20e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_DMA_Abort+0x270>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d132      	bne.n	80036ec <HAL_DMA_Abort+0x274>
 8003686:	2301      	movs	r3, #1
 8003688:	e031      	b.n	80036ee <HAL_DMA_Abort+0x276>
 800368a:	bf00      	nop
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
 80036cc:	58025408 	.word	0x58025408
 80036d0:	5802541c 	.word	0x5802541c
 80036d4:	58025430 	.word	0x58025430
 80036d8:	58025444 	.word	0x58025444
 80036dc:	58025458 	.word	0x58025458
 80036e0:	5802546c 	.word	0x5802546c
 80036e4:	58025480 	.word	0x58025480
 80036e8:	58025494 	.word	0x58025494
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003700:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6d      	ldr	r2, [pc, #436]	@ (80038bc <HAL_DMA_Abort+0x444>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d04a      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6b      	ldr	r2, [pc, #428]	@ (80038c0 <HAL_DMA_Abort+0x448>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d045      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6a      	ldr	r2, [pc, #424]	@ (80038c4 <HAL_DMA_Abort+0x44c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d040      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a68      	ldr	r2, [pc, #416]	@ (80038c8 <HAL_DMA_Abort+0x450>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d03b      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a67      	ldr	r2, [pc, #412]	@ (80038cc <HAL_DMA_Abort+0x454>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d036      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a65      	ldr	r2, [pc, #404]	@ (80038d0 <HAL_DMA_Abort+0x458>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d031      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a64      	ldr	r2, [pc, #400]	@ (80038d4 <HAL_DMA_Abort+0x45c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d02c      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a62      	ldr	r2, [pc, #392]	@ (80038d8 <HAL_DMA_Abort+0x460>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d027      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a61      	ldr	r2, [pc, #388]	@ (80038dc <HAL_DMA_Abort+0x464>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5f      	ldr	r2, [pc, #380]	@ (80038e0 <HAL_DMA_Abort+0x468>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01d      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5e      	ldr	r2, [pc, #376]	@ (80038e4 <HAL_DMA_Abort+0x46c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a5c      	ldr	r2, [pc, #368]	@ (80038e8 <HAL_DMA_Abort+0x470>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a5b      	ldr	r2, [pc, #364]	@ (80038ec <HAL_DMA_Abort+0x474>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a59      	ldr	r2, [pc, #356]	@ (80038f0 <HAL_DMA_Abort+0x478>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a58      	ldr	r2, [pc, #352]	@ (80038f4 <HAL_DMA_Abort+0x47c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_DMA_Abort+0x32a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a56      	ldr	r2, [pc, #344]	@ (80038f8 <HAL_DMA_Abort+0x480>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d108      	bne.n	80037b4 <HAL_DMA_Abort+0x33c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e007      	b.n	80037c4 <HAL_DMA_Abort+0x34c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037c4:	e013      	b.n	80037ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c6:	f7fd fc03 	bl	8000fd0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d90c      	bls.n	80037ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e12d      	b.n	8003a4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2f      	ldr	r2, [pc, #188]	@ (80038bc <HAL_DMA_Abort+0x444>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_DMA_Abort+0x448>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_Abort+0x422>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <HAL_DMA_Abort+0x44c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2a      	ldr	r2, [pc, #168]	@ (80038c8 <HAL_DMA_Abort+0x450>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_DMA_Abort+0x454>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_Abort+0x422>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <HAL_DMA_Abort+0x458>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a26      	ldr	r2, [pc, #152]	@ (80038d4 <HAL_DMA_Abort+0x45c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a24      	ldr	r2, [pc, #144]	@ (80038d8 <HAL_DMA_Abort+0x460>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_Abort+0x422>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a23      	ldr	r2, [pc, #140]	@ (80038dc <HAL_DMA_Abort+0x464>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <HAL_DMA_Abort+0x468>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_Abort+0x422>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a20      	ldr	r2, [pc, #128]	@ (80038e4 <HAL_DMA_Abort+0x46c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <HAL_DMA_Abort+0x470>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <HAL_DMA_Abort+0x474>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_Abort+0x422>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1b      	ldr	r2, [pc, #108]	@ (80038f0 <HAL_DMA_Abort+0x478>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <HAL_DMA_Abort+0x47c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Abort+0x422>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <HAL_DMA_Abort+0x480>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_DMA_Abort+0x426>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_DMA_Abort+0x428>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02b      	beq.n	80038fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	223f      	movs	r2, #63	@ 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	e02a      	b.n	8003912 <HAL_DMA_Abort+0x49a>
 80038bc:	40020010 	.word	0x40020010
 80038c0:	40020028 	.word	0x40020028
 80038c4:	40020040 	.word	0x40020040
 80038c8:	40020058 	.word	0x40020058
 80038cc:	40020070 	.word	0x40020070
 80038d0:	40020088 	.word	0x40020088
 80038d4:	400200a0 	.word	0x400200a0
 80038d8:	400200b8 	.word	0x400200b8
 80038dc:	40020410 	.word	0x40020410
 80038e0:	40020428 	.word	0x40020428
 80038e4:	40020440 	.word	0x40020440
 80038e8:	40020458 	.word	0x40020458
 80038ec:	40020470 	.word	0x40020470
 80038f0:	40020488 	.word	0x40020488
 80038f4:	400204a0 	.word	0x400204a0
 80038f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2201      	movs	r2, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4f      	ldr	r2, [pc, #316]	@ (8003a54 <HAL_DMA_Abort+0x5dc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d072      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a4d      	ldr	r2, [pc, #308]	@ (8003a58 <HAL_DMA_Abort+0x5e0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d06d      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a5c <HAL_DMA_Abort+0x5e4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d068      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_DMA_Abort+0x5e8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d063      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a49      	ldr	r2, [pc, #292]	@ (8003a64 <HAL_DMA_Abort+0x5ec>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d05e      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a47      	ldr	r2, [pc, #284]	@ (8003a68 <HAL_DMA_Abort+0x5f0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d059      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a46      	ldr	r2, [pc, #280]	@ (8003a6c <HAL_DMA_Abort+0x5f4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d054      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a44      	ldr	r2, [pc, #272]	@ (8003a70 <HAL_DMA_Abort+0x5f8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04f      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <HAL_DMA_Abort+0x5fc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d04a      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a41      	ldr	r2, [pc, #260]	@ (8003a78 <HAL_DMA_Abort+0x600>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d045      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a40      	ldr	r2, [pc, #256]	@ (8003a7c <HAL_DMA_Abort+0x604>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d040      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3e      	ldr	r2, [pc, #248]	@ (8003a80 <HAL_DMA_Abort+0x608>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d03b      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <HAL_DMA_Abort+0x60c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d036      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3b      	ldr	r2, [pc, #236]	@ (8003a88 <HAL_DMA_Abort+0x610>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d031      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <HAL_DMA_Abort+0x614>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d02c      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a38      	ldr	r2, [pc, #224]	@ (8003a90 <HAL_DMA_Abort+0x618>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d027      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a37      	ldr	r2, [pc, #220]	@ (8003a94 <HAL_DMA_Abort+0x61c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a35      	ldr	r2, [pc, #212]	@ (8003a98 <HAL_DMA_Abort+0x620>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01d      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <HAL_DMA_Abort+0x624>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a32      	ldr	r2, [pc, #200]	@ (8003aa0 <HAL_DMA_Abort+0x628>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a31      	ldr	r2, [pc, #196]	@ (8003aa4 <HAL_DMA_Abort+0x62c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa8 <HAL_DMA_Abort+0x630>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2e      	ldr	r2, [pc, #184]	@ (8003aac <HAL_DMA_Abort+0x634>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_DMA_Abort+0x58a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	@ (8003ab0 <HAL_DMA_Abort+0x638>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_DMA_Abort+0x58e>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_DMA_Abort+0x590>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494

08003ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac0:	4b67      	ldr	r3, [pc, #412]	@ (8003c60 <HAL_DMA_IRQHandler+0x1ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a67      	ldr	r2, [pc, #412]	@ (8003c64 <HAL_DMA_IRQHandler+0x1b0>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5f      	ldr	r2, [pc, #380]	@ (8003c68 <HAL_DMA_IRQHandler+0x1b4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04a      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5d      	ldr	r2, [pc, #372]	@ (8003c6c <HAL_DMA_IRQHandler+0x1b8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d045      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5c      	ldr	r2, [pc, #368]	@ (8003c70 <HAL_DMA_IRQHandler+0x1bc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d040      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5a      	ldr	r2, [pc, #360]	@ (8003c74 <HAL_DMA_IRQHandler+0x1c0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d03b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a59      	ldr	r2, [pc, #356]	@ (8003c78 <HAL_DMA_IRQHandler+0x1c4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d036      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a57      	ldr	r2, [pc, #348]	@ (8003c7c <HAL_DMA_IRQHandler+0x1c8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d031      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a56      	ldr	r2, [pc, #344]	@ (8003c80 <HAL_DMA_IRQHandler+0x1cc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d02c      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a54      	ldr	r2, [pc, #336]	@ (8003c84 <HAL_DMA_IRQHandler+0x1d0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a53      	ldr	r2, [pc, #332]	@ (8003c88 <HAL_DMA_IRQHandler+0x1d4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a51      	ldr	r2, [pc, #324]	@ (8003c8c <HAL_DMA_IRQHandler+0x1d8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a50      	ldr	r2, [pc, #320]	@ (8003c90 <HAL_DMA_IRQHandler+0x1dc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4e      	ldr	r2, [pc, #312]	@ (8003c94 <HAL_DMA_IRQHandler+0x1e0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4d      	ldr	r2, [pc, #308]	@ (8003c98 <HAL_DMA_IRQHandler+0x1e4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c9c <HAL_DMA_IRQHandler+0x1e8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1ec>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xd2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a48      	ldr	r2, [pc, #288]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_IRQHandler+0xd6>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_DMA_IRQHandler+0xd8>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 842b 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a2 	beq.w	8003cec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2e      	ldr	r2, [pc, #184]	@ (8003c68 <HAL_DMA_IRQHandler+0x1b4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d04a      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c6c <HAL_DMA_IRQHandler+0x1b8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d045      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c70 <HAL_DMA_IRQHandler+0x1bc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d040      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2a      	ldr	r2, [pc, #168]	@ (8003c74 <HAL_DMA_IRQHandler+0x1c0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d03b      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a28      	ldr	r2, [pc, #160]	@ (8003c78 <HAL_DMA_IRQHandler+0x1c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d036      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a27      	ldr	r2, [pc, #156]	@ (8003c7c <HAL_DMA_IRQHandler+0x1c8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d031      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a25      	ldr	r2, [pc, #148]	@ (8003c80 <HAL_DMA_IRQHandler+0x1cc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02c      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a24      	ldr	r2, [pc, #144]	@ (8003c84 <HAL_DMA_IRQHandler+0x1d0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d027      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	@ (8003c88 <HAL_DMA_IRQHandler+0x1d4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d022      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a21      	ldr	r2, [pc, #132]	@ (8003c8c <HAL_DMA_IRQHandler+0x1d8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d01d      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <HAL_DMA_IRQHandler+0x1dc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d018      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c94 <HAL_DMA_IRQHandler+0x1e0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <HAL_DMA_IRQHandler+0x1e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00e      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <HAL_DMA_IRQHandler+0x1e8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x194>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a18      	ldr	r2, [pc, #96]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d12f      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x1f4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	e02e      	b.n	8003cbc <HAL_DMA_IRQHandler+0x208>
 8003c5e:	bf00      	nop
 8003c60:	24000000 	.word	0x24000000
 8003c64:	1b4e81b5 	.word	0x1b4e81b5
 8003c68:	40020010 	.word	0x40020010
 8003c6c:	40020028 	.word	0x40020028
 8003c70:	40020040 	.word	0x40020040
 8003c74:	40020058 	.word	0x40020058
 8003c78:	40020070 	.word	0x40020070
 8003c7c:	40020088 	.word	0x40020088
 8003c80:	400200a0 	.word	0x400200a0
 8003c84:	400200b8 	.word	0x400200b8
 8003c88:	40020410 	.word	0x40020410
 8003c8c:	40020428 	.word	0x40020428
 8003c90:	40020440 	.word	0x40020440
 8003c94:	40020458 	.word	0x40020458
 8003c98:	40020470 	.word	0x40020470
 8003c9c:	40020488 	.word	0x40020488
 8003ca0:	400204a0 	.word	0x400204a0
 8003ca4:	400204b8 	.word	0x400204b8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2208      	movs	r2, #8
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06e      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a69      	ldr	r2, [pc, #420]	@ (8003eac <HAL_DMA_IRQHandler+0x3f8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a67      	ldr	r2, [pc, #412]	@ (8003eb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_DMA_IRQHandler+0x400>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a64      	ldr	r2, [pc, #400]	@ (8003eb8 <HAL_DMA_IRQHandler+0x404>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a63      	ldr	r2, [pc, #396]	@ (8003ebc <HAL_DMA_IRQHandler+0x408>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a61      	ldr	r2, [pc, #388]	@ (8003ec0 <HAL_DMA_IRQHandler+0x40c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a60      	ldr	r2, [pc, #384]	@ (8003ec4 <HAL_DMA_IRQHandler+0x410>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec8 <HAL_DMA_IRQHandler+0x414>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5d      	ldr	r2, [pc, #372]	@ (8003ecc <HAL_DMA_IRQHandler+0x418>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5b      	ldr	r2, [pc, #364]	@ (8003ed0 <HAL_DMA_IRQHandler+0x41c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8003ed4 <HAL_DMA_IRQHandler+0x420>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a58      	ldr	r2, [pc, #352]	@ (8003ed8 <HAL_DMA_IRQHandler+0x424>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_DMA_IRQHandler+0x428>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a55      	ldr	r2, [pc, #340]	@ (8003ee0 <HAL_DMA_IRQHandler+0x42c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a54      	ldr	r2, [pc, #336]	@ (8003ee4 <HAL_DMA_IRQHandler+0x430>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x2ee>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	@ (8003ee8 <HAL_DMA_IRQHandler+0x434>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10a      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x304>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e003      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x30c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2201      	movs	r2, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd8:	f043 0202 	orr.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2204      	movs	r2, #4
 8003dea:	409a      	lsls	r2, r3
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 808f 	beq.w	8003f14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003eac <HAL_DMA_IRQHandler+0x3f8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d04a      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d045      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <HAL_DMA_IRQHandler+0x400>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d040      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a27      	ldr	r2, [pc, #156]	@ (8003eb8 <HAL_DMA_IRQHandler+0x404>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d03b      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a26      	ldr	r2, [pc, #152]	@ (8003ebc <HAL_DMA_IRQHandler+0x408>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d036      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	@ (8003ec0 <HAL_DMA_IRQHandler+0x40c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <HAL_DMA_IRQHandler+0x410>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d02c      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a21      	ldr	r2, [pc, #132]	@ (8003ec8 <HAL_DMA_IRQHandler+0x414>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d027      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <HAL_DMA_IRQHandler+0x418>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed0 <HAL_DMA_IRQHandler+0x41c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed4 <HAL_DMA_IRQHandler+0x420>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <HAL_DMA_IRQHandler+0x424>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <HAL_DMA_IRQHandler+0x428>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_DMA_IRQHandler+0x42c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_DMA_IRQHandler+0x430>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x3e2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a15      	ldr	r2, [pc, #84]	@ (8003ee8 <HAL_DMA_IRQHandler+0x434>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12a      	bne.n	8003eec <HAL_DMA_IRQHandler+0x438>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e023      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x440>
 8003eac:	40020010 	.word	0x40020010
 8003eb0:	40020028 	.word	0x40020028
 8003eb4:	40020040 	.word	0x40020040
 8003eb8:	40020058 	.word	0x40020058
 8003ebc:	40020070 	.word	0x40020070
 8003ec0:	40020088 	.word	0x40020088
 8003ec4:	400200a0 	.word	0x400200a0
 8003ec8:	400200b8 	.word	0x400200b8
 8003ecc:	40020410 	.word	0x40020410
 8003ed0:	40020428 	.word	0x40020428
 8003ed4:	40020440 	.word	0x40020440
 8003ed8:	40020458 	.word	0x40020458
 8003edc:	40020470 	.word	0x40020470
 8003ee0:	40020488 	.word	0x40020488
 8003ee4:	400204a0 	.word	0x400204a0
 8003ee8:	400204b8 	.word	0x400204b8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2204      	movs	r2, #4
 8003f02:	409a      	lsls	r2, r3
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80a6 	beq.w	8004076 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a85      	ldr	r2, [pc, #532]	@ (8004144 <HAL_DMA_IRQHandler+0x690>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a83      	ldr	r2, [pc, #524]	@ (8004148 <HAL_DMA_IRQHandler+0x694>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a82      	ldr	r2, [pc, #520]	@ (800414c <HAL_DMA_IRQHandler+0x698>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a80      	ldr	r2, [pc, #512]	@ (8004150 <HAL_DMA_IRQHandler+0x69c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7f      	ldr	r2, [pc, #508]	@ (8004154 <HAL_DMA_IRQHandler+0x6a0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a7d      	ldr	r2, [pc, #500]	@ (8004158 <HAL_DMA_IRQHandler+0x6a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800415c <HAL_DMA_IRQHandler+0x6a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7a      	ldr	r2, [pc, #488]	@ (8004160 <HAL_DMA_IRQHandler+0x6ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a79      	ldr	r2, [pc, #484]	@ (8004164 <HAL_DMA_IRQHandler+0x6b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a77      	ldr	r2, [pc, #476]	@ (8004168 <HAL_DMA_IRQHandler+0x6b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a76      	ldr	r2, [pc, #472]	@ (800416c <HAL_DMA_IRQHandler+0x6b8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a74      	ldr	r2, [pc, #464]	@ (8004170 <HAL_DMA_IRQHandler+0x6bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a73      	ldr	r2, [pc, #460]	@ (8004174 <HAL_DMA_IRQHandler+0x6c0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a71      	ldr	r2, [pc, #452]	@ (8004178 <HAL_DMA_IRQHandler+0x6c4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a70      	ldr	r2, [pc, #448]	@ (800417c <HAL_DMA_IRQHandler+0x6c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_IRQHandler+0x516>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8004180 <HAL_DMA_IRQHandler+0x6cc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x52c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e009      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x540>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03e      	beq.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2210      	movs	r2, #16
 8004002:	409a      	lsls	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d018      	beq.n	8004048 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d024      	beq.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e01f      	b.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01b      	beq.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
 8004046:	e016      	b.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d107      	bne.n	8004066 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0208 	bic.w	r2, r2, #8
 8004064:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2220      	movs	r2, #32
 8004080:	409a      	lsls	r2, r3
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8110 	beq.w	80042ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <HAL_DMA_IRQHandler+0x690>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04a      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2b      	ldr	r2, [pc, #172]	@ (8004148 <HAL_DMA_IRQHandler+0x694>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d045      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a29      	ldr	r2, [pc, #164]	@ (800414c <HAL_DMA_IRQHandler+0x698>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	@ (8004150 <HAL_DMA_IRQHandler+0x69c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d03b      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a26      	ldr	r2, [pc, #152]	@ (8004154 <HAL_DMA_IRQHandler+0x6a0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d036      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a25      	ldr	r2, [pc, #148]	@ (8004158 <HAL_DMA_IRQHandler+0x6a4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d031      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a23      	ldr	r2, [pc, #140]	@ (800415c <HAL_DMA_IRQHandler+0x6a8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02c      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <HAL_DMA_IRQHandler+0x6ac>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d027      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a20      	ldr	r2, [pc, #128]	@ (8004164 <HAL_DMA_IRQHandler+0x6b0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004168 <HAL_DMA_IRQHandler+0x6b4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d01d      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_DMA_IRQHandler+0x6b8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <HAL_DMA_IRQHandler+0x6bc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <HAL_DMA_IRQHandler+0x6c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <HAL_DMA_IRQHandler+0x6c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_DMA_IRQHandler+0x6c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_DMA_IRQHandler+0x678>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a16      	ldr	r2, [pc, #88]	@ (8004180 <HAL_DMA_IRQHandler+0x6cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d12b      	bne.n	8004184 <HAL_DMA_IRQHandler+0x6d0>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e02a      	b.n	8004198 <HAL_DMA_IRQHandler+0x6e4>
 8004142:	bf00      	nop
 8004144:	40020010 	.word	0x40020010
 8004148:	40020028 	.word	0x40020028
 800414c:	40020040 	.word	0x40020040
 8004150:	40020058 	.word	0x40020058
 8004154:	40020070 	.word	0x40020070
 8004158:	40020088 	.word	0x40020088
 800415c:	400200a0 	.word	0x400200a0
 8004160:	400200b8 	.word	0x400200b8
 8004164:	40020410 	.word	0x40020410
 8004168:	40020428 	.word	0x40020428
 800416c:	40020440 	.word	0x40020440
 8004170:	40020458 	.word	0x40020458
 8004174:	40020470 	.word	0x40020470
 8004178:	40020488 	.word	0x40020488
 800417c:	400204a0 	.word	0x400204a0
 8004180:	400204b8 	.word	0x400204b8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8087 	beq.w	80042ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2220      	movs	r2, #32
 80041a8:	409a      	lsls	r2, r3
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d139      	bne.n	800422e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0216 	bic.w	r2, r2, #22
 80041c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <HAL_DMA_IRQHandler+0x736>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0208 	bic.w	r2, r2, #8
 80041f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	223f      	movs	r2, #63	@ 0x3f
 8004204:	409a      	lsls	r2, r3
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 834a 	beq.w	80048b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
          }
          return;
 800422c:	e344      	b.n	80048b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d018      	beq.n	800426e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
 800425a:	e027      	b.n	80042ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d023      	beq.n	80042ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
 800426c:	e01e      	b.n	80042ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10f      	bne.n	800429c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0210 	bic.w	r2, r2, #16
 800428a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8306 	beq.w	80048c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8088 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7a      	ldr	r2, [pc, #488]	@ (80044bc <HAL_DMA_IRQHandler+0xa08>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04a      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a79      	ldr	r2, [pc, #484]	@ (80044c0 <HAL_DMA_IRQHandler+0xa0c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d045      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a77      	ldr	r2, [pc, #476]	@ (80044c4 <HAL_DMA_IRQHandler+0xa10>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a76      	ldr	r2, [pc, #472]	@ (80044c8 <HAL_DMA_IRQHandler+0xa14>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d03b      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a74      	ldr	r2, [pc, #464]	@ (80044cc <HAL_DMA_IRQHandler+0xa18>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d036      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a73      	ldr	r2, [pc, #460]	@ (80044d0 <HAL_DMA_IRQHandler+0xa1c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d031      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a71      	ldr	r2, [pc, #452]	@ (80044d4 <HAL_DMA_IRQHandler+0xa20>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d02c      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a70      	ldr	r2, [pc, #448]	@ (80044d8 <HAL_DMA_IRQHandler+0xa24>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d027      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6e      	ldr	r2, [pc, #440]	@ (80044dc <HAL_DMA_IRQHandler+0xa28>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d022      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6d      	ldr	r2, [pc, #436]	@ (80044e0 <HAL_DMA_IRQHandler+0xa2c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01d      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6b      	ldr	r2, [pc, #428]	@ (80044e4 <HAL_DMA_IRQHandler+0xa30>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d018      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6a      	ldr	r2, [pc, #424]	@ (80044e8 <HAL_DMA_IRQHandler+0xa34>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a68      	ldr	r2, [pc, #416]	@ (80044ec <HAL_DMA_IRQHandler+0xa38>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00e      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a67      	ldr	r2, [pc, #412]	@ (80044f0 <HAL_DMA_IRQHandler+0xa3c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	@ (80044f4 <HAL_DMA_IRQHandler+0xa40>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <HAL_DMA_IRQHandler+0x8b8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a64      	ldr	r2, [pc, #400]	@ (80044f8 <HAL_DMA_IRQHandler+0xa44>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <HAL_DMA_IRQHandler+0x8ca>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e007      	b.n	800438e <HAL_DMA_IRQHandler+0x8da>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3301      	adds	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004396:	429a      	cmp	r2, r3
 8004398:	d307      	bcc.n	80043aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f2      	bne.n	800438e <HAL_DMA_IRQHandler+0x8da>
 80043a8:	e000      	b.n	80043ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80043c2:	e003      	b.n	80043cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8272 	beq.w	80048c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
 80043e6:	e26c      	b.n	80048c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a43      	ldr	r2, [pc, #268]	@ (80044fc <HAL_DMA_IRQHandler+0xa48>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d022      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a42      	ldr	r2, [pc, #264]	@ (8004500 <HAL_DMA_IRQHandler+0xa4c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d01d      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a40      	ldr	r2, [pc, #256]	@ (8004504 <HAL_DMA_IRQHandler+0xa50>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d018      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3f      	ldr	r2, [pc, #252]	@ (8004508 <HAL_DMA_IRQHandler+0xa54>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3d      	ldr	r2, [pc, #244]	@ (800450c <HAL_DMA_IRQHandler+0xa58>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00e      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3c      	ldr	r2, [pc, #240]	@ (8004510 <HAL_DMA_IRQHandler+0xa5c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d009      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3a      	ldr	r2, [pc, #232]	@ (8004514 <HAL_DMA_IRQHandler+0xa60>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_DMA_IRQHandler+0x984>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a39      	ldr	r2, [pc, #228]	@ (8004518 <HAL_DMA_IRQHandler+0xa64>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_DMA_IRQHandler+0x988>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_DMA_IRQHandler+0x98a>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 823f 	beq.w	80048c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2204      	movs	r2, #4
 8004456:	409a      	lsls	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80cd 	beq.w	80045fc <HAL_DMA_IRQHandler+0xb48>
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80c7 	beq.w	80045fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2204      	movs	r2, #4
 8004478:	409a      	lsls	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d049      	beq.n	800451c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8210 	beq.w	80048bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a4:	e20a      	b.n	80048bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8206 	beq.w	80048bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	e200      	b.n	80048bc <HAL_DMA_IRQHandler+0xe08>
 80044ba:	bf00      	nop
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
 80044fc:	58025408 	.word	0x58025408
 8004500:	5802541c 	.word	0x5802541c
 8004504:	58025430 	.word	0x58025430
 8004508:	58025444 	.word	0x58025444
 800450c:	58025458 	.word	0x58025458
 8004510:	5802546c 	.word	0x5802546c
 8004514:	58025480 	.word	0x58025480
 8004518:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d160      	bne.n	80045e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7f      	ldr	r2, [pc, #508]	@ (8004728 <HAL_DMA_IRQHandler+0xc74>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d04a      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7d      	ldr	r2, [pc, #500]	@ (800472c <HAL_DMA_IRQHandler+0xc78>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d045      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7c      	ldr	r2, [pc, #496]	@ (8004730 <HAL_DMA_IRQHandler+0xc7c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d040      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7a      	ldr	r2, [pc, #488]	@ (8004734 <HAL_DMA_IRQHandler+0xc80>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d03b      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a79      	ldr	r2, [pc, #484]	@ (8004738 <HAL_DMA_IRQHandler+0xc84>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d036      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a77      	ldr	r2, [pc, #476]	@ (800473c <HAL_DMA_IRQHandler+0xc88>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d031      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a76      	ldr	r2, [pc, #472]	@ (8004740 <HAL_DMA_IRQHandler+0xc8c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d02c      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a74      	ldr	r2, [pc, #464]	@ (8004744 <HAL_DMA_IRQHandler+0xc90>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d027      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a73      	ldr	r2, [pc, #460]	@ (8004748 <HAL_DMA_IRQHandler+0xc94>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d022      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a71      	ldr	r2, [pc, #452]	@ (800474c <HAL_DMA_IRQHandler+0xc98>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01d      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a70      	ldr	r2, [pc, #448]	@ (8004750 <HAL_DMA_IRQHandler+0xc9c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d018      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6e      	ldr	r2, [pc, #440]	@ (8004754 <HAL_DMA_IRQHandler+0xca0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6d      	ldr	r2, [pc, #436]	@ (8004758 <HAL_DMA_IRQHandler+0xca4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6b      	ldr	r2, [pc, #428]	@ (800475c <HAL_DMA_IRQHandler+0xca8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6a      	ldr	r2, [pc, #424]	@ (8004760 <HAL_DMA_IRQHandler+0xcac>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_DMA_IRQHandler+0xb12>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a68      	ldr	r2, [pc, #416]	@ (8004764 <HAL_DMA_IRQHandler+0xcb0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <HAL_DMA_IRQHandler+0xb24>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0208 	bic.w	r2, r2, #8
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e007      	b.n	80045e8 <HAL_DMA_IRQHandler+0xb34>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0204 	bic.w	r2, r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8165 	beq.w	80048bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045fa:	e15f      	b.n	80048bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2202      	movs	r2, #2
 8004606:	409a      	lsls	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80c5 	beq.w	800479c <HAL_DMA_IRQHandler+0xce8>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80bf 	beq.w	800479c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2202      	movs	r2, #2
 8004628:	409a      	lsls	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d018      	beq.n	800466a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 813a 	beq.w	80048c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	e134      	b.n	80048c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8130 	beq.w	80048c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004668:	e12a      	b.n	80048c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 8089 	bne.w	8004788 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2b      	ldr	r2, [pc, #172]	@ (8004728 <HAL_DMA_IRQHandler+0xc74>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a29      	ldr	r2, [pc, #164]	@ (800472c <HAL_DMA_IRQHandler+0xc78>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a28      	ldr	r2, [pc, #160]	@ (8004730 <HAL_DMA_IRQHandler+0xc7c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a26      	ldr	r2, [pc, #152]	@ (8004734 <HAL_DMA_IRQHandler+0xc80>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a25      	ldr	r2, [pc, #148]	@ (8004738 <HAL_DMA_IRQHandler+0xc84>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a23      	ldr	r2, [pc, #140]	@ (800473c <HAL_DMA_IRQHandler+0xc88>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a22      	ldr	r2, [pc, #136]	@ (8004740 <HAL_DMA_IRQHandler+0xc8c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a20      	ldr	r2, [pc, #128]	@ (8004744 <HAL_DMA_IRQHandler+0xc90>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004748 <HAL_DMA_IRQHandler+0xc94>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <HAL_DMA_IRQHandler+0xc98>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1c      	ldr	r2, [pc, #112]	@ (8004750 <HAL_DMA_IRQHandler+0xc9c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004754 <HAL_DMA_IRQHandler+0xca0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <HAL_DMA_IRQHandler+0xca4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a17      	ldr	r2, [pc, #92]	@ (800475c <HAL_DMA_IRQHandler+0xca8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a16      	ldr	r2, [pc, #88]	@ (8004760 <HAL_DMA_IRQHandler+0xcac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0xc62>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a14      	ldr	r2, [pc, #80]	@ (8004764 <HAL_DMA_IRQHandler+0xcb0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d128      	bne.n	8004768 <HAL_DMA_IRQHandler+0xcb4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0214 	bic.w	r2, r2, #20
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e027      	b.n	8004778 <HAL_DMA_IRQHandler+0xcc4>
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020a 	bic.w	r2, r2, #10
 8004776:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8097 	beq.w	80048c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800479a:	e091      	b.n	80048c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2208      	movs	r2, #8
 80047a6:	409a      	lsls	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8088 	beq.w	80048c2 <HAL_DMA_IRQHandler+0xe0e>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8082 	beq.w	80048c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a41      	ldr	r2, [pc, #260]	@ (80048c8 <HAL_DMA_IRQHandler+0xe14>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d04a      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3f      	ldr	r2, [pc, #252]	@ (80048cc <HAL_DMA_IRQHandler+0xe18>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d045      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3e      	ldr	r2, [pc, #248]	@ (80048d0 <HAL_DMA_IRQHandler+0xe1c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d040      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3c      	ldr	r2, [pc, #240]	@ (80048d4 <HAL_DMA_IRQHandler+0xe20>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03b      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <HAL_DMA_IRQHandler+0xe24>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a39      	ldr	r2, [pc, #228]	@ (80048dc <HAL_DMA_IRQHandler+0xe28>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a38      	ldr	r2, [pc, #224]	@ (80048e0 <HAL_DMA_IRQHandler+0xe2c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02c      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a36      	ldr	r2, [pc, #216]	@ (80048e4 <HAL_DMA_IRQHandler+0xe30>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d027      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a35      	ldr	r2, [pc, #212]	@ (80048e8 <HAL_DMA_IRQHandler+0xe34>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <HAL_DMA_IRQHandler+0xe38>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <HAL_DMA_IRQHandler+0xe3c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a30      	ldr	r2, [pc, #192]	@ (80048f4 <HAL_DMA_IRQHandler+0xe40>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2f      	ldr	r2, [pc, #188]	@ (80048f8 <HAL_DMA_IRQHandler+0xe44>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	@ (80048fc <HAL_DMA_IRQHandler+0xe48>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <HAL_DMA_IRQHandler+0xe4c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_DMA_IRQHandler+0xdaa>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <HAL_DMA_IRQHandler+0xe50>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d108      	bne.n	8004870 <HAL_DMA_IRQHandler+0xdbc>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 021c 	bic.w	r2, r2, #28
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e007      	b.n	8004880 <HAL_DMA_IRQHandler+0xdcc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 020e 	bic.w	r2, r2, #14
 800487e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2201      	movs	r2, #1
 800488a:	409a      	lsls	r2, r3
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
 80048b6:	e004      	b.n	80048c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048b8:	bf00      	nop
 80048ba:	e002      	b.n	80048c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048c2:	3728      	adds	r7, #40	@ 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40020010 	.word	0x40020010
 80048cc:	40020028 	.word	0x40020028
 80048d0:	40020040 	.word	0x40020040
 80048d4:	40020058 	.word	0x40020058
 80048d8:	40020070 	.word	0x40020070
 80048dc:	40020088 	.word	0x40020088
 80048e0:	400200a0 	.word	0x400200a0
 80048e4:	400200b8 	.word	0x400200b8
 80048e8:	40020410 	.word	0x40020410
 80048ec:	40020428 	.word	0x40020428
 80048f0:	40020440 	.word	0x40020440
 80048f4:	40020458 	.word	0x40020458
 80048f8:	40020470 	.word	0x40020470
 80048fc:	40020488 	.word	0x40020488
 8004900:	400204a0 	.word	0x400204a0
 8004904:	400204b8 	.word	0x400204b8

08004908 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7f      	ldr	r2, [pc, #508]	@ (8004b24 <DMA_SetConfig+0x21c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d072      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7d      	ldr	r2, [pc, #500]	@ (8004b28 <DMA_SetConfig+0x220>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d06d      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b2c <DMA_SetConfig+0x224>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d068      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7a      	ldr	r2, [pc, #488]	@ (8004b30 <DMA_SetConfig+0x228>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d063      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a79      	ldr	r2, [pc, #484]	@ (8004b34 <DMA_SetConfig+0x22c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d05e      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a77      	ldr	r2, [pc, #476]	@ (8004b38 <DMA_SetConfig+0x230>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d059      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a76      	ldr	r2, [pc, #472]	@ (8004b3c <DMA_SetConfig+0x234>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d054      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a74      	ldr	r2, [pc, #464]	@ (8004b40 <DMA_SetConfig+0x238>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d04f      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a73      	ldr	r2, [pc, #460]	@ (8004b44 <DMA_SetConfig+0x23c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d04a      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a71      	ldr	r2, [pc, #452]	@ (8004b48 <DMA_SetConfig+0x240>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d045      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a70      	ldr	r2, [pc, #448]	@ (8004b4c <DMA_SetConfig+0x244>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d040      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <DMA_SetConfig+0x248>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d03b      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b54 <DMA_SetConfig+0x24c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d036      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b58 <DMA_SetConfig+0x250>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b5c <DMA_SetConfig+0x254>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d02c      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a68      	ldr	r2, [pc, #416]	@ (8004b60 <DMA_SetConfig+0x258>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d027      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a67      	ldr	r2, [pc, #412]	@ (8004b64 <DMA_SetConfig+0x25c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a65      	ldr	r2, [pc, #404]	@ (8004b68 <DMA_SetConfig+0x260>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a64      	ldr	r2, [pc, #400]	@ (8004b6c <DMA_SetConfig+0x264>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a62      	ldr	r2, [pc, #392]	@ (8004b70 <DMA_SetConfig+0x268>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a61      	ldr	r2, [pc, #388]	@ (8004b74 <DMA_SetConfig+0x26c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5f      	ldr	r2, [pc, #380]	@ (8004b78 <DMA_SetConfig+0x270>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a5e      	ldr	r2, [pc, #376]	@ (8004b7c <DMA_SetConfig+0x274>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <DMA_SetConfig+0x10a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8004b80 <DMA_SetConfig+0x278>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <DMA_SetConfig+0x10e>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <DMA_SetConfig+0x110>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a39      	ldr	r2, [pc, #228]	@ (8004b24 <DMA_SetConfig+0x21c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d04a      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a38      	ldr	r2, [pc, #224]	@ (8004b28 <DMA_SetConfig+0x220>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d045      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a36      	ldr	r2, [pc, #216]	@ (8004b2c <DMA_SetConfig+0x224>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d040      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a35      	ldr	r2, [pc, #212]	@ (8004b30 <DMA_SetConfig+0x228>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d03b      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a33      	ldr	r2, [pc, #204]	@ (8004b34 <DMA_SetConfig+0x22c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d036      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a32      	ldr	r2, [pc, #200]	@ (8004b38 <DMA_SetConfig+0x230>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d031      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a30      	ldr	r2, [pc, #192]	@ (8004b3c <DMA_SetConfig+0x234>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02c      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <DMA_SetConfig+0x238>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d027      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b44 <DMA_SetConfig+0x23c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	@ (8004b48 <DMA_SetConfig+0x240>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01d      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b4c <DMA_SetConfig+0x244>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <DMA_SetConfig+0x248>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a27      	ldr	r2, [pc, #156]	@ (8004b54 <DMA_SetConfig+0x24c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a26      	ldr	r2, [pc, #152]	@ (8004b58 <DMA_SetConfig+0x250>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a24      	ldr	r2, [pc, #144]	@ (8004b5c <DMA_SetConfig+0x254>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <DMA_SetConfig+0x1d0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a23      	ldr	r2, [pc, #140]	@ (8004b60 <DMA_SetConfig+0x258>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <DMA_SetConfig+0x1d4>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <DMA_SetConfig+0x1d6>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d059      	beq.n	8004b96 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	223f      	movs	r2, #63	@ 0x3f
 8004aec:	409a      	lsls	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b40      	cmp	r3, #64	@ 0x40
 8004b10:	d138      	bne.n	8004b84 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b22:	e086      	b.n	8004c32 <DMA_SetConfig+0x32a>
 8004b24:	40020010 	.word	0x40020010
 8004b28:	40020028 	.word	0x40020028
 8004b2c:	40020040 	.word	0x40020040
 8004b30:	40020058 	.word	0x40020058
 8004b34:	40020070 	.word	0x40020070
 8004b38:	40020088 	.word	0x40020088
 8004b3c:	400200a0 	.word	0x400200a0
 8004b40:	400200b8 	.word	0x400200b8
 8004b44:	40020410 	.word	0x40020410
 8004b48:	40020428 	.word	0x40020428
 8004b4c:	40020440 	.word	0x40020440
 8004b50:	40020458 	.word	0x40020458
 8004b54:	40020470 	.word	0x40020470
 8004b58:	40020488 	.word	0x40020488
 8004b5c:	400204a0 	.word	0x400204a0
 8004b60:	400204b8 	.word	0x400204b8
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025430 	.word	0x58025430
 8004b70:	58025444 	.word	0x58025444
 8004b74:	58025458 	.word	0x58025458
 8004b78:	5802546c 	.word	0x5802546c
 8004b7c:	58025480 	.word	0x58025480
 8004b80:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	60da      	str	r2, [r3, #12]
}
 8004b94:	e04d      	b.n	8004c32 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a29      	ldr	r2, [pc, #164]	@ (8004c40 <DMA_SetConfig+0x338>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a27      	ldr	r2, [pc, #156]	@ (8004c44 <DMA_SetConfig+0x33c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a26      	ldr	r2, [pc, #152]	@ (8004c48 <DMA_SetConfig+0x340>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a24      	ldr	r2, [pc, #144]	@ (8004c4c <DMA_SetConfig+0x344>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <DMA_SetConfig+0x348>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a21      	ldr	r2, [pc, #132]	@ (8004c54 <DMA_SetConfig+0x34c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a20      	ldr	r2, [pc, #128]	@ (8004c58 <DMA_SetConfig+0x350>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <DMA_SetConfig+0x2de>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c5c <DMA_SetConfig+0x354>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <DMA_SetConfig+0x2e2>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <DMA_SetConfig+0x2e4>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b40      	cmp	r3, #64	@ 0x40
 8004c0e:	d108      	bne.n	8004c22 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	e007      	b.n	8004c32 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	60da      	str	r2, [r3, #12]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	58025408 	.word	0x58025408
 8004c44:	5802541c 	.word	0x5802541c
 8004c48:	58025430 	.word	0x58025430
 8004c4c:	58025444 	.word	0x58025444
 8004c50:	58025458 	.word	0x58025458
 8004c54:	5802546c 	.word	0x5802546c
 8004c58:	58025480 	.word	0x58025480
 8004c5c:	58025494 	.word	0x58025494

08004c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a42      	ldr	r2, [pc, #264]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d04a      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a41      	ldr	r2, [pc, #260]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x11c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d045      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3f      	ldr	r2, [pc, #252]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d040      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x124>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d03b      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3c      	ldr	r2, [pc, #240]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x128>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d036      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x12c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d031      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a39      	ldr	r2, [pc, #228]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x130>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d02c      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a38      	ldr	r2, [pc, #224]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x134>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d027      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a36      	ldr	r2, [pc, #216]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d022      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x13c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d01d      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a33      	ldr	r2, [pc, #204]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x140>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x144>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <DMA_CalcBaseAndBitshift+0x148>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <DMA_CalcBaseAndBitshift+0x14c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8004db0 <DMA_CalcBaseAndBitshift+0x150>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <DMA_CalcBaseAndBitshift+0x154>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <DMA_CalcBaseAndBitshift+0xac>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <DMA_CalcBaseAndBitshift+0xae>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d024      	beq.n	8004d5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3b10      	subs	r3, #16
 8004d1a:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <DMA_CalcBaseAndBitshift+0x158>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	4a24      	ldr	r2, [pc, #144]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x15c>)
 8004d2c:	5cd3      	ldrb	r3, [r2, r3]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d908      	bls.n	8004d4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x160>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d4a:	e00d      	b.n	8004d68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x160>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d5a:	e005      	b.n	8004d68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40020010 	.word	0x40020010
 8004d7c:	40020028 	.word	0x40020028
 8004d80:	40020040 	.word	0x40020040
 8004d84:	40020058 	.word	0x40020058
 8004d88:	40020070 	.word	0x40020070
 8004d8c:	40020088 	.word	0x40020088
 8004d90:	400200a0 	.word	0x400200a0
 8004d94:	400200b8 	.word	0x400200b8
 8004d98:	40020410 	.word	0x40020410
 8004d9c:	40020428 	.word	0x40020428
 8004da0:	40020440 	.word	0x40020440
 8004da4:	40020458 	.word	0x40020458
 8004da8:	40020470 	.word	0x40020470
 8004dac:	40020488 	.word	0x40020488
 8004db0:	400204a0 	.word	0x400204a0
 8004db4:	400204b8 	.word	0x400204b8
 8004db8:	aaaaaaab 	.word	0xaaaaaaab
 8004dbc:	08010dac 	.word	0x08010dac
 8004dc0:	fffffc00 	.word	0xfffffc00

08004dc4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d120      	bne.n	8004e1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d858      	bhi.n	8004e92 <DMA_CheckFifoParam+0xce>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <DMA_CheckFifoParam+0x24>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e0b 	.word	0x08004e0b
 8004df0:	08004df9 	.word	0x08004df9
 8004df4:	08004e93 	.word	0x08004e93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d048      	beq.n	8004e96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e08:	e045      	b.n	8004e96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e12:	d142      	bne.n	8004e9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e18:	e03f      	b.n	8004e9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e22:	d123      	bne.n	8004e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d838      	bhi.n	8004e9e <DMA_CheckFifoParam+0xda>
 8004e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <DMA_CheckFifoParam+0x70>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e4b 	.word	0x08004e4b
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004e5d 	.word	0x08004e5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
        break;
 8004e48:	e030      	b.n	8004eac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d025      	beq.n	8004ea2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e5a:	e022      	b.n	8004ea2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e64:	d11f      	bne.n	8004ea6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e6a:	e01c      	b.n	8004ea6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d902      	bls.n	8004e7a <DMA_CheckFifoParam+0xb6>
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d003      	beq.n	8004e80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e78:	e018      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e7e:	e015      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e90:	e00b      	b.n	8004eaa <DMA_CheckFifoParam+0xe6>
        break;
 8004e92:	bf00      	nop
 8004e94:	e00a      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        break;
 8004e96:	bf00      	nop
 8004e98:	e008      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e006      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e004      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e002      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <DMA_CheckFifoParam+0xe8>
    break;
 8004eaa:	bf00      	nop
    }
  }

  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a38      	ldr	r2, [pc, #224]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d022      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a36      	ldr	r2, [pc, #216]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01d      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d018      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a33      	ldr	r2, [pc, #204]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a32      	ldr	r2, [pc, #200]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a30      	ldr	r2, [pc, #192]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2d      	ldr	r2, [pc, #180]	@ (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01a      	beq.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	3b08      	subs	r3, #8
 8004f2c:	4a28      	ldr	r2, [pc, #160]	@ (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4b26      	ldr	r3, [pc, #152]	@ (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f48:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2201      	movs	r2, #1
 8004f52:	409a      	lsls	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f58:	e024      	b.n	8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	3b10      	subs	r3, #16
 8004f62:	4a1e      	ldr	r2, [pc, #120]	@ (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d806      	bhi.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d902      	bls.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4b18      	ldr	r3, [pc, #96]	@ (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	58025408 	.word	0x58025408
 8004fb4:	5802541c 	.word	0x5802541c
 8004fb8:	58025430 	.word	0x58025430
 8004fbc:	58025444 	.word	0x58025444
 8004fc0:	58025458 	.word	0x58025458
 8004fc4:	5802546c 	.word	0x5802546c
 8004fc8:	58025480 	.word	0x58025480
 8004fcc:	58025494 	.word	0x58025494
 8004fd0:	cccccccd 	.word	0xcccccccd
 8004fd4:	16009600 	.word	0x16009600
 8004fd8:	58025880 	.word	0x58025880
 8004fdc:	aaaaaaab 	.word	0xaaaaaaab
 8004fe0:	400204b8 	.word	0x400204b8
 8004fe4:	4002040f 	.word	0x4002040f
 8004fe8:	10008200 	.word	0x10008200
 8004fec:	40020880 	.word	0x40020880

08004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04a      	beq.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d847      	bhi.n	800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a25      	ldr	r2, [pc, #148]	@ (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d022      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a24      	ldr	r2, [pc, #144]	@ (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d01d      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a22      	ldr	r2, [pc, #136]	@ (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	@ (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1e      	ldr	r2, [pc, #120]	@ (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a15      	ldr	r2, [pc, #84]	@ (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005078:	671a      	str	r2, [r3, #112]	@ 0x70
 800507a:	e009      	b.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	461a      	mov	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a11      	ldr	r2, [pc, #68]	@ (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800508e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	2201      	movs	r2, #1
 8005096:	409a      	lsls	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	58025408 	.word	0x58025408
 80050ac:	5802541c 	.word	0x5802541c
 80050b0:	58025430 	.word	0x58025430
 80050b4:	58025444 	.word	0x58025444
 80050b8:	58025458 	.word	0x58025458
 80050bc:	5802546c 	.word	0x5802546c
 80050c0:	58025480 	.word	0x58025480
 80050c4:	58025494 	.word	0x58025494
 80050c8:	1600963f 	.word	0x1600963f
 80050cc:	58025940 	.word	0x58025940
 80050d0:	1000823f 	.word	0x1000823f
 80050d4:	40020940 	.word	0x40020940

080050d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	@ 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050e6:	4b89      	ldr	r3, [pc, #548]	@ (800530c <HAL_GPIO_Init+0x234>)
 80050e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ea:	e194      	b.n	8005416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2101      	movs	r1, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8186 	beq.w	8005410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d005      	beq.n	800511c <HAL_GPIO_Init+0x44>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d130      	bne.n	800517e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005152:	2201      	movs	r2, #1
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0201 	and.w	r2, r3, #1
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b03      	cmp	r3, #3
 8005188:	d017      	beq.n	80051ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d123      	bne.n	800520e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	220f      	movs	r2, #15
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	08da      	lsrs	r2, r3, #3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3208      	adds	r2, #8
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	2203      	movs	r2, #3
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0203 	and.w	r2, r3, #3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80e0 	beq.w	8005410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005250:	4b2f      	ldr	r3, [pc, #188]	@ (8005310 <HAL_GPIO_Init+0x238>)
 8005252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005256:	4a2e      	ldr	r2, [pc, #184]	@ (8005310 <HAL_GPIO_Init+0x238>)
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005260:	4b2b      	ldr	r3, [pc, #172]	@ (8005310 <HAL_GPIO_Init+0x238>)
 8005262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800526e:	4a29      	ldr	r2, [pc, #164]	@ (8005314 <HAL_GPIO_Init+0x23c>)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	3302      	adds	r3, #2
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a20      	ldr	r2, [pc, #128]	@ (8005318 <HAL_GPIO_Init+0x240>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d052      	beq.n	8005340 <HAL_GPIO_Init+0x268>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <HAL_GPIO_Init+0x244>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d031      	beq.n	8005306 <HAL_GPIO_Init+0x22e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_GPIO_Init+0x248>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <HAL_GPIO_Init+0x22a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <HAL_GPIO_Init+0x24c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d025      	beq.n	80052fe <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <HAL_GPIO_Init+0x250>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_GPIO_Init+0x254>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d019      	beq.n	80052f6 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_GPIO_Init+0x258>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_GPIO_Init+0x21a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a19      	ldr	r2, [pc, #100]	@ (8005334 <HAL_GPIO_Init+0x25c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00d      	beq.n	80052ee <HAL_GPIO_Init+0x216>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <HAL_GPIO_Init+0x260>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <HAL_GPIO_Init+0x212>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a17      	ldr	r2, [pc, #92]	@ (800533c <HAL_GPIO_Init+0x264>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_GPIO_Init+0x20e>
 80052e2:	2309      	movs	r3, #9
 80052e4:	e02d      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052e6:	230a      	movs	r3, #10
 80052e8:	e02b      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e029      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052ee:	2307      	movs	r3, #7
 80052f0:	e027      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e025      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e023      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e021      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 80052fe:	2303      	movs	r3, #3
 8005300:	e01f      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 8005302:	2302      	movs	r3, #2
 8005304:	e01d      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 8005306:	2301      	movs	r3, #1
 8005308:	e01b      	b.n	8005342 <HAL_GPIO_Init+0x26a>
 800530a:	bf00      	nop
 800530c:	58000080 	.word	0x58000080
 8005310:	58024400 	.word	0x58024400
 8005314:	58000400 	.word	0x58000400
 8005318:	58020000 	.word	0x58020000
 800531c:	58020400 	.word	0x58020400
 8005320:	58020800 	.word	0x58020800
 8005324:	58020c00 	.word	0x58020c00
 8005328:	58021000 	.word	0x58021000
 800532c:	58021400 	.word	0x58021400
 8005330:	58021800 	.word	0x58021800
 8005334:	58021c00 	.word	0x58021c00
 8005338:	58022000 	.word	0x58022000
 800533c:	58022400 	.word	0x58022400
 8005340:	2300      	movs	r3, #0
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	f002 0203 	and.w	r2, r2, #3
 8005348:	0092      	lsls	r2, r2, #2
 800534a:	4093      	lsls	r3, r2
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005352:	4938      	ldr	r1, [pc, #224]	@ (8005434 <HAL_GPIO_Init+0x35c>)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	3302      	adds	r3, #2
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3301      	adds	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	f47f ae63 	bne.w	80050ec <HAL_GPIO_Init+0x14>
  }
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	3724      	adds	r7, #36	@ 0x24
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	58000400 	.word	0x58000400

08005438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
 8005444:	4613      	mov	r3, r2
 8005446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005448:	787b      	ldrb	r3, [r7, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005454:	e003      	b.n	800545e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	041a      	lsls	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af02      	add	r7, sp, #8
 8005470:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0fe      	b.n	800567a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f009 f949 	bl	800e728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f005 fc99 	bl	800adda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	7c1a      	ldrb	r2, [r3, #16]
 80054b0:	f88d 2000 	strb.w	r2, [sp]
 80054b4:	3304      	adds	r3, #4
 80054b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054b8:	f005 fb6a 	bl	800ab90 <USB_CoreInit>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0d5      	b.n	800567a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f005 fc91 	bl	800adfc <USB_SetCurrentMode>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0c6      	b.n	800567a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e04a      	b.n	8005588 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3315      	adds	r3, #21
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3314      	adds	r3, #20
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800551a:	7bfa      	ldrb	r2, [r7, #15]
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	b298      	uxth	r0, r3
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	332e      	adds	r3, #46	@ 0x2e
 800552e:	4602      	mov	r2, r0
 8005530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	3318      	adds	r3, #24
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005546:	7bfa      	ldrb	r2, [r7, #15]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	331c      	adds	r3, #28
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800555a:	7bfa      	ldrb	r2, [r7, #15]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3320      	adds	r3, #32
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800556e:	7bfa      	ldrb	r2, [r7, #15]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3324      	adds	r3, #36	@ 0x24
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	3301      	adds	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	429a      	cmp	r2, r3
 8005590:	d3af      	bcc.n	80054f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	e044      	b.n	8005622 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055ae:	7bfa      	ldrb	r2, [r7, #15]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055c4:	7bfa      	ldrb	r2, [r7, #15]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055da:	7bfa      	ldrb	r2, [r7, #15]
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005606:	7bfa      	ldrb	r2, [r7, #15]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	3301      	adds	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	7bfa      	ldrb	r2, [r7, #15]
 8005628:	429a      	cmp	r2, r3
 800562a:	d3b5      	bcc.n	8005598 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7c1a      	ldrb	r2, [r3, #16]
 8005634:	f88d 2000 	strb.w	r2, [sp]
 8005638:	3304      	adds	r3, #4
 800563a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563c:	f005 fc2a 	bl	800ae94 <USB_DevInit>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e013      	b.n	800567a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7b1b      	ldrb	r3, [r3, #12]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d102      	bne.n	800566e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f96f 	bl	800694c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f006 fc6d 	bl	800bf52 <USB_DevDisconnect>

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_PCD_Start+0x1c>
 800569a:	2302      	movs	r3, #2
 800569c:	e022      	b.n	80056e4 <HAL_PCD_Start+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f005 fb74 	bl	800adb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f006 fc1b 	bl	800bf10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b08d      	sub	sp, #52	@ 0x34
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f006 fcd9 	bl	800c0ba <USB_GetMode>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 84b9 	bne.w	8006082 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f006 fc3d 	bl	800bf94 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 84af 	beq.w	8006080 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f006 fc2a 	bl	800bf94 <USB_ReadInterrupts>
 8005740:	4603      	mov	r3, r0
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d107      	bne.n	800575a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f002 0202 	and.w	r2, r2, #2
 8005758:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f006 fc18 	bl	800bf94 <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d161      	bne.n	8005832 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0210 	bic.w	r2, r2, #16
 800577c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f003 020f 	and.w	r2, r3, #15
 800578a:	4613      	mov	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	3304      	adds	r3, #4
 800579c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	0c5b      	lsrs	r3, r3, #17
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d124      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d035      	beq.n	8005822 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a38      	ldr	r0, [r7, #32]
 80057ca:	f006 fa4f 	bl	800bc6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057da:	441a      	add	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ec:	441a      	add	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	615a      	str	r2, [r3, #20]
 80057f2:	e016      	b.n	8005822 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	0c5b      	lsrs	r3, r3, #17
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d110      	bne.n	8005822 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005806:	2208      	movs	r2, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6a38      	ldr	r0, [r7, #32]
 800580c:	f006 fa2e 	bl	800bc6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581c:	441a      	add	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0210 	orr.w	r2, r2, #16
 8005830:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f006 fbac 	bl	800bf94 <USB_ReadInterrupts>
 800583c:	4603      	mov	r3, r0
 800583e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005842:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005846:	f040 80a7 	bne.w	8005998 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f006 fbb1 	bl	800bfba <USB_ReadDevAllOutEpInterrupt>
 8005858:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800585a:	e099      	b.n	8005990 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 808e 	beq.w	8005984 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f006 fbd5 	bl	800c022 <USB_ReadDevOutEPInterrupt>
 8005878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2301      	movs	r3, #1
 8005894:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005896:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fed1 	bl	8006640 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2308      	movs	r3, #8
 80058b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 ffa7 	bl	8006810 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d8:	461a      	mov	r2, r3
 80058da:	2310      	movs	r3, #16
 80058dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d030      	beq.n	800594a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f0:	2b80      	cmp	r3, #128	@ 0x80
 80058f2:	d109      	bne.n	8005908 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005906:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	3304      	adds	r3, #4
 800591c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d108      	bne.n	8005938 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	b2db      	uxtb	r3, r3
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f009 f82c 	bl	800e990 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005944:	461a      	mov	r2, r3
 8005946:	2302      	movs	r3, #2
 8005948:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005960:	461a      	mov	r2, r3
 8005962:	2320      	movs	r3, #32
 8005964:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005982:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	3301      	adds	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	f47f af62 	bne.w	800585c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f006 faf9 	bl	800bf94 <USB_ReadInterrupts>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059ac:	f040 80db 	bne.w	8005b66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f006 fb1a 	bl	800bfee <USB_ReadDevAllInEpInterrupt>
 80059ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80059c0:	e0cd      	b.n	8005b5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c2 	beq.w	8005b52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f006 fb40 	bl	800c05e <USB_ReadDevInEPInterrupt>
 80059de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d057      	beq.n	8005a9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	2201      	movs	r2, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	799b      	ldrb	r3, [r3, #6]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d132      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	3320      	adds	r3, #32
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4403      	add	r3, r0
 8005a48:	331c      	adds	r3, #28
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4419      	add	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	3320      	adds	r3, #32
 8005a5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d113      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3324      	adds	r3, #36	@ 0x24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a86:	461a      	mov	r2, r3
 8005a88:	2101      	movs	r1, #1
 8005a8a:	f006 fb49 	bl	800c120 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f008 fef6 	bl	800e886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005acc:	461a      	mov	r2, r3
 8005ace:	2310      	movs	r3, #16
 8005ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2340      	movs	r3, #64	@ 0x40
 8005aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d023      	beq.n	8005b40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005afa:	6a38      	ldr	r0, [r7, #32]
 8005afc:	f005 fb28 	bl	800b150 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d108      	bne.n	8005b2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f008 ff43 	bl	800e9b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fcea 	bl	8006526 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	3301      	adds	r3, #1
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af2e 	bne.w	80059c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f006 fa12 	bl	800bf94 <USB_ReadInterrupts>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b7a:	d122      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d108      	bne.n	8005bac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fef5 	bl	8006994 <HAL_PCDEx_LPM_Callback>
 8005baa:	e002      	b.n	8005bb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f008 fee1 	bl	800e974 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f006 f9e4 	bl	800bf94 <USB_ReadInterrupts>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd6:	d112      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f008 fe9d 	bl	800e928 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f006 f9c6 	bl	800bf94 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c12:	d121      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005c22:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d111      	bne.n	8005c52 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	f003 020f 	and.w	r2, r3, #15
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c48:	2101      	movs	r1, #1
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fea2 	bl	8006994 <HAL_PCDEx_LPM_Callback>
 8005c50:	e002      	b.n	8005c58 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f008 fe68 	bl	800e928 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f006 f999 	bl	800bf94 <USB_ReadInterrupts>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6c:	f040 80b7 	bne.w	8005dde <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7e:	f023 0301 	bic.w	r3, r3, #1
 8005c82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2110      	movs	r1, #16
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f005 fa60 	bl	800b150 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c94:	e046      	b.n	8005d24 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ca8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	3301      	adds	r3, #1
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	791b      	ldrb	r3, [r3, #4]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d3b2      	bcc.n	8005c96 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d3e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005d42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7bdb      	ldrb	r3, [r3, #15]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d5c:	f043 030b 	orr.w	r3, r3, #11
 8005d60:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d72:	f043 030b 	orr.w	r3, r3, #11
 8005d76:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d78:	e015      	b.n	8005da6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da0:	f043 030b 	orr.w	r3, r3, #11
 8005da4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005db4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005db8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f006 f9a9 	bl	800c120 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f006 f8d6 	bl	800bf94 <USB_ReadInterrupts>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df2:	d123      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f006 f96d 	bl	800c0d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f005 fa1d 	bl	800b242 <USB_GetDevSpeed>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681c      	ldr	r4, [r3, #0]
 8005e14:	f001 fe58 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4620      	mov	r0, r4
 8005e22:	f004 ff27 	bl	800ac74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f008 fd55 	bl	800e8d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f006 f8a7 	bl	800bf94 <USB_ReadInterrupts>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10a      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f008 fd32 	bl	800e8ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f002 0208 	and.w	r2, r2, #8
 8005e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f006 f892 	bl	800bf94 <USB_ReadInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e76:	2b80      	cmp	r3, #128	@ 0x80
 8005e78:	d123      	bne.n	8005ec2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e86:	2301      	movs	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8a:	e014      	b.n	8005eb6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fb0a 	bl	80064c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d3e4      	bcc.n	8005e8c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f006 f864 	bl	800bf94 <USB_ReadInterrupts>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ed6:	d13c      	bne.n	8005f52 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005edc:	e02b      	b.n	8005f36 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3318      	adds	r3, #24
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d115      	bne.n	8005f30 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da12      	bge.n	8005f30 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	3317      	adds	r3, #23
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 faca 	bl	80064c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	3301      	adds	r3, #1
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	791b      	ldrb	r3, [r3, #4]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d3cd      	bcc.n	8005ede <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f006 f81c 	bl	800bf94 <USB_ReadInterrupts>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f66:	d156      	bne.n	8006016 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f68:	2301      	movs	r3, #1
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6c:	e045      	b.n	8005ffa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d12e      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da2b      	bge.n	8005ff4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	0c1a      	lsrs	r2, r3, #16
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005fa6:	4053      	eors	r3, r2
 8005fa8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d121      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ff0:	6053      	str	r3, [r2, #4]
            break;
 8005ff2:	e008      	b.n	8006006 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	4293      	cmp	r3, r2
 8006004:	d3b3      	bcc.n	8005f6e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f005 ffba 	bl	800bf94 <USB_ReadInterrupts>
 8006020:	4603      	mov	r3, r0
 8006022:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d10a      	bne.n	8006042 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f008 fcd3 	bl	800e9d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f005 ffa4 	bl	800bf94 <USB_ReadInterrupts>
 800604c:	4603      	mov	r3, r0
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b04      	cmp	r3, #4
 8006054:	d115      	bne.n	8006082 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f008 fcc3 	bl	800e9f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e000      	b.n	8006082 <HAL_PCD_IRQHandler+0x996>
      return;
 8006080:	bf00      	nop
    }
  }
}
 8006082:	3734      	adds	r7, #52	@ 0x34
 8006084:	46bd      	mov	sp, r7
 8006086:	bd90      	pop	{r4, r7, pc}

08006088 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_PCD_SetAddress+0x1a>
 800609e:	2302      	movs	r3, #2
 80060a0:	e012      	b.n	80060c8 <HAL_PCD_SetAddress+0x40>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	78fa      	ldrb	r2, [r7, #3]
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f005 ff03 	bl	800bec4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	70fb      	strb	r3, [r7, #3]
 80060e2:	460b      	mov	r3, r1
 80060e4:	803b      	strh	r3, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da0f      	bge.n	8006116 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	3310      	adds	r3, #16
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	705a      	strb	r2, [r3, #1]
 8006114:	e00f      	b.n	8006136 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006142:	883b      	ldrh	r3, [r7, #0]
 8006144:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	78ba      	ldrb	r2, [r7, #2]
 8006150:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d004      	beq.n	8006164 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006164:	78bb      	ldrb	r3, [r7, #2]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d102      	bne.n	8006170 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_PCD_EP_Open+0xae>
 800617a:	2302      	movs	r3, #2
 800617c:	e00e      	b.n	800619c <HAL_PCD_EP_Open+0xcc>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	4618      	mov	r0, r3
 800618e:	f005 f87d 	bl	800b28c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800619a:	7afb      	ldrb	r3, [r7, #11]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da0f      	bge.n	80061d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	4613      	mov	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	3310      	adds	r3, #16
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	705a      	strb	r2, [r3, #1]
 80061d6:	e00f      	b.n	80061f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	f003 020f 	and.w	r2, r3, #15
 80061de:	4613      	mov	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	4413      	add	r3, r2
 80061ee:	3304      	adds	r3, #4
 80061f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_PCD_EP_Close+0x6e>
 800620e:	2302      	movs	r3, #2
 8006210:	e00e      	b.n	8006230 <HAL_PCD_EP_Close+0x8c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	4618      	mov	r0, r3
 8006222:	f005 f8bb 	bl	800b39c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	460b      	mov	r3, r1
 8006246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2200      	movs	r2, #0
 8006278:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	b2da      	uxtb	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	799b      	ldrb	r3, [r3, #6]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d102      	bne.n	8006294 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	799b      	ldrb	r3, [r3, #6]
 800629c:	461a      	mov	r2, r3
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	f005 f958 	bl	800b554 <USB_EPStartXfer>

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80062d0:	681b      	ldr	r3, [r3, #0]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b086      	sub	sp, #24
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
 80062ea:	460b      	mov	r3, r1
 80062ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	f003 020f 	and.w	r2, r3, #15
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	3310      	adds	r3, #16
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	3304      	adds	r3, #4
 8006304:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2201      	movs	r2, #1
 800631c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	b2da      	uxtb	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	799b      	ldrb	r3, [r3, #6]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d102      	bne.n	8006338 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	799b      	ldrb	r3, [r3, #6]
 8006340:	461a      	mov	r2, r3
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	f005 f906 	bl	800b554 <USB_EPStartXfer>

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7912      	ldrb	r2, [r2, #4]
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e04f      	b.n	8006410 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	da0f      	bge.n	8006398 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	3310      	adds	r3, #16
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4413      	add	r3, r2
 800638c:	3304      	adds	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	705a      	strb	r2, [r3, #1]
 8006396:	e00d      	b.n	80063b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	3304      	adds	r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_PCD_EP_SetStall+0x82>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e01d      	b.n	8006410 <HAL_PCD_EP_SetStall+0xbe>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f005 fc9a 	bl	800bd1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7999      	ldrb	r1, [r3, #6]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006400:	461a      	mov	r2, r3
 8006402:	f005 fe8d 	bl	800c120 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	7912      	ldrb	r2, [r2, #4]
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e042      	b.n	80064bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da0f      	bge.n	800645e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	3310      	adds	r3, #16
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	3304      	adds	r3, #4
 8006454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	705a      	strb	r2, [r3, #1]
 800645c:	e00f      	b.n	800647e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	4613      	mov	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	3304      	adds	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_PCD_EP_ClrStall+0x86>
 800649a:	2302      	movs	r3, #2
 800649c:	e00e      	b.n	80064bc <HAL_PCD_EP_ClrStall+0xa4>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f005 fca3 	bl	800bdf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80064d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	da0c      	bge.n	80064f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	f003 020f 	and.w	r2, r3, #15
 80064de:	4613      	mov	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	3310      	adds	r3, #16
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	3304      	adds	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e00c      	b.n	800650c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	f003 020f 	and.w	r2, r3, #15
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	3304      	adds	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	4618      	mov	r0, r3
 8006514:	f005 fac2 	bl	800ba9c <USB_EPStopXfer>
 8006518:	4603      	mov	r3, r0
 800651a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800651c:	7afb      	ldrb	r3, [r7, #11]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08a      	sub	sp, #40	@ 0x28
 800652a:	af02      	add	r7, sp, #8
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	3310      	adds	r3, #16
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	3304      	adds	r3, #4
 800654c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d901      	bls.n	800655e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e06b      	b.n	8006636 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	429a      	cmp	r2, r3
 8006572:	d902      	bls.n	800657a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	3303      	adds	r3, #3
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006582:	e02a      	b.n	80065da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	429a      	cmp	r2, r3
 8006598:	d902      	bls.n	80065a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3303      	adds	r3, #3
 80065a4:	089b      	lsrs	r3, r3, #2
 80065a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68d9      	ldr	r1, [r3, #12]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4603      	mov	r3, r0
 80065bc:	6978      	ldr	r0, [r7, #20]
 80065be:	f005 fb17 	bl	800bbf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	441a      	add	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d809      	bhi.n	8006604 <PCD_WriteEmptyTxFifo+0xde>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d203      	bcs.n	8006604 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1bf      	bne.n	8006584 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d811      	bhi.n	8006634 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	2201      	movs	r2, #1
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	43db      	mvns	r3, r3
 800662a:	6939      	ldr	r1, [r7, #16]
 800662c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006630:	4013      	ands	r3, r2
 8006632:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	333c      	adds	r3, #60	@ 0x3c
 8006658:	3304      	adds	r3, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	799b      	ldrb	r3, [r3, #6]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d17b      	bne.n	800676e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d015      	beq.n	80066ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4a61      	ldr	r2, [pc, #388]	@ (8006808 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	f240 80b9 	bls.w	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80b3 	beq.w	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a2:	461a      	mov	r2, r3
 80066a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	e0a7      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	2320      	movs	r3, #32
 80066c6:	6093      	str	r3, [r2, #8]
 80066c8:	e098      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 8093 	bne.w	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4a4b      	ldr	r2, [pc, #300]	@ (8006808 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d90f      	bls.n	80066fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f4:	461a      	mov	r2, r3
 80066f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fa:	6093      	str	r3, [r2, #8]
 80066fc:	e07e      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	0159      	lsls	r1, r3, #5
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	440b      	add	r3, r1
 8006720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d114      	bne.n	8006760 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006748:	461a      	mov	r2, r3
 800674a:	2101      	movs	r1, #1
 800674c:	f005 fce8 	bl	800c120 <USB_EP0_OutStart>
 8006750:	e006      	b.n	8006760 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f008 f872 	bl	800e850 <HAL_PCD_DataOutStageCallback>
 800676c:	e046      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4a26      	ldr	r2, [pc, #152]	@ (800680c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d124      	bne.n	80067c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006792:	6093      	str	r3, [r2, #8]
 8006794:	e032      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	461a      	mov	r2, r3
 80067ae:	2320      	movs	r3, #32
 80067b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f008 f849 	bl	800e850 <HAL_PCD_DataOutStageCallback>
 80067be:	e01d      	b.n	80067fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d114      	bne.n	80067f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067e8:	461a      	mov	r2, r3
 80067ea:	2100      	movs	r1, #0
 80067ec:	f005 fc98 	bl	800c120 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f008 f82a 	bl	800e850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	4f54300a 	.word	0x4f54300a
 800680c:	4f54310a 	.word	0x4f54310a

08006810 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	333c      	adds	r3, #60	@ 0x3c
 8006828:	3304      	adds	r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <PCD_EP_OutSetupPacket_int+0x88>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d90e      	bls.n	8006864 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685c:	461a      	mov	r2, r3
 800685e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006862:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f007 ffe1 	bl	800e82c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a0a      	ldr	r2, [pc, #40]	@ (8006898 <PCD_EP_OutSetupPacket_int+0x88>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d90c      	bls.n	800688c <PCD_EP_OutSetupPacket_int+0x7c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	799b      	ldrb	r3, [r3, #6]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d108      	bne.n	800688c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006884:	461a      	mov	r2, r3
 8006886:	2101      	movs	r1, #1
 8006888:	f005 fc4a 	bl	800c120 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	4f54300a 	.word	0x4f54300a

0800689c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
 80068a8:	4613      	mov	r3, r2
 80068aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068ba:	883b      	ldrh	r3, [r7, #0]
 80068bc:	0419      	lsls	r1, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c8:	e028      	b.n	800691c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	e00d      	b.n	80068fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	3340      	adds	r3, #64	@ 0x40
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	0c1b      	lsrs	r3, r3, #16
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	3301      	adds	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	3b01      	subs	r3, #1
 8006900:	429a      	cmp	r2, r3
 8006902:	d3ec      	bcc.n	80068de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006904:	883b      	ldrh	r3, [r7, #0]
 8006906:	0418      	lsls	r0, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	3b01      	subs	r3, #1
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4302      	orrs	r2, r0
 8006914:	3340      	adds	r3, #64	@ 0x40
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800697a:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <HAL_PCDEx_ActivateLPM+0x44>)
 800697c:	4313      	orrs	r3, r2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	10000003 	.word	0x10000003

08006994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069b4:	4b19      	ldr	r3, [pc, #100]	@ (8006a1c <HAL_PWREx_ConfigSupply+0x70>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d00a      	beq.n	80069d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069c0:	4b16      	ldr	r3, [pc, #88]	@ (8006a1c <HAL_PWREx_ConfigSupply+0x70>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d001      	beq.n	80069d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e01f      	b.n	8006a12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e01d      	b.n	8006a12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069d6:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <HAL_PWREx_ConfigSupply+0x70>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f023 0207 	bic.w	r2, r3, #7
 80069de:	490f      	ldr	r1, [pc, #60]	@ (8006a1c <HAL_PWREx_ConfigSupply+0x70>)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069e6:	f7fa faf3 	bl	8000fd0 <HAL_GetTick>
 80069ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069ec:	e009      	b.n	8006a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069ee:	f7fa faef 	bl	8000fd0 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069fc:	d901      	bls.n	8006a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e007      	b.n	8006a12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <HAL_PWREx_ConfigSupply+0x70>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a0e:	d1ee      	bne.n	80069ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	58024800 	.word	0x58024800

08006a20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a24:	4b05      	ldr	r3, [pc, #20]	@ (8006a3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4a04      	ldr	r2, [pc, #16]	@ (8006a3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a2e:	60d3      	str	r3, [r2, #12]
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	58024800 	.word	0x58024800

08006a40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a48:	f7fa fac2 	bl	8000fd0 <HAL_GetTick>
 8006a4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e05f      	b.n	8006b18 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7f9 ffb5 	bl	80009d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006a6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f85a 	bl	8006b28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	021a      	lsls	r2, r3, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	2120      	movs	r1, #32
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f852 	bl	8006b44 <QSPI_WaitFlagStateUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d135      	bne.n	8006b16 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b20 <HAL_QSPI_Init+0xe0>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6852      	ldr	r2, [r2, #4]
 8006ab8:	0611      	lsls	r1, r2, #24
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68d2      	ldr	r2, [r2, #12]
 8006abe:	4311      	orrs	r1, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	69d2      	ldr	r2, [r2, #28]
 8006ac4:	4311      	orrs	r1, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6a12      	ldr	r2, [r2, #32]
 8006aca:	4311      	orrs	r1, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	4b12      	ldr	r3, [pc, #72]	@ (8006b24 <HAL_QSPI_Init+0xe4>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6912      	ldr	r2, [r2, #16]
 8006ae2:	0411      	lsls	r1, r2, #16
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6952      	ldr	r2, [r2, #20]
 8006ae8:	4311      	orrs	r1, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6992      	ldr	r2, [r2, #24]
 8006aee:	4311      	orrs	r1, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006b16:	7afb      	ldrb	r3, [r7, #11]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	00ffff2f 	.word	0x00ffff2f
 8006b24:	ffe0f8fe 	.word	0xffe0f8fe

08006b28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b54:	e01a      	b.n	8006b8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d016      	beq.n	8006b8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5e:	f7fa fa37 	bl	8000fd0 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d302      	bcc.n	8006b74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b80:	f043 0201 	orr.w	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e00e      	b.n	8006baa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bf14      	ite	ne
 8006b9a:	2301      	movne	r3, #1
 8006b9c:	2300      	moveq	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d1d6      	bne.n	8006b56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	@ 0x30
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f000 bc48 	b.w	8007458 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8088 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd6:	4b99      	ldr	r3, [pc, #612]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006be0:	4b96      	ldr	r3, [pc, #600]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d007      	beq.n	8006bfc <HAL_RCC_OscConfig+0x48>
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	2b18      	cmp	r3, #24
 8006bf0:	d111      	bne.n	8006c16 <HAL_RCC_OscConfig+0x62>
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d10c      	bne.n	8006c16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d06d      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x130>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d169      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f000 bc21 	b.w	8007458 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1e:	d106      	bne.n	8006c2e <HAL_RCC_OscConfig+0x7a>
 8006c20:	4b86      	ldr	r3, [pc, #536]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a85      	ldr	r2, [pc, #532]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	e02e      	b.n	8006c8c <HAL_RCC_OscConfig+0xd8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10c      	bne.n	8006c50 <HAL_RCC_OscConfig+0x9c>
 8006c36:	4b81      	ldr	r3, [pc, #516]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a80      	ldr	r2, [pc, #512]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b7e      	ldr	r3, [pc, #504]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a7d      	ldr	r2, [pc, #500]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	e01d      	b.n	8006c8c <HAL_RCC_OscConfig+0xd8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCC_OscConfig+0xc0>
 8006c5a:	4b78      	ldr	r3, [pc, #480]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a77      	ldr	r2, [pc, #476]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4b75      	ldr	r3, [pc, #468]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a74      	ldr	r2, [pc, #464]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e00b      	b.n	8006c8c <HAL_RCC_OscConfig+0xd8>
 8006c74:	4b71      	ldr	r3, [pc, #452]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a70      	ldr	r2, [pc, #448]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4b6e      	ldr	r3, [pc, #440]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a6d      	ldr	r2, [pc, #436]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d013      	beq.n	8006cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fa f99c 	bl	8000fd0 <HAL_GetTick>
 8006c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c9c:	f7fa f998 	bl	8000fd0 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b64      	cmp	r3, #100	@ 0x64
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e3d4      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cae:	4b63      	ldr	r3, [pc, #396]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0xe8>
 8006cba:	e014      	b.n	8006ce6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7fa f988 	bl	8000fd0 <HAL_GetTick>
 8006cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc4:	f7fa f984 	bl	8000fd0 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b64      	cmp	r3, #100	@ 0x64
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e3c0      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cd6:	4b59      	ldr	r3, [pc, #356]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x110>
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80ca 	beq.w	8006e88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cf4:	4b51      	ldr	r3, [pc, #324]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <HAL_RCC_OscConfig+0x166>
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	2b18      	cmp	r3, #24
 8006d0e:	d156      	bne.n	8006dbe <HAL_RCC_OscConfig+0x20a>
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d151      	bne.n	8006dbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d1a:	4b48      	ldr	r3, [pc, #288]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_RCC_OscConfig+0x17e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e392      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d32:	4b42      	ldr	r3, [pc, #264]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 0219 	bic.w	r2, r3, #25
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	493f      	ldr	r1, [pc, #252]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fa f944 	bl	8000fd0 <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d4c:	f7fa f940 	bl	8000fd0 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e37c      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5e:	4b37      	ldr	r3, [pc, #220]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6a:	f7fa f961 	bl	8001030 <HAL_GetREVID>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d817      	bhi.n	8006da8 <HAL_RCC_OscConfig+0x1f4>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b40      	cmp	r3, #64	@ 0x40
 8006d7e:	d108      	bne.n	8006d92 <HAL_RCC_OscConfig+0x1de>
 8006d80:	4b2e      	ldr	r3, [pc, #184]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d88:	4a2c      	ldr	r2, [pc, #176]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d90:	e07a      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d92:	4b2a      	ldr	r3, [pc, #168]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	031b      	lsls	r3, r3, #12
 8006da0:	4926      	ldr	r1, [pc, #152]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006da6:	e06f      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da8:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	061b      	lsls	r3, r3, #24
 8006db6:	4921      	ldr	r1, [pc, #132]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dbc:	e064      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d047      	beq.n	8006e56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f023 0219 	bic.w	r2, r3, #25
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	491a      	ldr	r1, [pc, #104]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fa f8fa 	bl	8000fd0 <HAL_GetTick>
 8006ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de0:	f7fa f8f6 	bl	8000fd0 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e332      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006df2:	4b12      	ldr	r3, [pc, #72]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfe:	f7fa f917 	bl	8001030 <HAL_GetREVID>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d819      	bhi.n	8006e40 <HAL_RCC_OscConfig+0x28c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b40      	cmp	r3, #64	@ 0x40
 8006e12:	d108      	bne.n	8006e26 <HAL_RCC_OscConfig+0x272>
 8006e14:	4b09      	ldr	r3, [pc, #36]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006e1c:	4a07      	ldr	r2, [pc, #28]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e22:	6053      	str	r3, [r2, #4]
 8006e24:	e030      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
 8006e26:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	031b      	lsls	r3, r3, #12
 8006e34:	4901      	ldr	r1, [pc, #4]	@ (8006e3c <HAL_RCC_OscConfig+0x288>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	604b      	str	r3, [r1, #4]
 8006e3a:	e025      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	4b9a      	ldr	r3, [pc, #616]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	4997      	ldr	r1, [pc, #604]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	604b      	str	r3, [r1, #4]
 8006e54:	e018      	b.n	8006e88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e56:	4b95      	ldr	r3, [pc, #596]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a94      	ldr	r2, [pc, #592]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e62:	f7fa f8b5 	bl	8000fd0 <HAL_GetTick>
 8006e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e6a:	f7fa f8b1 	bl	8000fd0 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e2ed      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e7c:	4b8b      	ldr	r3, [pc, #556]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f0      	bne.n	8006e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80a9 	beq.w	8006fe8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e96:	4b85      	ldr	r3, [pc, #532]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea0:	4b82      	ldr	r3, [pc, #520]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d007      	beq.n	8006ebc <HAL_RCC_OscConfig+0x308>
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b18      	cmp	r3, #24
 8006eb0:	d13a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x374>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d135      	bne.n	8006f28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x320>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	2b80      	cmp	r3, #128	@ 0x80
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e2c1      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ed4:	f7fa f8ac 	bl	8001030 <HAL_GetREVID>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d817      	bhi.n	8006f12 <HAL_RCC_OscConfig+0x35e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d108      	bne.n	8006efc <HAL_RCC_OscConfig+0x348>
 8006eea:	4b70      	ldr	r3, [pc, #448]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ef8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006efa:	e075      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006efc:	4b6b      	ldr	r3, [pc, #428]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	069b      	lsls	r3, r3, #26
 8006f0a:	4968      	ldr	r1, [pc, #416]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f10:	e06a      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f12:	4b66      	ldr	r3, [pc, #408]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	061b      	lsls	r3, r3, #24
 8006f20:	4962      	ldr	r1, [pc, #392]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f26:	e05f      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d042      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f30:	4b5e      	ldr	r3, [pc, #376]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a5d      	ldr	r2, [pc, #372]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fa f848 	bl	8000fd0 <HAL_GetTick>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f44:	f7fa f844 	bl	8000fd0 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e280      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f56:	4b55      	ldr	r3, [pc, #340]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f62:	f7fa f865 	bl	8001030 <HAL_GetREVID>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d817      	bhi.n	8006fa0 <HAL_RCC_OscConfig+0x3ec>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d108      	bne.n	8006f8a <HAL_RCC_OscConfig+0x3d6>
 8006f78:	4b4c      	ldr	r3, [pc, #304]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006f80:	4a4a      	ldr	r2, [pc, #296]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f86:	6053      	str	r3, [r2, #4]
 8006f88:	e02e      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
 8006f8a:	4b48      	ldr	r3, [pc, #288]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	069b      	lsls	r3, r3, #26
 8006f98:	4944      	ldr	r1, [pc, #272]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	604b      	str	r3, [r1, #4]
 8006f9e:	e023      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
 8006fa0:	4b42      	ldr	r3, [pc, #264]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	061b      	lsls	r3, r3, #24
 8006fae:	493f      	ldr	r1, [pc, #252]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60cb      	str	r3, [r1, #12]
 8006fb4:	e018      	b.n	8006fe8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fa f805 	bl	8000fd0 <HAL_GetTick>
 8006fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006fca:	f7fa f801 	bl	8000fd0 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e23d      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fdc:	4b33      	ldr	r3, [pc, #204]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f0      	bne.n	8006fca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d036      	beq.n	8007062 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d019      	beq.n	8007030 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8006ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007000:	4a2a      	ldr	r2, [pc, #168]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007008:	f7f9 ffe2 	bl	8000fd0 <HAL_GetTick>
 800700c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007010:	f7f9 ffde 	bl	8000fd0 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e21a      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007022:	4b22      	ldr	r3, [pc, #136]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCC_OscConfig+0x45c>
 800702e:	e018      	b.n	8007062 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007030:	4b1e      	ldr	r3, [pc, #120]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007034:	4a1d      	ldr	r2, [pc, #116]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7f9 ffc8 	bl	8000fd0 <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007044:	f7f9 ffc4 	bl	8000fd0 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e200      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007056:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d039      	beq.n	80070e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01c      	beq.n	80070b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007076:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a0c      	ldr	r2, [pc, #48]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 800707c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007080:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007082:	f7f9 ffa5 	bl	8000fd0 <HAL_GetTick>
 8007086:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800708a:	f7f9 ffa1 	bl	8000fd0 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e1dd      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800709c:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <HAL_RCC_OscConfig+0x4f8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCC_OscConfig+0x4d6>
 80070a8:	e01b      	b.n	80070e2 <HAL_RCC_OscConfig+0x52e>
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070b0:	4b9b      	ldr	r3, [pc, #620]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a9a      	ldr	r2, [pc, #616]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80070b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070bc:	f7f9 ff88 	bl	8000fd0 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070c4:	f7f9 ff84 	bl	8000fd0 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e1c0      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070d6:	4b92      	ldr	r3, [pc, #584]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8081 	beq.w	80071f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007324 <HAL_RCC_OscConfig+0x770>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a8b      	ldr	r2, [pc, #556]	@ (8007324 <HAL_RCC_OscConfig+0x770>)
 80070f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070fc:	f7f9 ff68 	bl	8000fd0 <HAL_GetTick>
 8007100:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007104:	f7f9 ff64 	bl	8000fd0 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	@ 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e1a0      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007116:	4b83      	ldr	r3, [pc, #524]	@ (8007324 <HAL_RCC_OscConfig+0x770>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d106      	bne.n	8007138 <HAL_RCC_OscConfig+0x584>
 800712a:	4b7d      	ldr	r3, [pc, #500]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	4a7c      	ldr	r2, [pc, #496]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6713      	str	r3, [r2, #112]	@ 0x70
 8007136:	e02d      	b.n	8007194 <HAL_RCC_OscConfig+0x5e0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10c      	bne.n	800715a <HAL_RCC_OscConfig+0x5a6>
 8007140:	4b77      	ldr	r3, [pc, #476]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007144:	4a76      	ldr	r2, [pc, #472]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	@ 0x70
 800714c:	4b74      	ldr	r3, [pc, #464]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007150:	4a73      	ldr	r2, [pc, #460]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007152:	f023 0304 	bic.w	r3, r3, #4
 8007156:	6713      	str	r3, [r2, #112]	@ 0x70
 8007158:	e01c      	b.n	8007194 <HAL_RCC_OscConfig+0x5e0>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b05      	cmp	r3, #5
 8007160:	d10c      	bne.n	800717c <HAL_RCC_OscConfig+0x5c8>
 8007162:	4b6f      	ldr	r3, [pc, #444]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007166:	4a6e      	ldr	r2, [pc, #440]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007168:	f043 0304 	orr.w	r3, r3, #4
 800716c:	6713      	str	r3, [r2, #112]	@ 0x70
 800716e:	4b6c      	ldr	r3, [pc, #432]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007172:	4a6b      	ldr	r2, [pc, #428]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	6713      	str	r3, [r2, #112]	@ 0x70
 800717a:	e00b      	b.n	8007194 <HAL_RCC_OscConfig+0x5e0>
 800717c:	4b68      	ldr	r3, [pc, #416]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800717e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007180:	4a67      	ldr	r2, [pc, #412]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	6713      	str	r3, [r2, #112]	@ 0x70
 8007188:	4b65      	ldr	r3, [pc, #404]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800718a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718c:	4a64      	ldr	r2, [pc, #400]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800718e:	f023 0304 	bic.w	r3, r3, #4
 8007192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d015      	beq.n	80071c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719c:	f7f9 ff18 	bl	8000fd0 <HAL_GetTick>
 80071a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071a2:	e00a      	b.n	80071ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a4:	f7f9 ff14 	bl	8000fd0 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e14e      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ba:	4b59      	ldr	r3, [pc, #356]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0ee      	beq.n	80071a4 <HAL_RCC_OscConfig+0x5f0>
 80071c6:	e014      	b.n	80071f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7f9 ff02 	bl	8000fd0 <HAL_GetTick>
 80071cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d0:	f7f9 fefe 	bl	8000fd0 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e138      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1ee      	bne.n	80071d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 812d 	beq.w	8007456 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80071fc:	4b48      	ldr	r3, [pc, #288]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007204:	2b18      	cmp	r3, #24
 8007206:	f000 80bd 	beq.w	8007384 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	2b02      	cmp	r3, #2
 8007210:	f040 809e 	bne.w	8007350 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007214:	4b42      	ldr	r3, [pc, #264]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a41      	ldr	r2, [pc, #260]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800721a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7f9 fed6 	bl	8000fd0 <HAL_GetTick>
 8007224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007228:	f7f9 fed2 	bl	8000fd0 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e10e      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800723a:	4b39      	ldr	r3, [pc, #228]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007246:	4b36      	ldr	r3, [pc, #216]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800724a:	4b37      	ldr	r3, [pc, #220]	@ (8007328 <HAL_RCC_OscConfig+0x774>)
 800724c:	4013      	ands	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007256:	0112      	lsls	r2, r2, #4
 8007258:	430a      	orrs	r2, r1
 800725a:	4931      	ldr	r1, [pc, #196]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	3b01      	subs	r3, #1
 8007266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726e:	3b01      	subs	r3, #1
 8007270:	025b      	lsls	r3, r3, #9
 8007272:	b29b      	uxth	r3, r3
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	3b01      	subs	r3, #1
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	3b01      	subs	r3, #1
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007290:	4923      	ldr	r1, [pc, #140]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007296:	4b22      	ldr	r3, [pc, #136]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	4a21      	ldr	r2, [pc, #132]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072a6:	4b21      	ldr	r3, [pc, #132]	@ (800732c <HAL_RCC_OscConfig+0x778>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80072ae:	00d2      	lsls	r2, r2, #3
 80072b0:	491b      	ldr	r1, [pc, #108]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80072b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	f023 020c 	bic.w	r2, r3, #12
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	4917      	ldr	r1, [pc, #92]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072c8:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	f023 0202 	bic.w	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d4:	4912      	ldr	r1, [pc, #72]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072da:	4b11      	ldr	r3, [pc, #68]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072de:	4a10      	ldr	r2, [pc, #64]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 80072f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80072fe:	4b08      	ldr	r3, [pc, #32]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	4a07      	ldr	r2, [pc, #28]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <HAL_RCC_OscConfig+0x76c>)
 8007310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7f9 fe5b 	bl	8000fd0 <HAL_GetTick>
 800731a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800731c:	e011      	b.n	8007342 <HAL_RCC_OscConfig+0x78e>
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	58024800 	.word	0x58024800
 8007328:	fffffc0c 	.word	0xfffffc0c
 800732c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007330:	f7f9 fe4e 	bl	8000fd0 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e08a      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007342:	4b47      	ldr	r3, [pc, #284]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCC_OscConfig+0x77c>
 800734e:	e082      	b.n	8007456 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007350:	4b43      	ldr	r3, [pc, #268]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a42      	ldr	r2, [pc, #264]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800735a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735c:	f7f9 fe38 	bl	8000fd0 <HAL_GetTick>
 8007360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007364:	f7f9 fe34 	bl	8000fd0 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e070      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007376:	4b3a      	ldr	r3, [pc, #232]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f0      	bne.n	8007364 <HAL_RCC_OscConfig+0x7b0>
 8007382:	e068      	b.n	8007456 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007384:	4b36      	ldr	r3, [pc, #216]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800738a:	4b35      	ldr	r3, [pc, #212]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007394:	2b01      	cmp	r3, #1
 8007396:	d031      	beq.n	80073fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f003 0203 	and.w	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d12a      	bne.n	80073fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d122      	bne.n	80073fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d11a      	bne.n	80073fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	0a5b      	lsrs	r3, r3, #9
 80073ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d111      	bne.n	80073fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	0c1b      	lsrs	r3, r3, #16
 80073dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d108      	bne.n	80073fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	0e1b      	lsrs	r3, r3, #24
 80073ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d001      	beq.n	8007400 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e02b      	b.n	8007458 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007400:	4b17      	ldr	r3, [pc, #92]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007404:	08db      	lsrs	r3, r3, #3
 8007406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800740a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	429a      	cmp	r2, r3
 8007414:	d01f      	beq.n	8007456 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007416:	4b12      	ldr	r3, [pc, #72]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	4a11      	ldr	r2, [pc, #68]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007422:	f7f9 fdd5 	bl	8000fd0 <HAL_GetTick>
 8007426:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007428:	bf00      	nop
 800742a:	f7f9 fdd1 	bl	8000fd0 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	4293      	cmp	r3, r2
 8007434:	d0f9      	beq.n	800742a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007436:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800743a:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <HAL_RCC_OscConfig+0x8b0>)
 800743c:	4013      	ands	r3, r2
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007442:	00d2      	lsls	r2, r2, #3
 8007444:	4906      	ldr	r1, [pc, #24]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007446:	4313      	orrs	r3, r2
 8007448:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800744a:	4b05      	ldr	r3, [pc, #20]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744e:	4a04      	ldr	r2, [pc, #16]	@ (8007460 <HAL_RCC_OscConfig+0x8ac>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3730      	adds	r7, #48	@ 0x30
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	58024400 	.word	0x58024400
 8007464:	ffff0007 	.word	0xffff0007

08007468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e19c      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800747c:	4b8a      	ldr	r3, [pc, #552]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d910      	bls.n	80074ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800748a:	4b87      	ldr	r3, [pc, #540]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f023 020f 	bic.w	r2, r3, #15
 8007492:	4985      	ldr	r1, [pc, #532]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	4313      	orrs	r3, r2
 8007498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749a:	4b83      	ldr	r3, [pc, #524]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d001      	beq.n	80074ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e184      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	4b7b      	ldr	r3, [pc, #492]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d908      	bls.n	80074da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074c8:	4b78      	ldr	r3, [pc, #480]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	4975      	ldr	r1, [pc, #468]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d010      	beq.n	8007508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	4b70      	ldr	r3, [pc, #448]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d908      	bls.n	8007508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074f6:	4b6d      	ldr	r3, [pc, #436]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	496a      	ldr	r1, [pc, #424]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007504:	4313      	orrs	r3, r2
 8007506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	4b64      	ldr	r3, [pc, #400]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007520:	429a      	cmp	r2, r3
 8007522:	d908      	bls.n	8007536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007524:	4b61      	ldr	r3, [pc, #388]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	495e      	ldr	r1, [pc, #376]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007532:	4313      	orrs	r3, r2
 8007534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69da      	ldr	r2, [r3, #28]
 8007546:	4b59      	ldr	r3, [pc, #356]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800754e:	429a      	cmp	r2, r3
 8007550:	d908      	bls.n	8007564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007552:	4b56      	ldr	r3, [pc, #344]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	4953      	ldr	r1, [pc, #332]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007560:	4313      	orrs	r3, r2
 8007562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d010      	beq.n	8007592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	4b4d      	ldr	r3, [pc, #308]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	429a      	cmp	r2, r3
 800757e:	d908      	bls.n	8007592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007580:	4b4a      	ldr	r3, [pc, #296]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f023 020f 	bic.w	r2, r3, #15
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4947      	ldr	r1, [pc, #284]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 800758e:	4313      	orrs	r3, r2
 8007590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d055      	beq.n	800764a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800759e:	4b43      	ldr	r3, [pc, #268]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4940      	ldr	r1, [pc, #256]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d107      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075b8:	4b3c      	ldr	r3, [pc, #240]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d121      	bne.n	8007608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0f6      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d107      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075d0:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d115      	bne.n	8007608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e0ea      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d107      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075e8:	4b30      	ldr	r3, [pc, #192]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d109      	bne.n	8007608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0de      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075f8:	4b2c      	ldr	r3, [pc, #176]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0d6      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007608:	4b28      	ldr	r3, [pc, #160]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f023 0207 	bic.w	r2, r3, #7
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4925      	ldr	r1, [pc, #148]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761a:	f7f9 fcd9 	bl	8000fd0 <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007620:	e00a      	b.n	8007638 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007622:	f7f9 fcd5 	bl	8000fd0 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007630:	4293      	cmp	r3, r2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e0be      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007638:	4b1c      	ldr	r3, [pc, #112]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	429a      	cmp	r2, r3
 8007648:	d1eb      	bne.n	8007622 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d010      	beq.n	8007678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	429a      	cmp	r2, r3
 8007664:	d208      	bcs.n	8007678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007666:	4b11      	ldr	r3, [pc, #68]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f023 020f 	bic.w	r2, r3, #15
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	490e      	ldr	r1, [pc, #56]	@ (80076ac <HAL_RCC_ClockConfig+0x244>)
 8007674:	4313      	orrs	r3, r2
 8007676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007678:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d214      	bcs.n	80076b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007686:	4b08      	ldr	r3, [pc, #32]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f023 020f 	bic.w	r2, r3, #15
 800768e:	4906      	ldr	r1, [pc, #24]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	4313      	orrs	r3, r2
 8007694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007696:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <HAL_RCC_ClockConfig+0x240>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e086      	b.n	80077b6 <HAL_RCC_ClockConfig+0x34e>
 80076a8:	52002000 	.word	0x52002000
 80076ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d010      	beq.n	80076de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	4b3f      	ldr	r3, [pc, #252]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d208      	bcs.n	80076de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076cc:	4b3c      	ldr	r3, [pc, #240]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	4939      	ldr	r1, [pc, #228]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d010      	beq.n	800770c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695a      	ldr	r2, [r3, #20]
 80076ee:	4b34      	ldr	r3, [pc, #208]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d208      	bcs.n	800770c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076fa:	4b31      	ldr	r3, [pc, #196]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	492e      	ldr	r1, [pc, #184]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007708:	4313      	orrs	r3, r2
 800770a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	4b28      	ldr	r3, [pc, #160]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007724:	429a      	cmp	r2, r3
 8007726:	d208      	bcs.n	800773a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007728:	4b25      	ldr	r3, [pc, #148]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	4922      	ldr	r1, [pc, #136]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007736:	4313      	orrs	r3, r2
 8007738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d010      	beq.n	8007768 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	4b1d      	ldr	r3, [pc, #116]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007752:	429a      	cmp	r2, r3
 8007754:	d208      	bcs.n	8007768 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007756:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	4917      	ldr	r1, [pc, #92]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007764:	4313      	orrs	r3, r2
 8007766:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007768:	f000 f834 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 800776c:	4602      	mov	r2, r0
 800776e:	4b14      	ldr	r3, [pc, #80]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	4912      	ldr	r1, [pc, #72]	@ (80077c4 <HAL_RCC_ClockConfig+0x35c>)
 800777a:	5ccb      	ldrb	r3, [r1, r3]
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007786:	4b0e      	ldr	r3, [pc, #56]	@ (80077c0 <HAL_RCC_ClockConfig+0x358>)
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	4a0d      	ldr	r2, [pc, #52]	@ (80077c4 <HAL_RCC_ClockConfig+0x35c>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	4a0a      	ldr	r2, [pc, #40]	@ (80077c8 <HAL_RCC_ClockConfig+0x360>)
 800779e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077a0:	4a0a      	ldr	r2, [pc, #40]	@ (80077cc <HAL_RCC_ClockConfig+0x364>)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077a6:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <HAL_RCC_ClockConfig+0x368>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f9 f9f6 	bl	8000b9c <HAL_InitTick>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	08010d9c 	.word	0x08010d9c
 80077c8:	24000004 	.word	0x24000004
 80077cc:	24000000 	.word	0x24000000
 80077d0:	24000008 	.word	0x24000008

080077d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b089      	sub	sp, #36	@ 0x24
 80077d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077da:	4bb3      	ldr	r3, [pc, #716]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077e2:	2b18      	cmp	r3, #24
 80077e4:	f200 8155 	bhi.w	8007a92 <HAL_RCC_GetSysClockFreq+0x2be>
 80077e8:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007855 	.word	0x08007855
 80077f4:	08007a93 	.word	0x08007a93
 80077f8:	08007a93 	.word	0x08007a93
 80077fc:	08007a93 	.word	0x08007a93
 8007800:	08007a93 	.word	0x08007a93
 8007804:	08007a93 	.word	0x08007a93
 8007808:	08007a93 	.word	0x08007a93
 800780c:	08007a93 	.word	0x08007a93
 8007810:	0800787b 	.word	0x0800787b
 8007814:	08007a93 	.word	0x08007a93
 8007818:	08007a93 	.word	0x08007a93
 800781c:	08007a93 	.word	0x08007a93
 8007820:	08007a93 	.word	0x08007a93
 8007824:	08007a93 	.word	0x08007a93
 8007828:	08007a93 	.word	0x08007a93
 800782c:	08007a93 	.word	0x08007a93
 8007830:	08007881 	.word	0x08007881
 8007834:	08007a93 	.word	0x08007a93
 8007838:	08007a93 	.word	0x08007a93
 800783c:	08007a93 	.word	0x08007a93
 8007840:	08007a93 	.word	0x08007a93
 8007844:	08007a93 	.word	0x08007a93
 8007848:	08007a93 	.word	0x08007a93
 800784c:	08007a93 	.word	0x08007a93
 8007850:	08007887 	.word	0x08007887
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007854:	4b94      	ldr	r3, [pc, #592]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007860:	4b91      	ldr	r3, [pc, #580]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	4a90      	ldr	r2, [pc, #576]	@ (8007aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
 8007870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007872:	e111      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007874:	4b8d      	ldr	r3, [pc, #564]	@ (8007aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007876:	61bb      	str	r3, [r7, #24]
      break;
 8007878:	e10e      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800787a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800787c:	61bb      	str	r3, [r7, #24]
      break;
 800787e:	e10b      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007880:	4b8c      	ldr	r3, [pc, #560]	@ (8007ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007882:	61bb      	str	r3, [r7, #24]
      break;
 8007884:	e108      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007886:	4b88      	ldr	r3, [pc, #544]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007890:	4b85      	ldr	r3, [pc, #532]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800789a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800789c:	4b82      	ldr	r3, [pc, #520]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078a6:	4b80      	ldr	r3, [pc, #512]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078aa:	08db      	lsrs	r3, r3, #3
 80078ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80e1 	beq.w	8007a8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f000 8083 	beq.w	80079d8 <HAL_RCC_GetSysClockFreq+0x204>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	f200 80a1 	bhi.w	8007a1c <HAL_RCC_GetSysClockFreq+0x248>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0x114>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d056      	beq.n	8007994 <HAL_RCC_GetSysClockFreq+0x1c0>
 80078e6:	e099      	b.n	8007a1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e8:	4b6f      	ldr	r3, [pc, #444]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02d      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f4:	4b6c      	ldr	r3, [pc, #432]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	08db      	lsrs	r3, r3, #3
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	4a6b      	ldr	r2, [pc, #428]	@ (8007aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b62      	ldr	r3, [pc, #392]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007932:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800794e:	e087      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007abc <HAL_RCC_GetSysClockFreq+0x2e8>
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b51      	ldr	r3, [pc, #324]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a02 	vldr	s12, [r7, #8]
 8007976:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007992:	e065      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b40      	ldr	r3, [pc, #256]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079d6:	e043      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80079fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a1a:	e021      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007a60:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a64:	0a5b      	lsrs	r3, r3, #9
 8007a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	ee07 3a90 	vmov	s15, r3
 8007a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a84:	ee17 3a90 	vmov	r3, s15
 8007a88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007a8a:	e005      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
      break;
 8007a90:	e002      	b.n	8007a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007a92:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a94:	61bb      	str	r3, [r7, #24]
      break;
 8007a96:	bf00      	nop
  }

  return sysclockfreq;
 8007a98:	69bb      	ldr	r3, [r7, #24]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3724      	adds	r7, #36	@ 0x24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	003d0900 	.word	0x003d0900
 8007ab4:	017d7840 	.word	0x017d7840
 8007ab8:	46000000 	.word	0x46000000
 8007abc:	4c742400 	.word	0x4c742400
 8007ac0:	4a742400 	.word	0x4a742400
 8007ac4:	4bbebc20 	.word	0x4bbebc20

08007ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ace:	f7ff fe81 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b10      	ldr	r3, [pc, #64]	@ (8007b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	490f      	ldr	r1, [pc, #60]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ae0:	5ccb      	ldrb	r3, [r1, r3]
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aec:	4b0a      	ldr	r3, [pc, #40]	@ (8007b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	4a09      	ldr	r2, [pc, #36]	@ (8007b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007af6:	5cd3      	ldrb	r3, [r2, r3]
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	4a07      	ldr	r2, [pc, #28]	@ (8007b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b06:	4a07      	ldr	r2, [pc, #28]	@ (8007b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b0c:	4b04      	ldr	r3, [pc, #16]	@ (8007b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	08010d9c 	.word	0x08010d9c
 8007b20:	24000004 	.word	0x24000004
 8007b24:	24000000 	.word	0x24000000

08007b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b2c:	f7ff ffcc 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8007b30:	4602      	mov	r2, r0
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	4904      	ldr	r1, [pc, #16]	@ (8007b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b3e:	5ccb      	ldrb	r3, [r1, r3]
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	08010d9c 	.word	0x08010d9c

08007b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b58:	f7ff ffb6 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	4b06      	ldr	r3, [pc, #24]	@ (8007b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	f003 0307 	and.w	r3, r3, #7
 8007b68:	4904      	ldr	r1, [pc, #16]	@ (8007b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b6a:	5ccb      	ldrb	r3, [r1, r3]
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	08010d9c 	.word	0x08010d9c

08007b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	223f      	movs	r2, #63	@ 0x3f
 8007b8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b90:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0207 	and.w	r2, r3, #7
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007b9c:	4b17      	ldr	r3, [pc, #92]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ba8:	4b14      	ldr	r3, [pc, #80]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007bb4:	4b11      	ldr	r3, [pc, #68]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007bd8:	4b08      	ldr	r3, [pc, #32]	@ (8007bfc <HAL_RCC_GetClockConfig+0x7c>)
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <HAL_RCC_GetClockConfig+0x80>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	601a      	str	r2, [r3, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	52002000 	.word	0x52002000

08007c04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c08:	b0ca      	sub	sp, #296	@ 0x128
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c10:	2300      	movs	r3, #0
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c16:	2300      	movs	r3, #0
 8007c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007c28:	2500      	movs	r5, #0
 8007c2a:	ea54 0305 	orrs.w	r3, r4, r5
 8007c2e:	d049      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c3a:	d02f      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c40:	d828      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c46:	d01a      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c4c:	d822      	bhi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c56:	d007      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c58:	e01c      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5a:	4bb8      	ldr	r3, [pc, #736]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4ab7      	ldr	r2, [pc, #732]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c66:	e01a      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2102      	movs	r1, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f002 fb61 	bl	800a338 <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c7c:	e00f      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c82:	3328      	adds	r3, #40	@ 0x28
 8007c84:	2102      	movs	r1, #2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f002 fc08 	bl	800a49c <RCCEx_PLL3_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007c92:	e004      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9a:	e000      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ca6:	4ba5      	ldr	r3, [pc, #660]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007caa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cb4:	4aa1      	ldr	r2, [pc, #644]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cba:	e003      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007cd0:	f04f 0900 	mov.w	r9, #0
 8007cd4:	ea58 0309 	orrs.w	r3, r8, r9
 8007cd8:	d047      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d82a      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d01 	.word	0x08007d01
 8007cf0:	08007d0f 	.word	0x08007d0f
 8007cf4:	08007d25 	.word	0x08007d25
 8007cf8:	08007d43 	.word	0x08007d43
 8007cfc:	08007d43 	.word	0x08007d43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d00:	4b8e      	ldr	r3, [pc, #568]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	4a8d      	ldr	r2, [pc, #564]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e01a      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	3308      	adds	r3, #8
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 fb0e 	bl	800a338 <RCCEx_PLL2_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d22:	e00f      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	3328      	adds	r3, #40	@ 0x28
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f002 fbb5 	bl	800a49c <RCCEx_PLL3_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d38:	e004      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d40:	e000      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d50:	f023 0107 	bic.w	r1, r3, #7
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5a:	4a78      	ldr	r2, [pc, #480]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d60:	e003      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007d76:	f04f 0b00 	mov.w	fp, #0
 8007d7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007d7e:	d04c      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d8a:	d030      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d90:	d829      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d94:	d02d      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d98:	d825      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007d9a:	2b80      	cmp	r3, #128	@ 0x80
 8007d9c:	d018      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007d9e:	2b80      	cmp	r3, #128	@ 0x80
 8007da0:	d821      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007da6:	2b40      	cmp	r3, #64	@ 0x40
 8007da8:	d007      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007daa:	e01c      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dac:	4b63      	ldr	r3, [pc, #396]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	4a62      	ldr	r2, [pc, #392]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007db8:	e01c      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f002 fab8 	bl	800a338 <RCCEx_PLL2_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007dce:	e011      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	3328      	adds	r3, #40	@ 0x28
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 fb5f 	bl	800a49c <RCCEx_PLL3_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007de4:	e006      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dec:	e002      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007dee:	bf00      	nop
 8007df0:	e000      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e10:	e003      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007e26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007e30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007e34:	460b      	mov	r3, r1
 8007e36:	4313      	orrs	r3, r2
 8007e38:	d053      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e46:	d035      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e4c:	d82e      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e52:	d031      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007e54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e58:	d828      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e5e:	d01a      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e64:	d822      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007e6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e6e:	d007      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007e70:	e01c      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e72:	4b32      	ldr	r3, [pc, #200]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e76:	4a31      	ldr	r2, [pc, #196]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e7e:	e01c      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	3308      	adds	r3, #8
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f002 fa55 	bl	800a338 <RCCEx_PLL2_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e94:	e011      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9a:	3328      	adds	r3, #40	@ 0x28
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f002 fafc 	bl	800a49c <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eaa:	e006      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ed8:	e003      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007eee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007ef8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d056      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f0e:	d038      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f14:	d831      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f1a:	d034      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007f1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f20:	d82b      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f26:	d01d      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f2c:	d825      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d006      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f36:	d00a      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f38:	e01f      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f40:	4ba2      	ldr	r3, [pc, #648]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	4aa1      	ldr	r2, [pc, #644]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f4c:	e01c      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f52:	3308      	adds	r3, #8
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f002 f9ee 	bl	800a338 <RCCEx_PLL2_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007f62:	e011      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f68:	3328      	adds	r3, #40	@ 0x28
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 fa95 	bl	800a49c <RCCEx_PLL3_Config>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f78:	e006      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f80:	e002      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007f82:	bf00      	nop
 8007f84:	e000      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f90:	4b8e      	ldr	r3, [pc, #568]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fa0:	4a8a      	ldr	r2, [pc, #552]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa6:	e003      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007fc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	d03a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd6:	2b30      	cmp	r3, #48	@ 0x30
 8007fd8:	d01f      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007fda:	2b30      	cmp	r3, #48	@ 0x30
 8007fdc:	d819      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d00c      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d815      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d019      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d111      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4b77      	ldr	r3, [pc, #476]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff2:	4a76      	ldr	r2, [pc, #472]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ffa:	e011      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	3308      	adds	r3, #8
 8008002:	2102      	movs	r1, #2
 8008004:	4618      	mov	r0, r3
 8008006:	f002 f997 	bl	800a338 <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008010:	e006      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800801e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008028:	4b68      	ldr	r3, [pc, #416]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800802a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008036:	4a65      	ldr	r2, [pc, #404]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008038:	430b      	orrs	r3, r1
 800803a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800803c:	e003      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008052:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008056:	2300      	movs	r3, #0
 8008058:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800805c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d051      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800806c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008070:	d035      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008076:	d82e      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008078:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800807c:	d031      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800807e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008082:	d828      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008088:	d01a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800808a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808e:	d822      	bhi.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008098:	d007      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800809a:	e01c      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809c:	4b4b      	ldr	r3, [pc, #300]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	4a4a      	ldr	r2, [pc, #296]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080a8:	e01c      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	3308      	adds	r3, #8
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f002 f940 	bl	800a338 <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080be:	e011      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c4:	3328      	adds	r3, #40	@ 0x28
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f002 f9e7 	bl	800a49c <RCCEx_PLL3_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080ec:	4b37      	ldr	r3, [pc, #220]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080fa:	4a34      	ldr	r2, [pc, #208]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080fc:	430b      	orrs	r3, r1
 80080fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800810a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800811a:	2300      	movs	r3, #0
 800811c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008120:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008124:	460b      	mov	r3, r1
 8008126:	4313      	orrs	r3, r2
 8008128:	d056      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800812a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008134:	d033      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008136:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800813a:	d82c      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800813c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008140:	d02f      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008142:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008146:	d826      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800814c:	d02b      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800814e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008152:	d820      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008158:	d012      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800815a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800815e:	d81a      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d022      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008168:	d115      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	3308      	adds	r3, #8
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f002 f8e0 	bl	800a338 <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800817e:	e015      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	3328      	adds	r3, #40	@ 0x28
 8008186:	2101      	movs	r1, #1
 8008188:	4618      	mov	r0, r3
 800818a:	f002 f987 	bl	800a49c <RCCEx_PLL3_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008194:	e00a      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800819e:	bf00      	nop
 80081a0:	e004      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081a2:	bf00      	nop
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081a6:	bf00      	nop
 80081a8:	e000      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10d      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c2:	4a02      	ldr	r2, [pc, #8]	@ (80081cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80081c8:	e006      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80081e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4313      	orrs	r3, r2
 80081f6:	d055      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80081f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008204:	d033      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800820a:	d82c      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800820c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008210:	d02f      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008216:	d826      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008218:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800821c:	d02b      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800821e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008222:	d820      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008228:	d012      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800822a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822e:	d81a      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d022      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008238:	d115      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	3308      	adds	r3, #8
 8008240:	2101      	movs	r1, #1
 8008242:	4618      	mov	r0, r3
 8008244:	f002 f878 	bl	800a338 <RCCEx_PLL2_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800824e:	e015      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008254:	3328      	adds	r3, #40	@ 0x28
 8008256:	2101      	movs	r1, #1
 8008258:	4618      	mov	r0, r3
 800825a:	f002 f91f 	bl	800a49c <RCCEx_PLL3_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008264:	e00a      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800826c:	e006      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800826e:	bf00      	nop
 8008270:	e004      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008272:	bf00      	nop
 8008274:	e002      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008276:	bf00      	nop
 8008278:	e000      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800827a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008284:	4ba3      	ldr	r3, [pc, #652]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008288:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008294:	4a9f      	ldr	r2, [pc, #636]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008296:	430b      	orrs	r3, r1
 8008298:	6593      	str	r3, [r2, #88]	@ 0x58
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80082b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082b4:	2300      	movs	r3, #0
 80082b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082be:	460b      	mov	r3, r1
 80082c0:	4313      	orrs	r3, r2
 80082c2:	d037      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082ce:	d00e      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d4:	d816      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d018      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80082da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082de:	d111      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	4a8b      	ldr	r2, [pc, #556]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80082ec:	e00f      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	3308      	adds	r3, #8
 80082f4:	2101      	movs	r1, #1
 80082f6:	4618      	mov	r0, r3
 80082f8:	f002 f81e 	bl	800a338 <RCCEx_PLL2_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008302:	e004      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800830a:	e000      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800830c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008316:	4b7f      	ldr	r3, [pc, #508]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008324:	4a7b      	ldr	r2, [pc, #492]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008326:	430b      	orrs	r3, r1
 8008328:	6513      	str	r3, [r2, #80]	@ 0x50
 800832a:	e003      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008344:	2300      	movs	r3, #0
 8008346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800834a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800834e:	460b      	mov	r3, r1
 8008350:	4313      	orrs	r3, r2
 8008352:	d039      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835a:	2b03      	cmp	r3, #3
 800835c:	d81c      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800835e:	a201      	add	r2, pc, #4	@ (adr r2, 8008364 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	080083a1 	.word	0x080083a1
 8008368:	08008375 	.word	0x08008375
 800836c:	08008383 	.word	0x08008383
 8008370:	080083a1 	.word	0x080083a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4b67      	ldr	r3, [pc, #412]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	4a66      	ldr	r2, [pc, #408]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008380:	e00f      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008386:	3308      	adds	r3, #8
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 ffd4 	bl	800a338 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008396:	e004      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800839e:	e000      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80083a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083aa:	4b5a      	ldr	r3, [pc, #360]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ae:	f023 0103 	bic.w	r1, r3, #3
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b8:	4a56      	ldr	r2, [pc, #344]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ba:	430b      	orrs	r3, r1
 80083bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80083d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f000 809f 	beq.w	8008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80083f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083f6:	f7f8 fdeb 	bl	8000fd0 <HAL_GetTick>
 80083fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083fe:	e00b      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008400:	f7f8 fde6 	bl	8000fd0 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b64      	cmp	r3, #100	@ 0x64
 800840e:	d903      	bls.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008416:	e005      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008418:	4b3f      	ldr	r3, [pc, #252]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0ed      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008428:	2b00      	cmp	r3, #0
 800842a:	d179      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800842c:	4b39      	ldr	r3, [pc, #228]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800842e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008438:	4053      	eors	r3, r2
 800843a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800843e:	2b00      	cmp	r3, #0
 8008440:	d015      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008442:	4b34      	ldr	r3, [pc, #208]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800844a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800844e:	4b31      	ldr	r3, [pc, #196]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008452:	4a30      	ldr	r2, [pc, #192]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008458:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800845a:	4b2e      	ldr	r3, [pc, #184]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	4a2d      	ldr	r2, [pc, #180]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008464:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008466:	4a2b      	ldr	r2, [pc, #172]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800846c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800847a:	d118      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7f8 fda8 	bl	8000fd0 <HAL_GetTick>
 8008480:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008484:	e00d      	b.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008486:	f7f8 fda3 	bl	8000fd0 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008490:	1ad2      	subs	r2, r2, r3
 8008492:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008496:	429a      	cmp	r2, r3
 8008498:	d903      	bls.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80084a0:	e005      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0eb      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80084ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d129      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084c6:	d10e      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084d8:	091a      	lsrs	r2, r3, #4
 80084da:	4b10      	ldr	r3, [pc, #64]	@ (800851c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80084dc:	4013      	ands	r3, r2
 80084de:	4a0d      	ldr	r2, [pc, #52]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6113      	str	r3, [r2, #16]
 80084e4:	e005      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80084f0:	6113      	str	r3, [r2, #16]
 80084f2:	4b08      	ldr	r3, [pc, #32]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008502:	4a04      	ldr	r2, [pc, #16]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008504:	430b      	orrs	r3, r1
 8008506:	6713      	str	r3, [r2, #112]	@ 0x70
 8008508:	e00e      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800850a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008512:	e009      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008514:	58024400 	.word	0x58024400
 8008518:	58024800 	.word	0x58024800
 800851c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f002 0301 	and.w	r3, r2, #1
 8008534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008538:	2300      	movs	r3, #0
 800853a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800853e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008542:	460b      	mov	r3, r1
 8008544:	4313      	orrs	r3, r2
 8008546:	f000 8089 	beq.w	800865c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008550:	2b28      	cmp	r3, #40	@ 0x28
 8008552:	d86b      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008554:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008635 	.word	0x08008635
 8008560:	0800862d 	.word	0x0800862d
 8008564:	0800862d 	.word	0x0800862d
 8008568:	0800862d 	.word	0x0800862d
 800856c:	0800862d 	.word	0x0800862d
 8008570:	0800862d 	.word	0x0800862d
 8008574:	0800862d 	.word	0x0800862d
 8008578:	0800862d 	.word	0x0800862d
 800857c:	08008601 	.word	0x08008601
 8008580:	0800862d 	.word	0x0800862d
 8008584:	0800862d 	.word	0x0800862d
 8008588:	0800862d 	.word	0x0800862d
 800858c:	0800862d 	.word	0x0800862d
 8008590:	0800862d 	.word	0x0800862d
 8008594:	0800862d 	.word	0x0800862d
 8008598:	0800862d 	.word	0x0800862d
 800859c:	08008617 	.word	0x08008617
 80085a0:	0800862d 	.word	0x0800862d
 80085a4:	0800862d 	.word	0x0800862d
 80085a8:	0800862d 	.word	0x0800862d
 80085ac:	0800862d 	.word	0x0800862d
 80085b0:	0800862d 	.word	0x0800862d
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	08008635 	.word	0x08008635
 80085c0:	0800862d 	.word	0x0800862d
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	0800862d 	.word	0x0800862d
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	08008635 	.word	0x08008635
 80085e0:	0800862d 	.word	0x0800862d
 80085e4:	0800862d 	.word	0x0800862d
 80085e8:	0800862d 	.word	0x0800862d
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	0800862d 	.word	0x0800862d
 80085f4:	0800862d 	.word	0x0800862d
 80085f8:	0800862d 	.word	0x0800862d
 80085fc:	08008635 	.word	0x08008635
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008604:	3308      	adds	r3, #8
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fe95 	bl	800a338 <RCCEx_PLL2_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861a:	3328      	adds	r3, #40	@ 0x28
 800861c:	2101      	movs	r1, #1
 800861e:	4618      	mov	r0, r3
 8008620:	f001 ff3c 	bl	800a49c <RCCEx_PLL3_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800863e:	4bbf      	ldr	r3, [pc, #764]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008642:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800864c:	4abb      	ldr	r2, [pc, #748]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800864e:	430b      	orrs	r3, r1
 8008650:	6553      	str	r3, [r2, #84]	@ 0x54
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f002 0302 	and.w	r3, r2, #2
 8008668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008672:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	d041      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008682:	2b05      	cmp	r3, #5
 8008684:	d824      	bhi.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008686:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086d9 	.word	0x080086d9
 8008690:	080086a5 	.word	0x080086a5
 8008694:	080086bb 	.word	0x080086bb
 8008698:	080086d9 	.word	0x080086d9
 800869c:	080086d9 	.word	0x080086d9
 80086a0:	080086d9 	.word	0x080086d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	3308      	adds	r3, #8
 80086aa:	2101      	movs	r1, #1
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 fe43 	bl	800a338 <RCCEx_PLL2_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086b8:	e00f      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	3328      	adds	r3, #40	@ 0x28
 80086c0:	2101      	movs	r1, #1
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 feea 	bl	800a49c <RCCEx_PLL3_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80086ce:	e004      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086d6:	e000      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80086d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086e2:	4b96      	ldr	r3, [pc, #600]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e6:	f023 0107 	bic.w	r1, r3, #7
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086f0:	4a92      	ldr	r2, [pc, #584]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086f2:	430b      	orrs	r3, r1
 80086f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80086f6:	e003      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f002 0304 	and.w	r3, r2, #4
 800870c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008710:	2300      	movs	r3, #0
 8008712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008716:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800871a:	460b      	mov	r3, r1
 800871c:	4313      	orrs	r3, r2
 800871e:	d044      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008728:	2b05      	cmp	r3, #5
 800872a:	d825      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800872c:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008781 	.word	0x08008781
 8008738:	0800874d 	.word	0x0800874d
 800873c:	08008763 	.word	0x08008763
 8008740:	08008781 	.word	0x08008781
 8008744:	08008781 	.word	0x08008781
 8008748:	08008781 	.word	0x08008781
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008750:	3308      	adds	r3, #8
 8008752:	2101      	movs	r1, #1
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fdef 	bl	800a338 <RCCEx_PLL2_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008760:	e00f      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008766:	3328      	adds	r3, #40	@ 0x28
 8008768:	2101      	movs	r1, #1
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fe96 	bl	800a49c <RCCEx_PLL3_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008776:	e004      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800877e:	e000      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800878a:	4b6c      	ldr	r3, [pc, #432]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800878c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878e:	f023 0107 	bic.w	r1, r3, #7
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800879a:	4a68      	ldr	r2, [pc, #416]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800879c:	430b      	orrs	r3, r1
 800879e:	6593      	str	r3, [r2, #88]	@ 0x58
 80087a0:	e003      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f002 0320 	and.w	r3, r2, #32
 80087b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087c4:	460b      	mov	r3, r1
 80087c6:	4313      	orrs	r3, r2
 80087c8:	d055      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087d6:	d033      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80087d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087dc:	d82c      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e2:	d02f      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e8:	d826      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80087ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087ee:	d02b      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80087f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087f4:	d820      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80087f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087fa:	d012      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008800:	d81a      	bhi.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d022      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800880a:	d115      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008810:	3308      	adds	r3, #8
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fd8f 	bl	800a338 <RCCEx_PLL2_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008820:	e015      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008826:	3328      	adds	r3, #40	@ 0x28
 8008828:	2102      	movs	r1, #2
 800882a:	4618      	mov	r0, r3
 800882c:	f001 fe36 	bl	800a49c <RCCEx_PLL3_Config>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008836:	e00a      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800883e:	e006      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008840:	bf00      	nop
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008844:	bf00      	nop
 8008846:	e002      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800884c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10b      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008856:	4b39      	ldr	r3, [pc, #228]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008866:	4a35      	ldr	r2, [pc, #212]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008868:	430b      	orrs	r3, r1
 800886a:	6553      	str	r3, [r2, #84]	@ 0x54
 800886c:	e003      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008886:	2300      	movs	r3, #0
 8008888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800888c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008890:	460b      	mov	r3, r1
 8008892:	4313      	orrs	r3, r2
 8008894:	d058      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800889e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088a2:	d033      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80088a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088a8:	d82c      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ae:	d02f      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b4:	d826      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088ba:	d02b      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80088bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088c0:	d820      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088c6:	d012      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088cc:	d81a      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d022      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80088d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d6:	d115      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088dc:	3308      	adds	r3, #8
 80088de:	2100      	movs	r1, #0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fd29 	bl	800a338 <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80088ec:	e015      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f2:	3328      	adds	r3, #40	@ 0x28
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fdd0 	bl	800a49c <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008902:	e00a      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800890a:	e006      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800890c:	bf00      	nop
 800890e:	e004      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008910:	bf00      	nop
 8008912:	e002      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10e      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008922:	4b06      	ldr	r3, [pc, #24]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008926:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800892a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008932:	4a02      	ldr	r2, [pc, #8]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008934:	430b      	orrs	r3, r1
 8008936:	6593      	str	r3, [r2, #88]	@ 0x58
 8008938:	e006      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800893a:	bf00      	nop
 800893c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008958:	2300      	movs	r3, #0
 800895a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800895e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008962:	460b      	mov	r3, r1
 8008964:	4313      	orrs	r3, r2
 8008966:	d055      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008970:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008974:	d033      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008976:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800897a:	d82c      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800897c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008980:	d02f      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008986:	d826      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008988:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800898c:	d02b      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800898e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008992:	d820      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008998:	d012      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899e:	d81a      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d022      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80089a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089a8:	d115      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ae:	3308      	adds	r3, #8
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fcc0 	bl	800a338 <RCCEx_PLL2_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089be:	e015      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c4:	3328      	adds	r3, #40	@ 0x28
 80089c6:	2102      	movs	r1, #2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 fd67 	bl	800a49c <RCCEx_PLL3_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80089d4:	e00a      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089dc:	e006      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80089ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80089f4:	4ba1      	ldr	r3, [pc, #644]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80089fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a04:	4a9d      	ldr	r2, [pc, #628]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a06:	430b      	orrs	r3, r1
 8008a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f002 0308 	and.w	r3, r2, #8
 8008a20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a24:	2300      	movs	r3, #0
 8008a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4313      	orrs	r3, r2
 8008a32:	d01e      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a46:	3328      	adds	r3, #40	@ 0x28
 8008a48:	2102      	movs	r1, #2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fd26 	bl	800a49c <RCCEx_PLL3_Config>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008a5c:	4b87      	ldr	r3, [pc, #540]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a6c:	4a83      	ldr	r2, [pc, #524]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a6e:	430b      	orrs	r3, r1
 8008a70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f002 0310 	and.w	r3, r2, #16
 8008a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	d01e      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a9e:	d10c      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa4:	3328      	adds	r3, #40	@ 0x28
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fcf7 	bl	800a49c <RCCEx_PLL3_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008aba:	4b70      	ldr	r3, [pc, #448]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008abe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008aca:	4a6c      	ldr	r2, [pc, #432]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008acc:	430b      	orrs	r3, r1
 8008ace:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ae6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008aea:	460b      	mov	r3, r1
 8008aec:	4313      	orrs	r3, r2
 8008aee:	d03e      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afc:	d022      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b02:	d81b      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b0c:	d00b      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008b0e:	e015      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b14:	3308      	adds	r3, #8
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fc0d 	bl	800a338 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b24:	e00f      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	3328      	adds	r3, #40	@ 0x28
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fcb4 	bl	800a49c <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b3a:	e004      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10b      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b5e:	4a47      	ldr	r2, [pc, #284]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b64:	e003      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d03b      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b96:	d01f      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008b98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b9c:	d818      	bhi.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ba2:	d003      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ba8:	d007      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008baa:	e011      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bac:	4b33      	ldr	r3, [pc, #204]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb0:	4a32      	ldr	r2, [pc, #200]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bb8:	e00f      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbe:	3328      	adds	r3, #40	@ 0x28
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 fc6a 	bl	800a49c <RCCEx_PLL3_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008bce:	e004      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bd6:	e000      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008be2:	4b26      	ldr	r3, [pc, #152]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf2:	4a22      	ldr	r2, [pc, #136]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bf8:	e003      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c10:	2300      	movs	r3, #0
 8008c12:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d034      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c2c:	d007      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008c2e:	e011      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c30:	4b12      	ldr	r3, [pc, #72]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	4a11      	ldr	r2, [pc, #68]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c3c:	e00e      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c42:	3308      	adds	r3, #8
 8008c44:	2102      	movs	r1, #2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 fb76 	bl	800a338 <RCCEx_PLL2_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c64:	4b05      	ldr	r3, [pc, #20]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c72:	4a02      	ldr	r2, [pc, #8]	@ (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c78:	e006      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008c7a:	bf00      	nop
 8008c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c96:	2300      	movs	r3, #0
 8008c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	d00c      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	3328      	adds	r3, #40	@ 0x28
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fbf5 	bl	800a49c <RCCEx_PLL3_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ccc:	2300      	movs	r3, #0
 8008cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	d038      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ce6:	d018      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cec:	d811      	bhi.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf2:	d014      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf8:	d80b      	bhi.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d011      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d02:	d106      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4bc3      	ldr	r3, [pc, #780]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d08:	4ac2      	ldr	r2, [pc, #776]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d10:	e008      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d18:	e004      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10b      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d2c:	4bb9      	ldr	r3, [pc, #740]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3c:	4ab5      	ldr	r2, [pc, #724]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d62:	460b      	mov	r3, r1
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d009      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d68:	4baa      	ldr	r3, [pc, #680]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d76:	4aa7      	ldr	r2, [pc, #668]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d78:	430b      	orrs	r3, r1
 8008d7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008d92:	460b      	mov	r3, r1
 8008d94:	4313      	orrs	r3, r2
 8008d96:	d00a      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d98:	4b9e      	ldr	r3, [pc, #632]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008da8:	4a9a      	ldr	r2, [pc, #616]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008daa:	430b      	orrs	r3, r1
 8008dac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	d009      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dca:	4b92      	ldr	r3, [pc, #584]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dda:	430b      	orrs	r3, r1
 8008ddc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dec:	2300      	movs	r3, #0
 8008dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8008df0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008df4:	460b      	mov	r3, r1
 8008df6:	4313      	orrs	r3, r2
 8008df8:	d00e      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008dfa:	4b86      	ldr	r3, [pc, #536]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4a85      	ldr	r2, [pc, #532]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e04:	6113      	str	r3, [r2, #16]
 8008e06:	4b83      	ldr	r3, [pc, #524]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e08:	6919      	ldr	r1, [r3, #16]
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e12:	4a80      	ldr	r2, [pc, #512]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e14:	430b      	orrs	r3, r1
 8008e16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e26:	2300      	movs	r3, #0
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4313      	orrs	r3, r2
 8008e32:	d009      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e34:	4b77      	ldr	r3, [pc, #476]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e42:	4a74      	ldr	r2, [pc, #464]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e44:	430b      	orrs	r3, r1
 8008e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e56:	2300      	movs	r3, #0
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4313      	orrs	r3, r2
 8008e62:	d00a      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e64:	4b6b      	ldr	r3, [pc, #428]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e74:	4a67      	ldr	r2, [pc, #412]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e76:	430b      	orrs	r3, r1
 8008e78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	2100      	movs	r1, #0
 8008e84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008e90:	460b      	mov	r3, r1
 8008e92:	4313      	orrs	r3, r2
 8008e94:	d011      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fa4a 	bl	800a338 <RCCEx_PLL2_Config>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	6239      	str	r1, [r7, #32]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ecc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	d011      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eda:	3308      	adds	r3, #8
 8008edc:	2101      	movs	r1, #1
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 fa2a 	bl	800a338 <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	2100      	movs	r1, #0
 8008f04:	61b9      	str	r1, [r7, #24]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d011      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 fa0a 	bl	800a338 <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	2100      	movs	r1, #0
 8008f44:	6139      	str	r1, [r7, #16]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f50:	460b      	mov	r3, r1
 8008f52:	4313      	orrs	r3, r2
 8008f54:	d011      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	3328      	adds	r3, #40	@ 0x28
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fa9c 	bl	800a49c <RCCEx_PLL3_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	2100      	movs	r1, #0
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f90:	460b      	mov	r3, r1
 8008f92:	4313      	orrs	r3, r2
 8008f94:	d011      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	3328      	adds	r3, #40	@ 0x28
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fa7c 	bl	800a49c <RCCEx_PLL3_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	607b      	str	r3, [r7, #4]
 8008fcc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	d011      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	3328      	adds	r3, #40	@ 0x28
 8008fdc:	2102      	movs	r1, #2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 fa5c 	bl	800a49c <RCCEx_PLL3_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008ffa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	e000      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
}
 8009008:	4618      	mov	r0, r3
 800900a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800900e:	46bd      	mov	sp, r7
 8009010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009014:	58024400 	.word	0x58024400

08009018 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b090      	sub	sp, #64	@ 0x40
 800901c:	af00      	add	r7, sp, #0
 800901e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009026:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800902a:	430b      	orrs	r3, r1
 800902c:	f040 8094 	bne.w	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009030:	4b9e      	ldr	r3, [pc, #632]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	2b04      	cmp	r3, #4
 800903e:	f200 8087 	bhi.w	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009042:	a201      	add	r2, pc, #4	@ (adr r2, 8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	0800905d 	.word	0x0800905d
 800904c:	08009085 	.word	0x08009085
 8009050:	080090ad 	.word	0x080090ad
 8009054:	08009149 	.word	0x08009149
 8009058:	080090d5 	.word	0x080090d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800905c:	4b93      	ldr	r3, [pc, #588]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009068:	d108      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f001 f810 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009078:	f000 bd45 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009080:	f000 bd41 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009084:	4b89      	ldr	r3, [pc, #548]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800908c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009090:	d108      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009092:	f107 0318 	add.w	r3, r7, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fd54 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a0:	f000 bd31 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a8:	f000 bd2d 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ac:	4b7f      	ldr	r3, [pc, #508]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090b8:	d108      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ba:	f107 030c 	add.w	r3, r7, #12
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fe94 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090c8:	f000 bd1d 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d0:	f000 bd19 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090d4:	4b75      	ldr	r3, [pc, #468]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090de:	4b73      	ldr	r3, [pc, #460]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d10c      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80090ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f0:	4b6e      	ldr	r3, [pc, #440]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a6d      	ldr	r2, [pc, #436]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009102:	e01f      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009104:	4b69      	ldr	r3, [pc, #420]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800910c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009110:	d106      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009118:	d102      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800911a:	4b66      	ldr	r3, [pc, #408]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800911c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800911e:	e011      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009120:	4b62      	ldr	r3, [pc, #392]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800912c:	d106      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800912e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009134:	d102      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009136:	4b60      	ldr	r3, [pc, #384]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800913a:	e003      	b.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009140:	f000 bce1 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009144:	f000 bcdf 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009148:	4b5c      	ldr	r3, [pc, #368]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800914a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914c:	f000 bcdb 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	f000 bcd7 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800915c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009160:	430b      	orrs	r3, r1
 8009162:	f040 80ad 	bne.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009166:	4b51      	ldr	r3, [pc, #324]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800916e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009176:	d056      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800917e:	f200 8090 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	2bc0      	cmp	r3, #192	@ 0xc0
 8009186:	f000 8088 	beq.w	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	2bc0      	cmp	r3, #192	@ 0xc0
 800918e:	f200 8088 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	2b80      	cmp	r3, #128	@ 0x80
 8009196:	d032      	beq.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	2b80      	cmp	r3, #128	@ 0x80
 800919c:	f200 8081 	bhi.w	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2b40      	cmp	r3, #64	@ 0x40
 80091aa:	d014      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80091ac:	e079      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ae:	4b3f      	ldr	r3, [pc, #252]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ba:	d108      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 ff67 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ca:	f000 bc9c 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d2:	f000 bc98 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d6:	4b35      	ldr	r3, [pc, #212]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091e2:	d108      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e4:	f107 0318 	add.w	r3, r7, #24
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fcab 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f2:	f000 bc88 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091fa:	f000 bc84 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091fe:	4b2b      	ldr	r3, [pc, #172]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920a:	d108      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920c:	f107 030c 	add.w	r3, r7, #12
 8009210:	4618      	mov	r0, r3
 8009212:	f000 fdeb 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921a:	f000 bc74 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009222:	f000 bc70 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009226:	4b21      	ldr	r3, [pc, #132]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800922a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009230:	4b1e      	ldr	r3, [pc, #120]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	2b04      	cmp	r3, #4
 800923a:	d10c      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800923c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009242:	4b1a      	ldr	r3, [pc, #104]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a18      	ldr	r2, [pc, #96]	@ (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009254:	e01f      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009256:	4b15      	ldr	r3, [pc, #84]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009262:	d106      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800926a:	d102      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800926c:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009270:	e011      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009272:	4b0e      	ldr	r3, [pc, #56]	@ (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927e:	d106      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009286:	d102      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009288:	4b0b      	ldr	r3, [pc, #44]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800928c:	e003      	b.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009292:	f000 bc38 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009296:	f000 bc36 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800929a:	4b08      	ldr	r3, [pc, #32]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929e:	f000 bc32 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a6:	f000 bc2e 	b.w	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	003d0900 	.word	0x003d0900
 80092b8:	017d7840 	.word	0x017d7840
 80092bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80092c8:	430b      	orrs	r3, r1
 80092ca:	f040 809c 	bne.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80092ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092de:	d054      	beq.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092e6:	f200 808b 	bhi.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092f0:	f000 8083 	beq.w	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092fa:	f200 8081 	bhi.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009304:	d02f      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800930c:	d878      	bhi.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800931a:	d012      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800931c:	e070      	b.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800931e:	4b8a      	ldr	r3, [pc, #552]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800932c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009330:	4618      	mov	r0, r3
 8009332:	f000 feaf 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800933a:	e3e4      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009340:	e3e1      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009342:	4b81      	ldr	r3, [pc, #516]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800934a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800934e:	d107      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009350:	f107 0318 	add.w	r3, r7, #24
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fbf5 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800935e:	e3d2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e3cf      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009366:	4b78      	ldr	r3, [pc, #480]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009372:	d107      	bne.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fd37 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009382:	e3c0      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009388:	e3bd      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800938a:	4b6f      	ldr	r3, [pc, #444]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800938c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800938e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009392:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009394:	4b6c      	ldr	r3, [pc, #432]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b04      	cmp	r3, #4
 800939e:	d10c      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d109      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a6:	4b68      	ldr	r3, [pc, #416]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	08db      	lsrs	r3, r3, #3
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	4a66      	ldr	r2, [pc, #408]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093b8:	e01e      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093ba:	4b63      	ldr	r3, [pc, #396]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80093c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093d0:	4b5f      	ldr	r3, [pc, #380]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093d4:	e010      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093e2:	d106      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093ec:	4b59      	ldr	r3, [pc, #356]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093f6:	e386      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093f8:	e385      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093fa:	4b57      	ldr	r3, [pc, #348]	@ (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80093fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fe:	e382      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009404:	e37f      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800940e:	430b      	orrs	r3, r1
 8009410:	f040 80a7 	bne.w	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009414:	4b4c      	ldr	r3, [pc, #304]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009418:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800941c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009424:	d055      	beq.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800942c:	f200 8096 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009436:	f000 8084 	beq.w	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009440:	f200 808c 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800944a:	d030      	beq.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800944c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009452:	f200 8083 	bhi.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800945c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009462:	d012      	beq.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009464:	e07a      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009466:	4b38      	ldr	r3, [pc, #224]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800946e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009472:	d107      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fe0b 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009482:	e340      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009488:	e33d      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800948a:	4b2f      	ldr	r3, [pc, #188]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009496:	d107      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009498:	f107 0318 	add.w	r3, r7, #24
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fb51 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a6:	e32e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e32b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ae:	4b26      	ldr	r3, [pc, #152]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ba:	d107      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fc93 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ca:	e31c      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e319      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d10c      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80094e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d109      	bne.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094ee:	4b16      	ldr	r3, [pc, #88]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	08db      	lsrs	r3, r3, #3
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	4a14      	ldr	r2, [pc, #80]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80094fa:	fa22 f303 	lsr.w	r3, r2, r3
 80094fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009500:	e01e      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009502:	4b11      	ldr	r3, [pc, #68]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800950e:	d106      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009516:	d102      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009518:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951c:	e010      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800951e:	4b0a      	ldr	r3, [pc, #40]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952a:	d106      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800952c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009532:	d102      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009534:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800953e:	e2e2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009540:	e2e1      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009542:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009546:	e2de      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009548:	58024400 	.word	0x58024400
 800954c:	03d09000 	.word	0x03d09000
 8009550:	003d0900 	.word	0x003d0900
 8009554:	017d7840 	.word	0x017d7840
 8009558:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009560:	e2d1      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009566:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800956a:	430b      	orrs	r3, r1
 800956c:	f040 809c 	bne.w	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009570:	4b93      	ldr	r3, [pc, #588]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009574:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009580:	d054      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009588:	f200 808b 	bhi.w	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800958c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009592:	f000 8083 	beq.w	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800959c:	f200 8081 	bhi.w	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095a6:	d02f      	beq.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ae:	d878      	bhi.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095bc:	d012      	beq.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80095be:	e070      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095c0:	4b7f      	ldr	r3, [pc, #508]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095cc:	d107      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 fd5e 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095dc:	e293      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e2:	e290      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095e4:	4b76      	ldr	r3, [pc, #472]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095f0:	d107      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095f2:	f107 0318 	add.w	r3, r7, #24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 faa4 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009600:	e281      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009606:	e27e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009608:	4b6d      	ldr	r3, [pc, #436]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009614:	d107      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fbe6 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009624:	e26f      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962a:	e26c      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800962c:	4b64      	ldr	r3, [pc, #400]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800962e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009630:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009636:	4b62      	ldr	r3, [pc, #392]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	2b04      	cmp	r3, #4
 8009640:	d10c      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009648:	4b5d      	ldr	r3, [pc, #372]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	08db      	lsrs	r3, r3, #3
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	4a5c      	ldr	r2, [pc, #368]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
 8009658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800965a:	e01e      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800965c:	4b58      	ldr	r3, [pc, #352]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009668:	d106      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800966a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800966c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009670:	d102      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009672:	4b55      	ldr	r3, [pc, #340]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009676:	e010      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009678:	4b51      	ldr	r3, [pc, #324]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009684:	d106      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800968c:	d102      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800968e:	4b4f      	ldr	r3, [pc, #316]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009692:	e002      	b.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009698:	e235      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800969a:	e234      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800969c:	4b4c      	ldr	r3, [pc, #304]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800969e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a0:	e231      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a6:	e22e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80096b0:	430b      	orrs	r3, r1
 80096b2:	f040 808f 	bne.w	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80096b6:	4b42      	ldr	r3, [pc, #264]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80096be:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096c6:	d06b      	beq.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096ce:	d874      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096d6:	d056      	beq.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096de:	d86c      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096e6:	d03b      	beq.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096ee:	d864      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f6:	d021      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fe:	d85c      	bhi.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800970c:	d004      	beq.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800970e:	e054      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009710:	f7fe fa0a 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 8009714:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009716:	e1f6      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009718:	4b29      	ldr	r3, [pc, #164]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009724:	d107      	bne.n	8009736 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009726:	f107 0318 	add.w	r3, r7, #24
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fa0a 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009734:	e1e7      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800973a:	e1e4      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800973c:	4b20      	ldr	r3, [pc, #128]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009748:	d107      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fb4c 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009758:	e1d5      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800975e:	e1d2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009760:	4b17      	ldr	r3, [pc, #92]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b04      	cmp	r3, #4
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800976c:	4b14      	ldr	r3, [pc, #80]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	08db      	lsrs	r3, r3, #3
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	4a13      	ldr	r2, [pc, #76]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009778:	fa22 f303 	lsr.w	r3, r2, r3
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800977e:	e1c2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009784:	e1bf      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009786:	4b0e      	ldr	r3, [pc, #56]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009792:	d102      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009794:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009798:	e1b5      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800979e:	e1b2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097a0:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ac:	d102      	bne.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80097ae:	4b07      	ldr	r3, [pc, #28]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b2:	e1a8      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b8:	e1a5      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097be:	e1a2      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	003d0900 	.word	0x003d0900
 80097cc:	017d7840 	.word	0x017d7840
 80097d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80097d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80097dc:	430b      	orrs	r3, r1
 80097de:	d173      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80097e0:	4b9c      	ldr	r3, [pc, #624]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80097e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80097e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f0:	d02f      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f8:	d863      	bhi.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009806:	d012      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009808:	e05b      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800980a:	4b92      	ldr	r3, [pc, #584]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009812:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009816:	d107      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009818:	f107 0318 	add.w	r3, r7, #24
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f991 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009826:	e16e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982c:	e16b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800982e:	4b89      	ldr	r3, [pc, #548]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800983a:	d107      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800983c:	f107 030c 	add.w	r3, r7, #12
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fad3 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984a:	e15c      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009850:	e159      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009852:	4b80      	ldr	r3, [pc, #512]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009856:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800985c:	4b7d      	ldr	r3, [pc, #500]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d10c      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986e:	4b79      	ldr	r3, [pc, #484]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	4a77      	ldr	r2, [pc, #476]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009880:	e01e      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009882:	4b74      	ldr	r3, [pc, #464]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800988e:	d106      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009896:	d102      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009898:	4b70      	ldr	r3, [pc, #448]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800989c:	e010      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800989e:	4b6d      	ldr	r3, [pc, #436]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098aa:	d106      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80098ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098b2:	d102      	bne.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098b4:	4b6a      	ldr	r3, [pc, #424]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b8:	e002      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098be:	e122      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098c0:	e121      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c6:	e11e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098cc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80098d0:	430b      	orrs	r3, r1
 80098d2:	d133      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80098d4:	4b5f      	ldr	r3, [pc, #380]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098ea:	d012      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80098ec:	e023      	b.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098ee:	4b59      	ldr	r3, [pc, #356]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098fa:	d107      	bne.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009900:	4618      	mov	r0, r3
 8009902:	f000 fbc7 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800990a:	e0fc      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009910:	e0f9      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009912:	4b50      	ldr	r3, [pc, #320]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800991a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800991e:	d107      	bne.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009920:	f107 0318 	add.w	r3, r7, #24
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f90d 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800992e:	e0ea      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e0e7      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993a:	e0e4      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800993c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009940:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009944:	430b      	orrs	r3, r1
 8009946:	f040 808d 	bne.w	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800994a:	4b42      	ldr	r3, [pc, #264]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009952:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800995a:	d06b      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009962:	d874      	bhi.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800996a:	d056      	beq.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800996c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009972:	d86c      	bhi.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800997a:	d03b      	beq.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009982:	d864      	bhi.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800998a:	d021      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009992:	d85c      	bhi.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800999a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099a0:	d004      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80099a2:	e054      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80099a4:	f000 f8b8 	bl	8009b18 <HAL_RCCEx_GetD3PCLK1Freq>
 80099a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099aa:	e0ac      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ac:	4b29      	ldr	r3, [pc, #164]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099b8:	d107      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ba:	f107 0318 	add.w	r3, r7, #24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f8c0 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c8:	e09d      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ce:	e09a      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d0:	4b20      	ldr	r3, [pc, #128]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fa02 	bl	8009dec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ec:	e08b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099f2:	e088      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099f4:	4b17      	ldr	r3, [pc, #92]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d109      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a00:	4b14      	ldr	r3, [pc, #80]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	08db      	lsrs	r3, r3, #3
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	4a13      	ldr	r2, [pc, #76]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a12:	e078      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a18:	e075      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a26:	d102      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009a28:	4b0c      	ldr	r3, [pc, #48]	@ (8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a2c:	e06b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a32:	e068      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a34:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a40:	d102      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009a42:	4b07      	ldr	r3, [pc, #28]	@ (8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a46:	e05e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4c:	e05b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a52:	e058      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a54:	58024400 	.word	0x58024400
 8009a58:	03d09000 	.word	0x03d09000
 8009a5c:	003d0900 	.word	0x003d0900
 8009a60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	d148      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a70:	4b27      	ldr	r3, [pc, #156]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a80:	d02a      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a88:	d838      	bhi.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d004      	beq.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a96:	d00d      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009a98:	e030      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa6:	d102      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aac:	e02b      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab2:	e028      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ab4:	4b16      	ldr	r3, [pc, #88]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ac0:	d107      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fae4 	bl	800a094 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ad0:	e019      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad6:	e016      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae6:	f107 0318 	add.w	r3, r7, #24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f82a 	bl	8009b44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af4:	e007      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e004      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e001      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3740      	adds	r7, #64	@ 0x40
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	58024400 	.word	0x58024400
 8009b14:	017d7840 	.word	0x017d7840

08009b18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b1c:	f7fd ffd4 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 8009b20:	4602      	mov	r2, r0
 8009b22:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	091b      	lsrs	r3, r3, #4
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	4904      	ldr	r1, [pc, #16]	@ (8009b40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b2e:	5ccb      	ldrb	r3, [r1, r3]
 8009b30:	f003 031f 	and.w	r3, r3, #31
 8009b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	08010d9c 	.word	0x08010d9c

08009b44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b089      	sub	sp, #36	@ 0x24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b56:	4b9f      	ldr	r3, [pc, #636]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5a:	0b1b      	lsrs	r3, r3, #12
 8009b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b62:	4b9c      	ldr	r3, [pc, #624]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b66:	091b      	lsrs	r3, r3, #4
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b6e:	4b99      	ldr	r3, [pc, #612]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8111 	beq.w	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	f000 8083 	beq.w	8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f200 80a1 	bhi.w	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d056      	beq.n	8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bae:	e099      	b.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb0:	4b88      	ldr	r3, [pc, #544]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0320 	and.w	r3, r3, #32
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d02d      	beq.n	8009c18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bbc:	4b85      	ldr	r3, [pc, #532]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	08db      	lsrs	r3, r3, #3
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	4a84      	ldr	r2, [pc, #528]	@ (8009dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be6:	4b7b      	ldr	r3, [pc, #492]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c16:	e087      	b.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009de0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c5a:	e065      	b.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6e:	4b59      	ldr	r3, [pc, #356]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c9e:	e043      	b.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b48      	ldr	r3, [pc, #288]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ce2:	e021      	b.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009de4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b37      	ldr	r3, [pc, #220]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ddc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d28:	4b2a      	ldr	r3, [pc, #168]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	0a5b      	lsrs	r3, r3, #9
 8009d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4e:	ee17 2a90 	vmov	r2, s15
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d56:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5a:	0c1b      	lsrs	r3, r3, #16
 8009d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d60:	ee07 3a90 	vmov	s15, r3
 8009d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7c:	ee17 2a90 	vmov	r2, s15
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d84:	4b13      	ldr	r3, [pc, #76]	@ (8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d88:	0e1b      	lsrs	r3, r3, #24
 8009d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009daa:	ee17 2a90 	vmov	r2, s15
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009db2:	e008      	b.n	8009dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	609a      	str	r2, [r3, #8]
}
 8009dc6:	bf00      	nop
 8009dc8:	3724      	adds	r7, #36	@ 0x24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	46000000 	.word	0x46000000
 8009de0:	4c742400 	.word	0x4c742400
 8009de4:	4a742400 	.word	0x4a742400
 8009de8:	4bbebc20 	.word	0x4bbebc20

08009dec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b089      	sub	sp, #36	@ 0x24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009df4:	4ba1      	ldr	r3, [pc, #644]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009dfe:	4b9f      	ldr	r3, [pc, #636]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e02:	0d1b      	lsrs	r3, r3, #20
 8009e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e0a:	4b9c      	ldr	r3, [pc, #624]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e16:	4b99      	ldr	r3, [pc, #612]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1a:	08db      	lsrs	r3, r3, #3
 8009e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	fb02 f303 	mul.w	r3, r2, r3
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 8111 	beq.w	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	f000 8083 	beq.w	8009f48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	f200 80a1 	bhi.w	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d056      	beq.n	8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e56:	e099      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e58:	4b88      	ldr	r3, [pc, #544]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d02d      	beq.n	8009ec0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e64:	4b85      	ldr	r3, [pc, #532]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	08db      	lsrs	r3, r3, #3
 8009e6a:	f003 0303 	and.w	r3, r3, #3
 8009e6e:	4a84      	ldr	r2, [pc, #528]	@ (800a080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e70:	fa22 f303 	lsr.w	r3, r2, r3
 8009e74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ebe:	e087      	b.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a088 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ee6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f02:	e065      	b.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f16:	4b59      	ldr	r3, [pc, #356]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f46:	e043      	b.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5a:	4b48      	ldr	r3, [pc, #288]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f8a:	e021      	b.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a08c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9e:	4b37      	ldr	r3, [pc, #220]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a084 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd4:	0a5b      	lsrs	r3, r3, #9
 8009fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff6:	ee17 2a90 	vmov	r2, s15
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a008:	ee07 3a90 	vmov	s15, r3
 800a00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a010:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a018:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a024:	ee17 2a90 	vmov	r2, s15
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a02c:	4b13      	ldr	r3, [pc, #76]	@ (800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a030:	0e1b      	lsrs	r3, r3, #24
 800a032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a046:	edd7 6a07 	vldr	s13, [r7, #28]
 800a04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a052:	ee17 2a90 	vmov	r2, s15
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a05a:	e008      	b.n	800a06e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	609a      	str	r2, [r3, #8]
}
 800a06e:	bf00      	nop
 800a070:	3724      	adds	r7, #36	@ 0x24
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	58024400 	.word	0x58024400
 800a080:	03d09000 	.word	0x03d09000
 800a084:	46000000 	.word	0x46000000
 800a088:	4c742400 	.word	0x4c742400
 800a08c:	4a742400 	.word	0x4a742400
 800a090:	4bbebc20 	.word	0x4bbebc20

0800a094 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a094:	b480      	push	{r7}
 800a096:	b089      	sub	sp, #36	@ 0x24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a09c:	4ba0      	ldr	r3, [pc, #640]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a0a6:	4b9e      	ldr	r3, [pc, #632]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0aa:	091b      	lsrs	r3, r3, #4
 800a0ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a0b2:	4b9b      	ldr	r3, [pc, #620]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a0bc:	4b98      	ldr	r3, [pc, #608]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c0:	08db      	lsrs	r3, r3, #3
 800a0c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	fb02 f303 	mul.w	r3, r2, r3
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 8111 	beq.w	800a302 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	f000 8083 	beq.w	800a1ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	f200 80a1 	bhi.w	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d056      	beq.n	800a1aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a0fc:	e099      	b.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0fe:	4b88      	ldr	r3, [pc, #544]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0320 	and.w	r3, r3, #32
 800a106:	2b00      	cmp	r3, #0
 800a108:	d02d      	beq.n	800a166 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a10a:	4b85      	ldr	r3, [pc, #532]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	08db      	lsrs	r3, r3, #3
 800a110:	f003 0303 	and.w	r3, r3, #3
 800a114:	4a83      	ldr	r2, [pc, #524]	@ (800a324 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a116:	fa22 f303 	lsr.w	r3, r2, r3
 800a11a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	ee07 3a90 	vmov	s15, r3
 800a12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a134:	4b7a      	ldr	r3, [pc, #488]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a144:	ed97 6a03 	vldr	s12, [r7, #12]
 800a148:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a160:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a164:	e087      	b.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a170:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a32c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a178:	4b69      	ldr	r3, [pc, #420]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a188:	ed97 6a03 	vldr	s12, [r7, #12]
 800a18c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1a8:	e065      	b.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a330 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1bc:	4b58      	ldr	r3, [pc, #352]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1ec:	e043      	b.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a334 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a200:	4b47      	ldr	r3, [pc, #284]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a210:	ed97 6a03 	vldr	s12, [r7, #12]
 800a214:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a22c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a230:	e021      	b.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a23c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a32c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a244:	4b36      	ldr	r3, [pc, #216]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a254:	ed97 6a03 	vldr	s12, [r7, #12]
 800a258:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a328 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a25c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a264:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a270:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a274:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a276:	4b2a      	ldr	r3, [pc, #168]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a27a:	0a5b      	lsrs	r3, r3, #9
 800a27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a280:	ee07 3a90 	vmov	s15, r3
 800a284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a290:	edd7 6a07 	vldr	s13, [r7, #28]
 800a294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a29c:	ee17 2a90 	vmov	r2, s15
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a2a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a8:	0c1b      	lsrs	r3, r3, #16
 800a2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ca:	ee17 2a90 	vmov	r2, s15
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d6:	0e1b      	lsrs	r3, r3, #24
 800a2d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2dc:	ee07 3a90 	vmov	s15, r3
 800a2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2f8:	ee17 2a90 	vmov	r2, s15
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a300:	e008      	b.n	800a314 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	609a      	str	r2, [r3, #8]
}
 800a314:	bf00      	nop
 800a316:	3724      	adds	r7, #36	@ 0x24
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	58024400 	.word	0x58024400
 800a324:	03d09000 	.word	0x03d09000
 800a328:	46000000 	.word	0x46000000
 800a32c:	4c742400 	.word	0x4c742400
 800a330:	4a742400 	.word	0x4a742400
 800a334:	4bbebc20 	.word	0x4bbebc20

0800a338 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a346:	4b53      	ldr	r3, [pc, #332]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d101      	bne.n	800a356 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e099      	b.n	800a48a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a356:	4b4f      	ldr	r3, [pc, #316]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a4e      	ldr	r2, [pc, #312]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a362:	f7f6 fe35 	bl	8000fd0 <HAL_GetTick>
 800a366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a368:	e008      	b.n	800a37c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a36a:	f7f6 fe31 	bl	8000fd0 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	2b02      	cmp	r3, #2
 800a376:	d901      	bls.n	800a37c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e086      	b.n	800a48a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a37c:	4b45      	ldr	r3, [pc, #276]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1f0      	bne.n	800a36a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a388:	4b42      	ldr	r3, [pc, #264]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	031b      	lsls	r3, r3, #12
 800a396:	493f      	ldr	r1, [pc, #252]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	025b      	lsls	r3, r3, #9
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	041b      	lsls	r3, r3, #16
 800a3ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	061b      	lsls	r3, r3, #24
 800a3c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3cc:	4931      	ldr	r1, [pc, #196]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3d2:	4b30      	ldr	r3, [pc, #192]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	492d      	ldr	r1, [pc, #180]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e8:	f023 0220 	bic.w	r2, r3, #32
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	4928      	ldr	r1, [pc, #160]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3f6:	4b27      	ldr	r3, [pc, #156]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fa:	4a26      	ldr	r2, [pc, #152]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a3fc:	f023 0310 	bic.w	r3, r3, #16
 800a400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a402:	4b24      	ldr	r3, [pc, #144]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a404:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a406:	4b24      	ldr	r3, [pc, #144]	@ (800a498 <RCCEx_PLL2_Config+0x160>)
 800a408:	4013      	ands	r3, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	69d2      	ldr	r2, [r2, #28]
 800a40e:	00d2      	lsls	r2, r2, #3
 800a410:	4920      	ldr	r1, [pc, #128]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a412:	4313      	orrs	r3, r2
 800a414:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a416:	4b1f      	ldr	r3, [pc, #124]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41a:	4a1e      	ldr	r2, [pc, #120]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a41c:	f043 0310 	orr.w	r3, r3, #16
 800a420:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d106      	bne.n	800a436 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a428:	4b1a      	ldr	r3, [pc, #104]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42c:	4a19      	ldr	r2, [pc, #100]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a42e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a432:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a434:	e00f      	b.n	800a456 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d106      	bne.n	800a44a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a43c:	4b15      	ldr	r3, [pc, #84]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	4a14      	ldr	r2, [pc, #80]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a448:	e005      	b.n	800a456 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44e:	4a11      	ldr	r2, [pc, #68]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a454:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a456:	4b0f      	ldr	r3, [pc, #60]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a0e      	ldr	r2, [pc, #56]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a45c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a462:	f7f6 fdb5 	bl	8000fd0 <HAL_GetTick>
 800a466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a468:	e008      	b.n	800a47c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a46a:	f7f6 fdb1 	bl	8000fd0 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d901      	bls.n	800a47c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e006      	b.n	800a48a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a47c:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <RCCEx_PLL2_Config+0x15c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0f0      	beq.n	800a46a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	ffff0007 	.word	0xffff0007

0800a49c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4aa:	4b53      	ldr	r3, [pc, #332]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d101      	bne.n	800a4ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e099      	b.n	800a5ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a4e      	ldr	r2, [pc, #312]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4c6:	f7f6 fd83 	bl	8000fd0 <HAL_GetTick>
 800a4ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4cc:	e008      	b.n	800a4e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4ce:	f7f6 fd7f 	bl	8000fd0 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d901      	bls.n	800a4e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e086      	b.n	800a5ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4e0:	4b45      	ldr	r3, [pc, #276]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f0      	bne.n	800a4ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4ec:	4b42      	ldr	r3, [pc, #264]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	051b      	lsls	r3, r3, #20
 800a4fa:	493f      	ldr	r1, [pc, #252]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	3b01      	subs	r3, #1
 800a506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	3b01      	subs	r3, #1
 800a510:	025b      	lsls	r3, r3, #9
 800a512:	b29b      	uxth	r3, r3
 800a514:	431a      	orrs	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a522:	431a      	orrs	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	3b01      	subs	r3, #1
 800a52a:	061b      	lsls	r3, r3, #24
 800a52c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a530:	4931      	ldr	r1, [pc, #196]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a532:	4313      	orrs	r3, r2
 800a534:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a536:	4b30      	ldr	r3, [pc, #192]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	492d      	ldr	r1, [pc, #180]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a544:	4313      	orrs	r3, r2
 800a546:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a548:	4b2b      	ldr	r3, [pc, #172]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	4928      	ldr	r1, [pc, #160]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a556:	4313      	orrs	r3, r2
 800a558:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a55a:	4b27      	ldr	r3, [pc, #156]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55e:	4a26      	ldr	r2, [pc, #152]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a566:	4b24      	ldr	r3, [pc, #144]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a56a:	4b24      	ldr	r3, [pc, #144]	@ (800a5fc <RCCEx_PLL3_Config+0x160>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	69d2      	ldr	r2, [r2, #28]
 800a572:	00d2      	lsls	r2, r2, #3
 800a574:	4920      	ldr	r1, [pc, #128]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a576:	4313      	orrs	r3, r2
 800a578:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a57a:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57e:	4a1e      	ldr	r2, [pc, #120]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a584:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a58c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a590:	4a19      	ldr	r2, [pc, #100]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a592:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a598:	e00f      	b.n	800a5ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d106      	bne.n	800a5ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a5a0:	4b15      	ldr	r3, [pc, #84]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a4:	4a14      	ldr	r2, [pc, #80]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5ac:	e005      	b.n	800a5ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a5ae:	4b12      	ldr	r3, [pc, #72]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	4a11      	ldr	r2, [pc, #68]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5c6:	f7f6 fd03 	bl	8000fd0 <HAL_GetTick>
 800a5ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5cc:	e008      	b.n	800a5e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5ce:	f7f6 fcff 	bl	8000fd0 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d901      	bls.n	800a5e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e006      	b.n	800a5ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5e0:	4b05      	ldr	r3, [pc, #20]	@ (800a5f8 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0f0      	beq.n	800a5ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	58024400 	.word	0x58024400
 800a5fc:	ffff0007 	.word	0xffff0007

0800a600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e049      	b.n	800a6a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f841 	bl	800a6ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f000 f9e8 	bl	800aa14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d001      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e054      	b.n	800a786 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2202      	movs	r2, #2
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0201 	orr.w	r2, r2, #1
 800a6f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a26      	ldr	r2, [pc, #152]	@ (800a794 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d022      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a706:	d01d      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a22      	ldr	r2, [pc, #136]	@ (800a798 <HAL_TIM_Base_Start_IT+0xd4>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d018      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a21      	ldr	r2, [pc, #132]	@ (800a79c <HAL_TIM_Base_Start_IT+0xd8>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d013      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a1f      	ldr	r2, [pc, #124]	@ (800a7a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00e      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d009      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d004      	beq.n	800a744 <HAL_TIM_Base_Start_IT+0x80>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ac <HAL_TIM_Base_Start_IT+0xe8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d115      	bne.n	800a770 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689a      	ldr	r2, [r3, #8]
 800a74a:	4b19      	ldr	r3, [pc, #100]	@ (800a7b0 <HAL_TIM_Base_Start_IT+0xec>)
 800a74c:	4013      	ands	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b06      	cmp	r3, #6
 800a754:	d015      	beq.n	800a782 <HAL_TIM_Base_Start_IT+0xbe>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a75c:	d011      	beq.n	800a782 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0201 	orr.w	r2, r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a76e:	e008      	b.n	800a782 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f042 0201 	orr.w	r2, r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	e000      	b.n	800a784 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	40010000 	.word	0x40010000
 800a798:	40000400 	.word	0x40000400
 800a79c:	40000800 	.word	0x40000800
 800a7a0:	40000c00 	.word	0x40000c00
 800a7a4:	40010400 	.word	0x40010400
 800a7a8:	40001800 	.word	0x40001800
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	00010007 	.word	0x00010007

0800a7b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d020      	beq.n	800a818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01b      	beq.n	800a818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f06f 0202 	mvn.w	r2, #2
 800a7e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f8e9 	bl	800a9d6 <HAL_TIM_IC_CaptureCallback>
 800a804:	e005      	b.n	800a812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8db 	bl	800a9c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8ec 	bl	800a9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d020      	beq.n	800a864 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01b      	beq.n	800a864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f06f 0204 	mvn.w	r2, #4
 800a834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2202      	movs	r2, #2
 800a83a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f8c3 	bl	800a9d6 <HAL_TIM_IC_CaptureCallback>
 800a850:	e005      	b.n	800a85e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8b5 	bl	800a9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f8c6 	bl	800a9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f003 0308 	and.w	r3, r3, #8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d020      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f003 0308 	and.w	r3, r3, #8
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01b      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0208 	mvn.w	r2, #8
 800a880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2204      	movs	r2, #4
 800a886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f89d 	bl	800a9d6 <HAL_TIM_IC_CaptureCallback>
 800a89c:	e005      	b.n	800a8aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f88f 	bl	800a9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f8a0 	bl	800a9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f003 0310 	and.w	r3, r3, #16
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d020      	beq.n	800a8fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d01b      	beq.n	800a8fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0210 	mvn.w	r2, #16
 800a8cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f877 	bl	800a9d6 <HAL_TIM_IC_CaptureCallback>
 800a8e8:	e005      	b.n	800a8f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f869 	bl	800a9c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f87a 	bl	800a9ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00c      	beq.n	800a920 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d007      	beq.n	800a920 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0201 	mvn.w	r2, #1
 800a918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f6 f816 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00c      	beq.n	800a94e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f90d 	bl	800ab68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00c      	beq.n	800a972 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a96a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f905 	bl	800ab7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00c      	beq.n	800a996 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	d007      	beq.n	800a996 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a98e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f834 	bl	800a9fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00c      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0320 	and.w	r3, r3, #32
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d007      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f06f 0220 	mvn.w	r2, #32
 800a9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f8cd 	bl	800ab54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa06:	bf00      	nop
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
	...

0800aa14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a43      	ldr	r2, [pc, #268]	@ (800ab34 <TIM_Base_SetConfig+0x120>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d013      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa32:	d00f      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a40      	ldr	r2, [pc, #256]	@ (800ab38 <TIM_Base_SetConfig+0x124>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d00b      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab3c <TIM_Base_SetConfig+0x128>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d007      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a3e      	ldr	r2, [pc, #248]	@ (800ab40 <TIM_Base_SetConfig+0x12c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_Base_SetConfig+0x40>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a3d      	ldr	r2, [pc, #244]	@ (800ab44 <TIM_Base_SetConfig+0x130>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d108      	bne.n	800aa66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a32      	ldr	r2, [pc, #200]	@ (800ab34 <TIM_Base_SetConfig+0x120>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01f      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa74:	d01b      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a2f      	ldr	r2, [pc, #188]	@ (800ab38 <TIM_Base_SetConfig+0x124>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d017      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a2e      	ldr	r2, [pc, #184]	@ (800ab3c <TIM_Base_SetConfig+0x128>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d013      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a2d      	ldr	r2, [pc, #180]	@ (800ab40 <TIM_Base_SetConfig+0x12c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00f      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a2c      	ldr	r2, [pc, #176]	@ (800ab44 <TIM_Base_SetConfig+0x130>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00b      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a2b      	ldr	r2, [pc, #172]	@ (800ab48 <TIM_Base_SetConfig+0x134>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d007      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a2a      	ldr	r2, [pc, #168]	@ (800ab4c <TIM_Base_SetConfig+0x138>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d003      	beq.n	800aaae <TIM_Base_SetConfig+0x9a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a29      	ldr	r2, [pc, #164]	@ (800ab50 <TIM_Base_SetConfig+0x13c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d108      	bne.n	800aac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a14      	ldr	r2, [pc, #80]	@ (800ab34 <TIM_Base_SetConfig+0x120>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00f      	beq.n	800ab06 <TIM_Base_SetConfig+0xf2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a16      	ldr	r2, [pc, #88]	@ (800ab44 <TIM_Base_SetConfig+0x130>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d00b      	beq.n	800ab06 <TIM_Base_SetConfig+0xf2>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a15      	ldr	r2, [pc, #84]	@ (800ab48 <TIM_Base_SetConfig+0x134>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d007      	beq.n	800ab06 <TIM_Base_SetConfig+0xf2>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a14      	ldr	r2, [pc, #80]	@ (800ab4c <TIM_Base_SetConfig+0x138>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d003      	beq.n	800ab06 <TIM_Base_SetConfig+0xf2>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a13      	ldr	r2, [pc, #76]	@ (800ab50 <TIM_Base_SetConfig+0x13c>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d103      	bne.n	800ab0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	691a      	ldr	r2, [r3, #16]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f043 0204 	orr.w	r2, r3, #4
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	601a      	str	r2, [r3, #0]
}
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40000400 	.word	0x40000400
 800ab3c:	40000800 	.word	0x40000800
 800ab40:	40000c00 	.word	0x40000c00
 800ab44:	40010400 	.word	0x40010400
 800ab48:	40014000 	.word	0x40014000
 800ab4c:	40014400 	.word	0x40014400
 800ab50:	40014800 	.word	0x40014800

0800ab54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab90:	b084      	sub	sp, #16
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	f107 001c 	add.w	r0, r7, #28
 800ab9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aba2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d121      	bne.n	800abee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	4b2c      	ldr	r3, [pc, #176]	@ (800ac6c <USB_CoreInit+0xdc>)
 800abbc:	4013      	ands	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800abce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d105      	bne.n	800abe2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f001 fafa 	bl	800c1dc <USB_CoreReset>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e01b      	b.n	800ac26 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 faee 	bl	800c1dc <USB_CoreReset>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ac04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac18:	e005      	b.n	800ac26 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ac26:	7fbb      	ldrb	r3, [r7, #30]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d116      	bne.n	800ac5a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac70 <USB_CoreInit+0xe0>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f043 0206 	orr.w	r2, r3, #6
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f043 0220 	orr.w	r2, r3, #32
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac66:	b004      	add	sp, #16
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	ffbdffbf 	.word	0xffbdffbf
 800ac70:	03ee0000 	.word	0x03ee0000

0800ac74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d165      	bne.n	800ad54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4a41      	ldr	r2, [pc, #260]	@ (800ad90 <USB_SetTurnaroundTime+0x11c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d906      	bls.n	800ac9e <USB_SetTurnaroundTime+0x2a>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	4a40      	ldr	r2, [pc, #256]	@ (800ad94 <USB_SetTurnaroundTime+0x120>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d202      	bcs.n	800ac9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac98:	230f      	movs	r3, #15
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e062      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a3c      	ldr	r2, [pc, #240]	@ (800ad94 <USB_SetTurnaroundTime+0x120>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d306      	bcc.n	800acb4 <USB_SetTurnaroundTime+0x40>
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	4a3b      	ldr	r2, [pc, #236]	@ (800ad98 <USB_SetTurnaroundTime+0x124>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d202      	bcs.n	800acb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800acae:	230e      	movs	r3, #14
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	e057      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4a38      	ldr	r2, [pc, #224]	@ (800ad98 <USB_SetTurnaroundTime+0x124>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d306      	bcc.n	800acca <USB_SetTurnaroundTime+0x56>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	4a37      	ldr	r2, [pc, #220]	@ (800ad9c <USB_SetTurnaroundTime+0x128>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d202      	bcs.n	800acca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800acc4:	230d      	movs	r3, #13
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e04c      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4a33      	ldr	r2, [pc, #204]	@ (800ad9c <USB_SetTurnaroundTime+0x128>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d306      	bcc.n	800ace0 <USB_SetTurnaroundTime+0x6c>
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	4a32      	ldr	r2, [pc, #200]	@ (800ada0 <USB_SetTurnaroundTime+0x12c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d802      	bhi.n	800ace0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800acda:	230c      	movs	r3, #12
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	e041      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4a2f      	ldr	r2, [pc, #188]	@ (800ada0 <USB_SetTurnaroundTime+0x12c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d906      	bls.n	800acf6 <USB_SetTurnaroundTime+0x82>
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	4a2e      	ldr	r2, [pc, #184]	@ (800ada4 <USB_SetTurnaroundTime+0x130>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d802      	bhi.n	800acf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800acf0:	230b      	movs	r3, #11
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	e036      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4a2a      	ldr	r2, [pc, #168]	@ (800ada4 <USB_SetTurnaroundTime+0x130>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d906      	bls.n	800ad0c <USB_SetTurnaroundTime+0x98>
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	4a29      	ldr	r2, [pc, #164]	@ (800ada8 <USB_SetTurnaroundTime+0x134>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d802      	bhi.n	800ad0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ad06:	230a      	movs	r3, #10
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	e02b      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4a26      	ldr	r2, [pc, #152]	@ (800ada8 <USB_SetTurnaroundTime+0x134>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d906      	bls.n	800ad22 <USB_SetTurnaroundTime+0xae>
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4a25      	ldr	r2, [pc, #148]	@ (800adac <USB_SetTurnaroundTime+0x138>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d202      	bcs.n	800ad22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ad1c:	2309      	movs	r3, #9
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e020      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	4a21      	ldr	r2, [pc, #132]	@ (800adac <USB_SetTurnaroundTime+0x138>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d306      	bcc.n	800ad38 <USB_SetTurnaroundTime+0xc4>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	4a20      	ldr	r2, [pc, #128]	@ (800adb0 <USB_SetTurnaroundTime+0x13c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d802      	bhi.n	800ad38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ad32:	2308      	movs	r3, #8
 800ad34:	617b      	str	r3, [r7, #20]
 800ad36:	e015      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <USB_SetTurnaroundTime+0x13c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d906      	bls.n	800ad4e <USB_SetTurnaroundTime+0xda>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4a1c      	ldr	r2, [pc, #112]	@ (800adb4 <USB_SetTurnaroundTime+0x140>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d202      	bcs.n	800ad4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ad48:	2307      	movs	r3, #7
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	e00a      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ad4e:	2306      	movs	r3, #6
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	e007      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ad54:	79fb      	ldrb	r3, [r7, #7]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ad5a:	2309      	movs	r3, #9
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e001      	b.n	800ad64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad60:	2309      	movs	r3, #9
 800ad62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	68da      	ldr	r2, [r3, #12]
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	029b      	lsls	r3, r3, #10
 800ad78:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	371c      	adds	r7, #28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	00d8acbf 	.word	0x00d8acbf
 800ad94:	00e4e1c0 	.word	0x00e4e1c0
 800ad98:	00f42400 	.word	0x00f42400
 800ad9c:	01067380 	.word	0x01067380
 800ada0:	011a499f 	.word	0x011a499f
 800ada4:	01312cff 	.word	0x01312cff
 800ada8:	014ca43f 	.word	0x014ca43f
 800adac:	016e3600 	.word	0x016e3600
 800adb0:	01a6ab1f 	.word	0x01a6ab1f
 800adb4:	01e84800 	.word	0x01e84800

0800adb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f043 0201 	orr.w	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f023 0201 	bic.w	r2, r3, #1
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d115      	bne.n	800ae4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae2a:	200a      	movs	r0, #10
 800ae2c:	f7f6 f8dc 	bl	8000fe8 <HAL_Delay>
      ms += 10U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	330a      	adds	r3, #10
 800ae34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 f93f 	bl	800c0ba <USB_GetMode>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d01e      	beq.n	800ae80 <USB_SetCurrentMode+0x84>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae46:	d9f0      	bls.n	800ae2a <USB_SetCurrentMode+0x2e>
 800ae48:	e01a      	b.n	800ae80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae4a:	78fb      	ldrb	r3, [r7, #3]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d115      	bne.n	800ae7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae5c:	200a      	movs	r0, #10
 800ae5e:	f7f6 f8c3 	bl	8000fe8 <HAL_Delay>
      ms += 10U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	330a      	adds	r3, #10
 800ae66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 f926 	bl	800c0ba <USB_GetMode>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d005      	beq.n	800ae80 <USB_SetCurrentMode+0x84>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae78:	d9f0      	bls.n	800ae5c <USB_SetCurrentMode+0x60>
 800ae7a:	e001      	b.n	800ae80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e005      	b.n	800ae8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae84:	d101      	bne.n	800ae8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae94:	b084      	sub	sp, #16
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]
 800aeb2:	e009      	b.n	800aec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3340      	adds	r3, #64	@ 0x40
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3301      	adds	r3, #1
 800aec6:	613b      	str	r3, [r7, #16]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b0e      	cmp	r3, #14
 800aecc:	d9f2      	bls.n	800aeb4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aece:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d11c      	bne.n	800af10 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aee4:	f043 0302 	orr.w	r3, r3, #2
 800aee8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e005      	b.n	800af1c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af22:	461a      	mov	r2, r3
 800af24:	2300      	movs	r3, #0
 800af26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d10d      	bne.n	800af4c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800af38:	2100      	movs	r1, #0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f968 	bl	800b210 <USB_SetDevSpeed>
 800af40:	e008      	b.n	800af54 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800af42:	2101      	movs	r1, #1
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f963 	bl	800b210 <USB_SetDevSpeed>
 800af4a:	e003      	b.n	800af54 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800af4c:	2103      	movs	r1, #3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f95e 	bl	800b210 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af54:	2110      	movs	r1, #16
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f8fa 	bl	800b150 <USB_FlushTxFifo>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f924 	bl	800b1b4 <USB_FlushRxFifo>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af7c:	461a      	mov	r2, r3
 800af7e:	2300      	movs	r3, #0
 800af80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af88:	461a      	mov	r2, r3
 800af8a:	2300      	movs	r3, #0
 800af8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af94:	461a      	mov	r2, r3
 800af96:	2300      	movs	r3, #0
 800af98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af9a:	2300      	movs	r3, #0
 800af9c:	613b      	str	r3, [r7, #16]
 800af9e:	e043      	b.n	800b028 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afb6:	d118      	bne.n	800afea <USB_DevInit+0x156>
    {
      if (i == 0U)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10a      	bne.n	800afd4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afca:	461a      	mov	r2, r3
 800afcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	e013      	b.n	800affc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe0:	461a      	mov	r2, r3
 800afe2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	e008      	b.n	800affc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff6:	461a      	mov	r2, r3
 800aff8:	2300      	movs	r3, #0
 800affa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b008:	461a      	mov	r2, r3
 800b00a:	2300      	movs	r3, #0
 800b00c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01a:	461a      	mov	r2, r3
 800b01c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b020:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	3301      	adds	r3, #1
 800b026:	613b      	str	r3, [r7, #16]
 800b028:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b02c:	461a      	mov	r2, r3
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	4293      	cmp	r3, r2
 800b032:	d3b5      	bcc.n	800afa0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b034:	2300      	movs	r3, #0
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	e043      	b.n	800b0c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b04c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b050:	d118      	bne.n	800b084 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b064:	461a      	mov	r2, r3
 800b066:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	e013      	b.n	800b096 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07a:	461a      	mov	r2, r3
 800b07c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	e008      	b.n	800b096 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b090:	461a      	mov	r2, r3
 800b092:	2300      	movs	r3, #0
 800b094:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b0ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d3b5      	bcc.n	800b03a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b0ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b0f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	f043 0210 	orr.w	r2, r3, #16
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699a      	ldr	r2, [r3, #24]
 800b108:	4b0f      	ldr	r3, [pc, #60]	@ (800b148 <USB_DevInit+0x2b4>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b110:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	f043 0208 	orr.w	r2, r3, #8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b124:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d105      	bne.n	800b138 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	699a      	ldr	r2, [r3, #24]
 800b130:	4b06      	ldr	r3, [pc, #24]	@ (800b14c <USB_DevInit+0x2b8>)
 800b132:	4313      	orrs	r3, r2
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b138:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b144:	b004      	add	sp, #16
 800b146:	4770      	bx	lr
 800b148:	803c3800 	.word	0x803c3800
 800b14c:	40000004 	.word	0x40000004

0800b150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3301      	adds	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b16a:	d901      	bls.n	800b170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e01b      	b.n	800b1a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	daf2      	bge.n	800b15e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	019b      	lsls	r3, r3, #6
 800b180:	f043 0220 	orr.w	r2, r3, #32
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b194:	d901      	bls.n	800b19a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b196:	2303      	movs	r3, #3
 800b198:	e006      	b.n	800b1a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b20      	cmp	r3, #32
 800b1a4:	d0f0      	beq.n	800b188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1cc:	d901      	bls.n	800b1d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e018      	b.n	800b204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	daf2      	bge.n	800b1c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2210      	movs	r2, #16
 800b1e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1f0:	d901      	bls.n	800b1f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e006      	b.n	800b204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
 800b1fe:	2b10      	cmp	r3, #16
 800b200:	d0f0      	beq.n	800b1e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b230:	4313      	orrs	r3, r2
 800b232:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b242:	b480      	push	{r7}
 800b244:	b087      	sub	sp, #28
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f003 0306 	and.w	r3, r3, #6
 800b25a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d102      	bne.n	800b268 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b262:	2300      	movs	r3, #0
 800b264:	75fb      	strb	r3, [r7, #23]
 800b266:	e00a      	b.n	800b27e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d002      	beq.n	800b274 <USB_GetDevSpeed+0x32>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b06      	cmp	r3, #6
 800b272:	d102      	bne.n	800b27a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b274:	2302      	movs	r3, #2
 800b276:	75fb      	strb	r3, [r7, #23]
 800b278:	e001      	b.n	800b27e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b27a:	230f      	movs	r3, #15
 800b27c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	371c      	adds	r7, #28
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d139      	bne.n	800b31c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	68f9      	ldr	r1, [r7, #12]
 800b2c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d153      	bne.n	800b388 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	791b      	ldrb	r3, [r3, #4]
 800b2fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b2fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	059b      	lsls	r3, r3, #22
 800b302:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b304:	431a      	orrs	r2, r3
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	0159      	lsls	r1, r3, #5
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	440b      	add	r3, r1
 800b30e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b312:	4619      	mov	r1, r3
 800b314:	4b20      	ldr	r3, [pc, #128]	@ (800b398 <USB_ActivateEndpoint+0x10c>)
 800b316:	4313      	orrs	r3, r2
 800b318:	600b      	str	r3, [r1, #0]
 800b31a:	e035      	b.n	800b388 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	f003 030f 	and.w	r3, r3, #15
 800b32c:	2101      	movs	r1, #1
 800b32e:	fa01 f303 	lsl.w	r3, r1, r3
 800b332:	041b      	lsls	r3, r3, #16
 800b334:	68f9      	ldr	r1, [r7, #12]
 800b336:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b33a:	4313      	orrs	r3, r2
 800b33c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d119      	bne.n	800b388 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	791b      	ldrb	r3, [r3, #4]
 800b36e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b370:	430b      	orrs	r3, r1
 800b372:	431a      	orrs	r2, r3
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	0159      	lsls	r1, r3, #5
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	440b      	add	r3, r1
 800b37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b380:	4619      	mov	r1, r3
 800b382:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <USB_ActivateEndpoint+0x10c>)
 800b384:	4313      	orrs	r3, r2
 800b386:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	10008000 	.word	0x10008000

0800b39c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	785b      	ldrb	r3, [r3, #1]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d161      	bne.n	800b47c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3ce:	d11f      	bne.n	800b410 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b40a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b40e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	2101      	movs	r1, #1
 800b422:	fa01 f303 	lsl.w	r3, r1, r3
 800b426:	b29b      	uxth	r3, r3
 800b428:	43db      	mvns	r3, r3
 800b42a:	68f9      	ldr	r1, [r7, #12]
 800b42c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b430:	4013      	ands	r3, r2
 800b432:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b43a:	69da      	ldr	r2, [r3, #28]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	f003 030f 	and.w	r3, r3, #15
 800b444:	2101      	movs	r1, #1
 800b446:	fa01 f303 	lsl.w	r3, r1, r3
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	43db      	mvns	r3, r3
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b454:	4013      	ands	r3, r2
 800b456:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	0159      	lsls	r1, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	440b      	add	r3, r1
 800b46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b472:	4619      	mov	r1, r3
 800b474:	4b35      	ldr	r3, [pc, #212]	@ (800b54c <USB_DeactivateEndpoint+0x1b0>)
 800b476:	4013      	ands	r3, r2
 800b478:	600b      	str	r3, [r1, #0]
 800b47a:	e060      	b.n	800b53e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b48e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b492:	d11f      	bne.n	800b4d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	0151      	lsls	r1, r2, #5
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	440a      	add	r2, r1
 800b4aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f003 030f 	and.w	r3, r3, #15
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ea:	041b      	lsls	r3, r3, #16
 800b4ec:	43db      	mvns	r3, r3
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4fe:	69da      	ldr	r2, [r3, #28]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	2101      	movs	r1, #1
 800b50a:	fa01 f303 	lsl.w	r3, r1, r3
 800b50e:	041b      	lsls	r3, r3, #16
 800b510:	43db      	mvns	r3, r3
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b518:	4013      	ands	r3, r2
 800b51a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	0159      	lsls	r1, r3, #5
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	440b      	add	r3, r1
 800b532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b536:	4619      	mov	r1, r3
 800b538:	4b05      	ldr	r3, [pc, #20]	@ (800b550 <USB_DeactivateEndpoint+0x1b4>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	ec337800 	.word	0xec337800
 800b550:	eff37800 	.word	0xeff37800

0800b554 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08a      	sub	sp, #40	@ 0x28
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	2b01      	cmp	r3, #1
 800b572:	f040 8185 	bne.w	800b880 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d132      	bne.n	800b5e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	015a      	lsls	r2, r3, #5
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	4413      	add	r3, r2
 800b586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	0159      	lsls	r1, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	440b      	add	r3, r1
 800b594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b598:	4619      	mov	r1, r3
 800b59a:	4ba7      	ldr	r3, [pc, #668]	@ (800b838 <USB_EPStartXfer+0x2e4>)
 800b59c:	4013      	ands	r3, r2
 800b59e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	015a      	lsls	r2, r3, #5
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	0151      	lsls	r1, r2, #5
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	440a      	add	r2, r1
 800b5b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b5be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5cc:	691a      	ldr	r2, [r3, #16]
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	0159      	lsls	r1, r3, #5
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	440b      	add	r3, r1
 800b5d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4b97      	ldr	r3, [pc, #604]	@ (800b83c <USB_EPStartXfer+0x2e8>)
 800b5de:	4013      	ands	r3, r2
 800b5e0:	610b      	str	r3, [r1, #16]
 800b5e2:	e097      	b.n	800b714 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f0:	691a      	ldr	r2, [r3, #16]
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	0159      	lsls	r1, r3, #5
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	440b      	add	r3, r1
 800b5fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5fe:	4619      	mov	r1, r3
 800b600:	4b8e      	ldr	r3, [pc, #568]	@ (800b83c <USB_EPStartXfer+0x2e8>)
 800b602:	4013      	ands	r3, r2
 800b604:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	0159      	lsls	r1, r3, #5
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	440b      	add	r3, r1
 800b61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b620:	4619      	mov	r1, r3
 800b622:	4b85      	ldr	r3, [pc, #532]	@ (800b838 <USB_EPStartXfer+0x2e4>)
 800b624:	4013      	ands	r3, r2
 800b626:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d11a      	bne.n	800b664 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	691a      	ldr	r2, [r3, #16]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	429a      	cmp	r2, r3
 800b638:	d903      	bls.n	800b642 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	0151      	lsls	r1, r2, #5
 800b654:	69fa      	ldr	r2, [r7, #28]
 800b656:	440a      	add	r2, r1
 800b658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b65c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b660:	6113      	str	r3, [r2, #16]
 800b662:	e044      	b.n	800b6ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	4413      	add	r3, r2
 800b66e:	1e5a      	subs	r2, r3, #1
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	fbb2 f3f3 	udiv	r3, r2, r3
 800b678:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	8afb      	ldrh	r3, [r7, #22]
 800b68a:	04d9      	lsls	r1, r3, #19
 800b68c:	4b6c      	ldr	r3, [pc, #432]	@ (800b840 <USB_EPStartXfer+0x2ec>)
 800b68e:	400b      	ands	r3, r1
 800b690:	69b9      	ldr	r1, [r7, #24]
 800b692:	0148      	lsls	r0, r1, #5
 800b694:	69f9      	ldr	r1, [r7, #28]
 800b696:	4401      	add	r1, r0
 800b698:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b69c:	4313      	orrs	r3, r2
 800b69e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	791b      	ldrb	r3, [r3, #4]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d122      	bne.n	800b6ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b6c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d4:	691a      	ldr	r2, [r3, #16]
 800b6d6:	8afb      	ldrh	r3, [r7, #22]
 800b6d8:	075b      	lsls	r3, r3, #29
 800b6da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b6de:	69b9      	ldr	r1, [r7, #24]
 800b6e0:	0148      	lsls	r0, r1, #5
 800b6e2:	69f9      	ldr	r1, [r7, #28]
 800b6e4:	4401      	add	r1, r0
 800b6e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6fa:	691a      	ldr	r2, [r3, #16]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b704:	69b9      	ldr	r1, [r7, #24]
 800b706:	0148      	lsls	r0, r1, #5
 800b708:	69f9      	ldr	r1, [r7, #28]
 800b70a:	4401      	add	r1, r0
 800b70c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b710:	4313      	orrs	r3, r2
 800b712:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d14b      	bne.n	800b7b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72e:	461a      	mov	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	791b      	ldrb	r3, [r3, #4]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d128      	bne.n	800b790 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d110      	bne.n	800b770 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	0151      	lsls	r1, r2, #5
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	440a      	add	r2, r1
 800b764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b768:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	e00f      	b.n	800b790 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	440a      	add	r2, r1
 800b786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b78a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b78e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	e169      	b.n	800ba86 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	0151      	lsls	r1, r2, #5
 800b7c4:	69fa      	ldr	r2, [r7, #28]
 800b7c6:	440a      	add	r2, r1
 800b7c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	791b      	ldrb	r3, [r3, #4]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d015      	beq.n	800b806 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 8151 	beq.w	800ba86 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f003 030f 	and.w	r3, r3, #15
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fa:	69f9      	ldr	r1, [r7, #28]
 800b7fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b800:	4313      	orrs	r3, r2
 800b802:	634b      	str	r3, [r1, #52]	@ 0x34
 800b804:	e13f      	b.n	800ba86 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b812:	2b00      	cmp	r3, #0
 800b814:	d116      	bne.n	800b844 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	69fa      	ldr	r2, [r7, #28]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b830:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	e015      	b.n	800b864 <USB_EPStartXfer+0x310>
 800b838:	e007ffff 	.word	0xe007ffff
 800b83c:	fff80000 	.word	0xfff80000
 800b840:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	0151      	lsls	r1, r2, #5
 800b856:	69fa      	ldr	r2, [r7, #28]
 800b858:	440a      	add	r2, r1
 800b85a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b85e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b862:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	68d9      	ldr	r1, [r3, #12]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	781a      	ldrb	r2, [r3, #0]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	b298      	uxth	r0, r3
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	4603      	mov	r3, r0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f9b9 	bl	800bbf0 <USB_WritePacket>
 800b87e:	e102      	b.n	800ba86 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88c:	691a      	ldr	r2, [r3, #16]
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	0159      	lsls	r1, r3, #5
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	440b      	add	r3, r1
 800b896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89a:	4619      	mov	r1, r3
 800b89c:	4b7c      	ldr	r3, [pc, #496]	@ (800ba90 <USB_EPStartXfer+0x53c>)
 800b89e:	4013      	ands	r3, r2
 800b8a0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	0159      	lsls	r1, r3, #5
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	440b      	add	r3, r1
 800b8b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4b75      	ldr	r3, [pc, #468]	@ (800ba94 <USB_EPStartXfer+0x540>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d12f      	bne.n	800b92a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	0148      	lsls	r0, r1, #5
 800b8fc:	69f9      	ldr	r1, [r7, #28]
 800b8fe:	4401      	add	r1, r0
 800b900:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b904:	4313      	orrs	r3, r2
 800b906:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b926:	6113      	str	r3, [r2, #16]
 800b928:	e05f      	b.n	800b9ea <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d123      	bne.n	800b97a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b948:	69b9      	ldr	r1, [r7, #24]
 800b94a:	0148      	lsls	r0, r1, #5
 800b94c:	69f9      	ldr	r1, [r7, #28]
 800b94e:	4401      	add	r1, r0
 800b950:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b954:	4313      	orrs	r3, r2
 800b956:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	0151      	lsls	r1, r2, #5
 800b96a:	69fa      	ldr	r2, [r7, #28]
 800b96c:	440a      	add	r2, r1
 800b96e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b976:	6113      	str	r3, [r2, #16]
 800b978:	e037      	b.n	800b9ea <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	691a      	ldr	r2, [r3, #16]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	4413      	add	r3, r2
 800b984:	1e5a      	subs	r2, r3, #1
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b98e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	8afa      	ldrh	r2, [r7, #22]
 800b996:	fb03 f202 	mul.w	r2, r3, r2
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	015a      	lsls	r2, r3, #5
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	8afb      	ldrh	r3, [r7, #22]
 800b9ae:	04d9      	lsls	r1, r3, #19
 800b9b0:	4b39      	ldr	r3, [pc, #228]	@ (800ba98 <USB_EPStartXfer+0x544>)
 800b9b2:	400b      	ands	r3, r1
 800b9b4:	69b9      	ldr	r1, [r7, #24]
 800b9b6:	0148      	lsls	r0, r1, #5
 800b9b8:	69f9      	ldr	r1, [r7, #28]
 800b9ba:	4401      	add	r1, r0
 800b9bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d0:	691a      	ldr	r2, [r3, #16]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9da:	69b9      	ldr	r1, [r7, #24]
 800b9dc:	0148      	lsls	r0, r1, #5
 800b9de:	69f9      	ldr	r1, [r7, #28]
 800b9e0:	4401      	add	r1, r0
 800b9e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d10d      	bne.n	800ba0c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d009      	beq.n	800ba0c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	68d9      	ldr	r1, [r3, #12]
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba08:	460a      	mov	r2, r1
 800ba0a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d128      	bne.n	800ba66 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d110      	bne.n	800ba46 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	0151      	lsls	r1, r2, #5
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	440a      	add	r2, r1
 800ba3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	e00f      	b.n	800ba66 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba64:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	69fa      	ldr	r2, [r7, #28]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ba84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	fff80000 	.word	0xfff80000
 800ba94:	e007ffff 	.word	0xe007ffff
 800ba98:	1ff80000 	.word	0x1ff80000

0800ba9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d14a      	bne.n	800bb50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bad2:	f040 8086 	bne.w	800bbe2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	7812      	ldrb	r2, [r2, #0]
 800baea:	0151      	lsls	r1, r2, #5
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	440a      	add	r2, r1
 800baf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800baf4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800baf8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	015a      	lsls	r2, r3, #5
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	4413      	add	r3, r2
 800bb04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	7812      	ldrb	r2, [r2, #0]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d902      	bls.n	800bb34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	75fb      	strb	r3, [r7, #23]
          break;
 800bb32:	e056      	b.n	800bbe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb4c:	d0e7      	beq.n	800bb1e <USB_EPStopXfer+0x82>
 800bb4e:	e048      	b.n	800bbe2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb68:	d13b      	bne.n	800bbe2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	0151      	lsls	r1, r2, #5
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	440a      	add	r2, r1
 800bb84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	015a      	lsls	r2, r3, #5
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	7812      	ldrb	r2, [r2, #0]
 800bba2:	0151      	lsls	r1, r2, #5
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	440a      	add	r2, r1
 800bba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bbb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d902      	bls.n	800bbc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bbc6:	e00c      	b.n	800bbe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbe0:	d0e7      	beq.n	800bbb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	371c      	adds	r7, #28
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b089      	sub	sp, #36	@ 0x24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	460b      	mov	r3, r1
 800bc00:	71fb      	strb	r3, [r7, #7]
 800bc02:	4613      	mov	r3, r2
 800bc04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d123      	bne.n	800bc5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc16:	88bb      	ldrh	r3, [r7, #4]
 800bc18:	3303      	adds	r3, #3
 800bc1a:	089b      	lsrs	r3, r3, #2
 800bc1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	e018      	b.n	800bc56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc24:	79fb      	ldrb	r3, [r7, #7]
 800bc26:	031a      	lsls	r2, r3, #12
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc30:	461a      	mov	r2, r3
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	3301      	adds	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	3301      	adds	r3, #1
 800bc48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	3301      	adds	r3, #1
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d3e2      	bcc.n	800bc24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3724      	adds	r7, #36	@ 0x24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b08b      	sub	sp, #44	@ 0x2c
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	4613      	mov	r3, r2
 800bc78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc82:	88fb      	ldrh	r3, [r7, #6]
 800bc84:	089b      	lsrs	r3, r3, #2
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc8a:	88fb      	ldrh	r3, [r7, #6]
 800bc8c:	f003 0303 	and.w	r3, r3, #3
 800bc90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc92:	2300      	movs	r3, #0
 800bc94:	623b      	str	r3, [r7, #32]
 800bc96:	e014      	b.n	800bcc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	601a      	str	r2, [r3, #0]
    pDest++;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	3301      	adds	r3, #1
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	3301      	adds	r3, #1
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	3301      	adds	r3, #1
 800bcba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	623b      	str	r3, [r7, #32]
 800bcc2:	6a3a      	ldr	r2, [r7, #32]
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d3e6      	bcc.n	800bc98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bcca:	8bfb      	ldrh	r3, [r7, #30]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01e      	beq.n	800bd0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f107 0310 	add.w	r3, r7, #16
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	701a      	strb	r2, [r3, #0]
      i++;
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	623b      	str	r3, [r7, #32]
      pDest++;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	3301      	adds	r3, #1
 800bd00:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bd02:	8bfb      	ldrh	r3, [r7, #30]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd08:	8bfb      	ldrh	r3, [r7, #30]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1ea      	bne.n	800bce4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	372c      	adds	r7, #44	@ 0x2c
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	785b      	ldrb	r3, [r3, #1]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d12c      	bne.n	800bd92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	db12      	blt.n	800bd70 <USB_EPSetStall+0x54>
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00f      	beq.n	800bd70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	0151      	lsls	r1, r2, #5
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	440a      	add	r2, r1
 800bd66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	0151      	lsls	r1, r2, #5
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	440a      	add	r2, r1
 800bd86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	e02b      	b.n	800bdea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	db12      	blt.n	800bdca <USB_EPSetStall+0xae>
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00f      	beq.n	800bdca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	0151      	lsls	r1, r2, #5
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	440a      	add	r2, r1
 800bdc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bdc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	015a      	lsls	r2, r3, #5
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	0151      	lsls	r1, r2, #5
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	440a      	add	r2, r1
 800bde0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bde4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bde8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	785b      	ldrb	r3, [r3, #1]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d128      	bne.n	800be66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	0151      	lsls	r1, r2, #5
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	440a      	add	r2, r1
 800be2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	791b      	ldrb	r3, [r3, #4]
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d003      	beq.n	800be44 <USB_EPClearStall+0x4c>
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	791b      	ldrb	r3, [r3, #4]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d138      	bne.n	800beb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	015a      	lsls	r2, r3, #5
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	0151      	lsls	r1, r2, #5
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	440a      	add	r2, r1
 800be5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	e027      	b.n	800beb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	015a      	lsls	r2, r3, #5
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	0151      	lsls	r1, r2, #5
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	440a      	add	r2, r1
 800be7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	791b      	ldrb	r3, [r3, #4]
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d003      	beq.n	800be96 <USB_EPClearStall+0x9e>
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	791b      	ldrb	r3, [r3, #4]
 800be92:	2b02      	cmp	r3, #2
 800be94:	d10f      	bne.n	800beb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	0151      	lsls	r1, r2, #5
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	440a      	add	r2, r1
 800beac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800beb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bee2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bee6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	011b      	lsls	r3, r3, #4
 800bef4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bef8:	68f9      	ldr	r1, [r7, #12]
 800befa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800befe:	4313      	orrs	r3, r2
 800bf00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf3e:	f023 0302 	bic.w	r3, r3, #2
 800bf42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b085      	sub	sp, #20
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf6c:	f023 0303 	bic.w	r3, r3, #3
 800bf70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf80:	f043 0302 	orr.w	r3, r3, #2
 800bf84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	0c1b      	lsrs	r3, r3, #16
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	4013      	ands	r3, r2
 800c010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	b29b      	uxth	r3, r3
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c022:	b480      	push	{r7}
 800c024:	b085      	sub	sp, #20
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	015a      	lsls	r2, r3, #5
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	4013      	ands	r3, r2
 800c04e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c050:	68bb      	ldr	r3, [r7, #8]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c05e:	b480      	push	{r7}
 800c060:	b087      	sub	sp, #28
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c080:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c082:	78fb      	ldrb	r3, [r7, #3]
 800c084:	f003 030f 	and.w	r3, r3, #15
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	fa22 f303 	lsr.w	r3, r2, r3
 800c08e:	01db      	lsls	r3, r3, #7
 800c090:	b2db      	uxtb	r3, r3
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c098:	78fb      	ldrb	r3, [r7, #3]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	371c      	adds	r7, #28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	f003 0301 	and.w	r3, r3, #1
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4b09      	ldr	r3, [pc, #36]	@ (800c11c <USB_ActivateSetup+0x44>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c10c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	fffff800 	.word	0xfffff800

0800c120 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	460b      	mov	r3, r1
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	333c      	adds	r3, #60	@ 0x3c
 800c136:	3304      	adds	r3, #4
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	4a26      	ldr	r2, [pc, #152]	@ (800c1d8 <USB_EP0_OutStart+0xb8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d90a      	bls.n	800c15a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c154:	d101      	bne.n	800c15a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e037      	b.n	800c1ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c160:	461a      	mov	r2, r3
 800c162:	2300      	movs	r3, #0
 800c164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c174:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c188:	f043 0318 	orr.w	r3, r3, #24
 800c18c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c19c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c1a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1a2:	7afb      	ldrb	r3, [r7, #11]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d10f      	bne.n	800c1c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c1c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	371c      	adds	r7, #28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	4f54300a 	.word	0x4f54300a

0800c1dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c1f4:	d901      	bls.n	800c1fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e01b      	b.n	800c232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	daf2      	bge.n	800c1e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c202:	2300      	movs	r3, #0
 800c204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	f043 0201 	orr.w	r2, r3, #1
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c21e:	d901      	bls.n	800c224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e006      	b.n	800c232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d0f0      	beq.n	800c212 <USB_CoreReset+0x36>

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
	...

0800c240 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c24c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c250:	f002 fd6c 	bl	800ed2c <USBD_static_malloc>
 800c254:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d109      	bne.n	800c270 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	32b0      	adds	r2, #176	@ 0xb0
 800c266:	2100      	movs	r1, #0
 800c268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c26c:	2302      	movs	r3, #2
 800c26e:	e0d4      	b.n	800c41a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c270:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c274:	2100      	movs	r1, #0
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f003 fbca 	bl	800fa10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	32b0      	adds	r2, #176	@ 0xb0
 800c286:	68f9      	ldr	r1, [r7, #12]
 800c288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	32b0      	adds	r2, #176	@ 0xb0
 800c296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	7c1b      	ldrb	r3, [r3, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d138      	bne.n	800c31a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c2a8:	4b5e      	ldr	r3, [pc, #376]	@ (800c424 <USBD_CDC_Init+0x1e4>)
 800c2aa:	7819      	ldrb	r1, [r3, #0]
 800c2ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f002 fc17 	bl	800eae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c424 <USBD_CDC_Init+0x1e4>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	f003 020f 	and.w	r2, r3, #15
 800c2c0:	6879      	ldr	r1, [r7, #4]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	440b      	add	r3, r1
 800c2cc:	3324      	adds	r3, #36	@ 0x24
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c2d2:	4b55      	ldr	r3, [pc, #340]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c2d4:	7819      	ldrb	r1, [r3, #0]
 800c2d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2da:	2202      	movs	r2, #2
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 fc02 	bl	800eae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c2e2:	4b51      	ldr	r3, [pc, #324]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	f003 020f 	and.w	r2, r3, #15
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	440b      	add	r3, r1
 800c2f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c2fe:	4b4b      	ldr	r3, [pc, #300]	@ (800c42c <USBD_CDC_Init+0x1ec>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	f003 020f 	and.w	r2, r3, #15
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	3326      	adds	r3, #38	@ 0x26
 800c314:	2210      	movs	r2, #16
 800c316:	801a      	strh	r2, [r3, #0]
 800c318:	e035      	b.n	800c386 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c31a:	4b42      	ldr	r3, [pc, #264]	@ (800c424 <USBD_CDC_Init+0x1e4>)
 800c31c:	7819      	ldrb	r1, [r3, #0]
 800c31e:	2340      	movs	r3, #64	@ 0x40
 800c320:	2202      	movs	r2, #2
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f002 fbdf 	bl	800eae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c328:	4b3e      	ldr	r3, [pc, #248]	@ (800c424 <USBD_CDC_Init+0x1e4>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	f003 020f 	and.w	r2, r3, #15
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	4613      	mov	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	440b      	add	r3, r1
 800c33c:	3324      	adds	r3, #36	@ 0x24
 800c33e:	2201      	movs	r2, #1
 800c340:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c342:	4b39      	ldr	r3, [pc, #228]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c344:	7819      	ldrb	r1, [r3, #0]
 800c346:	2340      	movs	r3, #64	@ 0x40
 800c348:	2202      	movs	r2, #2
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f002 fbcb 	bl	800eae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c350:	4b35      	ldr	r3, [pc, #212]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	f003 020f 	and.w	r2, r3, #15
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	4613      	mov	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	440b      	add	r3, r1
 800c364:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c368:	2201      	movs	r2, #1
 800c36a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c36c:	4b2f      	ldr	r3, [pc, #188]	@ (800c42c <USBD_CDC_Init+0x1ec>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	f003 020f 	and.w	r2, r3, #15
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	3326      	adds	r3, #38	@ 0x26
 800c382:	2210      	movs	r2, #16
 800c384:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c386:	4b29      	ldr	r3, [pc, #164]	@ (800c42c <USBD_CDC_Init+0x1ec>)
 800c388:	7819      	ldrb	r1, [r3, #0]
 800c38a:	2308      	movs	r3, #8
 800c38c:	2203      	movs	r2, #3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f002 fba9 	bl	800eae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c394:	4b25      	ldr	r3, [pc, #148]	@ (800c42c <USBD_CDC_Init+0x1ec>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f003 020f 	and.w	r2, r3, #15
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3324      	adds	r3, #36	@ 0x24
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	33b0      	adds	r3, #176	@ 0xb0
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e018      	b.n	800c41a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7c1b      	ldrb	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c3f2:	7819      	ldrb	r1, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f002 fc60 	bl	800ecc4 <USBD_LL_PrepareReceive>
 800c404:	e008      	b.n	800c418 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c406:	4b08      	ldr	r3, [pc, #32]	@ (800c428 <USBD_CDC_Init+0x1e8>)
 800c408:	7819      	ldrb	r1, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c410:	2340      	movs	r3, #64	@ 0x40
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f002 fc56 	bl	800ecc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	24000097 	.word	0x24000097
 800c428:	24000098 	.word	0x24000098
 800c42c:	24000099 	.word	0x24000099

0800c430 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c43c:	4b3a      	ldr	r3, [pc, #232]	@ (800c528 <USBD_CDC_DeInit+0xf8>)
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f002 fb75 	bl	800eb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c448:	4b37      	ldr	r3, [pc, #220]	@ (800c528 <USBD_CDC_DeInit+0xf8>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	f003 020f 	and.w	r2, r3, #15
 800c450:	6879      	ldr	r1, [r7, #4]
 800c452:	4613      	mov	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	440b      	add	r3, r1
 800c45c:	3324      	adds	r3, #36	@ 0x24
 800c45e:	2200      	movs	r2, #0
 800c460:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c462:	4b32      	ldr	r3, [pc, #200]	@ (800c52c <USBD_CDC_DeInit+0xfc>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f002 fb62 	bl	800eb32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c46e:	4b2f      	ldr	r3, [pc, #188]	@ (800c52c <USBD_CDC_DeInit+0xfc>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	f003 020f 	and.w	r2, r3, #15
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	440b      	add	r3, r1
 800c482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c486:	2200      	movs	r2, #0
 800c488:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c48a:	4b29      	ldr	r3, [pc, #164]	@ (800c530 <USBD_CDC_DeInit+0x100>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f002 fb4e 	bl	800eb32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c496:	4b26      	ldr	r3, [pc, #152]	@ (800c530 <USBD_CDC_DeInit+0x100>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f003 020f 	and.w	r2, r3, #15
 800c49e:	6879      	ldr	r1, [r7, #4]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	3324      	adds	r3, #36	@ 0x24
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c4b0:	4b1f      	ldr	r3, [pc, #124]	@ (800c530 <USBD_CDC_DeInit+0x100>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f003 020f 	and.w	r2, r3, #15
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	3326      	adds	r3, #38	@ 0x26
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	32b0      	adds	r2, #176	@ 0xb0
 800c4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01f      	beq.n	800c51c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	33b0      	adds	r3, #176	@ 0xb0
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	32b0      	adds	r2, #176	@ 0xb0
 800c4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f002 fc22 	bl	800ed48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	32b0      	adds	r2, #176	@ 0xb0
 800c50e:	2100      	movs	r1, #0
 800c510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	24000097 	.word	0x24000097
 800c52c:	24000098 	.word	0x24000098
 800c530:	24000099 	.word	0x24000099

0800c534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	32b0      	adds	r2, #176	@ 0xb0
 800c548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c560:	2303      	movs	r3, #3
 800c562:	e0bf      	b.n	800c6e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d050      	beq.n	800c612 <USBD_CDC_Setup+0xde>
 800c570:	2b20      	cmp	r3, #32
 800c572:	f040 80af 	bne.w	800c6d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	88db      	ldrh	r3, [r3, #6]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d03a      	beq.n	800c5f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b25b      	sxtb	r3, r3
 800c584:	2b00      	cmp	r3, #0
 800c586:	da1b      	bge.n	800c5c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	33b0      	adds	r3, #176	@ 0xb0
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c59e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	88d2      	ldrh	r2, [r2, #6]
 800c5a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	88db      	ldrh	r3, [r3, #6]
 800c5aa:	2b07      	cmp	r3, #7
 800c5ac:	bf28      	it	cs
 800c5ae:	2307      	movcs	r3, #7
 800c5b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	89fa      	ldrh	r2, [r7, #14]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 fdbd 	bl	800e138 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c5be:	e090      	b.n	800c6e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	785a      	ldrb	r2, [r3, #1]
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	88db      	ldrh	r3, [r3, #6]
 800c5ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800c5d0:	d803      	bhi.n	800c5da <USBD_CDC_Setup+0xa6>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	88db      	ldrh	r3, [r3, #6]
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	e000      	b.n	800c5dc <USBD_CDC_Setup+0xa8>
 800c5da:	2240      	movs	r2, #64	@ 0x40
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c5e2:	6939      	ldr	r1, [r7, #16]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f001 fdcf 	bl	800e190 <USBD_CtlPrepareRx>
      break;
 800c5f2:	e076      	b.n	800c6e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	33b0      	adds	r3, #176	@ 0xb0
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	7850      	ldrb	r0, [r2, #1]
 800c60a:	2200      	movs	r2, #0
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	4798      	blx	r3
      break;
 800c610:	e067      	b.n	800c6e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	2b0b      	cmp	r3, #11
 800c618:	d851      	bhi.n	800c6be <USBD_CDC_Setup+0x18a>
 800c61a:	a201      	add	r2, pc, #4	@ (adr r2, 800c620 <USBD_CDC_Setup+0xec>)
 800c61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c620:	0800c651 	.word	0x0800c651
 800c624:	0800c6cd 	.word	0x0800c6cd
 800c628:	0800c6bf 	.word	0x0800c6bf
 800c62c:	0800c6bf 	.word	0x0800c6bf
 800c630:	0800c6bf 	.word	0x0800c6bf
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c6bf 	.word	0x0800c6bf
 800c63c:	0800c6bf 	.word	0x0800c6bf
 800c640:	0800c6bf 	.word	0x0800c6bf
 800c644:	0800c6bf 	.word	0x0800c6bf
 800c648:	0800c67b 	.word	0x0800c67b
 800c64c:	0800c6a5 	.word	0x0800c6a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d107      	bne.n	800c66c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c65c:	f107 030a 	add.w	r3, r7, #10
 800c660:	2202      	movs	r2, #2
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 fd67 	bl	800e138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c66a:	e032      	b.n	800c6d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 fce5 	bl	800e03e <USBD_CtlError>
            ret = USBD_FAIL;
 800c674:	2303      	movs	r3, #3
 800c676:	75fb      	strb	r3, [r7, #23]
          break;
 800c678:	e02b      	b.n	800c6d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b03      	cmp	r3, #3
 800c684:	d107      	bne.n	800c696 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c686:	f107 030d 	add.w	r3, r7, #13
 800c68a:	2201      	movs	r2, #1
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f001 fd52 	bl	800e138 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c694:	e01d      	b.n	800c6d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fcd0 	bl	800e03e <USBD_CtlError>
            ret = USBD_FAIL;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	75fb      	strb	r3, [r7, #23]
          break;
 800c6a2:	e016      	b.n	800c6d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d00f      	beq.n	800c6d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 fcc3 	bl	800e03e <USBD_CtlError>
            ret = USBD_FAIL;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c6bc:	e008      	b.n	800c6d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 fcbc 	bl	800e03e <USBD_CtlError>
          ret = USBD_FAIL;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800c6ca:	e002      	b.n	800c6d2 <USBD_CDC_Setup+0x19e>
          break;
 800c6cc:	bf00      	nop
 800c6ce:	e008      	b.n	800c6e2 <USBD_CDC_Setup+0x1ae>
          break;
 800c6d0:	bf00      	nop
      }
      break;
 800c6d2:	e006      	b.n	800c6e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 fcb1 	bl	800e03e <USBD_CtlError>
      ret = USBD_FAIL;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	75fb      	strb	r3, [r7, #23]
      break;
 800c6e0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	32b0      	adds	r2, #176	@ 0xb0
 800c70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c712:	2303      	movs	r3, #3
 800c714:	e065      	b.n	800c7e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	32b0      	adds	r2, #176	@ 0xb0
 800c720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c724:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c726:	78fb      	ldrb	r3, [r7, #3]
 800c728:	f003 020f 	and.w	r2, r3, #15
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	4613      	mov	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	440b      	add	r3, r1
 800c738:	3318      	adds	r3, #24
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d02f      	beq.n	800c7a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	f003 020f 	and.w	r2, r3, #15
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4613      	mov	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	440b      	add	r3, r1
 800c752:	3318      	adds	r3, #24
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	f003 010f 	and.w	r1, r3, #15
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	460b      	mov	r3, r1
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	440b      	add	r3, r1
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4403      	add	r3, r0
 800c768:	331c      	adds	r3, #28
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c770:	fb01 f303 	mul.w	r3, r1, r3
 800c774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c776:	2b00      	cmp	r3, #0
 800c778:	d112      	bne.n	800c7a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c77a:	78fb      	ldrb	r3, [r7, #3]
 800c77c:	f003 020f 	and.w	r2, r3, #15
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4613      	mov	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	3318      	adds	r3, #24
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c792:	78f9      	ldrb	r1, [r7, #3]
 800c794:	2300      	movs	r3, #0
 800c796:	2200      	movs	r2, #0
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f002 fa72 	bl	800ec82 <USBD_LL_Transmit>
 800c79e:	e01f      	b.n	800c7e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	33b0      	adds	r3, #176	@ 0xb0
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d010      	beq.n	800c7e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	33b0      	adds	r3, #176	@ 0xb0
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	32b0      	adds	r2, #176	@ 0xb0
 800c800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c804:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	32b0      	adds	r2, #176	@ 0xb0
 800c810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c818:	2303      	movs	r3, #3
 800c81a:	e01a      	b.n	800c852 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c81c:	78fb      	ldrb	r3, [r7, #3]
 800c81e:	4619      	mov	r1, r3
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f002 fa70 	bl	800ed06 <USBD_LL_GetRxDataSize>
 800c826:	4602      	mov	r2, r0
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	33b0      	adds	r3, #176	@ 0xb0
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c84c:	4611      	mov	r1, r2
 800c84e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	32b0      	adds	r2, #176	@ 0xb0
 800c86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c870:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c878:	2303      	movs	r3, #3
 800c87a:	e024      	b.n	800c8c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	33b0      	adds	r3, #176	@ 0xb0
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d019      	beq.n	800c8c4 <USBD_CDC_EP0_RxReady+0x6a>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c896:	2bff      	cmp	r3, #255	@ 0xff
 800c898:	d014      	beq.n	800c8c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	33b0      	adds	r3, #176	@ 0xb0
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c8b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c8ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	22ff      	movs	r2, #255	@ 0xff
 800c8c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
	...

0800c8d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c8d8:	2182      	movs	r1, #130	@ 0x82
 800c8da:	4818      	ldr	r0, [pc, #96]	@ (800c93c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8dc:	f000 fd4f 	bl	800d37e <USBD_GetEpDesc>
 800c8e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4815      	ldr	r0, [pc, #84]	@ (800c93c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8e6:	f000 fd4a 	bl	800d37e <USBD_GetEpDesc>
 800c8ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c8ec:	2181      	movs	r1, #129	@ 0x81
 800c8ee:	4813      	ldr	r0, [pc, #76]	@ (800c93c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8f0:	f000 fd45 	bl	800d37e <USBD_GetEpDesc>
 800c8f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2210      	movs	r2, #16
 800c900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c910:	711a      	strb	r2, [r3, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d006      	beq.n	800c92a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c924:	711a      	strb	r2, [r3, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2243      	movs	r2, #67	@ 0x43
 800c92e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c930:	4b02      	ldr	r3, [pc, #8]	@ (800c93c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c932:	4618      	mov	r0, r3
 800c934:	3718      	adds	r7, #24
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	24000054 	.word	0x24000054

0800c940 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c948:	2182      	movs	r1, #130	@ 0x82
 800c94a:	4818      	ldr	r0, [pc, #96]	@ (800c9ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c94c:	f000 fd17 	bl	800d37e <USBD_GetEpDesc>
 800c950:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c952:	2101      	movs	r1, #1
 800c954:	4815      	ldr	r0, [pc, #84]	@ (800c9ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c956:	f000 fd12 	bl	800d37e <USBD_GetEpDesc>
 800c95a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c95c:	2181      	movs	r1, #129	@ 0x81
 800c95e:	4813      	ldr	r0, [pc, #76]	@ (800c9ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c960:	f000 fd0d 	bl	800d37e <USBD_GetEpDesc>
 800c964:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2210      	movs	r2, #16
 800c970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d006      	beq.n	800c986 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	2200      	movs	r2, #0
 800c97c:	711a      	strb	r2, [r3, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f042 0202 	orr.w	r2, r2, #2
 800c984:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d006      	beq.n	800c99a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	711a      	strb	r2, [r3, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f042 0202 	orr.w	r2, r2, #2
 800c998:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2243      	movs	r2, #67	@ 0x43
 800c99e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c9a0:	4b02      	ldr	r3, [pc, #8]	@ (800c9ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	24000054 	.word	0x24000054

0800c9b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9b8:	2182      	movs	r1, #130	@ 0x82
 800c9ba:	4818      	ldr	r0, [pc, #96]	@ (800ca1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c9bc:	f000 fcdf 	bl	800d37e <USBD_GetEpDesc>
 800c9c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	4815      	ldr	r0, [pc, #84]	@ (800ca1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c9c6:	f000 fcda 	bl	800d37e <USBD_GetEpDesc>
 800c9ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9cc:	2181      	movs	r1, #129	@ 0x81
 800c9ce:	4813      	ldr	r0, [pc, #76]	@ (800ca1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c9d0:	f000 fcd5 	bl	800d37e <USBD_GetEpDesc>
 800c9d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2210      	movs	r2, #16
 800c9e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d006      	beq.n	800c9f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9f0:	711a      	strb	r2, [r3, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d006      	beq.n	800ca0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca04:	711a      	strb	r2, [r3, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2243      	movs	r2, #67	@ 0x43
 800ca0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca10:	4b02      	ldr	r3, [pc, #8]	@ (800ca1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24000054 	.word	0x24000054

0800ca20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	220a      	movs	r2, #10
 800ca2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ca2e:	4b03      	ldr	r3, [pc, #12]	@ (800ca3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	24000010 	.word	0x24000010

0800ca40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e009      	b.n	800ca68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	33b0      	adds	r3, #176	@ 0xb0
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b087      	sub	sp, #28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	32b0      	adds	r2, #176	@ 0xb0
 800ca8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e008      	b.n	800caac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	371c      	adds	r7, #28
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	32b0      	adds	r2, #176	@ 0xb0
 800cacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d101      	bne.n	800cadc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	e004      	b.n	800cae6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
	...

0800caf4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	32b0      	adds	r2, #176	@ 0xb0
 800cb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cb16:	2303      	movs	r3, #3
 800cb18:	e025      	b.n	800cb66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d11f      	bne.n	800cb64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cb2c:	4b10      	ldr	r3, [pc, #64]	@ (800cb70 <USBD_CDC_TransmitPacket+0x7c>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	f003 020f 	and.w	r2, r3, #15
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4403      	add	r3, r0
 800cb46:	3318      	adds	r3, #24
 800cb48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cb4a:	4b09      	ldr	r3, [pc, #36]	@ (800cb70 <USBD_CDC_TransmitPacket+0x7c>)
 800cb4c:	7819      	ldrb	r1, [r3, #0]
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f002 f891 	bl	800ec82 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	24000097 	.word	0x24000097

0800cb74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	32b0      	adds	r2, #176	@ 0xb0
 800cb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	32b0      	adds	r2, #176	@ 0xb0
 800cb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e018      	b.n	800cbd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	7c1b      	ldrb	r3, [r3, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cbdc <USBD_CDC_ReceivePacket+0x68>)
 800cbac:	7819      	ldrb	r1, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cbb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f002 f883 	bl	800ecc4 <USBD_LL_PrepareReceive>
 800cbbe:	e008      	b.n	800cbd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbc0:	4b06      	ldr	r3, [pc, #24]	@ (800cbdc <USBD_CDC_ReceivePacket+0x68>)
 800cbc2:	7819      	ldrb	r1, [r3, #0]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cbca:	2340      	movs	r3, #64	@ 0x40
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f002 f879 	bl	800ecc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	24000098 	.word	0x24000098

0800cbe0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	4613      	mov	r3, r2
 800cbec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e01f      	b.n	800cc38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	79fa      	ldrb	r2, [r7, #7]
 800cc2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f001 feef 	bl	800ea10 <USBD_LL_Init>
 800cc32:	4603      	mov	r3, r0
 800cc34:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cc36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cc54:	2303      	movs	r3, #3
 800cc56:	e025      	b.n	800cca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	32ae      	adds	r2, #174	@ 0xae
 800cc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00f      	beq.n	800cc94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	32ae      	adds	r2, #174	@ 0xae
 800cc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc84:	f107 020e 	add.w	r2, r7, #14
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4798      	blx	r3
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f001 fefb 	bl	800eab0 <USBD_LL_Start>
 800ccba:	4603      	mov	r3, r0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	460b      	mov	r3, r1
 800cce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	78fa      	ldrb	r2, [r7, #3]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	4798      	blx	r3
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	78fa      	ldrb	r2, [r7, #3]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f001 f936 	bl	800dfca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cd7a:	f003 031f 	and.w	r3, r3, #31
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d01a      	beq.n	800cdb8 <USBD_LL_SetupStage+0x72>
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d822      	bhi.n	800cdcc <USBD_LL_SetupStage+0x86>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d002      	beq.n	800cd90 <USBD_LL_SetupStage+0x4a>
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d00a      	beq.n	800cda4 <USBD_LL_SetupStage+0x5e>
 800cd8e:	e01d      	b.n	800cdcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fb63 	bl	800d464 <USBD_StdDevReq>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73fb      	strb	r3, [r7, #15]
      break;
 800cda2:	e020      	b.n	800cde6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fbcb 	bl	800d548 <USBD_StdItfReq>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb6:	e016      	b.n	800cde6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fc2d 	bl	800d620 <USBD_StdEPReq>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	73fb      	strb	r3, [r7, #15]
      break;
 800cdca:	e00c      	b.n	800cde6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cdd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f001 fec8 	bl	800eb70 <USBD_LL_StallEP>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
      break;
 800cde4:	bf00      	nop
  }

  return ret;
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ce02:	7afb      	ldrb	r3, [r7, #11]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d16e      	bne.n	800cee6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ce0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	f040 8098 	bne.w	800cf4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d913      	bls.n	800ce50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	1ad2      	subs	r2, r2, r3
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	bf28      	it	cs
 800ce42:	4613      	movcs	r3, r2
 800ce44:	461a      	mov	r2, r3
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f001 f9be 	bl	800e1ca <USBD_CtlContinueRx>
 800ce4e:	e07d      	b.n	800cf4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ce56:	f003 031f 	and.w	r3, r3, #31
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d014      	beq.n	800ce88 <USBD_LL_DataOutStage+0x98>
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d81d      	bhi.n	800ce9e <USBD_LL_DataOutStage+0xae>
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <USBD_LL_DataOutStage+0x7c>
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d003      	beq.n	800ce72 <USBD_LL_DataOutStage+0x82>
 800ce6a:	e018      	b.n	800ce9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	75bb      	strb	r3, [r7, #22]
            break;
 800ce70:	e018      	b.n	800cea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f000 fa64 	bl	800d34a <USBD_CoreFindIF>
 800ce82:	4603      	mov	r3, r0
 800ce84:	75bb      	strb	r3, [r7, #22]
            break;
 800ce86:	e00d      	b.n	800cea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	4619      	mov	r1, r3
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 fa66 	bl	800d364 <USBD_CoreFindEP>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75bb      	strb	r3, [r7, #22]
            break;
 800ce9c:	e002      	b.n	800cea4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	75bb      	strb	r3, [r7, #22]
            break;
 800cea2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cea4:	7dbb      	ldrb	r3, [r7, #22]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d119      	bne.n	800cede <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d113      	bne.n	800cede <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ceb6:	7dba      	ldrb	r2, [r7, #22]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	32ae      	adds	r2, #174	@ 0xae
 800cebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00b      	beq.n	800cede <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cec6:	7dba      	ldrb	r2, [r7, #22]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cece:	7dba      	ldrb	r2, [r7, #22]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	32ae      	adds	r2, #174	@ 0xae
 800ced4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f001 f984 	bl	800e1ec <USBD_CtlSendStatus>
 800cee4:	e032      	b.n	800cf4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	4619      	mov	r1, r3
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 fa37 	bl	800d364 <USBD_CoreFindEP>
 800cef6:	4603      	mov	r3, r0
 800cef8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cefa:	7dbb      	ldrb	r3, [r7, #22]
 800cefc:	2bff      	cmp	r3, #255	@ 0xff
 800cefe:	d025      	beq.n	800cf4c <USBD_LL_DataOutStage+0x15c>
 800cf00:	7dbb      	ldrb	r3, [r7, #22]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d122      	bne.n	800cf4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d117      	bne.n	800cf42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cf12:	7dba      	ldrb	r2, [r7, #22]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	32ae      	adds	r2, #174	@ 0xae
 800cf18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00f      	beq.n	800cf42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cf22:	7dba      	ldrb	r2, [r7, #22]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cf2a:	7dba      	ldrb	r2, [r7, #22]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	32ae      	adds	r2, #174	@ 0xae
 800cf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	7afa      	ldrb	r2, [r7, #11]
 800cf38:	4611      	mov	r1, r2
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	4798      	blx	r3
 800cf3e:	4603      	mov	r3, r0
 800cf40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cf42:	7dfb      	ldrb	r3, [r7, #23]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
 800cf4a:	e000      	b.n	800cf4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b086      	sub	sp, #24
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	607a      	str	r2, [r7, #4]
 800cf62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cf64:	7afb      	ldrb	r3, [r7, #11]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d16f      	bne.n	800d04a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3314      	adds	r3, #20
 800cf6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d15a      	bne.n	800d030 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	689a      	ldr	r2, [r3, #8]
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d914      	bls.n	800cfb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	689a      	ldr	r2, [r3, #8]
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	1ad2      	subs	r2, r2, r3
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f001 f8e6 	bl	800e16e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f001 fe8b 	bl	800ecc4 <USBD_LL_PrepareReceive>
 800cfae:	e03f      	b.n	800d030 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	68da      	ldr	r2, [r3, #12]
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d11c      	bne.n	800cff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d316      	bcc.n	800cff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d20f      	bcs.n	800cff6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2100      	movs	r1, #0
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f001 f8c7 	bl	800e16e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2200      	movs	r2, #0
 800cfec:	2100      	movs	r1, #0
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f001 fe68 	bl	800ecc4 <USBD_LL_PrepareReceive>
 800cff4:	e01c      	b.n	800d030 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	2b03      	cmp	r3, #3
 800d000:	d10f      	bne.n	800d022 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d022:	2180      	movs	r1, #128	@ 0x80
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f001 fda3 	bl	800eb70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f001 f8f1 	bl	800e212 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d03a      	beq.n	800d0b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff fe42 	bl	800ccc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d048:	e032      	b.n	800d0b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d04a:	7afb      	ldrb	r3, [r7, #11]
 800d04c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d050:	b2db      	uxtb	r3, r3
 800d052:	4619      	mov	r1, r3
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f985 	bl	800d364 <USBD_CoreFindEP>
 800d05a:	4603      	mov	r3, r0
 800d05c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	2bff      	cmp	r3, #255	@ 0xff
 800d062:	d025      	beq.n	800d0b0 <USBD_LL_DataInStage+0x15a>
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d122      	bne.n	800d0b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b03      	cmp	r3, #3
 800d074:	d11c      	bne.n	800d0b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d076:	7dfa      	ldrb	r2, [r7, #23]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	32ae      	adds	r2, #174	@ 0xae
 800d07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d014      	beq.n	800d0b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d086:	7dfa      	ldrb	r2, [r7, #23]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d08e:	7dfa      	ldrb	r2, [r7, #23]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	32ae      	adds	r2, #174	@ 0xae
 800d094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	7afa      	ldrb	r2, [r7, #11]
 800d09c:	4611      	mov	r1, r2
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	4798      	blx	r3
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d0a6:	7dbb      	ldrb	r3, [r7, #22]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d0ac:	7dbb      	ldrb	r3, [r7, #22]
 800d0ae:	e000      	b.n	800d0b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d014      	beq.n	800d120 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00e      	beq.n	800d120 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	6852      	ldr	r2, [r2, #4]
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	4611      	mov	r1, r2
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	4798      	blx	r3
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d11c:	2303      	movs	r3, #3
 800d11e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d120:	2340      	movs	r3, #64	@ 0x40
 800d122:	2200      	movs	r2, #0
 800d124:	2100      	movs	r1, #0
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 fcdd 	bl	800eae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2240      	movs	r2, #64	@ 0x40
 800d138:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d13c:	2340      	movs	r3, #64	@ 0x40
 800d13e:	2200      	movs	r2, #0
 800d140:	2180      	movs	r1, #128	@ 0x80
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 fccf 	bl	800eae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2240      	movs	r2, #64	@ 0x40
 800d152:	621a      	str	r2, [r3, #32]

  return ret;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d15e:	b480      	push	{r7}
 800d160:	b083      	sub	sp, #12
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	78fa      	ldrb	r2, [r7, #3]
 800d16e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d006      	beq.n	800d1a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2204      	movs	r2, #4
 800d1a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	d106      	bne.n	800d1d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	370c      	adds	r7, #12
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	d110      	bne.n	800d21c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d20a:	69db      	ldr	r3, [r3, #28]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b082      	sub	sp, #8
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	460b      	mov	r3, r1
 800d230:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	32ae      	adds	r2, #174	@ 0xae
 800d23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d244:	2303      	movs	r3, #3
 800d246:	e01c      	b.n	800d282 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b03      	cmp	r3, #3
 800d252:	d115      	bne.n	800d280 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	32ae      	adds	r2, #174	@ 0xae
 800d25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d262:	6a1b      	ldr	r3, [r3, #32]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00b      	beq.n	800d280 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	32ae      	adds	r2, #174	@ 0xae
 800d272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	78fa      	ldrb	r2, [r7, #3]
 800d27a:	4611      	mov	r1, r2
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	460b      	mov	r3, r1
 800d294:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	32ae      	adds	r2, #174	@ 0xae
 800d2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e01c      	b.n	800d2e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b03      	cmp	r3, #3
 800d2b6:	d115      	bne.n	800d2e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	32ae      	adds	r2, #174	@ 0xae
 800d2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00b      	beq.n	800d2e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	32ae      	adds	r2, #174	@ 0xae
 800d2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2dc:	78fa      	ldrb	r2, [r7, #3]
 800d2de:	4611      	mov	r1, r2
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00e      	beq.n	800d340 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6852      	ldr	r2, [r2, #4]
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	4611      	mov	r1, r2
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	4798      	blx	r3
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d33c:	2303      	movs	r3, #3
 800d33e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d340:	7bfb      	ldrb	r3, [r7, #15]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d34a:	b480      	push	{r7}
 800d34c:	b083      	sub	sp, #12
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d356:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d370:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b086      	sub	sp, #24
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d392:	2300      	movs	r3, #0
 800d394:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	885b      	ldrh	r3, [r3, #2]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	7812      	ldrb	r2, [r2, #0]
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d91f      	bls.n	800d3e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d3aa:	e013      	b.n	800d3d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d3ac:	f107 030a 	add.w	r3, r7, #10
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6978      	ldr	r0, [r7, #20]
 800d3b4:	f000 f81b 	bl	800d3ee <USBD_GetNextDesc>
 800d3b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	785b      	ldrb	r3, [r3, #1]
 800d3be:	2b05      	cmp	r3, #5
 800d3c0:	d108      	bne.n	800d3d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	789b      	ldrb	r3, [r3, #2]
 800d3ca:	78fa      	ldrb	r2, [r7, #3]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d008      	beq.n	800d3e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	885b      	ldrh	r3, [r3, #2]
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	897b      	ldrh	r3, [r7, #10]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d8e5      	bhi.n	800d3ac <USBD_GetEpDesc+0x2e>
 800d3e0:	e000      	b.n	800d3e4 <USBD_GetEpDesc+0x66>
          break;
 800d3e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d3e4:	693b      	ldr	r3, [r7, #16]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	7812      	ldrb	r2, [r2, #0]
 800d404:	4413      	add	r3, r2
 800d406:	b29a      	uxth	r2, r3
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d418:	68fb      	ldr	r3, [r7, #12]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d426:	b480      	push	{r7}
 800d428:	b087      	sub	sp, #28
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	3301      	adds	r3, #1
 800d43c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d444:	8a3b      	ldrh	r3, [r7, #16]
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	b21a      	sxth	r2, r3
 800d44a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d44e:	4313      	orrs	r3, r2
 800d450:	b21b      	sxth	r3, r3
 800d452:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d454:	89fb      	ldrh	r3, [r7, #14]
}
 800d456:	4618      	mov	r0, r3
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d47a:	2b40      	cmp	r3, #64	@ 0x40
 800d47c:	d005      	beq.n	800d48a <USBD_StdDevReq+0x26>
 800d47e:	2b40      	cmp	r3, #64	@ 0x40
 800d480:	d857      	bhi.n	800d532 <USBD_StdDevReq+0xce>
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00f      	beq.n	800d4a6 <USBD_StdDevReq+0x42>
 800d486:	2b20      	cmp	r3, #32
 800d488:	d153      	bne.n	800d532 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	32ae      	adds	r2, #174	@ 0xae
 800d494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	4798      	blx	r3
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4a4:	e04a      	b.n	800d53c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	785b      	ldrb	r3, [r3, #1]
 800d4aa:	2b09      	cmp	r3, #9
 800d4ac:	d83b      	bhi.n	800d526 <USBD_StdDevReq+0xc2>
 800d4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b4 <USBD_StdDevReq+0x50>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d509 	.word	0x0800d509
 800d4b8:	0800d51d 	.word	0x0800d51d
 800d4bc:	0800d527 	.word	0x0800d527
 800d4c0:	0800d513 	.word	0x0800d513
 800d4c4:	0800d527 	.word	0x0800d527
 800d4c8:	0800d4e7 	.word	0x0800d4e7
 800d4cc:	0800d4dd 	.word	0x0800d4dd
 800d4d0:	0800d527 	.word	0x0800d527
 800d4d4:	0800d4ff 	.word	0x0800d4ff
 800d4d8:	0800d4f1 	.word	0x0800d4f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fa3c 	bl	800d95c <USBD_GetDescriptor>
          break;
 800d4e4:	e024      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d4e6:	6839      	ldr	r1, [r7, #0]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fbcb 	bl	800dc84 <USBD_SetAddress>
          break;
 800d4ee:	e01f      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 fc0a 	bl	800dd0c <USBD_SetConfig>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d4fc:	e018      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fcad 	bl	800de60 <USBD_GetConfig>
          break;
 800d506:	e013      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fcde 	bl	800decc <USBD_GetStatus>
          break;
 800d510:	e00e      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fd0d 	bl	800df34 <USBD_SetFeature>
          break;
 800d51a:	e009      	b.n	800d530 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fd31 	bl	800df86 <USBD_ClrFeature>
          break;
 800d524:	e004      	b.n	800d530 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fd88 	bl	800e03e <USBD_CtlError>
          break;
 800d52e:	bf00      	nop
      }
      break;
 800d530:	e004      	b.n	800d53c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d532:	6839      	ldr	r1, [r7, #0]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fd82 	bl	800e03e <USBD_CtlError>
      break;
 800d53a:	bf00      	nop
  }

  return ret;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop

0800d548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d55e:	2b40      	cmp	r3, #64	@ 0x40
 800d560:	d005      	beq.n	800d56e <USBD_StdItfReq+0x26>
 800d562:	2b40      	cmp	r3, #64	@ 0x40
 800d564:	d852      	bhi.n	800d60c <USBD_StdItfReq+0xc4>
 800d566:	2b00      	cmp	r3, #0
 800d568:	d001      	beq.n	800d56e <USBD_StdItfReq+0x26>
 800d56a:	2b20      	cmp	r3, #32
 800d56c:	d14e      	bne.n	800d60c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d574:	b2db      	uxtb	r3, r3
 800d576:	3b01      	subs	r3, #1
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d840      	bhi.n	800d5fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	889b      	ldrh	r3, [r3, #4]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b01      	cmp	r3, #1
 800d584:	d836      	bhi.n	800d5f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	889b      	ldrh	r3, [r3, #4]
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fedb 	bl	800d34a <USBD_CoreFindIF>
 800d594:	4603      	mov	r3, r0
 800d596:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d598:	7bbb      	ldrb	r3, [r7, #14]
 800d59a:	2bff      	cmp	r3, #255	@ 0xff
 800d59c:	d01d      	beq.n	800d5da <USBD_StdItfReq+0x92>
 800d59e:	7bbb      	ldrb	r3, [r7, #14]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d11a      	bne.n	800d5da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d5a4:	7bba      	ldrb	r2, [r7, #14]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	32ae      	adds	r2, #174	@ 0xae
 800d5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00f      	beq.n	800d5d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d5b4:	7bba      	ldrb	r2, [r7, #14]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d5bc:	7bba      	ldrb	r2, [r7, #14]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	32ae      	adds	r2, #174	@ 0xae
 800d5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d5d2:	e004      	b.n	800d5de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d5d8:	e001      	b.n	800d5de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	88db      	ldrh	r3, [r3, #6]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d110      	bne.n	800d608 <USBD_StdItfReq+0xc0>
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10d      	bne.n	800d608 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fdfd 	bl	800e1ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d5f2:	e009      	b.n	800d608 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fd21 	bl	800e03e <USBD_CtlError>
          break;
 800d5fc:	e004      	b.n	800d608 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fd1c 	bl	800e03e <USBD_CtlError>
          break;
 800d606:	e000      	b.n	800d60a <USBD_StdItfReq+0xc2>
          break;
 800d608:	bf00      	nop
      }
      break;
 800d60a:	e004      	b.n	800d616 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d60c:	6839      	ldr	r1, [r7, #0]
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fd15 	bl	800e03e <USBD_CtlError>
      break;
 800d614:	bf00      	nop
  }

  return ret;
 800d616:	7bfb      	ldrb	r3, [r7, #15]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	889b      	ldrh	r3, [r3, #4]
 800d632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d63c:	2b40      	cmp	r3, #64	@ 0x40
 800d63e:	d007      	beq.n	800d650 <USBD_StdEPReq+0x30>
 800d640:	2b40      	cmp	r3, #64	@ 0x40
 800d642:	f200 817f 	bhi.w	800d944 <USBD_StdEPReq+0x324>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d02a      	beq.n	800d6a0 <USBD_StdEPReq+0x80>
 800d64a:	2b20      	cmp	r3, #32
 800d64c:	f040 817a 	bne.w	800d944 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff fe85 	bl	800d364 <USBD_CoreFindEP>
 800d65a:	4603      	mov	r3, r0
 800d65c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d65e:	7b7b      	ldrb	r3, [r7, #13]
 800d660:	2bff      	cmp	r3, #255	@ 0xff
 800d662:	f000 8174 	beq.w	800d94e <USBD_StdEPReq+0x32e>
 800d666:	7b7b      	ldrb	r3, [r7, #13]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f040 8170 	bne.w	800d94e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d66e:	7b7a      	ldrb	r2, [r7, #13]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d676:	7b7a      	ldrb	r2, [r7, #13]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	32ae      	adds	r2, #174	@ 0xae
 800d67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 8163 	beq.w	800d94e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d688:	7b7a      	ldrb	r2, [r7, #13]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	32ae      	adds	r2, #174	@ 0xae
 800d68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	6839      	ldr	r1, [r7, #0]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	4798      	blx	r3
 800d69a:	4603      	mov	r3, r0
 800d69c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d69e:	e156      	b.n	800d94e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	785b      	ldrb	r3, [r3, #1]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d008      	beq.n	800d6ba <USBD_StdEPReq+0x9a>
 800d6a8:	2b03      	cmp	r3, #3
 800d6aa:	f300 8145 	bgt.w	800d938 <USBD_StdEPReq+0x318>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 809b 	beq.w	800d7ea <USBD_StdEPReq+0x1ca>
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d03c      	beq.n	800d732 <USBD_StdEPReq+0x112>
 800d6b8:	e13e      	b.n	800d938 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d002      	beq.n	800d6cc <USBD_StdEPReq+0xac>
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d016      	beq.n	800d6f8 <USBD_StdEPReq+0xd8>
 800d6ca:	e02c      	b.n	800d726 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00d      	beq.n	800d6ee <USBD_StdEPReq+0xce>
 800d6d2:	7bbb      	ldrb	r3, [r7, #14]
 800d6d4:	2b80      	cmp	r3, #128	@ 0x80
 800d6d6:	d00a      	beq.n	800d6ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6d8:	7bbb      	ldrb	r3, [r7, #14]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f001 fa47 	bl	800eb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6e2:	2180      	movs	r1, #128	@ 0x80
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f001 fa43 	bl	800eb70 <USBD_LL_StallEP>
 800d6ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d6ec:	e020      	b.n	800d730 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fca4 	bl	800e03e <USBD_CtlError>
              break;
 800d6f6:	e01b      	b.n	800d730 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	885b      	ldrh	r3, [r3, #2]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10e      	bne.n	800d71e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00b      	beq.n	800d71e <USBD_StdEPReq+0xfe>
 800d706:	7bbb      	ldrb	r3, [r7, #14]
 800d708:	2b80      	cmp	r3, #128	@ 0x80
 800d70a:	d008      	beq.n	800d71e <USBD_StdEPReq+0xfe>
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	88db      	ldrh	r3, [r3, #6]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d104      	bne.n	800d71e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f001 fa29 	bl	800eb70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fd64 	bl	800e1ec <USBD_CtlSendStatus>

              break;
 800d724:	e004      	b.n	800d730 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fc88 	bl	800e03e <USBD_CtlError>
              break;
 800d72e:	bf00      	nop
          }
          break;
 800d730:	e107      	b.n	800d942 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d002      	beq.n	800d744 <USBD_StdEPReq+0x124>
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d016      	beq.n	800d770 <USBD_StdEPReq+0x150>
 800d742:	e04b      	b.n	800d7dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d744:	7bbb      	ldrb	r3, [r7, #14]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00d      	beq.n	800d766 <USBD_StdEPReq+0x146>
 800d74a:	7bbb      	ldrb	r3, [r7, #14]
 800d74c:	2b80      	cmp	r3, #128	@ 0x80
 800d74e:	d00a      	beq.n	800d766 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d750:	7bbb      	ldrb	r3, [r7, #14]
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f001 fa0b 	bl	800eb70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d75a:	2180      	movs	r1, #128	@ 0x80
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f001 fa07 	bl	800eb70 <USBD_LL_StallEP>
 800d762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d764:	e040      	b.n	800d7e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d766:	6839      	ldr	r1, [r7, #0]
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fc68 	bl	800e03e <USBD_CtlError>
              break;
 800d76e:	e03b      	b.n	800d7e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	885b      	ldrh	r3, [r3, #2]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d136      	bne.n	800d7e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d778:	7bbb      	ldrb	r3, [r7, #14]
 800d77a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d004      	beq.n	800d78c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d782:	7bbb      	ldrb	r3, [r7, #14]
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f001 fa11 	bl	800ebae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 fd2d 	bl	800e1ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fde4 	bl	800d364 <USBD_CoreFindEP>
 800d79c:	4603      	mov	r3, r0
 800d79e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7a0:	7b7b      	ldrb	r3, [r7, #13]
 800d7a2:	2bff      	cmp	r3, #255	@ 0xff
 800d7a4:	d01f      	beq.n	800d7e6 <USBD_StdEPReq+0x1c6>
 800d7a6:	7b7b      	ldrb	r3, [r7, #13]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d11c      	bne.n	800d7e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d7ac:	7b7a      	ldrb	r2, [r7, #13]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d7b4:	7b7a      	ldrb	r2, [r7, #13]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	32ae      	adds	r2, #174	@ 0xae
 800d7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d010      	beq.n	800d7e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d7c4:	7b7a      	ldrb	r2, [r7, #13]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	32ae      	adds	r2, #174	@ 0xae
 800d7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	4798      	blx	r3
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d7da:	e004      	b.n	800d7e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fc2d 	bl	800e03e <USBD_CtlError>
              break;
 800d7e4:	e000      	b.n	800d7e8 <USBD_StdEPReq+0x1c8>
              break;
 800d7e6:	bf00      	nop
          }
          break;
 800d7e8:	e0ab      	b.n	800d942 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d002      	beq.n	800d7fc <USBD_StdEPReq+0x1dc>
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d032      	beq.n	800d860 <USBD_StdEPReq+0x240>
 800d7fa:	e097      	b.n	800d92c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d007      	beq.n	800d812 <USBD_StdEPReq+0x1f2>
 800d802:	7bbb      	ldrb	r3, [r7, #14]
 800d804:	2b80      	cmp	r3, #128	@ 0x80
 800d806:	d004      	beq.n	800d812 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d808:	6839      	ldr	r1, [r7, #0]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fc17 	bl	800e03e <USBD_CtlError>
                break;
 800d810:	e091      	b.n	800d936 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d816:	2b00      	cmp	r3, #0
 800d818:	da0b      	bge.n	800d832 <USBD_StdEPReq+0x212>
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
 800d81c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d820:	4613      	mov	r3, r2
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4413      	add	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	3310      	adds	r3, #16
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	4413      	add	r3, r2
 800d82e:	3304      	adds	r3, #4
 800d830:	e00b      	b.n	800d84a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d838:	4613      	mov	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	4413      	add	r3, r2
 800d848:	3304      	adds	r3, #4
 800d84a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2202      	movs	r2, #2
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fc6d 	bl	800e138 <USBD_CtlSendData>
              break;
 800d85e:	e06a      	b.n	800d936 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d864:	2b00      	cmp	r3, #0
 800d866:	da11      	bge.n	800d88c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	f003 020f 	and.w	r2, r3, #15
 800d86e:	6879      	ldr	r1, [r7, #4]
 800d870:	4613      	mov	r3, r2
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	4413      	add	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	440b      	add	r3, r1
 800d87a:	3324      	adds	r3, #36	@ 0x24
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d117      	bne.n	800d8b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fbda 	bl	800e03e <USBD_CtlError>
                  break;
 800d88a:	e054      	b.n	800d936 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d88c:	7bbb      	ldrb	r3, [r7, #14]
 800d88e:	f003 020f 	and.w	r2, r3, #15
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	440b      	add	r3, r1
 800d89e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fbc7 	bl	800e03e <USBD_CtlError>
                  break;
 800d8b0:	e041      	b.n	800d936 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	da0b      	bge.n	800d8d2 <USBD_StdEPReq+0x2b2>
 800d8ba:	7bbb      	ldrb	r3, [r7, #14]
 800d8bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	3310      	adds	r3, #16
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	e00b      	b.n	800d8ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <USBD_StdEPReq+0x2d8>
 800d8f2:	7bbb      	ldrb	r3, [r7, #14]
 800d8f4:	2b80      	cmp	r3, #128	@ 0x80
 800d8f6:	d103      	bne.n	800d900 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	e00e      	b.n	800d91e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d900:	7bbb      	ldrb	r3, [r7, #14]
 800d902:	4619      	mov	r1, r3
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f001 f971 	bl	800ebec <USBD_LL_IsStallEP>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d003      	beq.n	800d918 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2201      	movs	r2, #1
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	e002      	b.n	800d91e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	2200      	movs	r2, #0
 800d91c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	2202      	movs	r2, #2
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fc07 	bl	800e138 <USBD_CtlSendData>
              break;
 800d92a:	e004      	b.n	800d936 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fb85 	bl	800e03e <USBD_CtlError>
              break;
 800d934:	bf00      	nop
          }
          break;
 800d936:	e004      	b.n	800d942 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fb7f 	bl	800e03e <USBD_CtlError>
          break;
 800d940:	bf00      	nop
      }
      break;
 800d942:	e005      	b.n	800d950 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d944:	6839      	ldr	r1, [r7, #0]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fb79 	bl	800e03e <USBD_CtlError>
      break;
 800d94c:	e000      	b.n	800d950 <USBD_StdEPReq+0x330>
      break;
 800d94e:	bf00      	nop
  }

  return ret;
 800d950:	7bfb      	ldrb	r3, [r7, #15]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
	...

0800d95c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d966:	2300      	movs	r3, #0
 800d968:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d96e:	2300      	movs	r3, #0
 800d970:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	885b      	ldrh	r3, [r3, #2]
 800d976:	0a1b      	lsrs	r3, r3, #8
 800d978:	b29b      	uxth	r3, r3
 800d97a:	3b01      	subs	r3, #1
 800d97c:	2b0e      	cmp	r3, #14
 800d97e:	f200 8152 	bhi.w	800dc26 <USBD_GetDescriptor+0x2ca>
 800d982:	a201      	add	r2, pc, #4	@ (adr r2, 800d988 <USBD_GetDescriptor+0x2c>)
 800d984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d988:	0800d9f9 	.word	0x0800d9f9
 800d98c:	0800da11 	.word	0x0800da11
 800d990:	0800da51 	.word	0x0800da51
 800d994:	0800dc27 	.word	0x0800dc27
 800d998:	0800dc27 	.word	0x0800dc27
 800d99c:	0800dbc7 	.word	0x0800dbc7
 800d9a0:	0800dbf3 	.word	0x0800dbf3
 800d9a4:	0800dc27 	.word	0x0800dc27
 800d9a8:	0800dc27 	.word	0x0800dc27
 800d9ac:	0800dc27 	.word	0x0800dc27
 800d9b0:	0800dc27 	.word	0x0800dc27
 800d9b4:	0800dc27 	.word	0x0800dc27
 800d9b8:	0800dc27 	.word	0x0800dc27
 800d9bc:	0800dc27 	.word	0x0800dc27
 800d9c0:	0800d9c5 	.word	0x0800d9c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9ca:	69db      	ldr	r3, [r3, #28]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00b      	beq.n	800d9e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9d6:	69db      	ldr	r3, [r3, #28]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	7c12      	ldrb	r2, [r2, #16]
 800d9dc:	f107 0108 	add.w	r1, r7, #8
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	4798      	blx	r3
 800d9e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9e6:	e126      	b.n	800dc36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fb27 	bl	800e03e <USBD_CtlError>
        err++;
 800d9f0:	7afb      	ldrb	r3, [r7, #11]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	72fb      	strb	r3, [r7, #11]
      break;
 800d9f6:	e11e      	b.n	800dc36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	7c12      	ldrb	r2, [r2, #16]
 800da04:	f107 0108 	add.w	r1, r7, #8
 800da08:	4610      	mov	r0, r2
 800da0a:	4798      	blx	r3
 800da0c:	60f8      	str	r0, [r7, #12]
      break;
 800da0e:	e112      	b.n	800dc36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7c1b      	ldrb	r3, [r3, #16]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10d      	bne.n	800da34 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da20:	f107 0208 	add.w	r2, r7, #8
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	3301      	adds	r3, #1
 800da2e:	2202      	movs	r2, #2
 800da30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800da32:	e100      	b.n	800dc36 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3c:	f107 0208 	add.w	r2, r7, #8
 800da40:	4610      	mov	r0, r2
 800da42:	4798      	blx	r3
 800da44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3301      	adds	r3, #1
 800da4a:	2202      	movs	r2, #2
 800da4c:	701a      	strb	r2, [r3, #0]
      break;
 800da4e:	e0f2      	b.n	800dc36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	885b      	ldrh	r3, [r3, #2]
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b05      	cmp	r3, #5
 800da58:	f200 80ac 	bhi.w	800dbb4 <USBD_GetDescriptor+0x258>
 800da5c:	a201      	add	r2, pc, #4	@ (adr r2, 800da64 <USBD_GetDescriptor+0x108>)
 800da5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da62:	bf00      	nop
 800da64:	0800da7d 	.word	0x0800da7d
 800da68:	0800dab1 	.word	0x0800dab1
 800da6c:	0800dae5 	.word	0x0800dae5
 800da70:	0800db19 	.word	0x0800db19
 800da74:	0800db4d 	.word	0x0800db4d
 800da78:	0800db81 	.word	0x0800db81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00b      	beq.n	800daa0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	7c12      	ldrb	r2, [r2, #16]
 800da94:	f107 0108 	add.w	r1, r7, #8
 800da98:	4610      	mov	r0, r2
 800da9a:	4798      	blx	r3
 800da9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da9e:	e091      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 facb 	bl	800e03e <USBD_CtlError>
            err++;
 800daa8:	7afb      	ldrb	r3, [r7, #11]
 800daaa:	3301      	adds	r3, #1
 800daac:	72fb      	strb	r3, [r7, #11]
          break;
 800daae:	e089      	b.n	800dbc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00b      	beq.n	800dad4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	7c12      	ldrb	r2, [r2, #16]
 800dac8:	f107 0108 	add.w	r1, r7, #8
 800dacc:	4610      	mov	r0, r2
 800dace:	4798      	blx	r3
 800dad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dad2:	e077      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 fab1 	bl	800e03e <USBD_CtlError>
            err++;
 800dadc:	7afb      	ldrb	r3, [r7, #11]
 800dade:	3301      	adds	r3, #1
 800dae0:	72fb      	strb	r3, [r7, #11]
          break;
 800dae2:	e06f      	b.n	800dbc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00b      	beq.n	800db08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	7c12      	ldrb	r2, [r2, #16]
 800dafc:	f107 0108 	add.w	r1, r7, #8
 800db00:	4610      	mov	r0, r2
 800db02:	4798      	blx	r3
 800db04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db06:	e05d      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db08:	6839      	ldr	r1, [r7, #0]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fa97 	bl	800e03e <USBD_CtlError>
            err++;
 800db10:	7afb      	ldrb	r3, [r7, #11]
 800db12:	3301      	adds	r3, #1
 800db14:	72fb      	strb	r3, [r7, #11]
          break;
 800db16:	e055      	b.n	800dbc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00b      	beq.n	800db3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	7c12      	ldrb	r2, [r2, #16]
 800db30:	f107 0108 	add.w	r1, r7, #8
 800db34:	4610      	mov	r0, r2
 800db36:	4798      	blx	r3
 800db38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db3a:	e043      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fa7d 	bl	800e03e <USBD_CtlError>
            err++;
 800db44:	7afb      	ldrb	r3, [r7, #11]
 800db46:	3301      	adds	r3, #1
 800db48:	72fb      	strb	r3, [r7, #11]
          break;
 800db4a:	e03b      	b.n	800dbc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db52:	695b      	ldr	r3, [r3, #20]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00b      	beq.n	800db70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	7c12      	ldrb	r2, [r2, #16]
 800db64:	f107 0108 	add.w	r1, r7, #8
 800db68:	4610      	mov	r0, r2
 800db6a:	4798      	blx	r3
 800db6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db6e:	e029      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fa63 	bl	800e03e <USBD_CtlError>
            err++;
 800db78:	7afb      	ldrb	r3, [r7, #11]
 800db7a:	3301      	adds	r3, #1
 800db7c:	72fb      	strb	r3, [r7, #11]
          break;
 800db7e:	e021      	b.n	800dbc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db86:	699b      	ldr	r3, [r3, #24]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00b      	beq.n	800dba4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	7c12      	ldrb	r2, [r2, #16]
 800db98:	f107 0108 	add.w	r1, r7, #8
 800db9c:	4610      	mov	r0, r2
 800db9e:	4798      	blx	r3
 800dba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dba2:	e00f      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fa49 	bl	800e03e <USBD_CtlError>
            err++;
 800dbac:	7afb      	ldrb	r3, [r7, #11]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	72fb      	strb	r3, [r7, #11]
          break;
 800dbb2:	e007      	b.n	800dbc4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fa41 	bl	800e03e <USBD_CtlError>
          err++;
 800dbbc:	7afb      	ldrb	r3, [r7, #11]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dbc2:	bf00      	nop
      }
      break;
 800dbc4:	e037      	b.n	800dc36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	7c1b      	ldrb	r3, [r3, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d109      	bne.n	800dbe2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd6:	f107 0208 	add.w	r2, r7, #8
 800dbda:	4610      	mov	r0, r2
 800dbdc:	4798      	blx	r3
 800dbde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dbe0:	e029      	b.n	800dc36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dbe2:	6839      	ldr	r1, [r7, #0]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fa2a 	bl	800e03e <USBD_CtlError>
        err++;
 800dbea:	7afb      	ldrb	r3, [r7, #11]
 800dbec:	3301      	adds	r3, #1
 800dbee:	72fb      	strb	r3, [r7, #11]
      break;
 800dbf0:	e021      	b.n	800dc36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7c1b      	ldrb	r3, [r3, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10d      	bne.n	800dc16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc02:	f107 0208 	add.w	r2, r7, #8
 800dc06:	4610      	mov	r0, r2
 800dc08:	4798      	blx	r3
 800dc0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	2207      	movs	r2, #7
 800dc12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc14:	e00f      	b.n	800dc36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fa10 	bl	800e03e <USBD_CtlError>
        err++;
 800dc1e:	7afb      	ldrb	r3, [r7, #11]
 800dc20:	3301      	adds	r3, #1
 800dc22:	72fb      	strb	r3, [r7, #11]
      break;
 800dc24:	e007      	b.n	800dc36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fa08 	bl	800e03e <USBD_CtlError>
      err++;
 800dc2e:	7afb      	ldrb	r3, [r7, #11]
 800dc30:	3301      	adds	r3, #1
 800dc32:	72fb      	strb	r3, [r7, #11]
      break;
 800dc34:	bf00      	nop
  }

  if (err != 0U)
 800dc36:	7afb      	ldrb	r3, [r7, #11]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d11e      	bne.n	800dc7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	88db      	ldrh	r3, [r3, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d016      	beq.n	800dc72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dc44:	893b      	ldrh	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00e      	beq.n	800dc68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	88da      	ldrh	r2, [r3, #6]
 800dc4e:	893b      	ldrh	r3, [r7, #8]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	bf28      	it	cs
 800dc54:	4613      	movcs	r3, r2
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dc5a:	893b      	ldrh	r3, [r7, #8]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	68f9      	ldr	r1, [r7, #12]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa69 	bl	800e138 <USBD_CtlSendData>
 800dc66:	e009      	b.n	800dc7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9e7 	bl	800e03e <USBD_CtlError>
 800dc70:	e004      	b.n	800dc7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 faba 	bl	800e1ec <USBD_CtlSendStatus>
 800dc78:	e000      	b.n	800dc7c <USBD_GetDescriptor+0x320>
    return;
 800dc7a:	bf00      	nop
  }
}
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop

0800dc84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	889b      	ldrh	r3, [r3, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d131      	bne.n	800dcfa <USBD_SetAddress+0x76>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	88db      	ldrh	r3, [r3, #6]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d12d      	bne.n	800dcfa <USBD_SetAddress+0x76>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	885b      	ldrh	r3, [r3, #2]
 800dca2:	2b7f      	cmp	r3, #127	@ 0x7f
 800dca4:	d829      	bhi.n	800dcfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	885b      	ldrh	r3, [r3, #2]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d104      	bne.n	800dcc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f9bc 	bl	800e03e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc6:	e01d      	b.n	800dd04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7bfa      	ldrb	r2, [r7, #15]
 800dccc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 ffb5 	bl	800ec44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fa86 	bl	800e1ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d004      	beq.n	800dcf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2202      	movs	r2, #2
 800dcea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcee:	e009      	b.n	800dd04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcf8:	e004      	b.n	800dd04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f99e 	bl	800e03e <USBD_CtlError>
  }
}
 800dd02:	bf00      	nop
 800dd04:	bf00      	nop
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	885b      	ldrh	r3, [r3, #2]
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	4b4e      	ldr	r3, [pc, #312]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd24:	4b4d      	ldr	r3, [pc, #308]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d905      	bls.n	800dd38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f985 	bl	800e03e <USBD_CtlError>
    return USBD_FAIL;
 800dd34:	2303      	movs	r3, #3
 800dd36:	e08c      	b.n	800de52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d002      	beq.n	800dd4a <USBD_SetConfig+0x3e>
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d029      	beq.n	800dd9c <USBD_SetConfig+0x90>
 800dd48:	e075      	b.n	800de36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dd4a:	4b44      	ldr	r3, [pc, #272]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d020      	beq.n	800dd94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dd52:	4b42      	ldr	r3, [pc, #264]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	461a      	mov	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd5c:	4b3f      	ldr	r3, [pc, #252]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7fe ffb9 	bl	800ccda <USBD_SetClassConfig>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d008      	beq.n	800dd84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f962 	bl	800e03e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dd82:	e065      	b.n	800de50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 fa31 	bl	800e1ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2203      	movs	r2, #3
 800dd8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dd92:	e05d      	b.n	800de50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fa29 	bl	800e1ec <USBD_CtlSendStatus>
      break;
 800dd9a:	e059      	b.n	800de50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dd9c:	4b2f      	ldr	r3, [pc, #188]	@ (800de5c <USBD_SetConfig+0x150>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d112      	bne.n	800ddca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ddac:	4b2b      	ldr	r3, [pc, #172]	@ (800de5c <USBD_SetConfig+0x150>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ddb6:	4b29      	ldr	r3, [pc, #164]	@ (800de5c <USBD_SetConfig+0x150>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7fe ffa8 	bl	800cd12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fa12 	bl	800e1ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ddc8:	e042      	b.n	800de50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ddca:	4b24      	ldr	r3, [pc, #144]	@ (800de5c <USBD_SetConfig+0x150>)
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d02a      	beq.n	800de2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fe ff96 	bl	800cd12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dde6:	4b1d      	ldr	r3, [pc, #116]	@ (800de5c <USBD_SetConfig+0x150>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddf0:	4b1a      	ldr	r3, [pc, #104]	@ (800de5c <USBD_SetConfig+0x150>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7fe ff6f 	bl	800ccda <USBD_SetClassConfig>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00f      	beq.n	800de26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f918 	bl	800e03e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7fe ff7b 	bl	800cd12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800de24:	e014      	b.n	800de50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f9e0 	bl	800e1ec <USBD_CtlSendStatus>
      break;
 800de2c:	e010      	b.n	800de50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f9dc 	bl	800e1ec <USBD_CtlSendStatus>
      break;
 800de34:	e00c      	b.n	800de50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f900 	bl	800e03e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de3e:	4b07      	ldr	r3, [pc, #28]	@ (800de5c <USBD_SetConfig+0x150>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f7fe ff64 	bl	800cd12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800de4a:	2303      	movs	r3, #3
 800de4c:	73fb      	strb	r3, [r7, #15]
      break;
 800de4e:	bf00      	nop
  }

  return ret;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	240002fc 	.word	0x240002fc

0800de60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	88db      	ldrh	r3, [r3, #6]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d004      	beq.n	800de7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f8e2 	bl	800e03e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800de7a:	e023      	b.n	800dec4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b02      	cmp	r3, #2
 800de86:	dc02      	bgt.n	800de8e <USBD_GetConfig+0x2e>
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dc03      	bgt.n	800de94 <USBD_GetConfig+0x34>
 800de8c:	e015      	b.n	800deba <USBD_GetConfig+0x5a>
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d00b      	beq.n	800deaa <USBD_GetConfig+0x4a>
 800de92:	e012      	b.n	800deba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3308      	adds	r3, #8
 800de9e:	2201      	movs	r2, #1
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f948 	bl	800e138 <USBD_CtlSendData>
        break;
 800dea8:	e00c      	b.n	800dec4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	3304      	adds	r3, #4
 800deae:	2201      	movs	r2, #1
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f940 	bl	800e138 <USBD_CtlSendData>
        break;
 800deb8:	e004      	b.n	800dec4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f8be 	bl	800e03e <USBD_CtlError>
        break;
 800dec2:	bf00      	nop
}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	3b01      	subs	r3, #1
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	d81e      	bhi.n	800df22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	88db      	ldrh	r3, [r3, #6]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d004      	beq.n	800def6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f8a5 	bl	800e03e <USBD_CtlError>
        break;
 800def4:	e01a      	b.n	800df2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2201      	movs	r2, #1
 800defa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800df02:	2b00      	cmp	r3, #0
 800df04:	d005      	beq.n	800df12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f043 0202 	orr.w	r2, r3, #2
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	330c      	adds	r3, #12
 800df16:	2202      	movs	r2, #2
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f90c 	bl	800e138 <USBD_CtlSendData>
      break;
 800df20:	e004      	b.n	800df2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f88a 	bl	800e03e <USBD_CtlError>
      break;
 800df2a:	bf00      	nop
  }
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d107      	bne.n	800df56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 f94c 	bl	800e1ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800df54:	e013      	b.n	800df7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	885b      	ldrh	r3, [r3, #2]
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d10b      	bne.n	800df76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	889b      	ldrh	r3, [r3, #4]
 800df62:	0a1b      	lsrs	r3, r3, #8
 800df64:	b29b      	uxth	r3, r3
 800df66:	b2da      	uxtb	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f93c 	bl	800e1ec <USBD_CtlSendStatus>
}
 800df74:	e003      	b.n	800df7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f860 	bl	800e03e <USBD_CtlError>
}
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df96:	b2db      	uxtb	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	2b02      	cmp	r3, #2
 800df9c:	d80b      	bhi.n	800dfb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	885b      	ldrh	r3, [r3, #2]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d10c      	bne.n	800dfc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f91c 	bl	800e1ec <USBD_CtlSendStatus>
      }
      break;
 800dfb4:	e004      	b.n	800dfc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 f840 	bl	800e03e <USBD_CtlError>
      break;
 800dfbe:	e000      	b.n	800dfc2 <USBD_ClrFeature+0x3c>
      break;
 800dfc0:	bf00      	nop
  }
}
 800dfc2:	bf00      	nop
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
 800dfd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	781a      	ldrb	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	781a      	ldrb	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3301      	adds	r3, #1
 800dff2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff fa16 	bl	800d426 <SWAPBYTE>
 800dffa:	4603      	mov	r3, r0
 800dffc:	461a      	mov	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3301      	adds	r3, #1
 800e006:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3301      	adds	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7ff fa09 	bl	800d426 <SWAPBYTE>
 800e014:	4603      	mov	r3, r0
 800e016:	461a      	mov	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3301      	adds	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3301      	adds	r3, #1
 800e026:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f7ff f9fc 	bl	800d426 <SWAPBYTE>
 800e02e:	4603      	mov	r3, r0
 800e030:	461a      	mov	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	80da      	strh	r2, [r3, #6]
}
 800e036:	bf00      	nop
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b082      	sub	sp, #8
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e048:	2180      	movs	r1, #128	@ 0x80
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fd90 	bl	800eb70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e050:	2100      	movs	r1, #0
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fd8c 	bl	800eb70 <USBD_LL_StallEP>
}
 800e058:	bf00      	nop
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e06c:	2300      	movs	r3, #0
 800e06e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d042      	beq.n	800e0fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e07a:	6938      	ldr	r0, [r7, #16]
 800e07c:	f000 f842 	bl	800e104 <USBD_GetLen>
 800e080:	4603      	mov	r3, r0
 800e082:	3301      	adds	r3, #1
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e08a:	d808      	bhi.n	800e09e <USBD_GetString+0x3e>
 800e08c:	6938      	ldr	r0, [r7, #16]
 800e08e:	f000 f839 	bl	800e104 <USBD_GetLen>
 800e092:	4603      	mov	r3, r0
 800e094:	3301      	adds	r3, #1
 800e096:	b29b      	uxth	r3, r3
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	e001      	b.n	800e0a2 <USBD_GetString+0x42>
 800e09e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	7812      	ldrb	r2, [r2, #0]
 800e0b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0b2:	7dfb      	ldrb	r3, [r7, #23]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e0b8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	4413      	add	r3, r2
 800e0be:	2203      	movs	r2, #3
 800e0c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0c2:	7dfb      	ldrb	r3, [r7, #23]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e0c8:	e013      	b.n	800e0f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e0ca:	7dfb      	ldrb	r3, [r7, #23]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	7812      	ldrb	r2, [r2, #0]
 800e0d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	613b      	str	r3, [r7, #16]
    idx++;
 800e0dc:	7dfb      	ldrb	r3, [r7, #23]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e0e2:	7dfb      	ldrb	r3, [r7, #23]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1e7      	bne.n	800e0ca <USBD_GetString+0x6a>
 800e0fa:	e000      	b.n	800e0fe <USBD_GetString+0x9e>
    return;
 800e0fc:	bf00      	nop
  }
}
 800e0fe:	3718      	adds	r7, #24
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e114:	e005      	b.n	800e122 <USBD_GetLen+0x1e>
  {
    len++;
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	3301      	adds	r3, #1
 800e11a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	3301      	adds	r3, #1
 800e120:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d1f5      	bne.n	800e116 <USBD_GetLen+0x12>
  }

  return len;
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2202      	movs	r2, #2
 800e148:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	2100      	movs	r1, #0
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f000 fd8f 	bl	800ec82 <USBD_LL_Transmit>

  return USBD_OK;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	60f8      	str	r0, [r7, #12]
 800e176:	60b9      	str	r1, [r7, #8]
 800e178:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	2100      	movs	r1, #0
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 fd7e 	bl	800ec82 <USBD_LL_Transmit>

  return USBD_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2203      	movs	r2, #3
 800e1a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 fd82 	bl	800ecc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	60f8      	str	r0, [r7, #12]
 800e1d2:	60b9      	str	r1, [r7, #8]
 800e1d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	2100      	movs	r1, #0
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f000 fd71 	bl	800ecc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2204      	movs	r2, #4
 800e1f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	2200      	movs	r2, #0
 800e200:	2100      	movs	r1, #0
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fd3d 	bl	800ec82 <USBD_LL_Transmit>

  return USBD_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2205      	movs	r2, #5
 800e21e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e222:	2300      	movs	r3, #0
 800e224:	2200      	movs	r2, #0
 800e226:	2100      	movs	r1, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fd4b 	bl	800ecc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e23c:	2200      	movs	r2, #0
 800e23e:	4913      	ldr	r1, [pc, #76]	@ (800e28c <MX_USB_DEVICE_Init+0x54>)
 800e240:	4813      	ldr	r0, [pc, #76]	@ (800e290 <MX_USB_DEVICE_Init+0x58>)
 800e242:	f7fe fccd 	bl	800cbe0 <USBD_Init>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e24c:	f7f2 fb90 	bl	8000970 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e250:	4910      	ldr	r1, [pc, #64]	@ (800e294 <MX_USB_DEVICE_Init+0x5c>)
 800e252:	480f      	ldr	r0, [pc, #60]	@ (800e290 <MX_USB_DEVICE_Init+0x58>)
 800e254:	f7fe fcf4 	bl	800cc40 <USBD_RegisterClass>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e25e:	f7f2 fb87 	bl	8000970 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e262:	490d      	ldr	r1, [pc, #52]	@ (800e298 <MX_USB_DEVICE_Init+0x60>)
 800e264:	480a      	ldr	r0, [pc, #40]	@ (800e290 <MX_USB_DEVICE_Init+0x58>)
 800e266:	f7fe fbeb 	bl	800ca40 <USBD_CDC_RegisterInterface>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e270:	f7f2 fb7e 	bl	8000970 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e274:	4806      	ldr	r0, [pc, #24]	@ (800e290 <MX_USB_DEVICE_Init+0x58>)
 800e276:	f7fe fd19 	bl	800ccac <USBD_Start>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e280:	f7f2 fb76 	bl	8000970 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e284:	f7f8 fbcc 	bl	8006a20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e288:	bf00      	nop
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	240000b8 	.word	0x240000b8
 800e290:	24000300 	.word	0x24000300
 800e294:	2400001c 	.word	0x2400001c
 800e298:	240000a4 	.word	0x240000a4

0800e29c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4905      	ldr	r1, [pc, #20]	@ (800e2b8 <CDC_Init_FS+0x1c>)
 800e2a4:	4805      	ldr	r0, [pc, #20]	@ (800e2bc <CDC_Init_FS+0x20>)
 800e2a6:	f7fe fbe5 	bl	800ca74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e2aa:	4905      	ldr	r1, [pc, #20]	@ (800e2c0 <CDC_Init_FS+0x24>)
 800e2ac:	4803      	ldr	r0, [pc, #12]	@ (800e2bc <CDC_Init_FS+0x20>)
 800e2ae:	f7fe fc03 	bl	800cab8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e2b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	24000ddc 	.word	0x24000ddc
 800e2bc:	24000300 	.word	0x24000300
 800e2c0:	240005dc 	.word	0x240005dc

0800e2c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e2c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	6039      	str	r1, [r7, #0]
 800e2de:	71fb      	strb	r3, [r7, #7]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	2b23      	cmp	r3, #35	@ 0x23
 800e2e8:	f200 8098 	bhi.w	800e41c <CDC_Control_FS+0x148>
 800e2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f4 <CDC_Control_FS+0x20>)
 800e2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f2:	bf00      	nop
 800e2f4:	0800e41d 	.word	0x0800e41d
 800e2f8:	0800e41d 	.word	0x0800e41d
 800e2fc:	0800e41d 	.word	0x0800e41d
 800e300:	0800e41d 	.word	0x0800e41d
 800e304:	0800e41d 	.word	0x0800e41d
 800e308:	0800e41d 	.word	0x0800e41d
 800e30c:	0800e41d 	.word	0x0800e41d
 800e310:	0800e41d 	.word	0x0800e41d
 800e314:	0800e41d 	.word	0x0800e41d
 800e318:	0800e41d 	.word	0x0800e41d
 800e31c:	0800e41d 	.word	0x0800e41d
 800e320:	0800e41d 	.word	0x0800e41d
 800e324:	0800e41d 	.word	0x0800e41d
 800e328:	0800e41d 	.word	0x0800e41d
 800e32c:	0800e41d 	.word	0x0800e41d
 800e330:	0800e41d 	.word	0x0800e41d
 800e334:	0800e41d 	.word	0x0800e41d
 800e338:	0800e41d 	.word	0x0800e41d
 800e33c:	0800e41d 	.word	0x0800e41d
 800e340:	0800e41d 	.word	0x0800e41d
 800e344:	0800e41d 	.word	0x0800e41d
 800e348:	0800e41d 	.word	0x0800e41d
 800e34c:	0800e41d 	.word	0x0800e41d
 800e350:	0800e41d 	.word	0x0800e41d
 800e354:	0800e41d 	.word	0x0800e41d
 800e358:	0800e41d 	.word	0x0800e41d
 800e35c:	0800e41d 	.word	0x0800e41d
 800e360:	0800e41d 	.word	0x0800e41d
 800e364:	0800e41d 	.word	0x0800e41d
 800e368:	0800e41d 	.word	0x0800e41d
 800e36c:	0800e41d 	.word	0x0800e41d
 800e370:	0800e41d 	.word	0x0800e41d
 800e374:	0800e385 	.word	0x0800e385
 800e378:	0800e3c9 	.word	0x0800e3c9
 800e37c:	0800e41d 	.word	0x0800e41d
 800e380:	0800e41d 	.word	0x0800e41d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	461a      	mov	r2, r3
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	3301      	adds	r3, #1
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	3302      	adds	r3, #2
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e39c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	3303      	adds	r3, #3
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	061b      	lsls	r3, r3, #24
 800e3a6:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	4b20      	ldr	r3, [pc, #128]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3ac:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	791a      	ldrb	r2, [r3, #4]
 800e3b2:	4b1e      	ldr	r3, [pc, #120]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3b4:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	795a      	ldrb	r2, [r3, #5]
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3bc:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	799a      	ldrb	r2, [r3, #6]
 800e3c2:	4b1a      	ldr	r3, [pc, #104]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3c4:	719a      	strb	r2, [r3, #6]

    break;
 800e3c6:	e02a      	b.n	800e41e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e3c8:	4b18      	ldr	r3, [pc, #96]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e3d2:	4b16      	ldr	r3, [pc, #88]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	0a1a      	lsrs	r2, r3, #8
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e3e0:	4b12      	ldr	r3, [pc, #72]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	0c1a      	lsrs	r2, r3, #16
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	3302      	adds	r3, #2
 800e3ea:	b2d2      	uxtb	r2, r2
 800e3ec:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e42c <CDC_Control_FS+0x158>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	0e1a      	lsrs	r2, r3, #24
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	3303      	adds	r3, #3
 800e3f8:	b2d2      	uxtb	r2, r2
 800e3fa:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	3304      	adds	r3, #4
 800e400:	4a0a      	ldr	r2, [pc, #40]	@ (800e42c <CDC_Control_FS+0x158>)
 800e402:	7912      	ldrb	r2, [r2, #4]
 800e404:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	3305      	adds	r3, #5
 800e40a:	4a08      	ldr	r2, [pc, #32]	@ (800e42c <CDC_Control_FS+0x158>)
 800e40c:	7952      	ldrb	r2, [r2, #5]
 800e40e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	3306      	adds	r3, #6
 800e414:	4a05      	ldr	r2, [pc, #20]	@ (800e42c <CDC_Control_FS+0x158>)
 800e416:	7992      	ldrb	r2, [r2, #6]
 800e418:	701a      	strb	r2, [r3, #0]

    break;
 800e41a:	e000      	b.n	800e41e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e41c:	bf00      	nop
  }

  return (USBD_OK);
 800e41e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	2400009c 	.word	0x2400009c

0800e430 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	480d      	ldr	r0, [pc, #52]	@ (800e474 <CDC_Receive_FS+0x44>)
 800e43e:	f7fe fb3b 	bl	800cab8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e442:	480c      	ldr	r0, [pc, #48]	@ (800e474 <CDC_Receive_FS+0x44>)
 800e444:	f7fe fb96 	bl	800cb74 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00d      	beq.n	800e46a <CDC_Receive_FS+0x3a>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 800e45a:	89fb      	ldrh	r3, [r7, #14]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d004      	beq.n	800e46a <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 800e460:	89fb      	ldrh	r3, [r7, #14]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f001 f9bf 	bl	800f7e8 <USB_Receive>
	  }
  }
  return (USBD_OK);
 800e46a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	24000300 	.word	0x24000300

0800e478 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	460b      	mov	r3, r1
 800e482:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e488:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c0 <CDC_Transmit_FS+0x48>)
 800e48a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e48e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e00b      	b.n	800e4b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e49e:	887b      	ldrh	r3, [r7, #2]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	6879      	ldr	r1, [r7, #4]
 800e4a4:	4806      	ldr	r0, [pc, #24]	@ (800e4c0 <CDC_Transmit_FS+0x48>)
 800e4a6:	f7fe fae5 	bl	800ca74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4aa:	4805      	ldr	r0, [pc, #20]	@ (800e4c0 <CDC_Transmit_FS+0x48>)
 800e4ac:	f7fe fb22 	bl	800caf4 <USBD_CDC_TransmitPacket>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	24000300 	.word	0x24000300

0800e4c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	371c      	adds	r7, #28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr

0800e4e6 <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b082      	sub	sp, #8
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 800e4f2:	887b      	ldrh	r3, [r7, #2]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ffbe 	bl	800e478 <CDC_Transmit_FS>
 800e4fc:	4603      	mov	r3, r0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	4603      	mov	r3, r0
 800e510:	6039      	str	r1, [r7, #0]
 800e512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	2212      	movs	r2, #18
 800e518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e51a:	4b03      	ldr	r3, [pc, #12]	@ (800e528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	240000d8 	.word	0x240000d8

0800e52c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	4603      	mov	r3, r0
 800e534:	6039      	str	r1, [r7, #0]
 800e536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2204      	movs	r2, #4
 800e53c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e53e:	4b03      	ldr	r3, [pc, #12]	@ (800e54c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e540:	4618      	mov	r0, r3
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	240000ec 	.word	0x240000ec

0800e550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	4907      	ldr	r1, [pc, #28]	@ (800e584 <USBD_FS_ProductStrDescriptor+0x34>)
 800e566:	4808      	ldr	r0, [pc, #32]	@ (800e588 <USBD_FS_ProductStrDescriptor+0x38>)
 800e568:	f7ff fd7a 	bl	800e060 <USBD_GetString>
 800e56c:	e004      	b.n	800e578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	4904      	ldr	r1, [pc, #16]	@ (800e584 <USBD_FS_ProductStrDescriptor+0x34>)
 800e572:	4805      	ldr	r0, [pc, #20]	@ (800e588 <USBD_FS_ProductStrDescriptor+0x38>)
 800e574:	f7ff fd74 	bl	800e060 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e578:	4b02      	ldr	r3, [pc, #8]	@ (800e584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	240015dc 	.word	0x240015dc
 800e588:	08010b70 	.word	0x08010b70

0800e58c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	4603      	mov	r3, r0
 800e594:	6039      	str	r1, [r7, #0]
 800e596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	4904      	ldr	r1, [pc, #16]	@ (800e5ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e59c:	4804      	ldr	r0, [pc, #16]	@ (800e5b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e59e:	f7ff fd5f 	bl	800e060 <USBD_GetString>
  return USBD_StrDesc;
 800e5a2:	4b02      	ldr	r3, [pc, #8]	@ (800e5ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	240015dc 	.word	0x240015dc
 800e5b0:	08010b88 	.word	0x08010b88

0800e5b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	6039      	str	r1, [r7, #0]
 800e5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	221a      	movs	r2, #26
 800e5c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5c6:	f000 f843 	bl	800e650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e5ca:	4b02      	ldr	r3, [pc, #8]	@ (800e5d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	240000f0 	.word	0x240000f0

0800e5d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5e4:	79fb      	ldrb	r3, [r7, #7]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d105      	bne.n	800e5f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	4907      	ldr	r1, [pc, #28]	@ (800e60c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5ee:	4808      	ldr	r0, [pc, #32]	@ (800e610 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5f0:	f7ff fd36 	bl	800e060 <USBD_GetString>
 800e5f4:	e004      	b.n	800e600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	4904      	ldr	r1, [pc, #16]	@ (800e60c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e5fa:	4805      	ldr	r0, [pc, #20]	@ (800e610 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e5fc:	f7ff fd30 	bl	800e060 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e600:	4b02      	ldr	r3, [pc, #8]	@ (800e60c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	240015dc 	.word	0x240015dc
 800e610:	08010b9c 	.word	0x08010b9c

0800e614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	6039      	str	r1, [r7, #0]
 800e61e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d105      	bne.n	800e632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4907      	ldr	r1, [pc, #28]	@ (800e648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e62a:	4808      	ldr	r0, [pc, #32]	@ (800e64c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e62c:	f7ff fd18 	bl	800e060 <USBD_GetString>
 800e630:	e004      	b.n	800e63c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	4904      	ldr	r1, [pc, #16]	@ (800e648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e636:	4805      	ldr	r0, [pc, #20]	@ (800e64c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e638:	f7ff fd12 	bl	800e060 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e63c:	4b02      	ldr	r3, [pc, #8]	@ (800e648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	240015dc 	.word	0x240015dc
 800e64c:	08010ba8 	.word	0x08010ba8

0800e650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e656:	4b0f      	ldr	r3, [pc, #60]	@ (800e694 <Get_SerialNum+0x44>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e65c:	4b0e      	ldr	r3, [pc, #56]	@ (800e698 <Get_SerialNum+0x48>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e662:	4b0e      	ldr	r3, [pc, #56]	@ (800e69c <Get_SerialNum+0x4c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4413      	add	r3, r2
 800e66e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d009      	beq.n	800e68a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e676:	2208      	movs	r2, #8
 800e678:	4909      	ldr	r1, [pc, #36]	@ (800e6a0 <Get_SerialNum+0x50>)
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f000 f814 	bl	800e6a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e680:	2204      	movs	r2, #4
 800e682:	4908      	ldr	r1, [pc, #32]	@ (800e6a4 <Get_SerialNum+0x54>)
 800e684:	68b8      	ldr	r0, [r7, #8]
 800e686:	f000 f80f 	bl	800e6a8 <IntToUnicode>
  }
}
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	1ff1e800 	.word	0x1ff1e800
 800e698:	1ff1e804 	.word	0x1ff1e804
 800e69c:	1ff1e808 	.word	0x1ff1e808
 800e6a0:	240000f2 	.word	0x240000f2
 800e6a4:	24000102 	.word	0x24000102

0800e6a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	75fb      	strb	r3, [r7, #23]
 800e6be:	e027      	b.n	800e710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	0f1b      	lsrs	r3, r3, #28
 800e6c4:	2b09      	cmp	r3, #9
 800e6c6:	d80b      	bhi.n	800e6e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	0f1b      	lsrs	r3, r3, #28
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	440b      	add	r3, r1
 800e6d8:	3230      	adds	r2, #48	@ 0x30
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]
 800e6de:	e00a      	b.n	800e6f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	0f1b      	lsrs	r3, r3, #28
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	7dfb      	ldrb	r3, [r7, #23]
 800e6e8:	005b      	lsls	r3, r3, #1
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	440b      	add	r3, r1
 800e6f0:	3237      	adds	r2, #55	@ 0x37
 800e6f2:	b2d2      	uxtb	r2, r2
 800e6f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	011b      	lsls	r3, r3, #4
 800e6fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	3301      	adds	r3, #1
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	4413      	add	r3, r2
 800e706:	2200      	movs	r2, #0
 800e708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e70a:	7dfb      	ldrb	r3, [r7, #23]
 800e70c:	3301      	adds	r3, #1
 800e70e:	75fb      	strb	r3, [r7, #23]
 800e710:	7dfa      	ldrb	r2, [r7, #23]
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	429a      	cmp	r2, r3
 800e716:	d3d3      	bcc.n	800e6c0 <IntToUnicode+0x18>
  }
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
	...

0800e728 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b0ba      	sub	sp, #232	@ 0xe8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e730:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	605a      	str	r2, [r3, #4]
 800e73a:	609a      	str	r2, [r3, #8]
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e740:	f107 0310 	add.w	r3, r7, #16
 800e744:	22c0      	movs	r2, #192	@ 0xc0
 800e746:	2100      	movs	r1, #0
 800e748:	4618      	mov	r0, r3
 800e74a:	f001 f961 	bl	800fa10 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a33      	ldr	r2, [pc, #204]	@ (800e820 <HAL_PCD_MspInit+0xf8>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d15f      	bne.n	800e818 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e758:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e75c:	f04f 0300 	mov.w	r3, #0
 800e760:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800e764:	2319      	movs	r3, #25
 800e766:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800e768:	23c0      	movs	r3, #192	@ 0xc0
 800e76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800e76c:	2302      	movs	r3, #2
 800e76e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800e770:	2304      	movs	r3, #4
 800e772:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800e774:	2302      	movs	r3, #2
 800e776:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800e778:	2300      	movs	r3, #0
 800e77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e780:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e788:	f107 0310 	add.w	r3, r7, #16
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f9 fa39 	bl	8007c04 <HAL_RCCEx_PeriphCLKConfig>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d001      	beq.n	800e79c <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 800e798:	f7f2 f8ea 	bl	8000970 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e79c:	f7f8 f940 	bl	8006a20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7a0:	4b20      	ldr	r3, [pc, #128]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7a8:	f043 0301 	orr.w	r3, r3, #1
 800e7ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	60fb      	str	r3, [r7, #12]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e7be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e7d8:	230a      	movs	r3, #10
 800e7da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4810      	ldr	r0, [pc, #64]	@ (800e828 <HAL_PCD_MspInit+0x100>)
 800e7e6:	f7f6 fc77 	bl	80050d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e7f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e7fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e824 <HAL_PCD_MspInit+0xfc>)
 800e7fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e804:	60bb      	str	r3, [r7, #8]
 800e806:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e808:	2200      	movs	r2, #0
 800e80a:	2100      	movs	r1, #0
 800e80c:	2065      	movs	r0, #101	@ 0x65
 800e80e:	f7f4 f845 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e812:	2065      	movs	r0, #101	@ 0x65
 800e814:	f7f4 f85c 	bl	80028d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e818:	bf00      	nop
 800e81a:	37e8      	adds	r7, #232	@ 0xe8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	40080000 	.word	0x40080000
 800e824:	58024400 	.word	0x58024400
 800e828:	58020000 	.word	0x58020000

0800e82c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e840:	4619      	mov	r1, r3
 800e842:	4610      	mov	r0, r2
 800e844:	f7fe fa7f 	bl	800cd46 <USBD_LL_SetupStage>
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	460b      	mov	r3, r1
 800e85a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e862:	78fa      	ldrb	r2, [r7, #3]
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	4613      	mov	r3, r2
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	4413      	add	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	440b      	add	r3, r1
 800e870:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	4619      	mov	r1, r3
 800e87a:	f7fe fab9 	bl	800cdf0 <USBD_LL_DataOutStage>
}
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b082      	sub	sp, #8
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	460b      	mov	r3, r1
 800e890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e898:	78fa      	ldrb	r2, [r7, #3]
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	4613      	mov	r3, r2
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	4413      	add	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	440b      	add	r3, r1
 800e8a6:	3320      	adds	r3, #32
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	78fb      	ldrb	r3, [r7, #3]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f7fe fb52 	bl	800cf56 <USBD_LL_DataInStage>
}
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fc8c 	bl	800d1e6 <USBD_LL_SOF>
}
 800e8ce:	bf00      	nop
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	79db      	ldrb	r3, [r3, #7]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	73fb      	strb	r3, [r7, #15]
 800e8ee:	e008      	b.n	800e902 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	79db      	ldrb	r3, [r3, #7]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d102      	bne.n	800e8fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	73fb      	strb	r3, [r7, #15]
 800e8fc:	e001      	b.n	800e902 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e8fe:	f7f2 f837 	bl	8000970 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e908:	7bfa      	ldrb	r2, [r7, #15]
 800e90a:	4611      	mov	r1, r2
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fc26 	bl	800d15e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe fbce 	bl	800d0ba <USBD_LL_Reset>
}
 800e91e:	bf00      	nop
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
	...

0800e928 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fc21 	bl	800d17e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	6812      	ldr	r2, [r2, #0]
 800e94a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e94e:	f043 0301 	orr.w	r3, r3, #1
 800e952:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	7adb      	ldrb	r3, [r3, #11]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d005      	beq.n	800e968 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e95c:	4b04      	ldr	r3, [pc, #16]	@ (800e970 <HAL_PCD_SuspendCallback+0x48>)
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	4a03      	ldr	r2, [pc, #12]	@ (800e970 <HAL_PCD_SuspendCallback+0x48>)
 800e962:	f043 0306 	orr.w	r3, r3, #6
 800e966:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	e000ed00 	.word	0xe000ed00

0800e974 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe fc17 	bl	800d1b6 <USBD_LL_Resume>
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	460b      	mov	r3, r1
 800e99a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e9a2:	78fa      	ldrb	r2, [r7, #3]
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe fc6f 	bl	800d28a <USBD_LL_IsoOUTIncomplete>
}
 800e9ac:	bf00      	nop
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e9c6:	78fa      	ldrb	r2, [r7, #3]
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe fc2b 	bl	800d226 <USBD_LL_IsoINIncomplete>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fe fc81 	bl	800d2ee <USBD_LL_DevConnected>
}
 800e9ec:	bf00      	nop
 800e9ee:	3708      	adds	r7, #8
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fc7e 	bl	800d304 <USBD_LL_DevDisconnected>
}
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d13e      	bne.n	800ea9e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ea20:	4a21      	ldr	r2, [pc, #132]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a1f      	ldr	r2, [pc, #124]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea30:	4b1d      	ldr	r3, [pc, #116]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea32:	4a1e      	ldr	r2, [pc, #120]	@ (800eaac <USBD_LL_Init+0x9c>)
 800ea34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ea36:	4b1c      	ldr	r3, [pc, #112]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea38:	2209      	movs	r2, #9
 800ea3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ea3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea3e:	2202      	movs	r2, #2
 800ea40:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ea42:	4b19      	ldr	r3, [pc, #100]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ea48:	4b17      	ldr	r3, [pc, #92]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ea4e:	4b16      	ldr	r3, [pc, #88]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ea54:	4b14      	ldr	r3, [pc, #80]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ea5a:	4b13      	ldr	r3, [pc, #76]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ea60:	4b11      	ldr	r3, [pc, #68]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ea66:	4b10      	ldr	r3, [pc, #64]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ea6c:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea6e:	2200      	movs	r2, #0
 800ea70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ea72:	480d      	ldr	r0, [pc, #52]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea74:	f7f6 fcf9 	bl	800546a <HAL_PCD_Init>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ea7e:	f7f1 ff77 	bl	8000970 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ea82:	2180      	movs	r1, #128	@ 0x80
 800ea84:	4808      	ldr	r0, [pc, #32]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea86:	f7f7 ff50 	bl	800692a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ea8a:	2240      	movs	r2, #64	@ 0x40
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	4806      	ldr	r0, [pc, #24]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea90:	f7f7 ff04 	bl	800689c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ea94:	2280      	movs	r2, #128	@ 0x80
 800ea96:	2101      	movs	r1, #1
 800ea98:	4803      	ldr	r0, [pc, #12]	@ (800eaa8 <USBD_LL_Init+0x98>)
 800ea9a:	f7f7 feff 	bl	800689c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	240017dc 	.word	0x240017dc
 800eaac:	40080000 	.word	0x40080000

0800eab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7f6 fddb 	bl	8005682 <HAL_PCD_Start>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 f942 	bl	800ed5c <USBD_Get_USB_Status>
 800ead8:	4603      	mov	r3, r0
 800eada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	4608      	mov	r0, r1
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	70fb      	strb	r3, [r7, #3]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70bb      	strb	r3, [r7, #2]
 800eafc:	4613      	mov	r3, r2
 800eafe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb0e:	78bb      	ldrb	r3, [r7, #2]
 800eb10:	883a      	ldrh	r2, [r7, #0]
 800eb12:	78f9      	ldrb	r1, [r7, #3]
 800eb14:	f7f7 fadc 	bl	80060d0 <HAL_PCD_EP_Open>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb1c:	7bfb      	ldrb	r3, [r7, #15]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f000 f91c 	bl	800ed5c <USBD_Get_USB_Status>
 800eb24:	4603      	mov	r3, r0
 800eb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	4611      	mov	r1, r2
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f7 fb27 	bl	80061a4 <HAL_PCD_EP_Close>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 f8fd 	bl	800ed5c <USBD_Get_USB_Status>
 800eb62:	4603      	mov	r3, r0
 800eb64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb66:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb8a:	78fa      	ldrb	r2, [r7, #3]
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f7 fbdf 	bl	8006352 <HAL_PCD_EP_SetStall>
 800eb94:	4603      	mov	r3, r0
 800eb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 f8de 	bl	800ed5c <USBD_Get_USB_Status>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b084      	sub	sp, #16
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebc8:	78fa      	ldrb	r2, [r7, #3]
 800ebca:	4611      	mov	r1, r2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7f7 fc23 	bl	8006418 <HAL_PCD_EP_ClrStall>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f8bf 	bl	800ed5c <USBD_Get_USB_Status>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	da0b      	bge.n	800ec20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec08:	78fb      	ldrb	r3, [r7, #3]
 800ec0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec0e:	68f9      	ldr	r1, [r7, #12]
 800ec10:	4613      	mov	r3, r2
 800ec12:	00db      	lsls	r3, r3, #3
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	440b      	add	r3, r1
 800ec1a:	3316      	adds	r3, #22
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	e00b      	b.n	800ec38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec26:	68f9      	ldr	r1, [r7, #12]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	00db      	lsls	r3, r3, #3
 800ec2c:	4413      	add	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	440b      	add	r3, r1
 800ec32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ec36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec5e:	78fa      	ldrb	r2, [r7, #3]
 800ec60:	4611      	mov	r1, r2
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f7 fa10 	bl	8006088 <HAL_PCD_SetAddress>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 f874 	bl	800ed5c <USBD_Get_USB_Status>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b086      	sub	sp, #24
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
 800ec8e:	460b      	mov	r3, r1
 800ec90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec96:	2300      	movs	r3, #0
 800ec98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eca0:	7af9      	ldrb	r1, [r7, #11]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	f7f7 fb1a 	bl	80062de <HAL_PCD_EP_Transmit>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f000 f853 	bl	800ed5c <USBD_Get_USB_Status>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ecba:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3718      	adds	r7, #24
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	607a      	str	r2, [r7, #4]
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ece2:	7af9      	ldrb	r1, [r7, #11]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	f7f7 faa6 	bl	8006238 <HAL_PCD_EP_Receive>
 800ecec:	4603      	mov	r3, r0
 800ecee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 f832 	bl	800ed5c <USBD_Get_USB_Status>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ecfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b082      	sub	sp, #8
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	460b      	mov	r3, r1
 800ed10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed18:	78fa      	ldrb	r2, [r7, #3]
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f7 fac6 	bl	80062ae <HAL_PCD_EP_GetRxCount>
 800ed22:	4603      	mov	r3, r0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed34:	4b03      	ldr	r3, [pc, #12]	@ (800ed44 <USBD_static_malloc+0x18>)
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	24001cc0 	.word	0x24001cc0

0800ed48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ed50:	bf00      	nop
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	2b03      	cmp	r3, #3
 800ed6e:	d817      	bhi.n	800eda0 <USBD_Get_USB_Status+0x44>
 800ed70:	a201      	add	r2, pc, #4	@ (adr r2, 800ed78 <USBD_Get_USB_Status+0x1c>)
 800ed72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed76:	bf00      	nop
 800ed78:	0800ed89 	.word	0x0800ed89
 800ed7c:	0800ed8f 	.word	0x0800ed8f
 800ed80:	0800ed95 	.word	0x0800ed95
 800ed84:	0800ed9b 	.word	0x0800ed9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed8c:	e00b      	b.n	800eda6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	73fb      	strb	r3, [r7, #15]
    break;
 800ed92:	e008      	b.n	800eda6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed94:	2301      	movs	r3, #1
 800ed96:	73fb      	strb	r3, [r7, #15]
    break;
 800ed98:	e005      	b.n	800eda6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed9e:	e002      	b.n	800eda6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eda0:	2303      	movs	r3, #3
 800eda2:	73fb      	strb	r3, [r7, #15]
    break;
 800eda4:	bf00      	nop
  }
  return usb_status;
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3714      	adds	r7, #20
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 800edb4:	b5b0      	push	{r4, r5, r7, lr}
 800edb6:	b088      	sub	sp, #32
 800edb8:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 800edba:	4b3e      	ldr	r3, [pc, #248]	@ (800eeb4 <do_dump+0x100>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a3e      	ldr	r2, [pc, #248]	@ (800eeb8 <do_dump+0x104>)
 800edc0:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 800edc2:	4b3c      	ldr	r3, [pc, #240]	@ (800eeb4 <do_dump+0x100>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f023 030f 	bic.w	r3, r3, #15
 800edca:	4619      	mov	r1, r3
 800edcc:	483b      	ldr	r0, [pc, #236]	@ (800eebc <do_dump+0x108>)
 800edce:	f000 fc97 	bl	800f700 <DebugPrint>
	strcpy(ascii_result,"................");
 800edd2:	1d3b      	adds	r3, r7, #4
 800edd4:	4a3a      	ldr	r2, [pc, #232]	@ (800eec0 <do_dump+0x10c>)
 800edd6:	461c      	mov	r4, r3
 800edd8:	4615      	mov	r5, r2
 800edda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edde:	682b      	ldr	r3, [r5, #0]
 800ede0:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 800ede2:	2300      	movs	r3, #0
 800ede4:	61fb      	str	r3, [r7, #28]
 800ede6:	e005      	b.n	800edf4 <do_dump+0x40>
 800ede8:	4836      	ldr	r0, [pc, #216]	@ (800eec4 <do_dump+0x110>)
 800edea:	f000 fc6f 	bl	800f6cc <DebugSend>
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	3301      	adds	r3, #1
 800edf2:	61fb      	str	r3, [r7, #28]
 800edf4:	4b2f      	ldr	r3, [pc, #188]	@ (800eeb4 <do_dump+0x100>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f003 020f 	and.w	r2, r3, #15
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d8f2      	bhi.n	800ede8 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 800ee02:	e049      	b.n	800ee98 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 800ee04:	4b2b      	ldr	r3, [pc, #172]	@ (800eeb4 <do_dump+0x100>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	492a      	ldr	r1, [pc, #168]	@ (800eeb4 <do_dump+0x100>)
 800ee0c:	600a      	str	r2, [r1, #0]
 800ee0e:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	482b      	ldr	r0, [pc, #172]	@ (800eec8 <do_dump+0x114>)
 800ee1c:	f000 fc70 	bl	800f700 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 800ee20:	7dfb      	ldrb	r3, [r7, #23]
 800ee22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee26:	3301      	adds	r3, #1
 800ee28:	4a28      	ldr	r2, [pc, #160]	@ (800eecc <do_dump+0x118>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	f003 0320 	and.w	r3, r3, #32
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d104      	bne.n	800ee40 <do_dump+0x8c>
 800ee36:	1d3a      	adds	r2, r7, #4
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	7dfa      	ldrb	r2, [r7, #23]
 800ee3e:	701a      	strb	r2, [r3, #0]
		i1++;
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	3301      	adds	r3, #1
 800ee44:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 800ee46:	4b1b      	ldr	r3, [pc, #108]	@ (800eeb4 <do_dump+0x100>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f003 030f 	and.w	r3, r3, #15
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d122      	bne.n	800ee98 <do_dump+0xe4>
		{
			DebugSend("  ");
 800ee52:	481f      	ldr	r0, [pc, #124]	@ (800eed0 <do_dump+0x11c>)
 800ee54:	f000 fc3a 	bl	800f6cc <DebugSend>
			DebugSend(ascii_result);
 800ee58:	1d3b      	adds	r3, r7, #4
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f000 fc36 	bl	800f6cc <DebugSend>
			i1 = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 800ee64:	1d3b      	adds	r3, r7, #4
 800ee66:	4a16      	ldr	r2, [pc, #88]	@ (800eec0 <do_dump+0x10c>)
 800ee68:	461c      	mov	r4, r3
 800ee6a:	4615      	mov	r5, r2
 800ee6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee70:	682b      	ldr	r3, [r5, #0]
 800ee72:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 800ee74:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb4 <do_dump+0x100>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d014      	beq.n	800eea6 <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 800ee7c:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb4 <do_dump+0x100>)
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	4b14      	ldr	r3, [pc, #80]	@ (800eed4 <do_dump+0x120>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d807      	bhi.n	800ee98 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 800ee88:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb4 <do_dump+0x100>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f023 030f 	bic.w	r3, r3, #15
 800ee90:	4619      	mov	r1, r3
 800ee92:	480a      	ldr	r0, [pc, #40]	@ (800eebc <do_dump+0x108>)
 800ee94:	f000 fc34 	bl	800f700 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 800ee98:	4b06      	ldr	r3, [pc, #24]	@ (800eeb4 <do_dump+0x100>)
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	4b0d      	ldr	r3, [pc, #52]	@ (800eed4 <do_dump+0x120>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d9af      	bls.n	800ee04 <do_dump+0x50>
 800eea4:	e000      	b.n	800eea8 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 800eea6:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 800eea8:	4b02      	ldr	r3, [pc, #8]	@ (800eeb4 <do_dump+0x100>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3720      	adds	r7, #32
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bdb0      	pop	{r4, r5, r7, pc}
 800eeb4:	24001ee0 	.word	0x24001ee0
 800eeb8:	24001ee4 	.word	0x24001ee4
 800eebc:	08010bb8 	.word	0x08010bb8
 800eec0:	08010bc4 	.word	0x08010bc4
 800eec4:	08010bd8 	.word	0x08010bd8
 800eec8:	08010bdc 	.word	0x08010bdc
 800eecc:	08010db4 	.word	0x08010db4
 800eed0:	08010be4 	.word	0x08010be4
 800eed4:	24001ee8 	.word	0x24001ee8

0800eed8 <debug_parse>:


void debug_parse(char *cmd_line)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08e      	sub	sp, #56	@ 0x38
 800eedc:	af02      	add	r7, sp, #8
 800eede:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 800eee0:	e002      	b.n	800eee8 <debug_parse+0x10>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3301      	adds	r3, #1
 800eee6:	607b      	str	r3, [r7, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b20      	cmp	r3, #32
 800eeee:	d0f8      	beq.n	800eee2 <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	607a      	str	r2, [r7, #4]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800eefc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef00:	3301      	adds	r3, #1
 800ef02:	4aac      	ldr	r2, [pc, #688]	@ (800f1b4 <debug_parse+0x2dc>)
 800ef04:	4413      	add	r3, r2
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	f003 0303 	and.w	r3, r3, #3
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d103      	bne.n	800ef18 <debug_parse+0x40>
 800ef10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef14:	3b20      	subs	r3, #32
 800ef16:	e001      	b.n	800ef1c <debug_parse+0x44>
 800ef18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ef1c:	3b3f      	subs	r3, #63	@ 0x3f
 800ef1e:	2b1b      	cmp	r3, #27
 800ef20:	f200 82dc 	bhi.w	800f4dc <debug_parse+0x604>
 800ef24:	a201      	add	r2, pc, #4	@ (adr r2, 800ef2c <debug_parse+0x54>)
 800ef26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2a:	bf00      	nop
 800ef2c:	0800ef9d 	.word	0x0800ef9d
 800ef30:	0800f4dd 	.word	0x0800f4dd
 800ef34:	0800efa9 	.word	0x0800efa9
 800ef38:	0800f4bb 	.word	0x0800f4bb
 800ef3c:	0800f4bb 	.word	0x0800f4bb
 800ef40:	0800efb9 	.word	0x0800efb9
 800ef44:	0800f019 	.word	0x0800f019
 800ef48:	0800f03d 	.word	0x0800f03d
 800ef4c:	0800f4bb 	.word	0x0800f4bb
 800ef50:	0800f4bb 	.word	0x0800f4bb
 800ef54:	0800f069 	.word	0x0800f069
 800ef58:	0800f0af 	.word	0x0800f0af
 800ef5c:	0800f4bb 	.word	0x0800f4bb
 800ef60:	0800f0e9 	.word	0x0800f0e9
 800ef64:	0800f12d 	.word	0x0800f12d
 800ef68:	0800f181 	.word	0x0800f181
 800ef6c:	0800f205 	.word	0x0800f205
 800ef70:	0800f259 	.word	0x0800f259
 800ef74:	0800f4bb 	.word	0x0800f4bb
 800ef78:	0800f4bb 	.word	0x0800f4bb
 800ef7c:	0800f4bb 	.word	0x0800f4bb
 800ef80:	0800f269 	.word	0x0800f269
 800ef84:	0800f2ab 	.word	0x0800f2ab
 800ef88:	0800f339 	.word	0x0800f339
 800ef8c:	0800f389 	.word	0x0800f389
 800ef90:	0800f421 	.word	0x0800f421
 800ef94:	0800f431 	.word	0x0800f431
 800ef98:	0800f495 	.word	0x0800f495
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 800ef9c:	4a86      	ldr	r2, [pc, #536]	@ (800f1b8 <debug_parse+0x2e0>)
 800ef9e:	4987      	ldr	r1, [pc, #540]	@ (800f1bc <debug_parse+0x2e4>)
 800efa0:	4887      	ldr	r0, [pc, #540]	@ (800f1c0 <debug_parse+0x2e8>)
 800efa2:	f000 fbad 	bl	800f700 <DebugPrint>
		break;
 800efa6:	e299      	b.n	800f4dc <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 800efa8:	f7f1 fb22 	bl	80005f0 <CalcTemperature>
 800efac:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 800efae:	6a39      	ldr	r1, [r7, #32]
 800efb0:	4884      	ldr	r0, [pc, #528]	@ (800f1c4 <debug_parse+0x2ec>)
 800efb2:	f000 fba5 	bl	800f700 <DebugPrint>
	}
		break;
 800efb6:	e291      	b.n	800f4dc <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f107 010c 	add.w	r1, r7, #12
 800efc2:	2210      	movs	r2, #16
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fccd 	bl	800f964 <strtoul>
 800efca:	4603      	mov	r3, r0
 800efcc:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d019      	beq.n	800f008 <debug_parse+0x130>
			_debug_dump_beg = temp2;
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	4a7c      	ldr	r2, [pc, #496]	@ (800f1c8 <debug_parse+0x2f0>)
 800efd8:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f107 010c 	add.w	r1, r7, #12
 800efe0:	2210      	movs	r2, #16
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 fcbe 	bl	800f964 <strtoul>
 800efe8:	4603      	mov	r3, r0
 800efea:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	69bb      	ldr	r3, [r7, #24]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d903      	bls.n	800effc <debug_parse+0x124>
				_debug_dump_end = temp3;
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	4a75      	ldr	r2, [pc, #468]	@ (800f1cc <debug_parse+0x2f4>)
 800eff8:	6013      	str	r3, [r2, #0]
 800effa:	e00a      	b.n	800f012 <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 800effc:	4b72      	ldr	r3, [pc, #456]	@ (800f1c8 <debug_parse+0x2f0>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	337f      	adds	r3, #127	@ 0x7f
 800f002:	4a72      	ldr	r2, [pc, #456]	@ (800f1cc <debug_parse+0x2f4>)
 800f004:	6013      	str	r3, [r2, #0]
 800f006:	e004      	b.n	800f012 <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 800f008:	4b6f      	ldr	r3, [pc, #444]	@ (800f1c8 <debug_parse+0x2f0>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	337f      	adds	r3, #127	@ 0x7f
 800f00e:	4a6f      	ldr	r2, [pc, #444]	@ (800f1cc <debug_parse+0x2f4>)
 800f010:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 800f012:	f7ff fecf 	bl	800edb4 <do_dump>
		break;
 800f016:	e261      	b.n	800f4dc <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 800f01e:	f107 031c 	add.w	r3, r7, #28
 800f022:	461a      	mov	r2, r3
 800f024:	496a      	ldr	r1, [pc, #424]	@ (800f1d0 <debug_parse+0x2f8>)
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 fca6 	bl	800f978 <siscanf>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b01      	cmp	r3, #1
 800f030:	f040 8245 	bne.w	800f4be <debug_parse+0x5e6>
			tempbyte = temp1;
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 800f03a:	e240      	b.n	800f4be <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 800f03c:	f107 0114 	add.w	r1, r7, #20
 800f040:	f107 0218 	add.w	r2, r7, #24
 800f044:	f107 0310 	add.w	r3, r7, #16
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	460b      	mov	r3, r1
 800f04c:	4961      	ldr	r1, [pc, #388]	@ (800f1d4 <debug_parse+0x2fc>)
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fc92 	bl	800f978 <siscanf>
 800f054:	6278      	str	r0, [r7, #36]	@ 0x24
 800f056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f058:	2b03      	cmp	r3, #3
 800f05a:	d003      	beq.n	800f064 <debug_parse+0x18c>
		switch (params) {
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 800f05c:	485e      	ldr	r0, [pc, #376]	@ (800f1d8 <debug_parse+0x300>)
 800f05e:	f000 fb35 	bl	800f6cc <DebugSend>
			}
			break;
 800f062:	e000      	b.n	800f066 <debug_parse+0x18e>
			break;
 800f064:	bf00      	nop
		}
		break;
 800f066:	e239      	b.n	800f4dc <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 800f068:	f107 031c 	add.w	r3, r7, #28
 800f06c:	461a      	mov	r2, r3
 800f06e:	4958      	ldr	r1, [pc, #352]	@ (800f1d0 <debug_parse+0x2f8>)
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fc81 	bl	800f978 <siscanf>
 800f076:	4603      	mov	r3, r0
 800f078:	2b01      	cmp	r3, #1
 800f07a:	f040 8222 	bne.w	800f4c2 <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	461a      	mov	r2, r3
 800f082:	4b56      	ldr	r3, [pc, #344]	@ (800f1dc <debug_parse+0x304>)
 800f084:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 800f086:	4b55      	ldr	r3, [pc, #340]	@ (800f1dc <debug_parse+0x304>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 800f090:	4b52      	ldr	r3, [pc, #328]	@ (800f1dc <debug_parse+0x304>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4619      	mov	r1, r3
 800f096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f09a:	461a      	mov	r2, r3
 800f09c:	4850      	ldr	r0, [pc, #320]	@ (800f1e0 <debug_parse+0x308>)
 800f09e:	f000 fb2f 	bl	800f700 <DebugPrint>
			debug_port += sizeof(tempbyte);
 800f0a2:	4b4e      	ldr	r3, [pc, #312]	@ (800f1dc <debug_parse+0x304>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	4a4c      	ldr	r2, [pc, #304]	@ (800f1dc <debug_parse+0x304>)
 800f0aa:	6013      	str	r3, [r2, #0]
		}
		break;
 800f0ac:	e209      	b.n	800f4c2 <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 800f0ae:	f107 031c 	add.w	r3, r7, #28
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	4946      	ldr	r1, [pc, #280]	@ (800f1d0 <debug_parse+0x2f8>)
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fc5e 	bl	800f978 <siscanf>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d105      	bne.n	800f0ce <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	f023 0301 	bic.w	r3, r3, #1
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	4b44      	ldr	r3, [pc, #272]	@ (800f1dc <debug_parse+0x304>)
 800f0cc:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 800f0ce:	4b43      	ldr	r3, [pc, #268]	@ (800f1dc <debug_parse+0x304>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 800f0d6:	4b41      	ldr	r3, [pc, #260]	@ (800f1dc <debug_parse+0x304>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f0de:	461a      	mov	r2, r3
 800f0e0:	4840      	ldr	r0, [pc, #256]	@ (800f1e4 <debug_parse+0x30c>)
 800f0e2:	f000 fb0d 	bl	800f700 <DebugPrint>
		break;
 800f0e6:	e1f9      	b.n	800f4dc <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 800f0e8:	f7f8 fb74 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4a3e      	ldr	r2, [pc, #248]	@ (800f1e8 <debug_parse+0x310>)
 800f0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f0f4:	0c9b      	lsrs	r3, r3, #18
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	483c      	ldr	r0, [pc, #240]	@ (800f1ec <debug_parse+0x314>)
 800f0fa:	f000 fb01 	bl	800f700 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 800f0fe:	f7f8 fce3 	bl	8007ac8 <HAL_RCC_GetHCLKFreq>
 800f102:	4603      	mov	r3, r0
 800f104:	4a38      	ldr	r2, [pc, #224]	@ (800f1e8 <debug_parse+0x310>)
 800f106:	fba2 2303 	umull	r2, r3, r2, r3
 800f10a:	0c9b      	lsrs	r3, r3, #18
 800f10c:	4619      	mov	r1, r3
 800f10e:	4838      	ldr	r0, [pc, #224]	@ (800f1f0 <debug_parse+0x318>)
 800f110:	f000 faf6 	bl	800f700 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 800f114:	f7f8 fd08 	bl	8007b28 <HAL_RCC_GetPCLK1Freq>
 800f118:	4603      	mov	r3, r0
 800f11a:	4a33      	ldr	r2, [pc, #204]	@ (800f1e8 <debug_parse+0x310>)
 800f11c:	fba2 2303 	umull	r2, r3, r2, r3
 800f120:	0c9b      	lsrs	r3, r3, #18
 800f122:	4619      	mov	r1, r3
 800f124:	4833      	ldr	r0, [pc, #204]	@ (800f1f4 <debug_parse+0x31c>)
 800f126:	f000 faeb 	bl	800f700 <DebugPrint>
		break;
 800f12a:	e1d7      	b.n	800f4dc <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 800f12c:	f107 0318 	add.w	r3, r7, #24
 800f130:	f107 021c 	add.w	r2, r7, #28
 800f134:	4930      	ldr	r1, [pc, #192]	@ (800f1f8 <debug_parse+0x320>)
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fc1e 	bl	800f978 <siscanf>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d117      	bne.n	800f172 <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	f023 0303 	bic.w	r3, r3, #3
 800f148:	461a      	mov	r2, r3
 800f14a:	4b24      	ldr	r3, [pc, #144]	@ (800f1dc <debug_parse+0x304>)
 800f14c:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 800f14e:	4b23      	ldr	r3, [pc, #140]	@ (800f1dc <debug_parse+0x304>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4619      	mov	r1, r3
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	461a      	mov	r2, r3
 800f158:	4828      	ldr	r0, [pc, #160]	@ (800f1fc <debug_parse+0x324>)
 800f15a:	f000 fad1 	bl	800f700 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 800f15e:	4b1f      	ldr	r3, [pc, #124]	@ (800f1dc <debug_parse+0x304>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69ba      	ldr	r2, [r7, #24]
 800f164:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 800f166:	4b1d      	ldr	r3, [pc, #116]	@ (800f1dc <debug_parse+0x304>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3304      	adds	r3, #4
 800f16c:	4a1b      	ldr	r2, [pc, #108]	@ (800f1dc <debug_parse+0x304>)
 800f16e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 800f170:	e1b4      	b.n	800f4dc <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 800f172:	4819      	ldr	r0, [pc, #100]	@ (800f1d8 <debug_parse+0x300>)
 800f174:	f000 faaa 	bl	800f6cc <DebugSend>
		break;
 800f178:	e1b0      	b.n	800f4dc <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3301      	adds	r3, #1
 800f17e:	607b      	str	r3, [r7, #4]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b20      	cmp	r3, #32
 800f186:	d103      	bne.n	800f190 <debug_parse+0x2b8>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1f4      	bne.n	800f17a <debug_parse+0x2a2>
		DebugSend("\r\n");
 800f190:	481b      	ldr	r0, [pc, #108]	@ (800f200 <debug_parse+0x328>)
 800f192:	f000 fa9b 	bl	800f6cc <DebugSend>
		while (*cmd_line!=0) {
 800f196:	e007      	b.n	800f1a8 <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 fa53 	bl	800f648 <DebugPutChar>
			cmd_line++;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1f3      	bne.n	800f198 <debug_parse+0x2c0>
		}
		break;
 800f1b0:	e194      	b.n	800f4dc <debug_parse+0x604>
 800f1b2:	bf00      	nop
 800f1b4:	08010db4 	.word	0x08010db4
 800f1b8:	08010be8 	.word	0x08010be8
 800f1bc:	08010bf4 	.word	0x08010bf4
 800f1c0:	08010c00 	.word	0x08010c00
 800f1c4:	08010c20 	.word	0x08010c20
 800f1c8:	24001ee0 	.word	0x24001ee0
 800f1cc:	24001ee8 	.word	0x24001ee8
 800f1d0:	08010c34 	.word	0x08010c34
 800f1d4:	08010c38 	.word	0x08010c38
 800f1d8:	08010c44 	.word	0x08010c44
 800f1dc:	2400010c 	.word	0x2400010c
 800f1e0:	08010c4c 	.word	0x08010c4c
 800f1e4:	08010c5c 	.word	0x08010c5c
 800f1e8:	431bde83 	.word	0x431bde83
 800f1ec:	08010c6c 	.word	0x08010c6c
 800f1f0:	08010c94 	.word	0x08010c94
 800f1f4:	08010cb8 	.word	0x08010cb8
 800f1f8:	08010cdc 	.word	0x08010cdc
 800f1fc:	08010ce4 	.word	0x08010ce4
 800f200:	08010cf4 	.word	0x08010cf4
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 800f204:	f107 0318 	add.w	r3, r7, #24
 800f208:	f107 021c 	add.w	r2, r7, #28
 800f20c:	49b5      	ldr	r1, [pc, #724]	@ (800f4e4 <debug_parse+0x60c>)
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fbb2 	bl	800f978 <siscanf>
 800f214:	4603      	mov	r3, r0
 800f216:	2b02      	cmp	r3, #2
 800f218:	d11a      	bne.n	800f250 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	461a      	mov	r2, r3
 800f21e:	4bb2      	ldr	r3, [pc, #712]	@ (800f4e8 <debug_parse+0x610>)
 800f220:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 800f228:	4baf      	ldr	r3, [pc, #700]	@ (800f4e8 <debug_parse+0x610>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4619      	mov	r1, r3
 800f22e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f232:	461a      	mov	r2, r3
 800f234:	48ad      	ldr	r0, [pc, #692]	@ (800f4ec <debug_parse+0x614>)
 800f236:	f000 fa63 	bl	800f700 <DebugPrint>
			*debug_port = tempbyte;
 800f23a:	4bab      	ldr	r3, [pc, #684]	@ (800f4e8 <debug_parse+0x610>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800f242:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 800f244:	4ba8      	ldr	r3, [pc, #672]	@ (800f4e8 <debug_parse+0x610>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3301      	adds	r3, #1
 800f24a:	4aa7      	ldr	r2, [pc, #668]	@ (800f4e8 <debug_parse+0x610>)
 800f24c:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 800f24e:	e145      	b.n	800f4dc <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 800f250:	48a7      	ldr	r0, [pc, #668]	@ (800f4f0 <debug_parse+0x618>)
 800f252:	f000 fa3b 	bl	800f6cc <DebugSend>
		break;
 800f256:	e141      	b.n	800f4dc <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f258:	f107 031c 	add.w	r3, r7, #28
 800f25c:	461a      	mov	r2, r3
 800f25e:	49a5      	ldr	r1, [pc, #660]	@ (800f4f4 <debug_parse+0x61c>)
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 fb89 	bl	800f978 <siscanf>
		{
		}
		else
		{
		}
		break;
 800f266:	e139      	b.n	800f4dc <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f268:	f107 031c 	add.w	r3, r7, #28
 800f26c:	461a      	mov	r2, r3
 800f26e:	49a1      	ldr	r1, [pc, #644]	@ (800f4f4 <debug_parse+0x61c>)
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fb81 	bl	800f978 <siscanf>
 800f276:	4603      	mov	r3, r0
 800f278:	2b01      	cmp	r3, #1
 800f27a:	f000 8124 	beq.w	800f4c6 <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 800f27e:	4b9e      	ldr	r3, [pc, #632]	@ (800f4f8 <debug_parse+0x620>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	bf0c      	ite	eq
 800f286:	2301      	moveq	r3, #1
 800f288:	2300      	movne	r3, #0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b9a      	ldr	r3, [pc, #616]	@ (800f4f8 <debug_parse+0x620>)
 800f290:	701a      	strb	r2, [r3, #0]
			if (bTest)
 800f292:	4b99      	ldr	r3, [pc, #612]	@ (800f4f8 <debug_parse+0x620>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d003      	beq.n	800f2a2 <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 800f29a:	4898      	ldr	r0, [pc, #608]	@ (800f4fc <debug_parse+0x624>)
 800f29c:	f000 fa16 	bl	800f6cc <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 800f2a0:	e111      	b.n	800f4c6 <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 800f2a2:	4897      	ldr	r0, [pc, #604]	@ (800f500 <debug_parse+0x628>)
 800f2a4:	f000 fa12 	bl	800f6cc <DebugSend>
		break;
 800f2a8:	e10d      	b.n	800f4c6 <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 800f2aa:	f107 0318 	add.w	r3, r7, #24
 800f2ae:	f107 021c 	add.w	r2, r7, #28
 800f2b2:	4994      	ldr	r1, [pc, #592]	@ (800f504 <debug_parse+0x62c>)
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fb5f 	bl	800f978 <siscanf>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	f000 8104 	beq.w	800f4ca <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f2c2:	f107 031c 	add.w	r3, r7, #28
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	498a      	ldr	r1, [pc, #552]	@ (800f4f4 <debug_parse+0x61c>)
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 fb54 	bl	800f978 <siscanf>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	f040 80f9 	bne.w	800f4ca <debug_parse+0x5f2>
		{
			switch (temp1){
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	2b12      	cmp	r3, #18
 800f2dc:	f200 80f5 	bhi.w	800f4ca <debug_parse+0x5f2>
 800f2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f2e8 <debug_parse+0x410>)
 800f2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e6:	bf00      	nop
 800f2e8:	0800f335 	.word	0x0800f335
 800f2ec:	0800f335 	.word	0x0800f335
 800f2f0:	0800f335 	.word	0x0800f335
 800f2f4:	0800f335 	.word	0x0800f335
 800f2f8:	0800f335 	.word	0x0800f335
 800f2fc:	0800f335 	.word	0x0800f335
 800f300:	0800f335 	.word	0x0800f335
 800f304:	0800f335 	.word	0x0800f335
 800f308:	0800f335 	.word	0x0800f335
 800f30c:	0800f335 	.word	0x0800f335
 800f310:	0800f335 	.word	0x0800f335
 800f314:	0800f335 	.word	0x0800f335
 800f318:	0800f335 	.word	0x0800f335
 800f31c:	0800f335 	.word	0x0800f335
 800f320:	0800f335 	.word	0x0800f335
 800f324:	0800f335 	.word	0x0800f335
 800f328:	0800f335 	.word	0x0800f335
 800f32c:	0800f335 	.word	0x0800f335
 800f330:	0800f335 	.word	0x0800f335
			case 0:
				break;
 800f334:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 800f336:	e0c8      	b.n	800f4ca <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f338:	f107 031c 	add.w	r3, r7, #28
 800f33c:	461a      	mov	r2, r3
 800f33e:	496d      	ldr	r1, [pc, #436]	@ (800f4f4 <debug_parse+0x61c>)
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 fb19 	bl	800f978 <siscanf>
 800f346:	4603      	mov	r3, r0
 800f348:	2b01      	cmp	r3, #1
 800f34a:	f040 80c0 	bne.w	800f4ce <debug_parse+0x5f6>
		{
			switch (temp1){
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	2b09      	cmp	r3, #9
 800f352:	f200 80bc 	bhi.w	800f4ce <debug_parse+0x5f6>
 800f356:	a201      	add	r2, pc, #4	@ (adr r2, 800f35c <debug_parse+0x484>)
 800f358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f35c:	0800f385 	.word	0x0800f385
 800f360:	0800f385 	.word	0x0800f385
 800f364:	0800f385 	.word	0x0800f385
 800f368:	0800f385 	.word	0x0800f385
 800f36c:	0800f385 	.word	0x0800f385
 800f370:	0800f385 	.word	0x0800f385
 800f374:	0800f385 	.word	0x0800f385
 800f378:	0800f385 	.word	0x0800f385
 800f37c:	0800f385 	.word	0x0800f385
 800f380:	0800f385 	.word	0x0800f385
			case 0:	//V0
				break;
 800f384:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 800f386:	e0a2      	b.n	800f4ce <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 800f388:	f107 0318 	add.w	r3, r7, #24
 800f38c:	f107 021c 	add.w	r2, r7, #28
 800f390:	4954      	ldr	r1, [pc, #336]	@ (800f4e4 <debug_parse+0x60c>)
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 faf0 	bl	800f978 <siscanf>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d119      	bne.n	800f3d2 <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	f023 0301 	bic.w	r3, r3, #1
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4b50      	ldr	r3, [pc, #320]	@ (800f4e8 <debug_parse+0x610>)
 800f3a8:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 800f3ae:	4b4e      	ldr	r3, [pc, #312]	@ (800f4e8 <debug_parse+0x610>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4853      	ldr	r0, [pc, #332]	@ (800f508 <debug_parse+0x630>)
 800f3ba:	f000 f9a1 	bl	800f700 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 800f3be:	4b4a      	ldr	r3, [pc, #296]	@ (800f4e8 <debug_parse+0x610>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f3c4:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 800f3c6:	4b48      	ldr	r3, [pc, #288]	@ (800f4e8 <debug_parse+0x610>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	3302      	adds	r3, #2
 800f3cc:	4a46      	ldr	r2, [pc, #280]	@ (800f4e8 <debug_parse+0x610>)
 800f3ce:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 800f3d0:	e07f      	b.n	800f4d2 <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f3d2:	f107 031c 	add.w	r3, r7, #28
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	4946      	ldr	r1, [pc, #280]	@ (800f4f4 <debug_parse+0x61c>)
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 facc 	bl	800f978 <siscanf>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d175      	bne.n	800f4d2 <debug_parse+0x5fa>
			switch (temp1){
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	2b09      	cmp	r3, #9
 800f3ea:	d872      	bhi.n	800f4d2 <debug_parse+0x5fa>
 800f3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f4 <debug_parse+0x51c>)
 800f3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f2:	bf00      	nop
 800f3f4:	0800f41d 	.word	0x0800f41d
 800f3f8:	0800f41d 	.word	0x0800f41d
 800f3fc:	0800f41d 	.word	0x0800f41d
 800f400:	0800f41d 	.word	0x0800f41d
 800f404:	0800f41d 	.word	0x0800f41d
 800f408:	0800f41d 	.word	0x0800f41d
 800f40c:	0800f41d 	.word	0x0800f41d
 800f410:	0800f41d 	.word	0x0800f41d
 800f414:	0800f41d 	.word	0x0800f41d
 800f418:	0800f41d 	.word	0x0800f41d
			break;
 800f41c:	bf00      	nop
		break;
 800f41e:	e058      	b.n	800f4d2 <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f420:	f107 031c 	add.w	r3, r7, #28
 800f424:	461a      	mov	r2, r3
 800f426:	4933      	ldr	r1, [pc, #204]	@ (800f4f4 <debug_parse+0x61c>)
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 faa5 	bl	800f978 <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 800f42e:	e055      	b.n	800f4dc <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 800f430:	f107 0318 	add.w	r3, r7, #24
 800f434:	f107 021c 	add.w	r2, r7, #28
 800f438:	4934      	ldr	r1, [pc, #208]	@ (800f50c <debug_parse+0x634>)
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fa9c 	bl	800f978 <siscanf>
 800f440:	4603      	mov	r3, r0
 800f442:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	2b0f      	cmp	r3, #15
 800f448:	d845      	bhi.n	800f4d6 <debug_parse+0x5fe>
 800f44a:	a201      	add	r2, pc, #4	@ (adr r2, 800f450 <debug_parse+0x578>)
 800f44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f450:	0800f491 	.word	0x0800f491
 800f454:	0800f491 	.word	0x0800f491
 800f458:	0800f491 	.word	0x0800f491
 800f45c:	0800f491 	.word	0x0800f491
 800f460:	0800f491 	.word	0x0800f491
 800f464:	0800f491 	.word	0x0800f491
 800f468:	0800f491 	.word	0x0800f491
 800f46c:	0800f491 	.word	0x0800f491
 800f470:	0800f491 	.word	0x0800f491
 800f474:	0800f491 	.word	0x0800f491
 800f478:	0800f491 	.word	0x0800f491
 800f47c:	0800f491 	.word	0x0800f491
 800f480:	0800f491 	.word	0x0800f491
 800f484:	0800f491 	.word	0x0800f491
 800f488:	0800f491 	.word	0x0800f491
 800f48c:	0800f491 	.word	0x0800f491
			case 0:	//Y0
				{
				}
				break;
 800f490:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 800f492:	e020      	b.n	800f4d6 <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 800f494:	f107 0318 	add.w	r3, r7, #24
 800f498:	f107 021c 	add.w	r2, r7, #28
 800f49c:	491c      	ldr	r1, [pc, #112]	@ (800f510 <debug_parse+0x638>)
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fa6a 	bl	800f978 <siscanf>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d017      	beq.n	800f4da <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 800f4aa:	f107 031c 	add.w	r3, r7, #28
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	4918      	ldr	r1, [pc, #96]	@ (800f514 <debug_parse+0x63c>)
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fa60 	bl	800f978 <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 800f4b8:	e00f      	b.n	800f4da <debug_parse+0x602>
		break;
 800f4ba:	bf00      	nop
 800f4bc:	e00e      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4be:	bf00      	nop
 800f4c0:	e00c      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4c2:	bf00      	nop
 800f4c4:	e00a      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4c6:	bf00      	nop
 800f4c8:	e008      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4ca:	bf00      	nop
 800f4cc:	e006      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4ce:	bf00      	nop
 800f4d0:	e004      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4d2:	bf00      	nop
 800f4d4:	e002      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4d6:	bf00      	nop
 800f4d8:	e000      	b.n	800f4dc <debug_parse+0x604>
		break;
 800f4da:	bf00      	nop
	default:
		;
	}
}
 800f4dc:	bf00      	nop
 800f4de:	3730      	adds	r7, #48	@ 0x30
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	08010cf8 	.word	0x08010cf8
 800f4e8:	2400010c 	.word	0x2400010c
 800f4ec:	08010d00 	.word	0x08010d00
 800f4f0:	08010c44 	.word	0x08010c44
 800f4f4:	08010d10 	.word	0x08010d10
 800f4f8:	24001eec 	.word	0x24001eec
 800f4fc:	08010d14 	.word	0x08010d14
 800f500:	08010d20 	.word	0x08010d20
 800f504:	08010d30 	.word	0x08010d30
 800f508:	08010d38 	.word	0x08010d38
 800f50c:	08010d48 	.word	0x08010d48
 800f510:	08010d50 	.word	0x08010d50
 800f514:	08010d58 	.word	0x08010d58

0800f518 <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	2b0d      	cmp	r3, #13
 800f526:	d003      	beq.n	800f530 <debug_rcv+0x18>
 800f528:	4b21      	ldr	r3, [pc, #132]	@ (800f5b0 <debug_rcv+0x98>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2bff      	cmp	r3, #255	@ 0xff
 800f52e:	d112      	bne.n	800f556 <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 800f530:	4b1f      	ldr	r3, [pc, #124]	@ (800f5b0 <debug_rcv+0x98>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a1f      	ldr	r2, [pc, #124]	@ (800f5b4 <debug_rcv+0x9c>)
 800f536:	2100      	movs	r1, #0
 800f538:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 800f53a:	4b1d      	ldr	r3, [pc, #116]	@ (800f5b0 <debug_rcv+0x98>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 800f542:	481c      	ldr	r0, [pc, #112]	@ (800f5b4 <debug_rcv+0x9c>)
 800f544:	f7ff fcc8 	bl	800eed8 <debug_parse>
		}
		lineptr = 0;
 800f548:	4b19      	ldr	r3, [pc, #100]	@ (800f5b0 <debug_rcv+0x98>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 800f54e:	481a      	ldr	r0, [pc, #104]	@ (800f5b8 <debug_rcv+0xa0>)
 800f550:	f000 f8bc 	bl	800f6cc <DebugSend>
 800f554:	e027      	b.n	800f5a6 <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 800f556:	79fb      	ldrb	r3, [r7, #7]
 800f558:	3301      	adds	r3, #1
 800f55a:	4a18      	ldr	r2, [pc, #96]	@ (800f5bc <debug_rcv+0xa4>)
 800f55c:	4413      	add	r3, r2
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b00      	cmp	r3, #0
 800f566:	d010      	beq.n	800f58a <debug_rcv+0x72>
	{
		switch (ch)
 800f568:	79fb      	ldrb	r3, [r7, #7]
 800f56a:	2b08      	cmp	r3, #8
 800f56c:	d11b      	bne.n	800f5a6 <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 800f56e:	4b10      	ldr	r3, [pc, #64]	@ (800f5b0 <debug_rcv+0x98>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d016      	beq.n	800f5a4 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 800f576:	79fb      	ldrb	r3, [r7, #7]
 800f578:	4618      	mov	r0, r3
 800f57a:	f000 f865 	bl	800f648 <DebugPutChar>
				lineptr--;
 800f57e:	4b0c      	ldr	r3, [pc, #48]	@ (800f5b0 <debug_rcv+0x98>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3b01      	subs	r3, #1
 800f584:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b0 <debug_rcv+0x98>)
 800f586:	6013      	str	r3, [r2, #0]
			}
			break;
 800f588:	e00c      	b.n	800f5a4 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 800f58a:	4b09      	ldr	r3, [pc, #36]	@ (800f5b0 <debug_rcv+0x98>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	4907      	ldr	r1, [pc, #28]	@ (800f5b0 <debug_rcv+0x98>)
 800f592:	600a      	str	r2, [r1, #0]
 800f594:	4907      	ldr	r1, [pc, #28]	@ (800f5b4 <debug_rcv+0x9c>)
 800f596:	79fa      	ldrb	r2, [r7, #7]
 800f598:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 800f59a:	79fb      	ldrb	r3, [r7, #7]
 800f59c:	4618      	mov	r0, r3
 800f59e:	f000 f853 	bl	800f648 <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 800f5a2:	e000      	b.n	800f5a6 <debug_rcv+0x8e>
			break;
 800f5a4:	bf00      	nop
}
 800f5a6:	bf00      	nop
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	24002ff8 	.word	0x24002ff8
 800f5b4:	24002ffc 	.word	0x24002ffc
 800f5b8:	08010d5c 	.word	0x08010d5c
 800f5bc:	08010db4 	.word	0x08010db4

0800f5c0 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
	if (!InDebug) {
 800f5c6:	4b1c      	ldr	r3, [pc, #112]	@ (800f638 <DebugTask+0x78>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d12d      	bne.n	800f62a <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 800f5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f638 <DebugTask+0x78>)
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 800f5d4:	4b19      	ldr	r3, [pc, #100]	@ (800f63c <DebugTask+0x7c>)
 800f5d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f5da:	4b19      	ldr	r3, [pc, #100]	@ (800f640 <DebugTask+0x80>)
 800f5dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d01f      	beq.n	800f624 <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 800f5e4:	4b16      	ldr	r3, [pc, #88]	@ (800f640 <DebugTask+0x80>)
 800f5e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f5ea:	b293      	uxth	r3, r2
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	b219      	sxth	r1, r3
 800f5f2:	4b13      	ldr	r3, [pc, #76]	@ (800f640 <DebugTask+0x80>)
 800f5f4:	8019      	strh	r1, [r3, #0]
 800f5f6:	4b13      	ldr	r3, [pc, #76]	@ (800f644 <DebugTask+0x84>)
 800f5f8:	5c9b      	ldrb	r3, [r3, r2]
 800f5fa:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 800f5fc:	4b10      	ldr	r3, [pc, #64]	@ (800f640 <DebugTask+0x80>)
 800f5fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f602:	2bff      	cmp	r3, #255	@ 0xff
 800f604:	dd02      	ble.n	800f60c <DebugTask+0x4c>
 800f606:	4b0e      	ldr	r3, [pc, #56]	@ (800f640 <DebugTask+0x80>)
 800f608:	2200      	movs	r2, #0
 800f60a:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7ff ff82 	bl	800f518 <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 800f614:	4b09      	ldr	r3, [pc, #36]	@ (800f63c <DebugTask+0x7c>)
 800f616:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f61a:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <DebugTask+0x80>)
 800f61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f620:	429a      	cmp	r2, r3
 800f622:	d1df      	bne.n	800f5e4 <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 800f624:	4b04      	ldr	r3, [pc, #16]	@ (800f638 <DebugTask+0x78>)
 800f626:	2200      	movs	r2, #0
 800f628:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 800f62a:	f000 f881 	bl	800f730 <DoDebugSerial>
#endif
}
 800f62e:	bf00      	nop
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	240030fc 	.word	0x240030fc
 800f63c:	24001ff0 	.word	0x24001ff0
 800f640:	24001ff2 	.word	0x24001ff2
 800f644:	24001ef0 	.word	0x24001ef0

0800f648 <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 800f652:	4b1b      	ldr	r3, [pc, #108]	@ (800f6c0 <DebugPutChar+0x78>)
 800f654:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f658:	b293      	uxth	r3, r2
 800f65a:	3301      	adds	r3, #1
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	b219      	sxth	r1, r3
 800f660:	4b17      	ldr	r3, [pc, #92]	@ (800f6c0 <DebugPutChar+0x78>)
 800f662:	8019      	strh	r1, [r3, #0]
 800f664:	4611      	mov	r1, r2
 800f666:	4a17      	ldr	r2, [pc, #92]	@ (800f6c4 <DebugPutChar+0x7c>)
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 800f66c:	4b14      	ldr	r3, [pc, #80]	@ (800f6c0 <DebugPutChar+0x78>)
 800f66e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f672:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f676:	db02      	blt.n	800f67e <DebugPutChar+0x36>
 800f678:	4b11      	ldr	r3, [pc, #68]	@ (800f6c0 <DebugPutChar+0x78>)
 800f67a:	2200      	movs	r2, #0
 800f67c:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 800f67e:	4b10      	ldr	r3, [pc, #64]	@ (800f6c0 <DebugPutChar+0x78>)
 800f680:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f684:	4b10      	ldr	r3, [pc, #64]	@ (800f6c8 <DebugPutChar+0x80>)
 800f686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d111      	bne.n	800f6b2 <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 800f68e:	4b0e      	ldr	r3, [pc, #56]	@ (800f6c8 <DebugPutChar+0x80>)
 800f690:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f694:	b29b      	uxth	r3, r3
 800f696:	3301      	adds	r3, #1
 800f698:	b29b      	uxth	r3, r3
 800f69a:	b21a      	sxth	r2, r3
 800f69c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c8 <DebugPutChar+0x80>)
 800f69e:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 800f6a0:	4b09      	ldr	r3, [pc, #36]	@ (800f6c8 <DebugPutChar+0x80>)
 800f6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f6aa:	db02      	blt.n	800f6b2 <DebugPutChar+0x6a>
 800f6ac:	4b06      	ldr	r3, [pc, #24]	@ (800f6c8 <DebugPutChar+0x80>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	240027f4 	.word	0x240027f4
 800f6c4:	24001ff4 	.word	0x24001ff4
 800f6c8:	240027f6 	.word	0x240027f6

0800f6cc <DebugSend>:

void DebugSend(char *message)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
	char ch = *message;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 800f6da:	e009      	b.n	800f6f0 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7ff ffb2 	bl	800f648 <DebugPutChar>
		message++;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	607b      	str	r3, [r7, #4]
		ch = *message;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 800f6f0:	7bfb      	ldrb	r3, [r7, #15]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f2      	bne.n	800f6dc <DebugSend+0x10>
	}
}
 800f6f6:	bf00      	nop
 800f6f8:	bf00      	nop
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 800f700:	b40f      	push	{r0, r1, r2, r3}
 800f702:	b580      	push	{r7, lr}
 800f704:	b096      	sub	sp, #88	@ 0x58
 800f706:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 800f708:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f70c:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 800f70e:	1d3b      	adds	r3, r7, #4
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f714:	4618      	mov	r0, r3
 800f716:	f000 f971 	bl	800f9fc <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 800f71a:	1d3b      	adds	r3, r7, #4
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7ff ffd5 	bl	800f6cc <DebugSend>
}
 800f722:	bf00      	nop
 800f724:	3758      	adds	r7, #88	@ 0x58
 800f726:	46bd      	mov	sp, r7
 800f728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f72c:	b004      	add	sp, #16
 800f72e:	4770      	bx	lr

0800f730 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 800f736:	4b28      	ldr	r3, [pc, #160]	@ (800f7d8 <DoDebugSerial+0xa8>)
 800f738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f73c:	4b27      	ldr	r3, [pc, #156]	@ (800f7dc <DoDebugSerial+0xac>)
 800f73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f742:	429a      	cmp	r2, r3
 800f744:	d043      	beq.n	800f7ce <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 800f746:	4b24      	ldr	r3, [pc, #144]	@ (800f7d8 <DoDebugSerial+0xa8>)
 800f748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	4b23      	ldr	r3, [pc, #140]	@ (800f7dc <DoDebugSerial+0xac>)
 800f750:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f754:	b29b      	uxth	r3, r3
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	b29b      	uxth	r3, r3
 800f75a:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 800f75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f760:	2b00      	cmp	r3, #0
 800f762:	da04      	bge.n	800f76e <DoDebugSerial+0x3e>
 800f764:	88fb      	ldrh	r3, [r7, #6]
 800f766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 800f76e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f776:	dd02      	ble.n	800f77e <DoDebugSerial+0x4e>
 800f778:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f77c:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 800f77e:	2300      	movs	r3, #0
 800f780:	80bb      	strh	r3, [r7, #4]
 800f782:	e01a      	b.n	800f7ba <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 800f784:	4b15      	ldr	r3, [pc, #84]	@ (800f7dc <DoDebugSerial+0xac>)
 800f786:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f78a:	b293      	uxth	r3, r2
 800f78c:	3301      	adds	r3, #1
 800f78e:	b29b      	uxth	r3, r3
 800f790:	b219      	sxth	r1, r3
 800f792:	4b12      	ldr	r3, [pc, #72]	@ (800f7dc <DoDebugSerial+0xac>)
 800f794:	8019      	strh	r1, [r3, #0]
 800f796:	4611      	mov	r1, r2
 800f798:	88bb      	ldrh	r3, [r7, #4]
 800f79a:	4a11      	ldr	r2, [pc, #68]	@ (800f7e0 <DoDebugSerial+0xb0>)
 800f79c:	5c51      	ldrb	r1, [r2, r1]
 800f79e:	4a11      	ldr	r2, [pc, #68]	@ (800f7e4 <DoDebugSerial+0xb4>)
 800f7a0:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 800f7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f7dc <DoDebugSerial+0xac>)
 800f7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7ac:	db02      	blt.n	800f7b4 <DoDebugSerial+0x84>
 800f7ae:	4b0b      	ldr	r3, [pc, #44]	@ (800f7dc <DoDebugSerial+0xac>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 800f7b4:	88bb      	ldrh	r3, [r7, #4]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	80bb      	strh	r3, [r7, #4]
 800f7ba:	88ba      	ldrh	r2, [r7, #4]
 800f7bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	dbdf      	blt.n	800f784 <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4806      	ldr	r0, [pc, #24]	@ (800f7e4 <DoDebugSerial+0xb4>)
 800f7ca:	f7fe fe8c 	bl	800e4e6 <USB_Transmit>
	}
}
 800f7ce:	bf00      	nop
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	240027f4 	.word	0x240027f4
 800f7dc:	240027f6 	.word	0x240027f6
 800f7e0:	24001ff4 	.word	0x24001ff4
 800f7e4:	240027f8 	.word	0x240027f8

0800f7e8 <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	81fb      	strh	r3, [r7, #14]
 800f7f8:	e033      	b.n	800f862 <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 800f7fa:	89fb      	ldrh	r3, [r7, #14]
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	4413      	add	r3, r2
 800f800:	4a1d      	ldr	r2, [pc, #116]	@ (800f878 <USB_Receive+0x90>)
 800f802:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f806:	b28a      	uxth	r2, r1
 800f808:	3201      	adds	r2, #1
 800f80a:	b292      	uxth	r2, r2
 800f80c:	b210      	sxth	r0, r2
 800f80e:	4a1a      	ldr	r2, [pc, #104]	@ (800f878 <USB_Receive+0x90>)
 800f810:	8010      	strh	r0, [r2, #0]
 800f812:	460a      	mov	r2, r1
 800f814:	7819      	ldrb	r1, [r3, #0]
 800f816:	4b19      	ldr	r3, [pc, #100]	@ (800f87c <USB_Receive+0x94>)
 800f818:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 800f81a:	4b17      	ldr	r3, [pc, #92]	@ (800f878 <USB_Receive+0x90>)
 800f81c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f820:	2bff      	cmp	r3, #255	@ 0xff
 800f822:	dd02      	ble.n	800f82a <USB_Receive+0x42>
 800f824:	4b14      	ldr	r3, [pc, #80]	@ (800f878 <USB_Receive+0x90>)
 800f826:	2200      	movs	r2, #0
 800f828:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 800f82a:	4b13      	ldr	r3, [pc, #76]	@ (800f878 <USB_Receive+0x90>)
 800f82c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f830:	4b13      	ldr	r3, [pc, #76]	@ (800f880 <USB_Receive+0x98>)
 800f832:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f836:	429a      	cmp	r2, r3
 800f838:	d110      	bne.n	800f85c <USB_Receive+0x74>
			dbg_rx_tail++;
 800f83a:	4b11      	ldr	r3, [pc, #68]	@ (800f880 <USB_Receive+0x98>)
 800f83c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f840:	b29b      	uxth	r3, r3
 800f842:	3301      	adds	r3, #1
 800f844:	b29b      	uxth	r3, r3
 800f846:	b21a      	sxth	r2, r3
 800f848:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <USB_Receive+0x98>)
 800f84a:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 800f84c:	4b0c      	ldr	r3, [pc, #48]	@ (800f880 <USB_Receive+0x98>)
 800f84e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f852:	2bff      	cmp	r3, #255	@ 0xff
 800f854:	dd02      	ble.n	800f85c <USB_Receive+0x74>
 800f856:	4b0a      	ldr	r3, [pc, #40]	@ (800f880 <USB_Receive+0x98>)
 800f858:	2200      	movs	r2, #0
 800f85a:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 800f85c:	89fb      	ldrh	r3, [r7, #14]
 800f85e:	3301      	adds	r3, #1
 800f860:	81fb      	strh	r3, [r7, #14]
 800f862:	89fa      	ldrh	r2, [r7, #14]
 800f864:	887b      	ldrh	r3, [r7, #2]
 800f866:	429a      	cmp	r2, r3
 800f868:	d3c7      	bcc.n	800f7fa <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	24001ff0 	.word	0x24001ff0
 800f87c:	24001ef0 	.word	0x24001ef0
 800f880:	24001ff2 	.word	0x24001ff2

0800f884 <_strtoul_l.constprop.0>:
 800f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f888:	4e34      	ldr	r6, [pc, #208]	@ (800f95c <_strtoul_l.constprop.0+0xd8>)
 800f88a:	4686      	mov	lr, r0
 800f88c:	460d      	mov	r5, r1
 800f88e:	4628      	mov	r0, r5
 800f890:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f894:	5d37      	ldrb	r7, [r6, r4]
 800f896:	f017 0708 	ands.w	r7, r7, #8
 800f89a:	d1f8      	bne.n	800f88e <_strtoul_l.constprop.0+0xa>
 800f89c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f89e:	d12f      	bne.n	800f900 <_strtoul_l.constprop.0+0x7c>
 800f8a0:	782c      	ldrb	r4, [r5, #0]
 800f8a2:	2701      	movs	r7, #1
 800f8a4:	1c85      	adds	r5, r0, #2
 800f8a6:	f033 0010 	bics.w	r0, r3, #16
 800f8aa:	d109      	bne.n	800f8c0 <_strtoul_l.constprop.0+0x3c>
 800f8ac:	2c30      	cmp	r4, #48	@ 0x30
 800f8ae:	d12c      	bne.n	800f90a <_strtoul_l.constprop.0+0x86>
 800f8b0:	7828      	ldrb	r0, [r5, #0]
 800f8b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f8b6:	2858      	cmp	r0, #88	@ 0x58
 800f8b8:	d127      	bne.n	800f90a <_strtoul_l.constprop.0+0x86>
 800f8ba:	786c      	ldrb	r4, [r5, #1]
 800f8bc:	2310      	movs	r3, #16
 800f8be:	3502      	adds	r5, #2
 800f8c0:	f04f 38ff 	mov.w	r8, #4294967295
 800f8c4:	2600      	movs	r6, #0
 800f8c6:	fbb8 f8f3 	udiv	r8, r8, r3
 800f8ca:	fb03 f908 	mul.w	r9, r3, r8
 800f8ce:	ea6f 0909 	mvn.w	r9, r9
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f8d8:	f1bc 0f09 	cmp.w	ip, #9
 800f8dc:	d81c      	bhi.n	800f918 <_strtoul_l.constprop.0+0x94>
 800f8de:	4664      	mov	r4, ip
 800f8e0:	42a3      	cmp	r3, r4
 800f8e2:	dd2a      	ble.n	800f93a <_strtoul_l.constprop.0+0xb6>
 800f8e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f8e8:	d007      	beq.n	800f8fa <_strtoul_l.constprop.0+0x76>
 800f8ea:	4580      	cmp	r8, r0
 800f8ec:	d322      	bcc.n	800f934 <_strtoul_l.constprop.0+0xb0>
 800f8ee:	d101      	bne.n	800f8f4 <_strtoul_l.constprop.0+0x70>
 800f8f0:	45a1      	cmp	r9, r4
 800f8f2:	db1f      	blt.n	800f934 <_strtoul_l.constprop.0+0xb0>
 800f8f4:	fb00 4003 	mla	r0, r0, r3, r4
 800f8f8:	2601      	movs	r6, #1
 800f8fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8fe:	e7e9      	b.n	800f8d4 <_strtoul_l.constprop.0+0x50>
 800f900:	2c2b      	cmp	r4, #43	@ 0x2b
 800f902:	bf04      	itt	eq
 800f904:	782c      	ldrbeq	r4, [r5, #0]
 800f906:	1c85      	addeq	r5, r0, #2
 800f908:	e7cd      	b.n	800f8a6 <_strtoul_l.constprop.0+0x22>
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1d8      	bne.n	800f8c0 <_strtoul_l.constprop.0+0x3c>
 800f90e:	2c30      	cmp	r4, #48	@ 0x30
 800f910:	bf0c      	ite	eq
 800f912:	2308      	moveq	r3, #8
 800f914:	230a      	movne	r3, #10
 800f916:	e7d3      	b.n	800f8c0 <_strtoul_l.constprop.0+0x3c>
 800f918:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f91c:	f1bc 0f19 	cmp.w	ip, #25
 800f920:	d801      	bhi.n	800f926 <_strtoul_l.constprop.0+0xa2>
 800f922:	3c37      	subs	r4, #55	@ 0x37
 800f924:	e7dc      	b.n	800f8e0 <_strtoul_l.constprop.0+0x5c>
 800f926:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f92a:	f1bc 0f19 	cmp.w	ip, #25
 800f92e:	d804      	bhi.n	800f93a <_strtoul_l.constprop.0+0xb6>
 800f930:	3c57      	subs	r4, #87	@ 0x57
 800f932:	e7d5      	b.n	800f8e0 <_strtoul_l.constprop.0+0x5c>
 800f934:	f04f 36ff 	mov.w	r6, #4294967295
 800f938:	e7df      	b.n	800f8fa <_strtoul_l.constprop.0+0x76>
 800f93a:	1c73      	adds	r3, r6, #1
 800f93c:	d106      	bne.n	800f94c <_strtoul_l.constprop.0+0xc8>
 800f93e:	2322      	movs	r3, #34	@ 0x22
 800f940:	f8ce 3000 	str.w	r3, [lr]
 800f944:	4630      	mov	r0, r6
 800f946:	b932      	cbnz	r2, 800f956 <_strtoul_l.constprop.0+0xd2>
 800f948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f94c:	b107      	cbz	r7, 800f950 <_strtoul_l.constprop.0+0xcc>
 800f94e:	4240      	negs	r0, r0
 800f950:	2a00      	cmp	r2, #0
 800f952:	d0f9      	beq.n	800f948 <_strtoul_l.constprop.0+0xc4>
 800f954:	b106      	cbz	r6, 800f958 <_strtoul_l.constprop.0+0xd4>
 800f956:	1e69      	subs	r1, r5, #1
 800f958:	6011      	str	r1, [r2, #0]
 800f95a:	e7f5      	b.n	800f948 <_strtoul_l.constprop.0+0xc4>
 800f95c:	08010db5 	.word	0x08010db5

0800f960 <_strtoul_r>:
 800f960:	f7ff bf90 	b.w	800f884 <_strtoul_l.constprop.0>

0800f964 <strtoul>:
 800f964:	4613      	mov	r3, r2
 800f966:	460a      	mov	r2, r1
 800f968:	4601      	mov	r1, r0
 800f96a:	4802      	ldr	r0, [pc, #8]	@ (800f974 <strtoul+0x10>)
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	f7ff bf89 	b.w	800f884 <_strtoul_l.constprop.0>
 800f972:	bf00      	nop
 800f974:	24000110 	.word	0x24000110

0800f978 <siscanf>:
 800f978:	b40e      	push	{r1, r2, r3}
 800f97a:	b530      	push	{r4, r5, lr}
 800f97c:	b09c      	sub	sp, #112	@ 0x70
 800f97e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f980:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f984:	f854 5b04 	ldr.w	r5, [r4], #4
 800f988:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f98c:	9002      	str	r0, [sp, #8]
 800f98e:	9006      	str	r0, [sp, #24]
 800f990:	f7f0 fca6 	bl	80002e0 <strlen>
 800f994:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c4 <siscanf+0x4c>)
 800f996:	9003      	str	r0, [sp, #12]
 800f998:	9007      	str	r0, [sp, #28]
 800f99a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f99c:	480a      	ldr	r0, [pc, #40]	@ (800f9c8 <siscanf+0x50>)
 800f99e:	9401      	str	r4, [sp, #4]
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9a4:	9314      	str	r3, [sp, #80]	@ 0x50
 800f9a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	4623      	mov	r3, r4
 800f9b2:	a902      	add	r1, sp, #8
 800f9b4:	6800      	ldr	r0, [r0, #0]
 800f9b6:	f000 fb07 	bl	800ffc8 <__ssvfiscanf_r>
 800f9ba:	b01c      	add	sp, #112	@ 0x70
 800f9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9c0:	b003      	add	sp, #12
 800f9c2:	4770      	bx	lr
 800f9c4:	0800f9cd 	.word	0x0800f9cd
 800f9c8:	24000110 	.word	0x24000110

0800f9cc <__seofread>:
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	4770      	bx	lr

0800f9d0 <_vsiprintf_r>:
 800f9d0:	b500      	push	{lr}
 800f9d2:	b09b      	sub	sp, #108	@ 0x6c
 800f9d4:	9100      	str	r1, [sp, #0]
 800f9d6:	9104      	str	r1, [sp, #16]
 800f9d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f9dc:	9105      	str	r1, [sp, #20]
 800f9de:	9102      	str	r1, [sp, #8]
 800f9e0:	4905      	ldr	r1, [pc, #20]	@ (800f9f8 <_vsiprintf_r+0x28>)
 800f9e2:	9103      	str	r1, [sp, #12]
 800f9e4:	4669      	mov	r1, sp
 800f9e6:	f000 f99b 	bl	800fd20 <_svfiprintf_r>
 800f9ea:	9b00      	ldr	r3, [sp, #0]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	b01b      	add	sp, #108	@ 0x6c
 800f9f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9f6:	bf00      	nop
 800f9f8:	ffff0208 	.word	0xffff0208

0800f9fc <vsiprintf>:
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	460a      	mov	r2, r1
 800fa00:	4601      	mov	r1, r0
 800fa02:	4802      	ldr	r0, [pc, #8]	@ (800fa0c <vsiprintf+0x10>)
 800fa04:	6800      	ldr	r0, [r0, #0]
 800fa06:	f7ff bfe3 	b.w	800f9d0 <_vsiprintf_r>
 800fa0a:	bf00      	nop
 800fa0c:	24000110 	.word	0x24000110

0800fa10 <memset>:
 800fa10:	4402      	add	r2, r0
 800fa12:	4603      	mov	r3, r0
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d100      	bne.n	800fa1a <memset+0xa>
 800fa18:	4770      	bx	lr
 800fa1a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa1e:	e7f9      	b.n	800fa14 <memset+0x4>

0800fa20 <__errno>:
 800fa20:	4b01      	ldr	r3, [pc, #4]	@ (800fa28 <__errno+0x8>)
 800fa22:	6818      	ldr	r0, [r3, #0]
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	24000110 	.word	0x24000110

0800fa2c <__libc_init_array>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	4d0d      	ldr	r5, [pc, #52]	@ (800fa64 <__libc_init_array+0x38>)
 800fa30:	4c0d      	ldr	r4, [pc, #52]	@ (800fa68 <__libc_init_array+0x3c>)
 800fa32:	1b64      	subs	r4, r4, r5
 800fa34:	10a4      	asrs	r4, r4, #2
 800fa36:	2600      	movs	r6, #0
 800fa38:	42a6      	cmp	r6, r4
 800fa3a:	d109      	bne.n	800fa50 <__libc_init_array+0x24>
 800fa3c:	4d0b      	ldr	r5, [pc, #44]	@ (800fa6c <__libc_init_array+0x40>)
 800fa3e:	4c0c      	ldr	r4, [pc, #48]	@ (800fa70 <__libc_init_array+0x44>)
 800fa40:	f001 f870 	bl	8010b24 <_init>
 800fa44:	1b64      	subs	r4, r4, r5
 800fa46:	10a4      	asrs	r4, r4, #2
 800fa48:	2600      	movs	r6, #0
 800fa4a:	42a6      	cmp	r6, r4
 800fa4c:	d105      	bne.n	800fa5a <__libc_init_array+0x2e>
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa54:	4798      	blx	r3
 800fa56:	3601      	adds	r6, #1
 800fa58:	e7ee      	b.n	800fa38 <__libc_init_array+0xc>
 800fa5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa5e:	4798      	blx	r3
 800fa60:	3601      	adds	r6, #1
 800fa62:	e7f2      	b.n	800fa4a <__libc_init_array+0x1e>
 800fa64:	08010f0c 	.word	0x08010f0c
 800fa68:	08010f0c 	.word	0x08010f0c
 800fa6c:	08010f0c 	.word	0x08010f0c
 800fa70:	08010f10 	.word	0x08010f10

0800fa74 <__retarget_lock_acquire_recursive>:
 800fa74:	4770      	bx	lr

0800fa76 <__retarget_lock_release_recursive>:
 800fa76:	4770      	bx	lr

0800fa78 <_free_r>:
 800fa78:	b538      	push	{r3, r4, r5, lr}
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	2900      	cmp	r1, #0
 800fa7e:	d041      	beq.n	800fb04 <_free_r+0x8c>
 800fa80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa84:	1f0c      	subs	r4, r1, #4
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	bfb8      	it	lt
 800fa8a:	18e4      	addlt	r4, r4, r3
 800fa8c:	f000 f8e0 	bl	800fc50 <__malloc_lock>
 800fa90:	4a1d      	ldr	r2, [pc, #116]	@ (800fb08 <_free_r+0x90>)
 800fa92:	6813      	ldr	r3, [r2, #0]
 800fa94:	b933      	cbnz	r3, 800faa4 <_free_r+0x2c>
 800fa96:	6063      	str	r3, [r4, #4]
 800fa98:	6014      	str	r4, [r2, #0]
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faa0:	f000 b8dc 	b.w	800fc5c <__malloc_unlock>
 800faa4:	42a3      	cmp	r3, r4
 800faa6:	d908      	bls.n	800faba <_free_r+0x42>
 800faa8:	6820      	ldr	r0, [r4, #0]
 800faaa:	1821      	adds	r1, r4, r0
 800faac:	428b      	cmp	r3, r1
 800faae:	bf01      	itttt	eq
 800fab0:	6819      	ldreq	r1, [r3, #0]
 800fab2:	685b      	ldreq	r3, [r3, #4]
 800fab4:	1809      	addeq	r1, r1, r0
 800fab6:	6021      	streq	r1, [r4, #0]
 800fab8:	e7ed      	b.n	800fa96 <_free_r+0x1e>
 800faba:	461a      	mov	r2, r3
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	b10b      	cbz	r3, 800fac4 <_free_r+0x4c>
 800fac0:	42a3      	cmp	r3, r4
 800fac2:	d9fa      	bls.n	800faba <_free_r+0x42>
 800fac4:	6811      	ldr	r1, [r2, #0]
 800fac6:	1850      	adds	r0, r2, r1
 800fac8:	42a0      	cmp	r0, r4
 800faca:	d10b      	bne.n	800fae4 <_free_r+0x6c>
 800facc:	6820      	ldr	r0, [r4, #0]
 800face:	4401      	add	r1, r0
 800fad0:	1850      	adds	r0, r2, r1
 800fad2:	4283      	cmp	r3, r0
 800fad4:	6011      	str	r1, [r2, #0]
 800fad6:	d1e0      	bne.n	800fa9a <_free_r+0x22>
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	6053      	str	r3, [r2, #4]
 800fade:	4408      	add	r0, r1
 800fae0:	6010      	str	r0, [r2, #0]
 800fae2:	e7da      	b.n	800fa9a <_free_r+0x22>
 800fae4:	d902      	bls.n	800faec <_free_r+0x74>
 800fae6:	230c      	movs	r3, #12
 800fae8:	602b      	str	r3, [r5, #0]
 800faea:	e7d6      	b.n	800fa9a <_free_r+0x22>
 800faec:	6820      	ldr	r0, [r4, #0]
 800faee:	1821      	adds	r1, r4, r0
 800faf0:	428b      	cmp	r3, r1
 800faf2:	bf04      	itt	eq
 800faf4:	6819      	ldreq	r1, [r3, #0]
 800faf6:	685b      	ldreq	r3, [r3, #4]
 800faf8:	6063      	str	r3, [r4, #4]
 800fafa:	bf04      	itt	eq
 800fafc:	1809      	addeq	r1, r1, r0
 800fafe:	6021      	streq	r1, [r4, #0]
 800fb00:	6054      	str	r4, [r2, #4]
 800fb02:	e7ca      	b.n	800fa9a <_free_r+0x22>
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	bf00      	nop
 800fb08:	24003244 	.word	0x24003244

0800fb0c <sbrk_aligned>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	4e0f      	ldr	r6, [pc, #60]	@ (800fb4c <sbrk_aligned+0x40>)
 800fb10:	460c      	mov	r4, r1
 800fb12:	6831      	ldr	r1, [r6, #0]
 800fb14:	4605      	mov	r5, r0
 800fb16:	b911      	cbnz	r1, 800fb1e <sbrk_aligned+0x12>
 800fb18:	f000 ff34 	bl	8010984 <_sbrk_r>
 800fb1c:	6030      	str	r0, [r6, #0]
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4628      	mov	r0, r5
 800fb22:	f000 ff2f 	bl	8010984 <_sbrk_r>
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	d103      	bne.n	800fb32 <sbrk_aligned+0x26>
 800fb2a:	f04f 34ff 	mov.w	r4, #4294967295
 800fb2e:	4620      	mov	r0, r4
 800fb30:	bd70      	pop	{r4, r5, r6, pc}
 800fb32:	1cc4      	adds	r4, r0, #3
 800fb34:	f024 0403 	bic.w	r4, r4, #3
 800fb38:	42a0      	cmp	r0, r4
 800fb3a:	d0f8      	beq.n	800fb2e <sbrk_aligned+0x22>
 800fb3c:	1a21      	subs	r1, r4, r0
 800fb3e:	4628      	mov	r0, r5
 800fb40:	f000 ff20 	bl	8010984 <_sbrk_r>
 800fb44:	3001      	adds	r0, #1
 800fb46:	d1f2      	bne.n	800fb2e <sbrk_aligned+0x22>
 800fb48:	e7ef      	b.n	800fb2a <sbrk_aligned+0x1e>
 800fb4a:	bf00      	nop
 800fb4c:	24003240 	.word	0x24003240

0800fb50 <_malloc_r>:
 800fb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	1ccd      	adds	r5, r1, #3
 800fb56:	f025 0503 	bic.w	r5, r5, #3
 800fb5a:	3508      	adds	r5, #8
 800fb5c:	2d0c      	cmp	r5, #12
 800fb5e:	bf38      	it	cc
 800fb60:	250c      	movcc	r5, #12
 800fb62:	2d00      	cmp	r5, #0
 800fb64:	4606      	mov	r6, r0
 800fb66:	db01      	blt.n	800fb6c <_malloc_r+0x1c>
 800fb68:	42a9      	cmp	r1, r5
 800fb6a:	d904      	bls.n	800fb76 <_malloc_r+0x26>
 800fb6c:	230c      	movs	r3, #12
 800fb6e:	6033      	str	r3, [r6, #0]
 800fb70:	2000      	movs	r0, #0
 800fb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc4c <_malloc_r+0xfc>
 800fb7a:	f000 f869 	bl	800fc50 <__malloc_lock>
 800fb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb82:	461c      	mov	r4, r3
 800fb84:	bb44      	cbnz	r4, 800fbd8 <_malloc_r+0x88>
 800fb86:	4629      	mov	r1, r5
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7ff ffbf 	bl	800fb0c <sbrk_aligned>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	4604      	mov	r4, r0
 800fb92:	d158      	bne.n	800fc46 <_malloc_r+0xf6>
 800fb94:	f8d8 4000 	ldr.w	r4, [r8]
 800fb98:	4627      	mov	r7, r4
 800fb9a:	2f00      	cmp	r7, #0
 800fb9c:	d143      	bne.n	800fc26 <_malloc_r+0xd6>
 800fb9e:	2c00      	cmp	r4, #0
 800fba0:	d04b      	beq.n	800fc3a <_malloc_r+0xea>
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	4639      	mov	r1, r7
 800fba6:	4630      	mov	r0, r6
 800fba8:	eb04 0903 	add.w	r9, r4, r3
 800fbac:	f000 feea 	bl	8010984 <_sbrk_r>
 800fbb0:	4581      	cmp	r9, r0
 800fbb2:	d142      	bne.n	800fc3a <_malloc_r+0xea>
 800fbb4:	6821      	ldr	r1, [r4, #0]
 800fbb6:	1a6d      	subs	r5, r5, r1
 800fbb8:	4629      	mov	r1, r5
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ffa6 	bl	800fb0c <sbrk_aligned>
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d03a      	beq.n	800fc3a <_malloc_r+0xea>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	442b      	add	r3, r5
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	f8d8 3000 	ldr.w	r3, [r8]
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	bb62      	cbnz	r2, 800fc2c <_malloc_r+0xdc>
 800fbd2:	f8c8 7000 	str.w	r7, [r8]
 800fbd6:	e00f      	b.n	800fbf8 <_malloc_r+0xa8>
 800fbd8:	6822      	ldr	r2, [r4, #0]
 800fbda:	1b52      	subs	r2, r2, r5
 800fbdc:	d420      	bmi.n	800fc20 <_malloc_r+0xd0>
 800fbde:	2a0b      	cmp	r2, #11
 800fbe0:	d917      	bls.n	800fc12 <_malloc_r+0xc2>
 800fbe2:	1961      	adds	r1, r4, r5
 800fbe4:	42a3      	cmp	r3, r4
 800fbe6:	6025      	str	r5, [r4, #0]
 800fbe8:	bf18      	it	ne
 800fbea:	6059      	strne	r1, [r3, #4]
 800fbec:	6863      	ldr	r3, [r4, #4]
 800fbee:	bf08      	it	eq
 800fbf0:	f8c8 1000 	streq.w	r1, [r8]
 800fbf4:	5162      	str	r2, [r4, r5]
 800fbf6:	604b      	str	r3, [r1, #4]
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f000 f82f 	bl	800fc5c <__malloc_unlock>
 800fbfe:	f104 000b 	add.w	r0, r4, #11
 800fc02:	1d23      	adds	r3, r4, #4
 800fc04:	f020 0007 	bic.w	r0, r0, #7
 800fc08:	1ac2      	subs	r2, r0, r3
 800fc0a:	bf1c      	itt	ne
 800fc0c:	1a1b      	subne	r3, r3, r0
 800fc0e:	50a3      	strne	r3, [r4, r2]
 800fc10:	e7af      	b.n	800fb72 <_malloc_r+0x22>
 800fc12:	6862      	ldr	r2, [r4, #4]
 800fc14:	42a3      	cmp	r3, r4
 800fc16:	bf0c      	ite	eq
 800fc18:	f8c8 2000 	streq.w	r2, [r8]
 800fc1c:	605a      	strne	r2, [r3, #4]
 800fc1e:	e7eb      	b.n	800fbf8 <_malloc_r+0xa8>
 800fc20:	4623      	mov	r3, r4
 800fc22:	6864      	ldr	r4, [r4, #4]
 800fc24:	e7ae      	b.n	800fb84 <_malloc_r+0x34>
 800fc26:	463c      	mov	r4, r7
 800fc28:	687f      	ldr	r7, [r7, #4]
 800fc2a:	e7b6      	b.n	800fb9a <_malloc_r+0x4a>
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	42a3      	cmp	r3, r4
 800fc32:	d1fb      	bne.n	800fc2c <_malloc_r+0xdc>
 800fc34:	2300      	movs	r3, #0
 800fc36:	6053      	str	r3, [r2, #4]
 800fc38:	e7de      	b.n	800fbf8 <_malloc_r+0xa8>
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	6033      	str	r3, [r6, #0]
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f000 f80c 	bl	800fc5c <__malloc_unlock>
 800fc44:	e794      	b.n	800fb70 <_malloc_r+0x20>
 800fc46:	6005      	str	r5, [r0, #0]
 800fc48:	e7d6      	b.n	800fbf8 <_malloc_r+0xa8>
 800fc4a:	bf00      	nop
 800fc4c:	24003244 	.word	0x24003244

0800fc50 <__malloc_lock>:
 800fc50:	4801      	ldr	r0, [pc, #4]	@ (800fc58 <__malloc_lock+0x8>)
 800fc52:	f7ff bf0f 	b.w	800fa74 <__retarget_lock_acquire_recursive>
 800fc56:	bf00      	nop
 800fc58:	2400323c 	.word	0x2400323c

0800fc5c <__malloc_unlock>:
 800fc5c:	4801      	ldr	r0, [pc, #4]	@ (800fc64 <__malloc_unlock+0x8>)
 800fc5e:	f7ff bf0a 	b.w	800fa76 <__retarget_lock_release_recursive>
 800fc62:	bf00      	nop
 800fc64:	2400323c 	.word	0x2400323c

0800fc68 <__ssputs_r>:
 800fc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc6c:	688e      	ldr	r6, [r1, #8]
 800fc6e:	461f      	mov	r7, r3
 800fc70:	42be      	cmp	r6, r7
 800fc72:	680b      	ldr	r3, [r1, #0]
 800fc74:	4682      	mov	sl, r0
 800fc76:	460c      	mov	r4, r1
 800fc78:	4690      	mov	r8, r2
 800fc7a:	d82d      	bhi.n	800fcd8 <__ssputs_r+0x70>
 800fc7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc84:	d026      	beq.n	800fcd4 <__ssputs_r+0x6c>
 800fc86:	6965      	ldr	r5, [r4, #20]
 800fc88:	6909      	ldr	r1, [r1, #16]
 800fc8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc8e:	eba3 0901 	sub.w	r9, r3, r1
 800fc92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc96:	1c7b      	adds	r3, r7, #1
 800fc98:	444b      	add	r3, r9
 800fc9a:	106d      	asrs	r5, r5, #1
 800fc9c:	429d      	cmp	r5, r3
 800fc9e:	bf38      	it	cc
 800fca0:	461d      	movcc	r5, r3
 800fca2:	0553      	lsls	r3, r2, #21
 800fca4:	d527      	bpl.n	800fcf6 <__ssputs_r+0x8e>
 800fca6:	4629      	mov	r1, r5
 800fca8:	f7ff ff52 	bl	800fb50 <_malloc_r>
 800fcac:	4606      	mov	r6, r0
 800fcae:	b360      	cbz	r0, 800fd0a <__ssputs_r+0xa2>
 800fcb0:	6921      	ldr	r1, [r4, #16]
 800fcb2:	464a      	mov	r2, r9
 800fcb4:	f000 fe76 	bl	80109a4 <memcpy>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcc2:	81a3      	strh	r3, [r4, #12]
 800fcc4:	6126      	str	r6, [r4, #16]
 800fcc6:	6165      	str	r5, [r4, #20]
 800fcc8:	444e      	add	r6, r9
 800fcca:	eba5 0509 	sub.w	r5, r5, r9
 800fcce:	6026      	str	r6, [r4, #0]
 800fcd0:	60a5      	str	r5, [r4, #8]
 800fcd2:	463e      	mov	r6, r7
 800fcd4:	42be      	cmp	r6, r7
 800fcd6:	d900      	bls.n	800fcda <__ssputs_r+0x72>
 800fcd8:	463e      	mov	r6, r7
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	4632      	mov	r2, r6
 800fcde:	4641      	mov	r1, r8
 800fce0:	f000 fe35 	bl	801094e <memmove>
 800fce4:	68a3      	ldr	r3, [r4, #8]
 800fce6:	1b9b      	subs	r3, r3, r6
 800fce8:	60a3      	str	r3, [r4, #8]
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	4433      	add	r3, r6
 800fcee:	6023      	str	r3, [r4, #0]
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf6:	462a      	mov	r2, r5
 800fcf8:	f000 fe62 	bl	80109c0 <_realloc_r>
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d1e0      	bne.n	800fcc4 <__ssputs_r+0x5c>
 800fd02:	6921      	ldr	r1, [r4, #16]
 800fd04:	4650      	mov	r0, sl
 800fd06:	f7ff feb7 	bl	800fa78 <_free_r>
 800fd0a:	230c      	movs	r3, #12
 800fd0c:	f8ca 3000 	str.w	r3, [sl]
 800fd10:	89a3      	ldrh	r3, [r4, #12]
 800fd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd16:	81a3      	strh	r3, [r4, #12]
 800fd18:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1c:	e7e9      	b.n	800fcf2 <__ssputs_r+0x8a>
	...

0800fd20 <_svfiprintf_r>:
 800fd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd24:	4698      	mov	r8, r3
 800fd26:	898b      	ldrh	r3, [r1, #12]
 800fd28:	061b      	lsls	r3, r3, #24
 800fd2a:	b09d      	sub	sp, #116	@ 0x74
 800fd2c:	4607      	mov	r7, r0
 800fd2e:	460d      	mov	r5, r1
 800fd30:	4614      	mov	r4, r2
 800fd32:	d510      	bpl.n	800fd56 <_svfiprintf_r+0x36>
 800fd34:	690b      	ldr	r3, [r1, #16]
 800fd36:	b973      	cbnz	r3, 800fd56 <_svfiprintf_r+0x36>
 800fd38:	2140      	movs	r1, #64	@ 0x40
 800fd3a:	f7ff ff09 	bl	800fb50 <_malloc_r>
 800fd3e:	6028      	str	r0, [r5, #0]
 800fd40:	6128      	str	r0, [r5, #16]
 800fd42:	b930      	cbnz	r0, 800fd52 <_svfiprintf_r+0x32>
 800fd44:	230c      	movs	r3, #12
 800fd46:	603b      	str	r3, [r7, #0]
 800fd48:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4c:	b01d      	add	sp, #116	@ 0x74
 800fd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd52:	2340      	movs	r3, #64	@ 0x40
 800fd54:	616b      	str	r3, [r5, #20]
 800fd56:	2300      	movs	r3, #0
 800fd58:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd5a:	2320      	movs	r3, #32
 800fd5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd64:	2330      	movs	r3, #48	@ 0x30
 800fd66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ff04 <_svfiprintf_r+0x1e4>
 800fd6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd6e:	f04f 0901 	mov.w	r9, #1
 800fd72:	4623      	mov	r3, r4
 800fd74:	469a      	mov	sl, r3
 800fd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd7a:	b10a      	cbz	r2, 800fd80 <_svfiprintf_r+0x60>
 800fd7c:	2a25      	cmp	r2, #37	@ 0x25
 800fd7e:	d1f9      	bne.n	800fd74 <_svfiprintf_r+0x54>
 800fd80:	ebba 0b04 	subs.w	fp, sl, r4
 800fd84:	d00b      	beq.n	800fd9e <_svfiprintf_r+0x7e>
 800fd86:	465b      	mov	r3, fp
 800fd88:	4622      	mov	r2, r4
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f7ff ff6b 	bl	800fc68 <__ssputs_r>
 800fd92:	3001      	adds	r0, #1
 800fd94:	f000 80a7 	beq.w	800fee6 <_svfiprintf_r+0x1c6>
 800fd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd9a:	445a      	add	r2, fp
 800fd9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 809f 	beq.w	800fee6 <_svfiprintf_r+0x1c6>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdb2:	f10a 0a01 	add.w	sl, sl, #1
 800fdb6:	9304      	str	r3, [sp, #16]
 800fdb8:	9307      	str	r3, [sp, #28]
 800fdba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdc0:	4654      	mov	r4, sl
 800fdc2:	2205      	movs	r2, #5
 800fdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdc8:	484e      	ldr	r0, [pc, #312]	@ (800ff04 <_svfiprintf_r+0x1e4>)
 800fdca:	f7f0 fa91 	bl	80002f0 <memchr>
 800fdce:	9a04      	ldr	r2, [sp, #16]
 800fdd0:	b9d8      	cbnz	r0, 800fe0a <_svfiprintf_r+0xea>
 800fdd2:	06d0      	lsls	r0, r2, #27
 800fdd4:	bf44      	itt	mi
 800fdd6:	2320      	movmi	r3, #32
 800fdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fddc:	0711      	lsls	r1, r2, #28
 800fdde:	bf44      	itt	mi
 800fde0:	232b      	movmi	r3, #43	@ 0x2b
 800fde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fde6:	f89a 3000 	ldrb.w	r3, [sl]
 800fdea:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdec:	d015      	beq.n	800fe1a <_svfiprintf_r+0xfa>
 800fdee:	9a07      	ldr	r2, [sp, #28]
 800fdf0:	4654      	mov	r4, sl
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f04f 0c0a 	mov.w	ip, #10
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdfe:	3b30      	subs	r3, #48	@ 0x30
 800fe00:	2b09      	cmp	r3, #9
 800fe02:	d94b      	bls.n	800fe9c <_svfiprintf_r+0x17c>
 800fe04:	b1b0      	cbz	r0, 800fe34 <_svfiprintf_r+0x114>
 800fe06:	9207      	str	r2, [sp, #28]
 800fe08:	e014      	b.n	800fe34 <_svfiprintf_r+0x114>
 800fe0a:	eba0 0308 	sub.w	r3, r0, r8
 800fe0e:	fa09 f303 	lsl.w	r3, r9, r3
 800fe12:	4313      	orrs	r3, r2
 800fe14:	9304      	str	r3, [sp, #16]
 800fe16:	46a2      	mov	sl, r4
 800fe18:	e7d2      	b.n	800fdc0 <_svfiprintf_r+0xa0>
 800fe1a:	9b03      	ldr	r3, [sp, #12]
 800fe1c:	1d19      	adds	r1, r3, #4
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	9103      	str	r1, [sp, #12]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bfbb      	ittet	lt
 800fe26:	425b      	neglt	r3, r3
 800fe28:	f042 0202 	orrlt.w	r2, r2, #2
 800fe2c:	9307      	strge	r3, [sp, #28]
 800fe2e:	9307      	strlt	r3, [sp, #28]
 800fe30:	bfb8      	it	lt
 800fe32:	9204      	strlt	r2, [sp, #16]
 800fe34:	7823      	ldrb	r3, [r4, #0]
 800fe36:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe38:	d10a      	bne.n	800fe50 <_svfiprintf_r+0x130>
 800fe3a:	7863      	ldrb	r3, [r4, #1]
 800fe3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe3e:	d132      	bne.n	800fea6 <_svfiprintf_r+0x186>
 800fe40:	9b03      	ldr	r3, [sp, #12]
 800fe42:	1d1a      	adds	r2, r3, #4
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	9203      	str	r2, [sp, #12]
 800fe48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe4c:	3402      	adds	r4, #2
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff14 <_svfiprintf_r+0x1f4>
 800fe54:	7821      	ldrb	r1, [r4, #0]
 800fe56:	2203      	movs	r2, #3
 800fe58:	4650      	mov	r0, sl
 800fe5a:	f7f0 fa49 	bl	80002f0 <memchr>
 800fe5e:	b138      	cbz	r0, 800fe70 <_svfiprintf_r+0x150>
 800fe60:	9b04      	ldr	r3, [sp, #16]
 800fe62:	eba0 000a 	sub.w	r0, r0, sl
 800fe66:	2240      	movs	r2, #64	@ 0x40
 800fe68:	4082      	lsls	r2, r0
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	3401      	adds	r4, #1
 800fe6e:	9304      	str	r3, [sp, #16]
 800fe70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe74:	4824      	ldr	r0, [pc, #144]	@ (800ff08 <_svfiprintf_r+0x1e8>)
 800fe76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe7a:	2206      	movs	r2, #6
 800fe7c:	f7f0 fa38 	bl	80002f0 <memchr>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d036      	beq.n	800fef2 <_svfiprintf_r+0x1d2>
 800fe84:	4b21      	ldr	r3, [pc, #132]	@ (800ff0c <_svfiprintf_r+0x1ec>)
 800fe86:	bb1b      	cbnz	r3, 800fed0 <_svfiprintf_r+0x1b0>
 800fe88:	9b03      	ldr	r3, [sp, #12]
 800fe8a:	3307      	adds	r3, #7
 800fe8c:	f023 0307 	bic.w	r3, r3, #7
 800fe90:	3308      	adds	r3, #8
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe96:	4433      	add	r3, r6
 800fe98:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe9a:	e76a      	b.n	800fd72 <_svfiprintf_r+0x52>
 800fe9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea0:	460c      	mov	r4, r1
 800fea2:	2001      	movs	r0, #1
 800fea4:	e7a8      	b.n	800fdf8 <_svfiprintf_r+0xd8>
 800fea6:	2300      	movs	r3, #0
 800fea8:	3401      	adds	r4, #1
 800feaa:	9305      	str	r3, [sp, #20]
 800feac:	4619      	mov	r1, r3
 800feae:	f04f 0c0a 	mov.w	ip, #10
 800feb2:	4620      	mov	r0, r4
 800feb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feb8:	3a30      	subs	r2, #48	@ 0x30
 800feba:	2a09      	cmp	r2, #9
 800febc:	d903      	bls.n	800fec6 <_svfiprintf_r+0x1a6>
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0c6      	beq.n	800fe50 <_svfiprintf_r+0x130>
 800fec2:	9105      	str	r1, [sp, #20]
 800fec4:	e7c4      	b.n	800fe50 <_svfiprintf_r+0x130>
 800fec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800feca:	4604      	mov	r4, r0
 800fecc:	2301      	movs	r3, #1
 800fece:	e7f0      	b.n	800feb2 <_svfiprintf_r+0x192>
 800fed0:	ab03      	add	r3, sp, #12
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	462a      	mov	r2, r5
 800fed6:	4b0e      	ldr	r3, [pc, #56]	@ (800ff10 <_svfiprintf_r+0x1f0>)
 800fed8:	a904      	add	r1, sp, #16
 800feda:	4638      	mov	r0, r7
 800fedc:	f3af 8000 	nop.w
 800fee0:	1c42      	adds	r2, r0, #1
 800fee2:	4606      	mov	r6, r0
 800fee4:	d1d6      	bne.n	800fe94 <_svfiprintf_r+0x174>
 800fee6:	89ab      	ldrh	r3, [r5, #12]
 800fee8:	065b      	lsls	r3, r3, #25
 800feea:	f53f af2d 	bmi.w	800fd48 <_svfiprintf_r+0x28>
 800feee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fef0:	e72c      	b.n	800fd4c <_svfiprintf_r+0x2c>
 800fef2:	ab03      	add	r3, sp, #12
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	462a      	mov	r2, r5
 800fef8:	4b05      	ldr	r3, [pc, #20]	@ (800ff10 <_svfiprintf_r+0x1f0>)
 800fefa:	a904      	add	r1, sp, #16
 800fefc:	4638      	mov	r0, r7
 800fefe:	f000 fa45 	bl	801038c <_printf_i>
 800ff02:	e7ed      	b.n	800fee0 <_svfiprintf_r+0x1c0>
 800ff04:	08010eb5 	.word	0x08010eb5
 800ff08:	08010ebf 	.word	0x08010ebf
 800ff0c:	00000000 	.word	0x00000000
 800ff10:	0800fc69 	.word	0x0800fc69
 800ff14:	08010ebb 	.word	0x08010ebb

0800ff18 <_sungetc_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	1c4b      	adds	r3, r1, #1
 800ff1c:	4614      	mov	r4, r2
 800ff1e:	d103      	bne.n	800ff28 <_sungetc_r+0x10>
 800ff20:	f04f 35ff 	mov.w	r5, #4294967295
 800ff24:	4628      	mov	r0, r5
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	8993      	ldrh	r3, [r2, #12]
 800ff2a:	f023 0320 	bic.w	r3, r3, #32
 800ff2e:	8193      	strh	r3, [r2, #12]
 800ff30:	6853      	ldr	r3, [r2, #4]
 800ff32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ff34:	b2cd      	uxtb	r5, r1
 800ff36:	b18a      	cbz	r2, 800ff5c <_sungetc_r+0x44>
 800ff38:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	dd08      	ble.n	800ff50 <_sungetc_r+0x38>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	1e5a      	subs	r2, r3, #1
 800ff42:	6022      	str	r2, [r4, #0]
 800ff44:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ff48:	6863      	ldr	r3, [r4, #4]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	6063      	str	r3, [r4, #4]
 800ff4e:	e7e9      	b.n	800ff24 <_sungetc_r+0xc>
 800ff50:	4621      	mov	r1, r4
 800ff52:	f000 fcc2 	bl	80108da <__submore>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d0f1      	beq.n	800ff3e <_sungetc_r+0x26>
 800ff5a:	e7e1      	b.n	800ff20 <_sungetc_r+0x8>
 800ff5c:	6921      	ldr	r1, [r4, #16]
 800ff5e:	6822      	ldr	r2, [r4, #0]
 800ff60:	b141      	cbz	r1, 800ff74 <_sungetc_r+0x5c>
 800ff62:	4291      	cmp	r1, r2
 800ff64:	d206      	bcs.n	800ff74 <_sungetc_r+0x5c>
 800ff66:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ff6a:	42a9      	cmp	r1, r5
 800ff6c:	d102      	bne.n	800ff74 <_sungetc_r+0x5c>
 800ff6e:	3a01      	subs	r2, #1
 800ff70:	6022      	str	r2, [r4, #0]
 800ff72:	e7ea      	b.n	800ff4a <_sungetc_r+0x32>
 800ff74:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ff78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff7e:	2303      	movs	r3, #3
 800ff80:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ff82:	4623      	mov	r3, r4
 800ff84:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ff88:	6023      	str	r3, [r4, #0]
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e7de      	b.n	800ff4c <_sungetc_r+0x34>

0800ff8e <__ssrefill_r>:
 800ff8e:	b510      	push	{r4, lr}
 800ff90:	460c      	mov	r4, r1
 800ff92:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ff94:	b169      	cbz	r1, 800ffb2 <__ssrefill_r+0x24>
 800ff96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff9a:	4299      	cmp	r1, r3
 800ff9c:	d001      	beq.n	800ffa2 <__ssrefill_r+0x14>
 800ff9e:	f7ff fd6b 	bl	800fa78 <_free_r>
 800ffa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffa4:	6063      	str	r3, [r4, #4]
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	6360      	str	r0, [r4, #52]	@ 0x34
 800ffaa:	b113      	cbz	r3, 800ffb2 <__ssrefill_r+0x24>
 800ffac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ffae:	6023      	str	r3, [r4, #0]
 800ffb0:	bd10      	pop	{r4, pc}
 800ffb2:	6923      	ldr	r3, [r4, #16]
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	6063      	str	r3, [r4, #4]
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	f043 0320 	orr.w	r3, r3, #32
 800ffc0:	81a3      	strh	r3, [r4, #12]
 800ffc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc6:	e7f3      	b.n	800ffb0 <__ssrefill_r+0x22>

0800ffc8 <__ssvfiscanf_r>:
 800ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	460c      	mov	r4, r1
 800ffce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ffd8:	49a5      	ldr	r1, [pc, #660]	@ (8010270 <__ssvfiscanf_r+0x2a8>)
 800ffda:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ffdc:	f10d 0804 	add.w	r8, sp, #4
 800ffe0:	49a4      	ldr	r1, [pc, #656]	@ (8010274 <__ssvfiscanf_r+0x2ac>)
 800ffe2:	4fa5      	ldr	r7, [pc, #660]	@ (8010278 <__ssvfiscanf_r+0x2b0>)
 800ffe4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ffe8:	4606      	mov	r6, r0
 800ffea:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	7813      	ldrb	r3, [r2, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f000 8158 	beq.w	80102a6 <__ssvfiscanf_r+0x2de>
 800fff6:	5cf9      	ldrb	r1, [r7, r3]
 800fff8:	f011 0108 	ands.w	r1, r1, #8
 800fffc:	f102 0501 	add.w	r5, r2, #1
 8010000:	d019      	beq.n	8010036 <__ssvfiscanf_r+0x6e>
 8010002:	6863      	ldr	r3, [r4, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	dd0f      	ble.n	8010028 <__ssvfiscanf_r+0x60>
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	781a      	ldrb	r2, [r3, #0]
 801000c:	5cba      	ldrb	r2, [r7, r2]
 801000e:	0712      	lsls	r2, r2, #28
 8010010:	d401      	bmi.n	8010016 <__ssvfiscanf_r+0x4e>
 8010012:	462a      	mov	r2, r5
 8010014:	e7eb      	b.n	800ffee <__ssvfiscanf_r+0x26>
 8010016:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010018:	3201      	adds	r2, #1
 801001a:	9245      	str	r2, [sp, #276]	@ 0x114
 801001c:	6862      	ldr	r2, [r4, #4]
 801001e:	3301      	adds	r3, #1
 8010020:	3a01      	subs	r2, #1
 8010022:	6062      	str	r2, [r4, #4]
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	e7ec      	b.n	8010002 <__ssvfiscanf_r+0x3a>
 8010028:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801002a:	4621      	mov	r1, r4
 801002c:	4630      	mov	r0, r6
 801002e:	4798      	blx	r3
 8010030:	2800      	cmp	r0, #0
 8010032:	d0e9      	beq.n	8010008 <__ssvfiscanf_r+0x40>
 8010034:	e7ed      	b.n	8010012 <__ssvfiscanf_r+0x4a>
 8010036:	2b25      	cmp	r3, #37	@ 0x25
 8010038:	d012      	beq.n	8010060 <__ssvfiscanf_r+0x98>
 801003a:	4699      	mov	r9, r3
 801003c:	6863      	ldr	r3, [r4, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	f340 8093 	ble.w	801016a <__ssvfiscanf_r+0x1a2>
 8010044:	6822      	ldr	r2, [r4, #0]
 8010046:	7813      	ldrb	r3, [r2, #0]
 8010048:	454b      	cmp	r3, r9
 801004a:	f040 812c 	bne.w	80102a6 <__ssvfiscanf_r+0x2de>
 801004e:	6863      	ldr	r3, [r4, #4]
 8010050:	3b01      	subs	r3, #1
 8010052:	6063      	str	r3, [r4, #4]
 8010054:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010056:	3201      	adds	r2, #1
 8010058:	3301      	adds	r3, #1
 801005a:	6022      	str	r2, [r4, #0]
 801005c:	9345      	str	r3, [sp, #276]	@ 0x114
 801005e:	e7d8      	b.n	8010012 <__ssvfiscanf_r+0x4a>
 8010060:	9141      	str	r1, [sp, #260]	@ 0x104
 8010062:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010064:	7853      	ldrb	r3, [r2, #1]
 8010066:	2b2a      	cmp	r3, #42	@ 0x2a
 8010068:	bf02      	ittt	eq
 801006a:	2310      	moveq	r3, #16
 801006c:	1c95      	addeq	r5, r2, #2
 801006e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010070:	220a      	movs	r2, #10
 8010072:	46a9      	mov	r9, r5
 8010074:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010078:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801007c:	2b09      	cmp	r3, #9
 801007e:	d91e      	bls.n	80100be <__ssvfiscanf_r+0xf6>
 8010080:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801027c <__ssvfiscanf_r+0x2b4>
 8010084:	2203      	movs	r2, #3
 8010086:	4650      	mov	r0, sl
 8010088:	f7f0 f932 	bl	80002f0 <memchr>
 801008c:	b138      	cbz	r0, 801009e <__ssvfiscanf_r+0xd6>
 801008e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010090:	eba0 000a 	sub.w	r0, r0, sl
 8010094:	2301      	movs	r3, #1
 8010096:	4083      	lsls	r3, r0
 8010098:	4313      	orrs	r3, r2
 801009a:	9341      	str	r3, [sp, #260]	@ 0x104
 801009c:	464d      	mov	r5, r9
 801009e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80100a2:	2b78      	cmp	r3, #120	@ 0x78
 80100a4:	d806      	bhi.n	80100b4 <__ssvfiscanf_r+0xec>
 80100a6:	2b57      	cmp	r3, #87	@ 0x57
 80100a8:	d810      	bhi.n	80100cc <__ssvfiscanf_r+0x104>
 80100aa:	2b25      	cmp	r3, #37	@ 0x25
 80100ac:	d0c5      	beq.n	801003a <__ssvfiscanf_r+0x72>
 80100ae:	d857      	bhi.n	8010160 <__ssvfiscanf_r+0x198>
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d065      	beq.n	8010180 <__ssvfiscanf_r+0x1b8>
 80100b4:	2303      	movs	r3, #3
 80100b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80100b8:	230a      	movs	r3, #10
 80100ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80100bc:	e078      	b.n	80101b0 <__ssvfiscanf_r+0x1e8>
 80100be:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80100c0:	fb02 1103 	mla	r1, r2, r3, r1
 80100c4:	3930      	subs	r1, #48	@ 0x30
 80100c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80100c8:	464d      	mov	r5, r9
 80100ca:	e7d2      	b.n	8010072 <__ssvfiscanf_r+0xaa>
 80100cc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80100d0:	2a20      	cmp	r2, #32
 80100d2:	d8ef      	bhi.n	80100b4 <__ssvfiscanf_r+0xec>
 80100d4:	a101      	add	r1, pc, #4	@ (adr r1, 80100dc <__ssvfiscanf_r+0x114>)
 80100d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100da:	bf00      	nop
 80100dc:	0801018f 	.word	0x0801018f
 80100e0:	080100b5 	.word	0x080100b5
 80100e4:	080100b5 	.word	0x080100b5
 80100e8:	080101e9 	.word	0x080101e9
 80100ec:	080100b5 	.word	0x080100b5
 80100f0:	080100b5 	.word	0x080100b5
 80100f4:	080100b5 	.word	0x080100b5
 80100f8:	080100b5 	.word	0x080100b5
 80100fc:	080100b5 	.word	0x080100b5
 8010100:	080100b5 	.word	0x080100b5
 8010104:	080100b5 	.word	0x080100b5
 8010108:	080101ff 	.word	0x080101ff
 801010c:	080101e5 	.word	0x080101e5
 8010110:	08010167 	.word	0x08010167
 8010114:	08010167 	.word	0x08010167
 8010118:	08010167 	.word	0x08010167
 801011c:	080100b5 	.word	0x080100b5
 8010120:	080101a1 	.word	0x080101a1
 8010124:	080100b5 	.word	0x080100b5
 8010128:	080100b5 	.word	0x080100b5
 801012c:	080100b5 	.word	0x080100b5
 8010130:	080100b5 	.word	0x080100b5
 8010134:	0801020f 	.word	0x0801020f
 8010138:	080101a9 	.word	0x080101a9
 801013c:	08010187 	.word	0x08010187
 8010140:	080100b5 	.word	0x080100b5
 8010144:	080100b5 	.word	0x080100b5
 8010148:	0801020b 	.word	0x0801020b
 801014c:	080100b5 	.word	0x080100b5
 8010150:	080101e5 	.word	0x080101e5
 8010154:	080100b5 	.word	0x080100b5
 8010158:	080100b5 	.word	0x080100b5
 801015c:	0801018f 	.word	0x0801018f
 8010160:	3b45      	subs	r3, #69	@ 0x45
 8010162:	2b02      	cmp	r3, #2
 8010164:	d8a6      	bhi.n	80100b4 <__ssvfiscanf_r+0xec>
 8010166:	2305      	movs	r3, #5
 8010168:	e021      	b.n	80101ae <__ssvfiscanf_r+0x1e6>
 801016a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801016c:	4621      	mov	r1, r4
 801016e:	4630      	mov	r0, r6
 8010170:	4798      	blx	r3
 8010172:	2800      	cmp	r0, #0
 8010174:	f43f af66 	beq.w	8010044 <__ssvfiscanf_r+0x7c>
 8010178:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801017a:	2800      	cmp	r0, #0
 801017c:	f040 808b 	bne.w	8010296 <__ssvfiscanf_r+0x2ce>
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	e08b      	b.n	801029e <__ssvfiscanf_r+0x2d6>
 8010186:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010188:	f042 0220 	orr.w	r2, r2, #32
 801018c:	9241      	str	r2, [sp, #260]	@ 0x104
 801018e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010194:	9241      	str	r2, [sp, #260]	@ 0x104
 8010196:	2210      	movs	r2, #16
 8010198:	2b6e      	cmp	r3, #110	@ 0x6e
 801019a:	9242      	str	r2, [sp, #264]	@ 0x108
 801019c:	d902      	bls.n	80101a4 <__ssvfiscanf_r+0x1dc>
 801019e:	e005      	b.n	80101ac <__ssvfiscanf_r+0x1e4>
 80101a0:	2300      	movs	r3, #0
 80101a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80101a4:	2303      	movs	r3, #3
 80101a6:	e002      	b.n	80101ae <__ssvfiscanf_r+0x1e6>
 80101a8:	2308      	movs	r3, #8
 80101aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80101ac:	2304      	movs	r3, #4
 80101ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 80101b0:	6863      	ldr	r3, [r4, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	dd39      	ble.n	801022a <__ssvfiscanf_r+0x262>
 80101b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80101b8:	0659      	lsls	r1, r3, #25
 80101ba:	d404      	bmi.n	80101c6 <__ssvfiscanf_r+0x1fe>
 80101bc:	6823      	ldr	r3, [r4, #0]
 80101be:	781a      	ldrb	r2, [r3, #0]
 80101c0:	5cba      	ldrb	r2, [r7, r2]
 80101c2:	0712      	lsls	r2, r2, #28
 80101c4:	d438      	bmi.n	8010238 <__ssvfiscanf_r+0x270>
 80101c6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	dc47      	bgt.n	801025c <__ssvfiscanf_r+0x294>
 80101cc:	466b      	mov	r3, sp
 80101ce:	4622      	mov	r2, r4
 80101d0:	a941      	add	r1, sp, #260	@ 0x104
 80101d2:	4630      	mov	r0, r6
 80101d4:	f000 f9fa 	bl	80105cc <_scanf_chars>
 80101d8:	2801      	cmp	r0, #1
 80101da:	d064      	beq.n	80102a6 <__ssvfiscanf_r+0x2de>
 80101dc:	2802      	cmp	r0, #2
 80101de:	f47f af18 	bne.w	8010012 <__ssvfiscanf_r+0x4a>
 80101e2:	e7c9      	b.n	8010178 <__ssvfiscanf_r+0x1b0>
 80101e4:	220a      	movs	r2, #10
 80101e6:	e7d7      	b.n	8010198 <__ssvfiscanf_r+0x1d0>
 80101e8:	4629      	mov	r1, r5
 80101ea:	4640      	mov	r0, r8
 80101ec:	f000 fb3c 	bl	8010868 <__sccl>
 80101f0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80101f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80101f8:	4605      	mov	r5, r0
 80101fa:	2301      	movs	r3, #1
 80101fc:	e7d7      	b.n	80101ae <__ssvfiscanf_r+0x1e6>
 80101fe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010204:	9341      	str	r3, [sp, #260]	@ 0x104
 8010206:	2300      	movs	r3, #0
 8010208:	e7d1      	b.n	80101ae <__ssvfiscanf_r+0x1e6>
 801020a:	2302      	movs	r3, #2
 801020c:	e7cf      	b.n	80101ae <__ssvfiscanf_r+0x1e6>
 801020e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010210:	06c3      	lsls	r3, r0, #27
 8010212:	f53f aefe 	bmi.w	8010012 <__ssvfiscanf_r+0x4a>
 8010216:	9b00      	ldr	r3, [sp, #0]
 8010218:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801021a:	1d19      	adds	r1, r3, #4
 801021c:	9100      	str	r1, [sp, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	07c0      	lsls	r0, r0, #31
 8010222:	bf4c      	ite	mi
 8010224:	801a      	strhmi	r2, [r3, #0]
 8010226:	601a      	strpl	r2, [r3, #0]
 8010228:	e6f3      	b.n	8010012 <__ssvfiscanf_r+0x4a>
 801022a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801022c:	4621      	mov	r1, r4
 801022e:	4630      	mov	r0, r6
 8010230:	4798      	blx	r3
 8010232:	2800      	cmp	r0, #0
 8010234:	d0bf      	beq.n	80101b6 <__ssvfiscanf_r+0x1ee>
 8010236:	e79f      	b.n	8010178 <__ssvfiscanf_r+0x1b0>
 8010238:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801023a:	3201      	adds	r2, #1
 801023c:	9245      	str	r2, [sp, #276]	@ 0x114
 801023e:	6862      	ldr	r2, [r4, #4]
 8010240:	3a01      	subs	r2, #1
 8010242:	2a00      	cmp	r2, #0
 8010244:	6062      	str	r2, [r4, #4]
 8010246:	dd02      	ble.n	801024e <__ssvfiscanf_r+0x286>
 8010248:	3301      	adds	r3, #1
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	e7b6      	b.n	80101bc <__ssvfiscanf_r+0x1f4>
 801024e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010250:	4621      	mov	r1, r4
 8010252:	4630      	mov	r0, r6
 8010254:	4798      	blx	r3
 8010256:	2800      	cmp	r0, #0
 8010258:	d0b0      	beq.n	80101bc <__ssvfiscanf_r+0x1f4>
 801025a:	e78d      	b.n	8010178 <__ssvfiscanf_r+0x1b0>
 801025c:	2b04      	cmp	r3, #4
 801025e:	dc0f      	bgt.n	8010280 <__ssvfiscanf_r+0x2b8>
 8010260:	466b      	mov	r3, sp
 8010262:	4622      	mov	r2, r4
 8010264:	a941      	add	r1, sp, #260	@ 0x104
 8010266:	4630      	mov	r0, r6
 8010268:	f000 fa0a 	bl	8010680 <_scanf_i>
 801026c:	e7b4      	b.n	80101d8 <__ssvfiscanf_r+0x210>
 801026e:	bf00      	nop
 8010270:	0800ff19 	.word	0x0800ff19
 8010274:	0800ff8f 	.word	0x0800ff8f
 8010278:	08010db5 	.word	0x08010db5
 801027c:	08010ebb 	.word	0x08010ebb
 8010280:	4b0a      	ldr	r3, [pc, #40]	@ (80102ac <__ssvfiscanf_r+0x2e4>)
 8010282:	2b00      	cmp	r3, #0
 8010284:	f43f aec5 	beq.w	8010012 <__ssvfiscanf_r+0x4a>
 8010288:	466b      	mov	r3, sp
 801028a:	4622      	mov	r2, r4
 801028c:	a941      	add	r1, sp, #260	@ 0x104
 801028e:	4630      	mov	r0, r6
 8010290:	f3af 8000 	nop.w
 8010294:	e7a0      	b.n	80101d8 <__ssvfiscanf_r+0x210>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	065b      	lsls	r3, r3, #25
 801029a:	f53f af71 	bmi.w	8010180 <__ssvfiscanf_r+0x1b8>
 801029e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80102a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80102a8:	e7f9      	b.n	801029e <__ssvfiscanf_r+0x2d6>
 80102aa:	bf00      	nop
 80102ac:	00000000 	.word	0x00000000

080102b0 <_printf_common>:
 80102b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	4616      	mov	r6, r2
 80102b6:	4698      	mov	r8, r3
 80102b8:	688a      	ldr	r2, [r1, #8]
 80102ba:	690b      	ldr	r3, [r1, #16]
 80102bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102c0:	4293      	cmp	r3, r2
 80102c2:	bfb8      	it	lt
 80102c4:	4613      	movlt	r3, r2
 80102c6:	6033      	str	r3, [r6, #0]
 80102c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80102cc:	4607      	mov	r7, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	b10a      	cbz	r2, 80102d6 <_printf_common+0x26>
 80102d2:	3301      	adds	r3, #1
 80102d4:	6033      	str	r3, [r6, #0]
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	0699      	lsls	r1, r3, #26
 80102da:	bf42      	ittt	mi
 80102dc:	6833      	ldrmi	r3, [r6, #0]
 80102de:	3302      	addmi	r3, #2
 80102e0:	6033      	strmi	r3, [r6, #0]
 80102e2:	6825      	ldr	r5, [r4, #0]
 80102e4:	f015 0506 	ands.w	r5, r5, #6
 80102e8:	d106      	bne.n	80102f8 <_printf_common+0x48>
 80102ea:	f104 0a19 	add.w	sl, r4, #25
 80102ee:	68e3      	ldr	r3, [r4, #12]
 80102f0:	6832      	ldr	r2, [r6, #0]
 80102f2:	1a9b      	subs	r3, r3, r2
 80102f4:	42ab      	cmp	r3, r5
 80102f6:	dc26      	bgt.n	8010346 <_printf_common+0x96>
 80102f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102fc:	6822      	ldr	r2, [r4, #0]
 80102fe:	3b00      	subs	r3, #0
 8010300:	bf18      	it	ne
 8010302:	2301      	movne	r3, #1
 8010304:	0692      	lsls	r2, r2, #26
 8010306:	d42b      	bmi.n	8010360 <_printf_common+0xb0>
 8010308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801030c:	4641      	mov	r1, r8
 801030e:	4638      	mov	r0, r7
 8010310:	47c8      	blx	r9
 8010312:	3001      	adds	r0, #1
 8010314:	d01e      	beq.n	8010354 <_printf_common+0xa4>
 8010316:	6823      	ldr	r3, [r4, #0]
 8010318:	6922      	ldr	r2, [r4, #16]
 801031a:	f003 0306 	and.w	r3, r3, #6
 801031e:	2b04      	cmp	r3, #4
 8010320:	bf02      	ittt	eq
 8010322:	68e5      	ldreq	r5, [r4, #12]
 8010324:	6833      	ldreq	r3, [r6, #0]
 8010326:	1aed      	subeq	r5, r5, r3
 8010328:	68a3      	ldr	r3, [r4, #8]
 801032a:	bf0c      	ite	eq
 801032c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010330:	2500      	movne	r5, #0
 8010332:	4293      	cmp	r3, r2
 8010334:	bfc4      	itt	gt
 8010336:	1a9b      	subgt	r3, r3, r2
 8010338:	18ed      	addgt	r5, r5, r3
 801033a:	2600      	movs	r6, #0
 801033c:	341a      	adds	r4, #26
 801033e:	42b5      	cmp	r5, r6
 8010340:	d11a      	bne.n	8010378 <_printf_common+0xc8>
 8010342:	2000      	movs	r0, #0
 8010344:	e008      	b.n	8010358 <_printf_common+0xa8>
 8010346:	2301      	movs	r3, #1
 8010348:	4652      	mov	r2, sl
 801034a:	4641      	mov	r1, r8
 801034c:	4638      	mov	r0, r7
 801034e:	47c8      	blx	r9
 8010350:	3001      	adds	r0, #1
 8010352:	d103      	bne.n	801035c <_printf_common+0xac>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035c:	3501      	adds	r5, #1
 801035e:	e7c6      	b.n	80102ee <_printf_common+0x3e>
 8010360:	18e1      	adds	r1, r4, r3
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	2030      	movs	r0, #48	@ 0x30
 8010366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801036a:	4422      	add	r2, r4
 801036c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010374:	3302      	adds	r3, #2
 8010376:	e7c7      	b.n	8010308 <_printf_common+0x58>
 8010378:	2301      	movs	r3, #1
 801037a:	4622      	mov	r2, r4
 801037c:	4641      	mov	r1, r8
 801037e:	4638      	mov	r0, r7
 8010380:	47c8      	blx	r9
 8010382:	3001      	adds	r0, #1
 8010384:	d0e6      	beq.n	8010354 <_printf_common+0xa4>
 8010386:	3601      	adds	r6, #1
 8010388:	e7d9      	b.n	801033e <_printf_common+0x8e>
	...

0801038c <_printf_i>:
 801038c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010390:	7e0f      	ldrb	r7, [r1, #24]
 8010392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010394:	2f78      	cmp	r7, #120	@ 0x78
 8010396:	4691      	mov	r9, r2
 8010398:	4680      	mov	r8, r0
 801039a:	460c      	mov	r4, r1
 801039c:	469a      	mov	sl, r3
 801039e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80103a2:	d807      	bhi.n	80103b4 <_printf_i+0x28>
 80103a4:	2f62      	cmp	r7, #98	@ 0x62
 80103a6:	d80a      	bhi.n	80103be <_printf_i+0x32>
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	f000 80d2 	beq.w	8010552 <_printf_i+0x1c6>
 80103ae:	2f58      	cmp	r7, #88	@ 0x58
 80103b0:	f000 80b9 	beq.w	8010526 <_printf_i+0x19a>
 80103b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80103bc:	e03a      	b.n	8010434 <_printf_i+0xa8>
 80103be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80103c2:	2b15      	cmp	r3, #21
 80103c4:	d8f6      	bhi.n	80103b4 <_printf_i+0x28>
 80103c6:	a101      	add	r1, pc, #4	@ (adr r1, 80103cc <_printf_i+0x40>)
 80103c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103cc:	08010425 	.word	0x08010425
 80103d0:	08010439 	.word	0x08010439
 80103d4:	080103b5 	.word	0x080103b5
 80103d8:	080103b5 	.word	0x080103b5
 80103dc:	080103b5 	.word	0x080103b5
 80103e0:	080103b5 	.word	0x080103b5
 80103e4:	08010439 	.word	0x08010439
 80103e8:	080103b5 	.word	0x080103b5
 80103ec:	080103b5 	.word	0x080103b5
 80103f0:	080103b5 	.word	0x080103b5
 80103f4:	080103b5 	.word	0x080103b5
 80103f8:	08010539 	.word	0x08010539
 80103fc:	08010463 	.word	0x08010463
 8010400:	080104f3 	.word	0x080104f3
 8010404:	080103b5 	.word	0x080103b5
 8010408:	080103b5 	.word	0x080103b5
 801040c:	0801055b 	.word	0x0801055b
 8010410:	080103b5 	.word	0x080103b5
 8010414:	08010463 	.word	0x08010463
 8010418:	080103b5 	.word	0x080103b5
 801041c:	080103b5 	.word	0x080103b5
 8010420:	080104fb 	.word	0x080104fb
 8010424:	6833      	ldr	r3, [r6, #0]
 8010426:	1d1a      	adds	r2, r3, #4
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6032      	str	r2, [r6, #0]
 801042c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010434:	2301      	movs	r3, #1
 8010436:	e09d      	b.n	8010574 <_printf_i+0x1e8>
 8010438:	6833      	ldr	r3, [r6, #0]
 801043a:	6820      	ldr	r0, [r4, #0]
 801043c:	1d19      	adds	r1, r3, #4
 801043e:	6031      	str	r1, [r6, #0]
 8010440:	0606      	lsls	r6, r0, #24
 8010442:	d501      	bpl.n	8010448 <_printf_i+0xbc>
 8010444:	681d      	ldr	r5, [r3, #0]
 8010446:	e003      	b.n	8010450 <_printf_i+0xc4>
 8010448:	0645      	lsls	r5, r0, #25
 801044a:	d5fb      	bpl.n	8010444 <_printf_i+0xb8>
 801044c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010450:	2d00      	cmp	r5, #0
 8010452:	da03      	bge.n	801045c <_printf_i+0xd0>
 8010454:	232d      	movs	r3, #45	@ 0x2d
 8010456:	426d      	negs	r5, r5
 8010458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801045c:	4859      	ldr	r0, [pc, #356]	@ (80105c4 <_printf_i+0x238>)
 801045e:	230a      	movs	r3, #10
 8010460:	e011      	b.n	8010486 <_printf_i+0xfa>
 8010462:	6821      	ldr	r1, [r4, #0]
 8010464:	6833      	ldr	r3, [r6, #0]
 8010466:	0608      	lsls	r0, r1, #24
 8010468:	f853 5b04 	ldr.w	r5, [r3], #4
 801046c:	d402      	bmi.n	8010474 <_printf_i+0xe8>
 801046e:	0649      	lsls	r1, r1, #25
 8010470:	bf48      	it	mi
 8010472:	b2ad      	uxthmi	r5, r5
 8010474:	2f6f      	cmp	r7, #111	@ 0x6f
 8010476:	4853      	ldr	r0, [pc, #332]	@ (80105c4 <_printf_i+0x238>)
 8010478:	6033      	str	r3, [r6, #0]
 801047a:	bf14      	ite	ne
 801047c:	230a      	movne	r3, #10
 801047e:	2308      	moveq	r3, #8
 8010480:	2100      	movs	r1, #0
 8010482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010486:	6866      	ldr	r6, [r4, #4]
 8010488:	60a6      	str	r6, [r4, #8]
 801048a:	2e00      	cmp	r6, #0
 801048c:	bfa2      	ittt	ge
 801048e:	6821      	ldrge	r1, [r4, #0]
 8010490:	f021 0104 	bicge.w	r1, r1, #4
 8010494:	6021      	strge	r1, [r4, #0]
 8010496:	b90d      	cbnz	r5, 801049c <_printf_i+0x110>
 8010498:	2e00      	cmp	r6, #0
 801049a:	d04b      	beq.n	8010534 <_printf_i+0x1a8>
 801049c:	4616      	mov	r6, r2
 801049e:	fbb5 f1f3 	udiv	r1, r5, r3
 80104a2:	fb03 5711 	mls	r7, r3, r1, r5
 80104a6:	5dc7      	ldrb	r7, [r0, r7]
 80104a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104ac:	462f      	mov	r7, r5
 80104ae:	42bb      	cmp	r3, r7
 80104b0:	460d      	mov	r5, r1
 80104b2:	d9f4      	bls.n	801049e <_printf_i+0x112>
 80104b4:	2b08      	cmp	r3, #8
 80104b6:	d10b      	bne.n	80104d0 <_printf_i+0x144>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	07df      	lsls	r7, r3, #31
 80104bc:	d508      	bpl.n	80104d0 <_printf_i+0x144>
 80104be:	6923      	ldr	r3, [r4, #16]
 80104c0:	6861      	ldr	r1, [r4, #4]
 80104c2:	4299      	cmp	r1, r3
 80104c4:	bfde      	ittt	le
 80104c6:	2330      	movle	r3, #48	@ 0x30
 80104c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104d0:	1b92      	subs	r2, r2, r6
 80104d2:	6122      	str	r2, [r4, #16]
 80104d4:	f8cd a000 	str.w	sl, [sp]
 80104d8:	464b      	mov	r3, r9
 80104da:	aa03      	add	r2, sp, #12
 80104dc:	4621      	mov	r1, r4
 80104de:	4640      	mov	r0, r8
 80104e0:	f7ff fee6 	bl	80102b0 <_printf_common>
 80104e4:	3001      	adds	r0, #1
 80104e6:	d14a      	bne.n	801057e <_printf_i+0x1f2>
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	b004      	add	sp, #16
 80104ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	f043 0320 	orr.w	r3, r3, #32
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	4833      	ldr	r0, [pc, #204]	@ (80105c8 <_printf_i+0x23c>)
 80104fc:	2778      	movs	r7, #120	@ 0x78
 80104fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	6831      	ldr	r1, [r6, #0]
 8010506:	061f      	lsls	r7, r3, #24
 8010508:	f851 5b04 	ldr.w	r5, [r1], #4
 801050c:	d402      	bmi.n	8010514 <_printf_i+0x188>
 801050e:	065f      	lsls	r7, r3, #25
 8010510:	bf48      	it	mi
 8010512:	b2ad      	uxthmi	r5, r5
 8010514:	6031      	str	r1, [r6, #0]
 8010516:	07d9      	lsls	r1, r3, #31
 8010518:	bf44      	itt	mi
 801051a:	f043 0320 	orrmi.w	r3, r3, #32
 801051e:	6023      	strmi	r3, [r4, #0]
 8010520:	b11d      	cbz	r5, 801052a <_printf_i+0x19e>
 8010522:	2310      	movs	r3, #16
 8010524:	e7ac      	b.n	8010480 <_printf_i+0xf4>
 8010526:	4827      	ldr	r0, [pc, #156]	@ (80105c4 <_printf_i+0x238>)
 8010528:	e7e9      	b.n	80104fe <_printf_i+0x172>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	f023 0320 	bic.w	r3, r3, #32
 8010530:	6023      	str	r3, [r4, #0]
 8010532:	e7f6      	b.n	8010522 <_printf_i+0x196>
 8010534:	4616      	mov	r6, r2
 8010536:	e7bd      	b.n	80104b4 <_printf_i+0x128>
 8010538:	6833      	ldr	r3, [r6, #0]
 801053a:	6825      	ldr	r5, [r4, #0]
 801053c:	6961      	ldr	r1, [r4, #20]
 801053e:	1d18      	adds	r0, r3, #4
 8010540:	6030      	str	r0, [r6, #0]
 8010542:	062e      	lsls	r6, r5, #24
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	d501      	bpl.n	801054c <_printf_i+0x1c0>
 8010548:	6019      	str	r1, [r3, #0]
 801054a:	e002      	b.n	8010552 <_printf_i+0x1c6>
 801054c:	0668      	lsls	r0, r5, #25
 801054e:	d5fb      	bpl.n	8010548 <_printf_i+0x1bc>
 8010550:	8019      	strh	r1, [r3, #0]
 8010552:	2300      	movs	r3, #0
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	4616      	mov	r6, r2
 8010558:	e7bc      	b.n	80104d4 <_printf_i+0x148>
 801055a:	6833      	ldr	r3, [r6, #0]
 801055c:	1d1a      	adds	r2, r3, #4
 801055e:	6032      	str	r2, [r6, #0]
 8010560:	681e      	ldr	r6, [r3, #0]
 8010562:	6862      	ldr	r2, [r4, #4]
 8010564:	2100      	movs	r1, #0
 8010566:	4630      	mov	r0, r6
 8010568:	f7ef fec2 	bl	80002f0 <memchr>
 801056c:	b108      	cbz	r0, 8010572 <_printf_i+0x1e6>
 801056e:	1b80      	subs	r0, r0, r6
 8010570:	6060      	str	r0, [r4, #4]
 8010572:	6863      	ldr	r3, [r4, #4]
 8010574:	6123      	str	r3, [r4, #16]
 8010576:	2300      	movs	r3, #0
 8010578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801057c:	e7aa      	b.n	80104d4 <_printf_i+0x148>
 801057e:	6923      	ldr	r3, [r4, #16]
 8010580:	4632      	mov	r2, r6
 8010582:	4649      	mov	r1, r9
 8010584:	4640      	mov	r0, r8
 8010586:	47d0      	blx	sl
 8010588:	3001      	adds	r0, #1
 801058a:	d0ad      	beq.n	80104e8 <_printf_i+0x15c>
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	079b      	lsls	r3, r3, #30
 8010590:	d413      	bmi.n	80105ba <_printf_i+0x22e>
 8010592:	68e0      	ldr	r0, [r4, #12]
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	4298      	cmp	r0, r3
 8010598:	bfb8      	it	lt
 801059a:	4618      	movlt	r0, r3
 801059c:	e7a6      	b.n	80104ec <_printf_i+0x160>
 801059e:	2301      	movs	r3, #1
 80105a0:	4632      	mov	r2, r6
 80105a2:	4649      	mov	r1, r9
 80105a4:	4640      	mov	r0, r8
 80105a6:	47d0      	blx	sl
 80105a8:	3001      	adds	r0, #1
 80105aa:	d09d      	beq.n	80104e8 <_printf_i+0x15c>
 80105ac:	3501      	adds	r5, #1
 80105ae:	68e3      	ldr	r3, [r4, #12]
 80105b0:	9903      	ldr	r1, [sp, #12]
 80105b2:	1a5b      	subs	r3, r3, r1
 80105b4:	42ab      	cmp	r3, r5
 80105b6:	dcf2      	bgt.n	801059e <_printf_i+0x212>
 80105b8:	e7eb      	b.n	8010592 <_printf_i+0x206>
 80105ba:	2500      	movs	r5, #0
 80105bc:	f104 0619 	add.w	r6, r4, #25
 80105c0:	e7f5      	b.n	80105ae <_printf_i+0x222>
 80105c2:	bf00      	nop
 80105c4:	08010ec6 	.word	0x08010ec6
 80105c8:	08010ed7 	.word	0x08010ed7

080105cc <_scanf_chars>:
 80105cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d0:	4615      	mov	r5, r2
 80105d2:	688a      	ldr	r2, [r1, #8]
 80105d4:	4680      	mov	r8, r0
 80105d6:	460c      	mov	r4, r1
 80105d8:	b932      	cbnz	r2, 80105e8 <_scanf_chars+0x1c>
 80105da:	698a      	ldr	r2, [r1, #24]
 80105dc:	2a00      	cmp	r2, #0
 80105de:	bf14      	ite	ne
 80105e0:	f04f 32ff 	movne.w	r2, #4294967295
 80105e4:	2201      	moveq	r2, #1
 80105e6:	608a      	str	r2, [r1, #8]
 80105e8:	6822      	ldr	r2, [r4, #0]
 80105ea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801067c <_scanf_chars+0xb0>
 80105ee:	06d1      	lsls	r1, r2, #27
 80105f0:	bf5f      	itttt	pl
 80105f2:	681a      	ldrpl	r2, [r3, #0]
 80105f4:	1d11      	addpl	r1, r2, #4
 80105f6:	6019      	strpl	r1, [r3, #0]
 80105f8:	6816      	ldrpl	r6, [r2, #0]
 80105fa:	2700      	movs	r7, #0
 80105fc:	69a0      	ldr	r0, [r4, #24]
 80105fe:	b188      	cbz	r0, 8010624 <_scanf_chars+0x58>
 8010600:	2801      	cmp	r0, #1
 8010602:	d107      	bne.n	8010614 <_scanf_chars+0x48>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	781a      	ldrb	r2, [r3, #0]
 8010608:	6963      	ldr	r3, [r4, #20]
 801060a:	5c9b      	ldrb	r3, [r3, r2]
 801060c:	b953      	cbnz	r3, 8010624 <_scanf_chars+0x58>
 801060e:	2f00      	cmp	r7, #0
 8010610:	d031      	beq.n	8010676 <_scanf_chars+0xaa>
 8010612:	e022      	b.n	801065a <_scanf_chars+0x8e>
 8010614:	2802      	cmp	r0, #2
 8010616:	d120      	bne.n	801065a <_scanf_chars+0x8e>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010620:	071b      	lsls	r3, r3, #28
 8010622:	d41a      	bmi.n	801065a <_scanf_chars+0x8e>
 8010624:	6823      	ldr	r3, [r4, #0]
 8010626:	06da      	lsls	r2, r3, #27
 8010628:	bf5e      	ittt	pl
 801062a:	682b      	ldrpl	r3, [r5, #0]
 801062c:	781b      	ldrbpl	r3, [r3, #0]
 801062e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010632:	682a      	ldr	r2, [r5, #0]
 8010634:	686b      	ldr	r3, [r5, #4]
 8010636:	3201      	adds	r2, #1
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	68a2      	ldr	r2, [r4, #8]
 801063c:	3b01      	subs	r3, #1
 801063e:	3a01      	subs	r2, #1
 8010640:	606b      	str	r3, [r5, #4]
 8010642:	3701      	adds	r7, #1
 8010644:	60a2      	str	r2, [r4, #8]
 8010646:	b142      	cbz	r2, 801065a <_scanf_chars+0x8e>
 8010648:	2b00      	cmp	r3, #0
 801064a:	dcd7      	bgt.n	80105fc <_scanf_chars+0x30>
 801064c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010650:	4629      	mov	r1, r5
 8010652:	4640      	mov	r0, r8
 8010654:	4798      	blx	r3
 8010656:	2800      	cmp	r0, #0
 8010658:	d0d0      	beq.n	80105fc <_scanf_chars+0x30>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	f013 0310 	ands.w	r3, r3, #16
 8010660:	d105      	bne.n	801066e <_scanf_chars+0xa2>
 8010662:	68e2      	ldr	r2, [r4, #12]
 8010664:	3201      	adds	r2, #1
 8010666:	60e2      	str	r2, [r4, #12]
 8010668:	69a2      	ldr	r2, [r4, #24]
 801066a:	b102      	cbz	r2, 801066e <_scanf_chars+0xa2>
 801066c:	7033      	strb	r3, [r6, #0]
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	443b      	add	r3, r7
 8010672:	6123      	str	r3, [r4, #16]
 8010674:	2000      	movs	r0, #0
 8010676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067a:	bf00      	nop
 801067c:	08010db5 	.word	0x08010db5

08010680 <_scanf_i>:
 8010680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010684:	4698      	mov	r8, r3
 8010686:	4b74      	ldr	r3, [pc, #464]	@ (8010858 <_scanf_i+0x1d8>)
 8010688:	460c      	mov	r4, r1
 801068a:	4682      	mov	sl, r0
 801068c:	4616      	mov	r6, r2
 801068e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010692:	b087      	sub	sp, #28
 8010694:	ab03      	add	r3, sp, #12
 8010696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801069a:	4b70      	ldr	r3, [pc, #448]	@ (801085c <_scanf_i+0x1dc>)
 801069c:	69a1      	ldr	r1, [r4, #24]
 801069e:	4a70      	ldr	r2, [pc, #448]	@ (8010860 <_scanf_i+0x1e0>)
 80106a0:	2903      	cmp	r1, #3
 80106a2:	bf08      	it	eq
 80106a4:	461a      	moveq	r2, r3
 80106a6:	68a3      	ldr	r3, [r4, #8]
 80106a8:	9201      	str	r2, [sp, #4]
 80106aa:	1e5a      	subs	r2, r3, #1
 80106ac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80106b0:	bf88      	it	hi
 80106b2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80106b6:	4627      	mov	r7, r4
 80106b8:	bf82      	ittt	hi
 80106ba:	eb03 0905 	addhi.w	r9, r3, r5
 80106be:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80106c2:	60a3      	strhi	r3, [r4, #8]
 80106c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80106c8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80106cc:	bf98      	it	ls
 80106ce:	f04f 0900 	movls.w	r9, #0
 80106d2:	6023      	str	r3, [r4, #0]
 80106d4:	463d      	mov	r5, r7
 80106d6:	f04f 0b00 	mov.w	fp, #0
 80106da:	6831      	ldr	r1, [r6, #0]
 80106dc:	ab03      	add	r3, sp, #12
 80106de:	7809      	ldrb	r1, [r1, #0]
 80106e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80106e4:	2202      	movs	r2, #2
 80106e6:	f7ef fe03 	bl	80002f0 <memchr>
 80106ea:	b328      	cbz	r0, 8010738 <_scanf_i+0xb8>
 80106ec:	f1bb 0f01 	cmp.w	fp, #1
 80106f0:	d159      	bne.n	80107a6 <_scanf_i+0x126>
 80106f2:	6862      	ldr	r2, [r4, #4]
 80106f4:	b92a      	cbnz	r2, 8010702 <_scanf_i+0x82>
 80106f6:	6822      	ldr	r2, [r4, #0]
 80106f8:	2108      	movs	r1, #8
 80106fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80106fe:	6061      	str	r1, [r4, #4]
 8010700:	6022      	str	r2, [r4, #0]
 8010702:	6822      	ldr	r2, [r4, #0]
 8010704:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010708:	6022      	str	r2, [r4, #0]
 801070a:	68a2      	ldr	r2, [r4, #8]
 801070c:	1e51      	subs	r1, r2, #1
 801070e:	60a1      	str	r1, [r4, #8]
 8010710:	b192      	cbz	r2, 8010738 <_scanf_i+0xb8>
 8010712:	6832      	ldr	r2, [r6, #0]
 8010714:	1c51      	adds	r1, r2, #1
 8010716:	6031      	str	r1, [r6, #0]
 8010718:	7812      	ldrb	r2, [r2, #0]
 801071a:	f805 2b01 	strb.w	r2, [r5], #1
 801071e:	6872      	ldr	r2, [r6, #4]
 8010720:	3a01      	subs	r2, #1
 8010722:	2a00      	cmp	r2, #0
 8010724:	6072      	str	r2, [r6, #4]
 8010726:	dc07      	bgt.n	8010738 <_scanf_i+0xb8>
 8010728:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801072c:	4631      	mov	r1, r6
 801072e:	4650      	mov	r0, sl
 8010730:	4790      	blx	r2
 8010732:	2800      	cmp	r0, #0
 8010734:	f040 8085 	bne.w	8010842 <_scanf_i+0x1c2>
 8010738:	f10b 0b01 	add.w	fp, fp, #1
 801073c:	f1bb 0f03 	cmp.w	fp, #3
 8010740:	d1cb      	bne.n	80106da <_scanf_i+0x5a>
 8010742:	6863      	ldr	r3, [r4, #4]
 8010744:	b90b      	cbnz	r3, 801074a <_scanf_i+0xca>
 8010746:	230a      	movs	r3, #10
 8010748:	6063      	str	r3, [r4, #4]
 801074a:	6863      	ldr	r3, [r4, #4]
 801074c:	4945      	ldr	r1, [pc, #276]	@ (8010864 <_scanf_i+0x1e4>)
 801074e:	6960      	ldr	r0, [r4, #20]
 8010750:	1ac9      	subs	r1, r1, r3
 8010752:	f000 f889 	bl	8010868 <__sccl>
 8010756:	f04f 0b00 	mov.w	fp, #0
 801075a:	68a3      	ldr	r3, [r4, #8]
 801075c:	6822      	ldr	r2, [r4, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d03d      	beq.n	80107de <_scanf_i+0x15e>
 8010762:	6831      	ldr	r1, [r6, #0]
 8010764:	6960      	ldr	r0, [r4, #20]
 8010766:	f891 c000 	ldrb.w	ip, [r1]
 801076a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801076e:	2800      	cmp	r0, #0
 8010770:	d035      	beq.n	80107de <_scanf_i+0x15e>
 8010772:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010776:	d124      	bne.n	80107c2 <_scanf_i+0x142>
 8010778:	0510      	lsls	r0, r2, #20
 801077a:	d522      	bpl.n	80107c2 <_scanf_i+0x142>
 801077c:	f10b 0b01 	add.w	fp, fp, #1
 8010780:	f1b9 0f00 	cmp.w	r9, #0
 8010784:	d003      	beq.n	801078e <_scanf_i+0x10e>
 8010786:	3301      	adds	r3, #1
 8010788:	f109 39ff 	add.w	r9, r9, #4294967295
 801078c:	60a3      	str	r3, [r4, #8]
 801078e:	6873      	ldr	r3, [r6, #4]
 8010790:	3b01      	subs	r3, #1
 8010792:	2b00      	cmp	r3, #0
 8010794:	6073      	str	r3, [r6, #4]
 8010796:	dd1b      	ble.n	80107d0 <_scanf_i+0x150>
 8010798:	6833      	ldr	r3, [r6, #0]
 801079a:	3301      	adds	r3, #1
 801079c:	6033      	str	r3, [r6, #0]
 801079e:	68a3      	ldr	r3, [r4, #8]
 80107a0:	3b01      	subs	r3, #1
 80107a2:	60a3      	str	r3, [r4, #8]
 80107a4:	e7d9      	b.n	801075a <_scanf_i+0xda>
 80107a6:	f1bb 0f02 	cmp.w	fp, #2
 80107aa:	d1ae      	bne.n	801070a <_scanf_i+0x8a>
 80107ac:	6822      	ldr	r2, [r4, #0]
 80107ae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80107b2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80107b6:	d1bf      	bne.n	8010738 <_scanf_i+0xb8>
 80107b8:	2110      	movs	r1, #16
 80107ba:	6061      	str	r1, [r4, #4]
 80107bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80107c0:	e7a2      	b.n	8010708 <_scanf_i+0x88>
 80107c2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80107c6:	6022      	str	r2, [r4, #0]
 80107c8:	780b      	ldrb	r3, [r1, #0]
 80107ca:	f805 3b01 	strb.w	r3, [r5], #1
 80107ce:	e7de      	b.n	801078e <_scanf_i+0x10e>
 80107d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80107d4:	4631      	mov	r1, r6
 80107d6:	4650      	mov	r0, sl
 80107d8:	4798      	blx	r3
 80107da:	2800      	cmp	r0, #0
 80107dc:	d0df      	beq.n	801079e <_scanf_i+0x11e>
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	05d9      	lsls	r1, r3, #23
 80107e2:	d50d      	bpl.n	8010800 <_scanf_i+0x180>
 80107e4:	42bd      	cmp	r5, r7
 80107e6:	d909      	bls.n	80107fc <_scanf_i+0x17c>
 80107e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80107ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80107f0:	4632      	mov	r2, r6
 80107f2:	4650      	mov	r0, sl
 80107f4:	4798      	blx	r3
 80107f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80107fa:	464d      	mov	r5, r9
 80107fc:	42bd      	cmp	r5, r7
 80107fe:	d028      	beq.n	8010852 <_scanf_i+0x1d2>
 8010800:	6822      	ldr	r2, [r4, #0]
 8010802:	f012 0210 	ands.w	r2, r2, #16
 8010806:	d113      	bne.n	8010830 <_scanf_i+0x1b0>
 8010808:	702a      	strb	r2, [r5, #0]
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	9e01      	ldr	r6, [sp, #4]
 801080e:	4639      	mov	r1, r7
 8010810:	4650      	mov	r0, sl
 8010812:	47b0      	blx	r6
 8010814:	f8d8 3000 	ldr.w	r3, [r8]
 8010818:	6821      	ldr	r1, [r4, #0]
 801081a:	1d1a      	adds	r2, r3, #4
 801081c:	f8c8 2000 	str.w	r2, [r8]
 8010820:	f011 0f20 	tst.w	r1, #32
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	d00f      	beq.n	8010848 <_scanf_i+0x1c8>
 8010828:	6018      	str	r0, [r3, #0]
 801082a:	68e3      	ldr	r3, [r4, #12]
 801082c:	3301      	adds	r3, #1
 801082e:	60e3      	str	r3, [r4, #12]
 8010830:	6923      	ldr	r3, [r4, #16]
 8010832:	1bed      	subs	r5, r5, r7
 8010834:	445d      	add	r5, fp
 8010836:	442b      	add	r3, r5
 8010838:	6123      	str	r3, [r4, #16]
 801083a:	2000      	movs	r0, #0
 801083c:	b007      	add	sp, #28
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	f04f 0b00 	mov.w	fp, #0
 8010846:	e7ca      	b.n	80107de <_scanf_i+0x15e>
 8010848:	07ca      	lsls	r2, r1, #31
 801084a:	bf4c      	ite	mi
 801084c:	8018      	strhmi	r0, [r3, #0]
 801084e:	6018      	strpl	r0, [r3, #0]
 8010850:	e7eb      	b.n	801082a <_scanf_i+0x1aa>
 8010852:	2001      	movs	r0, #1
 8010854:	e7f2      	b.n	801083c <_scanf_i+0x1bc>
 8010856:	bf00      	nop
 8010858:	08010d90 	.word	0x08010d90
 801085c:	08010b11 	.word	0x08010b11
 8010860:	0800f961 	.word	0x0800f961
 8010864:	08010ef8 	.word	0x08010ef8

08010868 <__sccl>:
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	780b      	ldrb	r3, [r1, #0]
 801086c:	4604      	mov	r4, r0
 801086e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010870:	bf0b      	itete	eq
 8010872:	784b      	ldrbeq	r3, [r1, #1]
 8010874:	1c4a      	addne	r2, r1, #1
 8010876:	1c8a      	addeq	r2, r1, #2
 8010878:	2100      	movne	r1, #0
 801087a:	bf08      	it	eq
 801087c:	2101      	moveq	r1, #1
 801087e:	3801      	subs	r0, #1
 8010880:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010884:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010888:	42a8      	cmp	r0, r5
 801088a:	d1fb      	bne.n	8010884 <__sccl+0x1c>
 801088c:	b90b      	cbnz	r3, 8010892 <__sccl+0x2a>
 801088e:	1e50      	subs	r0, r2, #1
 8010890:	bd70      	pop	{r4, r5, r6, pc}
 8010892:	f081 0101 	eor.w	r1, r1, #1
 8010896:	54e1      	strb	r1, [r4, r3]
 8010898:	4610      	mov	r0, r2
 801089a:	4602      	mov	r2, r0
 801089c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80108a0:	2d2d      	cmp	r5, #45	@ 0x2d
 80108a2:	d005      	beq.n	80108b0 <__sccl+0x48>
 80108a4:	2d5d      	cmp	r5, #93	@ 0x5d
 80108a6:	d016      	beq.n	80108d6 <__sccl+0x6e>
 80108a8:	2d00      	cmp	r5, #0
 80108aa:	d0f1      	beq.n	8010890 <__sccl+0x28>
 80108ac:	462b      	mov	r3, r5
 80108ae:	e7f2      	b.n	8010896 <__sccl+0x2e>
 80108b0:	7846      	ldrb	r6, [r0, #1]
 80108b2:	2e5d      	cmp	r6, #93	@ 0x5d
 80108b4:	d0fa      	beq.n	80108ac <__sccl+0x44>
 80108b6:	42b3      	cmp	r3, r6
 80108b8:	dcf8      	bgt.n	80108ac <__sccl+0x44>
 80108ba:	3002      	adds	r0, #2
 80108bc:	461a      	mov	r2, r3
 80108be:	3201      	adds	r2, #1
 80108c0:	4296      	cmp	r6, r2
 80108c2:	54a1      	strb	r1, [r4, r2]
 80108c4:	dcfb      	bgt.n	80108be <__sccl+0x56>
 80108c6:	1af2      	subs	r2, r6, r3
 80108c8:	3a01      	subs	r2, #1
 80108ca:	1c5d      	adds	r5, r3, #1
 80108cc:	42b3      	cmp	r3, r6
 80108ce:	bfa8      	it	ge
 80108d0:	2200      	movge	r2, #0
 80108d2:	18ab      	adds	r3, r5, r2
 80108d4:	e7e1      	b.n	801089a <__sccl+0x32>
 80108d6:	4610      	mov	r0, r2
 80108d8:	e7da      	b.n	8010890 <__sccl+0x28>

080108da <__submore>:
 80108da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108de:	460c      	mov	r4, r1
 80108e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80108e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108e6:	4299      	cmp	r1, r3
 80108e8:	d11d      	bne.n	8010926 <__submore+0x4c>
 80108ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80108ee:	f7ff f92f 	bl	800fb50 <_malloc_r>
 80108f2:	b918      	cbnz	r0, 80108fc <__submore+0x22>
 80108f4:	f04f 30ff 	mov.w	r0, #4294967295
 80108f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010900:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010902:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010906:	6360      	str	r0, [r4, #52]	@ 0x34
 8010908:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801090c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010910:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010914:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010918:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801091c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010920:	6020      	str	r0, [r4, #0]
 8010922:	2000      	movs	r0, #0
 8010924:	e7e8      	b.n	80108f8 <__submore+0x1e>
 8010926:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010928:	0077      	lsls	r7, r6, #1
 801092a:	463a      	mov	r2, r7
 801092c:	f000 f848 	bl	80109c0 <_realloc_r>
 8010930:	4605      	mov	r5, r0
 8010932:	2800      	cmp	r0, #0
 8010934:	d0de      	beq.n	80108f4 <__submore+0x1a>
 8010936:	eb00 0806 	add.w	r8, r0, r6
 801093a:	4601      	mov	r1, r0
 801093c:	4632      	mov	r2, r6
 801093e:	4640      	mov	r0, r8
 8010940:	f000 f830 	bl	80109a4 <memcpy>
 8010944:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010948:	f8c4 8000 	str.w	r8, [r4]
 801094c:	e7e9      	b.n	8010922 <__submore+0x48>

0801094e <memmove>:
 801094e:	4288      	cmp	r0, r1
 8010950:	b510      	push	{r4, lr}
 8010952:	eb01 0402 	add.w	r4, r1, r2
 8010956:	d902      	bls.n	801095e <memmove+0x10>
 8010958:	4284      	cmp	r4, r0
 801095a:	4623      	mov	r3, r4
 801095c:	d807      	bhi.n	801096e <memmove+0x20>
 801095e:	1e43      	subs	r3, r0, #1
 8010960:	42a1      	cmp	r1, r4
 8010962:	d008      	beq.n	8010976 <memmove+0x28>
 8010964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010968:	f803 2f01 	strb.w	r2, [r3, #1]!
 801096c:	e7f8      	b.n	8010960 <memmove+0x12>
 801096e:	4402      	add	r2, r0
 8010970:	4601      	mov	r1, r0
 8010972:	428a      	cmp	r2, r1
 8010974:	d100      	bne.n	8010978 <memmove+0x2a>
 8010976:	bd10      	pop	{r4, pc}
 8010978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801097c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010980:	e7f7      	b.n	8010972 <memmove+0x24>
	...

08010984 <_sbrk_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d06      	ldr	r5, [pc, #24]	@ (80109a0 <_sbrk_r+0x1c>)
 8010988:	2300      	movs	r3, #0
 801098a:	4604      	mov	r4, r0
 801098c:	4608      	mov	r0, r1
 801098e:	602b      	str	r3, [r5, #0]
 8010990:	f7f0 f9b4 	bl	8000cfc <_sbrk>
 8010994:	1c43      	adds	r3, r0, #1
 8010996:	d102      	bne.n	801099e <_sbrk_r+0x1a>
 8010998:	682b      	ldr	r3, [r5, #0]
 801099a:	b103      	cbz	r3, 801099e <_sbrk_r+0x1a>
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	bd38      	pop	{r3, r4, r5, pc}
 80109a0:	24003238 	.word	0x24003238

080109a4 <memcpy>:
 80109a4:	440a      	add	r2, r1
 80109a6:	4291      	cmp	r1, r2
 80109a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80109ac:	d100      	bne.n	80109b0 <memcpy+0xc>
 80109ae:	4770      	bx	lr
 80109b0:	b510      	push	{r4, lr}
 80109b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109ba:	4291      	cmp	r1, r2
 80109bc:	d1f9      	bne.n	80109b2 <memcpy+0xe>
 80109be:	bd10      	pop	{r4, pc}

080109c0 <_realloc_r>:
 80109c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c4:	4680      	mov	r8, r0
 80109c6:	4615      	mov	r5, r2
 80109c8:	460c      	mov	r4, r1
 80109ca:	b921      	cbnz	r1, 80109d6 <_realloc_r+0x16>
 80109cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d0:	4611      	mov	r1, r2
 80109d2:	f7ff b8bd 	b.w	800fb50 <_malloc_r>
 80109d6:	b92a      	cbnz	r2, 80109e4 <_realloc_r+0x24>
 80109d8:	f7ff f84e 	bl	800fa78 <_free_r>
 80109dc:	2400      	movs	r4, #0
 80109de:	4620      	mov	r0, r4
 80109e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e4:	f000 f896 	bl	8010b14 <_malloc_usable_size_r>
 80109e8:	4285      	cmp	r5, r0
 80109ea:	4606      	mov	r6, r0
 80109ec:	d802      	bhi.n	80109f4 <_realloc_r+0x34>
 80109ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80109f2:	d8f4      	bhi.n	80109de <_realloc_r+0x1e>
 80109f4:	4629      	mov	r1, r5
 80109f6:	4640      	mov	r0, r8
 80109f8:	f7ff f8aa 	bl	800fb50 <_malloc_r>
 80109fc:	4607      	mov	r7, r0
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d0ec      	beq.n	80109dc <_realloc_r+0x1c>
 8010a02:	42b5      	cmp	r5, r6
 8010a04:	462a      	mov	r2, r5
 8010a06:	4621      	mov	r1, r4
 8010a08:	bf28      	it	cs
 8010a0a:	4632      	movcs	r2, r6
 8010a0c:	f7ff ffca 	bl	80109a4 <memcpy>
 8010a10:	4621      	mov	r1, r4
 8010a12:	4640      	mov	r0, r8
 8010a14:	f7ff f830 	bl	800fa78 <_free_r>
 8010a18:	463c      	mov	r4, r7
 8010a1a:	e7e0      	b.n	80109de <_realloc_r+0x1e>

08010a1c <_strtol_l.constprop.0>:
 8010a1c:	2b24      	cmp	r3, #36	@ 0x24
 8010a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a22:	4686      	mov	lr, r0
 8010a24:	4690      	mov	r8, r2
 8010a26:	d801      	bhi.n	8010a2c <_strtol_l.constprop.0+0x10>
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d106      	bne.n	8010a3a <_strtol_l.constprop.0+0x1e>
 8010a2c:	f7fe fff8 	bl	800fa20 <__errno>
 8010a30:	2316      	movs	r3, #22
 8010a32:	6003      	str	r3, [r0, #0]
 8010a34:	2000      	movs	r0, #0
 8010a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a3a:	4834      	ldr	r0, [pc, #208]	@ (8010b0c <_strtol_l.constprop.0+0xf0>)
 8010a3c:	460d      	mov	r5, r1
 8010a3e:	462a      	mov	r2, r5
 8010a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a44:	5d06      	ldrb	r6, [r0, r4]
 8010a46:	f016 0608 	ands.w	r6, r6, #8
 8010a4a:	d1f8      	bne.n	8010a3e <_strtol_l.constprop.0+0x22>
 8010a4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8010a4e:	d12d      	bne.n	8010aac <_strtol_l.constprop.0+0x90>
 8010a50:	782c      	ldrb	r4, [r5, #0]
 8010a52:	2601      	movs	r6, #1
 8010a54:	1c95      	adds	r5, r2, #2
 8010a56:	f033 0210 	bics.w	r2, r3, #16
 8010a5a:	d109      	bne.n	8010a70 <_strtol_l.constprop.0+0x54>
 8010a5c:	2c30      	cmp	r4, #48	@ 0x30
 8010a5e:	d12a      	bne.n	8010ab6 <_strtol_l.constprop.0+0x9a>
 8010a60:	782a      	ldrb	r2, [r5, #0]
 8010a62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010a66:	2a58      	cmp	r2, #88	@ 0x58
 8010a68:	d125      	bne.n	8010ab6 <_strtol_l.constprop.0+0x9a>
 8010a6a:	786c      	ldrb	r4, [r5, #1]
 8010a6c:	2310      	movs	r3, #16
 8010a6e:	3502      	adds	r5, #2
 8010a70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010a74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010a78:	2200      	movs	r2, #0
 8010a7a:	fbbc f9f3 	udiv	r9, ip, r3
 8010a7e:	4610      	mov	r0, r2
 8010a80:	fb03 ca19 	mls	sl, r3, r9, ip
 8010a84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010a88:	2f09      	cmp	r7, #9
 8010a8a:	d81b      	bhi.n	8010ac4 <_strtol_l.constprop.0+0xa8>
 8010a8c:	463c      	mov	r4, r7
 8010a8e:	42a3      	cmp	r3, r4
 8010a90:	dd27      	ble.n	8010ae2 <_strtol_l.constprop.0+0xc6>
 8010a92:	1c57      	adds	r7, r2, #1
 8010a94:	d007      	beq.n	8010aa6 <_strtol_l.constprop.0+0x8a>
 8010a96:	4581      	cmp	r9, r0
 8010a98:	d320      	bcc.n	8010adc <_strtol_l.constprop.0+0xc0>
 8010a9a:	d101      	bne.n	8010aa0 <_strtol_l.constprop.0+0x84>
 8010a9c:	45a2      	cmp	sl, r4
 8010a9e:	db1d      	blt.n	8010adc <_strtol_l.constprop.0+0xc0>
 8010aa0:	fb00 4003 	mla	r0, r0, r3, r4
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010aaa:	e7eb      	b.n	8010a84 <_strtol_l.constprop.0+0x68>
 8010aac:	2c2b      	cmp	r4, #43	@ 0x2b
 8010aae:	bf04      	itt	eq
 8010ab0:	782c      	ldrbeq	r4, [r5, #0]
 8010ab2:	1c95      	addeq	r5, r2, #2
 8010ab4:	e7cf      	b.n	8010a56 <_strtol_l.constprop.0+0x3a>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1da      	bne.n	8010a70 <_strtol_l.constprop.0+0x54>
 8010aba:	2c30      	cmp	r4, #48	@ 0x30
 8010abc:	bf0c      	ite	eq
 8010abe:	2308      	moveq	r3, #8
 8010ac0:	230a      	movne	r3, #10
 8010ac2:	e7d5      	b.n	8010a70 <_strtol_l.constprop.0+0x54>
 8010ac4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010ac8:	2f19      	cmp	r7, #25
 8010aca:	d801      	bhi.n	8010ad0 <_strtol_l.constprop.0+0xb4>
 8010acc:	3c37      	subs	r4, #55	@ 0x37
 8010ace:	e7de      	b.n	8010a8e <_strtol_l.constprop.0+0x72>
 8010ad0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010ad4:	2f19      	cmp	r7, #25
 8010ad6:	d804      	bhi.n	8010ae2 <_strtol_l.constprop.0+0xc6>
 8010ad8:	3c57      	subs	r4, #87	@ 0x57
 8010ada:	e7d8      	b.n	8010a8e <_strtol_l.constprop.0+0x72>
 8010adc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ae0:	e7e1      	b.n	8010aa6 <_strtol_l.constprop.0+0x8a>
 8010ae2:	1c53      	adds	r3, r2, #1
 8010ae4:	d108      	bne.n	8010af8 <_strtol_l.constprop.0+0xdc>
 8010ae6:	2322      	movs	r3, #34	@ 0x22
 8010ae8:	f8ce 3000 	str.w	r3, [lr]
 8010aec:	4660      	mov	r0, ip
 8010aee:	f1b8 0f00 	cmp.w	r8, #0
 8010af2:	d0a0      	beq.n	8010a36 <_strtol_l.constprop.0+0x1a>
 8010af4:	1e69      	subs	r1, r5, #1
 8010af6:	e006      	b.n	8010b06 <_strtol_l.constprop.0+0xea>
 8010af8:	b106      	cbz	r6, 8010afc <_strtol_l.constprop.0+0xe0>
 8010afa:	4240      	negs	r0, r0
 8010afc:	f1b8 0f00 	cmp.w	r8, #0
 8010b00:	d099      	beq.n	8010a36 <_strtol_l.constprop.0+0x1a>
 8010b02:	2a00      	cmp	r2, #0
 8010b04:	d1f6      	bne.n	8010af4 <_strtol_l.constprop.0+0xd8>
 8010b06:	f8c8 1000 	str.w	r1, [r8]
 8010b0a:	e794      	b.n	8010a36 <_strtol_l.constprop.0+0x1a>
 8010b0c:	08010db5 	.word	0x08010db5

08010b10 <_strtol_r>:
 8010b10:	f7ff bf84 	b.w	8010a1c <_strtol_l.constprop.0>

08010b14 <_malloc_usable_size_r>:
 8010b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b18:	1f18      	subs	r0, r3, #4
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	bfbc      	itt	lt
 8010b1e:	580b      	ldrlt	r3, [r1, r0]
 8010b20:	18c0      	addlt	r0, r0, r3
 8010b22:	4770      	bx	lr

08010b24 <_init>:
 8010b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b26:	bf00      	nop
 8010b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b2a:	bc08      	pop	{r3}
 8010b2c:	469e      	mov	lr, r3
 8010b2e:	4770      	bx	lr

08010b30 <_fini>:
 8010b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b32:	bf00      	nop
 8010b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b36:	bc08      	pop	{r3}
 8010b38:	469e      	mov	lr, r3
 8010b3a:	4770      	bx	lr
