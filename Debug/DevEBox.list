
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e60  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08013100  08013100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013524  08013524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801352c  0801352c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013530  08013530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  08013534  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031d0  24000160  08013694  00015160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003330  08013694  00015330  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000400  38000000  38000000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00016400  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c52b  00000000  00000000  0001642e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005cbc  00000000  00000000  00042959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002028  00000000  00000000  00048618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018d3  00000000  00000000  0004a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fc88  00000000  00000000  0004bf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031276  00000000  00000000  0008bb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001808bc  00000000  00000000  000bce11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0023d6cd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009080  00000000  00000000  0023d710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00246790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080130e8 	.word	0x080130e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	080130e8 	.word	0x080130e8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <MX_ADC3_Init+0xd4>)
 80006d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_ADC3_Init+0xd0>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000712:	2201      	movs	r2, #1
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC3_Init+0xd0>)
 800072e:	2201      	movs	r2, #1
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000732:	4816      	ldr	r0, [pc, #88]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000734:	f001 fb66 	bl	8001e04 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800073e:	f000 fca9 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC3_Init+0xd8>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800074a:	2307      	movs	r3, #7
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000754:	2304      	movs	r3, #4
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000766:	f001 fe1f 	bl	80023a8 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000770:	f000 fc90 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_ADC3_Init+0xdc>)
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8000778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800077c:	69f9      	ldr	r1, [r7, #28]
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000780:	f001 fce2 	bl	8002148 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2400017c 	.word	0x2400017c
 8000790:	58026000 	.word	0x58026000
 8000794:	cb840000 	.word	0xcb840000
 8000798:	38000000 	.word	0x38000000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b4      	sub	sp, #208	@ 0xd0
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	22c0      	movs	r2, #192	@ 0xc0
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f011 fc0f 	bl	8011fd0 <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <HAL_ADC_MspInit+0xe8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d15e      	bne.n	800087a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80007c8:	2319      	movs	r3, #25
 80007ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80007cc:	23c0      	movs	r3, #192	@ 0xc0
 80007ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 fb58 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80007fe:	f000 fc49 	bl	8001094 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <HAL_ADC_MspInit+0xf4>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000828:	2211      	movs	r2, #17
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800083a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800084a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000860:	f002 fd30 	bl	80032c4 <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 800086a:	f000 fc13 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000872:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000874:	4a05      	ldr	r2, [pc, #20]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	37d0      	adds	r7, #208	@ 0xd0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58026000 	.word	0x58026000
 8000888:	58024400 	.word	0x58024400
 800088c:	240001e0 	.word	0x240001e0
 8000890:	58025408 	.word	0x58025408

08000894 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <HAL_ADC_ConvCpltCallback+0x34>)
 800089e:	f001 fd17 	bl	80022d0 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008ae:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n conversion_count = %d", conversion_count);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008ba:	f011 f9dd 	bl	8011c78 <DebugPrint>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2400017c 	.word	0x2400017c
 80008cc:	24000258 	.word	0x24000258
 80008d0:	08013100 	.word	0x08013100

080008d4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008de:	f001 fcf7 	bl	80022d0 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008ee:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <HAL_ADC_ErrorCallback+0x40>)
 80008f8:	f011 f9be 	bl	8011c78 <DebugPrint>
	hadc3.State = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2400017c 	.word	0x2400017c
 8000910:	24000258 	.word	0x24000258
 8000914:	0801311c 	.word	0x0801311c

08000918 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <CalcTemperature+0xe4>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d05c      	beq.n	80009e2 <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8000928:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <CalcTemperature+0xe8>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d030      	beq.n	8000996 <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000934:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <CalcTemperature+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
}
 8000940:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <CalcTemperature+0xe8>)
 8000944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000948:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	0b5b      	lsrs	r3, r3, #13
 800094e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000952:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800095c:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	015a      	lsls	r2, r3, #5
 8000962:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000966:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800096c:	4924      	ldr	r1, [pc, #144]	@ (8000a00 <CalcTemperature+0xe8>)
 800096e:	4313      	orrs	r3, r2
 8000970:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ef      	bne.n	800095e <CalcTemperature+0x46>
    } while(sets-- != 0U);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e5      	bne.n	8000954 <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000994:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	e010      	b.n	80009c2 <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <CalcTemperature+0xec>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a8:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	4413      	add	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <CalcTemperature+0xec>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2100      	movs	r1, #0
 80009b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	ddeb      	ble.n	80009a0 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <CalcTemperature+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <CalcTemperature+0xec>)
 80009d0:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d6:	6939      	ldr	r1, [r7, #16]
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <CalcTemperature+0xf0>)
 80009da:	f001 fbb5 	bl	8002148 <HAL_ADC_Start_DMA>

		return total_adc;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	e008      	b.n	80009f4 <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <CalcTemperature+0xec>)
 80009e4:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ea:	6979      	ldr	r1, [r7, #20]
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <CalcTemperature+0xf0>)
 80009ee:	f001 fbab 	bl	8002148 <HAL_ADC_Start_DMA>
	}

	return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	24000258 	.word	0x24000258
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	38000000 	.word	0x38000000
 8000a08:	2400017c 	.word	0x2400017c

08000a0c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2081      	movs	r0, #129	@ 0x81
 8000a36:	f002 fba5 	bl	8003184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000a3a:	2081      	movs	r0, #129	@ 0x81
 8000a3c:	f002 fbbc 	bl	80031b8 <HAL_NVIC_EnableIRQ>

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400

08000a4c <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a3a      	ldr	r2, [pc, #232]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a80:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b25      	ldr	r3, [pc, #148]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	4a24      	ldr	r2, [pc, #144]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_GPIO_Init+0x108>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4816      	ldr	r0, [pc, #88]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000afe:	f005 f987 	bl	8005e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <MX_GPIO_Init+0x10c>)
 8000b1a:	f004 ffc9 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x110>)
 8000b3c:	f004 ffb8 	bl	8005ab0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000b40:	2100      	movs	r1, #0
 8000b42:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000b46:	f000 fedd 	bl	8001904 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020000 	.word	0x58020000
 8000b5c:	58020400 	.word	0x58020400

08000b60 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c_lcd;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f023 030f 	bic.w	r3, r3, #15
 8000b70:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f043 030c 	orr.w	r3, r3, #12
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	f043 030c 	orr.w	r3, r3, #12
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c_lcd, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ba0:	f107 0208 	add.w	r2, r7, #8
 8000ba4:	2364      	movs	r3, #100	@ 0x64
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2304      	movs	r3, #4
 8000baa:	214e      	movs	r1, #78	@ 0x4e
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <lcd_send_cmd+0x5c>)
 8000bae:	f005 f9e5 	bl	8005f7c <HAL_I2C_Master_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2400025c 	.word	0x2400025c

08000bc0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f043 030d 	orr.w	r3, r3, #13
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f043 0309 	orr.w	r3, r3, #9
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	f043 030d 	orr.w	r3, r3, #13
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	f043 0309 	orr.w	r3, r3, #9
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c_lcd, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c00:	f107 0208 	add.w	r2, r7, #8
 8000c04:	2364      	movs	r3, #100	@ 0x64
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2304      	movs	r3, #4
 8000c0a:	214e      	movs	r1, #78	@ 0x4e
 8000c0c:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <lcd_send_data+0x5c>)
 8000c0e:	f005 f9b5 	bl	8005f7c <HAL_I2C_Master_Transmit>
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2400025c 	.word	0x2400025c

08000c20 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <lcd_put_cur+0x18>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d005      	beq.n	8000c42 <lcd_put_cur+0x22>
 8000c36:	e009      	b.n	8000c4c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3e:	603b      	str	r3, [r7, #0]
            break;
 8000c40:	e004      	b.n	8000c4c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c48:	603b      	str	r3, [r7, #0]
            break;
 8000c4a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff85 	bl	8000b60 <lcd_send_cmd>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <lcd_init>:


void lcd_init (void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c62:	2032      	movs	r0, #50	@ 0x32
 8000c64:	f000 fe1e 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c68:	2030      	movs	r0, #48	@ 0x30
 8000c6a:	f7ff ff79 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c6e:	2005      	movs	r0, #5
 8000c70:	f000 fe18 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c74:	2030      	movs	r0, #48	@ 0x30
 8000c76:	f7ff ff73 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 fe12 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c80:	2030      	movs	r0, #48	@ 0x30
 8000c82:	f7ff ff6d 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f000 fe0c 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c8c:	2020      	movs	r0, #32
 8000c8e:	f7ff ff67 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f000 fe06 	bl	80018a4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c98:	2028      	movs	r0, #40	@ 0x28
 8000c9a:	f7ff ff61 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f000 fe00 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ca4:	2008      	movs	r0, #8
 8000ca6:	f7ff ff5b 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fdfa 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff ff55 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 fdf4 	bl	80018a4 <HAL_Delay>
	HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 fdf1 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff ff4c 	bl	8000b60 <lcd_send_cmd>
	HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fdeb 	bl	80018a4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cce:	200c      	movs	r0, #12
 8000cd0:	f7ff ff46 	bl	8000b60 <lcd_send_cmd>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ce0:	e006      	b.n	8000cf0 <lcd_send_string+0x18>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff68 	bl	8000bc0 <lcd_send_data>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f4      	bne.n	8000ce2 <lcd_send_string+0xa>
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <MX_I2C2_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <MX_I2C2_Init+0x7c>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d3e:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d40:	f005 f880 	bl	8005e44 <HAL_I2C_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d4a:	f000 f9a3 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d52:	f005 fc45 	bl	80065e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d5c:	f000 f99a 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_I2C2_Init+0x74>)
 8000d64:	f005 fc87 	bl	8006676 <HAL_I2CEx_ConfigDigitalFilter>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 f991 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2400025c 	.word	0x2400025c
 8000d7c:	40005800 	.word	0x40005800
 8000d80:	10c0ecff 	.word	0x10c0ecff

08000d84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ba      	sub	sp, #232	@ 0xe8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22c0      	movs	r2, #192	@ 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f011 f913 	bl	8011fd0 <memset>
  if(i2cHandle->Instance==I2C2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d146      	bne.n	8000e42 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000db4:	f04f 0208 	mov.w	r2, #8
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 f86c 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dd6:	f000 f95d 	bl	8001094 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000df8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e12:	2304      	movs	r3, #4
 8000e14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <HAL_I2C_MspInit+0xd0>)
 8000e20:	f004 fe46 	bl	8005ab0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	37e8      	adds	r7, #232	@ 0xe8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40005800 	.word	0x40005800
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020400 	.word	0x58020400

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e5e:	f000 f8d9 	bl	8001014 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f000 fcc3 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f85b 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f7ff fdef 	bl	8000a4c <MX_GPIO_Init>
  MX_BDMA_Init();
 8000e6e:	f7ff fdcd 	bl	8000a0c <MX_BDMA_Init>
  MX_QUADSPI_Init();
 8000e72:	f000 f915 	bl	80010a0 <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8000e76:	f7ff fc21 	bl	80006bc <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000e7a:	f00f fc99 	bl	80107b0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000e7e:	f000 fbbd 	bl	80015fc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000e82:	f7ff ff3f 	bl	8000d04 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e86:	f7ff feea 	bl	8000c5e <lcd_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	481f      	ldr	r0, [pc, #124]	@ (8000f0c <main+0xb4>)
 8000e90:	f004 ffbe 	bl	8005e10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	@ 0x64
 8000e96:	f000 fd05 	bl	80018a4 <HAL_Delay>
		DebugTask();
 8000e9a:	f010 fe4d 	bl	8011b38 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	481a      	ldr	r0, [pc, #104]	@ (8000f0c <main+0xb4>)
 8000ea4:	f004 ffb4 	bl	8005e10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f000 fcfb 	bl	80018a4 <HAL_Delay>
		DebugTask();
 8000eae:	f010 fe43 	bl	8011b38 <DebugTask>
		uint32_t ADC_val = CalcTemperature();
 8000eb2:	f7ff fd31 	bl	8000918 <CalcTemperature>
 8000eb6:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ADC_val>0)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0e5      	beq.n	8000e8a <main+0x32>
		{
			char buffer[32];
			sprintf(buffer, "\r\n ADC_val = %10ld", ADC_val);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec2:	4913      	ldr	r1, [pc, #76]	@ (8000f10 <main+0xb8>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f011 f813 	bl	8011ef0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa07 	bl	80002e0 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	1d39      	adds	r1, r7, #4
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <main+0xbc>)
 8000edc:	f00a fffa 	bl	800bed4 <HAL_UART_Transmit>
			lcd_put_cur(0,0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fe9c 	bl	8000c20 <lcd_put_cur>
			lcd_send_string("    ADC_Val     ");
 8000ee8:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <main+0xc0>)
 8000eea:	f7ff fef5 	bl	8000cd8 <lcd_send_string>
			lcd_put_cur(1,0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fe95 	bl	8000c20 <lcd_put_cur>
			sprintf(buffer, "   %10ld   ", ADC_val);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <main+0xc4>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f010 fff7 	bl	8011ef0 <siprintf>
			lcd_send_string(buffer);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fee7 	bl	8000cd8 <lcd_send_string>
	while (1) {
 8000f0a:	e7be      	b.n	8000e8a <main+0x32>
 8000f0c:	58020000 	.word	0x58020000
 8000f10:	08013134 	.word	0x08013134
 8000f14:	2400034c 	.word	0x2400034c
 8000f18:	08013148 	.word	0x08013148
 8000f1c:	0801315c 	.word	0x0801315c

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b09c      	sub	sp, #112	@ 0x70
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	224c      	movs	r2, #76	@ 0x4c
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f011 f84e 	bl	8011fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f011 f848 	bl	8011fd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f006 fe85 	bl	8007c50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b30      	ldr	r3, [pc, #192]	@ (800100c <SystemClock_Config+0xec>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800100c <SystemClock_Config+0xec>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <SystemClock_Config+0xec>)
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f78:	bf00      	nop
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xf0>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f86:	d1f8      	bne.n	8000f7a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	2302      	movs	r3, #2
 8000f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f9e:	23a0      	movs	r3, #160	@ 0xa0
 8000fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 ff4a 	bl	8007e58 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fca:	f000 f863 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	233f      	movs	r3, #63	@ 0x3f
 8000fd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fde:	2340      	movs	r3, #64	@ 0x40
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fb89 	bl	800870c <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001000:	f000 f848 	bl	8001094 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3770      	adds	r7, #112	@ 0x70
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	58000400 	.word	0x58000400
 8001010:	58024800 	.word	0x58024800

08001014 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001026:	f002 f8d5 	bl	80031d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800102e:	2300      	movs	r3, #0
 8001030:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8001032:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001036:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001038:	230f      	movs	r3, #15
 800103a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800103c:	2300      	movs	r3, #0
 800103e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001040:	2301      	movs	r3, #1
 8001042:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001044:	2303      	movs	r3, #3
 8001046:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f8f2 	bl	8003244 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001060:	2004      	movs	r0, #4
 8001062:	f002 f8cf 	bl	8003204 <HAL_MPU_Enable>

}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001082:	f000 fbef 	bl	8001864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <MX_QUADSPI_Init+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010be:	2216      	movs	r2, #22
 80010c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_QUADSPI_Init+0x50>)
 80010dc:	f006 fe02 	bl	8007ce4 <HAL_QSPI_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f7ff ffd5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	240002b0 	.word	0x240002b0
 80010f4:	52005000 	.word	0x52005000

080010f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0bc      	sub	sp, #240	@ 0xf0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	22c0      	movs	r2, #192	@ 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f010 ff59 	bl	8011fd0 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a55      	ldr	r2, [pc, #340]	@ (8001278 <HAL_QSPI_MspInit+0x180>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f040 80a3 	bne.w	8001270 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800112a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001136:	2300      	movs	r3, #0
 8001138:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	4618      	mov	r0, r3
 8001140:	f007 feb2 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800114a:	f7ff ffa3 	bl	8001094 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800114e:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 8001150:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001154:	4a49      	ldr	r2, [pc, #292]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800115e:	4b47      	ldr	r3, [pc, #284]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 8001160:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800116c:	4b43      	ldr	r3, [pc, #268]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	4a42      	ldr	r2, [pc, #264]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	4a3a      	ldr	r2, [pc, #232]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119a:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	4b34      	ldr	r3, [pc, #208]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	4a33      	ldr	r2, [pc, #204]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <HAL_QSPI_MspInit+0x184>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c6:	2304      	movs	r3, #4
 80011c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011de:	2309      	movs	r3, #9
 80011e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e8:	4619      	mov	r1, r3
 80011ea:	4825      	ldr	r0, [pc, #148]	@ (8001280 <HAL_QSPI_MspInit+0x188>)
 80011ec:	f004 fc60 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f0:	2304      	movs	r3, #4
 80011f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001208:	2309      	movs	r3, #9
 800120a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001212:	4619      	mov	r1, r3
 8001214:	481b      	ldr	r0, [pc, #108]	@ (8001284 <HAL_QSPI_MspInit+0x18c>)
 8001216:	f004 fc4b 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800121a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800121e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001234:	2309      	movs	r3, #9
 8001236:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800123e:	4619      	mov	r1, r3
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <HAL_QSPI_MspInit+0x190>)
 8001242:	f004 fc35 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001246:	2340      	movs	r3, #64	@ 0x40
 8001248:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800125e:	230a      	movs	r3, #10
 8001260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <HAL_QSPI_MspInit+0x18c>)
 800126c:	f004 fc20 	bl	8005ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	37f0      	adds	r7, #240	@ 0xf0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	52005000 	.word	0x52005000
 800127c:	58024400 	.word	0x58024400
 8001280:	58021000 	.word	0x58021000
 8001284:	58020400 	.word	0x58020400
 8001288:	58020c00 	.word	0x58020c00

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_MspInit+0x30>)
 8001294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_MspInit+0x30>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_MspInit+0x30>)
 80012a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	58024400 	.word	0x58024400

080012c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	@ 0x38
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	d844      	bhi.n	8001358 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	2019      	movs	r0, #25
 80012d4:	f001 ff56 	bl	8003184 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012d8:	2019      	movs	r0, #25
 80012da:	f001 ff6d 	bl	80031b8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80012de:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_InitTick+0xb0>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012e4:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <HAL_InitTick+0xb4>)
 80012e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <HAL_InitTick+0xb4>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <HAL_InitTick+0xb4>)
 80012f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001302:	f107 020c 	add.w	r2, r7, #12
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f007 fd89 	bl	8008e24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001312:	f007 fd71 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
 8001316:	4603      	mov	r3, r0
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800131c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131e:	4a16      	ldr	r2, [pc, #88]	@ (8001378 <HAL_InitTick+0xb8>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	0c9b      	lsrs	r3, r3, #18
 8001326:	3b01      	subs	r3, #1
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_InitTick+0xbc>)
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <HAL_InitTick+0xc0>)
 800132e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0xbc>)
 8001332:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001336:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001338:	4a10      	ldr	r2, [pc, #64]	@ (800137c <HAL_InitTick+0xbc>)
 800133a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_InitTick+0xbc>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <HAL_InitTick+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800134a:	480c      	ldr	r0, [pc, #48]	@ (800137c <HAL_InitTick+0xbc>)
 800134c:	f00a faaa 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <HAL_InitTick+0xa6>
 8001356:	e001      	b.n	800135c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e005      	b.n	8001368 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <HAL_InitTick+0xbc>)
 800135e:	f00a fb03 	bl	800b968 <HAL_TIM_Base_Start_IT>
 8001362:	4603      	mov	r3, r0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3738      	adds	r7, #56	@ 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000008 	.word	0x24000008
 8001374:	58024400 	.word	0x58024400
 8001378:	431bde83 	.word	0x431bde83
 800137c:	240002fc 	.word	0x240002fc
 8001380:	40010000 	.word	0x40010000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <TIM1_UP_IRQHandler+0x10>)
 80013ea:	f00a fb35 	bl	800ba58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240002fc 	.word	0x240002fc

080013f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <OTG_FS_IRQHandler+0x10>)
 80013fe:	f005 fac7 	bl	8006990 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240018c4 	.word	0x240018c4

0800140c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <BDMA_Channel0_IRQHandler+0x10>)
 8001412:	f003 f83b 	bl	800448c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	240001e0 	.word	0x240001e0

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f010 fdc6 	bl	8011fe0 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24080000 	.word	0x24080000
 8001480:	00000400 	.word	0x00000400
 8001484:	24000348 	.word	0x24000348
 8001488:	24003330 	.word	0x24003330

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001490:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <SystemInit+0x114>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <SystemInit+0x114>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a0:	4b40      	ldr	r3, [pc, #256]	@ (80015a4 <SystemInit+0x118>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d807      	bhi.n	80014bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ac:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <SystemInit+0x118>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 030f 	bic.w	r3, r3, #15
 80014b4:	4a3b      	ldr	r2, [pc, #236]	@ (80015a4 <SystemInit+0x118>)
 80014b6:	f043 0307 	orr.w	r3, r3, #7
 80014ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <SystemInit+0x11c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a39      	ldr	r2, [pc, #228]	@ (80015a8 <SystemInit+0x11c>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c8:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <SystemInit+0x11c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ce:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <SystemInit+0x11c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4935      	ldr	r1, [pc, #212]	@ (80015a8 <SystemInit+0x11c>)
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <SystemInit+0x120>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014da:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <SystemInit+0x118>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <SystemInit+0x118>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 030f 	bic.w	r3, r3, #15
 80014ee:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <SystemInit+0x118>)
 80014f0:	f043 0307 	orr.w	r3, r3, #7
 80014f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <SystemInit+0x11c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <SystemInit+0x11c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001502:	4b29      	ldr	r3, [pc, #164]	@ (80015a8 <SystemInit+0x11c>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <SystemInit+0x11c>)
 800150a:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <SystemInit+0x124>)
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <SystemInit+0x11c>)
 8001510:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <SystemInit+0x128>)
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <SystemInit+0x11c>)
 8001516:	4a28      	ldr	r2, [pc, #160]	@ (80015b8 <SystemInit+0x12c>)
 8001518:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <SystemInit+0x11c>)
 800151c:	2200      	movs	r2, #0
 800151e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <SystemInit+0x11c>)
 8001522:	4a25      	ldr	r2, [pc, #148]	@ (80015b8 <SystemInit+0x12c>)
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <SystemInit+0x11c>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800152c:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <SystemInit+0x11c>)
 800152e:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <SystemInit+0x12c>)
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <SystemInit+0x11c>)
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <SystemInit+0x11c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <SystemInit+0x11c>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001542:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <SystemInit+0x11c>)
 8001546:	2200      	movs	r2, #0
 8001548:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <SystemInit+0x130>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <SystemInit+0x134>)
 8001550:	4013      	ands	r3, r2
 8001552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001556:	d202      	bcs.n	800155e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <SystemInit+0x138>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <SystemInit+0x11c>)
 8001560:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <SystemInit+0x11c>)
 800156e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001572:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <SystemInit+0x11c>)
 8001574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001578:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <SystemInit+0x13c>)
 800157e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001582:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <SystemInit+0x11c>)
 8001586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800158a:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <SystemInit+0x11c>)
 800158c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001590:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	52002000 	.word	0x52002000
 80015a8:	58024400 	.word	0x58024400
 80015ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80015b0:	02020200 	.word	0x02020200
 80015b4:	01ff0000 	.word	0x01ff0000
 80015b8:	01010280 	.word	0x01010280
 80015bc:	5c001000 	.word	0x5c001000
 80015c0:	ffff0000 	.word	0xffff0000
 80015c4:	51008108 	.word	0x51008108
 80015c8:	52004000 	.word	0x52004000

080015cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015dc:	bf00      	nop
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f9      	beq.n	80015de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	58024800 	.word	0x58024800

080015fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_USART1_UART_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001646:	f00a fbf5 	bl	800be34 <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001650:	f7ff fd20 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001658:	f00b fc8b 	bl	800cf72 <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001662:	f7ff fd17 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800166a:	f00b fcc0 	bl	800cfee <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001674:	f7ff fd0e 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800167a:	f00b fc41 	bl	800cf00 <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001684:	f7ff fd06 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2400034c 	.word	0x2400034c
 8001690:	40011000 	.word	0x40011000

08001694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ba      	sub	sp, #232	@ 0xe8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	22c0      	movs	r2, #192	@ 0xc0
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f010 fc8b 	bl	8011fd0 <memset>
  if(uartHandle->Instance==USART1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <HAL_UART_MspInit+0xf4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d15c      	bne.n	800177e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c4:	f04f 0201 	mov.w	r2, #1
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4618      	mov	r0, r3
 80016dc:	f007 fbe4 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016e6:	f7ff fcd5 	bl	8001094 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f0:	4a26      	ldr	r2, [pc, #152]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_UART_MspInit+0xf8>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_UART_MspInit+0xf8>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	4a1f      	ldr	r2, [pc, #124]	@ (800178c <HAL_UART_MspInit+0xf8>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_UART_MspInit+0xf8>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001726:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800172a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001740:	2304      	movs	r3, #4
 8001742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800174a:	4619      	mov	r1, r3
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0xfc>)
 800174e:	f004 f9af 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800176c:	2304      	movs	r3, #4
 800176e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_UART_MspInit+0xfc>)
 800177a:	f004 f999 	bl	8005ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800177e:	bf00      	nop
 8001780:	37e8      	adds	r7, #232	@ 0xe8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40011000 	.word	0x40011000
 800178c:	58024400 	.word	0x58024400
 8001790:	58020400 	.word	0x58020400

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001798:	f7ff ff18 	bl	80015cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff fe76 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f010 fc11 	bl	8011fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fb45 	bl	8000e58 <main>
  bx  lr
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d8:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80017dc:	08013534 	.word	0x08013534
  ldr r2, =_sbss
 80017e0:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80017e4:	24003330 	.word	0x24003330

080017e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC3_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f001 fcbb 	bl	800316e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017f8:	f007 f93e 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_Init+0x68>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	4913      	ldr	r1, [pc, #76]	@ (8001858 <HAL_Init+0x6c>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_Init+0x68>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_Init+0x6c>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	fa22 f303 	lsr.w	r3, r2, r3
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <HAL_Init+0x70>)
 800182e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <HAL_Init+0x74>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	200f      	movs	r0, #15
 8001838:	f7ff fd42 	bl	80012c0 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e002      	b.n	800184c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001846:	f7ff fd21 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	08013394 	.word	0x08013394
 800185c:	24000004 	.word	0x24000004
 8001860:	24000000 	.word	0x24000000

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2400000c 	.word	0x2400000c
 8001888:	240003e0 	.word	0x240003e0

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	240003e0 	.word	0x240003e0

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2400000c 	.word	0x2400000c

080018ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetREVID+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	5c001000 	.word	0x5c001000

08001904 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	4904      	ldr	r1, [pc, #16]	@ (800192c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	58000400 	.word	0x58000400

08001930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <LL_ADC_SetChannelPreselection+0x24>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2201      	movs	r2, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	e015      	b.n	80019e8 <LL_ADC_SetChannelPreselection+0x50>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80019d2:	2320      	movs	r3, #32
 80019d4:	e003      	b.n	80019de <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2201      	movs	r2, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	69d2      	ldr	r2, [r2, #28]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b087      	sub	sp, #28
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3360      	adds	r3, #96	@ 0x60
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	611a      	str	r2, [r3, #16]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3360      	adds	r3, #96	@ 0x60
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	211f      	movs	r1, #31
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	401a      	ands	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 011f 	and.w	r1, r3, #31
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	431a      	orrs	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60da      	str	r2, [r3, #12]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3314      	adds	r3, #20
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0e5b      	lsrs	r3, r3, #25
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0d1b      	lsrs	r3, r3, #20
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	2107      	movs	r1, #7
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	0d1b      	lsrs	r3, r3, #20
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0318 	and.w	r3, r3, #24
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bc4:	40d9      	lsrs	r1, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	400b      	ands	r3, r1
 8001bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	000fffff 	.word	0x000fffff

08001be8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6093      	str	r3, [r2, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	5fffffc0 	.word	0x5fffffc0

08001c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	6fffffc0 	.word	0x6fffffc0

08001c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <LL_ADC_Enable+0x24>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	7fffffc0 	.word	0x7fffffc0

08001cc8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <LL_ADC_Disable+0x24>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	7fffffc0 	.word	0x7fffffc0

08001cf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <LL_ADC_IsEnabled+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_ADC_IsEnabled+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsDisableOngoing+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsDisableOngoing+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <LL_ADC_REG_StartConversion+0x24>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	7fffffc0 	.word	0x7fffffc0

08001d64 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <LL_ADC_REG_StopConversion+0x24>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	7fffffc0 	.word	0x7fffffc0

08001d8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <LL_ADC_INJ_StopConversion+0x24>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	7fffffc0 	.word	0x7fffffc0

08001ddc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e18f      	b.n	800213e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fcb5 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff feef 	bl	8001c28 <LL_ADC_IsDeepPowerDownEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fed5 	bl	8001c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff0a 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d114      	bne.n	8001e94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff feee 	bl	8001c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e74:	4b87      	ldr	r3, [pc, #540]	@ (8002094 <HAL_ADC_Init+0x290>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	4a87      	ldr	r2, [pc, #540]	@ (8002098 <HAL_ADC_Init+0x294>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	3301      	adds	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e86:	e002      	b.n	8001e8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff feed 	bl	8001c78 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea8:	f043 0210 	orr.w	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff61 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8001eca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f040 8129 	bne.w	800212c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 8125 	bne.w	800212c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fefa 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d136      	bne.n	8001f70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	@ (800209c <HAL_ADC_Init+0x298>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_ADC_Init+0x112>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	@ (80020a0 <HAL_ADC_Init+0x29c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_ADC_Init+0x130>
 8001f16:	4861      	ldr	r0, [pc, #388]	@ (800209c <HAL_ADC_Init+0x298>)
 8001f18:	f7ff feea 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	4860      	ldr	r0, [pc, #384]	@ (80020a0 <HAL_ADC_Init+0x29c>)
 8001f20:	f7ff fee6 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4323      	orrs	r3, r4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e008      	b.n	8001f46 <HAL_ADC_Init+0x142>
 8001f34:	485b      	ldr	r0, [pc, #364]	@ (80020a4 <HAL_ADC_Init+0x2a0>)
 8001f36:	f7ff fedb 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a53      	ldr	r2, [pc, #332]	@ (800209c <HAL_ADC_Init+0x298>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_Init+0x15a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a51      	ldr	r2, [pc, #324]	@ (80020a0 <HAL_ADC_Init+0x29c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Init+0x15e>
 8001f5e:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_ADC_Init+0x2a4>)
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_Init+0x160>
 8001f62:	4a52      	ldr	r2, [pc, #328]	@ (80020ac <HAL_ADC_Init+0x2a8>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f7ff fce0 	bl	8001930 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001f70:	f7ff fcbc 	bl	80018ec <HAL_GetREVID>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d914      	bls.n	8001fa8 <HAL_ADC_Init+0x1a4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d110      	bne.n	8001fa8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7d5b      	ldrb	r3, [r3, #21]
 8001f8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7f1b      	ldrb	r3, [r3, #28]
 8001f9c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f9e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa0:	f043 030c 	orr.w	r3, r3, #12
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	e00d      	b.n	8001fc4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7d5b      	ldrb	r3, [r3, #21]
 8001fac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fb2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001fb8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7f1b      	ldrb	r3, [r3, #28]
 8001fbe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7f1b      	ldrb	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	045b      	lsls	r3, r3, #17
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80020b0 <HAL_ADC_Init+0x2ac>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	430b      	orrs	r3, r1
 8002008:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff febc 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002014:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fede 	bl	8001ddc <LL_ADC_INJ_IsConversionOngoing>
 8002020:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d15f      	bne.n	80020e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d15c      	bne.n	80020e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7d1b      	ldrb	r3, [r3, #20]
 8002032:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_ADC_Init+0x2b0>)
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	430b      	orrs	r3, r1
 800204e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002056:	2b01      	cmp	r3, #1
 8002058:	d130      	bne.n	80020bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_ADC_Init+0x2b4>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800206e:	3a01      	subs	r2, #1
 8002070:	0411      	lsls	r1, r2, #16
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002082:	430a      	orrs	r2, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	e01c      	b.n	80020cc <HAL_ADC_Init+0x2c8>
 8002092:	bf00      	nop
 8002094:	24000000 	.word	0x24000000
 8002098:	053e2d63 	.word	0x053e2d63
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022100 	.word	0x40022100
 80020a4:	58026000 	.word	0x58026000
 80020a8:	40022300 	.word	0x40022300
 80020ac:	58026300 	.word	0x58026300
 80020b0:	fff0c003 	.word	0xfff0c003
 80020b4:	ffffbffc 	.word	0xffffbffc
 80020b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fe8a 	bl	8002dfc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10c      	bne.n	800210a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f023 010f 	bic.w	r1, r3, #15
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	1e5a      	subs	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
 8002108:	e007      	b.n	800211a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020f 	bic.w	r2, r2, #15
 8002118:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
 800212a:	e007      	b.n	800213c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	f043 0210 	orr.w	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800213c:	7ffb      	ldrb	r3, [r7, #31]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop

08002148 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a55      	ldr	r2, [pc, #340]	@ (80022b0 <HAL_ADC_Start_DMA+0x168>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_ADC_Start_DMA+0x20>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a54      	ldr	r2, [pc, #336]	@ (80022b4 <HAL_ADC_Start_DMA+0x16c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_ADC_Start_DMA+0x24>
 8002168:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_ADC_Start_DMA+0x170>)
 800216a:	e000      	b.n	800216e <HAL_ADC_Start_DMA+0x26>
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_ADC_Start_DMA+0x174>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd3a 	bl	8001be8 <LL_ADC_GetMultimode>
 8002174:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fe06 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 808c 	bne.w	80022a0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Start_DMA+0x4e>
 8002192:	2302      	movs	r3, #2
 8002194:	e087      	b.n	80022a6 <HAL_ADC_Start_DMA+0x15e>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d002      	beq.n	80021b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d170      	bne.n	8002292 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fca5 	bl	8002b00 <ADC_Enable>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d163      	bne.n	8002288 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021c4:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <HAL_ADC_Start_DMA+0x178>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a37      	ldr	r2, [pc, #220]	@ (80022b4 <HAL_ADC_Start_DMA+0x16c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d002      	beq.n	80021e0 <HAL_ADC_Start_DMA+0x98>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e000      	b.n	80021e2 <HAL_ADC_Start_DMA+0x9a>
 80021e0:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <HAL_ADC_Start_DMA+0x168>)
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d002      	beq.n	80021f0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	f023 0206 	bic.w	r2, r3, #6
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	659a      	str	r2, [r3, #88]	@ 0x58
 8002214:	e002      	b.n	800221c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002220:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <HAL_ADC_Start_DMA+0x17c>)
 8002222:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002228:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <HAL_ADC_Start_DMA+0x180>)
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	4a26      	ldr	r2, [pc, #152]	@ (80022cc <HAL_ADC_Start_DMA+0x184>)
 8002232:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	221c      	movs	r2, #28
 800223a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0210 	orr.w	r2, r2, #16
 8002252:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f7ff fc60 	bl	8001b24 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3340      	adds	r3, #64	@ 0x40
 800226e:	4619      	mov	r1, r3
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f001 fb82 	bl	800397c <HAL_DMA_Start_IT>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd5b 	bl	8001d3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002286:	e00d      	b.n	80022a4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002290:	e008      	b.n	80022a4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800229e:	e001      	b.n	80022a4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
 80022a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40022100 	.word	0x40022100
 80022b8:	40022300 	.word	0x40022300
 80022bc:	58026300 	.word	0x58026300
 80022c0:	fffff0fe 	.word	0xfffff0fe
 80022c4:	08002cd3 	.word	0x08002cd3
 80022c8:	08002dab 	.word	0x08002dab
 80022cc:	08002dc7 	.word	0x08002dc7

080022d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_Stop_DMA+0x16>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e04f      	b.n	8002386 <HAL_ADC_Stop_DMA+0xb6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022ee:	2103      	movs	r1, #3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fb49 	bl	8002988 <ADC_ConversionStop>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13d      	bne.n	800237c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0203 	bic.w	r2, r2, #3
 800230e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d10f      	bne.n	800233e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fd94 	bl	8003e50 <HAL_DMA_Abort>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0210 	bic.w	r2, r2, #16
 800234c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fc5d 	bl	8002c14 <ADC_Disable>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e002      	b.n	8002366 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fc57 	bl	8002c14 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002370:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <HAL_ADC_Stop_DMA+0xc0>)
 8002372:	4013      	ands	r3, r2
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	ffffeefe 	.word	0xffffeefe

08002394 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08d      	sub	sp, #52	@ 0x34
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a65      	ldr	r2, [pc, #404]	@ (8002558 <HAL_ADC_ConfigChannel+0x1b0>)
 80023c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x2a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e2c7      	b.n	8002962 <HAL_ADC_ConfigChannel+0x5ba>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fcd4 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 82ac 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db2c      	blt.n	800244e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x6a>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	e016      	b.n	8002440 <HAL_ADC_ConfigChannel+0x98>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	613b      	str	r3, [r7, #16]
  return result;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2201      	movs	r2, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	69d1      	ldr	r1, [r2, #28]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	430b      	orrs	r3, r1
 800244c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f7ff fb36 	bl	8001acc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc91 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 800246a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fcb3 	bl	8001ddc <LL_ADC_INJ_IsConversionOngoing>
 8002476:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80b8 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80b4 	bne.w	80025f0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	461a      	mov	r2, r3
 8002496:	f7ff fb58 	bl	8001b4a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800249a:	4b30      	ldr	r3, [pc, #192]	@ (800255c <HAL_ADC_ConfigChannel+0x1b4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a6:	d10b      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x118>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	e01d      	b.n	80024fc <HAL_ADC_ConfigChannel+0x154>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x13e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	e00a      	b.n	80024fc <HAL_ADC_ConfigChannel+0x154>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d02c      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6919      	ldr	r1, [r3, #16]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f7ff fa73 	bl	80019fe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7e5b      	ldrb	r3, [r3, #25]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_ADC_ConfigChannel+0x186>
 8002528:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800252c:	e000      	b.n	8002530 <HAL_ADC_ConfigChannel+0x188>
 800252e:	2300      	movs	r3, #0
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff fa9d 	bl	8001a70 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6919      	ldr	r1, [r3, #16]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7e1b      	ldrb	r3, [r3, #24]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1a4>
 8002546:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800254a:	e000      	b.n	800254e <HAL_ADC_ConfigChannel+0x1a6>
 800254c:	2300      	movs	r3, #0
 800254e:	461a      	mov	r2, r3
 8002550:	f7ff fa75 	bl	8001a3e <LL_ADC_SetDataRightShift>
 8002554:	e04c      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x248>
 8002556:	bf00      	nop
 8002558:	47ff0000 	.word	0x47ff0000
 800255c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	429a      	cmp	r2, r3
 8002572:	d107      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	069b      	lsls	r3, r3, #26
 80025dc:	429a      	cmp	r2, r3
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fb7b 	bl	8001cf0 <LL_ADC_IsEnabled>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 81aa 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	461a      	mov	r2, r3
 8002610:	f7ff fac6 	bl	8001ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a87      	ldr	r2, [pc, #540]	@ (8002838 <HAL_ADC_ConfigChannel+0x490>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f040 809a 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4984      	ldr	r1, [pc, #528]	@ (800283c <HAL_ADC_ConfigChannel+0x494>)
 800262a:	428b      	cmp	r3, r1
 800262c:	d147      	bne.n	80026be <HAL_ADC_ConfigChannel+0x316>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4983      	ldr	r1, [pc, #524]	@ (8002840 <HAL_ADC_ConfigChannel+0x498>)
 8002634:	428b      	cmp	r3, r1
 8002636:	d040      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x312>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4981      	ldr	r1, [pc, #516]	@ (8002844 <HAL_ADC_ConfigChannel+0x49c>)
 800263e:	428b      	cmp	r3, r1
 8002640:	d039      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x30e>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4980      	ldr	r1, [pc, #512]	@ (8002848 <HAL_ADC_ConfigChannel+0x4a0>)
 8002648:	428b      	cmp	r3, r1
 800264a:	d032      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x30a>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	497e      	ldr	r1, [pc, #504]	@ (800284c <HAL_ADC_ConfigChannel+0x4a4>)
 8002652:	428b      	cmp	r3, r1
 8002654:	d02b      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x306>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	497d      	ldr	r1, [pc, #500]	@ (8002850 <HAL_ADC_ConfigChannel+0x4a8>)
 800265c:	428b      	cmp	r3, r1
 800265e:	d024      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x302>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	497b      	ldr	r1, [pc, #492]	@ (8002854 <HAL_ADC_ConfigChannel+0x4ac>)
 8002666:	428b      	cmp	r3, r1
 8002668:	d01d      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x2fe>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	497a      	ldr	r1, [pc, #488]	@ (8002858 <HAL_ADC_ConfigChannel+0x4b0>)
 8002670:	428b      	cmp	r3, r1
 8002672:	d016      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x2fa>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4978      	ldr	r1, [pc, #480]	@ (800285c <HAL_ADC_ConfigChannel+0x4b4>)
 800267a:	428b      	cmp	r3, r1
 800267c:	d00f      	beq.n	800269e <HAL_ADC_ConfigChannel+0x2f6>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4977      	ldr	r1, [pc, #476]	@ (8002860 <HAL_ADC_ConfigChannel+0x4b8>)
 8002684:	428b      	cmp	r3, r1
 8002686:	d008      	beq.n	800269a <HAL_ADC_ConfigChannel+0x2f2>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4975      	ldr	r1, [pc, #468]	@ (8002864 <HAL_ADC_ConfigChannel+0x4bc>)
 800268e:	428b      	cmp	r3, r1
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x2ee>
 8002692:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <HAL_ADC_ConfigChannel+0x4c0>)
 8002694:	e05a      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002696:	2300      	movs	r3, #0
 8002698:	e058      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800269a:	4b74      	ldr	r3, [pc, #464]	@ (800286c <HAL_ADC_ConfigChannel+0x4c4>)
 800269c:	e056      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800269e:	4b74      	ldr	r3, [pc, #464]	@ (8002870 <HAL_ADC_ConfigChannel+0x4c8>)
 80026a0:	e054      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026a2:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <HAL_ADC_ConfigChannel+0x4b4>)
 80026a4:	e052      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_ADC_ConfigChannel+0x4b0>)
 80026a8:	e050      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_ADC_ConfigChannel+0x4cc>)
 80026ac:	e04e      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026ae:	4b72      	ldr	r3, [pc, #456]	@ (8002878 <HAL_ADC_ConfigChannel+0x4d0>)
 80026b0:	e04c      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026b2:	4b72      	ldr	r3, [pc, #456]	@ (800287c <HAL_ADC_ConfigChannel+0x4d4>)
 80026b4:	e04a      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026b6:	4b72      	ldr	r3, [pc, #456]	@ (8002880 <HAL_ADC_ConfigChannel+0x4d8>)
 80026b8:	e048      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e046      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4970      	ldr	r1, [pc, #448]	@ (8002884 <HAL_ADC_ConfigChannel+0x4dc>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d140      	bne.n	800274a <HAL_ADC_ConfigChannel+0x3a2>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	495c      	ldr	r1, [pc, #368]	@ (8002840 <HAL_ADC_ConfigChannel+0x498>)
 80026ce:	428b      	cmp	r3, r1
 80026d0:	d039      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x39e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	495b      	ldr	r1, [pc, #364]	@ (8002844 <HAL_ADC_ConfigChannel+0x49c>)
 80026d8:	428b      	cmp	r3, r1
 80026da:	d032      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x39a>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4959      	ldr	r1, [pc, #356]	@ (8002848 <HAL_ADC_ConfigChannel+0x4a0>)
 80026e2:	428b      	cmp	r3, r1
 80026e4:	d02b      	beq.n	800273e <HAL_ADC_ConfigChannel+0x396>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4958      	ldr	r1, [pc, #352]	@ (800284c <HAL_ADC_ConfigChannel+0x4a4>)
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d024      	beq.n	800273a <HAL_ADC_ConfigChannel+0x392>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4956      	ldr	r1, [pc, #344]	@ (8002850 <HAL_ADC_ConfigChannel+0x4a8>)
 80026f6:	428b      	cmp	r3, r1
 80026f8:	d01d      	beq.n	8002736 <HAL_ADC_ConfigChannel+0x38e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4955      	ldr	r1, [pc, #340]	@ (8002854 <HAL_ADC_ConfigChannel+0x4ac>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d016      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x38a>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4953      	ldr	r1, [pc, #332]	@ (8002858 <HAL_ADC_ConfigChannel+0x4b0>)
 800270a:	428b      	cmp	r3, r1
 800270c:	d00f      	beq.n	800272e <HAL_ADC_ConfigChannel+0x386>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4952      	ldr	r1, [pc, #328]	@ (800285c <HAL_ADC_ConfigChannel+0x4b4>)
 8002714:	428b      	cmp	r3, r1
 8002716:	d008      	beq.n	800272a <HAL_ADC_ConfigChannel+0x382>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4951      	ldr	r1, [pc, #324]	@ (8002864 <HAL_ADC_ConfigChannel+0x4bc>)
 800271e:	428b      	cmp	r3, r1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x37e>
 8002722:	4b51      	ldr	r3, [pc, #324]	@ (8002868 <HAL_ADC_ConfigChannel+0x4c0>)
 8002724:	e012      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002726:	2300      	movs	r3, #0
 8002728:	e010      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800272a:	4b51      	ldr	r3, [pc, #324]	@ (8002870 <HAL_ADC_ConfigChannel+0x4c8>)
 800272c:	e00e      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800272e:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_ADC_ConfigChannel+0x4b4>)
 8002730:	e00c      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002732:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <HAL_ADC_ConfigChannel+0x4b0>)
 8002734:	e00a      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_ADC_ConfigChannel+0x4cc>)
 8002738:	e008      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800273a:	4b4f      	ldr	r3, [pc, #316]	@ (8002878 <HAL_ADC_ConfigChannel+0x4d0>)
 800273c:	e006      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800273e:	4b4f      	ldr	r3, [pc, #316]	@ (800287c <HAL_ADC_ConfigChannel+0x4d4>)
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002742:	4b4f      	ldr	r3, [pc, #316]	@ (8002880 <HAL_ADC_ConfigChannel+0x4d8>)
 8002744:	e002      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_ADC_ConfigChannel+0x3a4>
 800274a:	2300      	movs	r3, #0
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff f922 	bl	8001998 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f280 80fc 	bge.w	8002956 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a36      	ldr	r2, [pc, #216]	@ (800283c <HAL_ADC_ConfigChannel+0x494>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x3ca>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a45      	ldr	r2, [pc, #276]	@ (8002884 <HAL_ADC_ConfigChannel+0x4dc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x3ce>
 8002772:	4b45      	ldr	r3, [pc, #276]	@ (8002888 <HAL_ADC_ConfigChannel+0x4e0>)
 8002774:	e000      	b.n	8002778 <HAL_ADC_ConfigChannel+0x3d0>
 8002776:	4b45      	ldr	r3, [pc, #276]	@ (800288c <HAL_ADC_ConfigChannel+0x4e4>)
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f8ff 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 800277e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_ADC_ConfigChannel+0x494>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x3ec>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a3d      	ldr	r2, [pc, #244]	@ (8002884 <HAL_ADC_ConfigChannel+0x4dc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10e      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x40a>
 8002794:	4829      	ldr	r0, [pc, #164]	@ (800283c <HAL_ADC_ConfigChannel+0x494>)
 8002796:	f7ff faab 	bl	8001cf0 <LL_ADC_IsEnabled>
 800279a:	4604      	mov	r4, r0
 800279c:	4839      	ldr	r0, [pc, #228]	@ (8002884 <HAL_ADC_ConfigChannel+0x4dc>)
 800279e:	f7ff faa7 	bl	8001cf0 <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4323      	orrs	r3, r4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e008      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x41c>
 80027b2:	4837      	ldr	r0, [pc, #220]	@ (8002890 <HAL_ADC_ConfigChannel+0x4e8>)
 80027b4:	f7ff fa9c 	bl	8001cf0 <LL_ADC_IsEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80b3 	beq.w	8002930 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <HAL_ADC_ConfigChannel+0x4ec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d165      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x4f8>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d160      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_ADC_ConfigChannel+0x4e8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f040 80b6 	bne.w	8002956 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <HAL_ADC_ConfigChannel+0x494>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_ADC_ConfigChannel+0x456>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a22      	ldr	r2, [pc, #136]	@ (8002884 <HAL_ADC_ConfigChannel+0x4dc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x45a>
 80027fe:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <HAL_ADC_ConfigChannel+0x4e0>)
 8002800:	e000      	b.n	8002804 <HAL_ADC_ConfigChannel+0x45c>
 8002802:	4a22      	ldr	r2, [pc, #136]	@ (800288c <HAL_ADC_ConfigChannel+0x4e4>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7ff f8a2 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002812:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_ADC_ConfigChannel+0x4f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	4a20      	ldr	r2, [pc, #128]	@ (800289c <HAL_ADC_ConfigChannel+0x4f4>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	3301      	adds	r3, #1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002826:	e002      	b.n	800282e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f9      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002834:	e08f      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
 8002836:	bf00      	nop
 8002838:	47ff0000 	.word	0x47ff0000
 800283c:	40022000 	.word	0x40022000
 8002840:	04300002 	.word	0x04300002
 8002844:	08600004 	.word	0x08600004
 8002848:	0c900008 	.word	0x0c900008
 800284c:	10c00010 	.word	0x10c00010
 8002850:	14f00020 	.word	0x14f00020
 8002854:	2a000400 	.word	0x2a000400
 8002858:	2e300800 	.word	0x2e300800
 800285c:	32601000 	.word	0x32601000
 8002860:	43210000 	.word	0x43210000
 8002864:	4b840000 	.word	0x4b840000
 8002868:	4fb80000 	.word	0x4fb80000
 800286c:	47520000 	.word	0x47520000
 8002870:	36902000 	.word	0x36902000
 8002874:	25b00200 	.word	0x25b00200
 8002878:	21800100 	.word	0x21800100
 800287c:	1d500080 	.word	0x1d500080
 8002880:	19200040 	.word	0x19200040
 8002884:	40022100 	.word	0x40022100
 8002888:	40022300 	.word	0x40022300
 800288c:	58026300 	.word	0x58026300
 8002890:	58026000 	.word	0x58026000
 8002894:	cb840000 	.word	0xcb840000
 8002898:	24000000 	.word	0x24000000
 800289c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a31      	ldr	r2, [pc, #196]	@ (800296c <HAL_ADC_ConfigChannel+0x5c4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11e      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x540>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d119      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_ADC_ConfigChannel+0x5c8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d14b      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002974 <HAL_ADC_ConfigChannel+0x5cc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x52a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_ADC_ConfigChannel+0x5d0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x52e>
 80028d2:	4a2a      	ldr	r2, [pc, #168]	@ (800297c <HAL_ADC_ConfigChannel+0x5d4>)
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x530>
 80028d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <HAL_ADC_ConfigChannel+0x5d8>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f7ff f838 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	e036      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a25      	ldr	r2, [pc, #148]	@ (8002984 <HAL_ADC_ConfigChannel+0x5dc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d131      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d12c      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_ADC_ConfigChannel+0x5c8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d127      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1a      	ldr	r2, [pc, #104]	@ (8002974 <HAL_ADC_ConfigChannel+0x5cc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_ADC_ConfigChannel+0x572>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <HAL_ADC_ConfigChannel+0x5d0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x576>
 800291a:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_ADC_ConfigChannel+0x5d4>)
 800291c:	e000      	b.n	8002920 <HAL_ADC_ConfigChannel+0x578>
 800291e:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <HAL_ADC_ConfigChannel+0x5d8>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7ff f814 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
 800292e:	e012      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002942:	e008      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800295e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002962:	4618      	mov	r0, r3
 8002964:	3734      	adds	r7, #52	@ 0x34
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}
 800296a:	bf00      	nop
 800296c:	c7520000 	.word	0xc7520000
 8002970:	58026000 	.word	0x58026000
 8002974:	40022000 	.word	0x40022000
 8002978:	40022100 	.word	0x40022100
 800297c:	40022300 	.word	0x40022300
 8002980:	58026300 	.word	0x58026300
 8002984:	cfb80000 	.word	0xcfb80000

08002988 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f9f4 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 80029a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fa16 	bl	8001ddc <LL_ADC_INJ_IsConversionOngoing>
 80029b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8098 	beq.w	8002af0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d02a      	beq.n	8002a24 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7d5b      	ldrb	r3, [r3, #21]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d126      	bne.n	8002a24 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7d1b      	ldrb	r3, [r3, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d122      	bne.n	8002a24 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029de:	2301      	movs	r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029e2:	e014      	b.n	8002a0e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4a45      	ldr	r2, [pc, #276]	@ (8002afc <ADC_ConversionStop+0x174>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d90d      	bls.n	8002a08 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e074      	b.n	8002af2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d1e3      	bne.n	80029e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2240      	movs	r2, #64	@ 0x40
 8002a22:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d014      	beq.n	8002a54 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f9ac 	bl	8001d8c <LL_ADC_REG_IsConversionOngoing>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f969 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f988 	bl	8001d64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d014      	beq.n	8002a84 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9bc 	bl	8001ddc <LL_ADC_INJ_IsConversionOngoing>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f951 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f998 	bl	8001db4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d005      	beq.n	8002a96 <ADC_ConversionStop+0x10e>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d105      	bne.n	8002a9c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a90:	230c      	movs	r3, #12
 8002a92:	617b      	str	r3, [r7, #20]
        break;
 8002a94:	e005      	b.n	8002aa2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a96:	2308      	movs	r3, #8
 8002a98:	617b      	str	r3, [r7, #20]
        break;
 8002a9a:	e002      	b.n	8002aa2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
        break;
 8002aa0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fef3 	bl	800188c <HAL_GetTick>
 8002aa6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002aa8:	e01b      	b.n	8002ae2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aaa:	f7fe feef 	bl	800188c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d914      	bls.n	8002ae2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f043 0210 	orr.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1dc      	bne.n	8002aaa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	000cdbff 	.word	0x000cdbff

08002b00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f8ef 	bl	8001cf0 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d16e      	bne.n	8002bf6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <ADC_Enable+0x100>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e05a      	b.n	8002bf8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f8aa 	bl	8001ca0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fe9e 	bl	800188c <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2b      	ldr	r2, [pc, #172]	@ (8002c04 <ADC_Enable+0x104>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <ADC_Enable+0x66>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a29      	ldr	r2, [pc, #164]	@ (8002c08 <ADC_Enable+0x108>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <ADC_Enable+0x6a>
 8002b66:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <ADC_Enable+0x10c>)
 8002b68:	e000      	b.n	8002b6c <ADC_Enable+0x6c>
 8002b6a:	4b29      	ldr	r3, [pc, #164]	@ (8002c10 <ADC_Enable+0x110>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f83b 	bl	8001be8 <LL_ADC_GetMultimode>
 8002b72:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <ADC_Enable+0x108>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d002      	beq.n	8002b84 <ADC_Enable+0x84>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e000      	b.n	8002b86 <ADC_Enable+0x86>
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <ADC_Enable+0x104>)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02c      	beq.n	8002be8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d130      	bne.n	8002bf6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b94:	e028      	b.n	8002be8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f8a8 	bl	8001cf0 <LL_ADC_IsEnabled>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff f878 	bl	8001ca0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bb0:	f7fe fe6c 	bl	800188c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d914      	bls.n	8002be8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d00d      	beq.n	8002be8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f043 0210 	orr.w	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d1cf      	bne.n	8002b96 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	8000003f 	.word	0x8000003f
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	58026300 	.word	0x58026300

08002c14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f878 	bl	8001d16 <LL_ADC_IsDisableOngoing>
 8002c26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f85f 	bl	8001cf0 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d047      	beq.n	8002cc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d144      	bne.n	8002cc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030d 	and.w	r3, r3, #13
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f839 	bl	8001cc8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c5e:	f7fe fe15 	bl	800188c <HAL_GetTick>
 8002c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c64:	e029      	b.n	8002cba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e023      	b.n	8002cca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c82:	f7fe fe03 	bl	800188c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d914      	bls.n	8002cba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1dc      	bne.n	8002c82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d14b      	bne.n	8002d84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fecb 	bl	8001aa6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d032      	beq.n	8002d7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d12b      	bne.n	8002d7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11f      	bne.n	8002d7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d48:	e018      	b.n	8002d7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7fd fd89 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d82:	e00e      	b.n	8002da2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fd fd9f 	bl	80008d4 <HAL_ADC_ErrorCallback>
}
 8002d96:	e004      	b.n	8002da2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff faeb 	bl	8002394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7fd fd71 	bl	80008d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff4 <ADC_ConfigureBoostMode+0x1f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x1c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a79      	ldr	r2, [pc, #484]	@ (8002ff8 <ADC_ConfigureBoostMode+0x1fc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d109      	bne.n	8002e2c <ADC_ConfigureBoostMode+0x30>
 8002e18:	4b78      	ldr	r3, [pc, #480]	@ (8002ffc <ADC_ConfigureBoostMode+0x200>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <ADC_ConfigureBoostMode+0x42>
 8002e2c:	4b74      	ldr	r3, [pc, #464]	@ (8003000 <ADC_ConfigureBoostMode+0x204>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01c      	beq.n	8002e7c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e42:	f005 ff93 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8002e46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e50:	d010      	beq.n	8002e74 <ADC_ConfigureBoostMode+0x78>
 8002e52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e56:	d873      	bhi.n	8002f40 <ADC_ConfigureBoostMode+0x144>
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5c:	d002      	beq.n	8002e64 <ADC_ConfigureBoostMode+0x68>
 8002e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e62:	d16d      	bne.n	8002f40 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	60fb      	str	r3, [r7, #12]
        break;
 8002e72:	e068      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	60fb      	str	r3, [r7, #12]
        break;
 8002e7a:	e064      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e7c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	f007 fa1a 	bl	800a2bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002e88:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e92:	d051      	beq.n	8002f38 <ADC_ConfigureBoostMode+0x13c>
 8002e94:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e98:	d854      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002e9a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e9e:	d047      	beq.n	8002f30 <ADC_ConfigureBoostMode+0x134>
 8002ea0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002ea4:	d84e      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002ea6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002eaa:	d03d      	beq.n	8002f28 <ADC_ConfigureBoostMode+0x12c>
 8002eac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002eb0:	d848      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eb6:	d033      	beq.n	8002f20 <ADC_ConfigureBoostMode+0x124>
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ebc:	d842      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002ebe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ec2:	d029      	beq.n	8002f18 <ADC_ConfigureBoostMode+0x11c>
 8002ec4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ec8:	d83c      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002eca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ece:	d01a      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x10a>
 8002ed0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002ed4:	d836      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002ed6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002eda:	d014      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x10a>
 8002edc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002ee0:	d830      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee6:	d00e      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x10a>
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eec:	d82a      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002eee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ef2:	d008      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x10a>
 8002ef4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ef8:	d824      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x148>
 8002efa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002efe:	d002      	beq.n	8002f06 <ADC_ConfigureBoostMode+0x10a>
 8002f00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f04:	d11e      	bne.n	8002f44 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	60fb      	str	r3, [r7, #12]
        break;
 8002f16:	e016      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	60fb      	str	r3, [r7, #12]
        break;
 8002f1e:	e012      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	60fb      	str	r3, [r7, #12]
        break;
 8002f26:	e00e      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	60fb      	str	r3, [r7, #12]
        break;
 8002f2e:	e00a      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	09db      	lsrs	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
        break;
 8002f36:	e006      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	60fb      	str	r3, [r7, #12]
        break;
 8002f3e:	e002      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f40:	bf00      	nop
 8002f42:	e000      	b.n	8002f46 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f44:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f46:	f7fe fcd1 	bl	80018ec <HAL_GetREVID>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d815      	bhi.n	8002f80 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	@ (8003004 <ADC_ConfigureBoostMode+0x208>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d908      	bls.n	8002f6e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f6c:	e03e      	b.n	8002fec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	e035      	b.n	8002fec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <ADC_ConfigureBoostMode+0x20c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d808      	bhi.n	8002fa0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	e025      	b.n	8002fec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <ADC_ConfigureBoostMode+0x210>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d80a      	bhi.n	8002fbe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fba:	609a      	str	r2, [r3, #8]
}
 8002fbc:	e016      	b.n	8002fec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <ADC_ConfigureBoostMode+0x214>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d80a      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	e007      	b.n	8002fec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022300 	.word	0x40022300
 8003000:	58026300 	.word	0x58026300
 8003004:	01312d00 	.word	0x01312d00
 8003008:	005f5e10 	.word	0x005f5e10
 800300c:	00bebc20 	.word	0x00bebc20
 8003010:	017d7840 	.word	0x017d7840

08003014 <__NVIC_SetPriorityGrouping>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <__NVIC_SetPriorityGrouping+0x40>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00
 8003058:	05fa0000 	.word	0x05fa0000

0800305c <__NVIC_GetPriorityGrouping>:
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff4c 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003192:	f7ff ff63 	bl	800305c <__NVIC_GetPriorityGrouping>
 8003196:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	6978      	ldr	r0, [r7, #20]
 800319e:	f7ff ffb3 	bl	8003108 <NVIC_EncodePriority>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff82 	bl	80030b4 <__NVIC_SetPriority>
}
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff56 	bl	8003078 <__NVIC_EnableIRQ>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80031d8:	f3bf 8f5f 	dmb	sy
}
 80031dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031de:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <HAL_MPU_Disable+0x28>)
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <HAL_MPU_Disable+0x28>)
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_MPU_Disable+0x2c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	e000ed90 	.word	0xe000ed90

08003204 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800320c:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <HAL_MPU_Enable+0x38>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_MPU_Enable+0x3c>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <HAL_MPU_Enable+0x3c>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003222:	f3bf 8f4f 	dsb	sy
}
 8003226:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003228:	f3bf 8f6f 	isb	sy
}
 800322c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed90 	.word	0xe000ed90
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	785a      	ldrb	r2, [r3, #1]
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003252:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003254:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	4a19      	ldr	r2, [pc, #100]	@ (80032c0 <HAL_MPU_ConfigRegion+0x7c>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003260:	4a17      	ldr	r2, [pc, #92]	@ (80032c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7b1b      	ldrb	r3, [r3, #12]
 800326c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	7adb      	ldrb	r3, [r3, #11]
 8003272:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003274:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7a9b      	ldrb	r3, [r3, #10]
 800327a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800327c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7b5b      	ldrb	r3, [r3, #13]
 8003282:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003284:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7b9b      	ldrb	r3, [r3, #14]
 800328a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800328c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7bdb      	ldrb	r3, [r3, #15]
 8003292:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7a5b      	ldrb	r3, [r3, #9]
 800329a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800329c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7a1b      	ldrb	r3, [r3, #8]
 80032a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032ac:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032b0:	6113      	str	r3, [r2, #16]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000ed90 	.word	0xe000ed90

080032c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7fe fade 	bl	800188c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e316      	b.n	800390a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a66      	ldr	r2, [pc, #408]	@ (800347c <HAL_DMA_Init+0x1b8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Init+0xb8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a65      	ldr	r2, [pc, #404]	@ (8003480 <HAL_DMA_Init+0x1bc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Init+0xb8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a63      	ldr	r2, [pc, #396]	@ (8003484 <HAL_DMA_Init+0x1c0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Init+0xb8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a62      	ldr	r2, [pc, #392]	@ (8003488 <HAL_DMA_Init+0x1c4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a60      	ldr	r2, [pc, #384]	@ (800348c <HAL_DMA_Init+0x1c8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5f      	ldr	r2, [pc, #380]	@ (8003490 <HAL_DMA_Init+0x1cc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5d      	ldr	r2, [pc, #372]	@ (8003494 <HAL_DMA_Init+0x1d0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5c      	ldr	r2, [pc, #368]	@ (8003498 <HAL_DMA_Init+0x1d4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5a      	ldr	r2, [pc, #360]	@ (800349c <HAL_DMA_Init+0x1d8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a59      	ldr	r2, [pc, #356]	@ (80034a0 <HAL_DMA_Init+0x1dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a57      	ldr	r2, [pc, #348]	@ (80034a4 <HAL_DMA_Init+0x1e0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a56      	ldr	r2, [pc, #344]	@ (80034a8 <HAL_DMA_Init+0x1e4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a54      	ldr	r2, [pc, #336]	@ (80034ac <HAL_DMA_Init+0x1e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Init+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a53      	ldr	r2, [pc, #332]	@ (80034b0 <HAL_DMA_Init+0x1ec>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a51      	ldr	r2, [pc, #324]	@ (80034b4 <HAL_DMA_Init+0x1f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a50      	ldr	r2, [pc, #320]	@ (80034b8 <HAL_DMA_Init+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Init+0xbc>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_DMA_Init+0xbe>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 813b 	beq.w	80035fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a37      	ldr	r2, [pc, #220]	@ (800347c <HAL_DMA_Init+0x1b8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d04a      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a36      	ldr	r2, [pc, #216]	@ (8003480 <HAL_DMA_Init+0x1bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d045      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a34      	ldr	r2, [pc, #208]	@ (8003484 <HAL_DMA_Init+0x1c0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d040      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a33      	ldr	r2, [pc, #204]	@ (8003488 <HAL_DMA_Init+0x1c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d03b      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a31      	ldr	r2, [pc, #196]	@ (800348c <HAL_DMA_Init+0x1c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d036      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a30      	ldr	r2, [pc, #192]	@ (8003490 <HAL_DMA_Init+0x1cc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d031      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003494 <HAL_DMA_Init+0x1d0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02c      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_DMA_Init+0x1d4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d027      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_DMA_Init+0x1d8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	@ (80034a0 <HAL_DMA_Init+0x1dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01d      	beq.n	8003438 <HAL_DMA_Init+0x174>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_DMA_Init+0x1e0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <HAL_DMA_Init+0x1e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_DMA_Init+0x174>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_DMA_Init+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_DMA_Init+0x174>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <HAL_DMA_Init+0x1ec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_DMA_Init+0x174>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_Init+0x1f0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	@ (80034b8 <HAL_DMA_Init+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <HAL_DMA_Init+0x186>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e007      	b.n	800345a <HAL_DMA_Init+0x196>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800345a:	e02f      	b.n	80034bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345c:	f7fe fa16 	bl	800188c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b05      	cmp	r3, #5
 8003468:	d928      	bls.n	80034bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2203      	movs	r2, #3
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e246      	b.n	800390a <HAL_DMA_Init+0x646>
 800347c:	40020010 	.word	0x40020010
 8003480:	40020028 	.word	0x40020028
 8003484:	40020040 	.word	0x40020040
 8003488:	40020058 	.word	0x40020058
 800348c:	40020070 	.word	0x40020070
 8003490:	40020088 	.word	0x40020088
 8003494:	400200a0 	.word	0x400200a0
 8003498:	400200b8 	.word	0x400200b8
 800349c:	40020410 	.word	0x40020410
 80034a0:	40020428 	.word	0x40020428
 80034a4:	40020440 	.word	0x40020440
 80034a8:	40020458 	.word	0x40020458
 80034ac:	40020470 	.word	0x40020470
 80034b0:	40020488 	.word	0x40020488
 80034b4:	400204a0 	.word	0x400204a0
 80034b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1c8      	bne.n	800345c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4b83      	ldr	r3, [pc, #524]	@ (80036e4 <HAL_DMA_Init+0x420>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003518:	4313      	orrs	r3, r2
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003520:	4b71      	ldr	r3, [pc, #452]	@ (80036e8 <HAL_DMA_Init+0x424>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b71      	ldr	r3, [pc, #452]	@ (80036ec <HAL_DMA_Init+0x428>)
 8003526:	4013      	ands	r3, r2
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800352c:	d328      	bcc.n	8003580 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b28      	cmp	r3, #40	@ 0x28
 8003534:	d903      	bls.n	800353e <HAL_DMA_Init+0x27a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b2e      	cmp	r3, #46	@ 0x2e
 800353c:	d917      	bls.n	800356e <HAL_DMA_Init+0x2aa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b3e      	cmp	r3, #62	@ 0x3e
 8003544:	d903      	bls.n	800354e <HAL_DMA_Init+0x28a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b42      	cmp	r3, #66	@ 0x42
 800354c:	d90f      	bls.n	800356e <HAL_DMA_Init+0x2aa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b46      	cmp	r3, #70	@ 0x46
 8003554:	d903      	bls.n	800355e <HAL_DMA_Init+0x29a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b48      	cmp	r3, #72	@ 0x48
 800355c:	d907      	bls.n	800356e <HAL_DMA_Init+0x2aa>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b4e      	cmp	r3, #78	@ 0x4e
 8003564:	d905      	bls.n	8003572 <HAL_DMA_Init+0x2ae>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b52      	cmp	r3, #82	@ 0x52
 800356c:	d801      	bhi.n	8003572 <HAL_DMA_Init+0x2ae>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_DMA_Init+0x2b0>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800357e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d117      	bne.n	80035da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f002 f8ed 	bl	800579c <DMA_CheckFifoParam>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2240      	movs	r2, #64	@ 0x40
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e197      	b.n	800390a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f002 f828 	bl	8005638 <DMA_CalcBaseAndBitshift>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	223f      	movs	r2, #63	@ 0x3f
 80035f6:	409a      	lsls	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e0cd      	b.n	800379a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3b      	ldr	r2, [pc, #236]	@ (80036f0 <HAL_DMA_Init+0x42c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Init+0x38a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a39      	ldr	r2, [pc, #228]	@ (80036f4 <HAL_DMA_Init+0x430>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_Init+0x38a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a38      	ldr	r2, [pc, #224]	@ (80036f8 <HAL_DMA_Init+0x434>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_Init+0x38a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a36      	ldr	r2, [pc, #216]	@ (80036fc <HAL_DMA_Init+0x438>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_Init+0x38a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a35      	ldr	r2, [pc, #212]	@ (8003700 <HAL_DMA_Init+0x43c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Init+0x38a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a33      	ldr	r2, [pc, #204]	@ (8003704 <HAL_DMA_Init+0x440>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_Init+0x38a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <HAL_DMA_Init+0x444>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_Init+0x38a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a30      	ldr	r2, [pc, #192]	@ (800370c <HAL_DMA_Init+0x448>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Init+0x38e>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_DMA_Init+0x390>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <HAL_DMA_Init+0x42c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d021      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_DMA_Init+0x430>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01c      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a21      	ldr	r2, [pc, #132]	@ (80036f8 <HAL_DMA_Init+0x434>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d017      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	@ (80036fc <HAL_DMA_Init+0x438>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d012      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	@ (8003700 <HAL_DMA_Init+0x43c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00d      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	@ (8003704 <HAL_DMA_Init+0x440>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_DMA_Init+0x444>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_Init+0x3e4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_DMA_Init+0x448>)
 80036a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <HAL_DMA_Init+0x44c>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	d021      	beq.n	8003714 <HAL_DMA_Init+0x450>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b80      	cmp	r3, #128	@ 0x80
 80036d6:	d102      	bne.n	80036de <HAL_DMA_Init+0x41a>
 80036d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036dc:	e01b      	b.n	8003716 <HAL_DMA_Init+0x452>
 80036de:	2300      	movs	r3, #0
 80036e0:	e019      	b.n	8003716 <HAL_DMA_Init+0x452>
 80036e2:	bf00      	nop
 80036e4:	fe10803f 	.word	0xfe10803f
 80036e8:	5c001000 	.word	0x5c001000
 80036ec:	ffff0000 	.word	0xffff0000
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	fffe000f 	.word	0xfffe000f
 8003714:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800371c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800372c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800373c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003744:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b6e      	ldr	r3, [pc, #440]	@ (8003914 <HAL_DMA_Init+0x650>)
 800375c:	4413      	add	r3, r2
 800375e:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <HAL_DMA_Init+0x654>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 ff63 	bl	8005638 <DMA_CalcBaseAndBitshift>
 8003772:	4603      	mov	r3, r0
 8003774:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2201      	movs	r2, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	e008      	b.n	800379a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0b7      	b.n	800390a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a5f      	ldr	r2, [pc, #380]	@ (800391c <HAL_DMA_Init+0x658>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d072      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003920 <HAL_DMA_Init+0x65c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d06d      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003924 <HAL_DMA_Init+0x660>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d068      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003928 <HAL_DMA_Init+0x664>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d063      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a59      	ldr	r2, [pc, #356]	@ (800392c <HAL_DMA_Init+0x668>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d05e      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_DMA_Init+0x66c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d059      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a56      	ldr	r2, [pc, #344]	@ (8003934 <HAL_DMA_Init+0x670>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d054      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a54      	ldr	r2, [pc, #336]	@ (8003938 <HAL_DMA_Init+0x674>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d04f      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a53      	ldr	r2, [pc, #332]	@ (800393c <HAL_DMA_Init+0x678>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d04a      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a51      	ldr	r2, [pc, #324]	@ (8003940 <HAL_DMA_Init+0x67c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d045      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a50      	ldr	r2, [pc, #320]	@ (8003944 <HAL_DMA_Init+0x680>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d040      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a4e      	ldr	r2, [pc, #312]	@ (8003948 <HAL_DMA_Init+0x684>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d03b      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a4d      	ldr	r2, [pc, #308]	@ (800394c <HAL_DMA_Init+0x688>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d036      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <HAL_DMA_Init+0x68c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d031      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4a      	ldr	r2, [pc, #296]	@ (8003954 <HAL_DMA_Init+0x690>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d02c      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a48      	ldr	r2, [pc, #288]	@ (8003958 <HAL_DMA_Init+0x694>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a47      	ldr	r2, [pc, #284]	@ (800395c <HAL_DMA_Init+0x698>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a45      	ldr	r2, [pc, #276]	@ (8003960 <HAL_DMA_Init+0x69c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a44      	ldr	r2, [pc, #272]	@ (8003964 <HAL_DMA_Init+0x6a0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a42      	ldr	r2, [pc, #264]	@ (8003968 <HAL_DMA_Init+0x6a4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a41      	ldr	r2, [pc, #260]	@ (800396c <HAL_DMA_Init+0x6a8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a3f      	ldr	r2, [pc, #252]	@ (8003970 <HAL_DMA_Init+0x6ac>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a3e      	ldr	r2, [pc, #248]	@ (8003974 <HAL_DMA_Init+0x6b0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_DMA_Init+0x5c6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a3c      	ldr	r2, [pc, #240]	@ (8003978 <HAL_DMA_Init+0x6b4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_DMA_Init+0x5ca>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_DMA_Init+0x5cc>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d032      	beq.n	80038fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fffd 	bl	8005894 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d102      	bne.n	80038a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_DMA_Init+0x624>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d80c      	bhi.n	80038e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f002 f87a 	bl	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	e008      	b.n	80038fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	a7fdabf8 	.word	0xa7fdabf8
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	40020010 	.word	0x40020010
 8003920:	40020028 	.word	0x40020028
 8003924:	40020040 	.word	0x40020040
 8003928:	40020058 	.word	0x40020058
 800392c:	40020070 	.word	0x40020070
 8003930:	40020088 	.word	0x40020088
 8003934:	400200a0 	.word	0x400200a0
 8003938:	400200b8 	.word	0x400200b8
 800393c:	40020410 	.word	0x40020410
 8003940:	40020428 	.word	0x40020428
 8003944:	40020440 	.word	0x40020440
 8003948:	40020458 	.word	0x40020458
 800394c:	40020470 	.word	0x40020470
 8003950:	40020488 	.word	0x40020488
 8003954:	400204a0 	.word	0x400204a0
 8003958:	400204b8 	.word	0x400204b8
 800395c:	58025408 	.word	0x58025408
 8003960:	5802541c 	.word	0x5802541c
 8003964:	58025430 	.word	0x58025430
 8003968:	58025444 	.word	0x58025444
 800396c:	58025458 	.word	0x58025458
 8003970:	5802546c 	.word	0x5802546c
 8003974:	58025480 	.word	0x58025480
 8003978:	58025494 	.word	0x58025494

0800397c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e226      	b.n	8003de6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_Start_IT+0x2a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e21f      	b.n	8003de6 <HAL_DMA_Start_IT+0x46a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f040 820a 	bne.w	8003dd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a68      	ldr	r2, [pc, #416]	@ (8003b70 <HAL_DMA_Start_IT+0x1f4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04a      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a66      	ldr	r2, [pc, #408]	@ (8003b74 <HAL_DMA_Start_IT+0x1f8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d045      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_DMA_Start_IT+0x1fc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a63      	ldr	r2, [pc, #396]	@ (8003b7c <HAL_DMA_Start_IT+0x200>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d03b      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a62      	ldr	r2, [pc, #392]	@ (8003b80 <HAL_DMA_Start_IT+0x204>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_DMA_Start_IT+0x208>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b88 <HAL_DMA_Start_IT+0x20c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	@ (8003b8c <HAL_DMA_Start_IT+0x210>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d027      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b90 <HAL_DMA_Start_IT+0x214>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5a      	ldr	r2, [pc, #360]	@ (8003b94 <HAL_DMA_Start_IT+0x218>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a59      	ldr	r2, [pc, #356]	@ (8003b98 <HAL_DMA_Start_IT+0x21c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_DMA_Start_IT+0x220>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a56      	ldr	r2, [pc, #344]	@ (8003ba0 <HAL_DMA_Start_IT+0x224>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a54      	ldr	r2, [pc, #336]	@ (8003ba4 <HAL_DMA_Start_IT+0x228>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ba8 <HAL_DMA_Start_IT+0x22c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_Start_IT+0xee>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a51      	ldr	r2, [pc, #324]	@ (8003bac <HAL_DMA_Start_IT+0x230>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <HAL_DMA_Start_IT+0x100>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e007      	b.n	8003a8c <HAL_DMA_Start_IT+0x110>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f001 fc24 	bl	80052e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a34      	ldr	r2, [pc, #208]	@ (8003b70 <HAL_DMA_Start_IT+0x1f4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	@ (8003b74 <HAL_DMA_Start_IT+0x1f8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d045      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <HAL_DMA_Start_IT+0x1fc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a30      	ldr	r2, [pc, #192]	@ (8003b7c <HAL_DMA_Start_IT+0x200>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d03b      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b80 <HAL_DMA_Start_IT+0x204>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d036      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_DMA_Start_IT+0x208>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d031      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b88 <HAL_DMA_Start_IT+0x20c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02c      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <HAL_DMA_Start_IT+0x210>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d027      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_DMA_Start_IT+0x214>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_DMA_Start_IT+0x218>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01d      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a25      	ldr	r2, [pc, #148]	@ (8003b98 <HAL_DMA_Start_IT+0x21c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <HAL_DMA_Start_IT+0x220>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <HAL_DMA_Start_IT+0x224>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_DMA_Start_IT+0x228>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <HAL_DMA_Start_IT+0x22c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_DMA_Start_IT+0x1bc>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <HAL_DMA_Start_IT+0x230>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_DMA_Start_IT+0x1c0>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_DMA_Start_IT+0x1c2>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d036      	beq.n	8003bb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 021e 	bic.w	r2, r3, #30
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0216 	orr.w	r2, r2, #22
 8003b54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d03e      	beq.n	8003bdc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e035      	b.n	8003bdc <HAL_DMA_Start_IT+0x260>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 020e 	bic.w	r2, r3, #14
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 020a 	orr.w	r2, r2, #10
 8003bc2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0204 	orr.w	r2, r2, #4
 8003bda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a83      	ldr	r2, [pc, #524]	@ (8003df0 <HAL_DMA_Start_IT+0x474>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d072      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a82      	ldr	r2, [pc, #520]	@ (8003df4 <HAL_DMA_Start_IT+0x478>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d06d      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a80      	ldr	r2, [pc, #512]	@ (8003df8 <HAL_DMA_Start_IT+0x47c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d068      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8003dfc <HAL_DMA_Start_IT+0x480>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d063      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7d      	ldr	r2, [pc, #500]	@ (8003e00 <HAL_DMA_Start_IT+0x484>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d05e      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7c      	ldr	r2, [pc, #496]	@ (8003e04 <HAL_DMA_Start_IT+0x488>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d059      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003e08 <HAL_DMA_Start_IT+0x48c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d054      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a79      	ldr	r2, [pc, #484]	@ (8003e0c <HAL_DMA_Start_IT+0x490>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04f      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a77      	ldr	r2, [pc, #476]	@ (8003e10 <HAL_DMA_Start_IT+0x494>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d04a      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a76      	ldr	r2, [pc, #472]	@ (8003e14 <HAL_DMA_Start_IT+0x498>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d045      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a74      	ldr	r2, [pc, #464]	@ (8003e18 <HAL_DMA_Start_IT+0x49c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d040      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a73      	ldr	r2, [pc, #460]	@ (8003e1c <HAL_DMA_Start_IT+0x4a0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d03b      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a71      	ldr	r2, [pc, #452]	@ (8003e20 <HAL_DMA_Start_IT+0x4a4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d036      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a70      	ldr	r2, [pc, #448]	@ (8003e24 <HAL_DMA_Start_IT+0x4a8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d031      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e28 <HAL_DMA_Start_IT+0x4ac>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02c      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6d      	ldr	r2, [pc, #436]	@ (8003e2c <HAL_DMA_Start_IT+0x4b0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d027      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6b      	ldr	r2, [pc, #428]	@ (8003e30 <HAL_DMA_Start_IT+0x4b4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d022      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a6a      	ldr	r2, [pc, #424]	@ (8003e34 <HAL_DMA_Start_IT+0x4b8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d01d      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a68      	ldr	r2, [pc, #416]	@ (8003e38 <HAL_DMA_Start_IT+0x4bc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d018      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a67      	ldr	r2, [pc, #412]	@ (8003e3c <HAL_DMA_Start_IT+0x4c0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a65      	ldr	r2, [pc, #404]	@ (8003e40 <HAL_DMA_Start_IT+0x4c4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a64      	ldr	r2, [pc, #400]	@ (8003e44 <HAL_DMA_Start_IT+0x4c8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d009      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a62      	ldr	r2, [pc, #392]	@ (8003e48 <HAL_DMA_Start_IT+0x4cc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_DMA_Start_IT+0x350>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a61      	ldr	r2, [pc, #388]	@ (8003e4c <HAL_DMA_Start_IT+0x4d0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <HAL_DMA_Start_IT+0x354>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_Start_IT+0x356>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01a      	beq.n	8003d0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a37      	ldr	r2, [pc, #220]	@ (8003df0 <HAL_DMA_Start_IT+0x474>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d04a      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a36      	ldr	r2, [pc, #216]	@ (8003df4 <HAL_DMA_Start_IT+0x478>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d045      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a34      	ldr	r2, [pc, #208]	@ (8003df8 <HAL_DMA_Start_IT+0x47c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d040      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <HAL_DMA_Start_IT+0x480>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d03b      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <HAL_DMA_Start_IT+0x484>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d036      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <HAL_DMA_Start_IT+0x488>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d031      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <HAL_DMA_Start_IT+0x48c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02c      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <HAL_DMA_Start_IT+0x490>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d027      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	@ (8003e10 <HAL_DMA_Start_IT+0x494>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d022      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <HAL_DMA_Start_IT+0x498>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d01d      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a28      	ldr	r2, [pc, #160]	@ (8003e18 <HAL_DMA_Start_IT+0x49c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a27      	ldr	r2, [pc, #156]	@ (8003e1c <HAL_DMA_Start_IT+0x4a0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a25      	ldr	r2, [pc, #148]	@ (8003e20 <HAL_DMA_Start_IT+0x4a4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a24      	ldr	r2, [pc, #144]	@ (8003e24 <HAL_DMA_Start_IT+0x4a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	@ (8003e28 <HAL_DMA_Start_IT+0x4ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_Start_IT+0x430>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a21      	ldr	r2, [pc, #132]	@ (8003e2c <HAL_DMA_Start_IT+0x4b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <HAL_DMA_Start_IT+0x442>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	e012      	b.n	8003de4 <HAL_DMA_Start_IT+0x468>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e009      	b.n	8003de4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40020010 	.word	0x40020010
 8003df4:	40020028 	.word	0x40020028
 8003df8:	40020040 	.word	0x40020040
 8003dfc:	40020058 	.word	0x40020058
 8003e00:	40020070 	.word	0x40020070
 8003e04:	40020088 	.word	0x40020088
 8003e08:	400200a0 	.word	0x400200a0
 8003e0c:	400200b8 	.word	0x400200b8
 8003e10:	40020410 	.word	0x40020410
 8003e14:	40020428 	.word	0x40020428
 8003e18:	40020440 	.word	0x40020440
 8003e1c:	40020458 	.word	0x40020458
 8003e20:	40020470 	.word	0x40020470
 8003e24:	40020488 	.word	0x40020488
 8003e28:	400204a0 	.word	0x400204a0
 8003e2c:	400204b8 	.word	0x400204b8
 8003e30:	58025408 	.word	0x58025408
 8003e34:	5802541c 	.word	0x5802541c
 8003e38:	58025430 	.word	0x58025430
 8003e3c:	58025444 	.word	0x58025444
 8003e40:	58025458 	.word	0x58025458
 8003e44:	5802546c 	.word	0x5802546c
 8003e48:	58025480 	.word	0x58025480
 8003e4c:	58025494 	.word	0x58025494

08003e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7fd fd18 	bl	800188c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2dc      	b.n	8004422 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d008      	beq.n	8003e86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2280      	movs	r2, #128	@ 0x80
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e2cd      	b.n	8004422 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a76      	ldr	r2, [pc, #472]	@ (8004064 <HAL_DMA_Abort+0x214>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04a      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a74      	ldr	r2, [pc, #464]	@ (8004068 <HAL_DMA_Abort+0x218>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d045      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a73      	ldr	r2, [pc, #460]	@ (800406c <HAL_DMA_Abort+0x21c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d040      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a71      	ldr	r2, [pc, #452]	@ (8004070 <HAL_DMA_Abort+0x220>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d03b      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a70      	ldr	r2, [pc, #448]	@ (8004074 <HAL_DMA_Abort+0x224>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d036      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8004078 <HAL_DMA_Abort+0x228>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d031      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800407c <HAL_DMA_Abort+0x22c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d02c      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8004080 <HAL_DMA_Abort+0x230>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d027      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6a      	ldr	r2, [pc, #424]	@ (8004084 <HAL_DMA_Abort+0x234>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a68      	ldr	r2, [pc, #416]	@ (8004088 <HAL_DMA_Abort+0x238>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a67      	ldr	r2, [pc, #412]	@ (800408c <HAL_DMA_Abort+0x23c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	@ (8004090 <HAL_DMA_Abort+0x240>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a64      	ldr	r2, [pc, #400]	@ (8004094 <HAL_DMA_Abort+0x244>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a62      	ldr	r2, [pc, #392]	@ (8004098 <HAL_DMA_Abort+0x248>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a61      	ldr	r2, [pc, #388]	@ (800409c <HAL_DMA_Abort+0x24c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_Abort+0xd6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5f      	ldr	r2, [pc, #380]	@ (80040a0 <HAL_DMA_Abort+0x250>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_DMA_Abort+0xda>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_DMA_Abort+0xdc>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 021e 	bic.w	r2, r2, #30
 8003f3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e00a      	b.n	8003f6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 020e 	bic.w	r2, r2, #14
 8003f66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3c      	ldr	r2, [pc, #240]	@ (8004064 <HAL_DMA_Abort+0x214>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d072      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004068 <HAL_DMA_Abort+0x218>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d06d      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a39      	ldr	r2, [pc, #228]	@ (800406c <HAL_DMA_Abort+0x21c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d068      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a37      	ldr	r2, [pc, #220]	@ (8004070 <HAL_DMA_Abort+0x220>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d063      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a36      	ldr	r2, [pc, #216]	@ (8004074 <HAL_DMA_Abort+0x224>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d05e      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a34      	ldr	r2, [pc, #208]	@ (8004078 <HAL_DMA_Abort+0x228>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d059      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a33      	ldr	r2, [pc, #204]	@ (800407c <HAL_DMA_Abort+0x22c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d054      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a31      	ldr	r2, [pc, #196]	@ (8004080 <HAL_DMA_Abort+0x230>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d04f      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a30      	ldr	r2, [pc, #192]	@ (8004084 <HAL_DMA_Abort+0x234>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d04a      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <HAL_DMA_Abort+0x238>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d045      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800408c <HAL_DMA_Abort+0x23c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d040      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8004090 <HAL_DMA_Abort+0x240>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d03b      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <HAL_DMA_Abort+0x244>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d036      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a28      	ldr	r2, [pc, #160]	@ (8004098 <HAL_DMA_Abort+0x248>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a27      	ldr	r2, [pc, #156]	@ (800409c <HAL_DMA_Abort+0x24c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d02c      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a25      	ldr	r2, [pc, #148]	@ (80040a0 <HAL_DMA_Abort+0x250>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d027      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a24      	ldr	r2, [pc, #144]	@ (80040a4 <HAL_DMA_Abort+0x254>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <HAL_DMA_Abort+0x258>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01d      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <HAL_DMA_Abort+0x25c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <HAL_DMA_Abort+0x260>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <HAL_DMA_Abort+0x264>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <HAL_DMA_Abort+0x268>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <HAL_DMA_Abort+0x26c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_DMA_Abort+0x20e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	@ (80040c0 <HAL_DMA_Abort+0x270>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d132      	bne.n	80040c4 <HAL_DMA_Abort+0x274>
 800405e:	2301      	movs	r3, #1
 8004060:	e031      	b.n	80040c6 <HAL_DMA_Abort+0x276>
 8004062:	bf00      	nop
 8004064:	40020010 	.word	0x40020010
 8004068:	40020028 	.word	0x40020028
 800406c:	40020040 	.word	0x40020040
 8004070:	40020058 	.word	0x40020058
 8004074:	40020070 	.word	0x40020070
 8004078:	40020088 	.word	0x40020088
 800407c:	400200a0 	.word	0x400200a0
 8004080:	400200b8 	.word	0x400200b8
 8004084:	40020410 	.word	0x40020410
 8004088:	40020428 	.word	0x40020428
 800408c:	40020440 	.word	0x40020440
 8004090:	40020458 	.word	0x40020458
 8004094:	40020470 	.word	0x40020470
 8004098:	40020488 	.word	0x40020488
 800409c:	400204a0 	.word	0x400204a0
 80040a0:	400204b8 	.word	0x400204b8
 80040a4:	58025408 	.word	0x58025408
 80040a8:	5802541c 	.word	0x5802541c
 80040ac:	58025430 	.word	0x58025430
 80040b0:	58025444 	.word	0x58025444
 80040b4:	58025458 	.word	0x58025458
 80040b8:	5802546c 	.word	0x5802546c
 80040bc:	58025480 	.word	0x58025480
 80040c0:	58025494 	.word	0x58025494
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6d      	ldr	r2, [pc, #436]	@ (8004294 <HAL_DMA_Abort+0x444>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04a      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004298 <HAL_DMA_Abort+0x448>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d045      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6a      	ldr	r2, [pc, #424]	@ (800429c <HAL_DMA_Abort+0x44c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	@ (80042a0 <HAL_DMA_Abort+0x450>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03b      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a67      	ldr	r2, [pc, #412]	@ (80042a4 <HAL_DMA_Abort+0x454>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d036      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	@ (80042a8 <HAL_DMA_Abort+0x458>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a64      	ldr	r2, [pc, #400]	@ (80042ac <HAL_DMA_Abort+0x45c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02c      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a62      	ldr	r2, [pc, #392]	@ (80042b0 <HAL_DMA_Abort+0x460>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d027      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a61      	ldr	r2, [pc, #388]	@ (80042b4 <HAL_DMA_Abort+0x464>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5f      	ldr	r2, [pc, #380]	@ (80042b8 <HAL_DMA_Abort+0x468>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5e      	ldr	r2, [pc, #376]	@ (80042bc <HAL_DMA_Abort+0x46c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	@ (80042c0 <HAL_DMA_Abort+0x470>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5b      	ldr	r2, [pc, #364]	@ (80042c4 <HAL_DMA_Abort+0x474>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a59      	ldr	r2, [pc, #356]	@ (80042c8 <HAL_DMA_Abort+0x478>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a58      	ldr	r2, [pc, #352]	@ (80042cc <HAL_DMA_Abort+0x47c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_DMA_Abort+0x32a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a56      	ldr	r2, [pc, #344]	@ (80042d0 <HAL_DMA_Abort+0x480>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <HAL_DMA_Abort+0x33c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e007      	b.n	800419c <HAL_DMA_Abort+0x34c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800419c:	e013      	b.n	80041c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800419e:	f7fd fb75 	bl	800188c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d90c      	bls.n	80041c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2203      	movs	r2, #3
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e12d      	b.n	8004422 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004294 <HAL_DMA_Abort+0x444>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d04a      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004298 <HAL_DMA_Abort+0x448>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d045      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	@ (800429c <HAL_DMA_Abort+0x44c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d040      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2a      	ldr	r2, [pc, #168]	@ (80042a0 <HAL_DMA_Abort+0x450>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d03b      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a29      	ldr	r2, [pc, #164]	@ (80042a4 <HAL_DMA_Abort+0x454>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d036      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a27      	ldr	r2, [pc, #156]	@ (80042a8 <HAL_DMA_Abort+0x458>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d031      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <HAL_DMA_Abort+0x45c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d02c      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a24      	ldr	r2, [pc, #144]	@ (80042b0 <HAL_DMA_Abort+0x460>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d027      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a23      	ldr	r2, [pc, #140]	@ (80042b4 <HAL_DMA_Abort+0x464>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d022      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	@ (80042b8 <HAL_DMA_Abort+0x468>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01d      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a20      	ldr	r2, [pc, #128]	@ (80042bc <HAL_DMA_Abort+0x46c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1e      	ldr	r2, [pc, #120]	@ (80042c0 <HAL_DMA_Abort+0x470>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_DMA_Abort+0x474>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <HAL_DMA_Abort+0x478>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <HAL_DMA_Abort+0x47c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_DMA_Abort+0x422>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_DMA_Abort+0x480>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d101      	bne.n	8004276 <HAL_DMA_Abort+0x426>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_DMA_Abort+0x428>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02b      	beq.n	80042d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	223f      	movs	r2, #63	@ 0x3f
 800428c:	409a      	lsls	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	e02a      	b.n	80042ea <HAL_DMA_Abort+0x49a>
 8004294:	40020010 	.word	0x40020010
 8004298:	40020028 	.word	0x40020028
 800429c:	40020040 	.word	0x40020040
 80042a0:	40020058 	.word	0x40020058
 80042a4:	40020070 	.word	0x40020070
 80042a8:	40020088 	.word	0x40020088
 80042ac:	400200a0 	.word	0x400200a0
 80042b0:	400200b8 	.word	0x400200b8
 80042b4:	40020410 	.word	0x40020410
 80042b8:	40020428 	.word	0x40020428
 80042bc:	40020440 	.word	0x40020440
 80042c0:	40020458 	.word	0x40020458
 80042c4:	40020470 	.word	0x40020470
 80042c8:	40020488 	.word	0x40020488
 80042cc:	400204a0 	.word	0x400204a0
 80042d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2201      	movs	r2, #1
 80042e4:	409a      	lsls	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a4f      	ldr	r2, [pc, #316]	@ (800442c <HAL_DMA_Abort+0x5dc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d072      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_DMA_Abort+0x5e0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d06d      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4c      	ldr	r2, [pc, #304]	@ (8004434 <HAL_DMA_Abort+0x5e4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d068      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4a      	ldr	r2, [pc, #296]	@ (8004438 <HAL_DMA_Abort+0x5e8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d063      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a49      	ldr	r2, [pc, #292]	@ (800443c <HAL_DMA_Abort+0x5ec>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d05e      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a47      	ldr	r2, [pc, #284]	@ (8004440 <HAL_DMA_Abort+0x5f0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d059      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a46      	ldr	r2, [pc, #280]	@ (8004444 <HAL_DMA_Abort+0x5f4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d054      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a44      	ldr	r2, [pc, #272]	@ (8004448 <HAL_DMA_Abort+0x5f8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04f      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a43      	ldr	r2, [pc, #268]	@ (800444c <HAL_DMA_Abort+0x5fc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04a      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a41      	ldr	r2, [pc, #260]	@ (8004450 <HAL_DMA_Abort+0x600>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d045      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a40      	ldr	r2, [pc, #256]	@ (8004454 <HAL_DMA_Abort+0x604>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d040      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3e      	ldr	r2, [pc, #248]	@ (8004458 <HAL_DMA_Abort+0x608>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d03b      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a3d      	ldr	r2, [pc, #244]	@ (800445c <HAL_DMA_Abort+0x60c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d036      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3b      	ldr	r2, [pc, #236]	@ (8004460 <HAL_DMA_Abort+0x610>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3a      	ldr	r2, [pc, #232]	@ (8004464 <HAL_DMA_Abort+0x614>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d02c      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a38      	ldr	r2, [pc, #224]	@ (8004468 <HAL_DMA_Abort+0x618>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d027      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a37      	ldr	r2, [pc, #220]	@ (800446c <HAL_DMA_Abort+0x61c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a35      	ldr	r2, [pc, #212]	@ (8004470 <HAL_DMA_Abort+0x620>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a34      	ldr	r2, [pc, #208]	@ (8004474 <HAL_DMA_Abort+0x624>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a32      	ldr	r2, [pc, #200]	@ (8004478 <HAL_DMA_Abort+0x628>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a31      	ldr	r2, [pc, #196]	@ (800447c <HAL_DMA_Abort+0x62c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004480 <HAL_DMA_Abort+0x630>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <HAL_DMA_Abort+0x634>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_DMA_Abort+0x58a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <HAL_DMA_Abort+0x638>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_DMA_Abort+0x58e>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_Abort+0x590>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004404:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800440e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40020010 	.word	0x40020010
 8004430:	40020028 	.word	0x40020028
 8004434:	40020040 	.word	0x40020040
 8004438:	40020058 	.word	0x40020058
 800443c:	40020070 	.word	0x40020070
 8004440:	40020088 	.word	0x40020088
 8004444:	400200a0 	.word	0x400200a0
 8004448:	400200b8 	.word	0x400200b8
 800444c:	40020410 	.word	0x40020410
 8004450:	40020428 	.word	0x40020428
 8004454:	40020440 	.word	0x40020440
 8004458:	40020458 	.word	0x40020458
 800445c:	40020470 	.word	0x40020470
 8004460:	40020488 	.word	0x40020488
 8004464:	400204a0 	.word	0x400204a0
 8004468:	400204b8 	.word	0x400204b8
 800446c:	58025408 	.word	0x58025408
 8004470:	5802541c 	.word	0x5802541c
 8004474:	58025430 	.word	0x58025430
 8004478:	58025444 	.word	0x58025444
 800447c:	58025458 	.word	0x58025458
 8004480:	5802546c 	.word	0x5802546c
 8004484:	58025480 	.word	0x58025480
 8004488:	58025494 	.word	0x58025494

0800448c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004498:	4b67      	ldr	r3, [pc, #412]	@ (8004638 <HAL_DMA_IRQHandler+0x1ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a67      	ldr	r2, [pc, #412]	@ (800463c <HAL_DMA_IRQHandler+0x1b0>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0a9b      	lsrs	r3, r3, #10
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004640 <HAL_DMA_IRQHandler+0x1b4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004644 <HAL_DMA_IRQHandler+0x1b8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004648 <HAL_DMA_IRQHandler+0x1bc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5a      	ldr	r2, [pc, #360]	@ (800464c <HAL_DMA_IRQHandler+0x1c0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a59      	ldr	r2, [pc, #356]	@ (8004650 <HAL_DMA_IRQHandler+0x1c4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a57      	ldr	r2, [pc, #348]	@ (8004654 <HAL_DMA_IRQHandler+0x1c8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a56      	ldr	r2, [pc, #344]	@ (8004658 <HAL_DMA_IRQHandler+0x1cc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a54      	ldr	r2, [pc, #336]	@ (800465c <HAL_DMA_IRQHandler+0x1d0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a53      	ldr	r2, [pc, #332]	@ (8004660 <HAL_DMA_IRQHandler+0x1d4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a51      	ldr	r2, [pc, #324]	@ (8004664 <HAL_DMA_IRQHandler+0x1d8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a50      	ldr	r2, [pc, #320]	@ (8004668 <HAL_DMA_IRQHandler+0x1dc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a4e      	ldr	r2, [pc, #312]	@ (800466c <HAL_DMA_IRQHandler+0x1e0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4d      	ldr	r2, [pc, #308]	@ (8004670 <HAL_DMA_IRQHandler+0x1e4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a4b      	ldr	r2, [pc, #300]	@ (8004674 <HAL_DMA_IRQHandler+0x1e8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4a      	ldr	r2, [pc, #296]	@ (8004678 <HAL_DMA_IRQHandler+0x1ec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a48      	ldr	r2, [pc, #288]	@ (800467c <HAL_DMA_IRQHandler+0x1f0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_DMA_IRQHandler+0xd6>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_DMA_IRQHandler+0xd8>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 842b 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2208      	movs	r2, #8
 8004574:	409a      	lsls	r2, r3
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a2 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2e      	ldr	r2, [pc, #184]	@ (8004640 <HAL_DMA_IRQHandler+0x1b4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d04a      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2d      	ldr	r2, [pc, #180]	@ (8004644 <HAL_DMA_IRQHandler+0x1b8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d045      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <HAL_DMA_IRQHandler+0x1bc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d040      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2a      	ldr	r2, [pc, #168]	@ (800464c <HAL_DMA_IRQHandler+0x1c0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03b      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a28      	ldr	r2, [pc, #160]	@ (8004650 <HAL_DMA_IRQHandler+0x1c4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d036      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a27      	ldr	r2, [pc, #156]	@ (8004654 <HAL_DMA_IRQHandler+0x1c8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d031      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a25      	ldr	r2, [pc, #148]	@ (8004658 <HAL_DMA_IRQHandler+0x1cc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d02c      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a24      	ldr	r2, [pc, #144]	@ (800465c <HAL_DMA_IRQHandler+0x1d0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d027      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a22      	ldr	r2, [pc, #136]	@ (8004660 <HAL_DMA_IRQHandler+0x1d4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d022      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a21      	ldr	r2, [pc, #132]	@ (8004664 <HAL_DMA_IRQHandler+0x1d8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d01d      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004668 <HAL_DMA_IRQHandler+0x1dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d018      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1e      	ldr	r2, [pc, #120]	@ (800466c <HAL_DMA_IRQHandler+0x1e0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004670 <HAL_DMA_IRQHandler+0x1e4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1b      	ldr	r2, [pc, #108]	@ (8004674 <HAL_DMA_IRQHandler+0x1e8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	@ (8004678 <HAL_DMA_IRQHandler+0x1ec>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	@ (800467c <HAL_DMA_IRQHandler+0x1f0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d12f      	bne.n	8004680 <HAL_DMA_IRQHandler+0x1f4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e02e      	b.n	8004694 <HAL_DMA_IRQHandler+0x208>
 8004636:	bf00      	nop
 8004638:	24000000 	.word	0x24000000
 800463c:	1b4e81b5 	.word	0x1b4e81b5
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2208      	movs	r2, #8
 80046b2:	409a      	lsls	r2, r3
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d06e      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a69      	ldr	r2, [pc, #420]	@ (8004884 <HAL_DMA_IRQHandler+0x3f8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d04a      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a67      	ldr	r2, [pc, #412]	@ (8004888 <HAL_DMA_IRQHandler+0x3fc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d045      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a66      	ldr	r2, [pc, #408]	@ (800488c <HAL_DMA_IRQHandler+0x400>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d040      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a64      	ldr	r2, [pc, #400]	@ (8004890 <HAL_DMA_IRQHandler+0x404>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d03b      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a63      	ldr	r2, [pc, #396]	@ (8004894 <HAL_DMA_IRQHandler+0x408>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d036      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a61      	ldr	r2, [pc, #388]	@ (8004898 <HAL_DMA_IRQHandler+0x40c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d031      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a60      	ldr	r2, [pc, #384]	@ (800489c <HAL_DMA_IRQHandler+0x410>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d02c      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5e      	ldr	r2, [pc, #376]	@ (80048a0 <HAL_DMA_IRQHandler+0x414>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d027      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a5d      	ldr	r2, [pc, #372]	@ (80048a4 <HAL_DMA_IRQHandler+0x418>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d022      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5b      	ldr	r2, [pc, #364]	@ (80048a8 <HAL_DMA_IRQHandler+0x41c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01d      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5a      	ldr	r2, [pc, #360]	@ (80048ac <HAL_DMA_IRQHandler+0x420>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a58      	ldr	r2, [pc, #352]	@ (80048b0 <HAL_DMA_IRQHandler+0x424>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a57      	ldr	r2, [pc, #348]	@ (80048b4 <HAL_DMA_IRQHandler+0x428>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a55      	ldr	r2, [pc, #340]	@ (80048b8 <HAL_DMA_IRQHandler+0x42c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a54      	ldr	r2, [pc, #336]	@ (80048bc <HAL_DMA_IRQHandler+0x430>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a52      	ldr	r2, [pc, #328]	@ (80048c0 <HAL_DMA_IRQHandler+0x434>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10a      	bne.n	8004790 <HAL_DMA_IRQHandler+0x304>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e003      	b.n	8004798 <HAL_DMA_IRQHandler+0x30c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2204      	movs	r2, #4
 80047c2:	409a      	lsls	r2, r3
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 808f 	beq.w	80048ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <HAL_DMA_IRQHandler+0x3f8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004888 <HAL_DMA_IRQHandler+0x3fc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a29      	ldr	r2, [pc, #164]	@ (800488c <HAL_DMA_IRQHandler+0x400>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a27      	ldr	r2, [pc, #156]	@ (8004890 <HAL_DMA_IRQHandler+0x404>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a26      	ldr	r2, [pc, #152]	@ (8004894 <HAL_DMA_IRQHandler+0x408>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a24      	ldr	r2, [pc, #144]	@ (8004898 <HAL_DMA_IRQHandler+0x40c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a23      	ldr	r2, [pc, #140]	@ (800489c <HAL_DMA_IRQHandler+0x410>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a21      	ldr	r2, [pc, #132]	@ (80048a0 <HAL_DMA_IRQHandler+0x414>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a20      	ldr	r2, [pc, #128]	@ (80048a4 <HAL_DMA_IRQHandler+0x418>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_DMA_IRQHandler+0x41c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <HAL_DMA_IRQHandler+0x420>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_DMA_IRQHandler+0x424>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_DMA_IRQHandler+0x428>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_DMA_IRQHandler+0x42c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <HAL_DMA_IRQHandler+0x430>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <HAL_DMA_IRQHandler+0x434>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12a      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x438>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e023      	b.n	80048cc <HAL_DMA_IRQHandler+0x440>
 8004884:	40020010 	.word	0x40020010
 8004888:	40020028 	.word	0x40020028
 800488c:	40020040 	.word	0x40020040
 8004890:	40020058 	.word	0x40020058
 8004894:	40020070 	.word	0x40020070
 8004898:	40020088 	.word	0x40020088
 800489c:	400200a0 	.word	0x400200a0
 80048a0:	400200b8 	.word	0x400200b8
 80048a4:	40020410 	.word	0x40020410
 80048a8:	40020428 	.word	0x40020428
 80048ac:	40020440 	.word	0x40020440
 80048b0:	40020458 	.word	0x40020458
 80048b4:	40020470 	.word	0x40020470
 80048b8:	40020488 	.word	0x40020488
 80048bc:	400204a0 	.word	0x400204a0
 80048c0:	400204b8 	.word	0x400204b8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2204      	movs	r2, #4
 80048da:	409a      	lsls	r2, r3
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2210      	movs	r2, #16
 80048f6:	409a      	lsls	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a6 	beq.w	8004a4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a85      	ldr	r2, [pc, #532]	@ (8004b1c <HAL_DMA_IRQHandler+0x690>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d04a      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a83      	ldr	r2, [pc, #524]	@ (8004b20 <HAL_DMA_IRQHandler+0x694>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d045      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a82      	ldr	r2, [pc, #520]	@ (8004b24 <HAL_DMA_IRQHandler+0x698>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d040      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a80      	ldr	r2, [pc, #512]	@ (8004b28 <HAL_DMA_IRQHandler+0x69c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d03b      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b2c <HAL_DMA_IRQHandler+0x6a0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d036      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	@ (8004b30 <HAL_DMA_IRQHandler+0x6a4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7c      	ldr	r2, [pc, #496]	@ (8004b34 <HAL_DMA_IRQHandler+0x6a8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02c      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b38 <HAL_DMA_IRQHandler+0x6ac>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d027      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a79      	ldr	r2, [pc, #484]	@ (8004b3c <HAL_DMA_IRQHandler+0x6b0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a77      	ldr	r2, [pc, #476]	@ (8004b40 <HAL_DMA_IRQHandler+0x6b4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a76      	ldr	r2, [pc, #472]	@ (8004b44 <HAL_DMA_IRQHandler+0x6b8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a74      	ldr	r2, [pc, #464]	@ (8004b48 <HAL_DMA_IRQHandler+0x6bc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	@ (8004b4c <HAL_DMA_IRQHandler+0x6c0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a71      	ldr	r2, [pc, #452]	@ (8004b50 <HAL_DMA_IRQHandler+0x6c4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a70      	ldr	r2, [pc, #448]	@ (8004b54 <HAL_DMA_IRQHandler+0x6c8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b58 <HAL_DMA_IRQHandler+0x6cc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10a      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x52c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e009      	b.n	80049cc <HAL_DMA_IRQHandler+0x540>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d03e      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2210      	movs	r2, #16
 80049da:	409a      	lsls	r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d024      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e01f      	b.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01b      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
 8004a1e:	e016      	b.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0208 	bic.w	r2, r2, #8
 8004a3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2220      	movs	r2, #32
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8110 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <HAL_DMA_IRQHandler+0x690>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	@ (8004b20 <HAL_DMA_IRQHandler+0x694>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a29      	ldr	r2, [pc, #164]	@ (8004b24 <HAL_DMA_IRQHandler+0x698>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a28      	ldr	r2, [pc, #160]	@ (8004b28 <HAL_DMA_IRQHandler+0x69c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a26      	ldr	r2, [pc, #152]	@ (8004b2c <HAL_DMA_IRQHandler+0x6a0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	@ (8004b30 <HAL_DMA_IRQHandler+0x6a4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <HAL_DMA_IRQHandler+0x6a8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a22      	ldr	r2, [pc, #136]	@ (8004b38 <HAL_DMA_IRQHandler+0x6ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	@ (8004b3c <HAL_DMA_IRQHandler+0x6b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_DMA_IRQHandler+0x6b4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <HAL_DMA_IRQHandler+0x6b8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <HAL_DMA_IRQHandler+0x6bc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b4c <HAL_DMA_IRQHandler+0x6c0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <HAL_DMA_IRQHandler+0x6c4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_DMA_IRQHandler+0x6c8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <HAL_DMA_IRQHandler+0x6cc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d12b      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x6d0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e02a      	b.n	8004b70 <HAL_DMA_IRQHandler+0x6e4>
 8004b1a:	bf00      	nop
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8087 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2220      	movs	r2, #32
 8004b80:	409a      	lsls	r2, r3
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d139      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0216 	bic.w	r2, r2, #22
 8004ba0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x736>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	223f      	movs	r2, #63	@ 0x3f
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 834a 	beq.w	8005290 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
          }
          return;
 8004c04:	e344      	b.n	8005290 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e027      	b.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d023      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
 8004c44:	e01e      	b.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10f      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0210 	bic.w	r2, r2, #16
 8004c62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8306 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8088 	beq.w	8004dac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7a      	ldr	r2, [pc, #488]	@ (8004e94 <HAL_DMA_IRQHandler+0xa08>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d04a      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	@ (8004e98 <HAL_DMA_IRQHandler+0xa0c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d045      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a77      	ldr	r2, [pc, #476]	@ (8004e9c <HAL_DMA_IRQHandler+0xa10>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d040      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a76      	ldr	r2, [pc, #472]	@ (8004ea0 <HAL_DMA_IRQHandler+0xa14>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d03b      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	@ (8004ea4 <HAL_DMA_IRQHandler+0xa18>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	@ (8004ea8 <HAL_DMA_IRQHandler+0xa1c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d031      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a71      	ldr	r2, [pc, #452]	@ (8004eac <HAL_DMA_IRQHandler+0xa20>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02c      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a70      	ldr	r2, [pc, #448]	@ (8004eb0 <HAL_DMA_IRQHandler+0xa24>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d027      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb4 <HAL_DMA_IRQHandler+0xa28>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6d      	ldr	r2, [pc, #436]	@ (8004eb8 <HAL_DMA_IRQHandler+0xa2c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ebc <HAL_DMA_IRQHandler+0xa30>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec0 <HAL_DMA_IRQHandler+0xa34>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a68      	ldr	r2, [pc, #416]	@ (8004ec4 <HAL_DMA_IRQHandler+0xa38>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a67      	ldr	r2, [pc, #412]	@ (8004ec8 <HAL_DMA_IRQHandler+0xa3c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_DMA_IRQHandler+0xa40>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a64      	ldr	r2, [pc, #400]	@ (8004ed0 <HAL_DMA_IRQHandler+0xa44>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x8ca>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e007      	b.n	8004d66 <HAL_DMA_IRQHandler+0x8da>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d307      	bcc.n	8004d82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f2      	bne.n	8004d66 <HAL_DMA_IRQHandler+0x8da>
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004d9a:	e003      	b.n	8004da4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8272 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
 8004dbe:	e26c      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a43      	ldr	r2, [pc, #268]	@ (8004ed4 <HAL_DMA_IRQHandler+0xa48>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a42      	ldr	r2, [pc, #264]	@ (8004ed8 <HAL_DMA_IRQHandler+0xa4c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a40      	ldr	r2, [pc, #256]	@ (8004edc <HAL_DMA_IRQHandler+0xa50>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d018      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee0 <HAL_DMA_IRQHandler+0xa54>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee4 <HAL_DMA_IRQHandler+0xa58>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee8 <HAL_DMA_IRQHandler+0xa5c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3a      	ldr	r2, [pc, #232]	@ (8004eec <HAL_DMA_IRQHandler+0xa60>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	@ (8004ef0 <HAL_DMA_IRQHandler+0xa64>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x988>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_DMA_IRQHandler+0x98a>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 823f 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80cd 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xb48>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80c7 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2204      	movs	r2, #4
 8004e50:	409a      	lsls	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d049      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8210 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7c:	e20a      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8206 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e90:	e200      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
 8004e92:	bf00      	nop
 8004e94:	40020010 	.word	0x40020010
 8004e98:	40020028 	.word	0x40020028
 8004e9c:	40020040 	.word	0x40020040
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	40020070 	.word	0x40020070
 8004ea8:	40020088 	.word	0x40020088
 8004eac:	400200a0 	.word	0x400200a0
 8004eb0:	400200b8 	.word	0x400200b8
 8004eb4:	40020410 	.word	0x40020410
 8004eb8:	40020428 	.word	0x40020428
 8004ebc:	40020440 	.word	0x40020440
 8004ec0:	40020458 	.word	0x40020458
 8004ec4:	40020470 	.word	0x40020470
 8004ec8:	40020488 	.word	0x40020488
 8004ecc:	400204a0 	.word	0x400204a0
 8004ed0:	400204b8 	.word	0x400204b8
 8004ed4:	58025408 	.word	0x58025408
 8004ed8:	5802541c 	.word	0x5802541c
 8004edc:	58025430 	.word	0x58025430
 8004ee0:	58025444 	.word	0x58025444
 8004ee4:	58025458 	.word	0x58025458
 8004ee8:	5802546c 	.word	0x5802546c
 8004eec:	58025480 	.word	0x58025480
 8004ef0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d160      	bne.n	8004fc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7f      	ldr	r2, [pc, #508]	@ (8005100 <HAL_DMA_IRQHandler+0xc74>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d04a      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8005104 <HAL_DMA_IRQHandler+0xc78>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d045      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7c      	ldr	r2, [pc, #496]	@ (8005108 <HAL_DMA_IRQHandler+0xc7c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d040      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a7a      	ldr	r2, [pc, #488]	@ (800510c <HAL_DMA_IRQHandler+0xc80>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a79      	ldr	r2, [pc, #484]	@ (8005110 <HAL_DMA_IRQHandler+0xc84>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a77      	ldr	r2, [pc, #476]	@ (8005114 <HAL_DMA_IRQHandler+0xc88>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d031      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a76      	ldr	r2, [pc, #472]	@ (8005118 <HAL_DMA_IRQHandler+0xc8c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d02c      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a74      	ldr	r2, [pc, #464]	@ (800511c <HAL_DMA_IRQHandler+0xc90>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d027      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a73      	ldr	r2, [pc, #460]	@ (8005120 <HAL_DMA_IRQHandler+0xc94>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a71      	ldr	r2, [pc, #452]	@ (8005124 <HAL_DMA_IRQHandler+0xc98>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a70      	ldr	r2, [pc, #448]	@ (8005128 <HAL_DMA_IRQHandler+0xc9c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6e      	ldr	r2, [pc, #440]	@ (800512c <HAL_DMA_IRQHandler+0xca0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8005130 <HAL_DMA_IRQHandler+0xca4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6b      	ldr	r2, [pc, #428]	@ (8005134 <HAL_DMA_IRQHandler+0xca8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005138 <HAL_DMA_IRQHandler+0xcac>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a68      	ldr	r2, [pc, #416]	@ (800513c <HAL_DMA_IRQHandler+0xcb0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0xb24>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0208 	bic.w	r2, r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e007      	b.n	8004fc0 <HAL_DMA_IRQHandler+0xb34>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8165 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd2:	e15f      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2202      	movs	r2, #2
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80c5 	beq.w	8005174 <HAL_DMA_IRQHandler+0xce8>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80bf 	beq.w	8005174 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2202      	movs	r2, #2
 8005000:	409a      	lsls	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d018      	beq.n	8005042 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 813a 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	e134      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8130 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005040:	e12a      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 8089 	bne.w	8005160 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <HAL_DMA_IRQHandler+0xc74>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a29      	ldr	r2, [pc, #164]	@ (8005104 <HAL_DMA_IRQHandler+0xc78>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a28      	ldr	r2, [pc, #160]	@ (8005108 <HAL_DMA_IRQHandler+0xc7c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	@ (800510c <HAL_DMA_IRQHandler+0xc80>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a25      	ldr	r2, [pc, #148]	@ (8005110 <HAL_DMA_IRQHandler+0xc84>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a23      	ldr	r2, [pc, #140]	@ (8005114 <HAL_DMA_IRQHandler+0xc88>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a22      	ldr	r2, [pc, #136]	@ (8005118 <HAL_DMA_IRQHandler+0xc8c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a20      	ldr	r2, [pc, #128]	@ (800511c <HAL_DMA_IRQHandler+0xc90>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <HAL_DMA_IRQHandler+0xc94>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005124 <HAL_DMA_IRQHandler+0xc98>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <HAL_DMA_IRQHandler+0xc9c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	@ (800512c <HAL_DMA_IRQHandler+0xca0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <HAL_DMA_IRQHandler+0xca4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <HAL_DMA_IRQHandler+0xca8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <HAL_DMA_IRQHandler+0xcac>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a14      	ldr	r2, [pc, #80]	@ (800513c <HAL_DMA_IRQHandler+0xcb0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d128      	bne.n	8005140 <HAL_DMA_IRQHandler+0xcb4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0214 	bic.w	r2, r2, #20
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e027      	b.n	8005150 <HAL_DMA_IRQHandler+0xcc4>
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 020a 	bic.w	r2, r2, #10
 800514e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8097 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005172:	e091      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2208      	movs	r2, #8
 800517e:	409a      	lsls	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8088 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8082 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a41      	ldr	r2, [pc, #260]	@ (80052a0 <HAL_DMA_IRQHandler+0xe14>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d04a      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3f      	ldr	r2, [pc, #252]	@ (80052a4 <HAL_DMA_IRQHandler+0xe18>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d045      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3e      	ldr	r2, [pc, #248]	@ (80052a8 <HAL_DMA_IRQHandler+0xe1c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d040      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <HAL_DMA_IRQHandler+0xe20>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d03b      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	@ (80052b0 <HAL_DMA_IRQHandler+0xe24>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d036      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a39      	ldr	r2, [pc, #228]	@ (80052b4 <HAL_DMA_IRQHandler+0xe28>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d031      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a38      	ldr	r2, [pc, #224]	@ (80052b8 <HAL_DMA_IRQHandler+0xe2c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d02c      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a36      	ldr	r2, [pc, #216]	@ (80052bc <HAL_DMA_IRQHandler+0xe30>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d027      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a35      	ldr	r2, [pc, #212]	@ (80052c0 <HAL_DMA_IRQHandler+0xe34>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d022      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a33      	ldr	r2, [pc, #204]	@ (80052c4 <HAL_DMA_IRQHandler+0xe38>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01d      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a32      	ldr	r2, [pc, #200]	@ (80052c8 <HAL_DMA_IRQHandler+0xe3c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d018      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <HAL_DMA_IRQHandler+0xe40>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2f      	ldr	r2, [pc, #188]	@ (80052d0 <HAL_DMA_IRQHandler+0xe44>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2d      	ldr	r2, [pc, #180]	@ (80052d4 <HAL_DMA_IRQHandler+0xe48>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d009      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2c      	ldr	r2, [pc, #176]	@ (80052d8 <HAL_DMA_IRQHandler+0xe4c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2a      	ldr	r2, [pc, #168]	@ (80052dc <HAL_DMA_IRQHandler+0xe50>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <HAL_DMA_IRQHandler+0xdbc>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 021c 	bic.w	r2, r2, #28
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e007      	b.n	8005258 <HAL_DMA_IRQHandler+0xdcc>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 020e 	bic.w	r2, r2, #14
 8005256:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2201      	movs	r2, #1
 8005262:	409a      	lsls	r2, r3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	e004      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005298:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800529a:	3728      	adds	r7, #40	@ 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8

080052e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7f      	ldr	r2, [pc, #508]	@ (80054fc <DMA_SetConfig+0x21c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d072      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a7d      	ldr	r2, [pc, #500]	@ (8005500 <DMA_SetConfig+0x220>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d06d      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a7c      	ldr	r2, [pc, #496]	@ (8005504 <DMA_SetConfig+0x224>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d068      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7a      	ldr	r2, [pc, #488]	@ (8005508 <DMA_SetConfig+0x228>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d063      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a79      	ldr	r2, [pc, #484]	@ (800550c <DMA_SetConfig+0x22c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d05e      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a77      	ldr	r2, [pc, #476]	@ (8005510 <DMA_SetConfig+0x230>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d059      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a76      	ldr	r2, [pc, #472]	@ (8005514 <DMA_SetConfig+0x234>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d054      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a74      	ldr	r2, [pc, #464]	@ (8005518 <DMA_SetConfig+0x238>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d04f      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a73      	ldr	r2, [pc, #460]	@ (800551c <DMA_SetConfig+0x23c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d04a      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a71      	ldr	r2, [pc, #452]	@ (8005520 <DMA_SetConfig+0x240>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d045      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a70      	ldr	r2, [pc, #448]	@ (8005524 <DMA_SetConfig+0x244>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d040      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a6e      	ldr	r2, [pc, #440]	@ (8005528 <DMA_SetConfig+0x248>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d03b      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6d      	ldr	r2, [pc, #436]	@ (800552c <DMA_SetConfig+0x24c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d036      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6b      	ldr	r2, [pc, #428]	@ (8005530 <DMA_SetConfig+0x250>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d031      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6a      	ldr	r2, [pc, #424]	@ (8005534 <DMA_SetConfig+0x254>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d02c      	beq.n	80053ea <DMA_SetConfig+0x10a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a68      	ldr	r2, [pc, #416]	@ (8005538 <DMA_SetConfig+0x258>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d027      	beq.n	80053ea <DMA_SetConfig+0x10a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a67      	ldr	r2, [pc, #412]	@ (800553c <DMA_SetConfig+0x25c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a65      	ldr	r2, [pc, #404]	@ (8005540 <DMA_SetConfig+0x260>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a64      	ldr	r2, [pc, #400]	@ (8005544 <DMA_SetConfig+0x264>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a62      	ldr	r2, [pc, #392]	@ (8005548 <DMA_SetConfig+0x268>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a61      	ldr	r2, [pc, #388]	@ (800554c <DMA_SetConfig+0x26c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5f      	ldr	r2, [pc, #380]	@ (8005550 <DMA_SetConfig+0x270>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a5e      	ldr	r2, [pc, #376]	@ (8005554 <DMA_SetConfig+0x274>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <DMA_SetConfig+0x10a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005558 <DMA_SetConfig+0x278>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <DMA_SetConfig+0x10e>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <DMA_SetConfig+0x110>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800540e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a39      	ldr	r2, [pc, #228]	@ (80054fc <DMA_SetConfig+0x21c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d04a      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <DMA_SetConfig+0x220>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d045      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a36      	ldr	r2, [pc, #216]	@ (8005504 <DMA_SetConfig+0x224>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d040      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <DMA_SetConfig+0x228>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d03b      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a33      	ldr	r2, [pc, #204]	@ (800550c <DMA_SetConfig+0x22c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d036      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a32      	ldr	r2, [pc, #200]	@ (8005510 <DMA_SetConfig+0x230>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d031      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <DMA_SetConfig+0x234>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02c      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <DMA_SetConfig+0x238>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d027      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2d      	ldr	r2, [pc, #180]	@ (800551c <DMA_SetConfig+0x23c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2c      	ldr	r2, [pc, #176]	@ (8005520 <DMA_SetConfig+0x240>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01d      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2a      	ldr	r2, [pc, #168]	@ (8005524 <DMA_SetConfig+0x244>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a29      	ldr	r2, [pc, #164]	@ (8005528 <DMA_SetConfig+0x248>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a27      	ldr	r2, [pc, #156]	@ (800552c <DMA_SetConfig+0x24c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a26      	ldr	r2, [pc, #152]	@ (8005530 <DMA_SetConfig+0x250>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <DMA_SetConfig+0x254>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <DMA_SetConfig+0x1d0>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a23      	ldr	r2, [pc, #140]	@ (8005538 <DMA_SetConfig+0x258>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <DMA_SetConfig+0x1d4>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <DMA_SetConfig+0x1d6>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d059      	beq.n	800556e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	223f      	movs	r2, #63	@ 0x3f
 80054c4:	409a      	lsls	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b40      	cmp	r3, #64	@ 0x40
 80054e8:	d138      	bne.n	800555c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054fa:	e086      	b.n	800560a <DMA_SetConfig+0x32a>
 80054fc:	40020010 	.word	0x40020010
 8005500:	40020028 	.word	0x40020028
 8005504:	40020040 	.word	0x40020040
 8005508:	40020058 	.word	0x40020058
 800550c:	40020070 	.word	0x40020070
 8005510:	40020088 	.word	0x40020088
 8005514:	400200a0 	.word	0x400200a0
 8005518:	400200b8 	.word	0x400200b8
 800551c:	40020410 	.word	0x40020410
 8005520:	40020428 	.word	0x40020428
 8005524:	40020440 	.word	0x40020440
 8005528:	40020458 	.word	0x40020458
 800552c:	40020470 	.word	0x40020470
 8005530:	40020488 	.word	0x40020488
 8005534:	400204a0 	.word	0x400204a0
 8005538:	400204b8 	.word	0x400204b8
 800553c:	58025408 	.word	0x58025408
 8005540:	5802541c 	.word	0x5802541c
 8005544:	58025430 	.word	0x58025430
 8005548:	58025444 	.word	0x58025444
 800554c:	58025458 	.word	0x58025458
 8005550:	5802546c 	.word	0x5802546c
 8005554:	58025480 	.word	0x58025480
 8005558:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
}
 800556c:	e04d      	b.n	800560a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a29      	ldr	r2, [pc, #164]	@ (8005618 <DMA_SetConfig+0x338>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <DMA_SetConfig+0x2de>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a27      	ldr	r2, [pc, #156]	@ (800561c <DMA_SetConfig+0x33c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01d      	beq.n	80055be <DMA_SetConfig+0x2de>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a26      	ldr	r2, [pc, #152]	@ (8005620 <DMA_SetConfig+0x340>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <DMA_SetConfig+0x2de>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <DMA_SetConfig+0x344>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <DMA_SetConfig+0x2de>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a23      	ldr	r2, [pc, #140]	@ (8005628 <DMA_SetConfig+0x348>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <DMA_SetConfig+0x2de>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <DMA_SetConfig+0x34c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <DMA_SetConfig+0x2de>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a20      	ldr	r2, [pc, #128]	@ (8005630 <DMA_SetConfig+0x350>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <DMA_SetConfig+0x2de>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005634 <DMA_SetConfig+0x354>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <DMA_SetConfig+0x2e2>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <DMA_SetConfig+0x2e4>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2201      	movs	r2, #1
 80055d2:	409a      	lsls	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d108      	bne.n	80055fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	60da      	str	r2, [r3, #12]
}
 80055f8:	e007      	b.n	800560a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	58025408 	.word	0x58025408
 800561c:	5802541c 	.word	0x5802541c
 8005620:	58025430 	.word	0x58025430
 8005624:	58025444 	.word	0x58025444
 8005628:	58025458 	.word	0x58025458
 800562c:	5802546c 	.word	0x5802546c
 8005630:	58025480 	.word	0x58025480
 8005634:	58025494 	.word	0x58025494

08005638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a42      	ldr	r2, [pc, #264]	@ (8005750 <DMA_CalcBaseAndBitshift+0x118>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04a      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a41      	ldr	r2, [pc, #260]	@ (8005754 <DMA_CalcBaseAndBitshift+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d045      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a3f      	ldr	r2, [pc, #252]	@ (8005758 <DMA_CalcBaseAndBitshift+0x120>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d040      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3e      	ldr	r2, [pc, #248]	@ (800575c <DMA_CalcBaseAndBitshift+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d03b      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3c      	ldr	r2, [pc, #240]	@ (8005760 <DMA_CalcBaseAndBitshift+0x128>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d036      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3b      	ldr	r2, [pc, #236]	@ (8005764 <DMA_CalcBaseAndBitshift+0x12c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d031      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a39      	ldr	r2, [pc, #228]	@ (8005768 <DMA_CalcBaseAndBitshift+0x130>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d02c      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a38      	ldr	r2, [pc, #224]	@ (800576c <DMA_CalcBaseAndBitshift+0x134>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d027      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a36      	ldr	r2, [pc, #216]	@ (8005770 <DMA_CalcBaseAndBitshift+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a35      	ldr	r2, [pc, #212]	@ (8005774 <DMA_CalcBaseAndBitshift+0x13c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d01d      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a33      	ldr	r2, [pc, #204]	@ (8005778 <DMA_CalcBaseAndBitshift+0x140>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a32      	ldr	r2, [pc, #200]	@ (800577c <DMA_CalcBaseAndBitshift+0x144>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a30      	ldr	r2, [pc, #192]	@ (8005780 <DMA_CalcBaseAndBitshift+0x148>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005784 <DMA_CalcBaseAndBitshift+0x14c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005788 <DMA_CalcBaseAndBitshift+0x150>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <DMA_CalcBaseAndBitshift+0xa8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2c      	ldr	r2, [pc, #176]	@ (800578c <DMA_CalcBaseAndBitshift+0x154>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d101      	bne.n	80056e4 <DMA_CalcBaseAndBitshift+0xac>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <DMA_CalcBaseAndBitshift+0xae>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d024      	beq.n	8005734 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	3b10      	subs	r3, #16
 80056f2:	4a27      	ldr	r2, [pc, #156]	@ (8005790 <DMA_CalcBaseAndBitshift+0x158>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	4a24      	ldr	r2, [pc, #144]	@ (8005794 <DMA_CalcBaseAndBitshift+0x15c>)
 8005704:	5cd3      	ldrb	r3, [r2, r3]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d908      	bls.n	8005724 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	4b1f      	ldr	r3, [pc, #124]	@ (8005798 <DMA_CalcBaseAndBitshift+0x160>)
 800571a:	4013      	ands	r3, r2
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	659a      	str	r2, [r3, #88]	@ 0x58
 8005722:	e00d      	b.n	8005740 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <DMA_CalcBaseAndBitshift+0x160>)
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	e005      	b.n	8005740 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020040 	.word	0x40020040
 800575c:	40020058 	.word	0x40020058
 8005760:	40020070 	.word	0x40020070
 8005764:	40020088 	.word	0x40020088
 8005768:	400200a0 	.word	0x400200a0
 800576c:	400200b8 	.word	0x400200b8
 8005770:	40020410 	.word	0x40020410
 8005774:	40020428 	.word	0x40020428
 8005778:	40020440 	.word	0x40020440
 800577c:	40020458 	.word	0x40020458
 8005780:	40020470 	.word	0x40020470
 8005784:	40020488 	.word	0x40020488
 8005788:	400204a0 	.word	0x400204a0
 800578c:	400204b8 	.word	0x400204b8
 8005790:	aaaaaaab 	.word	0xaaaaaaab
 8005794:	080133a4 	.word	0x080133a4
 8005798:	fffffc00 	.word	0xfffffc00

0800579c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d120      	bne.n	80057f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d858      	bhi.n	800586a <DMA_CheckFifoParam+0xce>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <DMA_CheckFifoParam+0x24>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	0800586b 	.word	0x0800586b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d048      	beq.n	800586e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e0:	e045      	b.n	800586e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ea:	d142      	bne.n	8005872 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057f0:	e03f      	b.n	8005872 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fa:	d123      	bne.n	8005844 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005800:	2b03      	cmp	r3, #3
 8005802:	d838      	bhi.n	8005876 <DMA_CheckFifoParam+0xda>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <DMA_CheckFifoParam+0x70>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005823 	.word	0x08005823
 8005814:	0800581d 	.word	0x0800581d
 8005818:	08005835 	.word	0x08005835
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
        break;
 8005820:	e030      	b.n	8005884 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d025      	beq.n	800587a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005832:	e022      	b.n	800587a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800583c:	d11f      	bne.n	800587e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005842:	e01c      	b.n	800587e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	2b02      	cmp	r3, #2
 800584a:	d902      	bls.n	8005852 <DMA_CheckFifoParam+0xb6>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d003      	beq.n	8005858 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005850:	e018      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
        break;
 8005856:	e015      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
    break;
 8005868:	e00b      	b.n	8005882 <DMA_CheckFifoParam+0xe6>
        break;
 800586a:	bf00      	nop
 800586c:	e00a      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        break;
 800586e:	bf00      	nop
 8005870:	e008      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        break;
 8005872:	bf00      	nop
 8005874:	e006      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        break;
 8005876:	bf00      	nop
 8005878:	e004      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        break;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
        break;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <DMA_CheckFifoParam+0xe8>
    break;
 8005882:	bf00      	nop
    }
  }

  return status;
 8005884:	7bfb      	ldrb	r3, [r7, #15]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a38      	ldr	r2, [pc, #224]	@ (8005988 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a36      	ldr	r2, [pc, #216]	@ (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01d      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a35      	ldr	r2, [pc, #212]	@ (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a33      	ldr	r2, [pc, #204]	@ (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a32      	ldr	r2, [pc, #200]	@ (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a30      	ldr	r2, [pc, #192]	@ (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2f      	ldr	r2, [pc, #188]	@ (80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	@ (80059a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01a      	beq.n	8005932 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	3b08      	subs	r3, #8
 8005904:	4a28      	ldr	r2, [pc, #160]	@ (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4b26      	ldr	r3, [pc, #152]	@ (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	461a      	mov	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a24      	ldr	r2, [pc, #144]	@ (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005920:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2201      	movs	r2, #1
 800592a:	409a      	lsls	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005930:	e024      	b.n	800597c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3b10      	subs	r3, #16
 800593a:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d806      	bhi.n	800595a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d902      	bls.n	800595a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3308      	adds	r3, #8
 8005958:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	461a      	mov	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800596c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	58025408 	.word	0x58025408
 800598c:	5802541c 	.word	0x5802541c
 8005990:	58025430 	.word	0x58025430
 8005994:	58025444 	.word	0x58025444
 8005998:	58025458 	.word	0x58025458
 800599c:	5802546c 	.word	0x5802546c
 80059a0:	58025480 	.word	0x58025480
 80059a4:	58025494 	.word	0x58025494
 80059a8:	cccccccd 	.word	0xcccccccd
 80059ac:	16009600 	.word	0x16009600
 80059b0:	58025880 	.word	0x58025880
 80059b4:	aaaaaaab 	.word	0xaaaaaaab
 80059b8:	400204b8 	.word	0x400204b8
 80059bc:	4002040f 	.word	0x4002040f
 80059c0:	10008200 	.word	0x10008200
 80059c4:	40020880 	.word	0x40020880

080059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d04a      	beq.n	8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d847      	bhi.n	8005a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d022      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a24      	ldr	r2, [pc, #144]	@ (8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d01d      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a22      	ldr	r2, [pc, #136]	@ (8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	@ (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a50:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a52:	e009      	b.n	8005a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4b14      	ldr	r3, [pc, #80]	@ (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a11      	ldr	r2, [pc, #68]	@ (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	58025408 	.word	0x58025408
 8005a84:	5802541c 	.word	0x5802541c
 8005a88:	58025430 	.word	0x58025430
 8005a8c:	58025444 	.word	0x58025444
 8005a90:	58025458 	.word	0x58025458
 8005a94:	5802546c 	.word	0x5802546c
 8005a98:	58025480 	.word	0x58025480
 8005a9c:	58025494 	.word	0x58025494
 8005aa0:	1600963f 	.word	0x1600963f
 8005aa4:	58025940 	.word	0x58025940
 8005aa8:	1000823f 	.word	0x1000823f
 8005aac:	40020940 	.word	0x40020940

08005ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	@ 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005abe:	4b89      	ldr	r3, [pc, #548]	@ (8005ce4 <HAL_GPIO_Init+0x234>)
 8005ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ac2:	e194      	b.n	8005dee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8186 	beq.w	8005de8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d005      	beq.n	8005af4 <HAL_GPIO_Init+0x44>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d130      	bne.n	8005b56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	2203      	movs	r2, #3
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0201 	and.w	r2, r3, #1
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d017      	beq.n	8005b92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d123      	bne.n	8005be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80e0 	beq.w	8005de8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c28:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce8 <HAL_GPIO_Init+0x238>)
 8005c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ce8 <HAL_GPIO_Init+0x238>)
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce8 <HAL_GPIO_Init+0x238>)
 8005c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c46:	4a29      	ldr	r2, [pc, #164]	@ (8005cec <HAL_GPIO_Init+0x23c>)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a20      	ldr	r2, [pc, #128]	@ (8005cf0 <HAL_GPIO_Init+0x240>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d052      	beq.n	8005d18 <HAL_GPIO_Init+0x268>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf4 <HAL_GPIO_Init+0x244>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d031      	beq.n	8005cde <HAL_GPIO_Init+0x22e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf8 <HAL_GPIO_Init+0x248>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02b      	beq.n	8005cda <HAL_GPIO_Init+0x22a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <HAL_GPIO_Init+0x24c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d025      	beq.n	8005cd6 <HAL_GPIO_Init+0x226>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <HAL_GPIO_Init+0x250>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01f      	beq.n	8005cd2 <HAL_GPIO_Init+0x222>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_GPIO_Init+0x254>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d019      	beq.n	8005cce <HAL_GPIO_Init+0x21e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_GPIO_Init+0x258>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_GPIO_Init+0x21a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <HAL_GPIO_Init+0x25c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00d      	beq.n	8005cc6 <HAL_GPIO_Init+0x216>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_GPIO_Init+0x260>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <HAL_GPIO_Init+0x212>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	@ (8005d14 <HAL_GPIO_Init+0x264>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_GPIO_Init+0x20e>
 8005cba:	2309      	movs	r3, #9
 8005cbc:	e02d      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e02b      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	e029      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	e027      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cca:	2306      	movs	r3, #6
 8005ccc:	e025      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cce:	2305      	movs	r3, #5
 8005cd0:	e023      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	e021      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e01f      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e01d      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e01b      	b.n	8005d1a <HAL_GPIO_Init+0x26a>
 8005ce2:	bf00      	nop
 8005ce4:	58000080 	.word	0x58000080
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	58000400 	.word	0x58000400
 8005cf0:	58020000 	.word	0x58020000
 8005cf4:	58020400 	.word	0x58020400
 8005cf8:	58020800 	.word	0x58020800
 8005cfc:	58020c00 	.word	0x58020c00
 8005d00:	58021000 	.word	0x58021000
 8005d04:	58021400 	.word	0x58021400
 8005d08:	58021800 	.word	0x58021800
 8005d0c:	58021c00 	.word	0x58021c00
 8005d10:	58022000 	.word	0x58022000
 8005d14:	58022400 	.word	0x58022400
 8005d18:	2300      	movs	r3, #0
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	f002 0203 	and.w	r2, r2, #3
 8005d20:	0092      	lsls	r2, r2, #2
 8005d22:	4093      	lsls	r3, r2
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d2a:	4938      	ldr	r1, [pc, #224]	@ (8005e0c <HAL_GPIO_Init+0x35c>)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	3302      	adds	r3, #2
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f ae63 	bne.w	8005ac4 <HAL_GPIO_Init+0x14>
  }
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	3724      	adds	r7, #36	@ 0x24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	58000400 	.word	0x58000400

08005e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e20:	787b      	ldrb	r3, [r7, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e2c:	e003      	b.n	8005e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	041a      	lsls	r2, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	619a      	str	r2, [r3, #24]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e08b      	b.n	8005f6e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fa ff8a 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	@ 0x24
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	e006      	b.n	8005ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	e007      	b.n	8005ef6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6859      	ldr	r1, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <HAL_I2C_Init+0x134>)
 8005f02:	430b      	orrs	r3, r1
 8005f04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69d9      	ldr	r1, [r3, #28]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	02008000 	.word	0x02008000

08005f7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	461a      	mov	r2, r3
 8005f88:	460b      	mov	r3, r1
 8005f8a:	817b      	strh	r3, [r7, #10]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	f040 80fd 	bne.w	8006198 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_I2C_Master_Transmit+0x30>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e0f6      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fb4:	f7fb fc6a 	bl	800188c <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2319      	movs	r3, #25
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f914 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0e1      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2221      	movs	r2, #33	@ 0x21
 8005fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	893a      	ldrh	r2, [r7, #8]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2bff      	cmp	r3, #255	@ 0xff
 8006006:	d906      	bls.n	8006016 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	22ff      	movs	r2, #255	@ 0xff
 800600c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800600e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e007      	b.n	8006026 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006020:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006024:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d024      	beq.n	8006078 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	b2db      	uxtb	r3, r3
 8006064:	3301      	adds	r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	8979      	ldrh	r1, [r7, #10]
 800606a:	4b4e      	ldr	r3, [pc, #312]	@ (80061a4 <HAL_I2C_Master_Transmit+0x228>)
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fa83 	bl	800657c <I2C_TransferConfig>
 8006076:	e066      	b.n	8006146 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	8979      	ldrh	r1, [r7, #10]
 8006080:	4b48      	ldr	r3, [pc, #288]	@ (80061a4 <HAL_I2C_Master_Transmit+0x228>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fa78 	bl	800657c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800608c:	e05b      	b.n	8006146 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	6a39      	ldr	r1, [r7, #32]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f907 	bl	80062a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e07b      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	781a      	ldrb	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d034      	beq.n	8006146 <HAL_I2C_Master_Transmit+0x1ca>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d130      	bne.n	8006146 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2180      	movs	r1, #128	@ 0x80
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f880 	bl	80061f4 <I2C_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e04d      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2bff      	cmp	r3, #255	@ 0xff
 8006106:	d90e      	bls.n	8006126 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	22ff      	movs	r2, #255	@ 0xff
 800610c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006112:	b2da      	uxtb	r2, r3
 8006114:	8979      	ldrh	r1, [r7, #10]
 8006116:	2300      	movs	r3, #0
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fa2c 	bl	800657c <I2C_TransferConfig>
 8006124:	e00f      	b.n	8006146 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	8979      	ldrh	r1, [r7, #10]
 8006138:	2300      	movs	r3, #0
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fa1b 	bl	800657c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d19e      	bne.n	800608e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	6a39      	ldr	r1, [r7, #32]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f8ed 	bl	8006334 <I2C_WaitOnSTOPFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e01a      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2220      	movs	r2, #32
 800616a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <HAL_I2C_Master_Transmit+0x22c>)
 8006178:	400b      	ands	r3, r1
 800617a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	80002000 	.word	0x80002000
 80061a8:	fe00e800 	.word	0xfe00e800

080061ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d103      	bne.n	80061ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d007      	beq.n	80061e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	619a      	str	r2, [r3, #24]
  }
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006204:	e03b      	b.n	800627e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f8d6 	bl	80063bc <I2C_IsErrorOccurred>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e041      	b.n	800629e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d02d      	beq.n	800627e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006222:	f7fb fb33 	bl	800188c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d122      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	429a      	cmp	r2, r3
 8006254:	d113      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e00f      	b.n	800629e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d0b4      	beq.n	8006206 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b2:	e033      	b.n	800631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f87f 	bl	80063bc <I2C_IsErrorOccurred>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e031      	b.n	800632c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d025      	beq.n	800631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d0:	f7fb fadc 	bl	800188c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d302      	bcc.n	80062e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d11a      	bne.n	800631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d013      	beq.n	800631c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e007      	b.n	800632c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b02      	cmp	r3, #2
 8006328:	d1c4      	bne.n	80062b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006340:	e02f      	b.n	80063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f838 	bl	80063bc <I2C_IsErrorOccurred>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e02d      	b.n	80063b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fb fa99 	bl	800188c <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11a      	bne.n	80063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b20      	cmp	r3, #32
 8006378:	d013      	beq.n	80063a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f043 0220 	orr.w	r2, r3, #32
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e007      	b.n	80063b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d1c8      	bne.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	@ 0x28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d068      	beq.n	80064ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2210      	movs	r2, #16
 80063ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063f0:	e049      	b.n	8006486 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d045      	beq.n	8006486 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063fa:	f7fb fa47 	bl	800188c <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <I2C_IsErrorOccurred+0x54>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13a      	bne.n	8006486 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006432:	d121      	bne.n	8006478 <I2C_IsErrorOccurred+0xbc>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643a:	d01d      	beq.n	8006478 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	2b20      	cmp	r3, #32
 8006440:	d01a      	beq.n	8006478 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006452:	f7fb fa1b 	bl	800188c <HAL_GetTick>
 8006456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006458:	e00e      	b.n	8006478 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800645a:	f7fb fa17 	bl	800188c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b19      	cmp	r3, #25
 8006466:	d907      	bls.n	8006478 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f043 0320 	orr.w	r3, r3, #32
 800646e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006476:	e006      	b.n	8006486 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b20      	cmp	r3, #32
 8006484:	d1e9      	bne.n	800645a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b20      	cmp	r3, #32
 8006492:	d003      	beq.n	800649c <I2C_IsErrorOccurred+0xe0>
 8006494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0aa      	beq.n	80063f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2220      	movs	r2, #32
 80064aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	f043 0308 	orr.w	r3, r3, #8
 80064f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	f043 0302 	orr.w	r3, r3, #2
 8006516:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01c      	beq.n	800656a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff fe3b 	bl	80061ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b0d      	ldr	r3, [pc, #52]	@ (8006578 <I2C_IsErrorOccurred+0x1bc>)
 8006542:	400b      	ands	r3, r1
 8006544:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800656a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800656e:	4618      	mov	r0, r3
 8006570:	3728      	adds	r7, #40	@ 0x28
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	fe00e800 	.word	0xfe00e800

0800657c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	817b      	strh	r3, [r7, #10]
 800658a:	4613      	mov	r3, r2
 800658c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800658e:	897b      	ldrh	r3, [r7, #10]
 8006590:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006594:	7a7b      	ldrb	r3, [r7, #9]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800659c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	0d5b      	lsrs	r3, r3, #21
 80065b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80065ba:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <I2C_TransferConfig+0x60>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	43db      	mvns	r3, r3
 80065c0:	ea02 0103 	and.w	r1, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	03ff63ff 	.word	0x03ff63ff

080065e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d138      	bne.n	8006668 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006600:	2302      	movs	r3, #2
 8006602:	e032      	b.n	800666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	@ 0x24
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006632:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b20      	cmp	r3, #32
 800668a:	d139      	bne.n	8006700 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006696:	2302      	movs	r3, #2
 8006698:	e033      	b.n	8006702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2224      	movs	r2, #36	@ 0x24
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af02      	add	r7, sp, #8
 8006714:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0fe      	b.n	800691e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f00a fab3 	bl	8010ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2203      	movs	r2, #3
 800673e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f006 fe03 	bl	800d352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	7c1a      	ldrb	r2, [r3, #16]
 8006754:	f88d 2000 	strb.w	r2, [sp]
 8006758:	3304      	adds	r3, #4
 800675a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800675c:	f006 fcd4 	bl	800d108 <USB_CoreInit>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0d5      	b.n	800691e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f006 fdfb 	bl	800d374 <USB_SetCurrentMode>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0c6      	b.n	800691e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
 8006794:	e04a      	b.n	800682c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3315      	adds	r3, #21
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3314      	adds	r3, #20
 80067ba:	7bfa      	ldrb	r2, [r7, #15]
 80067bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067be:	7bfa      	ldrb	r2, [r7, #15]
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	b298      	uxth	r0, r3
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	332e      	adds	r3, #46	@ 0x2e
 80067d2:	4602      	mov	r2, r0
 80067d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80067d6:	7bfa      	ldrb	r2, [r7, #15]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3318      	adds	r3, #24
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80067ea:	7bfa      	ldrb	r2, [r7, #15]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	331c      	adds	r3, #28
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067fe:	7bfa      	ldrb	r2, [r7, #15]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	3320      	adds	r3, #32
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3324      	adds	r3, #36	@ 0x24
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	3301      	adds	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	791b      	ldrb	r3, [r3, #4]
 8006830:	7bfa      	ldrb	r2, [r7, #15]
 8006832:	429a      	cmp	r2, r3
 8006834:	d3af      	bcc.n	8006796 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
 800683a:	e044      	b.n	80068c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006868:	7bfa      	ldrb	r2, [r7, #15]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800687e:	7bfa      	ldrb	r2, [r7, #15]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006894:	7bfa      	ldrb	r2, [r7, #15]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	3301      	adds	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d3b5      	bcc.n	800683c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	7c1a      	ldrb	r2, [r3, #16]
 80068d8:	f88d 2000 	strb.w	r2, [sp]
 80068dc:	3304      	adds	r3, #4
 80068de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068e0:	f006 fd94 	bl	800d40c <USB_DevInit>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e013      	b.n	800691e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7b1b      	ldrb	r3, [r3, #12]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 f96f 	bl	8007bf0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f007 fdd7 	bl	800e4ca <USB_DevDisconnect>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_PCD_Start+0x1c>
 800693e:	2302      	movs	r3, #2
 8006940:	e022      	b.n	8006988 <HAL_PCD_Start+0x62>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f006 fcde 	bl	800d330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f007 fd85 	bl	800e488 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b08d      	sub	sp, #52	@ 0x34
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f007 fe43 	bl	800e632 <USB_GetMode>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f040 84b9 	bne.w	8007326 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f007 fda7 	bl	800e50c <USB_ReadInterrupts>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 84af 	beq.w	8007324 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f007 fd94 	bl	800e50c <USB_ReadInterrupts>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d107      	bne.n	80069fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f002 0202 	and.w	r2, r2, #2
 80069fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f007 fd82 	bl	800e50c <USB_ReadInterrupts>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d161      	bne.n	8006ad6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699a      	ldr	r2, [r3, #24]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0210 	bic.w	r2, r2, #16
 8006a20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	3304      	adds	r3, #4
 8006a40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a4c:	d124      	bne.n	8006a98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d035      	beq.n	8006ac6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6a38      	ldr	r0, [r7, #32]
 8006a6e:	f007 fbb9 	bl	800e1e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a7e:	441a      	add	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a90:	441a      	add	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	615a      	str	r2, [r3, #20]
 8006a96:	e016      	b.n	8006ac6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006a9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006aa2:	d110      	bne.n	8006ac6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006aaa:	2208      	movs	r2, #8
 8006aac:	4619      	mov	r1, r3
 8006aae:	6a38      	ldr	r0, [r7, #32]
 8006ab0:	f007 fb98 	bl	800e1e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ac0:	441a      	add	r2, r3
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0210 	orr.w	r2, r2, #16
 8006ad4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f007 fd16 	bl	800e50c <USB_ReadInterrupts>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006aea:	f040 80a7 	bne.w	8006c3c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f007 fd1b 	bl	800e532 <USB_ReadDevAllOutEpInterrupt>
 8006afc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006afe:	e099      	b.n	8006c34 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 808e 	beq.w	8006c28 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f007 fd3f 	bl	800e59a <USB_ReadDevOutEPInterrupt>
 8006b1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	2301      	movs	r3, #1
 8006b38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fed1 	bl	80078e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 ffa7 	bl	8007ab4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2310      	movs	r3, #16
 8006b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d030      	beq.n	8006bee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b94:	2b80      	cmp	r3, #128	@ 0x80
 8006b96:	d109      	bne.n	8006bac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006baa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	78db      	ldrb	r3, [r3, #3]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d108      	bne.n	8006bdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f00a f996 	bl	8010f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	2302      	movs	r3, #2
 8006bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c04:	461a      	mov	r2, r3
 8006c06:	2320      	movs	r3, #32
 8006c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006c26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f47f af62 	bne.w	8006b00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f007 fc63 	bl	800e50c <USB_ReadInterrupts>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c50:	f040 80db 	bne.w	8006e0a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f007 fc84 	bl	800e566 <USB_ReadDevAllInEpInterrupt>
 8006c5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006c64:	e0cd      	b.n	8006e02 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80c2 	beq.w	8006df6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f007 fcaa 	bl	800e5d6 <USB_ReadDevInEPInterrupt>
 8006c82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d057      	beq.n	8006d3e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2201      	movs	r2, #1
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cae:	4013      	ands	r3, r2
 8006cb0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	799b      	ldrb	r3, [r3, #6]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d132      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	3320      	adds	r3, #32
 8006cdc:	6819      	ldr	r1, [r3, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4403      	add	r3, r0
 8006cec:	331c      	adds	r3, #28
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4419      	add	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4403      	add	r3, r0
 8006d00:	3320      	adds	r3, #32
 8006d02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d113      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x3a2>
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0e:	4613      	mov	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3324      	adds	r3, #36	@ 0x24
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d108      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	f007 fcb3 	bl	800e698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f00a f860 	bl	8010dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d54:	461a      	mov	r2, r3
 8006d56:	2308      	movs	r3, #8
 8006d58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	2310      	movs	r3, #16
 8006d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2340      	movs	r3, #64	@ 0x40
 8006d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d023      	beq.n	8006de4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d9e:	6a38      	ldr	r0, [r7, #32]
 8006da0:	f006 fc92 	bl	800d6c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da6:	4613      	mov	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	3310      	adds	r3, #16
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	3304      	adds	r3, #4
 8006db6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	78db      	ldrb	r3, [r3, #3]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d108      	bne.n	8006dd2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f00a f8ad 	bl	8010f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dde:	461a      	mov	r2, r3
 8006de0:	2302      	movs	r3, #2
 8006de2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fcea 	bl	80077ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	3301      	adds	r3, #1
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f47f af2e 	bne.w	8006c66 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f007 fb7c 	bl	800e50c <USB_ReadInterrupts>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e1e:	d122      	bne.n	8006e66 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d108      	bne.n	8006e50 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e46:	2100      	movs	r1, #0
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fef5 	bl	8007c38 <HAL_PCDEx_LPM_Callback>
 8006e4e:	e002      	b.n	8006e56 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f00a f84b 	bl	8010eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f007 fb4e 	bl	800e50c <USB_ReadInterrupts>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7a:	d112      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d102      	bne.n	8006e92 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f00a f807 	bl	8010ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f007 fb30 	bl	800e50c <USB_ReadInterrupts>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb6:	d121      	bne.n	8006efc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695a      	ldr	r2, [r3, #20]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006ec6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d111      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee0:	089b      	lsrs	r3, r3, #2
 8006ee2:	f003 020f 	and.w	r2, r3, #15
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006eec:	2101      	movs	r1, #1
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fea2 	bl	8007c38 <HAL_PCDEx_LPM_Callback>
 8006ef4:	e002      	b.n	8006efc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f009 ffd2 	bl	8010ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f007 fb03 	bl	800e50c <USB_ReadInterrupts>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f10:	f040 80b7 	bne.w	8007082 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2110      	movs	r1, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f006 fbca 	bl	800d6c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f34:	2300      	movs	r3, #0
 8006f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f38:	e046      	b.n	8006fc8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	461a      	mov	r2, r3
 8006f48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d3b2      	bcc.n	8006f3a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006fe6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7bdb      	ldrb	r3, [r3, #15]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d016      	beq.n	800701e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007000:	f043 030b 	orr.w	r3, r3, #11
 8007004:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007016:	f043 030b 	orr.w	r3, r3, #11
 800701a:	6453      	str	r3, [r2, #68]	@ 0x44
 800701c:	e015      	b.n	800704a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800702c:	4619      	mov	r1, r3
 800702e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007032:	4313      	orrs	r3, r2
 8007034:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007044:	f043 030b 	orr.w	r3, r3, #11
 8007048:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007058:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800705c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800706c:	461a      	mov	r2, r3
 800706e:	f007 fb13 	bl	800e698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695a      	ldr	r2, [r3, #20]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f007 fa40 	bl	800e50c <USB_ReadInterrupts>
 800708c:	4603      	mov	r3, r0
 800708e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007096:	d123      	bne.n	80070e0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f007 fad7 	bl	800e650 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f006 fb87 	bl	800d7ba <USB_GetDevSpeed>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681c      	ldr	r4, [r3, #0]
 80070b8:	f001 fe58 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 80070bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070c2:	461a      	mov	r2, r3
 80070c4:	4620      	mov	r0, r4
 80070c6:	f006 f891 	bl	800d1ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f009 febf 	bl	8010e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695a      	ldr	r2, [r3, #20]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80070de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f007 fa11 	bl	800e50c <USB_ReadInterrupts>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d10a      	bne.n	800710a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f009 fe9c 	bl	8010e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695a      	ldr	r2, [r3, #20]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f002 0208 	and.w	r2, r2, #8
 8007108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f007 f9fc 	bl	800e50c <USB_ReadInterrupts>
 8007114:	4603      	mov	r3, r0
 8007116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711a:	2b80      	cmp	r3, #128	@ 0x80
 800711c:	d123      	bne.n	8007166 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800712a:	2301      	movs	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
 800712e:	e014      	b.n	800715a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007134:	4613      	mov	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	440b      	add	r3, r1
 800713e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	b2db      	uxtb	r3, r3
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fb0a 	bl	8007768 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	3301      	adds	r3, #1
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	791b      	ldrb	r3, [r3, #4]
 800715e:	461a      	mov	r2, r3
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	4293      	cmp	r3, r2
 8007164:	d3e4      	bcc.n	8007130 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f007 f9ce 	bl	800e50c <USB_ReadInterrupts>
 8007170:	4603      	mov	r3, r0
 8007172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800717a:	d13c      	bne.n	80071f6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800717c:	2301      	movs	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007180:	e02b      	b.n	80071da <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3318      	adds	r3, #24
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d115      	bne.n	80071d4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80071a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da12      	bge.n	80071d4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	3317      	adds	r3, #23
 80071be:	2201      	movs	r2, #1
 80071c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 faca 	bl	8007768 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	3301      	adds	r3, #1
 80071d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	791b      	ldrb	r3, [r3, #4]
 80071de:	461a      	mov	r2, r3
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d3cd      	bcc.n	8007182 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695a      	ldr	r2, [r3, #20]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80071f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f007 f986 	bl	800e50c <USB_ReadInterrupts>
 8007200:	4603      	mov	r3, r0
 8007202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007206:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800720a:	d156      	bne.n	80072ba <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800720c:	2301      	movs	r3, #1
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007210:	e045      	b.n	800729e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d12e      	bne.n	8007298 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800723a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800723c:	2b00      	cmp	r3, #0
 800723e:	da2b      	bge.n	8007298 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	0c1a      	lsrs	r2, r3, #16
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800724a:	4053      	eors	r3, r2
 800724c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007250:	2b00      	cmp	r3, #0
 8007252:	d121      	bne.n	8007298 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007266:	2201      	movs	r2, #1
 8007268:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007294:	6053      	str	r3, [r2, #4]
            break;
 8007296:	e008      	b.n	80072aa <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	3301      	adds	r3, #1
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	461a      	mov	r2, r3
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d3b3      	bcc.n	8007212 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80072b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f007 f924 	bl	800e50c <USB_ReadInterrupts>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ce:	d10a      	bne.n	80072e6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f009 fe3d 	bl	8010f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80072e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f007 f90e 	bl	800e50c <USB_ReadInterrupts>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d115      	bne.n	8007326 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f009 fe2d 	bl	8010f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6859      	ldr	r1, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	e000      	b.n	8007326 <HAL_PCD_IRQHandler+0x996>
      return;
 8007324:	bf00      	nop
    }
  }
}
 8007326:	3734      	adds	r7, #52	@ 0x34
 8007328:	46bd      	mov	sp, r7
 800732a:	bd90      	pop	{r4, r7, pc}

0800732c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_PCD_SetAddress+0x1a>
 8007342:	2302      	movs	r3, #2
 8007344:	e012      	b.n	800736c <HAL_PCD_SetAddress+0x40>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f007 f86d 	bl	800e43c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	4603      	mov	r3, r0
 8007384:	70fb      	strb	r3, [r7, #3]
 8007386:	460b      	mov	r3, r1
 8007388:	803b      	strh	r3, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da0f      	bge.n	80073ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	3310      	adds	r3, #16
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	3304      	adds	r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	705a      	strb	r2, [r3, #1]
 80073b8:	e00f      	b.n	80073da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 020f 	and.w	r2, r3, #15
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	3304      	adds	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80073e6:	883b      	ldrh	r3, [r7, #0]
 80073e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	78ba      	ldrb	r2, [r7, #2]
 80073f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007408:	78bb      	ldrb	r3, [r7, #2]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d102      	bne.n	8007414 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_PCD_EP_Open+0xae>
 800741e:	2302      	movs	r3, #2
 8007420:	e00e      	b.n	8007440 <HAL_PCD_EP_Open+0xcc>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	4618      	mov	r0, r3
 8007432:	f006 f9e7 	bl	800d804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800743e:	7afb      	ldrb	r3, [r7, #11]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007458:	2b00      	cmp	r3, #0
 800745a:	da0f      	bge.n	800747c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 020f 	and.w	r2, r3, #15
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	3310      	adds	r3, #16
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	705a      	strb	r2, [r3, #1]
 800747a:	e00f      	b.n	800749c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 020f 	and.w	r2, r3, #15
 8007482:	4613      	mov	r3, r2
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	3304      	adds	r3, #4
 8007494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_PCD_EP_Close+0x6e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e00e      	b.n	80074d4 <HAL_PCD_EP_Close+0x8c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f006 fa25 	bl	800d914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	460b      	mov	r3, r1
 80074ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	3304      	adds	r3, #4
 8007504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2200      	movs	r2, #0
 8007516:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2200      	movs	r2, #0
 800751c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	b2da      	uxtb	r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	799b      	ldrb	r3, [r3, #6]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	799b      	ldrb	r3, [r3, #6]
 8007540:	461a      	mov	r2, r3
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	f006 fac2 	bl	800dacc <USB_EPStartXfer>

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	f003 020f 	and.w	r2, r3, #15
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007574:	681b      	ldr	r3, [r3, #0]
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	460b      	mov	r3, r1
 8007590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	3310      	adds	r3, #16
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	3304      	adds	r3, #4
 80075a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2200      	movs	r2, #0
 80075ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2201      	movs	r2, #1
 80075c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	799b      	ldrb	r3, [r3, #6]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d102      	bne.n	80075dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	799b      	ldrb	r3, [r3, #6]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	f006 fa70 	bl	800dacc <USB_EPStartXfer>

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7912      	ldrb	r2, [r2, #4]
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e04f      	b.n	80076b4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	da0f      	bge.n	800763c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	f003 020f 	and.w	r2, r3, #15
 8007622:	4613      	mov	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	3310      	adds	r3, #16
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	705a      	strb	r2, [r3, #1]
 800763a:	e00d      	b.n	8007658 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4613      	mov	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	3304      	adds	r3, #4
 8007650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	b2da      	uxtb	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_PCD_EP_SetStall+0x82>
 8007674:	2302      	movs	r3, #2
 8007676:	e01d      	b.n	80076b4 <HAL_PCD_EP_SetStall+0xbe>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68f9      	ldr	r1, [r7, #12]
 8007686:	4618      	mov	r0, r3
 8007688:	f006 fe04 	bl	800e294 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	7999      	ldrb	r1, [r3, #6]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80076a4:	461a      	mov	r2, r3
 80076a6:	f006 fff7 	bl	800e698 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	7912      	ldrb	r2, [r2, #4]
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e042      	b.n	8007760 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da0f      	bge.n	8007702 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	f003 020f 	and.w	r2, r3, #15
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	3310      	adds	r3, #16
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	705a      	strb	r2, [r3, #1]
 8007700:	e00f      	b.n	8007722 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	3304      	adds	r3, #4
 800771a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	b2da      	uxtb	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_PCD_EP_ClrStall+0x86>
 800773e:	2302      	movs	r3, #2
 8007740:	e00e      	b.n	8007760 <HAL_PCD_EP_ClrStall+0xa4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	4618      	mov	r0, r3
 8007752:	f006 fe0d 	bl	800e370 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da0c      	bge.n	8007796 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	f003 020f 	and.w	r2, r3, #15
 8007782:	4613      	mov	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e00c      	b.n	80077b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	f003 020f 	and.w	r2, r3, #15
 800779c:	4613      	mov	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	3304      	adds	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68f9      	ldr	r1, [r7, #12]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f006 fc2c 	bl	800e014 <USB_EPStopXfer>
 80077bc:	4603      	mov	r3, r0
 80077be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b08a      	sub	sp, #40	@ 0x28
 80077ce:	af02      	add	r7, sp, #8
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	3310      	adds	r3, #16
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	3304      	adds	r3, #4
 80077f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	695a      	ldr	r2, [r3, #20]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d901      	bls.n	8007802 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e06b      	b.n	80078da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	429a      	cmp	r2, r3
 8007816:	d902      	bls.n	800781e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	3303      	adds	r3, #3
 8007822:	089b      	lsrs	r3, r3, #2
 8007824:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007826:	e02a      	b.n	800787e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	429a      	cmp	r2, r3
 800783c:	d902      	bls.n	8007844 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3303      	adds	r3, #3
 8007848:	089b      	lsrs	r3, r3, #2
 800784a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68d9      	ldr	r1, [r3, #12]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	4603      	mov	r3, r0
 8007860:	6978      	ldr	r0, [r7, #20]
 8007862:	f006 fc81 	bl	800e168 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	695a      	ldr	r2, [r3, #20]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	429a      	cmp	r2, r3
 8007892:	d809      	bhi.n	80078a8 <PCD_WriteEmptyTxFifo+0xde>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	695a      	ldr	r2, [r3, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800789c:	429a      	cmp	r2, r3
 800789e:	d203      	bcs.n	80078a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1bf      	bne.n	8007828 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d811      	bhi.n	80078d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	2201      	movs	r2, #1
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	6939      	ldr	r1, [r7, #16]
 80078d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d4:	4013      	ands	r3, r2
 80078d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	333c      	adds	r3, #60	@ 0x3c
 80078fc:	3304      	adds	r3, #4
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	799b      	ldrb	r3, [r3, #6]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d17b      	bne.n	8007a12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	d015      	beq.n	8007950 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4a61      	ldr	r2, [pc, #388]	@ (8007aac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	f240 80b9 	bls.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80b3 	beq.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800794c:	6093      	str	r3, [r2, #8]
 800794e:	e0a7      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	2320      	movs	r3, #32
 800796a:	6093      	str	r3, [r2, #8]
 800796c:	e098      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	f040 8093 	bne.w	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	4a4b      	ldr	r2, [pc, #300]	@ (8007aac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d90f      	bls.n	80079a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00a      	beq.n	80079a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799e:	6093      	str	r3, [r2, #8]
 80079a0:	e07e      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4613      	mov	r3, r2
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	3304      	adds	r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1a      	ldr	r2, [r3, #32]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	0159      	lsls	r1, r3, #5
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	440b      	add	r3, r1
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d114      	bne.n	8007a04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079ec:	461a      	mov	r2, r3
 80079ee:	2101      	movs	r1, #1
 80079f0:	f006 fe52 	bl	800e698 <USB_EP0_OutStart>
 80079f4:	e006      	b.n	8007a04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f009 f9dc 	bl	8010dc8 <HAL_PCD_DataOutStageCallback>
 8007a10:	e046      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	4a26      	ldr	r2, [pc, #152]	@ (8007ab0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d124      	bne.n	8007a64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	461a      	mov	r2, r3
 8007a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a36:	6093      	str	r3, [r2, #8]
 8007a38:	e032      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	2320      	movs	r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f009 f9b3 	bl	8010dc8 <HAL_PCD_DataOutStageCallback>
 8007a62:	e01d      	b.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d114      	bne.n	8007a94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2100      	movs	r1, #0
 8007a90:	f006 fe02 	bl	800e698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f009 f994 	bl	8010dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	4f54300a 	.word	0x4f54300a
 8007ab0:	4f54310a 	.word	0x4f54310a

08007ab4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	333c      	adds	r3, #60	@ 0x3c
 8007acc:	3304      	adds	r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <PCD_EP_OutSetupPacket_int+0x88>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d90e      	bls.n	8007b08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b00:	461a      	mov	r2, r3
 8007b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f009 f94b 	bl	8010da4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	@ (8007b3c <PCD_EP_OutSetupPacket_int+0x88>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d90c      	bls.n	8007b30 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	799b      	ldrb	r3, [r3, #6]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d108      	bne.n	8007b30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	f006 fdb4 	bl	800e698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	4f54300a 	.word	0x4f54300a

08007b40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d107      	bne.n	8007b6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b5e:	883b      	ldrh	r3, [r7, #0]
 8007b60:	0419      	lsls	r1, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b6c:	e028      	b.n	8007bc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4413      	add	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	e00d      	b.n	8007b9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	3340      	adds	r3, #64	@ 0x40
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	7bfa      	ldrb	r2, [r7, #15]
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d3ec      	bcc.n	8007b82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ba8:	883b      	ldrh	r3, [r7, #0]
 8007baa:	0418      	lsls	r0, r3, #16
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	4302      	orrs	r2, r0
 8007bb8:	3340      	adds	r3, #64	@ 0x40
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	887a      	ldrh	r2, [r7, #2]
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c1e:	4b05      	ldr	r3, [pc, #20]	@ (8007c34 <HAL_PCDEx_ActivateLPM+0x44>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	10000003 	.word	0x10000003

08007c38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c58:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d00a      	beq.n	8007c7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c64:	4b16      	ldr	r3, [pc, #88]	@ (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e01f      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e01d      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c7a:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f023 0207 	bic.w	r2, r3, #7
 8007c82:	490f      	ldr	r1, [pc, #60]	@ (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c8a:	f7f9 fdff 	bl	800188c <HAL_GetTick>
 8007c8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c90:	e009      	b.n	8007ca6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c92:	f7f9 fdfb 	bl	800188c <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ca0:	d901      	bls.n	8007ca6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e007      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ca6:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb2:	d1ee      	bne.n	8007c92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	58024800 	.word	0x58024800

08007cc4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007cc8:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4a04      	ldr	r2, [pc, #16]	@ (8007ce0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cd2:	60d3      	str	r3, [r2, #12]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	58024800 	.word	0x58024800

08007ce4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cec:	f7f9 fdce 	bl	800188c <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e05f      	b.n	8007dbc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7f9 f9f5 	bl	80010f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d0e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f85a 	bl	8007dcc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	021a      	lsls	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2120      	movs	r1, #32
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f852 	bl	8007de8 <QSPI_WaitFlagStateUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d135      	bne.n	8007dba <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc4 <HAL_QSPI_Init+0xe0>)
 8007d56:	4013      	ands	r3, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6852      	ldr	r2, [r2, #4]
 8007d5c:	0611      	lsls	r1, r2, #24
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68d2      	ldr	r2, [r2, #12]
 8007d62:	4311      	orrs	r1, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	69d2      	ldr	r2, [r2, #28]
 8007d68:	4311      	orrs	r1, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6a12      	ldr	r2, [r2, #32]
 8007d6e:	4311      	orrs	r1, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	430b      	orrs	r3, r1
 8007d76:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	4b12      	ldr	r3, [pc, #72]	@ (8007dc8 <HAL_QSPI_Init+0xe4>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6912      	ldr	r2, [r2, #16]
 8007d86:	0411      	lsls	r1, r2, #16
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6952      	ldr	r2, [r2, #20]
 8007d8c:	4311      	orrs	r1, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6992      	ldr	r2, [r2, #24]
 8007d92:	4311      	orrs	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	00ffff2f 	.word	0x00ffff2f
 8007dc8:	ffe0f8fe 	.word	0xffe0f8fe

08007dcc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007df8:	e01a      	b.n	8007e30 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d016      	beq.n	8007e30 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e02:	f7f9 fd43 	bl	800188c <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d302      	bcc.n	8007e18 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	f043 0201 	orr.w	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e00e      	b.n	8007e4e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d1d6      	bne.n	8007dfa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08c      	sub	sp, #48	@ 0x30
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f000 bc48 	b.w	80086fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8088 	beq.w	8007f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e7a:	4b99      	ldr	r3, [pc, #612]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e84:	4b96      	ldr	r3, [pc, #600]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8c:	2b10      	cmp	r3, #16
 8007e8e:	d007      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x48>
 8007e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e92:	2b18      	cmp	r3, #24
 8007e94:	d111      	bne.n	8007eba <HAL_RCC_OscConfig+0x62>
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d10c      	bne.n	8007eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d06d      	beq.n	8007f88 <HAL_RCC_OscConfig+0x130>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d169      	bne.n	8007f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f000 bc21 	b.w	80086fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x7a>
 8007ec4:	4b86      	ldr	r3, [pc, #536]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a85      	ldr	r2, [pc, #532]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	e02e      	b.n	8007f30 <HAL_RCC_OscConfig+0xd8>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x9c>
 8007eda:	4b81      	ldr	r3, [pc, #516]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a80      	ldr	r2, [pc, #512]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a7d      	ldr	r2, [pc, #500]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	e01d      	b.n	8007f30 <HAL_RCC_OscConfig+0xd8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCC_OscConfig+0xc0>
 8007efe:	4b78      	ldr	r3, [pc, #480]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a77      	ldr	r2, [pc, #476]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	4b75      	ldr	r3, [pc, #468]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a74      	ldr	r2, [pc, #464]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e00b      	b.n	8007f30 <HAL_RCC_OscConfig+0xd8>
 8007f18:	4b71      	ldr	r3, [pc, #452]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a70      	ldr	r2, [pc, #448]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4b6e      	ldr	r3, [pc, #440]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a6d      	ldr	r2, [pc, #436]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d013      	beq.n	8007f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7f9 fca8 	bl	800188c <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f40:	f7f9 fca4 	bl	800188c <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	@ 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e3d4      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f52:	4b63      	ldr	r3, [pc, #396]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCC_OscConfig+0xe8>
 8007f5e:	e014      	b.n	8007f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f60:	f7f9 fc94 	bl	800188c <HAL_GetTick>
 8007f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f68:	f7f9 fc90 	bl	800188c <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b64      	cmp	r3, #100	@ 0x64
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e3c0      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f7a:	4b59      	ldr	r3, [pc, #356]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f0      	bne.n	8007f68 <HAL_RCC_OscConfig+0x110>
 8007f86:	e000      	b.n	8007f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80ca 	beq.w	800812c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f98:	4b51      	ldr	r3, [pc, #324]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <HAL_RCC_OscConfig+0x166>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2b18      	cmp	r3, #24
 8007fb2:	d156      	bne.n	8008062 <HAL_RCC_OscConfig+0x20a>
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d151      	bne.n	8008062 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fbe:	4b48      	ldr	r3, [pc, #288]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x17e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e392      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fd6:	4b42      	ldr	r3, [pc, #264]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f023 0219 	bic.w	r2, r3, #25
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	493f      	ldr	r1, [pc, #252]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe8:	f7f9 fc50 	bl	800188c <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff0:	f7f9 fc4c 	bl	800188c <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e37c      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008002:	4b37      	ldr	r3, [pc, #220]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800e:	f7f9 fc6d 	bl	80018ec <HAL_GetREVID>
 8008012:	4603      	mov	r3, r0
 8008014:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008018:	4293      	cmp	r3, r2
 800801a:	d817      	bhi.n	800804c <HAL_RCC_OscConfig+0x1f4>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d108      	bne.n	8008036 <HAL_RCC_OscConfig+0x1de>
 8008024:	4b2e      	ldr	r3, [pc, #184]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800802c:	4a2c      	ldr	r2, [pc, #176]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 800802e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008032:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008034:	e07a      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008036:	4b2a      	ldr	r3, [pc, #168]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	031b      	lsls	r3, r3, #12
 8008044:	4926      	ldr	r1, [pc, #152]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008046:	4313      	orrs	r3, r2
 8008048:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800804a:	e06f      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804c:	4b24      	ldr	r3, [pc, #144]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	061b      	lsls	r3, r3, #24
 800805a:	4921      	ldr	r1, [pc, #132]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 800805c:	4313      	orrs	r3, r2
 800805e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008060:	e064      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d047      	beq.n	80080fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800806a:	4b1d      	ldr	r3, [pc, #116]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f023 0219 	bic.w	r2, r3, #25
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	491a      	ldr	r1, [pc, #104]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008078:	4313      	orrs	r3, r2
 800807a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7f9 fc06 	bl	800188c <HAL_GetTick>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008084:	f7f9 fc02 	bl	800188c <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e332      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008096:	4b12      	ldr	r3, [pc, #72]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a2:	f7f9 fc23 	bl	80018ec <HAL_GetREVID>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d819      	bhi.n	80080e4 <HAL_RCC_OscConfig+0x28c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b40      	cmp	r3, #64	@ 0x40
 80080b6:	d108      	bne.n	80080ca <HAL_RCC_OscConfig+0x272>
 80080b8:	4b09      	ldr	r3, [pc, #36]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80080c0:	4a07      	ldr	r2, [pc, #28]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c6:	6053      	str	r3, [r2, #4]
 80080c8:	e030      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	031b      	lsls	r3, r3, #12
 80080d8:	4901      	ldr	r1, [pc, #4]	@ (80080e0 <HAL_RCC_OscConfig+0x288>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	604b      	str	r3, [r1, #4]
 80080de:	e025      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
 80080e0:	58024400 	.word	0x58024400
 80080e4:	4b9a      	ldr	r3, [pc, #616]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	061b      	lsls	r3, r3, #24
 80080f2:	4997      	ldr	r1, [pc, #604]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	e018      	b.n	800812c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080fa:	4b95      	ldr	r3, [pc, #596]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a94      	ldr	r2, [pc, #592]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7f9 fbc1 	bl	800188c <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810e:	f7f9 fbbd 	bl	800188c <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e2ed      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008120:	4b8b      	ldr	r3, [pc, #556]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80a9 	beq.w	800828c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800813a:	4b85      	ldr	r3, [pc, #532]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008142:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008144:	4b82      	ldr	r3, [pc, #520]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d007      	beq.n	8008160 <HAL_RCC_OscConfig+0x308>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b18      	cmp	r3, #24
 8008154:	d13a      	bne.n	80081cc <HAL_RCC_OscConfig+0x374>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d135      	bne.n	80081cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008160:	4b7b      	ldr	r3, [pc, #492]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_RCC_OscConfig+0x320>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b80      	cmp	r3, #128	@ 0x80
 8008172:	d001      	beq.n	8008178 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e2c1      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008178:	f7f9 fbb8 	bl	80018ec <HAL_GetREVID>
 800817c:	4603      	mov	r3, r0
 800817e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008182:	4293      	cmp	r3, r2
 8008184:	d817      	bhi.n	80081b6 <HAL_RCC_OscConfig+0x35e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	2b20      	cmp	r3, #32
 800818c:	d108      	bne.n	80081a0 <HAL_RCC_OscConfig+0x348>
 800818e:	4b70      	ldr	r3, [pc, #448]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008196:	4a6e      	ldr	r2, [pc, #440]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800819c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800819e:	e075      	b.n	800828c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	069b      	lsls	r3, r3, #26
 80081ae:	4968      	ldr	r1, [pc, #416]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081b4:	e06a      	b.n	800828c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081b6:	4b66      	ldr	r3, [pc, #408]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	061b      	lsls	r3, r3, #24
 80081c4:	4962      	ldr	r1, [pc, #392]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081ca:	e05f      	b.n	800828c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d042      	beq.n	800825a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7f9 fb54 	bl	800188c <HAL_GetTick>
 80081e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081e8:	f7f9 fb50 	bl	800188c <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e280      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081fa:	4b55      	ldr	r3, [pc, #340]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008206:	f7f9 fb71 	bl	80018ec <HAL_GetREVID>
 800820a:	4603      	mov	r3, r0
 800820c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008210:	4293      	cmp	r3, r2
 8008212:	d817      	bhi.n	8008244 <HAL_RCC_OscConfig+0x3ec>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	2b20      	cmp	r3, #32
 800821a:	d108      	bne.n	800822e <HAL_RCC_OscConfig+0x3d6>
 800821c:	4b4c      	ldr	r3, [pc, #304]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008224:	4a4a      	ldr	r2, [pc, #296]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800822a:	6053      	str	r3, [r2, #4]
 800822c:	e02e      	b.n	800828c <HAL_RCC_OscConfig+0x434>
 800822e:	4b48      	ldr	r3, [pc, #288]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	069b      	lsls	r3, r3, #26
 800823c:	4944      	ldr	r1, [pc, #272]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 800823e:	4313      	orrs	r3, r2
 8008240:	604b      	str	r3, [r1, #4]
 8008242:	e023      	b.n	800828c <HAL_RCC_OscConfig+0x434>
 8008244:	4b42      	ldr	r3, [pc, #264]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	493f      	ldr	r1, [pc, #252]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008254:	4313      	orrs	r3, r2
 8008256:	60cb      	str	r3, [r1, #12]
 8008258:	e018      	b.n	800828c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800825a:	4b3d      	ldr	r3, [pc, #244]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3c      	ldr	r2, [pc, #240]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008266:	f7f9 fb11 	bl	800188c <HAL_GetTick>
 800826a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800826e:	f7f9 fb0d 	bl	800188c <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e23d      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008280:	4b33      	ldr	r3, [pc, #204]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1f0      	bne.n	800826e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d036      	beq.n	8008306 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d019      	beq.n	80082d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7f9 faee 	bl	800188c <HAL_GetTick>
 80082b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b4:	f7f9 faea 	bl	800188c <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e21a      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082c6:	4b22      	ldr	r3, [pc, #136]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCC_OscConfig+0x45c>
 80082d2:	e018      	b.n	8008306 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e0:	f7f9 fad4 	bl	800188c <HAL_GetTick>
 80082e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082e8:	f7f9 fad0 	bl	800188c <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e200      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082fa:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 80082fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f0      	bne.n	80082e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d039      	beq.n	8008386 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01c      	beq.n	8008354 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800831a:	4b0d      	ldr	r3, [pc, #52]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a0c      	ldr	r2, [pc, #48]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008326:	f7f9 fab1 	bl	800188c <HAL_GetTick>
 800832a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800832e:	f7f9 faad 	bl	800188c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e1dd      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008340:	4b03      	ldr	r3, [pc, #12]	@ (8008350 <HAL_RCC_OscConfig+0x4f8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0f0      	beq.n	800832e <HAL_RCC_OscConfig+0x4d6>
 800834c:	e01b      	b.n	8008386 <HAL_RCC_OscConfig+0x52e>
 800834e:	bf00      	nop
 8008350:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008354:	4b9b      	ldr	r3, [pc, #620]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a9a      	ldr	r2, [pc, #616]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800835a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800835e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008360:	f7f9 fa94 	bl	800188c <HAL_GetTick>
 8008364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008368:	f7f9 fa90 	bl	800188c <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e1c0      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800837a:	4b92      	ldr	r3, [pc, #584]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f0      	bne.n	8008368 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8081 	beq.w	8008496 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008394:	4b8c      	ldr	r3, [pc, #560]	@ (80085c8 <HAL_RCC_OscConfig+0x770>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a8b      	ldr	r2, [pc, #556]	@ (80085c8 <HAL_RCC_OscConfig+0x770>)
 800839a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800839e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083a0:	f7f9 fa74 	bl	800188c <HAL_GetTick>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a6:	e008      	b.n	80083ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a8:	f7f9 fa70 	bl	800188c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b64      	cmp	r3, #100	@ 0x64
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e1a0      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083ba:	4b83      	ldr	r3, [pc, #524]	@ (80085c8 <HAL_RCC_OscConfig+0x770>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0f0      	beq.n	80083a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d106      	bne.n	80083dc <HAL_RCC_OscConfig+0x584>
 80083ce:	4b7d      	ldr	r3, [pc, #500]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	4a7c      	ldr	r2, [pc, #496]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083da:	e02d      	b.n	8008438 <HAL_RCC_OscConfig+0x5e0>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10c      	bne.n	80083fe <HAL_RCC_OscConfig+0x5a6>
 80083e4:	4b77      	ldr	r3, [pc, #476]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e8:	4a76      	ldr	r2, [pc, #472]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80083f0:	4b74      	ldr	r3, [pc, #464]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f4:	4a73      	ldr	r2, [pc, #460]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80083f6:	f023 0304 	bic.w	r3, r3, #4
 80083fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80083fc:	e01c      	b.n	8008438 <HAL_RCC_OscConfig+0x5e0>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b05      	cmp	r3, #5
 8008404:	d10c      	bne.n	8008420 <HAL_RCC_OscConfig+0x5c8>
 8008406:	4b6f      	ldr	r3, [pc, #444]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840a:	4a6e      	ldr	r2, [pc, #440]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800840c:	f043 0304 	orr.w	r3, r3, #4
 8008410:	6713      	str	r3, [r2, #112]	@ 0x70
 8008412:	4b6c      	ldr	r3, [pc, #432]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008416:	4a6b      	ldr	r2, [pc, #428]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6713      	str	r3, [r2, #112]	@ 0x70
 800841e:	e00b      	b.n	8008438 <HAL_RCC_OscConfig+0x5e0>
 8008420:	4b68      	ldr	r3, [pc, #416]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008424:	4a67      	ldr	r2, [pc, #412]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008426:	f023 0301 	bic.w	r3, r3, #1
 800842a:	6713      	str	r3, [r2, #112]	@ 0x70
 800842c:	4b65      	ldr	r3, [pc, #404]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800842e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008430:	4a64      	ldr	r2, [pc, #400]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008432:	f023 0304 	bic.w	r3, r3, #4
 8008436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d015      	beq.n	800846c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008440:	f7f9 fa24 	bl	800188c <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008446:	e00a      	b.n	800845e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008448:	f7f9 fa20 	bl	800188c <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e14e      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800845e:	4b59      	ldr	r3, [pc, #356]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0ee      	beq.n	8008448 <HAL_RCC_OscConfig+0x5f0>
 800846a:	e014      	b.n	8008496 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800846c:	f7f9 fa0e 	bl	800188c <HAL_GetTick>
 8008470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008472:	e00a      	b.n	800848a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008474:	f7f9 fa0a 	bl	800188c <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008482:	4293      	cmp	r3, r2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e138      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800848a:	4b4e      	ldr	r3, [pc, #312]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1ee      	bne.n	8008474 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 812d 	beq.w	80086fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80084a0:	4b48      	ldr	r3, [pc, #288]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084a8:	2b18      	cmp	r3, #24
 80084aa:	f000 80bd 	beq.w	8008628 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	f040 809e 	bne.w	80085f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b8:	4b42      	ldr	r3, [pc, #264]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a41      	ldr	r2, [pc, #260]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80084be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c4:	f7f9 f9e2 	bl	800188c <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084cc:	f7f9 f9de 	bl	800188c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e10e      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084de:	4b39      	ldr	r3, [pc, #228]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084ea:	4b36      	ldr	r3, [pc, #216]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084ee:	4b37      	ldr	r3, [pc, #220]	@ (80085cc <HAL_RCC_OscConfig+0x774>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084fa:	0112      	lsls	r2, r2, #4
 80084fc:	430a      	orrs	r2, r1
 80084fe:	4931      	ldr	r1, [pc, #196]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008500:	4313      	orrs	r3, r2
 8008502:	628b      	str	r3, [r1, #40]	@ 0x28
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008508:	3b01      	subs	r3, #1
 800850a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008512:	3b01      	subs	r3, #1
 8008514:	025b      	lsls	r3, r3, #9
 8008516:	b29b      	uxth	r3, r3
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851e:	3b01      	subs	r3, #1
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	3b01      	subs	r3, #1
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008534:	4923      	ldr	r1, [pc, #140]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008536:	4313      	orrs	r3, r2
 8008538:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800853a:	4b22      	ldr	r3, [pc, #136]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	4a21      	ldr	r2, [pc, #132]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008546:	4b1f      	ldr	r3, [pc, #124]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800854a:	4b21      	ldr	r3, [pc, #132]	@ (80085d0 <HAL_RCC_OscConfig+0x778>)
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	491b      	ldr	r1, [pc, #108]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008556:	4313      	orrs	r3, r2
 8008558:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800855a:	4b1a      	ldr	r3, [pc, #104]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	f023 020c 	bic.w	r2, r3, #12
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	4917      	ldr	r1, [pc, #92]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008568:	4313      	orrs	r3, r2
 800856a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800856c:	4b15      	ldr	r3, [pc, #84]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008570:	f023 0202 	bic.w	r2, r3, #2
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008578:	4912      	ldr	r1, [pc, #72]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800857e:	4b11      	ldr	r3, [pc, #68]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008582:	4a10      	ldr	r2, [pc, #64]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858a:	4b0e      	ldr	r3, [pc, #56]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	4a0d      	ldr	r2, [pc, #52]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008596:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	4a0a      	ldr	r2, [pc, #40]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 800859c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80085a2:	4b08      	ldr	r3, [pc, #32]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a6:	4a07      	ldr	r2, [pc, #28]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085ae:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a04      	ldr	r2, [pc, #16]	@ (80085c4 <HAL_RCC_OscConfig+0x76c>)
 80085b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ba:	f7f9 f967 	bl	800188c <HAL_GetTick>
 80085be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085c0:	e011      	b.n	80085e6 <HAL_RCC_OscConfig+0x78e>
 80085c2:	bf00      	nop
 80085c4:	58024400 	.word	0x58024400
 80085c8:	58024800 	.word	0x58024800
 80085cc:	fffffc0c 	.word	0xfffffc0c
 80085d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085d4:	f7f9 f95a 	bl	800188c <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e08a      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085e6:	4b47      	ldr	r3, [pc, #284]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0x77c>
 80085f2:	e082      	b.n	80086fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085f4:	4b43      	ldr	r3, [pc, #268]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a42      	ldr	r2, [pc, #264]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80085fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008600:	f7f9 f944 	bl	800188c <HAL_GetTick>
 8008604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008606:	e008      	b.n	800861a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008608:	f7f9 f940 	bl	800188c <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e070      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800861a:	4b3a      	ldr	r3, [pc, #232]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f0      	bne.n	8008608 <HAL_RCC_OscConfig+0x7b0>
 8008626:	e068      	b.n	80086fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008628:	4b36      	ldr	r3, [pc, #216]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800862e:	4b35      	ldr	r3, [pc, #212]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008632:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008638:	2b01      	cmp	r3, #1
 800863a:	d031      	beq.n	80086a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f003 0203 	and.w	r2, r3, #3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008646:	429a      	cmp	r2, r3
 8008648:	d12a      	bne.n	80086a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	091b      	lsrs	r3, r3, #4
 800864e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008656:	429a      	cmp	r2, r3
 8008658:	d122      	bne.n	80086a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008664:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008666:	429a      	cmp	r2, r3
 8008668:	d11a      	bne.n	80086a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	0a5b      	lsrs	r3, r3, #9
 800866e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008676:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008678:	429a      	cmp	r2, r3
 800867a:	d111      	bne.n	80086a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	0c1b      	lsrs	r3, r3, #16
 8008680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800868a:	429a      	cmp	r2, r3
 800868c:	d108      	bne.n	80086a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	0e1b      	lsrs	r3, r3, #24
 8008692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800869c:	429a      	cmp	r2, r3
 800869e:	d001      	beq.n	80086a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e02b      	b.n	80086fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80086a4:	4b17      	ldr	r3, [pc, #92]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a8:	08db      	lsrs	r3, r3, #3
 80086aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d01f      	beq.n	80086fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	4a11      	ldr	r2, [pc, #68]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086c6:	f7f9 f8e1 	bl	800188c <HAL_GetTick>
 80086ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80086cc:	bf00      	nop
 80086ce:	f7f9 f8dd 	bl	800188c <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d0f9      	beq.n	80086ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086da:	4b0a      	ldr	r3, [pc, #40]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086de:	4b0a      	ldr	r3, [pc, #40]	@ (8008708 <HAL_RCC_OscConfig+0x8b0>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086e6:	00d2      	lsls	r2, r2, #3
 80086e8:	4906      	ldr	r1, [pc, #24]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80086ee:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f2:	4a04      	ldr	r2, [pc, #16]	@ (8008704 <HAL_RCC_OscConfig+0x8ac>)
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3730      	adds	r7, #48	@ 0x30
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	58024400 	.word	0x58024400
 8008708:	ffff0007 	.word	0xffff0007

0800870c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e19c      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008720:	4b8a      	ldr	r3, [pc, #552]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d910      	bls.n	8008750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872e:	4b87      	ldr	r3, [pc, #540]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f023 020f 	bic.w	r2, r3, #15
 8008736:	4985      	ldr	r1, [pc, #532]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	4b83      	ldr	r3, [pc, #524]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d001      	beq.n	8008750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e184      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d010      	beq.n	800877e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	4b7b      	ldr	r3, [pc, #492]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008768:	429a      	cmp	r2, r3
 800876a:	d908      	bls.n	800877e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800876c:	4b78      	ldr	r3, [pc, #480]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	4975      	ldr	r1, [pc, #468]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800877a:	4313      	orrs	r3, r2
 800877c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	4b70      	ldr	r3, [pc, #448]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008796:	429a      	cmp	r2, r3
 8008798:	d908      	bls.n	80087ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800879a:	4b6d      	ldr	r3, [pc, #436]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	496a      	ldr	r1, [pc, #424]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d010      	beq.n	80087da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699a      	ldr	r2, [r3, #24]
 80087bc:	4b64      	ldr	r3, [pc, #400]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d908      	bls.n	80087da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087c8:	4b61      	ldr	r3, [pc, #388]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	495e      	ldr	r1, [pc, #376]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69da      	ldr	r2, [r3, #28]
 80087ea:	4b59      	ldr	r3, [pc, #356]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d908      	bls.n	8008808 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087f6:	4b56      	ldr	r3, [pc, #344]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	4953      	ldr	r1, [pc, #332]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008804:	4313      	orrs	r3, r2
 8008806:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	4b4d      	ldr	r3, [pc, #308]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	429a      	cmp	r2, r3
 8008822:	d908      	bls.n	8008836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008824:	4b4a      	ldr	r3, [pc, #296]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f023 020f 	bic.w	r2, r3, #15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4947      	ldr	r1, [pc, #284]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008832:	4313      	orrs	r3, r2
 8008834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d055      	beq.n	80088ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008842:	4b43      	ldr	r3, [pc, #268]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4940      	ldr	r1, [pc, #256]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008850:	4313      	orrs	r3, r2
 8008852:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d107      	bne.n	800886c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800885c:	4b3c      	ldr	r3, [pc, #240]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d121      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0f6      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b03      	cmp	r3, #3
 8008872:	d107      	bne.n	8008884 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008874:	4b36      	ldr	r3, [pc, #216]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d115      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0ea      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d107      	bne.n	800889c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800888c:	4b30      	ldr	r3, [pc, #192]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0de      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800889c:	4b2c      	ldr	r3, [pc, #176]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0d6      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088ac:	4b28      	ldr	r3, [pc, #160]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f023 0207 	bic.w	r2, r3, #7
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4925      	ldr	r1, [pc, #148]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088be:	f7f8 ffe5 	bl	800188c <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088c4:	e00a      	b.n	80088dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c6:	f7f8 ffe1 	bl	800188c <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0be      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1eb      	bne.n	80088c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d010      	beq.n	800891c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	4b14      	ldr	r3, [pc, #80]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	429a      	cmp	r2, r3
 8008908:	d208      	bcs.n	800891c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800890a:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f023 020f 	bic.w	r2, r3, #15
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	490e      	ldr	r1, [pc, #56]	@ (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008918:	4313      	orrs	r3, r2
 800891a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800891c:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d214      	bcs.n	8008954 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892a:	4b08      	ldr	r3, [pc, #32]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f023 020f 	bic.w	r2, r3, #15
 8008932:	4906      	ldr	r1, [pc, #24]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	4313      	orrs	r3, r2
 8008938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800893a:	4b04      	ldr	r3, [pc, #16]	@ (800894c <HAL_RCC_ClockConfig+0x240>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d005      	beq.n	8008954 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e086      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
 800894c:	52002000 	.word	0x52002000
 8008950:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	4b3f      	ldr	r3, [pc, #252]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800896c:	429a      	cmp	r2, r3
 800896e:	d208      	bcs.n	8008982 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008970:	4b3c      	ldr	r3, [pc, #240]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4939      	ldr	r1, [pc, #228]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 800897e:	4313      	orrs	r3, r2
 8008980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	4b34      	ldr	r3, [pc, #208]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800899a:	429a      	cmp	r2, r3
 800899c:	d208      	bcs.n	80089b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800899e:	4b31      	ldr	r3, [pc, #196]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	492e      	ldr	r1, [pc, #184]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699a      	ldr	r2, [r3, #24]
 80089c0:	4b28      	ldr	r3, [pc, #160]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d208      	bcs.n	80089de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089cc:	4b25      	ldr	r3, [pc, #148]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	4922      	ldr	r1, [pc, #136]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d010      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d208      	bcs.n	8008a0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4917      	ldr	r1, [pc, #92]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a0c:	f000 f834 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008a10:	4602      	mov	r2, r0
 8008a12:	4b14      	ldr	r3, [pc, #80]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	0a1b      	lsrs	r3, r3, #8
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	4912      	ldr	r1, [pc, #72]	@ (8008a68 <HAL_RCC_ClockConfig+0x35c>)
 8008a1e:	5ccb      	ldrb	r3, [r1, r3]
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	4a0d      	ldr	r2, [pc, #52]	@ (8008a68 <HAL_RCC_ClockConfig+0x35c>)
 8008a34:	5cd3      	ldrb	r3, [r2, r3]
 8008a36:	f003 031f 	and.w	r3, r3, #31
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a40:	4a0a      	ldr	r2, [pc, #40]	@ (8008a6c <HAL_RCC_ClockConfig+0x360>)
 8008a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a44:	4a0a      	ldr	r2, [pc, #40]	@ (8008a70 <HAL_RCC_ClockConfig+0x364>)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <HAL_RCC_ClockConfig+0x368>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f8 fc36 	bl	80012c0 <HAL_InitTick>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	58024400 	.word	0x58024400
 8008a68:	08013394 	.word	0x08013394
 8008a6c:	24000004 	.word	0x24000004
 8008a70:	24000000 	.word	0x24000000
 8008a74:	24000008 	.word	0x24000008

08008a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b089      	sub	sp, #36	@ 0x24
 8008a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a7e:	4bb3      	ldr	r3, [pc, #716]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a86:	2b18      	cmp	r3, #24
 8008a88:	f200 8155 	bhi.w	8008d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008d37 	.word	0x08008d37
 8008a9c:	08008d37 	.word	0x08008d37
 8008aa0:	08008d37 	.word	0x08008d37
 8008aa4:	08008d37 	.word	0x08008d37
 8008aa8:	08008d37 	.word	0x08008d37
 8008aac:	08008d37 	.word	0x08008d37
 8008ab0:	08008d37 	.word	0x08008d37
 8008ab4:	08008b1f 	.word	0x08008b1f
 8008ab8:	08008d37 	.word	0x08008d37
 8008abc:	08008d37 	.word	0x08008d37
 8008ac0:	08008d37 	.word	0x08008d37
 8008ac4:	08008d37 	.word	0x08008d37
 8008ac8:	08008d37 	.word	0x08008d37
 8008acc:	08008d37 	.word	0x08008d37
 8008ad0:	08008d37 	.word	0x08008d37
 8008ad4:	08008b25 	.word	0x08008b25
 8008ad8:	08008d37 	.word	0x08008d37
 8008adc:	08008d37 	.word	0x08008d37
 8008ae0:	08008d37 	.word	0x08008d37
 8008ae4:	08008d37 	.word	0x08008d37
 8008ae8:	08008d37 	.word	0x08008d37
 8008aec:	08008d37 	.word	0x08008d37
 8008af0:	08008d37 	.word	0x08008d37
 8008af4:	08008b2b 	.word	0x08008b2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af8:	4b94      	ldr	r3, [pc, #592]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b04:	4b91      	ldr	r3, [pc, #580]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	08db      	lsrs	r3, r3, #3
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	4a90      	ldr	r2, [pc, #576]	@ (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b16:	e111      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b18:	4b8d      	ldr	r3, [pc, #564]	@ (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b1a:	61bb      	str	r3, [r7, #24]
      break;
 8008b1c:	e10e      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b20:	61bb      	str	r3, [r7, #24]
      break;
 8008b22:	e10b      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008b24:	4b8c      	ldr	r3, [pc, #560]	@ (8008d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b26:	61bb      	str	r3, [r7, #24]
      break;
 8008b28:	e108      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b2a:	4b88      	ldr	r3, [pc, #544]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008b34:	4b85      	ldr	r3, [pc, #532]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b40:	4b82      	ldr	r3, [pc, #520]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b4a:	4b80      	ldr	r3, [pc, #512]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4e:	08db      	lsrs	r3, r3, #3
 8008b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	fb02 f303 	mul.w	r3, r2, r3
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80e1 	beq.w	8008d30 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	f000 8083 	beq.w	8008c7c <HAL_RCC_GetSysClockFreq+0x204>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	f200 80a1 	bhi.w	8008cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_RCC_GetSysClockFreq+0x114>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d056      	beq.n	8008c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b8a:	e099      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02d      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b98:	4b6c      	ldr	r3, [pc, #432]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b62      	ldr	r3, [pc, #392]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008bf2:	e087      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b51      	ldr	r3, [pc, #324]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c36:	e065      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b40      	ldr	r3, [pc, #256]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c7a:	e043      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cbe:	e021      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d04:	4b11      	ldr	r3, [pc, #68]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d08:	0a5b      	lsrs	r3, r3, #9
 8008d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d0e:	3301      	adds	r3, #1
 8008d10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d28:	ee17 3a90 	vmov	r3, s15
 8008d2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008d2e:	e005      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
      break;
 8008d34:	e002      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d38:	61bb      	str	r3, [r7, #24]
      break;
 8008d3a:	bf00      	nop
  }

  return sysclockfreq;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3724      	adds	r7, #36	@ 0x24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	03d09000 	.word	0x03d09000
 8008d54:	003d0900 	.word	0x003d0900
 8008d58:	017d7840 	.word	0x017d7840
 8008d5c:	46000000 	.word	0x46000000
 8008d60:	4c742400 	.word	0x4c742400
 8008d64:	4a742400 	.word	0x4a742400
 8008d68:	4bbebc20 	.word	0x4bbebc20

08008d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d72:	f7ff fe81 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b10      	ldr	r3, [pc, #64]	@ (8008dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	0a1b      	lsrs	r3, r3, #8
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	490f      	ldr	r1, [pc, #60]	@ (8008dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d84:	5ccb      	ldrb	r3, [r1, r3]
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d90:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	4a09      	ldr	r2, [pc, #36]	@ (8008dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d9a:	5cd3      	ldrb	r3, [r2, r3]
 8008d9c:	f003 031f 	and.w	r3, r3, #31
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	fa22 f303 	lsr.w	r3, r2, r3
 8008da6:	4a07      	ldr	r2, [pc, #28]	@ (8008dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008daa:	4a07      	ldr	r2, [pc, #28]	@ (8008dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008db0:	4b04      	ldr	r3, [pc, #16]	@ (8008dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008db2:	681b      	ldr	r3, [r3, #0]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	08013394 	.word	0x08013394
 8008dc4:	24000004 	.word	0x24000004
 8008dc8:	24000000 	.word	0x24000000

08008dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008dd0:	f7ff ffcc 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	091b      	lsrs	r3, r3, #4
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	4904      	ldr	r1, [pc, #16]	@ (8008df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008de2:	5ccb      	ldrb	r3, [r1, r3]
 8008de4:	f003 031f 	and.w	r3, r3, #31
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	58024400 	.word	0x58024400
 8008df4:	08013394 	.word	0x08013394

08008df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dfc:	f7ff ffb6 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8008e00:	4602      	mov	r2, r0
 8008e02:	4b06      	ldr	r3, [pc, #24]	@ (8008e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	4904      	ldr	r1, [pc, #16]	@ (8008e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e0e:	5ccb      	ldrb	r3, [r1, r3]
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	08013394 	.word	0x08013394

08008e24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	223f      	movs	r2, #63	@ 0x3f
 8008e32:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f003 0207 	and.w	r2, r3, #7
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008e40:	4b17      	ldr	r3, [pc, #92]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008e4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008e58:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008e64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008e70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008e7c:	4b08      	ldr	r3, [pc, #32]	@ (8008ea0 <HAL_RCC_GetClockConfig+0x7c>)
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <HAL_RCC_GetClockConfig+0x80>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 020f 	and.w	r2, r3, #15
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	52002000 	.word	0x52002000

08008ea8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eac:	b0ca      	sub	sp, #296	@ 0x128
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ecc:	2500      	movs	r5, #0
 8008ece:	ea54 0305 	orrs.w	r3, r4, r5
 8008ed2:	d049      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008eda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ede:	d02f      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ee0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ee4:	d828      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eea:	d01a      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008eec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ef0:	d822      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008efa:	d007      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008efc:	e01c      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efe:	4bb8      	ldr	r3, [pc, #736]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	4ab7      	ldr	r2, [pc, #732]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f0a:	e01a      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f10:	3308      	adds	r3, #8
 8008f12:	2102      	movs	r1, #2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 fb61 	bl	800b5dc <RCCEx_PLL2_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f20:	e00f      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	3328      	adds	r3, #40	@ 0x28
 8008f28:	2102      	movs	r1, #2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 fc08 	bl	800b740 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f36:	e004      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f3e:	e000      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f4a:	4ba5      	ldr	r3, [pc, #660]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f58:	4aa1      	ldr	r2, [pc, #644]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f5e:	e003      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f74:	f04f 0900 	mov.w	r9, #0
 8008f78:	ea58 0309 	orrs.w	r3, r8, r9
 8008f7c:	d047      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d82a      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fa5 	.word	0x08008fa5
 8008f94:	08008fb3 	.word	0x08008fb3
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fe7 	.word	0x08008fe7
 8008fa0:	08008fe7 	.word	0x08008fe7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	4a8d      	ldr	r2, [pc, #564]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fb0:	e01a      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f002 fb0e 	bl	800b5dc <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc6:	e00f      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fcc:	3328      	adds	r3, #40	@ 0x28
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 fbb5 	bl	800b740 <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fdc:	e004      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ff0:	4b7b      	ldr	r3, [pc, #492]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff4:	f023 0107 	bic.w	r1, r3, #7
 8008ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffe:	4a78      	ldr	r2, [pc, #480]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009000:	430b      	orrs	r3, r1
 8009002:	6513      	str	r3, [r2, #80]	@ 0x50
 8009004:	e003      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800900a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800901a:	f04f 0b00 	mov.w	fp, #0
 800901e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009022:	d04c      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800902a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902e:	d030      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009034:	d829      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009036:	2bc0      	cmp	r3, #192	@ 0xc0
 8009038:	d02d      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800903a:	2bc0      	cmp	r3, #192	@ 0xc0
 800903c:	d825      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d018      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009042:	2b80      	cmp	r3, #128	@ 0x80
 8009044:	d821      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800904a:	2b40      	cmp	r3, #64	@ 0x40
 800904c:	d007      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800904e:	e01c      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009050:	4b63      	ldr	r3, [pc, #396]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009054:	4a62      	ldr	r2, [pc, #392]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800905a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800905c:	e01c      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800905e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009062:	3308      	adds	r3, #8
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f002 fab8 	bl	800b5dc <RCCEx_PLL2_Config>
 800906c:	4603      	mov	r3, r0
 800906e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009072:	e011      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009078:	3328      	adds	r3, #40	@ 0x28
 800907a:	2100      	movs	r1, #0
 800907c:	4618      	mov	r0, r3
 800907e:	f002 fb5f 	bl	800b740 <RCCEx_PLL3_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009088:	e006      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009090:	e002      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009092:	bf00      	nop
 8009094:	e000      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090a0:	4b4f      	ldr	r3, [pc, #316]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ae:	4a4c      	ldr	r2, [pc, #304]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090b0:	430b      	orrs	r3, r1
 80090b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80090b4:	e003      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80090ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80090d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80090d8:	460b      	mov	r3, r1
 80090da:	4313      	orrs	r3, r2
 80090dc:	d053      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090ea:	d035      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80090ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80090f0:	d82e      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090f6:	d031      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090fc:	d828      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009102:	d01a      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009108:	d822      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800910e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009112:	d007      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009114:	e01c      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009116:	4b32      	ldr	r3, [pc, #200]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	4a31      	ldr	r2, [pc, #196]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800911c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009120:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009122:	e01c      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009128:	3308      	adds	r3, #8
 800912a:	2100      	movs	r1, #0
 800912c:	4618      	mov	r0, r3
 800912e:	f002 fa55 	bl	800b5dc <RCCEx_PLL2_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009138:	e011      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	3328      	adds	r3, #40	@ 0x28
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f002 fafc 	bl	800b740 <RCCEx_PLL3_Config>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914e:	e006      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009156:	e002      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009158:	bf00      	nop
 800915a:	e000      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800915c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009166:	4b1e      	ldr	r3, [pc, #120]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800916a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009176:	4a1a      	ldr	r2, [pc, #104]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009178:	430b      	orrs	r3, r1
 800917a:	6593      	str	r3, [r2, #88]	@ 0x58
 800917c:	e003      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009192:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009196:	2300      	movs	r3, #0
 8009198:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800919c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80091a0:	460b      	mov	r3, r1
 80091a2:	4313      	orrs	r3, r2
 80091a4:	d056      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091b2:	d038      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80091b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091b8:	d831      	bhi.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091be:	d034      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80091c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80091c4:	d82b      	bhi.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ca:	d01d      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80091cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091d0:	d825      	bhi.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d006      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80091d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091da:	d00a      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80091dc:	e01f      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e4:	4ba2      	ldr	r3, [pc, #648]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e8:	4aa1      	ldr	r2, [pc, #644]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091f0:	e01c      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f6:	3308      	adds	r3, #8
 80091f8:	2100      	movs	r1, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f002 f9ee 	bl	800b5dc <RCCEx_PLL2_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009206:	e011      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	3328      	adds	r3, #40	@ 0x28
 800920e:	2100      	movs	r1, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f002 fa95 	bl	800b740 <RCCEx_PLL3_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800921c:	e006      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009224:	e002      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009226:	bf00      	nop
 8009228:	e000      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800922a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009234:	4b8e      	ldr	r3, [pc, #568]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009238:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009240:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009244:	4a8a      	ldr	r2, [pc, #552]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009246:	430b      	orrs	r3, r1
 8009248:	6593      	str	r3, [r2, #88]	@ 0x58
 800924a:	e003      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009264:	2300      	movs	r3, #0
 8009266:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800926a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800926e:	460b      	mov	r3, r1
 8009270:	4313      	orrs	r3, r2
 8009272:	d03a      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800927a:	2b30      	cmp	r3, #48	@ 0x30
 800927c:	d01f      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800927e:	2b30      	cmp	r3, #48	@ 0x30
 8009280:	d819      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009282:	2b20      	cmp	r3, #32
 8009284:	d00c      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009286:	2b20      	cmp	r3, #32
 8009288:	d815      	bhi.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800928e:	2b10      	cmp	r3, #16
 8009290:	d111      	bne.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009292:	4b77      	ldr	r3, [pc, #476]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	4a76      	ldr	r2, [pc, #472]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800929c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800929e:	e011      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a4:	3308      	adds	r3, #8
 80092a6:	2102      	movs	r1, #2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f002 f997 	bl	800b5dc <RCCEx_PLL2_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092b4:	e006      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092bc:	e002      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092be:	bf00      	nop
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80092c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80092cc:	4b68      	ldr	r3, [pc, #416]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80092d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092da:	4a65      	ldr	r2, [pc, #404]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092dc:	430b      	orrs	r3, r1
 80092de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80092ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80092f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092fa:	2300      	movs	r3, #0
 80092fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009300:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009304:	460b      	mov	r3, r1
 8009306:	4313      	orrs	r3, r2
 8009308:	d051      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009314:	d035      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800931a:	d82e      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800931c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009320:	d031      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009322:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009326:	d828      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800932c:	d01a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800932e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009332:	d822      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800933c:	d007      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800933e:	e01c      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009340:	4b4b      	ldr	r3, [pc, #300]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009344:	4a4a      	ldr	r2, [pc, #296]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800934a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800934c:	e01c      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800934e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009352:	3308      	adds	r3, #8
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f002 f940 	bl	800b5dc <RCCEx_PLL2_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009362:	e011      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009368:	3328      	adds	r3, #40	@ 0x28
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f002 f9e7 	bl	800b740 <RCCEx_PLL3_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009378:	e006      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009380:	e002      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009382:	bf00      	nop
 8009384:	e000      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009390:	4b37      	ldr	r3, [pc, #220]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009394:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939e:	4a34      	ldr	r2, [pc, #208]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80093a4:	e003      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80093ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80093be:	2300      	movs	r3, #0
 80093c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80093c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80093c8:	460b      	mov	r3, r1
 80093ca:	4313      	orrs	r3, r2
 80093cc:	d056      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093d8:	d033      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80093da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093de:	d82c      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093e4:	d02f      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80093e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093ea:	d826      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093f0:	d02b      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80093f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093f6:	d820      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093fc:	d012      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009402:	d81a      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d022      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800940c:	d115      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	3308      	adds	r3, #8
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f002 f8e0 	bl	800b5dc <RCCEx_PLL2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009422:	e015      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009428:	3328      	adds	r3, #40	@ 0x28
 800942a:	2101      	movs	r1, #1
 800942c:	4618      	mov	r0, r3
 800942e:	f002 f987 	bl	800b740 <RCCEx_PLL3_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009438:	e00a      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009440:	e006      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009442:	bf00      	nop
 8009444:	e004      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800944e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10d      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800945a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009466:	4a02      	ldr	r2, [pc, #8]	@ (8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009468:	430b      	orrs	r3, r1
 800946a:	6513      	str	r3, [r2, #80]	@ 0x50
 800946c:	e006      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800946e:	bf00      	nop
 8009470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800947c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800948c:	2300      	movs	r3, #0
 800948e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009492:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009496:	460b      	mov	r3, r1
 8009498:	4313      	orrs	r3, r2
 800949a:	d055      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094a8:	d033      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80094aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ae:	d82c      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b4:	d02f      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80094b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ba:	d826      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094c0:	d02b      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80094c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80094c6:	d820      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094cc:	d012      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80094ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d2:	d81a      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d022      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094dc:	d115      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e2:	3308      	adds	r3, #8
 80094e4:	2101      	movs	r1, #1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 f878 	bl	800b5dc <RCCEx_PLL2_Config>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094f2:	e015      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f8:	3328      	adds	r3, #40	@ 0x28
 80094fa:	2101      	movs	r1, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f002 f91f 	bl	800b740 <RCCEx_PLL3_Config>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009508:	e00a      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009510:	e006      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009512:	bf00      	nop
 8009514:	e004      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009516:	bf00      	nop
 8009518:	e002      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800951a:	bf00      	nop
 800951c:	e000      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800951e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10b      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009528:	4ba3      	ldr	r3, [pc, #652]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800952a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009538:	4a9f      	ldr	r2, [pc, #636]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800953a:	430b      	orrs	r3, r1
 800953c:	6593      	str	r3, [r2, #88]	@ 0x58
 800953e:	e003      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009558:	2300      	movs	r3, #0
 800955a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800955e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009562:	460b      	mov	r3, r1
 8009564:	4313      	orrs	r3, r2
 8009566:	d037      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009572:	d00e      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009578:	d816      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d018      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800957e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009582:	d111      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009584:	4b8c      	ldr	r3, [pc, #560]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	4a8b      	ldr	r2, [pc, #556]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800958a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009590:	e00f      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009596:	3308      	adds	r3, #8
 8009598:	2101      	movs	r1, #1
 800959a:	4618      	mov	r0, r3
 800959c:	f002 f81e 	bl	800b5dc <RCCEx_PLL2_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ae:	e000      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80095b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095ba:	4b7f      	ldr	r3, [pc, #508]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c8:	4a7b      	ldr	r2, [pc, #492]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ca:	430b      	orrs	r3, r1
 80095cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80095ce:	e003      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80095e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80095ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d039      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d81c      	bhi.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009602:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009645 	.word	0x08009645
 800960c:	08009619 	.word	0x08009619
 8009610:	08009627 	.word	0x08009627
 8009614:	08009645 	.word	0x08009645
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009618:	4b67      	ldr	r3, [pc, #412]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a66      	ldr	r2, [pc, #408]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009624:	e00f      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	3308      	adds	r3, #8
 800962c:	2102      	movs	r1, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 ffd4 	bl	800b5dc <RCCEx_PLL2_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800964e:	4b5a      	ldr	r3, [pc, #360]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009652:	f023 0103 	bic.w	r1, r3, #3
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800965c:	4a56      	ldr	r2, [pc, #344]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800965e:	430b      	orrs	r3, r1
 8009660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009662:	e003      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800966c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009682:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009686:	460b      	mov	r3, r1
 8009688:	4313      	orrs	r3, r2
 800968a:	f000 809f 	beq.w	80097cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800968e:	4b4b      	ldr	r3, [pc, #300]	@ (80097bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a4a      	ldr	r2, [pc, #296]	@ (80097bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009698:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800969a:	f7f8 f8f7 	bl	800188c <HAL_GetTick>
 800969e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a2:	e00b      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a4:	f7f8 f8f2 	bl	800188c <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b64      	cmp	r3, #100	@ 0x64
 80096b2:	d903      	bls.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096ba:	e005      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096bc:	4b3f      	ldr	r3, [pc, #252]	@ (80097bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0ed      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80096c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d179      	bne.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096d0:	4b39      	ldr	r3, [pc, #228]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096dc:	4053      	eors	r3, r2
 80096de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d015      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096e6:	4b34      	ldr	r3, [pc, #208]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096f2:	4b31      	ldr	r3, [pc, #196]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f6:	4a30      	ldr	r2, [pc, #192]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096fe:	4b2e      	ldr	r3, [pc, #184]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009702:	4a2d      	ldr	r2, [pc, #180]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009708:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800970a:	4a2b      	ldr	r2, [pc, #172]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800970c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009710:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800971a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971e:	d118      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009720:	f7f8 f8b4 	bl	800188c <HAL_GetTick>
 8009724:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009728:	e00d      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800972a:	f7f8 f8af 	bl	800188c <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	f241 3388 	movw	r3, #5000	@ 0x1388
 800973a:	429a      	cmp	r2, r3
 800973c:	d903      	bls.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009744:	e005      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009746:	4b1c      	ldr	r3, [pc, #112]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800974a:	f003 0302 	and.w	r3, r3, #2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0eb      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009756:	2b00      	cmp	r3, #0
 8009758:	d129      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800976a:	d10e      	bne.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800976c:	4b12      	ldr	r3, [pc, #72]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009778:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800977c:	091a      	lsrs	r2, r3, #4
 800977e:	4b10      	ldr	r3, [pc, #64]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009780:	4013      	ands	r3, r2
 8009782:	4a0d      	ldr	r2, [pc, #52]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6113      	str	r3, [r2, #16]
 8009788:	e005      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800978a:	4b0b      	ldr	r3, [pc, #44]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	4a0a      	ldr	r2, [pc, #40]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009790:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009794:	6113      	str	r3, [r2, #16]
 8009796:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009798:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a6:	4a04      	ldr	r2, [pc, #16]	@ (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80097ac:	e00e      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80097b6:	e009      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80097b8:	58024400 	.word	0x58024400
 80097bc:	58024800 	.word	0x58024800
 80097c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f002 0301 	and.w	r3, r2, #1
 80097d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097dc:	2300      	movs	r3, #0
 80097de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f000 8089 	beq.w	8009900 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80097ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f4:	2b28      	cmp	r3, #40	@ 0x28
 80097f6:	d86b      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	080098d9 	.word	0x080098d9
 8009804:	080098d1 	.word	0x080098d1
 8009808:	080098d1 	.word	0x080098d1
 800980c:	080098d1 	.word	0x080098d1
 8009810:	080098d1 	.word	0x080098d1
 8009814:	080098d1 	.word	0x080098d1
 8009818:	080098d1 	.word	0x080098d1
 800981c:	080098d1 	.word	0x080098d1
 8009820:	080098a5 	.word	0x080098a5
 8009824:	080098d1 	.word	0x080098d1
 8009828:	080098d1 	.word	0x080098d1
 800982c:	080098d1 	.word	0x080098d1
 8009830:	080098d1 	.word	0x080098d1
 8009834:	080098d1 	.word	0x080098d1
 8009838:	080098d1 	.word	0x080098d1
 800983c:	080098d1 	.word	0x080098d1
 8009840:	080098bb 	.word	0x080098bb
 8009844:	080098d1 	.word	0x080098d1
 8009848:	080098d1 	.word	0x080098d1
 800984c:	080098d1 	.word	0x080098d1
 8009850:	080098d1 	.word	0x080098d1
 8009854:	080098d1 	.word	0x080098d1
 8009858:	080098d1 	.word	0x080098d1
 800985c:	080098d1 	.word	0x080098d1
 8009860:	080098d9 	.word	0x080098d9
 8009864:	080098d1 	.word	0x080098d1
 8009868:	080098d1 	.word	0x080098d1
 800986c:	080098d1 	.word	0x080098d1
 8009870:	080098d1 	.word	0x080098d1
 8009874:	080098d1 	.word	0x080098d1
 8009878:	080098d1 	.word	0x080098d1
 800987c:	080098d1 	.word	0x080098d1
 8009880:	080098d9 	.word	0x080098d9
 8009884:	080098d1 	.word	0x080098d1
 8009888:	080098d1 	.word	0x080098d1
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098d1 	.word	0x080098d1
 8009894:	080098d1 	.word	0x080098d1
 8009898:	080098d1 	.word	0x080098d1
 800989c:	080098d1 	.word	0x080098d1
 80098a0:	080098d9 	.word	0x080098d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a8:	3308      	adds	r3, #8
 80098aa:	2101      	movs	r1, #1
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 fe95 	bl	800b5dc <RCCEx_PLL2_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098b8:	e00f      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098be:	3328      	adds	r3, #40	@ 0x28
 80098c0:	2101      	movs	r1, #1
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 ff3c 	bl	800b740 <RCCEx_PLL3_Config>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80098ce:	e004      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098d6:	e000      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80098d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098e2:	4bbf      	ldr	r3, [pc, #764]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098f0:	4abb      	ldr	r2, [pc, #748]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098f2:	430b      	orrs	r3, r1
 80098f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80098f6:	e003      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f002 0302 	and.w	r3, r2, #2
 800990c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009910:	2300      	movs	r3, #0
 8009912:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009916:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800991a:	460b      	mov	r3, r1
 800991c:	4313      	orrs	r3, r2
 800991e:	d041      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009926:	2b05      	cmp	r3, #5
 8009928:	d824      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	0800997d 	.word	0x0800997d
 8009934:	08009949 	.word	0x08009949
 8009938:	0800995f 	.word	0x0800995f
 800993c:	0800997d 	.word	0x0800997d
 8009940:	0800997d 	.word	0x0800997d
 8009944:	0800997d 	.word	0x0800997d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994c:	3308      	adds	r3, #8
 800994e:	2101      	movs	r1, #1
 8009950:	4618      	mov	r0, r3
 8009952:	f001 fe43 	bl	800b5dc <RCCEx_PLL2_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800995c:	e00f      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	3328      	adds	r3, #40	@ 0x28
 8009964:	2101      	movs	r1, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f001 feea 	bl	800b740 <RCCEx_PLL3_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009972:	e004      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800997a:	e000      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800997c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800997e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009986:	4b96      	ldr	r3, [pc, #600]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998a:	f023 0107 	bic.w	r1, r3, #7
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009994:	4a92      	ldr	r2, [pc, #584]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009996:	430b      	orrs	r3, r1
 8009998:	6553      	str	r3, [r2, #84]	@ 0x54
 800999a:	e003      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f002 0304 	and.w	r3, r2, #4
 80099b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80099be:	460b      	mov	r3, r1
 80099c0:	4313      	orrs	r3, r2
 80099c2:	d044      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d825      	bhi.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a25 	.word	0x08009a25
 80099dc:	080099f1 	.word	0x080099f1
 80099e0:	08009a07 	.word	0x08009a07
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a25 	.word	0x08009a25
 80099ec:	08009a25 	.word	0x08009a25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f4:	3308      	adds	r3, #8
 80099f6:	2101      	movs	r1, #1
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 fdef 	bl	800b5dc <RCCEx_PLL2_Config>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a04:	e00f      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0a:	3328      	adds	r3, #40	@ 0x28
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 fe96 	bl	800b740 <RCCEx_PLL3_Config>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a1a:	e004      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a22:	e000      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a32:	f023 0107 	bic.w	r1, r3, #7
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a3e:	4a68      	ldr	r2, [pc, #416]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a40:	430b      	orrs	r3, r1
 8009a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f002 0320 	and.w	r3, r2, #32
 8009a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	d055      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a7a:	d033      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a80:	d82c      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a86:	d02f      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8c:	d826      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a92:	d02b      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a98:	d820      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a9e:	d012      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aa4:	d81a      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d022      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aae:	d115      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fd8f 	bl	800b5dc <RCCEx_PLL2_Config>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ac4:	e015      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aca:	3328      	adds	r3, #40	@ 0x28
 8009acc:	2102      	movs	r1, #2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f001 fe36 	bl	800b740 <RCCEx_PLL3_Config>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ada:	e00a      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ae2:	e006      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ae4:	bf00      	nop
 8009ae6:	e004      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ae8:	bf00      	nop
 8009aea:	e002      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009aec:	bf00      	nop
 8009aee:	e000      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009afa:	4b39      	ldr	r3, [pc, #228]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0a:	4a35      	ldr	r2, [pc, #212]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b10:	e003      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4313      	orrs	r3, r2
 8009b38:	d058      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b46:	d033      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009b48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b4c:	d82c      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b52:	d02f      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b58:	d826      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b5e:	d02b      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b64:	d820      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b6a:	d012      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b70:	d81a      	bhi.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d022      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b7a:	d115      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b80:	3308      	adds	r3, #8
 8009b82:	2100      	movs	r1, #0
 8009b84:	4618      	mov	r0, r3
 8009b86:	f001 fd29 	bl	800b5dc <RCCEx_PLL2_Config>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b90:	e015      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	3328      	adds	r3, #40	@ 0x28
 8009b98:	2102      	movs	r1, #2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fdd0 	bl	800b740 <RCCEx_PLL3_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ba6:	e00a      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bae:	e006      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb0:	bf00      	nop
 8009bb2:	e004      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb4:	bf00      	nop
 8009bb6:	e002      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bb8:	bf00      	nop
 8009bba:	e000      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10e      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bc6:	4b06      	ldr	r3, [pc, #24]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bd6:	4a02      	ldr	r2, [pc, #8]	@ (8009be0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bdc:	e006      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c06:	460b      	mov	r3, r1
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	d055      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c18:	d033      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c1e:	d82c      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c24:	d02f      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c2a:	d826      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c30:	d02b      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c36:	d820      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c3c:	d012      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c42:	d81a      	bhi.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d022      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c4c:	d115      	bne.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	3308      	adds	r3, #8
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fcc0 	bl	800b5dc <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c62:	e015      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	3328      	adds	r3, #40	@ 0x28
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fd67 	bl	800b740 <RCCEx_PLL3_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c78:	e00a      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c80:	e006      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c82:	bf00      	nop
 8009c84:	e004      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c86:	bf00      	nop
 8009c88:	e002      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c8a:	bf00      	nop
 8009c8c:	e000      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10b      	bne.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c98:	4ba1      	ldr	r3, [pc, #644]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ca8:	4a9d      	ldr	r2, [pc, #628]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009caa:	430b      	orrs	r3, r1
 8009cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cae:	e003      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f002 0308 	and.w	r3, r2, #8
 8009cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	d01e      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce4:	d10c      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	3328      	adds	r3, #40	@ 0x28
 8009cec:	2102      	movs	r1, #2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 fd26 	bl	800b740 <RCCEx_PLL3_Config>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d00:	4b87      	ldr	r3, [pc, #540]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d10:	4a83      	ldr	r2, [pc, #524]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d12:	430b      	orrs	r3, r1
 8009d14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f002 0310 	and.w	r3, r2, #16
 8009d22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d26:	2300      	movs	r3, #0
 8009d28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d30:	460b      	mov	r3, r1
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d01e      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d42:	d10c      	bne.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d48:	3328      	adds	r3, #40	@ 0x28
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fcf7 	bl	800b740 <RCCEx_PLL3_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d5e:	4b70      	ldr	r3, [pc, #448]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d03e      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009da0:	d022      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009da6:	d81b      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d003      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db0:	d00b      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009db2:	e015      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	3308      	adds	r3, #8
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fc0d 	bl	800b5dc <RCCEx_PLL2_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dc8:	e00f      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	3328      	adds	r3, #40	@ 0x28
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fcb4 	bl	800b740 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009df2:	4b4b      	ldr	r3, [pc, #300]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e02:	4a47      	ldr	r2, [pc, #284]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e20:	2300      	movs	r3, #0
 8009e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	d03b      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e3a:	d01f      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e40:	d818      	bhi.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e46:	d003      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e4c:	d007      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009e4e:	e011      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e50:	4b33      	ldr	r3, [pc, #204]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	4a32      	ldr	r2, [pc, #200]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e5c:	e00f      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e62:	3328      	adds	r3, #40	@ 0x28
 8009e64:	2101      	movs	r1, #1
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fc6a 	bl	800b740 <RCCEx_PLL3_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e72:	e004      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e7a:	e000      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e86:	4b26      	ldr	r3, [pc, #152]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e96:	4a22      	ldr	r2, [pc, #136]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e9c:	e003      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009eb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009eb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d034      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed0:	d007      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009ed2:	e011      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed4:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed8:	4a11      	ldr	r2, [pc, #68]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ee0:	e00e      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	2102      	movs	r1, #2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f001 fb76 	bl	800b5dc <RCCEx_PLL2_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ef6:	e003      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10d      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f08:	4b05      	ldr	r3, [pc, #20]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f16:	4a02      	ldr	r2, [pc, #8]	@ (8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f1c:	e006      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f42:	460b      	mov	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d00c      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4c:	3328      	adds	r3, #40	@ 0x28
 8009f4e:	2102      	movs	r1, #2
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 fbf5 	bl	800b740 <RCCEx_PLL3_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f70:	2300      	movs	r3, #0
 8009f72:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	d038      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f8a:	d018      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f90:	d811      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f96:	d014      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f9c:	d80b      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fa6:	d106      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa8:	4bc3      	ldr	r3, [pc, #780]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4ac2      	ldr	r2, [pc, #776]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009fb4:	e008      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fbc:	e004      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fbe:	bf00      	nop
 8009fc0:	e002      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fc2:	bf00      	nop
 8009fc4:	e000      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10b      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fd0:	4bb9      	ldr	r3, [pc, #740]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fe0:	4ab5      	ldr	r2, [pc, #724]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fe6:	e003      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ffe:	2300      	movs	r3, #0
 800a000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a002:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a006:	460b      	mov	r3, r1
 800a008:	4313      	orrs	r3, r2
 800a00a:	d009      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a00c:	4baa      	ldr	r3, [pc, #680]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a010:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a01a:	4aa7      	ldr	r2, [pc, #668]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a02c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a02e:	2300      	movs	r3, #0
 800a030:	657b      	str	r3, [r7, #84]	@ 0x54
 800a032:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a036:	460b      	mov	r3, r1
 800a038:	4313      	orrs	r3, r2
 800a03a:	d00a      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a03c:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a048:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a04c:	4a9a      	ldr	r2, [pc, #616]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04e:	430b      	orrs	r3, r1
 800a050:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a05e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a060:	2300      	movs	r3, #0
 800a062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a064:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a068:	460b      	mov	r3, r1
 800a06a:	4313      	orrs	r3, r2
 800a06c:	d009      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a06e:	4b92      	ldr	r3, [pc, #584]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a072:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a07c:	4a8e      	ldr	r2, [pc, #568]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a07e:	430b      	orrs	r3, r1
 800a080:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a08e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a090:	2300      	movs	r3, #0
 800a092:	647b      	str	r3, [r7, #68]	@ 0x44
 800a094:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a098:	460b      	mov	r3, r1
 800a09a:	4313      	orrs	r3, r2
 800a09c:	d00e      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a09e:	4b86      	ldr	r3, [pc, #536]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	4a85      	ldr	r2, [pc, #532]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0a8:	6113      	str	r3, [r2, #16]
 800a0aa:	4b83      	ldr	r3, [pc, #524]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ac:	6919      	ldr	r1, [r3, #16]
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0b6:	4a80      	ldr	r2, [pc, #512]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a0c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	d009      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0d8:	4b77      	ldr	r3, [pc, #476]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e6:	4a74      	ldr	r2, [pc, #464]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a102:	460b      	mov	r3, r1
 800a104:	4313      	orrs	r3, r2
 800a106:	d00a      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a108:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a10a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a10c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a118:	4a67      	ldr	r2, [pc, #412]	@ (800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a11a:	430b      	orrs	r3, r1
 800a11c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	2100      	movs	r1, #0
 800a128:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a130:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a134:	460b      	mov	r3, r1
 800a136:	4313      	orrs	r3, r2
 800a138:	d011      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13e:	3308      	adds	r3, #8
 800a140:	2100      	movs	r1, #0
 800a142:	4618      	mov	r0, r3
 800a144:	f001 fa4a 	bl	800b5dc <RCCEx_PLL2_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a14e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	2100      	movs	r1, #0
 800a168:	6239      	str	r1, [r7, #32]
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a170:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d011      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	3308      	adds	r3, #8
 800a180:	2101      	movs	r1, #1
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fa2a 	bl	800b5dc <RCCEx_PLL2_Config>
 800a188:	4603      	mov	r3, r0
 800a18a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a18e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	61b9      	str	r1, [r7, #24]
 800a1aa:	f003 0304 	and.w	r3, r3, #4
 800a1ae:	61fb      	str	r3, [r7, #28]
 800a1b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	d011      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1be:	3308      	adds	r3, #8
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 fa0a 	bl	800b5dc <RCCEx_PLL2_Config>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6139      	str	r1, [r7, #16]
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	d011      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fe:	3328      	adds	r3, #40	@ 0x28
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fa9c 	bl	800b740 <RCCEx_PLL3_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a20e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a21a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	2100      	movs	r1, #0
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a234:	460b      	mov	r3, r1
 800a236:	4313      	orrs	r3, r2
 800a238:	d011      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	3328      	adds	r3, #40	@ 0x28
 800a240:	2101      	movs	r1, #1
 800a242:	4618      	mov	r0, r3
 800a244:	f001 fa7c 	bl	800b740 <RCCEx_PLL3_Config>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a24e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a25a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	2100      	movs	r1, #0
 800a268:	6039      	str	r1, [r7, #0]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a274:	460b      	mov	r3, r1
 800a276:	4313      	orrs	r3, r2
 800a278:	d011      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	3328      	adds	r3, #40	@ 0x28
 800a280:	2102      	movs	r1, #2
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fa5c 	bl	800b740 <RCCEx_PLL3_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a29a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a29e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e000      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2b8:	58024400 	.word	0x58024400

0800a2bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b090      	sub	sp, #64	@ 0x40
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	f040 8094 	bne.w	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2d4:	4b9e      	ldr	r3, [pc, #632]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	f200 8087 	bhi.w	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a301 	.word	0x0800a301
 800a2f0:	0800a329 	.word	0x0800a329
 800a2f4:	0800a351 	.word	0x0800a351
 800a2f8:	0800a3ed 	.word	0x0800a3ed
 800a2fc:	0800a379 	.word	0x0800a379
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a300:	4b93      	ldr	r3, [pc, #588]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a30c:	d108      	bne.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a30e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a312:	4618      	mov	r0, r3
 800a314:	f001 f810 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a31c:	f000 bd45 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a324:	f000 bd41 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a328:	4b89      	ldr	r3, [pc, #548]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a334:	d108      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fd54 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a344:	f000 bd31 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	f000 bd2d 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a350:	4b7f      	ldr	r3, [pc, #508]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35c:	d108      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fe94 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36c:	f000 bd1d 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a374:	f000 bd19 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a378:	4b75      	ldr	r3, [pc, #468]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a37a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a37c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a380:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a382:	4b73      	ldr	r3, [pc, #460]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d10c      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a394:	4b6e      	ldr	r3, [pc, #440]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	08db      	lsrs	r3, r3, #3
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	4a6d      	ldr	r2, [pc, #436]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a6:	e01f      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3a8:	4b69      	ldr	r3, [pc, #420]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b4:	d106      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3bc:	d102      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3be:	4b66      	ldr	r3, [pc, #408]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c2:	e011      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3c4:	4b62      	ldr	r3, [pc, #392]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3d0:	d106      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d8:	d102      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3da:	4b60      	ldr	r3, [pc, #384]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3de:	e003      	b.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3e4:	f000 bce1 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3e8:	f000 bcdf 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f0:	f000 bcdb 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f8:	f000 bcd7 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a400:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a404:	430b      	orrs	r3, r1
 800a406:	f040 80ad 	bne.w	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a40a:	4b51      	ldr	r3, [pc, #324]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a40c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a40e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a412:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41a:	d056      	beq.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a422:	f200 8090 	bhi.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	2bc0      	cmp	r3, #192	@ 0xc0
 800a42a:	f000 8088 	beq.w	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	2bc0      	cmp	r3, #192	@ 0xc0
 800a432:	f200 8088 	bhi.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	2b80      	cmp	r3, #128	@ 0x80
 800a43a:	d032      	beq.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	2b80      	cmp	r3, #128	@ 0x80
 800a440:	f200 8081 	bhi.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	2b40      	cmp	r3, #64	@ 0x40
 800a44e:	d014      	beq.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a450:	e079      	b.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a452:	4b3f      	ldr	r3, [pc, #252]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a45a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a45e:	d108      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a464:	4618      	mov	r0, r3
 800a466:	f000 ff67 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46e:	f000 bc9c 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a476:	f000 bc98 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a47a:	4b35      	ldr	r3, [pc, #212]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a486:	d108      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a488:	f107 0318 	add.w	r3, r7, #24
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 fcab 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a496:	f000 bc88 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49e:	f000 bc84 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ae:	d108      	bne.n	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b0:	f107 030c 	add.w	r3, r7, #12
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 fdeb 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4be:	f000 bc74 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c6:	f000 bc70 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4ca:	4b21      	ldr	r3, [pc, #132]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d10c      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	08db      	lsrs	r3, r3, #3
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	4a18      	ldr	r2, [pc, #96]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f8:	e01f      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4fa:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a506:	d106      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a50e:	d102      	bne.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a510:	4b11      	ldr	r3, [pc, #68]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a514:	e011      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a516:	4b0e      	ldr	r3, [pc, #56]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a51e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a522:	d106      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a52a:	d102      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a52c:	4b0b      	ldr	r3, [pc, #44]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a530:	e003      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a536:	f000 bc38 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a53a:	f000 bc36 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a53e:	4b08      	ldr	r3, [pc, #32]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a542:	f000 bc32 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54a:	f000 bc2e 	b.w	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54e:	bf00      	nop
 800a550:	58024400 	.word	0x58024400
 800a554:	03d09000 	.word	0x03d09000
 800a558:	003d0900 	.word	0x003d0900
 800a55c:	017d7840 	.word	0x017d7840
 800a560:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a568:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a56c:	430b      	orrs	r3, r1
 800a56e:	f040 809c 	bne.w	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a572:	4b9e      	ldr	r3, [pc, #632]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a576:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a582:	d054      	beq.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a58a:	f200 808b 	bhi.w	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a590:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a594:	f000 8083 	beq.w	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a59e:	f200 8081 	bhi.w	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5a8:	d02f      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5b0:	d878      	bhi.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5be:	d012      	beq.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a5c0:	e070      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5c2:	4b8a      	ldr	r3, [pc, #552]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 feaf 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5de:	e3e4      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e3e1      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e6:	4b81      	ldr	r3, [pc, #516]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5f2:	d107      	bne.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f4:	f107 0318 	add.w	r3, r7, #24
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fbf5 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a602:	e3d2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a608:	e3cf      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60a:	4b78      	ldr	r3, [pc, #480]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a616:	d107      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a618:	f107 030c 	add.w	r3, r7, #12
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fd37 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a626:	e3c0      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62c:	e3bd      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a62e:	4b6f      	ldr	r3, [pc, #444]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a636:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a638:	4b6c      	ldr	r3, [pc, #432]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b04      	cmp	r3, #4
 800a642:	d10c      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a646:	2b00      	cmp	r3, #0
 800a648:	d109      	bne.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64a:	4b68      	ldr	r3, [pc, #416]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	08db      	lsrs	r3, r3, #3
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	4a66      	ldr	r2, [pc, #408]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a65c:	e01e      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a65e:	4b63      	ldr	r3, [pc, #396]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66a:	d106      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a672:	d102      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a674:	4b5f      	ldr	r3, [pc, #380]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a678:	e010      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67a:	4b5c      	ldr	r3, [pc, #368]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a682:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a686:	d106      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68e:	d102      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a690:	4b59      	ldr	r3, [pc, #356]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a694:	e002      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a69a:	e386      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a69c:	e385      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a69e:	4b57      	ldr	r3, [pc, #348]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a2:	e382      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a8:	e37f      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	f040 80a7 	bne.w	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a6b8:	4b4c      	ldr	r3, [pc, #304]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a6c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6c8:	d055      	beq.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6d0:	f200 8096 	bhi.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6da:	f000 8084 	beq.w	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6e4:	f200 808c 	bhi.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ee:	d030      	beq.n	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6f6:	f200 8083 	bhi.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d004      	beq.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a706:	d012      	beq.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a708:	e07a      	b.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a70a:	4b38      	ldr	r3, [pc, #224]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a716:	d107      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fe0b 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a726:	e340      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72c:	e33d      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a72e:	4b2f      	ldr	r3, [pc, #188]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a73a:	d107      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a73c:	f107 0318 	add.w	r3, r7, #24
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fb51 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a74a:	e32e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a750:	e32b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a752:	4b26      	ldr	r3, [pc, #152]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a75a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a75e:	d107      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a760:	f107 030c 	add.w	r3, r7, #12
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fc93 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a76e:	e31c      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a774:	e319      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a776:	4b1d      	ldr	r3, [pc, #116]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a77a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a77e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a780:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d10c      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a792:	4b16      	ldr	r3, [pc, #88]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	08db      	lsrs	r3, r3, #3
 800a798:	f003 0303 	and.w	r3, r3, #3
 800a79c:	4a14      	ldr	r2, [pc, #80]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a79e:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a4:	e01e      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7a6:	4b11      	ldr	r3, [pc, #68]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b2:	d106      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ba:	d102      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7c0:	e010      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ce:	d106      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7d6:	d102      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7d8:	4b07      	ldr	r3, [pc, #28]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7dc:	e002      	b.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7e2:	e2e2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7e4:	e2e1      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7e6:	4b05      	ldr	r3, [pc, #20]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ea:	e2de      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	03d09000 	.word	0x03d09000
 800a7f4:	003d0900 	.word	0x003d0900
 800a7f8:	017d7840 	.word	0x017d7840
 800a7fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a804:	e2d1      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a80a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a80e:	430b      	orrs	r3, r1
 800a810:	f040 809c 	bne.w	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a814:	4b93      	ldr	r3, [pc, #588]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a818:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a81c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a824:	d054      	beq.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a82c:	f200 808b 	bhi.w	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a836:	f000 8083 	beq.w	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a840:	f200 8081 	bhi.w	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a84a:	d02f      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a852:	d878      	bhi.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a860:	d012      	beq.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a862:	e070      	b.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a864:	4b7f      	ldr	r3, [pc, #508]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a86c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a870:	d107      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fd5e 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a880:	e293      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a886:	e290      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a888:	4b76      	ldr	r3, [pc, #472]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a894:	d107      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a896:	f107 0318 	add.w	r3, r7, #24
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 faa4 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a4:	e281      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e27e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8ac:	4b6d      	ldr	r3, [pc, #436]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b8:	d107      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ba:	f107 030c 	add.w	r3, r7, #12
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fbe6 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c8:	e26f      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ce:	e26c      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8d0:	4b64      	ldr	r3, [pc, #400]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8da:	4b62      	ldr	r3, [pc, #392]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0304 	and.w	r3, r3, #4
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d10c      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d109      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8ec:	4b5d      	ldr	r3, [pc, #372]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	08db      	lsrs	r3, r3, #3
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	4a5c      	ldr	r2, [pc, #368]	@ (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8fe:	e01e      	b.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a900:	4b58      	ldr	r3, [pc, #352]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a90c:	d106      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a914:	d102      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a916:	4b55      	ldr	r3, [pc, #340]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a91a:	e010      	b.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a91c:	4b51      	ldr	r3, [pc, #324]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a928:	d106      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a930:	d102      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a932:	4b4f      	ldr	r3, [pc, #316]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a936:	e002      	b.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a93c:	e235      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a93e:	e234      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a940:	4b4c      	ldr	r3, [pc, #304]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a944:	e231      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94a:	e22e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a950:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a954:	430b      	orrs	r3, r1
 800a956:	f040 808f 	bne.w	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a95a:	4b42      	ldr	r3, [pc, #264]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a95c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a962:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a96a:	d06b      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a972:	d874      	bhi.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a97a:	d056      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a982:	d86c      	bhi.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a98a:	d03b      	beq.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a992:	d864      	bhi.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a99a:	d021      	beq.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a2:	d85c      	bhi.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9b0:	d004      	beq.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a9b2:	e054      	b.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a9b4:	f7fe fa0a 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 800a9b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9ba:	e1f6      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9bc:	4b29      	ldr	r3, [pc, #164]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9c8:	d107      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ca:	f107 0318 	add.w	r3, r7, #24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fa0a 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d8:	e1e7      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9de:	e1e4      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e0:	4b20      	ldr	r3, [pc, #128]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ec:	d107      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ee:	f107 030c 	add.w	r3, r7, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fb4c 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fc:	e1d5      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa02:	e1d2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa04:	4b17      	ldr	r3, [pc, #92]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d109      	bne.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa10:	4b14      	ldr	r3, [pc, #80]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	4a13      	ldr	r2, [pc, #76]	@ (800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa22:	e1c2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa28:	e1bf      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa2a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa36:	d102      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa38:	4b0c      	ldr	r3, [pc, #48]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa3c:	e1b5      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa42:	e1b2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa44:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa50:	d102      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aa52:	4b07      	ldr	r3, [pc, #28]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa56:	e1a8      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5c:	e1a5      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa62:	e1a2      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa64:	58024400 	.word	0x58024400
 800aa68:	03d09000 	.word	0x03d09000
 800aa6c:	003d0900 	.word	0x003d0900
 800aa70:	017d7840 	.word	0x017d7840
 800aa74:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa7c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa80:	430b      	orrs	r3, r1
 800aa82:	d173      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa84:	4b9c      	ldr	r3, [pc, #624]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa94:	d02f      	beq.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa9c:	d863      	bhi.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaaa:	d012      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aaac:	e05b      	b.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaae:	4b92      	ldr	r3, [pc, #584]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaba:	d107      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aabc:	f107 0318 	add.w	r3, r7, #24
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 f991 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaca:	e16e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad0:	e16b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aad2:	4b89      	ldr	r3, [pc, #548]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aade:	d107      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aae0:	f107 030c 	add.w	r3, r7, #12
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fad3 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaee:	e15c      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf4:	e159      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaf6:	4b80      	ldr	r3, [pc, #512]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aafa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab00:	4b7d      	ldr	r3, [pc, #500]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d10c      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab12:	4b79      	ldr	r3, [pc, #484]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	08db      	lsrs	r3, r3, #3
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	4a77      	ldr	r2, [pc, #476]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ab1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab24:	e01e      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab26:	4b74      	ldr	r3, [pc, #464]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab32:	d106      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab3a:	d102      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab3c:	4b70      	ldr	r3, [pc, #448]	@ (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab40:	e010      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab42:	4b6d      	ldr	r3, [pc, #436]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab4e:	d106      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ab50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab56:	d102      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab58:	4b6a      	ldr	r3, [pc, #424]	@ (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab5c:	e002      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab62:	e122      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab64:	e121      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6a:	e11e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab70:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab74:	430b      	orrs	r3, r1
 800ab76:	d133      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab78:	4b5f      	ldr	r3, [pc, #380]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab8e:	d012      	beq.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab90:	e023      	b.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab92:	4b59      	ldr	r3, [pc, #356]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab9e:	d107      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fbc7 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abae:	e0fc      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb4:	e0f9      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb6:	4b50      	ldr	r3, [pc, #320]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abc2:	d107      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc4:	f107 0318 	add.w	r3, r7, #24
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f90d 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd2:	e0ea      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd8:	e0e7      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abde:	e0e4      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800abe8:	430b      	orrs	r3, r1
 800abea:	f040 808d 	bne.w	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800abee:	4b42      	ldr	r3, [pc, #264]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800abf6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800abfe:	d06b      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac06:	d874      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac0e:	d056      	beq.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac16:	d86c      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac1e:	d03b      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac26:	d864      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac2e:	d021      	beq.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ac30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac36:	d85c      	bhi.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d004      	beq.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac44:	d004      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ac46:	e054      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac48:	f000 f8b8 	bl	800adbc <HAL_RCCEx_GetD3PCLK1Freq>
 800ac4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac4e:	e0ac      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac50:	4b29      	ldr	r3, [pc, #164]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac5c:	d107      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 f8c0 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6c:	e09d      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac72:	e09a      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac74:	4b20      	ldr	r3, [pc, #128]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac80:	d107      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac82:	f107 030c 	add.w	r3, r7, #12
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 fa02 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac90:	e08b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac96:	e088      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac98:	4b17      	ldr	r3, [pc, #92]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d109      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aca4:	4b14      	ldr	r3, [pc, #80]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	08db      	lsrs	r3, r3, #3
 800acaa:	f003 0303 	and.w	r3, r3, #3
 800acae:	4a13      	ldr	r2, [pc, #76]	@ (800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acb0:	fa22 f303 	lsr.w	r3, r2, r3
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb6:	e078      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	e075      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acbe:	4b0e      	ldr	r3, [pc, #56]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acca:	d102      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800accc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800acce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd0:	e06b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd6:	e068      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acd8:	4b07      	ldr	r3, [pc, #28]	@ (800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ace0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ace4:	d102      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ace6:	4b07      	ldr	r3, [pc, #28]	@ (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ace8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acea:	e05e      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf0:	e05b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf6:	e058      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acf8:	58024400 	.word	0x58024400
 800acfc:	03d09000 	.word	0x03d09000
 800ad00:	003d0900 	.word	0x003d0900
 800ad04:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad0c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad10:	430b      	orrs	r3, r1
 800ad12:	d148      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad14:	4b27      	ldr	r3, [pc, #156]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad24:	d02a      	beq.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ad26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad2c:	d838      	bhi.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad3a:	d00d      	beq.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad3c:	e030      	b.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3e:	4b1d      	ldr	r3, [pc, #116]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad4a:	d102      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	@ (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad50:	e02b      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad56:	e028      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad58:	4b16      	ldr	r3, [pc, #88]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad64:	d107      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fae4 	bl	800b338 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad74:	e019      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7a:	e016      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad7c:	4b0d      	ldr	r3, [pc, #52]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad88:	d107      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8a:	f107 0318 	add.w	r3, r7, #24
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f82a 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad98:	e007      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9e:	e004      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada4:	e001      	b.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800adaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800adac:	4618      	mov	r0, r3
 800adae:	3740      	adds	r7, #64	@ 0x40
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	58024400 	.word	0x58024400
 800adb8:	017d7840 	.word	0x017d7840

0800adbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adc0:	f7fd ffd4 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	091b      	lsrs	r3, r3, #4
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	4904      	ldr	r1, [pc, #16]	@ (800ade4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800add2:	5ccb      	ldrb	r3, [r1, r3]
 800add4:	f003 031f 	and.w	r3, r3, #31
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800addc:	4618      	mov	r0, r3
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	58024400 	.word	0x58024400
 800ade4:	08013394 	.word	0x08013394

0800ade8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ade8:	b480      	push	{r7}
 800adea:	b089      	sub	sp, #36	@ 0x24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf0:	4ba1      	ldr	r3, [pc, #644]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adfa:	4b9f      	ldr	r3, [pc, #636]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfe:	0b1b      	lsrs	r3, r3, #12
 800ae00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae06:	4b9c      	ldr	r3, [pc, #624]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0a:	091b      	lsrs	r3, r3, #4
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae12:	4b99      	ldr	r3, [pc, #612]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae16:	08db      	lsrs	r3, r3, #3
 800ae18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	fb02 f303 	mul.w	r3, r2, r3
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8111 	beq.w	800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	f000 8083 	beq.w	800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	f200 80a1 	bhi.w	800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d056      	beq.n	800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae52:	e099      	b.n	800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae54:	4b88      	ldr	r3, [pc, #544]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 0320 	and.w	r3, r3, #32
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d02d      	beq.n	800aebc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae60:	4b85      	ldr	r3, [pc, #532]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	08db      	lsrs	r3, r3, #3
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	4a84      	ldr	r2, [pc, #528]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	ee07 3a90 	vmov	s15, r3
 800ae78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8a:	4b7b      	ldr	r3, [pc, #492]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aeba:	e087      	b.n	800afcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aeca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aece:	4b6a      	ldr	r3, [pc, #424]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aede:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefe:	e065      	b.n	800afcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af12:	4b59      	ldr	r3, [pc, #356]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af22:	ed97 6a03 	vldr	s12, [r7, #12]
 800af26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af42:	e043      	b.n	800afcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af56:	4b48      	ldr	r3, [pc, #288]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af66:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af86:	e021      	b.n	800afcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	ee07 3a90 	vmov	s15, r3
 800af8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9a:	4b37      	ldr	r3, [pc, #220]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800afae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afcc:	4b2a      	ldr	r3, [pc, #168]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd0:	0a5b      	lsrs	r3, r3, #9
 800afd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff2:	ee17 2a90 	vmov	r2, s15
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800affa:	4b1f      	ldr	r3, [pc, #124]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800affc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b004:	ee07 3a90 	vmov	s15, r3
 800b008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b010:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b014:	edd7 6a07 	vldr	s13, [r7, #28]
 800b018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b020:	ee17 2a90 	vmov	r2, s15
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b028:	4b13      	ldr	r3, [pc, #76]	@ (800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02c:	0e1b      	lsrs	r3, r3, #24
 800b02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b042:	edd7 6a07 	vldr	s13, [r7, #28]
 800b046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04e:	ee17 2a90 	vmov	r2, s15
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b056:	e008      	b.n	800b06a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
}
 800b06a:	bf00      	nop
 800b06c:	3724      	adds	r7, #36	@ 0x24
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	58024400 	.word	0x58024400
 800b07c:	03d09000 	.word	0x03d09000
 800b080:	46000000 	.word	0x46000000
 800b084:	4c742400 	.word	0x4c742400
 800b088:	4a742400 	.word	0x4a742400
 800b08c:	4bbebc20 	.word	0x4bbebc20

0800b090 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b090:	b480      	push	{r7}
 800b092:	b089      	sub	sp, #36	@ 0x24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b098:	4ba1      	ldr	r3, [pc, #644]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0a2:	4b9f      	ldr	r3, [pc, #636]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a6:	0d1b      	lsrs	r3, r3, #20
 800b0a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0ae:	4b9c      	ldr	r3, [pc, #624]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b2:	0a1b      	lsrs	r3, r3, #8
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0ba:	4b99      	ldr	r3, [pc, #612]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0be:	08db      	lsrs	r3, r3, #3
 800b0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 8111 	beq.w	800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	f000 8083 	beq.w	800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	f200 80a1 	bhi.w	800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d056      	beq.n	800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0fa:	e099      	b.n	800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0fc:	4b88      	ldr	r3, [pc, #544]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b00      	cmp	r3, #0
 800b106:	d02d      	beq.n	800b164 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b108:	4b85      	ldr	r3, [pc, #532]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	08db      	lsrs	r3, r3, #3
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	4a84      	ldr	r2, [pc, #528]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b114:	fa22 f303 	lsr.w	r3, r2, r3
 800b118:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b132:	4b7b      	ldr	r3, [pc, #492]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b142:	ed97 6a03 	vldr	s12, [r7, #12]
 800b146:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b162:	e087      	b.n	800b274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b176:	4b6a      	ldr	r3, [pc, #424]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b186:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b18e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a6:	e065      	b.n	800b274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ba:	4b59      	ldr	r3, [pc, #356]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ea:	e043      	b.n	800b274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1fe:	4b48      	ldr	r3, [pc, #288]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b212:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b21e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b22e:	e021      	b.n	800b274 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b242:	4b37      	ldr	r3, [pc, #220]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b252:	ed97 6a03 	vldr	s12, [r7, #12]
 800b256:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b272:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b274:	4b2a      	ldr	r3, [pc, #168]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b278:	0a5b      	lsrs	r3, r3, #9
 800b27a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29a:	ee17 2a90 	vmov	r2, s15
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2a2:	4b1f      	ldr	r3, [pc, #124]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a6:	0c1b      	lsrs	r3, r3, #16
 800b2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ac:	ee07 3a90 	vmov	s15, r3
 800b2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c8:	ee17 2a90 	vmov	r2, s15
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2d0:	4b13      	ldr	r3, [pc, #76]	@ (800b320 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d4:	0e1b      	lsrs	r3, r3, #24
 800b2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2fe:	e008      	b.n	800b312 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	609a      	str	r2, [r3, #8]
}
 800b312:	bf00      	nop
 800b314:	3724      	adds	r7, #36	@ 0x24
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	58024400 	.word	0x58024400
 800b324:	03d09000 	.word	0x03d09000
 800b328:	46000000 	.word	0x46000000
 800b32c:	4c742400 	.word	0x4c742400
 800b330:	4a742400 	.word	0x4a742400
 800b334:	4bbebc20 	.word	0x4bbebc20

0800b338 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b338:	b480      	push	{r7}
 800b33a:	b089      	sub	sp, #36	@ 0x24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b340:	4ba0      	ldr	r3, [pc, #640]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b344:	f003 0303 	and.w	r3, r3, #3
 800b348:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b34a:	4b9e      	ldr	r3, [pc, #632]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34e:	091b      	lsrs	r3, r3, #4
 800b350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b354:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b356:	4b9b      	ldr	r3, [pc, #620]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b360:	4b98      	ldr	r3, [pc, #608]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b364:	08db      	lsrs	r3, r3, #3
 800b366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	fb02 f303 	mul.w	r3, r2, r3
 800b370:	ee07 3a90 	vmov	s15, r3
 800b374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b378:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 8111 	beq.w	800b5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b02      	cmp	r3, #2
 800b388:	f000 8083 	beq.w	800b492 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	f200 80a1 	bhi.w	800b4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d056      	beq.n	800b44e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3a0:	e099      	b.n	800b4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3a2:	4b88      	ldr	r3, [pc, #544]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d02d      	beq.n	800b40a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ae:	4b85      	ldr	r3, [pc, #532]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	08db      	lsrs	r3, r3, #3
 800b3b4:	f003 0303 	and.w	r3, r3, #3
 800b3b8:	4a83      	ldr	r2, [pc, #524]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b3be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d8:	4b7a      	ldr	r3, [pc, #488]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b404:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b408:	e087      	b.n	800b51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b414:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41c:	4b69      	ldr	r3, [pc, #420]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b430:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b44c:	e065      	b.n	800b51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b458:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b45c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b460:	4b58      	ldr	r3, [pc, #352]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b468:	ee07 3a90 	vmov	s15, r3
 800b46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b470:	ed97 6a03 	vldr	s12, [r7, #12]
 800b474:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b47c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b490:	e043      	b.n	800b51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	ee07 3a90 	vmov	s15, r3
 800b498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a4:	4b47      	ldr	r3, [pc, #284]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ac:	ee07 3a90 	vmov	s15, r3
 800b4b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4d4:	e021      	b.n	800b51a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e8:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b50c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b518:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b51a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51e:	0a5b      	lsrs	r3, r3, #9
 800b520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b524:	ee07 3a90 	vmov	s15, r3
 800b528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b530:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b534:	edd7 6a07 	vldr	s13, [r7, #28]
 800b538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b53c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b540:	ee17 2a90 	vmov	r2, s15
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b548:	4b1e      	ldr	r3, [pc, #120]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b54c:	0c1b      	lsrs	r3, r3, #16
 800b54e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b55e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b562:	edd7 6a07 	vldr	s13, [r7, #28]
 800b566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b56a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b56e:	ee17 2a90 	vmov	r2, s15
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b576:	4b13      	ldr	r3, [pc, #76]	@ (800b5c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57a:	0e1b      	lsrs	r3, r3, #24
 800b57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b588:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b590:	edd7 6a07 	vldr	s13, [r7, #28]
 800b594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59c:	ee17 2a90 	vmov	r2, s15
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5a4:	e008      	b.n	800b5b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	609a      	str	r2, [r3, #8]
}
 800b5b8:	bf00      	nop
 800b5ba:	3724      	adds	r7, #36	@ 0x24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	03d09000 	.word	0x03d09000
 800b5cc:	46000000 	.word	0x46000000
 800b5d0:	4c742400 	.word	0x4c742400
 800b5d4:	4a742400 	.word	0x4a742400
 800b5d8:	4bbebc20 	.word	0x4bbebc20

0800b5dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5ea:	4b53      	ldr	r3, [pc, #332]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d101      	bne.n	800b5fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e099      	b.n	800b72e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b600:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b606:	f7f6 f941 	bl	800188c <HAL_GetTick>
 800b60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b60c:	e008      	b.n	800b620 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b60e:	f7f6 f93d 	bl	800188c <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e086      	b.n	800b72e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b620:	4b45      	ldr	r3, [pc, #276]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1f0      	bne.n	800b60e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b62c:	4b42      	ldr	r3, [pc, #264]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b630:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	031b      	lsls	r3, r3, #12
 800b63a:	493f      	ldr	r1, [pc, #252]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b63c:	4313      	orrs	r3, r2
 800b63e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	3b01      	subs	r3, #1
 800b646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	3b01      	subs	r3, #1
 800b650:	025b      	lsls	r3, r3, #9
 800b652:	b29b      	uxth	r3, r3
 800b654:	431a      	orrs	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	041b      	lsls	r3, r3, #16
 800b65e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	3b01      	subs	r3, #1
 800b66a:	061b      	lsls	r3, r3, #24
 800b66c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b670:	4931      	ldr	r1, [pc, #196]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b672:	4313      	orrs	r3, r2
 800b674:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b676:	4b30      	ldr	r3, [pc, #192]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	492d      	ldr	r1, [pc, #180]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b684:	4313      	orrs	r3, r2
 800b686:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b688:	4b2b      	ldr	r3, [pc, #172]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68c:	f023 0220 	bic.w	r2, r3, #32
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	4928      	ldr	r1, [pc, #160]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b696:	4313      	orrs	r3, r2
 800b698:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b69a:	4b27      	ldr	r3, [pc, #156]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b69e:	4a26      	ldr	r2, [pc, #152]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	f023 0310 	bic.w	r3, r3, #16
 800b6a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6a6:	4b24      	ldr	r3, [pc, #144]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6aa:	4b24      	ldr	r3, [pc, #144]	@ (800b73c <RCCEx_PLL2_Config+0x160>)
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	69d2      	ldr	r2, [r2, #28]
 800b6b2:	00d2      	lsls	r2, r2, #3
 800b6b4:	4920      	ldr	r1, [pc, #128]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6be:	4a1e      	ldr	r2, [pc, #120]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	f043 0310 	orr.w	r3, r3, #16
 800b6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d106      	bne.n	800b6da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d0:	4a19      	ldr	r2, [pc, #100]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6d8:	e00f      	b.n	800b6fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d106      	bne.n	800b6ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6e0:	4b15      	ldr	r3, [pc, #84]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e4:	4a14      	ldr	r2, [pc, #80]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6ec:	e005      	b.n	800b6fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6ee:	4b12      	ldr	r3, [pc, #72]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f2:	4a11      	ldr	r2, [pc, #68]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b700:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b706:	f7f6 f8c1 	bl	800188c <HAL_GetTick>
 800b70a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b70c:	e008      	b.n	800b720 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b70e:	f7f6 f8bd 	bl	800188c <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d901      	bls.n	800b720 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e006      	b.n	800b72e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b720:	4b05      	ldr	r3, [pc, #20]	@ (800b738 <RCCEx_PLL2_Config+0x15c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0f0      	beq.n	800b70e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	58024400 	.word	0x58024400
 800b73c:	ffff0007 	.word	0xffff0007

0800b740 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b74e:	4b53      	ldr	r3, [pc, #332]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	2b03      	cmp	r3, #3
 800b758:	d101      	bne.n	800b75e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e099      	b.n	800b892 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b75e:	4b4f      	ldr	r3, [pc, #316]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a4e      	ldr	r2, [pc, #312]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f6 f88f 	bl	800188c <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b772:	f7f6 f88b 	bl	800188c <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e086      	b.n	800b892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b784:	4b45      	ldr	r3, [pc, #276]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f0      	bne.n	800b772 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b790:	4b42      	ldr	r3, [pc, #264]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b794:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	051b      	lsls	r3, r3, #20
 800b79e:	493f      	ldr	r1, [pc, #252]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	025b      	lsls	r3, r3, #9
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	041b      	lsls	r3, r3, #16
 800b7c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	061b      	lsls	r3, r3, #24
 800b7d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7d4:	4931      	ldr	r1, [pc, #196]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7da:	4b30      	ldr	r3, [pc, #192]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	492d      	ldr	r1, [pc, #180]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	4928      	ldr	r1, [pc, #160]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7fe:	4b27      	ldr	r3, [pc, #156]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b802:	4a26      	ldr	r2, [pc, #152]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b80a:	4b24      	ldr	r3, [pc, #144]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b80c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b80e:	4b24      	ldr	r3, [pc, #144]	@ (800b8a0 <RCCEx_PLL3_Config+0x160>)
 800b810:	4013      	ands	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	69d2      	ldr	r2, [r2, #28]
 800b816:	00d2      	lsls	r2, r2, #3
 800b818:	4920      	ldr	r1, [pc, #128]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b81a:	4313      	orrs	r3, r2
 800b81c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b81e:	4b1f      	ldr	r3, [pc, #124]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	4a1e      	ldr	r2, [pc, #120]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b828:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b830:	4b1a      	ldr	r3, [pc, #104]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b834:	4a19      	ldr	r2, [pc, #100]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b83a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b83c:	e00f      	b.n	800b85e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d106      	bne.n	800b852 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b844:	4b15      	ldr	r3, [pc, #84]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	4a14      	ldr	r2, [pc, #80]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b84a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b84e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b850:	e005      	b.n	800b85e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b852:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b856:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b85c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b85e:	4b0f      	ldr	r3, [pc, #60]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a0e      	ldr	r2, [pc, #56]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86a:	f7f6 f80f 	bl	800188c <HAL_GetTick>
 800b86e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b870:	e008      	b.n	800b884 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b872:	f7f6 f80b 	bl	800188c <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d901      	bls.n	800b884 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e006      	b.n	800b892 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b884:	4b05      	ldr	r3, [pc, #20]	@ (800b89c <RCCEx_PLL3_Config+0x15c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0f0      	beq.n	800b872 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	ffff0007 	.word	0xffff0007

0800b8a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e049      	b.n	800b94a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f841 	bl	800b952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f000 f9e8 	bl	800bcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d001      	beq.n	800b980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e054      	b.n	800ba2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2202      	movs	r2, #2
 800b984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68da      	ldr	r2, [r3, #12]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a26      	ldr	r2, [pc, #152]	@ (800ba38 <HAL_TIM_Base_Start_IT+0xd0>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d022      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9aa:	d01d      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a22      	ldr	r2, [pc, #136]	@ (800ba3c <HAL_TIM_Base_Start_IT+0xd4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d018      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a21      	ldr	r2, [pc, #132]	@ (800ba40 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d013      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a1f      	ldr	r2, [pc, #124]	@ (800ba44 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00e      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a1e      	ldr	r2, [pc, #120]	@ (800ba48 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d009      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba4c <HAL_TIM_Base_Start_IT+0xe4>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d004      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0x80>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba50 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d115      	bne.n	800ba14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	4b19      	ldr	r3, [pc, #100]	@ (800ba54 <HAL_TIM_Base_Start_IT+0xec>)
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b06      	cmp	r3, #6
 800b9f8:	d015      	beq.n	800ba26 <HAL_TIM_Base_Start_IT+0xbe>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba00:	d011      	beq.n	800ba26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f042 0201 	orr.w	r2, r2, #1
 800ba10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba12:	e008      	b.n	800ba26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f042 0201 	orr.w	r2, r2, #1
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	e000      	b.n	800ba28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40010000 	.word	0x40010000
 800ba3c:	40000400 	.word	0x40000400
 800ba40:	40000800 	.word	0x40000800
 800ba44:	40000c00 	.word	0x40000c00
 800ba48:	40010400 	.word	0x40010400
 800ba4c:	40001800 	.word	0x40001800
 800ba50:	40014000 	.word	0x40014000
 800ba54:	00010007 	.word	0x00010007

0800ba58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d020      	beq.n	800babc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d01b      	beq.n	800babc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f06f 0202 	mvn.w	r2, #2
 800ba8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	f003 0303 	and.w	r3, r3, #3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d003      	beq.n	800baaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f8e9 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800baa8:	e005      	b.n	800bab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f8db 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f8ec 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d020      	beq.n	800bb08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f003 0304 	and.w	r3, r3, #4
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01b      	beq.n	800bb08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0204 	mvn.w	r2, #4
 800bad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2202      	movs	r2, #2
 800bade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f8c3 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800baf4:	e005      	b.n	800bb02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f8b5 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f8c6 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 0308 	and.w	r3, r3, #8
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d020      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0308 	and.w	r3, r3, #8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01b      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0208 	mvn.w	r2, #8
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f89d 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f88f 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f8a0 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f003 0310 	and.w	r3, r3, #16
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d020      	beq.n	800bba0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0210 	mvn.w	r2, #16
 800bb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2208      	movs	r2, #8
 800bb76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f877 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800bb8c:	e005      	b.n	800bb9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f869 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f87a 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00c      	beq.n	800bbc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d007      	beq.n	800bbc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f06f 0201 	mvn.w	r2, #1
 800bbbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7f5 fa56 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00c      	beq.n	800bbf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f90d 	bl	800be0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00c      	beq.n	800bc16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d007      	beq.n	800bc16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f905 	bl	800be20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00c      	beq.n	800bc3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d007      	beq.n	800bc3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f834 	bl	800bca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f003 0320 	and.w	r3, r3, #32
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00c      	beq.n	800bc5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f003 0320 	and.w	r3, r3, #32
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d007      	beq.n	800bc5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f06f 0220 	mvn.w	r2, #32
 800bc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f8cd 	bl	800bdf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc5e:	bf00      	nop
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcaa:	bf00      	nop
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a43      	ldr	r2, [pc, #268]	@ (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d013      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcd6:	d00f      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a40      	ldr	r2, [pc, #256]	@ (800bddc <TIM_Base_SetConfig+0x124>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00b      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a3f      	ldr	r2, [pc, #252]	@ (800bde0 <TIM_Base_SetConfig+0x128>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d007      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a3e      	ldr	r2, [pc, #248]	@ (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d003      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a3d      	ldr	r2, [pc, #244]	@ (800bde8 <TIM_Base_SetConfig+0x130>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d108      	bne.n	800bd0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a32      	ldr	r2, [pc, #200]	@ (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd18:	d01b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2f      	ldr	r2, [pc, #188]	@ (800bddc <TIM_Base_SetConfig+0x124>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d017      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2e      	ldr	r2, [pc, #184]	@ (800bde0 <TIM_Base_SetConfig+0x128>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d013      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2d      	ldr	r2, [pc, #180]	@ (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a2c      	ldr	r2, [pc, #176]	@ (800bde8 <TIM_Base_SetConfig+0x130>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a2b      	ldr	r2, [pc, #172]	@ (800bdec <TIM_Base_SetConfig+0x134>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d007      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a2a      	ldr	r2, [pc, #168]	@ (800bdf0 <TIM_Base_SetConfig+0x138>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d003      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a29      	ldr	r2, [pc, #164]	@ (800bdf4 <TIM_Base_SetConfig+0x13c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d108      	bne.n	800bd64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	689a      	ldr	r2, [r3, #8]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a14      	ldr	r2, [pc, #80]	@ (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00f      	beq.n	800bdaa <TIM_Base_SetConfig+0xf2>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a16      	ldr	r2, [pc, #88]	@ (800bde8 <TIM_Base_SetConfig+0x130>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d00b      	beq.n	800bdaa <TIM_Base_SetConfig+0xf2>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4a15      	ldr	r2, [pc, #84]	@ (800bdec <TIM_Base_SetConfig+0x134>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d007      	beq.n	800bdaa <TIM_Base_SetConfig+0xf2>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4a14      	ldr	r2, [pc, #80]	@ (800bdf0 <TIM_Base_SetConfig+0x138>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d003      	beq.n	800bdaa <TIM_Base_SetConfig+0xf2>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a13      	ldr	r2, [pc, #76]	@ (800bdf4 <TIM_Base_SetConfig+0x13c>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d103      	bne.n	800bdb2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	691a      	ldr	r2, [r3, #16]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f043 0204 	orr.w	r2, r3, #4
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	601a      	str	r2, [r3, #0]
}
 800bdca:	bf00      	nop
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	40010000 	.word	0x40010000
 800bddc:	40000400 	.word	0x40000400
 800bde0:	40000800 	.word	0x40000800
 800bde4:	40000c00 	.word	0x40000c00
 800bde8:	40010400 	.word	0x40010400
 800bdec:	40014000 	.word	0x40014000
 800bdf0:	40014400 	.word	0x40014400
 800bdf4:	40014800 	.word	0x40014800

0800bdf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e042      	b.n	800becc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7f5 fc1b 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2224      	movs	r2, #36	@ 0x24
 800be62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f022 0201 	bic.w	r2, r2, #1
 800be74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fe1e 	bl	800cac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 f8b3 	bl	800bff0 <UART_SetConfig>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d101      	bne.n	800be94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e01b      	b.n	800becc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800beb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f042 0201 	orr.w	r2, r2, #1
 800bec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fe9d 	bl	800cc04 <UART_CheckIdleState>
 800beca:	4603      	mov	r3, r0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	@ 0x28
 800bed8:	af02      	add	r7, sp, #8
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	4613      	mov	r3, r2
 800bee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beea:	2b20      	cmp	r3, #32
 800beec:	d17b      	bne.n	800bfe6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <HAL_UART_Transmit+0x26>
 800bef4:	88fb      	ldrh	r3, [r7, #6]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d101      	bne.n	800befe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e074      	b.n	800bfe8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2221      	movs	r2, #33	@ 0x21
 800bf0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf0e:	f7f5 fcbd 	bl	800188c <HAL_GetTick>
 800bf12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	88fa      	ldrh	r2, [r7, #6]
 800bf18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	88fa      	ldrh	r2, [r7, #6]
 800bf20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf2c:	d108      	bne.n	800bf40 <HAL_UART_Transmit+0x6c>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d104      	bne.n	800bf40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	e003      	b.n	800bf48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf48:	e030      	b.n	800bfac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2200      	movs	r2, #0
 800bf52:	2180      	movs	r1, #128	@ 0x80
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 feff 	bl	800cd58 <UART_WaitOnFlagUntilTimeout>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e03d      	b.n	800bfe8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10b      	bne.n	800bf8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	3302      	adds	r3, #2
 800bf86:	61bb      	str	r3, [r7, #24]
 800bf88:	e007      	b.n	800bf9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	781a      	ldrb	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	3301      	adds	r3, #1
 800bf98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1c8      	bne.n	800bf4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2140      	movs	r1, #64	@ 0x40
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 fec8 	bl	800cd58 <UART_WaitOnFlagUntilTimeout>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e006      	b.n	800bfe8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e000      	b.n	800bfe8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfe6:	2302      	movs	r3, #2
  }
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bff4:	b092      	sub	sp, #72	@ 0x48
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	431a      	orrs	r2, r3
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	695b      	ldr	r3, [r3, #20]
 800c00e:	431a      	orrs	r2, r3
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	4313      	orrs	r3, r2
 800c016:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	4bbe      	ldr	r3, [pc, #760]	@ (800c318 <UART_SetConfig+0x328>)
 800c020:	4013      	ands	r3, r2
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c028:	430b      	orrs	r3, r1
 800c02a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4ab3      	ldr	r2, [pc, #716]	@ (800c31c <UART_SetConfig+0x32c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d004      	beq.n	800c05c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c058:	4313      	orrs	r3, r2
 800c05a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	4baf      	ldr	r3, [pc, #700]	@ (800c320 <UART_SetConfig+0x330>)
 800c064:	4013      	ands	r3, r2
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c06c:	430b      	orrs	r3, r1
 800c06e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c076:	f023 010f 	bic.w	r1, r3, #15
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	430a      	orrs	r2, r1
 800c084:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4aa6      	ldr	r2, [pc, #664]	@ (800c324 <UART_SetConfig+0x334>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d177      	bne.n	800c180 <UART_SetConfig+0x190>
 800c090:	4ba5      	ldr	r3, [pc, #660]	@ (800c328 <UART_SetConfig+0x338>)
 800c092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c098:	2b28      	cmp	r3, #40	@ 0x28
 800c09a:	d86d      	bhi.n	800c178 <UART_SetConfig+0x188>
 800c09c:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a4 <UART_SetConfig+0xb4>)
 800c09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a2:	bf00      	nop
 800c0a4:	0800c149 	.word	0x0800c149
 800c0a8:	0800c179 	.word	0x0800c179
 800c0ac:	0800c179 	.word	0x0800c179
 800c0b0:	0800c179 	.word	0x0800c179
 800c0b4:	0800c179 	.word	0x0800c179
 800c0b8:	0800c179 	.word	0x0800c179
 800c0bc:	0800c179 	.word	0x0800c179
 800c0c0:	0800c179 	.word	0x0800c179
 800c0c4:	0800c151 	.word	0x0800c151
 800c0c8:	0800c179 	.word	0x0800c179
 800c0cc:	0800c179 	.word	0x0800c179
 800c0d0:	0800c179 	.word	0x0800c179
 800c0d4:	0800c179 	.word	0x0800c179
 800c0d8:	0800c179 	.word	0x0800c179
 800c0dc:	0800c179 	.word	0x0800c179
 800c0e0:	0800c179 	.word	0x0800c179
 800c0e4:	0800c159 	.word	0x0800c159
 800c0e8:	0800c179 	.word	0x0800c179
 800c0ec:	0800c179 	.word	0x0800c179
 800c0f0:	0800c179 	.word	0x0800c179
 800c0f4:	0800c179 	.word	0x0800c179
 800c0f8:	0800c179 	.word	0x0800c179
 800c0fc:	0800c179 	.word	0x0800c179
 800c100:	0800c179 	.word	0x0800c179
 800c104:	0800c161 	.word	0x0800c161
 800c108:	0800c179 	.word	0x0800c179
 800c10c:	0800c179 	.word	0x0800c179
 800c110:	0800c179 	.word	0x0800c179
 800c114:	0800c179 	.word	0x0800c179
 800c118:	0800c179 	.word	0x0800c179
 800c11c:	0800c179 	.word	0x0800c179
 800c120:	0800c179 	.word	0x0800c179
 800c124:	0800c169 	.word	0x0800c169
 800c128:	0800c179 	.word	0x0800c179
 800c12c:	0800c179 	.word	0x0800c179
 800c130:	0800c179 	.word	0x0800c179
 800c134:	0800c179 	.word	0x0800c179
 800c138:	0800c179 	.word	0x0800c179
 800c13c:	0800c179 	.word	0x0800c179
 800c140:	0800c179 	.word	0x0800c179
 800c144:	0800c171 	.word	0x0800c171
 800c148:	2301      	movs	r3, #1
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14e:	e222      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c150:	2304      	movs	r3, #4
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c156:	e21e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c158:	2308      	movs	r3, #8
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15e:	e21a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c160:	2310      	movs	r3, #16
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c166:	e216      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c168:	2320      	movs	r3, #32
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e212      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c170:	2340      	movs	r3, #64	@ 0x40
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c176:	e20e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c178:	2380      	movs	r3, #128	@ 0x80
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e20a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a69      	ldr	r2, [pc, #420]	@ (800c32c <UART_SetConfig+0x33c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d130      	bne.n	800c1ec <UART_SetConfig+0x1fc>
 800c18a:	4b67      	ldr	r3, [pc, #412]	@ (800c328 <UART_SetConfig+0x338>)
 800c18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c18e:	f003 0307 	and.w	r3, r3, #7
 800c192:	2b05      	cmp	r3, #5
 800c194:	d826      	bhi.n	800c1e4 <UART_SetConfig+0x1f4>
 800c196:	a201      	add	r2, pc, #4	@ (adr r2, 800c19c <UART_SetConfig+0x1ac>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1b5 	.word	0x0800c1b5
 800c1a0:	0800c1bd 	.word	0x0800c1bd
 800c1a4:	0800c1c5 	.word	0x0800c1c5
 800c1a8:	0800c1cd 	.word	0x0800c1cd
 800c1ac:	0800c1d5 	.word	0x0800c1d5
 800c1b0:	0800c1dd 	.word	0x0800c1dd
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ba:	e1ec      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1bc:	2304      	movs	r3, #4
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e1e8      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1c4:	2308      	movs	r3, #8
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	e1e4      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1cc:	2310      	movs	r3, #16
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d2:	e1e0      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1d4:	2320      	movs	r3, #32
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e1dc      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1dc:	2340      	movs	r3, #64	@ 0x40
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e1d8      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1e4:	2380      	movs	r3, #128	@ 0x80
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e1d4      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a4f      	ldr	r2, [pc, #316]	@ (800c330 <UART_SetConfig+0x340>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d130      	bne.n	800c258 <UART_SetConfig+0x268>
 800c1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800c328 <UART_SetConfig+0x338>)
 800c1f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1fa:	f003 0307 	and.w	r3, r3, #7
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	d826      	bhi.n	800c250 <UART_SetConfig+0x260>
 800c202:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <UART_SetConfig+0x218>)
 800c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c208:	0800c221 	.word	0x0800c221
 800c20c:	0800c229 	.word	0x0800c229
 800c210:	0800c231 	.word	0x0800c231
 800c214:	0800c239 	.word	0x0800c239
 800c218:	0800c241 	.word	0x0800c241
 800c21c:	0800c249 	.word	0x0800c249
 800c220:	2300      	movs	r3, #0
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c226:	e1b6      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c228:	2304      	movs	r3, #4
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e1b2      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c230:	2308      	movs	r3, #8
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e1ae      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c238:	2310      	movs	r3, #16
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e1aa      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c240:	2320      	movs	r3, #32
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e1a6      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c248:	2340      	movs	r3, #64	@ 0x40
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e1a2      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c250:	2380      	movs	r3, #128	@ 0x80
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e19e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a35      	ldr	r2, [pc, #212]	@ (800c334 <UART_SetConfig+0x344>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d130      	bne.n	800c2c4 <UART_SetConfig+0x2d4>
 800c262:	4b31      	ldr	r3, [pc, #196]	@ (800c328 <UART_SetConfig+0x338>)
 800c264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	d826      	bhi.n	800c2bc <UART_SetConfig+0x2cc>
 800c26e:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <UART_SetConfig+0x284>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c28d 	.word	0x0800c28d
 800c278:	0800c295 	.word	0x0800c295
 800c27c:	0800c29d 	.word	0x0800c29d
 800c280:	0800c2a5 	.word	0x0800c2a5
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2b5 	.word	0x0800c2b5
 800c28c:	2300      	movs	r3, #0
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c292:	e180      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c294:	2304      	movs	r3, #4
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e17c      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c29c:	2308      	movs	r3, #8
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e178      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e174      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c2ac:	2320      	movs	r3, #32
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e170      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c2b4:	2340      	movs	r3, #64	@ 0x40
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e16c      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c2bc:	2380      	movs	r3, #128	@ 0x80
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e168      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c338 <UART_SetConfig+0x348>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d142      	bne.n	800c354 <UART_SetConfig+0x364>
 800c2ce:	4b16      	ldr	r3, [pc, #88]	@ (800c328 <UART_SetConfig+0x338>)
 800c2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	d838      	bhi.n	800c34c <UART_SetConfig+0x35c>
 800c2da:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e0 <UART_SetConfig+0x2f0>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c2f9 	.word	0x0800c2f9
 800c2e4:	0800c301 	.word	0x0800c301
 800c2e8:	0800c309 	.word	0x0800c309
 800c2ec:	0800c311 	.word	0x0800c311
 800c2f0:	0800c33d 	.word	0x0800c33d
 800c2f4:	0800c345 	.word	0x0800c345
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fe:	e14a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c300:	2304      	movs	r3, #4
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e146      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c308:	2308      	movs	r3, #8
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e142      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c310:	2310      	movs	r3, #16
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e13e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c318:	cfff69f3 	.word	0xcfff69f3
 800c31c:	58000c00 	.word	0x58000c00
 800c320:	11fff4ff 	.word	0x11fff4ff
 800c324:	40011000 	.word	0x40011000
 800c328:	58024400 	.word	0x58024400
 800c32c:	40004400 	.word	0x40004400
 800c330:	40004800 	.word	0x40004800
 800c334:	40004c00 	.word	0x40004c00
 800c338:	40005000 	.word	0x40005000
 800c33c:	2320      	movs	r3, #32
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e128      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c344:	2340      	movs	r3, #64	@ 0x40
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34a:	e124      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c34c:	2380      	movs	r3, #128	@ 0x80
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c352:	e120      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4acb      	ldr	r2, [pc, #812]	@ (800c688 <UART_SetConfig+0x698>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d176      	bne.n	800c44c <UART_SetConfig+0x45c>
 800c35e:	4bcb      	ldr	r3, [pc, #812]	@ (800c68c <UART_SetConfig+0x69c>)
 800c360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c366:	2b28      	cmp	r3, #40	@ 0x28
 800c368:	d86c      	bhi.n	800c444 <UART_SetConfig+0x454>
 800c36a:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <UART_SetConfig+0x380>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c415 	.word	0x0800c415
 800c374:	0800c445 	.word	0x0800c445
 800c378:	0800c445 	.word	0x0800c445
 800c37c:	0800c445 	.word	0x0800c445
 800c380:	0800c445 	.word	0x0800c445
 800c384:	0800c445 	.word	0x0800c445
 800c388:	0800c445 	.word	0x0800c445
 800c38c:	0800c445 	.word	0x0800c445
 800c390:	0800c41d 	.word	0x0800c41d
 800c394:	0800c445 	.word	0x0800c445
 800c398:	0800c445 	.word	0x0800c445
 800c39c:	0800c445 	.word	0x0800c445
 800c3a0:	0800c445 	.word	0x0800c445
 800c3a4:	0800c445 	.word	0x0800c445
 800c3a8:	0800c445 	.word	0x0800c445
 800c3ac:	0800c445 	.word	0x0800c445
 800c3b0:	0800c425 	.word	0x0800c425
 800c3b4:	0800c445 	.word	0x0800c445
 800c3b8:	0800c445 	.word	0x0800c445
 800c3bc:	0800c445 	.word	0x0800c445
 800c3c0:	0800c445 	.word	0x0800c445
 800c3c4:	0800c445 	.word	0x0800c445
 800c3c8:	0800c445 	.word	0x0800c445
 800c3cc:	0800c445 	.word	0x0800c445
 800c3d0:	0800c42d 	.word	0x0800c42d
 800c3d4:	0800c445 	.word	0x0800c445
 800c3d8:	0800c445 	.word	0x0800c445
 800c3dc:	0800c445 	.word	0x0800c445
 800c3e0:	0800c445 	.word	0x0800c445
 800c3e4:	0800c445 	.word	0x0800c445
 800c3e8:	0800c445 	.word	0x0800c445
 800c3ec:	0800c445 	.word	0x0800c445
 800c3f0:	0800c435 	.word	0x0800c435
 800c3f4:	0800c445 	.word	0x0800c445
 800c3f8:	0800c445 	.word	0x0800c445
 800c3fc:	0800c445 	.word	0x0800c445
 800c400:	0800c445 	.word	0x0800c445
 800c404:	0800c445 	.word	0x0800c445
 800c408:	0800c445 	.word	0x0800c445
 800c40c:	0800c445 	.word	0x0800c445
 800c410:	0800c43d 	.word	0x0800c43d
 800c414:	2301      	movs	r3, #1
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41a:	e0bc      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c41c:	2304      	movs	r3, #4
 800c41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c422:	e0b8      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c424:	2308      	movs	r3, #8
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42a:	e0b4      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c42c:	2310      	movs	r3, #16
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e0b0      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c434:	2320      	movs	r3, #32
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e0ac      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c43c:	2340      	movs	r3, #64	@ 0x40
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e0a8      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c444:	2380      	movs	r3, #128	@ 0x80
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e0a4      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a8f      	ldr	r2, [pc, #572]	@ (800c690 <UART_SetConfig+0x6a0>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d130      	bne.n	800c4b8 <UART_SetConfig+0x4c8>
 800c456:	4b8d      	ldr	r3, [pc, #564]	@ (800c68c <UART_SetConfig+0x69c>)
 800c458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45a:	f003 0307 	and.w	r3, r3, #7
 800c45e:	2b05      	cmp	r3, #5
 800c460:	d826      	bhi.n	800c4b0 <UART_SetConfig+0x4c0>
 800c462:	a201      	add	r2, pc, #4	@ (adr r2, 800c468 <UART_SetConfig+0x478>)
 800c464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c468:	0800c481 	.word	0x0800c481
 800c46c:	0800c489 	.word	0x0800c489
 800c470:	0800c491 	.word	0x0800c491
 800c474:	0800c499 	.word	0x0800c499
 800c478:	0800c4a1 	.word	0x0800c4a1
 800c47c:	0800c4a9 	.word	0x0800c4a9
 800c480:	2300      	movs	r3, #0
 800c482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c486:	e086      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c488:	2304      	movs	r3, #4
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e082      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c490:	2308      	movs	r3, #8
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e07e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c498:	2310      	movs	r3, #16
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e07a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e076      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4a8:	2340      	movs	r3, #64	@ 0x40
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e072      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4b0:	2380      	movs	r3, #128	@ 0x80
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e06e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a75      	ldr	r2, [pc, #468]	@ (800c694 <UART_SetConfig+0x6a4>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d130      	bne.n	800c524 <UART_SetConfig+0x534>
 800c4c2:	4b72      	ldr	r3, [pc, #456]	@ (800c68c <UART_SetConfig+0x69c>)
 800c4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	2b05      	cmp	r3, #5
 800c4cc:	d826      	bhi.n	800c51c <UART_SetConfig+0x52c>
 800c4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d4 <UART_SetConfig+0x4e4>)
 800c4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d4:	0800c4ed 	.word	0x0800c4ed
 800c4d8:	0800c4f5 	.word	0x0800c4f5
 800c4dc:	0800c4fd 	.word	0x0800c4fd
 800c4e0:	0800c505 	.word	0x0800c505
 800c4e4:	0800c50d 	.word	0x0800c50d
 800c4e8:	0800c515 	.word	0x0800c515
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f2:	e050      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4f4:	2304      	movs	r3, #4
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fa:	e04c      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c4fc:	2308      	movs	r3, #8
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c502:	e048      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c504:	2310      	movs	r3, #16
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e044      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c50c:	2320      	movs	r3, #32
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e040      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c514:	2340      	movs	r3, #64	@ 0x40
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e03c      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c51c:	2380      	movs	r3, #128	@ 0x80
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e038      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a5b      	ldr	r2, [pc, #364]	@ (800c698 <UART_SetConfig+0x6a8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d130      	bne.n	800c590 <UART_SetConfig+0x5a0>
 800c52e:	4b57      	ldr	r3, [pc, #348]	@ (800c68c <UART_SetConfig+0x69c>)
 800c530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b05      	cmp	r3, #5
 800c538:	d826      	bhi.n	800c588 <UART_SetConfig+0x598>
 800c53a:	a201      	add	r2, pc, #4	@ (adr r2, 800c540 <UART_SetConfig+0x550>)
 800c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c540:	0800c559 	.word	0x0800c559
 800c544:	0800c561 	.word	0x0800c561
 800c548:	0800c569 	.word	0x0800c569
 800c54c:	0800c571 	.word	0x0800c571
 800c550:	0800c579 	.word	0x0800c579
 800c554:	0800c581 	.word	0x0800c581
 800c558:	2302      	movs	r3, #2
 800c55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55e:	e01a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c560:	2304      	movs	r3, #4
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c566:	e016      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c568:	2308      	movs	r3, #8
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56e:	e012      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c570:	2310      	movs	r3, #16
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e00e      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c578:	2320      	movs	r3, #32
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e00a      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c580:	2340      	movs	r3, #64	@ 0x40
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e006      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c588:	2380      	movs	r3, #128	@ 0x80
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e002      	b.n	800c596 <UART_SetConfig+0x5a6>
 800c590:	2380      	movs	r3, #128	@ 0x80
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a3f      	ldr	r2, [pc, #252]	@ (800c698 <UART_SetConfig+0x6a8>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	f040 80f8 	bne.w	800c792 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	2b20      	cmp	r3, #32
 800c5a8:	dc46      	bgt.n	800c638 <UART_SetConfig+0x648>
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	f2c0 8082 	blt.w	800c6b4 <UART_SetConfig+0x6c4>
 800c5b0:	3b02      	subs	r3, #2
 800c5b2:	2b1e      	cmp	r3, #30
 800c5b4:	d87e      	bhi.n	800c6b4 <UART_SetConfig+0x6c4>
 800c5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5bc <UART_SetConfig+0x5cc>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c63f 	.word	0x0800c63f
 800c5c0:	0800c6b5 	.word	0x0800c6b5
 800c5c4:	0800c647 	.word	0x0800c647
 800c5c8:	0800c6b5 	.word	0x0800c6b5
 800c5cc:	0800c6b5 	.word	0x0800c6b5
 800c5d0:	0800c6b5 	.word	0x0800c6b5
 800c5d4:	0800c657 	.word	0x0800c657
 800c5d8:	0800c6b5 	.word	0x0800c6b5
 800c5dc:	0800c6b5 	.word	0x0800c6b5
 800c5e0:	0800c6b5 	.word	0x0800c6b5
 800c5e4:	0800c6b5 	.word	0x0800c6b5
 800c5e8:	0800c6b5 	.word	0x0800c6b5
 800c5ec:	0800c6b5 	.word	0x0800c6b5
 800c5f0:	0800c6b5 	.word	0x0800c6b5
 800c5f4:	0800c667 	.word	0x0800c667
 800c5f8:	0800c6b5 	.word	0x0800c6b5
 800c5fc:	0800c6b5 	.word	0x0800c6b5
 800c600:	0800c6b5 	.word	0x0800c6b5
 800c604:	0800c6b5 	.word	0x0800c6b5
 800c608:	0800c6b5 	.word	0x0800c6b5
 800c60c:	0800c6b5 	.word	0x0800c6b5
 800c610:	0800c6b5 	.word	0x0800c6b5
 800c614:	0800c6b5 	.word	0x0800c6b5
 800c618:	0800c6b5 	.word	0x0800c6b5
 800c61c:	0800c6b5 	.word	0x0800c6b5
 800c620:	0800c6b5 	.word	0x0800c6b5
 800c624:	0800c6b5 	.word	0x0800c6b5
 800c628:	0800c6b5 	.word	0x0800c6b5
 800c62c:	0800c6b5 	.word	0x0800c6b5
 800c630:	0800c6b5 	.word	0x0800c6b5
 800c634:	0800c6a7 	.word	0x0800c6a7
 800c638:	2b40      	cmp	r3, #64	@ 0x40
 800c63a:	d037      	beq.n	800c6ac <UART_SetConfig+0x6bc>
 800c63c:	e03a      	b.n	800c6b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c63e:	f7fe fbbd 	bl	800adbc <HAL_RCCEx_GetD3PCLK1Freq>
 800c642:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c644:	e03c      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe fbcc 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c654:	e034      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c656:	f107 0318 	add.w	r3, r7, #24
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fe fd18 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c664:	e02c      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c666:	4b09      	ldr	r3, [pc, #36]	@ (800c68c <UART_SetConfig+0x69c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 0320 	and.w	r3, r3, #32
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d016      	beq.n	800c6a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c672:	4b06      	ldr	r3, [pc, #24]	@ (800c68c <UART_SetConfig+0x69c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	08db      	lsrs	r3, r3, #3
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	4a07      	ldr	r2, [pc, #28]	@ (800c69c <UART_SetConfig+0x6ac>)
 800c67e:	fa22 f303 	lsr.w	r3, r2, r3
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c684:	e01c      	b.n	800c6c0 <UART_SetConfig+0x6d0>
 800c686:	bf00      	nop
 800c688:	40011400 	.word	0x40011400
 800c68c:	58024400 	.word	0x58024400
 800c690:	40007800 	.word	0x40007800
 800c694:	40007c00 	.word	0x40007c00
 800c698:	58000c00 	.word	0x58000c00
 800c69c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6a0:	4b9d      	ldr	r3, [pc, #628]	@ (800c918 <UART_SetConfig+0x928>)
 800c6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6a4:	e00c      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6a6:	4b9d      	ldr	r3, [pc, #628]	@ (800c91c <UART_SetConfig+0x92c>)
 800c6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6aa:	e009      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b2:	e005      	b.n	800c6c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c6be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 81de 	beq.w	800ca84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6cc:	4a94      	ldr	r2, [pc, #592]	@ (800c920 <UART_SetConfig+0x930>)
 800c6ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d305      	bcc.n	800c6f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d903      	bls.n	800c700 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6fe:	e1c1      	b.n	800ca84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c702:	2200      	movs	r2, #0
 800c704:	60bb      	str	r3, [r7, #8]
 800c706:	60fa      	str	r2, [r7, #12]
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70c:	4a84      	ldr	r2, [pc, #528]	@ (800c920 <UART_SetConfig+0x930>)
 800c70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c712:	b29b      	uxth	r3, r3
 800c714:	2200      	movs	r2, #0
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c722:	f7f3 fe35 	bl	8000390 <__aeabi_uldivmod>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	4610      	mov	r0, r2
 800c72c:	4619      	mov	r1, r3
 800c72e:	f04f 0200 	mov.w	r2, #0
 800c732:	f04f 0300 	mov.w	r3, #0
 800c736:	020b      	lsls	r3, r1, #8
 800c738:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c73c:	0202      	lsls	r2, r0, #8
 800c73e:	6979      	ldr	r1, [r7, #20]
 800c740:	6849      	ldr	r1, [r1, #4]
 800c742:	0849      	lsrs	r1, r1, #1
 800c744:	2000      	movs	r0, #0
 800c746:	460c      	mov	r4, r1
 800c748:	4605      	mov	r5, r0
 800c74a:	eb12 0804 	adds.w	r8, r2, r4
 800c74e:	eb43 0905 	adc.w	r9, r3, r5
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	469a      	mov	sl, r3
 800c75a:	4693      	mov	fp, r2
 800c75c:	4652      	mov	r2, sl
 800c75e:	465b      	mov	r3, fp
 800c760:	4640      	mov	r0, r8
 800c762:	4649      	mov	r1, r9
 800c764:	f7f3 fe14 	bl	8000390 <__aeabi_uldivmod>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4613      	mov	r3, r2
 800c76e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c776:	d308      	bcc.n	800c78a <UART_SetConfig+0x79a>
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c77e:	d204      	bcs.n	800c78a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c786:	60da      	str	r2, [r3, #12]
 800c788:	e17c      	b.n	800ca84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c790:	e178      	b.n	800ca84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c79a:	f040 80c5 	bne.w	800c928 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c79e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	dc48      	bgt.n	800c838 <UART_SetConfig+0x848>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	db7b      	blt.n	800c8a2 <UART_SetConfig+0x8b2>
 800c7aa:	2b20      	cmp	r3, #32
 800c7ac:	d879      	bhi.n	800c8a2 <UART_SetConfig+0x8b2>
 800c7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <UART_SetConfig+0x7c4>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c83f 	.word	0x0800c83f
 800c7b8:	0800c847 	.word	0x0800c847
 800c7bc:	0800c8a3 	.word	0x0800c8a3
 800c7c0:	0800c8a3 	.word	0x0800c8a3
 800c7c4:	0800c84f 	.word	0x0800c84f
 800c7c8:	0800c8a3 	.word	0x0800c8a3
 800c7cc:	0800c8a3 	.word	0x0800c8a3
 800c7d0:	0800c8a3 	.word	0x0800c8a3
 800c7d4:	0800c85f 	.word	0x0800c85f
 800c7d8:	0800c8a3 	.word	0x0800c8a3
 800c7dc:	0800c8a3 	.word	0x0800c8a3
 800c7e0:	0800c8a3 	.word	0x0800c8a3
 800c7e4:	0800c8a3 	.word	0x0800c8a3
 800c7e8:	0800c8a3 	.word	0x0800c8a3
 800c7ec:	0800c8a3 	.word	0x0800c8a3
 800c7f0:	0800c8a3 	.word	0x0800c8a3
 800c7f4:	0800c86f 	.word	0x0800c86f
 800c7f8:	0800c8a3 	.word	0x0800c8a3
 800c7fc:	0800c8a3 	.word	0x0800c8a3
 800c800:	0800c8a3 	.word	0x0800c8a3
 800c804:	0800c8a3 	.word	0x0800c8a3
 800c808:	0800c8a3 	.word	0x0800c8a3
 800c80c:	0800c8a3 	.word	0x0800c8a3
 800c810:	0800c8a3 	.word	0x0800c8a3
 800c814:	0800c8a3 	.word	0x0800c8a3
 800c818:	0800c8a3 	.word	0x0800c8a3
 800c81c:	0800c8a3 	.word	0x0800c8a3
 800c820:	0800c8a3 	.word	0x0800c8a3
 800c824:	0800c8a3 	.word	0x0800c8a3
 800c828:	0800c8a3 	.word	0x0800c8a3
 800c82c:	0800c8a3 	.word	0x0800c8a3
 800c830:	0800c8a3 	.word	0x0800c8a3
 800c834:	0800c895 	.word	0x0800c895
 800c838:	2b40      	cmp	r3, #64	@ 0x40
 800c83a:	d02e      	beq.n	800c89a <UART_SetConfig+0x8aa>
 800c83c:	e031      	b.n	800c8a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c83e:	f7fc fac5 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 800c842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c844:	e033      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c846:	f7fc fad7 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
 800c84a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c84c:	e02f      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c84e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fac8 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c85c:	e027      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fc14 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86c:	e01f      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86e:	4b2d      	ldr	r3, [pc, #180]	@ (800c924 <UART_SetConfig+0x934>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 0320 	and.w	r3, r3, #32
 800c876:	2b00      	cmp	r3, #0
 800c878:	d009      	beq.n	800c88e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c87a:	4b2a      	ldr	r3, [pc, #168]	@ (800c924 <UART_SetConfig+0x934>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	08db      	lsrs	r3, r3, #3
 800c880:	f003 0303 	and.w	r3, r3, #3
 800c884:	4a24      	ldr	r2, [pc, #144]	@ (800c918 <UART_SetConfig+0x928>)
 800c886:	fa22 f303 	lsr.w	r3, r2, r3
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c88c:	e00f      	b.n	800c8ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c88e:	4b22      	ldr	r3, [pc, #136]	@ (800c918 <UART_SetConfig+0x928>)
 800c890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c892:	e00c      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c894:	4b21      	ldr	r3, [pc, #132]	@ (800c91c <UART_SetConfig+0x92c>)
 800c896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c898:	e009      	b.n	800c8ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c89a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8a0:	e005      	b.n	800c8ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 80e7 	beq.w	800ca84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ba:	4a19      	ldr	r2, [pc, #100]	@ (800c920 <UART_SetConfig+0x930>)
 800c8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8c8:	005a      	lsls	r2, r3, #1
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	085b      	lsrs	r3, r3, #1
 800c8d0:	441a      	add	r2, r3
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8de:	2b0f      	cmp	r3, #15
 800c8e0:	d916      	bls.n	800c910 <UART_SetConfig+0x920>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8e8:	d212      	bcs.n	800c910 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	f023 030f 	bic.w	r3, r3, #15
 800c8f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	085b      	lsrs	r3, r3, #1
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c902:	4313      	orrs	r3, r2
 800c904:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c90c:	60da      	str	r2, [r3, #12]
 800c90e:	e0b9      	b.n	800ca84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c916:	e0b5      	b.n	800ca84 <UART_SetConfig+0xa94>
 800c918:	03d09000 	.word	0x03d09000
 800c91c:	003d0900 	.word	0x003d0900
 800c920:	080133ac 	.word	0x080133ac
 800c924:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c928:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	dc49      	bgt.n	800c9c4 <UART_SetConfig+0x9d4>
 800c930:	2b00      	cmp	r3, #0
 800c932:	db7c      	blt.n	800ca2e <UART_SetConfig+0xa3e>
 800c934:	2b20      	cmp	r3, #32
 800c936:	d87a      	bhi.n	800ca2e <UART_SetConfig+0xa3e>
 800c938:	a201      	add	r2, pc, #4	@ (adr r2, 800c940 <UART_SetConfig+0x950>)
 800c93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93e:	bf00      	nop
 800c940:	0800c9cb 	.word	0x0800c9cb
 800c944:	0800c9d3 	.word	0x0800c9d3
 800c948:	0800ca2f 	.word	0x0800ca2f
 800c94c:	0800ca2f 	.word	0x0800ca2f
 800c950:	0800c9db 	.word	0x0800c9db
 800c954:	0800ca2f 	.word	0x0800ca2f
 800c958:	0800ca2f 	.word	0x0800ca2f
 800c95c:	0800ca2f 	.word	0x0800ca2f
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800ca2f 	.word	0x0800ca2f
 800c968:	0800ca2f 	.word	0x0800ca2f
 800c96c:	0800ca2f 	.word	0x0800ca2f
 800c970:	0800ca2f 	.word	0x0800ca2f
 800c974:	0800ca2f 	.word	0x0800ca2f
 800c978:	0800ca2f 	.word	0x0800ca2f
 800c97c:	0800ca2f 	.word	0x0800ca2f
 800c980:	0800c9fb 	.word	0x0800c9fb
 800c984:	0800ca2f 	.word	0x0800ca2f
 800c988:	0800ca2f 	.word	0x0800ca2f
 800c98c:	0800ca2f 	.word	0x0800ca2f
 800c990:	0800ca2f 	.word	0x0800ca2f
 800c994:	0800ca2f 	.word	0x0800ca2f
 800c998:	0800ca2f 	.word	0x0800ca2f
 800c99c:	0800ca2f 	.word	0x0800ca2f
 800c9a0:	0800ca2f 	.word	0x0800ca2f
 800c9a4:	0800ca2f 	.word	0x0800ca2f
 800c9a8:	0800ca2f 	.word	0x0800ca2f
 800c9ac:	0800ca2f 	.word	0x0800ca2f
 800c9b0:	0800ca2f 	.word	0x0800ca2f
 800c9b4:	0800ca2f 	.word	0x0800ca2f
 800c9b8:	0800ca2f 	.word	0x0800ca2f
 800c9bc:	0800ca2f 	.word	0x0800ca2f
 800c9c0:	0800ca21 	.word	0x0800ca21
 800c9c4:	2b40      	cmp	r3, #64	@ 0x40
 800c9c6:	d02e      	beq.n	800ca26 <UART_SetConfig+0xa36>
 800c9c8:	e031      	b.n	800ca2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9ca:	f7fc f9ff 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 800c9ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9d0:	e033      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9d2:	f7fc fa11 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
 800c9d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9d8:	e02f      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fa02 	bl	800ade8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e8:	e027      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ea:	f107 0318 	add.w	r3, r7, #24
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fb4e 	bl	800b090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f8:	e01f      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800cab0 <UART_SetConfig+0xac0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d009      	beq.n	800ca1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca06:	4b2a      	ldr	r3, [pc, #168]	@ (800cab0 <UART_SetConfig+0xac0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	f003 0303 	and.w	r3, r3, #3
 800ca10:	4a28      	ldr	r2, [pc, #160]	@ (800cab4 <UART_SetConfig+0xac4>)
 800ca12:	fa22 f303 	lsr.w	r3, r2, r3
 800ca16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca18:	e00f      	b.n	800ca3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca1a:	4b26      	ldr	r3, [pc, #152]	@ (800cab4 <UART_SetConfig+0xac4>)
 800ca1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca1e:	e00c      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca20:	4b25      	ldr	r3, [pc, #148]	@ (800cab8 <UART_SetConfig+0xac8>)
 800ca22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca24:	e009      	b.n	800ca3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca2c:	e005      	b.n	800ca3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca38:	bf00      	nop
    }

    if (pclk != 0U)
 800ca3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d021      	beq.n	800ca84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca44:	4a1d      	ldr	r2, [pc, #116]	@ (800cabc <UART_SetConfig+0xacc>)
 800ca46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	085b      	lsrs	r3, r3, #1
 800ca58:	441a      	add	r2, r3
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca66:	2b0f      	cmp	r3, #15
 800ca68:	d909      	bls.n	800ca7e <UART_SetConfig+0xa8e>
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca70:	d205      	bcs.n	800ca7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	60da      	str	r2, [r3, #12]
 800ca7c:	e002      	b.n	800ca84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2200      	movs	r2, #0
 800ca98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800caa0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3748      	adds	r7, #72	@ 0x48
 800caa8:	46bd      	mov	sp, r7
 800caaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caae:	bf00      	nop
 800cab0:	58024400 	.word	0x58024400
 800cab4:	03d09000 	.word	0x03d09000
 800cab8:	003d0900 	.word	0x003d0900
 800cabc:	080133ac 	.word	0x080133ac

0800cac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cacc:	f003 0308 	and.w	r3, r3, #8
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00a      	beq.n	800caea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00a      	beq.n	800cb0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb10:	f003 0302 	and.w	r3, r3, #2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	430a      	orrs	r2, r1
 800cb2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb32:	f003 0304 	and.w	r3, r3, #4
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00a      	beq.n	800cb50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb54:	f003 0310 	and.w	r3, r3, #16
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00a      	beq.n	800cb72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	430a      	orrs	r2, r1
 800cb70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb76:	f003 0320 	and.w	r3, r3, #32
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	430a      	orrs	r2, r1
 800cb92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01a      	beq.n	800cbd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbbe:	d10a      	bne.n	800cbd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00a      	beq.n	800cbf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	430a      	orrs	r2, r1
 800cbf6:	605a      	str	r2, [r3, #4]
  }
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b098      	sub	sp, #96	@ 0x60
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc14:	f7f4 fe3a 	bl	800188c <HAL_GetTick>
 800cc18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0308 	and.w	r3, r3, #8
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d12f      	bne.n	800cc88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc30:	2200      	movs	r2, #0
 800cc32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f88e 	bl	800cd58 <UART_WaitOnFlagUntilTimeout>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d022      	beq.n	800cc88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	e853 3f00 	ldrex	r3, [r3]
 800cc4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc56:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc60:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc68:	e841 2300 	strex	r3, r2, [r1]
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e6      	bne.n	800cc42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc84:	2303      	movs	r3, #3
 800cc86:	e063      	b.n	800cd50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0304 	and.w	r3, r3, #4
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d149      	bne.n	800cd2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f857 	bl	800cd58 <UART_WaitOnFlagUntilTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d03c      	beq.n	800cd2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	e853 3f00 	ldrex	r3, [r3]
 800ccbc:	623b      	str	r3, [r7, #32]
   return(result);
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccce:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccd6:	e841 2300 	strex	r3, r2, [r1]
 800ccda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e6      	bne.n	800ccb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	e853 3f00 	ldrex	r3, [r3]
 800ccf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3308      	adds	r3, #8
 800cd00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd02:	61fa      	str	r2, [r7, #28]
 800cd04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd06:	69b9      	ldr	r1, [r7, #24]
 800cd08:	69fa      	ldr	r2, [r7, #28]
 800cd0a:	e841 2300 	strex	r3, r2, [r1]
 800cd0e:	617b      	str	r3, [r7, #20]
   return(result);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e5      	bne.n	800cce2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e012      	b.n	800cd50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2220      	movs	r2, #32
 800cd36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3758      	adds	r7, #88	@ 0x58
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	4613      	mov	r3, r2
 800cd66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd68:	e04f      	b.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d04b      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd72:	f7f4 fd8b 	bl	800188c <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	69ba      	ldr	r2, [r7, #24]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d302      	bcc.n	800cd88 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e04e      	b.n	800ce2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 0304 	and.w	r3, r3, #4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d037      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2b80      	cmp	r3, #128	@ 0x80
 800cd9e:	d034      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2b40      	cmp	r3, #64	@ 0x40
 800cda4:	d031      	beq.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	f003 0308 	and.w	r3, r3, #8
 800cdb0:	2b08      	cmp	r3, #8
 800cdb2:	d110      	bne.n	800cdd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2208      	movs	r2, #8
 800cdba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 f839 	bl	800ce34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2208      	movs	r2, #8
 800cdc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e029      	b.n	800ce2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cde0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cde4:	d111      	bne.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 f81f 	bl	800ce34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e00f      	b.n	800ce2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	69da      	ldr	r2, [r3, #28]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4013      	ands	r3, r2
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	bf0c      	ite	eq
 800ce1a:	2301      	moveq	r3, #1
 800ce1c:	2300      	movne	r3, #0
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	461a      	mov	r2, r3
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d0a0      	beq.n	800cd6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b095      	sub	sp, #84	@ 0x54
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce44:	e853 3f00 	ldrex	r3, [r3]
 800ce48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce62:	e841 2300 	strex	r3, r2, [r1]
 800ce66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1e6      	bne.n	800ce3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3308      	adds	r3, #8
 800ce74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	e853 3f00 	ldrex	r3, [r3]
 800ce7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce7e:	69fa      	ldr	r2, [r7, #28]
 800ce80:	4b1e      	ldr	r3, [pc, #120]	@ (800cefc <UART_EndRxTransfer+0xc8>)
 800ce82:	4013      	ands	r3, r2
 800ce84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e5      	bne.n	800ce6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d118      	bne.n	800cedc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f023 0310 	bic.w	r3, r3, #16
 800cebe:	647b      	str	r3, [r7, #68]	@ 0x44
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	461a      	mov	r2, r3
 800cec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec8:	61bb      	str	r3, [r7, #24]
 800ceca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	6979      	ldr	r1, [r7, #20]
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	613b      	str	r3, [r7, #16]
   return(result);
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e6      	bne.n	800ceaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2220      	movs	r2, #32
 800cee0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cef0:	bf00      	nop
 800cef2:	3754      	adds	r7, #84	@ 0x54
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	effffffe 	.word	0xeffffffe

0800cf00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf12:	2302      	movs	r3, #2
 800cf14:	e027      	b.n	800cf66 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2224      	movs	r2, #36	@ 0x24
 800cf22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f022 0201 	bic.w	r2, r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2220      	movs	r2, #32
 800cf58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d101      	bne.n	800cf8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf86:	2302      	movs	r3, #2
 800cf88:	e02d      	b.n	800cfe6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2224      	movs	r2, #36	@ 0x24
 800cf96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f022 0201 	bic.w	r2, r2, #1
 800cfb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f850 	bl	800d06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d101      	bne.n	800d006 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d002:	2302      	movs	r3, #2
 800d004:	e02d      	b.n	800d062 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2224      	movs	r2, #36	@ 0x24
 800d012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f022 0201 	bic.w	r2, r2, #1
 800d02c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f812 	bl	800d06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2220      	movs	r2, #32
 800d054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
	...

0800d06c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d108      	bne.n	800d08e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2201      	movs	r2, #1
 800d088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d08c:	e031      	b.n	800d0f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d08e:	2310      	movs	r3, #16
 800d090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d092:	2310      	movs	r3, #16
 800d094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	0e5b      	lsrs	r3, r3, #25
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	f003 0307 	and.w	r3, r3, #7
 800d0a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	0f5b      	lsrs	r3, r3, #29
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	f003 0307 	and.w	r3, r3, #7
 800d0b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
 800d0b8:	7b3a      	ldrb	r2, [r7, #12]
 800d0ba:	4911      	ldr	r1, [pc, #68]	@ (800d100 <UARTEx_SetNbDataToProcess+0x94>)
 800d0bc:	5c8a      	ldrb	r2, [r1, r2]
 800d0be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0c2:	7b3a      	ldrb	r2, [r7, #12]
 800d0c4:	490f      	ldr	r1, [pc, #60]	@ (800d104 <UARTEx_SetNbDataToProcess+0x98>)
 800d0c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	7b7a      	ldrb	r2, [r7, #13]
 800d0d8:	4909      	ldr	r1, [pc, #36]	@ (800d100 <UARTEx_SetNbDataToProcess+0x94>)
 800d0da:	5c8a      	ldrb	r2, [r1, r2]
 800d0dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d0e0:	7b7a      	ldrb	r2, [r7, #13]
 800d0e2:	4908      	ldr	r1, [pc, #32]	@ (800d104 <UARTEx_SetNbDataToProcess+0x98>)
 800d0e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d0f2:	bf00      	nop
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	080133c4 	.word	0x080133c4
 800d104:	080133cc 	.word	0x080133cc

0800d108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d108:	b084      	sub	sp, #16
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	f107 001c 	add.w	r0, r7, #28
 800d116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d11a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d121      	bne.n	800d166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d126:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68da      	ldr	r2, [r3, #12]
 800d132:	4b2c      	ldr	r3, [pc, #176]	@ (800d1e4 <USB_CoreInit+0xdc>)
 800d134:	4013      	ands	r3, r2
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d146:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d105      	bne.n	800d15a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f001 fafa 	bl	800e754 <USB_CoreReset>
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
 800d164:	e01b      	b.n	800d19e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 faee 	bl	800e754 <USB_CoreReset>
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d17c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d188:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d190:	e005      	b.n	800d19e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d19e:	7fbb      	ldrb	r3, [r7, #30]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d116      	bne.n	800d1d2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e8 <USB_CoreInit+0xe0>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	f043 0206 	orr.w	r2, r3, #6
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f043 0220 	orr.w	r2, r3, #32
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1de:	b004      	add	sp, #16
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	ffbdffbf 	.word	0xffbdffbf
 800d1e8:	03ee0000 	.word	0x03ee0000

0800d1ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b087      	sub	sp, #28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d165      	bne.n	800d2cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	4a41      	ldr	r2, [pc, #260]	@ (800d308 <USB_SetTurnaroundTime+0x11c>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d906      	bls.n	800d216 <USB_SetTurnaroundTime+0x2a>
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	4a40      	ldr	r2, [pc, #256]	@ (800d30c <USB_SetTurnaroundTime+0x120>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d202      	bcs.n	800d216 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d210:	230f      	movs	r3, #15
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e062      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	4a3c      	ldr	r2, [pc, #240]	@ (800d30c <USB_SetTurnaroundTime+0x120>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d306      	bcc.n	800d22c <USB_SetTurnaroundTime+0x40>
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	4a3b      	ldr	r2, [pc, #236]	@ (800d310 <USB_SetTurnaroundTime+0x124>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d202      	bcs.n	800d22c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d226:	230e      	movs	r3, #14
 800d228:	617b      	str	r3, [r7, #20]
 800d22a:	e057      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	4a38      	ldr	r2, [pc, #224]	@ (800d310 <USB_SetTurnaroundTime+0x124>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d306      	bcc.n	800d242 <USB_SetTurnaroundTime+0x56>
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	4a37      	ldr	r2, [pc, #220]	@ (800d314 <USB_SetTurnaroundTime+0x128>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d202      	bcs.n	800d242 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d23c:	230d      	movs	r3, #13
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	e04c      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	4a33      	ldr	r2, [pc, #204]	@ (800d314 <USB_SetTurnaroundTime+0x128>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d306      	bcc.n	800d258 <USB_SetTurnaroundTime+0x6c>
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	4a32      	ldr	r2, [pc, #200]	@ (800d318 <USB_SetTurnaroundTime+0x12c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d802      	bhi.n	800d258 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d252:	230c      	movs	r3, #12
 800d254:	617b      	str	r3, [r7, #20]
 800d256:	e041      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	4a2f      	ldr	r2, [pc, #188]	@ (800d318 <USB_SetTurnaroundTime+0x12c>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d906      	bls.n	800d26e <USB_SetTurnaroundTime+0x82>
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	4a2e      	ldr	r2, [pc, #184]	@ (800d31c <USB_SetTurnaroundTime+0x130>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d802      	bhi.n	800d26e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d268:	230b      	movs	r3, #11
 800d26a:	617b      	str	r3, [r7, #20]
 800d26c:	e036      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	4a2a      	ldr	r2, [pc, #168]	@ (800d31c <USB_SetTurnaroundTime+0x130>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d906      	bls.n	800d284 <USB_SetTurnaroundTime+0x98>
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	4a29      	ldr	r2, [pc, #164]	@ (800d320 <USB_SetTurnaroundTime+0x134>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d802      	bhi.n	800d284 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d27e:	230a      	movs	r3, #10
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	e02b      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	4a26      	ldr	r2, [pc, #152]	@ (800d320 <USB_SetTurnaroundTime+0x134>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d906      	bls.n	800d29a <USB_SetTurnaroundTime+0xae>
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	4a25      	ldr	r2, [pc, #148]	@ (800d324 <USB_SetTurnaroundTime+0x138>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d202      	bcs.n	800d29a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d294:	2309      	movs	r3, #9
 800d296:	617b      	str	r3, [r7, #20]
 800d298:	e020      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	4a21      	ldr	r2, [pc, #132]	@ (800d324 <USB_SetTurnaroundTime+0x138>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d306      	bcc.n	800d2b0 <USB_SetTurnaroundTime+0xc4>
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	4a20      	ldr	r2, [pc, #128]	@ (800d328 <USB_SetTurnaroundTime+0x13c>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d802      	bhi.n	800d2b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d2aa:	2308      	movs	r3, #8
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e015      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	4a1d      	ldr	r2, [pc, #116]	@ (800d328 <USB_SetTurnaroundTime+0x13c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d906      	bls.n	800d2c6 <USB_SetTurnaroundTime+0xda>
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d32c <USB_SetTurnaroundTime+0x140>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d202      	bcs.n	800d2c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d2c0:	2307      	movs	r3, #7
 800d2c2:	617b      	str	r3, [r7, #20]
 800d2c4:	e00a      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d2c6:	2306      	movs	r3, #6
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	e007      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d102      	bne.n	800d2d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d2d2:	2309      	movs	r3, #9
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	e001      	b.n	800d2dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d2d8:	2309      	movs	r3, #9
 800d2da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	029b      	lsls	r3, r3, #10
 800d2f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	00d8acbf 	.word	0x00d8acbf
 800d30c:	00e4e1c0 	.word	0x00e4e1c0
 800d310:	00f42400 	.word	0x00f42400
 800d314:	01067380 	.word	0x01067380
 800d318:	011a499f 	.word	0x011a499f
 800d31c:	01312cff 	.word	0x01312cff
 800d320:	014ca43f 	.word	0x014ca43f
 800d324:	016e3600 	.word	0x016e3600
 800d328:	01a6ab1f 	.word	0x01a6ab1f
 800d32c:	01e84800 	.word	0x01e84800

0800d330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f043 0201 	orr.w	r2, r3, #1
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d352:	b480      	push	{r7}
 800d354:	b083      	sub	sp, #12
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	f023 0201 	bic.w	r2, r3, #1
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d380:	2300      	movs	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d115      	bne.n	800d3c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d3a2:	200a      	movs	r0, #10
 800d3a4:	f7f4 fa7e 	bl	80018a4 <HAL_Delay>
      ms += 10U;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	330a      	adds	r3, #10
 800d3ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f001 f93f 	bl	800e632 <USB_GetMode>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d01e      	beq.n	800d3f8 <USB_SetCurrentMode+0x84>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2bc7      	cmp	r3, #199	@ 0xc7
 800d3be:	d9f0      	bls.n	800d3a2 <USB_SetCurrentMode+0x2e>
 800d3c0:	e01a      	b.n	800d3f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d3c2:	78fb      	ldrb	r3, [r7, #3]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d115      	bne.n	800d3f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d3d4:	200a      	movs	r0, #10
 800d3d6:	f7f4 fa65 	bl	80018a4 <HAL_Delay>
      ms += 10U;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	330a      	adds	r3, #10
 800d3de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 f926 	bl	800e632 <USB_GetMode>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d005      	beq.n	800d3f8 <USB_SetCurrentMode+0x84>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2bc7      	cmp	r3, #199	@ 0xc7
 800d3f0:	d9f0      	bls.n	800d3d4 <USB_SetCurrentMode+0x60>
 800d3f2:	e001      	b.n	800d3f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e005      	b.n	800d404 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2bc8      	cmp	r3, #200	@ 0xc8
 800d3fc:	d101      	bne.n	800d402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d40c:	b084      	sub	sp, #16
 800d40e:	b580      	push	{r7, lr}
 800d410:	b086      	sub	sp, #24
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d41a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d426:	2300      	movs	r3, #0
 800d428:	613b      	str	r3, [r7, #16]
 800d42a:	e009      	b.n	800d440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	3340      	adds	r3, #64	@ 0x40
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	2200      	movs	r2, #0
 800d438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3301      	adds	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b0e      	cmp	r3, #14
 800d444:	d9f2      	bls.n	800d42c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d446:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d11c      	bne.n	800d488 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d45c:	f043 0302 	orr.w	r3, r3, #2
 800d460:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d466:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	e005      	b.n	800d494 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d49a:	461a      	mov	r2, r3
 800d49c:	2300      	movs	r3, #0
 800d49e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d4a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d10d      	bne.n	800d4c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d104      	bne.n	800d4ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f968 	bl	800d788 <USB_SetDevSpeed>
 800d4b8:	e008      	b.n	800d4cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f963 	bl	800d788 <USB_SetDevSpeed>
 800d4c2:	e003      	b.n	800d4cc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d4c4:	2103      	movs	r1, #3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f95e 	bl	800d788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d4cc:	2110      	movs	r1, #16
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f8fa 	bl	800d6c8 <USB_FlushTxFifo>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f924 	bl	800d72c <USB_FlushRxFifo>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d500:	461a      	mov	r2, r3
 800d502:	2300      	movs	r3, #0
 800d504:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d50c:	461a      	mov	r2, r3
 800d50e:	2300      	movs	r3, #0
 800d510:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d512:	2300      	movs	r3, #0
 800d514:	613b      	str	r3, [r7, #16]
 800d516:	e043      	b.n	800d5a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d52a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d52e:	d118      	bne.n	800d562 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d542:	461a      	mov	r2, r3
 800d544:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	e013      	b.n	800d574 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d558:	461a      	mov	r2, r3
 800d55a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	e008      	b.n	800d574 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	015a      	lsls	r2, r3, #5
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4413      	add	r3, r2
 800d56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d56e:	461a      	mov	r2, r3
 800d570:	2300      	movs	r3, #0
 800d572:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d580:	461a      	mov	r2, r3
 800d582:	2300      	movs	r3, #0
 800d584:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	015a      	lsls	r2, r3, #5
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	4413      	add	r3, r2
 800d58e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d592:	461a      	mov	r2, r3
 800d594:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	3301      	adds	r3, #1
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d3b5      	bcc.n	800d518 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	e043      	b.n	800d63a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	015a      	lsls	r2, r3, #5
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5c8:	d118      	bne.n	800d5fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10a      	bne.n	800d5e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	015a      	lsls	r2, r3, #5
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5dc:	461a      	mov	r2, r3
 800d5de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	e013      	b.n	800d60e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	015a      	lsls	r2, r3, #5
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	e008      	b.n	800d60e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d608:	461a      	mov	r2, r3
 800d60a:	2300      	movs	r3, #0
 800d60c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	015a      	lsls	r2, r3, #5
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	4413      	add	r3, r2
 800d616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d61a:	461a      	mov	r2, r3
 800d61c:	2300      	movs	r3, #0
 800d61e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	015a      	lsls	r2, r3, #5
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4413      	add	r3, r2
 800d628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d62c:	461a      	mov	r2, r3
 800d62e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	3301      	adds	r3, #1
 800d638:	613b      	str	r3, [r7, #16]
 800d63a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d63e:	461a      	mov	r2, r3
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	4293      	cmp	r3, r2
 800d644:	d3b5      	bcc.n	800d5b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d658:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d666:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d668:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d105      	bne.n	800d67c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	f043 0210 	orr.w	r2, r3, #16
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c0 <USB_DevInit+0x2b4>)
 800d682:	4313      	orrs	r3, r2
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d688:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	f043 0208 	orr.w	r2, r3, #8
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d69c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d105      	bne.n	800d6b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	699a      	ldr	r2, [r3, #24]
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <USB_DevInit+0x2b8>)
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6bc:	b004      	add	sp, #16
 800d6be:	4770      	bx	lr
 800d6c0:	803c3800 	.word	0x803c3800
 800d6c4:	40000004 	.word	0x40000004

0800d6c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6e2:	d901      	bls.n	800d6e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	e01b      	b.n	800d720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	daf2      	bge.n	800d6d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	019b      	lsls	r3, r3, #6
 800d6f8:	f043 0220 	orr.w	r2, r3, #32
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	3301      	adds	r3, #1
 800d704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d70c:	d901      	bls.n	800d712 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e006      	b.n	800d720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	2b20      	cmp	r3, #32
 800d71c:	d0f0      	beq.n	800d700 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3301      	adds	r3, #1
 800d73c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d744:	d901      	bls.n	800d74a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d746:	2303      	movs	r3, #3
 800d748:	e018      	b.n	800d77c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	daf2      	bge.n	800d738 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2210      	movs	r2, #16
 800d75a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3301      	adds	r3, #1
 800d760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d768:	d901      	bls.n	800d76e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e006      	b.n	800d77c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f003 0310 	and.w	r3, r3, #16
 800d776:	2b10      	cmp	r3, #16
 800d778:	d0f0      	beq.n	800d75c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	68f9      	ldr	r1, [r7, #12]
 800d7a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b087      	sub	sp, #28
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	f003 0306 	and.w	r3, r3, #6
 800d7d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d102      	bne.n	800d7e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	75fb      	strb	r3, [r7, #23]
 800d7de:	e00a      	b.n	800d7f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d002      	beq.n	800d7ec <USB_GetDevSpeed+0x32>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b06      	cmp	r3, #6
 800d7ea:	d102      	bne.n	800d7f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	75fb      	strb	r3, [r7, #23]
 800d7f0:	e001      	b.n	800d7f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d7f2:	230f      	movs	r3, #15
 800d7f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	371c      	adds	r7, #28
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	785b      	ldrb	r3, [r3, #1]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d139      	bne.n	800d894 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d826:	69da      	ldr	r2, [r3, #28]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	f003 030f 	and.w	r3, r3, #15
 800d830:	2101      	movs	r1, #1
 800d832:	fa01 f303 	lsl.w	r3, r1, r3
 800d836:	b29b      	uxth	r3, r3
 800d838:	68f9      	ldr	r1, [r7, #12]
 800d83a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d83e:	4313      	orrs	r3, r2
 800d840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d153      	bne.n	800d900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	015a      	lsls	r2, r3, #5
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4413      	add	r3, r2
 800d860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	791b      	ldrb	r3, [r3, #4]
 800d872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	059b      	lsls	r3, r3, #22
 800d87a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d87c:	431a      	orrs	r2, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	0159      	lsls	r1, r3, #5
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	440b      	add	r3, r1
 800d886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d88a:	4619      	mov	r1, r3
 800d88c:	4b20      	ldr	r3, [pc, #128]	@ (800d910 <USB_ActivateEndpoint+0x10c>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	600b      	str	r3, [r1, #0]
 800d892:	e035      	b.n	800d900 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d89a:	69da      	ldr	r2, [r3, #28]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	f003 030f 	and.w	r3, r3, #15
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d8aa:	041b      	lsls	r3, r3, #16
 800d8ac:	68f9      	ldr	r1, [r7, #12]
 800d8ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	015a      	lsls	r2, r3, #5
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d119      	bne.n	800d900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	791b      	ldrb	r3, [r3, #4]
 800d8e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d8e8:	430b      	orrs	r3, r1
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	0159      	lsls	r1, r3, #5
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	440b      	add	r3, r1
 800d8f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4b05      	ldr	r3, [pc, #20]	@ (800d910 <USB_ActivateEndpoint+0x10c>)
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	10008000 	.word	0x10008000

0800d914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	785b      	ldrb	r3, [r3, #1]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d161      	bne.n	800d9f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	015a      	lsls	r2, r3, #5
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	4413      	add	r3, r2
 800d938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d942:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d946:	d11f      	bne.n	800d988 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	015a      	lsls	r2, r3, #5
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4413      	add	r3, r2
 800d950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	0151      	lsls	r1, r2, #5
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	440a      	add	r2, r1
 800d95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d962:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d966:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	015a      	lsls	r2, r3, #5
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	0151      	lsls	r1, r2, #5
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	440a      	add	r2, r1
 800d97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d98e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	f003 030f 	and.w	r3, r3, #15
 800d998:	2101      	movs	r1, #1
 800d99a:	fa01 f303 	lsl.w	r3, r1, r3
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	43db      	mvns	r3, r3
 800d9a2:	68f9      	ldr	r1, [r7, #12]
 800d9a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9b2:	69da      	ldr	r2, [r3, #28]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 030f 	and.w	r3, r3, #15
 800d9bc:	2101      	movs	r1, #1
 800d9be:	fa01 f303 	lsl.w	r3, r1, r3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	68f9      	ldr	r1, [r7, #12]
 800d9c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	015a      	lsls	r2, r3, #5
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	0159      	lsls	r1, r3, #5
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4b35      	ldr	r3, [pc, #212]	@ (800dac4 <USB_DeactivateEndpoint+0x1b0>)
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	600b      	str	r3, [r1, #0]
 800d9f2:	e060      	b.n	800dab6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	015a      	lsls	r2, r3, #5
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800da06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da0a:	d11f      	bne.n	800da4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68ba      	ldr	r2, [r7, #8]
 800da1c:	0151      	lsls	r1, r2, #5
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	440a      	add	r2, r1
 800da22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800da2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	015a      	lsls	r2, r3, #5
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	4413      	add	r3, r2
 800da34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	0151      	lsls	r1, r2, #5
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	440a      	add	r2, r1
 800da42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	f003 030f 	and.w	r3, r3, #15
 800da5c:	2101      	movs	r1, #1
 800da5e:	fa01 f303 	lsl.w	r3, r1, r3
 800da62:	041b      	lsls	r3, r3, #16
 800da64:	43db      	mvns	r3, r3
 800da66:	68f9      	ldr	r1, [r7, #12]
 800da68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da6c:	4013      	ands	r3, r2
 800da6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da76:	69da      	ldr	r2, [r3, #28]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f003 030f 	and.w	r3, r3, #15
 800da80:	2101      	movs	r1, #1
 800da82:	fa01 f303 	lsl.w	r3, r1, r3
 800da86:	041b      	lsls	r3, r3, #16
 800da88:	43db      	mvns	r3, r3
 800da8a:	68f9      	ldr	r1, [r7, #12]
 800da8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da90:	4013      	ands	r3, r2
 800da92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	015a      	lsls	r2, r3, #5
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	4413      	add	r3, r2
 800da9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	0159      	lsls	r1, r3, #5
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	440b      	add	r3, r1
 800daaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daae:	4619      	mov	r1, r3
 800dab0:	4b05      	ldr	r3, [pc, #20]	@ (800dac8 <USB_DeactivateEndpoint+0x1b4>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	ec337800 	.word	0xec337800
 800dac8:	eff37800 	.word	0xeff37800

0800dacc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08a      	sub	sp, #40	@ 0x28
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	4613      	mov	r3, r2
 800dad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	785b      	ldrb	r3, [r3, #1]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	f040 8185 	bne.w	800ddf8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d132      	bne.n	800db5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	015a      	lsls	r2, r3, #5
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	4413      	add	r3, r2
 800dafe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db02:	691a      	ldr	r2, [r3, #16]
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	0159      	lsls	r1, r3, #5
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	440b      	add	r3, r1
 800db0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db10:	4619      	mov	r1, r3
 800db12:	4ba7      	ldr	r3, [pc, #668]	@ (800ddb0 <USB_EPStartXfer+0x2e4>)
 800db14:	4013      	ands	r3, r2
 800db16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	015a      	lsls	r2, r3, #5
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	4413      	add	r3, r2
 800db20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	69ba      	ldr	r2, [r7, #24]
 800db28:	0151      	lsls	r1, r2, #5
 800db2a:	69fa      	ldr	r2, [r7, #28]
 800db2c:	440a      	add	r2, r1
 800db2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800db36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db44:	691a      	ldr	r2, [r3, #16]
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	0159      	lsls	r1, r3, #5
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	440b      	add	r3, r1
 800db4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db52:	4619      	mov	r1, r3
 800db54:	4b97      	ldr	r3, [pc, #604]	@ (800ddb4 <USB_EPStartXfer+0x2e8>)
 800db56:	4013      	ands	r3, r2
 800db58:	610b      	str	r3, [r1, #16]
 800db5a:	e097      	b.n	800dc8c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db68:	691a      	ldr	r2, [r3, #16]
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	0159      	lsls	r1, r3, #5
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	440b      	add	r3, r1
 800db72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db76:	4619      	mov	r1, r3
 800db78:	4b8e      	ldr	r3, [pc, #568]	@ (800ddb4 <USB_EPStartXfer+0x2e8>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	015a      	lsls	r2, r3, #5
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	4413      	add	r3, r2
 800db86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db8a:	691a      	ldr	r2, [r3, #16]
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	0159      	lsls	r1, r3, #5
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	440b      	add	r3, r1
 800db94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db98:	4619      	mov	r1, r3
 800db9a:	4b85      	ldr	r3, [pc, #532]	@ (800ddb0 <USB_EPStartXfer+0x2e4>)
 800db9c:	4013      	ands	r3, r2
 800db9e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d11a      	bne.n	800dbdc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	691a      	ldr	r2, [r3, #16]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d903      	bls.n	800dbba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	689a      	ldr	r2, [r3, #8]
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	015a      	lsls	r2, r3, #5
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	0151      	lsls	r1, r2, #5
 800dbcc:	69fa      	ldr	r2, [r7, #28]
 800dbce:	440a      	add	r2, r1
 800dbd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dbd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbd8:	6113      	str	r3, [r2, #16]
 800dbda:	e044      	b.n	800dc66 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	1e5a      	subs	r2, r3, #1
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbf0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	015a      	lsls	r2, r3, #5
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbfe:	691a      	ldr	r2, [r3, #16]
 800dc00:	8afb      	ldrh	r3, [r7, #22]
 800dc02:	04d9      	lsls	r1, r3, #19
 800dc04:	4b6c      	ldr	r3, [pc, #432]	@ (800ddb8 <USB_EPStartXfer+0x2ec>)
 800dc06:	400b      	ands	r3, r1
 800dc08:	69b9      	ldr	r1, [r7, #24]
 800dc0a:	0148      	lsls	r0, r1, #5
 800dc0c:	69f9      	ldr	r1, [r7, #28]
 800dc0e:	4401      	add	r1, r0
 800dc10:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dc14:	4313      	orrs	r3, r2
 800dc16:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	791b      	ldrb	r3, [r3, #4]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d122      	bne.n	800dc66 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	69ba      	ldr	r2, [r7, #24]
 800dc30:	0151      	lsls	r1, r2, #5
 800dc32:	69fa      	ldr	r2, [r7, #28]
 800dc34:	440a      	add	r2, r1
 800dc36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc3a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800dc3e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc4c:	691a      	ldr	r2, [r3, #16]
 800dc4e:	8afb      	ldrh	r3, [r7, #22]
 800dc50:	075b      	lsls	r3, r3, #29
 800dc52:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800dc56:	69b9      	ldr	r1, [r7, #24]
 800dc58:	0148      	lsls	r0, r1, #5
 800dc5a:	69f9      	ldr	r1, [r7, #28]
 800dc5c:	4401      	add	r1, r0
 800dc5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dc62:	4313      	orrs	r3, r2
 800dc64:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	015a      	lsls	r2, r3, #5
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc72:	691a      	ldr	r2, [r3, #16]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc7c:	69b9      	ldr	r1, [r7, #24]
 800dc7e:	0148      	lsls	r0, r1, #5
 800dc80:	69f9      	ldr	r1, [r7, #28]
 800dc82:	4401      	add	r1, r0
 800dc84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d14b      	bne.n	800dd2a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	69db      	ldr	r3, [r3, #28]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d009      	beq.n	800dcae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dca6:	461a      	mov	r2, r3
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	69db      	ldr	r3, [r3, #28]
 800dcac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	791b      	ldrb	r3, [r3, #4]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d128      	bne.n	800dd08 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d110      	bne.n	800dce8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	015a      	lsls	r2, r3, #5
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	4413      	add	r3, r2
 800dcce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	0151      	lsls	r1, r2, #5
 800dcd8:	69fa      	ldr	r2, [r7, #28]
 800dcda:	440a      	add	r2, r1
 800dcdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	e00f      	b.n	800dd08 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	015a      	lsls	r2, r3, #5
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	0151      	lsls	r1, r2, #5
 800dcfa:	69fa      	ldr	r2, [r7, #28]
 800dcfc:	440a      	add	r2, r1
 800dcfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd06:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	015a      	lsls	r2, r3, #5
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	4413      	add	r3, r2
 800dd10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	0151      	lsls	r1, r2, #5
 800dd1a:	69fa      	ldr	r2, [r7, #28]
 800dd1c:	440a      	add	r2, r1
 800dd1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd22:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	e169      	b.n	800dffe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	69ba      	ldr	r2, [r7, #24]
 800dd3a:	0151      	lsls	r1, r2, #5
 800dd3c:	69fa      	ldr	r2, [r7, #28]
 800dd3e:	440a      	add	r2, r1
 800dd40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd44:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dd48:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	791b      	ldrb	r3, [r3, #4]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d015      	beq.n	800dd7e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 8151 	beq.w	800dffe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	f003 030f 	and.w	r3, r3, #15
 800dd6c:	2101      	movs	r1, #1
 800dd6e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd72:	69f9      	ldr	r1, [r7, #28]
 800dd74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	634b      	str	r3, [r1, #52]	@ 0x34
 800dd7c:	e13f      	b.n	800dffe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d116      	bne.n	800ddbc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	015a      	lsls	r2, r3, #5
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	4413      	add	r3, r2
 800dd96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	69ba      	ldr	r2, [r7, #24]
 800dd9e:	0151      	lsls	r1, r2, #5
 800dda0:	69fa      	ldr	r2, [r7, #28]
 800dda2:	440a      	add	r2, r1
 800dda4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dda8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	e015      	b.n	800dddc <USB_EPStartXfer+0x310>
 800ddb0:	e007ffff 	.word	0xe007ffff
 800ddb4:	fff80000 	.word	0xfff80000
 800ddb8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	015a      	lsls	r2, r3, #5
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	69ba      	ldr	r2, [r7, #24]
 800ddcc:	0151      	lsls	r1, r2, #5
 800ddce:	69fa      	ldr	r2, [r7, #28]
 800ddd0:	440a      	add	r2, r1
 800ddd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ddd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddda:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	68d9      	ldr	r1, [r3, #12]
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	b298      	uxth	r0, r3
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	4603      	mov	r3, r0
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 f9b9 	bl	800e168 <USB_WritePacket>
 800ddf6:	e102      	b.n	800dffe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	015a      	lsls	r2, r3, #5
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	4413      	add	r3, r2
 800de00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de04:	691a      	ldr	r2, [r3, #16]
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	0159      	lsls	r1, r3, #5
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	440b      	add	r3, r1
 800de0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de12:	4619      	mov	r1, r3
 800de14:	4b7c      	ldr	r3, [pc, #496]	@ (800e008 <USB_EPStartXfer+0x53c>)
 800de16:	4013      	ands	r3, r2
 800de18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	015a      	lsls	r2, r3, #5
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	4413      	add	r3, r2
 800de22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de26:	691a      	ldr	r2, [r3, #16]
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	0159      	lsls	r1, r3, #5
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	440b      	add	r3, r1
 800de30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de34:	4619      	mov	r1, r3
 800de36:	4b75      	ldr	r3, [pc, #468]	@ (800e00c <USB_EPStartXfer+0x540>)
 800de38:	4013      	ands	r3, r2
 800de3a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d12f      	bne.n	800dea2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d003      	beq.n	800de52 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	689a      	ldr	r2, [r3, #8]
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	689a      	ldr	r2, [r3, #8]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	4413      	add	r3, r2
 800de62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de66:	691a      	ldr	r2, [r3, #16]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	6a1b      	ldr	r3, [r3, #32]
 800de6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de70:	69b9      	ldr	r1, [r7, #24]
 800de72:	0148      	lsls	r0, r1, #5
 800de74:	69f9      	ldr	r1, [r7, #28]
 800de76:	4401      	add	r1, r0
 800de78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800de7c:	4313      	orrs	r3, r2
 800de7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	4413      	add	r3, r2
 800de88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	69ba      	ldr	r2, [r7, #24]
 800de90:	0151      	lsls	r1, r2, #5
 800de92:	69fa      	ldr	r2, [r7, #28]
 800de94:	440a      	add	r2, r1
 800de96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de9e:	6113      	str	r3, [r2, #16]
 800dea0:	e05f      	b.n	800df62 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d123      	bne.n	800def2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deb6:	691a      	ldr	r2, [r3, #16]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dec0:	69b9      	ldr	r1, [r7, #24]
 800dec2:	0148      	lsls	r0, r1, #5
 800dec4:	69f9      	ldr	r1, [r7, #28]
 800dec6:	4401      	add	r1, r0
 800dec8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800decc:	4313      	orrs	r3, r2
 800dece:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	015a      	lsls	r2, r3, #5
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	4413      	add	r3, r2
 800ded8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	69ba      	ldr	r2, [r7, #24]
 800dee0:	0151      	lsls	r1, r2, #5
 800dee2:	69fa      	ldr	r2, [r7, #28]
 800dee4:	440a      	add	r2, r1
 800dee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800deea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800deee:	6113      	str	r3, [r2, #16]
 800def0:	e037      	b.n	800df62 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	691a      	ldr	r2, [r3, #16]
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	4413      	add	r3, r2
 800defc:	1e5a      	subs	r2, r3, #1
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	fbb2 f3f3 	udiv	r3, r2, r3
 800df06:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	8afa      	ldrh	r2, [r7, #22]
 800df0e:	fb03 f202 	mul.w	r2, r3, r2
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df22:	691a      	ldr	r2, [r3, #16]
 800df24:	8afb      	ldrh	r3, [r7, #22]
 800df26:	04d9      	lsls	r1, r3, #19
 800df28:	4b39      	ldr	r3, [pc, #228]	@ (800e010 <USB_EPStartXfer+0x544>)
 800df2a:	400b      	ands	r3, r1
 800df2c:	69b9      	ldr	r1, [r7, #24]
 800df2e:	0148      	lsls	r0, r1, #5
 800df30:	69f9      	ldr	r1, [r7, #28]
 800df32:	4401      	add	r1, r0
 800df34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800df38:	4313      	orrs	r3, r2
 800df3a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	015a      	lsls	r2, r3, #5
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	4413      	add	r3, r2
 800df44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df48:	691a      	ldr	r2, [r3, #16]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	6a1b      	ldr	r3, [r3, #32]
 800df4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df52:	69b9      	ldr	r1, [r7, #24]
 800df54:	0148      	lsls	r0, r1, #5
 800df56:	69f9      	ldr	r1, [r7, #28]
 800df58:	4401      	add	r1, r0
 800df5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800df5e:	4313      	orrs	r3, r2
 800df60:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d10d      	bne.n	800df84 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	68d9      	ldr	r1, [r3, #12]
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df80:	460a      	mov	r2, r1
 800df82:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	791b      	ldrb	r3, [r3, #4]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d128      	bne.n	800dfde <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d110      	bne.n	800dfbe <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	015a      	lsls	r2, r3, #5
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	0151      	lsls	r1, r2, #5
 800dfae:	69fa      	ldr	r2, [r7, #28]
 800dfb0:	440a      	add	r2, r1
 800dfb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dfba:	6013      	str	r3, [r2, #0]
 800dfbc:	e00f      	b.n	800dfde <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	015a      	lsls	r2, r3, #5
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	69ba      	ldr	r2, [r7, #24]
 800dfce:	0151      	lsls	r1, r2, #5
 800dfd0:	69fa      	ldr	r2, [r7, #28]
 800dfd2:	440a      	add	r2, r1
 800dfd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfdc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	69ba      	ldr	r2, [r7, #24]
 800dfee:	0151      	lsls	r1, r2, #5
 800dff0:	69fa      	ldr	r2, [r7, #28]
 800dff2:	440a      	add	r2, r1
 800dff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dff8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dffc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3720      	adds	r7, #32
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	fff80000 	.word	0xfff80000
 800e00c:	e007ffff 	.word	0xe007ffff
 800e010:	1ff80000 	.word	0x1ff80000

0800e014 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	785b      	ldrb	r3, [r3, #1]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d14a      	bne.n	800e0c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e04a:	f040 8086 	bne.w	800e15a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	4413      	add	r3, r2
 800e058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	7812      	ldrb	r2, [r2, #0]
 800e062:	0151      	lsls	r1, r2, #5
 800e064:	693a      	ldr	r2, [r7, #16]
 800e066:	440a      	add	r2, r1
 800e068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e06c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e070:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	015a      	lsls	r2, r3, #5
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	4413      	add	r3, r2
 800e07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	7812      	ldrb	r2, [r2, #0]
 800e086:	0151      	lsls	r1, r2, #5
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	440a      	add	r2, r1
 800e08c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e090:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e094:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3301      	adds	r3, #1
 800e09a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d902      	bls.n	800e0ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	75fb      	strb	r3, [r7, #23]
          break;
 800e0aa:	e056      	b.n	800e15a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	015a      	lsls	r2, r3, #5
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0c4:	d0e7      	beq.n	800e096 <USB_EPStopXfer+0x82>
 800e0c6:	e048      	b.n	800e15a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0e0:	d13b      	bne.n	800e15a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	015a      	lsls	r2, r3, #5
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	7812      	ldrb	r2, [r2, #0]
 800e0f6:	0151      	lsls	r1, r2, #5
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	440a      	add	r2, r1
 800e0fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e100:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e104:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	7812      	ldrb	r2, [r2, #0]
 800e11a:	0151      	lsls	r1, r2, #5
 800e11c:	693a      	ldr	r2, [r7, #16]
 800e11e:	440a      	add	r2, r1
 800e120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e124:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e128:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3301      	adds	r3, #1
 800e12e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e136:	4293      	cmp	r3, r2
 800e138:	d902      	bls.n	800e140 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	75fb      	strb	r3, [r7, #23]
          break;
 800e13e:	e00c      	b.n	800e15a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	015a      	lsls	r2, r3, #5
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	4413      	add	r3, r2
 800e14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e158:	d0e7      	beq.n	800e12a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	371c      	adds	r7, #28
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e168:	b480      	push	{r7}
 800e16a:	b089      	sub	sp, #36	@ 0x24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4611      	mov	r1, r2
 800e174:	461a      	mov	r2, r3
 800e176:	460b      	mov	r3, r1
 800e178:	71fb      	strb	r3, [r7, #7]
 800e17a:	4613      	mov	r3, r2
 800e17c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d123      	bne.n	800e1d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e18e:	88bb      	ldrh	r3, [r7, #4]
 800e190:	3303      	adds	r3, #3
 800e192:	089b      	lsrs	r3, r3, #2
 800e194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e196:	2300      	movs	r3, #0
 800e198:	61bb      	str	r3, [r7, #24]
 800e19a:	e018      	b.n	800e1ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	031a      	lsls	r2, r3, #12
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	61bb      	str	r3, [r7, #24]
 800e1ce:	69ba      	ldr	r2, [r7, #24]
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d3e2      	bcc.n	800e19c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e1d6:	2300      	movs	r3, #0
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3724      	adds	r7, #36	@ 0x24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b08b      	sub	sp, #44	@ 0x2c
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e1fa:	88fb      	ldrh	r3, [r7, #6]
 800e1fc:	089b      	lsrs	r3, r3, #2
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e202:	88fb      	ldrh	r3, [r7, #6]
 800e204:	f003 0303 	and.w	r3, r3, #3
 800e208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e20a:	2300      	movs	r3, #0
 800e20c:	623b      	str	r3, [r7, #32]
 800e20e:	e014      	b.n	800e23a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	3301      	adds	r3, #1
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e224:	3301      	adds	r3, #1
 800e226:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	3301      	adds	r3, #1
 800e22c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	3301      	adds	r3, #1
 800e232:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	3301      	adds	r3, #1
 800e238:	623b      	str	r3, [r7, #32]
 800e23a:	6a3a      	ldr	r2, [r7, #32]
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d3e6      	bcc.n	800e210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e242:	8bfb      	ldrh	r3, [r7, #30]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01e      	beq.n	800e286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e248:	2300      	movs	r3, #0
 800e24a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e252:	461a      	mov	r2, r3
 800e254:	f107 0310 	add.w	r3, r7, #16
 800e258:	6812      	ldr	r2, [r2, #0]
 800e25a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	b2db      	uxtb	r3, r3
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	fa22 f303 	lsr.w	r3, r2, r3
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26c:	701a      	strb	r2, [r3, #0]
      i++;
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	3301      	adds	r3, #1
 800e272:	623b      	str	r3, [r7, #32]
      pDest++;
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	3301      	adds	r3, #1
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e27a:	8bfb      	ldrh	r3, [r7, #30]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e280:	8bfb      	ldrh	r3, [r7, #30]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1ea      	bne.n	800e25c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e288:	4618      	mov	r0, r3
 800e28a:	372c      	adds	r7, #44	@ 0x2c
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	785b      	ldrb	r3, [r3, #1]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d12c      	bne.n	800e30a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	015a      	lsls	r2, r3, #5
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	db12      	blt.n	800e2e8 <USB_EPSetStall+0x54>
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00f      	beq.n	800e2e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	015a      	lsls	r2, r3, #5
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	0151      	lsls	r1, r2, #5
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	440a      	add	r2, r1
 800e2de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e2e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	015a      	lsls	r2, r3, #5
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	0151      	lsls	r1, r2, #5
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	440a      	add	r2, r1
 800e2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	e02b      	b.n	800e362 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	015a      	lsls	r2, r3, #5
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	db12      	blt.n	800e342 <USB_EPSetStall+0xae>
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00f      	beq.n	800e342 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	015a      	lsls	r2, r3, #5
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	4413      	add	r3, r2
 800e32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	0151      	lsls	r1, r2, #5
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	440a      	add	r2, r1
 800e338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e33c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e340:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	015a      	lsls	r2, r3, #5
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	4413      	add	r3, r2
 800e34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	0151      	lsls	r1, r2, #5
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	440a      	add	r2, r1
 800e358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e35c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e360:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	785b      	ldrb	r3, [r3, #1]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d128      	bne.n	800e3de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	015a      	lsls	r2, r3, #5
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	4413      	add	r3, r2
 800e394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	0151      	lsls	r1, r2, #5
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	440a      	add	r2, r1
 800e3a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e3aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	791b      	ldrb	r3, [r3, #4]
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d003      	beq.n	800e3bc <USB_EPClearStall+0x4c>
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	791b      	ldrb	r3, [r3, #4]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d138      	bne.n	800e42e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	015a      	lsls	r2, r3, #5
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	0151      	lsls	r1, r2, #5
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	440a      	add	r2, r1
 800e3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e3d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	e027      	b.n	800e42e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	015a      	lsls	r2, r3, #5
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	0151      	lsls	r1, r2, #5
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	440a      	add	r2, r1
 800e3f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e3f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e3fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	791b      	ldrb	r3, [r3, #4]
 800e402:	2b03      	cmp	r3, #3
 800e404:	d003      	beq.n	800e40e <USB_EPClearStall+0x9e>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	791b      	ldrb	r3, [r3, #4]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d10f      	bne.n	800e42e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	0151      	lsls	r1, r2, #5
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	440a      	add	r2, r1
 800e424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e42c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	460b      	mov	r3, r1
 800e446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e45a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e45e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e470:	68f9      	ldr	r1, [r7, #12]
 800e472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e476:	4313      	orrs	r3, r2
 800e478:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e4b6:	f023 0302 	bic.w	r3, r3, #2
 800e4ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e4e4:	f023 0303 	bic.w	r3, r3, #3
 800e4e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e4f8:	f043 0302 	orr.w	r3, r3, #2
 800e4fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3714      	adds	r7, #20
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr

0800e50c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	695b      	ldr	r3, [r3, #20]
 800e518:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	4013      	ands	r3, r2
 800e522:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e524:	68fb      	ldr	r3, [r7, #12]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e532:	b480      	push	{r7}
 800e534:	b085      	sub	sp, #20
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	4013      	ands	r3, r2
 800e554:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	0c1b      	lsrs	r3, r3, #16
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3714      	adds	r7, #20
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e566:	b480      	push	{r7}
 800e568:	b085      	sub	sp, #20
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	4013      	ands	r3, r2
 800e588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	b29b      	uxth	r3, r3
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e59a:	b480      	push	{r7}
 800e59c:	b085      	sub	sp, #20
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e5aa:	78fb      	ldrb	r3, [r7, #3]
 800e5ac:	015a      	lsls	r2, r3, #5
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5c0:	695b      	ldr	r3, [r3, #20]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5c8:	68bb      	ldr	r3, [r7, #8]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b087      	sub	sp, #28
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ec:	691b      	ldr	r3, [r3, #16]
 800e5ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	f003 030f 	and.w	r3, r3, #15
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	fa22 f303 	lsr.w	r3, r2, r3
 800e606:	01db      	lsls	r3, r3, #7
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	4013      	ands	r3, r2
 800e622:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e624:	68bb      	ldr	r3, [r7, #8]
}
 800e626:	4618      	mov	r0, r3
 800e628:	371c      	adds	r7, #28
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e632:	b480      	push	{r7}
 800e634:	b083      	sub	sp, #12
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	695b      	ldr	r3, [r3, #20]
 800e63e:	f003 0301 	and.w	r3, r3, #1
}
 800e642:	4618      	mov	r0, r3
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
	...

0800e650 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66a:	4619      	mov	r1, r3
 800e66c:	4b09      	ldr	r3, [pc, #36]	@ (800e694 <USB_ActivateSetup+0x44>)
 800e66e:	4013      	ands	r3, r2
 800e670:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	fffff800 	.word	0xfffff800

0800e698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e698:	b480      	push	{r7}
 800e69a:	b087      	sub	sp, #28
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	333c      	adds	r3, #60	@ 0x3c
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	4a26      	ldr	r2, [pc, #152]	@ (800e750 <USB_EP0_OutStart+0xb8>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d90a      	bls.n	800e6d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6cc:	d101      	bne.n	800e6d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	e037      	b.n	800e742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d8:	461a      	mov	r2, r3
 800e6da:	2300      	movs	r3, #0
 800e6dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6f8:	691b      	ldr	r3, [r3, #16]
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e700:	f043 0318 	orr.w	r3, r3, #24
 800e704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	697a      	ldr	r2, [r7, #20]
 800e710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e714:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e71a:	7afb      	ldrb	r3, [r7, #11]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d10f      	bne.n	800e740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e726:	461a      	mov	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	697a      	ldr	r2, [r7, #20]
 800e736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e73a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e73e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	4f54300a 	.word	0x4f54300a

0800e754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3301      	adds	r3, #1
 800e764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e76c:	d901      	bls.n	800e772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e76e:	2303      	movs	r3, #3
 800e770:	e01b      	b.n	800e7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	daf2      	bge.n	800e760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e77a:	2300      	movs	r3, #0
 800e77c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	691b      	ldr	r3, [r3, #16]
 800e782:	f043 0201 	orr.w	r2, r3, #1
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3301      	adds	r3, #1
 800e78e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e796:	d901      	bls.n	800e79c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e006      	b.n	800e7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	f003 0301 	and.w	r3, r3, #1
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d0f0      	beq.n	800e78a <USB_CoreReset+0x36>

  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e7c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e7c8:	f002 fd6c 	bl	80112a4 <USBD_static_malloc>
 800e7cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d109      	bne.n	800e7e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	32b0      	adds	r2, #176	@ 0xb0
 800e7de:	2100      	movs	r1, #0
 800e7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e0d4      	b.n	800e992 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e7e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f003 fbee 	bl	8011fd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	32b0      	adds	r2, #176	@ 0xb0
 800e7fe:	68f9      	ldr	r1, [r7, #12]
 800e800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	32b0      	adds	r2, #176	@ 0xb0
 800e80e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	7c1b      	ldrb	r3, [r3, #16]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d138      	bne.n	800e892 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e820:	4b5e      	ldr	r3, [pc, #376]	@ (800e99c <USBD_CDC_Init+0x1e4>)
 800e822:	7819      	ldrb	r1, [r3, #0]
 800e824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e828:	2202      	movs	r2, #2
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f002 fc17 	bl	801105e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e830:	4b5a      	ldr	r3, [pc, #360]	@ (800e99c <USBD_CDC_Init+0x1e4>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f003 020f 	and.w	r2, r3, #15
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	4613      	mov	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4413      	add	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	440b      	add	r3, r1
 800e844:	3324      	adds	r3, #36	@ 0x24
 800e846:	2201      	movs	r2, #1
 800e848:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e84a:	4b55      	ldr	r3, [pc, #340]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e84c:	7819      	ldrb	r1, [r3, #0]
 800e84e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e852:	2202      	movs	r2, #2
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f002 fc02 	bl	801105e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e85a:	4b51      	ldr	r3, [pc, #324]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f003 020f 	and.w	r2, r3, #15
 800e862:	6879      	ldr	r1, [r7, #4]
 800e864:	4613      	mov	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	440b      	add	r3, r1
 800e86e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e872:	2201      	movs	r2, #1
 800e874:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e876:	4b4b      	ldr	r3, [pc, #300]	@ (800e9a4 <USBD_CDC_Init+0x1ec>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	f003 020f 	and.w	r2, r3, #15
 800e87e:	6879      	ldr	r1, [r7, #4]
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	440b      	add	r3, r1
 800e88a:	3326      	adds	r3, #38	@ 0x26
 800e88c:	2210      	movs	r2, #16
 800e88e:	801a      	strh	r2, [r3, #0]
 800e890:	e035      	b.n	800e8fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e892:	4b42      	ldr	r3, [pc, #264]	@ (800e99c <USBD_CDC_Init+0x1e4>)
 800e894:	7819      	ldrb	r1, [r3, #0]
 800e896:	2340      	movs	r3, #64	@ 0x40
 800e898:	2202      	movs	r2, #2
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f002 fbdf 	bl	801105e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e8a0:	4b3e      	ldr	r3, [pc, #248]	@ (800e99c <USBD_CDC_Init+0x1e4>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	f003 020f 	and.w	r2, r3, #15
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	3324      	adds	r3, #36	@ 0x24
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e8ba:	4b39      	ldr	r3, [pc, #228]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e8bc:	7819      	ldrb	r1, [r3, #0]
 800e8be:	2340      	movs	r3, #64	@ 0x40
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f002 fbcb 	bl	801105e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e8c8:	4b35      	ldr	r3, [pc, #212]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 020f 	and.w	r2, r3, #15
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	440b      	add	r3, r1
 800e8dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800e9a4 <USBD_CDC_Init+0x1ec>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f003 020f 	and.w	r2, r3, #15
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	440b      	add	r3, r1
 800e8f8:	3326      	adds	r3, #38	@ 0x26
 800e8fa:	2210      	movs	r2, #16
 800e8fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e8fe:	4b29      	ldr	r3, [pc, #164]	@ (800e9a4 <USBD_CDC_Init+0x1ec>)
 800e900:	7819      	ldrb	r1, [r3, #0]
 800e902:	2308      	movs	r3, #8
 800e904:	2203      	movs	r2, #3
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f002 fba9 	bl	801105e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e90c:	4b25      	ldr	r3, [pc, #148]	@ (800e9a4 <USBD_CDC_Init+0x1ec>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	f003 020f 	and.w	r2, r3, #15
 800e914:	6879      	ldr	r1, [r7, #4]
 800e916:	4613      	mov	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	440b      	add	r3, r1
 800e920:	3324      	adds	r3, #36	@ 0x24
 800e922:	2201      	movs	r2, #1
 800e924:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	33b0      	adds	r3, #176	@ 0xb0
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	4413      	add	r3, r2
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2200      	movs	r2, #0
 800e946:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d101      	bne.n	800e960 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e95c:	2302      	movs	r3, #2
 800e95e:	e018      	b.n	800e992 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	7c1b      	ldrb	r3, [r3, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10a      	bne.n	800e97e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e968:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e96a:	7819      	ldrb	r1, [r3, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f002 fc60 	bl	801123c <USBD_LL_PrepareReceive>
 800e97c:	e008      	b.n	800e990 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e97e:	4b08      	ldr	r3, [pc, #32]	@ (800e9a0 <USBD_CDC_Init+0x1e8>)
 800e980:	7819      	ldrb	r1, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e988:	2340      	movs	r3, #64	@ 0x40
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f002 fc56 	bl	801123c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	24000097 	.word	0x24000097
 800e9a0:	24000098 	.word	0x24000098
 800e9a4:	24000099 	.word	0x24000099

0800e9a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e9b4:	4b3a      	ldr	r3, [pc, #232]	@ (800eaa0 <USBD_CDC_DeInit+0xf8>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f002 fb75 	bl	80110aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e9c0:	4b37      	ldr	r3, [pc, #220]	@ (800eaa0 <USBD_CDC_DeInit+0xf8>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f003 020f 	and.w	r2, r3, #15
 800e9c8:	6879      	ldr	r1, [r7, #4]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	440b      	add	r3, r1
 800e9d4:	3324      	adds	r3, #36	@ 0x24
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e9da:	4b32      	ldr	r3, [pc, #200]	@ (800eaa4 <USBD_CDC_DeInit+0xfc>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f002 fb62 	bl	80110aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e9e6:	4b2f      	ldr	r3, [pc, #188]	@ (800eaa4 <USBD_CDC_DeInit+0xfc>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 020f 	and.w	r2, r3, #15
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	440b      	add	r3, r1
 800e9fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e9fe:	2200      	movs	r2, #0
 800ea00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ea02:	4b29      	ldr	r3, [pc, #164]	@ (800eaa8 <USBD_CDC_DeInit+0x100>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	4619      	mov	r1, r3
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f002 fb4e 	bl	80110aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ea0e:	4b26      	ldr	r3, [pc, #152]	@ (800eaa8 <USBD_CDC_DeInit+0x100>)
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	f003 020f 	and.w	r2, r3, #15
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	4413      	add	r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	440b      	add	r3, r1
 800ea22:	3324      	adds	r3, #36	@ 0x24
 800ea24:	2200      	movs	r2, #0
 800ea26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ea28:	4b1f      	ldr	r3, [pc, #124]	@ (800eaa8 <USBD_CDC_DeInit+0x100>)
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	f003 020f 	and.w	r2, r3, #15
 800ea30:	6879      	ldr	r1, [r7, #4]
 800ea32:	4613      	mov	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	440b      	add	r3, r1
 800ea3c:	3326      	adds	r3, #38	@ 0x26
 800ea3e:	2200      	movs	r2, #0
 800ea40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	32b0      	adds	r2, #176	@ 0xb0
 800ea4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d01f      	beq.n	800ea94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	33b0      	adds	r3, #176	@ 0xb0
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	32b0      	adds	r2, #176	@ 0xb0
 800ea72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f002 fc22 	bl	80112c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	32b0      	adds	r2, #176	@ 0xb0
 800ea86:	2100      	movs	r1, #0
 800ea88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	24000097 	.word	0x24000097
 800eaa4:	24000098 	.word	0x24000098
 800eaa8:	24000099 	.word	0x24000099

0800eaac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	32b0      	adds	r2, #176	@ 0xb0
 800eac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800eaca:	2300      	movs	r3, #0
 800eacc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ead8:	2303      	movs	r3, #3
 800eada:	e0bf      	b.n	800ec5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d050      	beq.n	800eb8a <USBD_CDC_Setup+0xde>
 800eae8:	2b20      	cmp	r3, #32
 800eaea:	f040 80af 	bne.w	800ec4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	88db      	ldrh	r3, [r3, #6]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d03a      	beq.n	800eb6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	b25b      	sxtb	r3, r3
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da1b      	bge.n	800eb38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	33b0      	adds	r3, #176	@ 0xb0
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4413      	add	r3, r2
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800eb16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	88d2      	ldrh	r2, [r2, #6]
 800eb1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	88db      	ldrh	r3, [r3, #6]
 800eb22:	2b07      	cmp	r3, #7
 800eb24:	bf28      	it	cs
 800eb26:	2307      	movcs	r3, #7
 800eb28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	89fa      	ldrh	r2, [r7, #14]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 fdbd 	bl	80106b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800eb36:	e090      	b.n	800ec5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	785a      	ldrb	r2, [r3, #1]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	88db      	ldrh	r3, [r3, #6]
 800eb46:	2b3f      	cmp	r3, #63	@ 0x3f
 800eb48:	d803      	bhi.n	800eb52 <USBD_CDC_Setup+0xa6>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	88db      	ldrh	r3, [r3, #6]
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	e000      	b.n	800eb54 <USBD_CDC_Setup+0xa8>
 800eb52:	2240      	movs	r2, #64	@ 0x40
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eb5a:	6939      	ldr	r1, [r7, #16]
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800eb62:	461a      	mov	r2, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f001 fdcf 	bl	8010708 <USBD_CtlPrepareRx>
      break;
 800eb6a:	e076      	b.n	800ec5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	33b0      	adds	r3, #176	@ 0xb0
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	7850      	ldrb	r0, [r2, #1]
 800eb82:	2200      	movs	r2, #0
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	4798      	blx	r3
      break;
 800eb88:	e067      	b.n	800ec5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	785b      	ldrb	r3, [r3, #1]
 800eb8e:	2b0b      	cmp	r3, #11
 800eb90:	d851      	bhi.n	800ec36 <USBD_CDC_Setup+0x18a>
 800eb92:	a201      	add	r2, pc, #4	@ (adr r2, 800eb98 <USBD_CDC_Setup+0xec>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800ebc9 	.word	0x0800ebc9
 800eb9c:	0800ec45 	.word	0x0800ec45
 800eba0:	0800ec37 	.word	0x0800ec37
 800eba4:	0800ec37 	.word	0x0800ec37
 800eba8:	0800ec37 	.word	0x0800ec37
 800ebac:	0800ec37 	.word	0x0800ec37
 800ebb0:	0800ec37 	.word	0x0800ec37
 800ebb4:	0800ec37 	.word	0x0800ec37
 800ebb8:	0800ec37 	.word	0x0800ec37
 800ebbc:	0800ec37 	.word	0x0800ec37
 800ebc0:	0800ebf3 	.word	0x0800ebf3
 800ebc4:	0800ec1d 	.word	0x0800ec1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d107      	bne.n	800ebe4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ebd4:	f107 030a 	add.w	r3, r7, #10
 800ebd8:	2202      	movs	r2, #2
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f001 fd67 	bl	80106b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebe2:	e032      	b.n	800ec4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f001 fce5 	bl	80105b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebec:	2303      	movs	r3, #3
 800ebee:	75fb      	strb	r3, [r7, #23]
          break;
 800ebf0:	e02b      	b.n	800ec4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d107      	bne.n	800ec0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ebfe:	f107 030d 	add.w	r3, r7, #13
 800ec02:	2201      	movs	r2, #1
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f001 fd52 	bl	80106b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec0c:	e01d      	b.n	800ec4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f001 fcd0 	bl	80105b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec16:	2303      	movs	r3, #3
 800ec18:	75fb      	strb	r3, [r7, #23]
          break;
 800ec1a:	e016      	b.n	800ec4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d00f      	beq.n	800ec48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 fcc3 	bl	80105b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec30:	2303      	movs	r3, #3
 800ec32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ec34:	e008      	b.n	800ec48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f001 fcbc 	bl	80105b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	75fb      	strb	r3, [r7, #23]
          break;
 800ec42:	e002      	b.n	800ec4a <USBD_CDC_Setup+0x19e>
          break;
 800ec44:	bf00      	nop
 800ec46:	e008      	b.n	800ec5a <USBD_CDC_Setup+0x1ae>
          break;
 800ec48:	bf00      	nop
      }
      break;
 800ec4a:	e006      	b.n	800ec5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ec4c:	6839      	ldr	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f001 fcb1 	bl	80105b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ec54:	2303      	movs	r3, #3
 800ec56:	75fb      	strb	r3, [r7, #23]
      break;
 800ec58:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3718      	adds	r7, #24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	32b0      	adds	r2, #176	@ 0xb0
 800ec82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	e065      	b.n	800ed5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	32b0      	adds	r2, #176	@ 0xb0
 800ec98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ec9e:	78fb      	ldrb	r3, [r7, #3]
 800eca0:	f003 020f 	and.w	r2, r3, #15
 800eca4:	6879      	ldr	r1, [r7, #4]
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	440b      	add	r3, r1
 800ecb0:	3318      	adds	r3, #24
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d02f      	beq.n	800ed18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	f003 020f 	and.w	r2, r3, #15
 800ecbe:	6879      	ldr	r1, [r7, #4]
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	440b      	add	r3, r1
 800ecca:	3318      	adds	r3, #24
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	f003 010f 	and.w	r1, r3, #15
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	440b      	add	r3, r1
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4403      	add	r3, r0
 800ece0:	331c      	adds	r3, #28
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ece8:	fb01 f303 	mul.w	r3, r1, r3
 800ecec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d112      	bne.n	800ed18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ecf2:	78fb      	ldrb	r3, [r7, #3]
 800ecf4:	f003 020f 	and.w	r2, r3, #15
 800ecf8:	6879      	ldr	r1, [r7, #4]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4413      	add	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	440b      	add	r3, r1
 800ed04:	3318      	adds	r3, #24
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed0a:	78f9      	ldrb	r1, [r7, #3]
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	2200      	movs	r2, #0
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f002 fa72 	bl	80111fa <USBD_LL_Transmit>
 800ed16:	e01f      	b.n	800ed58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	33b0      	adds	r3, #176	@ 0xb0
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	4413      	add	r3, r2
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d010      	beq.n	800ed58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	33b0      	adds	r3, #176	@ 0xb0
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ed54:	78fa      	ldrb	r2, [r7, #3]
 800ed56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b084      	sub	sp, #16
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	32b0      	adds	r2, #176	@ 0xb0
 800ed78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	32b0      	adds	r2, #176	@ 0xb0
 800ed88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed90:	2303      	movs	r3, #3
 800ed92:	e01a      	b.n	800edca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ed94:	78fb      	ldrb	r3, [r7, #3]
 800ed96:	4619      	mov	r1, r3
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f002 fa70 	bl	801127e <USBD_LL_GetRxDataSize>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	33b0      	adds	r3, #176	@ 0xb0
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800edc4:	4611      	mov	r1, r2
 800edc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	32b0      	adds	r2, #176	@ 0xb0
 800ede4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d101      	bne.n	800edf4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edf0:	2303      	movs	r3, #3
 800edf2:	e024      	b.n	800ee3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	33b0      	adds	r3, #176	@ 0xb0
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	4413      	add	r3, r2
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d019      	beq.n	800ee3c <USBD_CDC_EP0_RxReady+0x6a>
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ee0e:	2bff      	cmp	r3, #255	@ 0xff
 800ee10:	d014      	beq.n	800ee3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	33b0      	adds	r3, #176	@ 0xb0
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ee2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	22ff      	movs	r2, #255	@ 0xff
 800ee38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee50:	2182      	movs	r1, #130	@ 0x82
 800ee52:	4818      	ldr	r0, [pc, #96]	@ (800eeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee54:	f000 fd4f 	bl	800f8f6 <USBD_GetEpDesc>
 800ee58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	4815      	ldr	r0, [pc, #84]	@ (800eeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee5e:	f000 fd4a 	bl	800f8f6 <USBD_GetEpDesc>
 800ee62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee64:	2181      	movs	r1, #129	@ 0x81
 800ee66:	4813      	ldr	r0, [pc, #76]	@ (800eeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee68:	f000 fd45 	bl	800f8f6 <USBD_GetEpDesc>
 800ee6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2210      	movs	r2, #16
 800ee78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d006      	beq.n	800ee8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee88:	711a      	strb	r2, [r3, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d006      	beq.n	800eea2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee9c:	711a      	strb	r2, [r3, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2243      	movs	r2, #67	@ 0x43
 800eea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eea8:	4b02      	ldr	r3, [pc, #8]	@ (800eeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	24000054 	.word	0x24000054

0800eeb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eec0:	2182      	movs	r1, #130	@ 0x82
 800eec2:	4818      	ldr	r0, [pc, #96]	@ (800ef24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eec4:	f000 fd17 	bl	800f8f6 <USBD_GetEpDesc>
 800eec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eeca:	2101      	movs	r1, #1
 800eecc:	4815      	ldr	r0, [pc, #84]	@ (800ef24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eece:	f000 fd12 	bl	800f8f6 <USBD_GetEpDesc>
 800eed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eed4:	2181      	movs	r1, #129	@ 0x81
 800eed6:	4813      	ldr	r0, [pc, #76]	@ (800ef24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eed8:	f000 fd0d 	bl	800f8f6 <USBD_GetEpDesc>
 800eedc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d002      	beq.n	800eeea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2210      	movs	r2, #16
 800eee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d006      	beq.n	800eefe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2200      	movs	r2, #0
 800eef4:	711a      	strb	r2, [r3, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f042 0202 	orr.w	r2, r2, #2
 800eefc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d006      	beq.n	800ef12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	711a      	strb	r2, [r3, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f042 0202 	orr.w	r2, r2, #2
 800ef10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2243      	movs	r2, #67	@ 0x43
 800ef16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef18:	4b02      	ldr	r3, [pc, #8]	@ (800ef24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	24000054 	.word	0x24000054

0800ef28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ef30:	2182      	movs	r1, #130	@ 0x82
 800ef32:	4818      	ldr	r0, [pc, #96]	@ (800ef94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef34:	f000 fcdf 	bl	800f8f6 <USBD_GetEpDesc>
 800ef38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	4815      	ldr	r0, [pc, #84]	@ (800ef94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef3e:	f000 fcda 	bl	800f8f6 <USBD_GetEpDesc>
 800ef42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ef44:	2181      	movs	r1, #129	@ 0x81
 800ef46:	4813      	ldr	r0, [pc, #76]	@ (800ef94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef48:	f000 fcd5 	bl	800f8f6 <USBD_GetEpDesc>
 800ef4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2210      	movs	r2, #16
 800ef58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef68:	711a      	strb	r2, [r3, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ef7c:	711a      	strb	r2, [r3, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2243      	movs	r2, #67	@ 0x43
 800ef86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef88:	4b02      	ldr	r3, [pc, #8]	@ (800ef94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	24000054 	.word	0x24000054

0800ef98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	220a      	movs	r2, #10
 800efa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800efa6:	4b03      	ldr	r3, [pc, #12]	@ (800efb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	24000010 	.word	0x24000010

0800efb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800efc8:	2303      	movs	r3, #3
 800efca:	e009      	b.n	800efe0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	33b0      	adds	r3, #176	@ 0xb0
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4413      	add	r3, r2
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr

0800efec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800efec:	b480      	push	{r7}
 800efee:	b087      	sub	sp, #28
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	32b0      	adds	r2, #176	@ 0xb0
 800f002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f006:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f00e:	2303      	movs	r3, #3
 800f010:	e008      	b.n	800f024 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	371c      	adds	r7, #28
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f030:	b480      	push	{r7}
 800f032:	b085      	sub	sp, #20
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	32b0      	adds	r2, #176	@ 0xb0
 800f044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d101      	bne.n	800f054 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f050:	2303      	movs	r3, #3
 800f052:	e004      	b.n	800f05e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3714      	adds	r7, #20
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
	...

0800f06c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	32b0      	adds	r2, #176	@ 0xb0
 800f07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f082:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f084:	2301      	movs	r3, #1
 800f086:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d101      	bne.n	800f092 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f08e:	2303      	movs	r3, #3
 800f090:	e025      	b.n	800f0de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d11f      	bne.n	800f0dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f0a4:	4b10      	ldr	r3, [pc, #64]	@ (800f0e8 <USBD_CDC_TransmitPacket+0x7c>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	f003 020f 	and.w	r2, r3, #15
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	4413      	add	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4403      	add	r3, r0
 800f0be:	3318      	adds	r3, #24
 800f0c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f0c2:	4b09      	ldr	r3, [pc, #36]	@ (800f0e8 <USBD_CDC_TransmitPacket+0x7c>)
 800f0c4:	7819      	ldrb	r1, [r3, #0]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f002 f891 	bl	80111fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	24000097 	.word	0x24000097

0800f0ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	32b0      	adds	r2, #176	@ 0xb0
 800f0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f102:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	32b0      	adds	r2, #176	@ 0xb0
 800f10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f116:	2303      	movs	r3, #3
 800f118:	e018      	b.n	800f14c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7c1b      	ldrb	r3, [r3, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10a      	bne.n	800f138 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f122:	4b0c      	ldr	r3, [pc, #48]	@ (800f154 <USBD_CDC_ReceivePacket+0x68>)
 800f124:	7819      	ldrb	r1, [r3, #0]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f12c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f002 f883 	bl	801123c <USBD_LL_PrepareReceive>
 800f136:	e008      	b.n	800f14a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <USBD_CDC_ReceivePacket+0x68>)
 800f13a:	7819      	ldrb	r1, [r3, #0]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f142:	2340      	movs	r3, #64	@ 0x40
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f002 f879 	bl	801123c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	24000098 	.word	0x24000098

0800f158 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	4613      	mov	r3, r2
 800f164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f16c:	2303      	movs	r3, #3
 800f16e:	e01f      	b.n	800f1b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d003      	beq.n	800f196 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	79fa      	ldrb	r2, [r7, #7]
 800f1a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f001 feef 	bl	8010f88 <USBD_LL_Init>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3718      	adds	r7, #24
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d101      	bne.n	800f1d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	e025      	b.n	800f21c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	32ae      	adds	r2, #174	@ 0xae
 800f1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00f      	beq.n	800f20c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	32ae      	adds	r2, #174	@ 0xae
 800f1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1fc:	f107 020e 	add.w	r2, r7, #14
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	4602      	mov	r2, r0
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f001 fefb 	bl	8011028 <USBD_LL_Start>
 800f232:	4603      	mov	r3, r0
}
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f244:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f246:	4618      	mov	r0, r3
 800f248:	370c      	adds	r7, #12
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b084      	sub	sp, #16
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	460b      	mov	r3, r1
 800f25c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f25e:	2300      	movs	r3, #0
 800f260:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d009      	beq.n	800f280 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	78fa      	ldrb	r2, [r7, #3]
 800f276:	4611      	mov	r1, r2
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	4798      	blx	r3
 800f27c:	4603      	mov	r3, r0
 800f27e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f280:	7bfb      	ldrb	r3, [r7, #15]
}
 800f282:	4618      	mov	r0, r3
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b084      	sub	sp, #16
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	460b      	mov	r3, r1
 800f294:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	78fa      	ldrb	r2, [r7, #3]
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	4798      	blx	r3
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b084      	sub	sp, #16
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
 800f2c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f001 f936 	bl	8010542 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f2f2:	f003 031f 	and.w	r3, r3, #31
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d01a      	beq.n	800f330 <USBD_LL_SetupStage+0x72>
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d822      	bhi.n	800f344 <USBD_LL_SetupStage+0x86>
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <USBD_LL_SetupStage+0x4a>
 800f302:	2b01      	cmp	r3, #1
 800f304:	d00a      	beq.n	800f31c <USBD_LL_SetupStage+0x5e>
 800f306:	e01d      	b.n	800f344 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fb63 	bl	800f9dc <USBD_StdDevReq>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
      break;
 800f31a:	e020      	b.n	800f35e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f322:	4619      	mov	r1, r3
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 fbcb 	bl	800fac0 <USBD_StdItfReq>
 800f32a:	4603      	mov	r3, r0
 800f32c:	73fb      	strb	r3, [r7, #15]
      break;
 800f32e:	e016      	b.n	800f35e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f336:	4619      	mov	r1, r3
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 fc2d 	bl	800fb98 <USBD_StdEPReq>
 800f33e:	4603      	mov	r3, r0
 800f340:	73fb      	strb	r3, [r7, #15]
      break;
 800f342:	e00c      	b.n	800f35e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f34a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f001 fec8 	bl	80110e8 <USBD_LL_StallEP>
 800f358:	4603      	mov	r3, r0
 800f35a:	73fb      	strb	r3, [r7, #15]
      break;
 800f35c:	bf00      	nop
  }

  return ret;
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	460b      	mov	r3, r1
 800f372:	607a      	str	r2, [r7, #4]
 800f374:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f37a:	7afb      	ldrb	r3, [r7, #11]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d16e      	bne.n	800f45e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f386:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f38e:	2b03      	cmp	r3, #3
 800f390:	f040 8098 	bne.w	800f4c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	689a      	ldr	r2, [r3, #8]
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d913      	bls.n	800f3c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	689a      	ldr	r2, [r3, #8]
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	1ad2      	subs	r2, r2, r3
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	68da      	ldr	r2, [r3, #12]
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	bf28      	it	cs
 800f3ba:	4613      	movcs	r3, r2
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6879      	ldr	r1, [r7, #4]
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f001 f9be 	bl	8010742 <USBD_CtlContinueRx>
 800f3c6:	e07d      	b.n	800f4c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f3ce:	f003 031f 	and.w	r3, r3, #31
 800f3d2:	2b02      	cmp	r3, #2
 800f3d4:	d014      	beq.n	800f400 <USBD_LL_DataOutStage+0x98>
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d81d      	bhi.n	800f416 <USBD_LL_DataOutStage+0xae>
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <USBD_LL_DataOutStage+0x7c>
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d003      	beq.n	800f3ea <USBD_LL_DataOutStage+0x82>
 800f3e2:	e018      	b.n	800f416 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	75bb      	strb	r3, [r7, #22]
            break;
 800f3e8:	e018      	b.n	800f41c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 fa64 	bl	800f8c2 <USBD_CoreFindIF>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	75bb      	strb	r3, [r7, #22]
            break;
 800f3fe:	e00d      	b.n	800f41c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f406:	b2db      	uxtb	r3, r3
 800f408:	4619      	mov	r1, r3
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f000 fa66 	bl	800f8dc <USBD_CoreFindEP>
 800f410:	4603      	mov	r3, r0
 800f412:	75bb      	strb	r3, [r7, #22]
            break;
 800f414:	e002      	b.n	800f41c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	75bb      	strb	r3, [r7, #22]
            break;
 800f41a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f41c:	7dbb      	ldrb	r3, [r7, #22]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d119      	bne.n	800f456 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b03      	cmp	r3, #3
 800f42c:	d113      	bne.n	800f456 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f42e:	7dba      	ldrb	r2, [r7, #22]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	32ae      	adds	r2, #174	@ 0xae
 800f434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f43e:	7dba      	ldrb	r2, [r7, #22]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f446:	7dba      	ldrb	r2, [r7, #22]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	32ae      	adds	r2, #174	@ 0xae
 800f44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f001 f984 	bl	8010764 <USBD_CtlSendStatus>
 800f45c:	e032      	b.n	800f4c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f45e:	7afb      	ldrb	r3, [r7, #11]
 800f460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f464:	b2db      	uxtb	r3, r3
 800f466:	4619      	mov	r1, r3
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f000 fa37 	bl	800f8dc <USBD_CoreFindEP>
 800f46e:	4603      	mov	r3, r0
 800f470:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f472:	7dbb      	ldrb	r3, [r7, #22]
 800f474:	2bff      	cmp	r3, #255	@ 0xff
 800f476:	d025      	beq.n	800f4c4 <USBD_LL_DataOutStage+0x15c>
 800f478:	7dbb      	ldrb	r3, [r7, #22]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d122      	bne.n	800f4c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f484:	b2db      	uxtb	r3, r3
 800f486:	2b03      	cmp	r3, #3
 800f488:	d117      	bne.n	800f4ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f48a:	7dba      	ldrb	r2, [r7, #22]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	32ae      	adds	r2, #174	@ 0xae
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	699b      	ldr	r3, [r3, #24]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00f      	beq.n	800f4ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f49a:	7dba      	ldrb	r2, [r7, #22]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f4a2:	7dba      	ldrb	r2, [r7, #22]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	32ae      	adds	r2, #174	@ 0xae
 800f4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	7afa      	ldrb	r2, [r7, #11]
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	4798      	blx	r3
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f4ba:	7dfb      	ldrb	r3, [r7, #23]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	e000      	b.n	800f4c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f4c4:	2300      	movs	r3, #0
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3718      	adds	r7, #24
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	607a      	str	r2, [r7, #4]
 800f4da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f4dc:	7afb      	ldrb	r3, [r7, #11]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d16f      	bne.n	800f5c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	3314      	adds	r3, #20
 800f4e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d15a      	bne.n	800f5a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	689a      	ldr	r2, [r3, #8]
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d914      	bls.n	800f528 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	689a      	ldr	r2, [r3, #8]
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	1ad2      	subs	r2, r2, r3
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	461a      	mov	r2, r3
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f001 f8e6 	bl	80106e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f51a:	2300      	movs	r3, #0
 800f51c:	2200      	movs	r2, #0
 800f51e:	2100      	movs	r1, #0
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f001 fe8b 	bl	801123c <USBD_LL_PrepareReceive>
 800f526:	e03f      	b.n	800f5a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	429a      	cmp	r2, r3
 800f532:	d11c      	bne.n	800f56e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d316      	bcc.n	800f56e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d20f      	bcs.n	800f56e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f54e:	2200      	movs	r2, #0
 800f550:	2100      	movs	r1, #0
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f001 f8c7 	bl	80106e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f560:	2300      	movs	r3, #0
 800f562:	2200      	movs	r2, #0
 800f564:	2100      	movs	r1, #0
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f001 fe68 	bl	801123c <USBD_LL_PrepareReceive>
 800f56c:	e01c      	b.n	800f5a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f574:	b2db      	uxtb	r3, r3
 800f576:	2b03      	cmp	r3, #3
 800f578:	d10f      	bne.n	800f59a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d009      	beq.n	800f59a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2200      	movs	r2, #0
 800f58a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f59a:	2180      	movs	r1, #128	@ 0x80
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f001 fda3 	bl	80110e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f001 f8f1 	bl	801078a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d03a      	beq.n	800f628 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f7ff fe42 	bl	800f23c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f5c0:	e032      	b.n	800f628 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f5c2:	7afb      	ldrb	r3, [r7, #11]
 800f5c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f000 f985 	bl	800f8dc <USBD_CoreFindEP>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5d6:	7dfb      	ldrb	r3, [r7, #23]
 800f5d8:	2bff      	cmp	r3, #255	@ 0xff
 800f5da:	d025      	beq.n	800f628 <USBD_LL_DataInStage+0x15a>
 800f5dc:	7dfb      	ldrb	r3, [r7, #23]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d122      	bne.n	800f628 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d11c      	bne.n	800f628 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f5ee:	7dfa      	ldrb	r2, [r7, #23]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	32ae      	adds	r2, #174	@ 0xae
 800f5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f8:	695b      	ldr	r3, [r3, #20]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d014      	beq.n	800f628 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f5fe:	7dfa      	ldrb	r2, [r7, #23]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f606:	7dfa      	ldrb	r2, [r7, #23]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	32ae      	adds	r2, #174	@ 0xae
 800f60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f610:	695b      	ldr	r3, [r3, #20]
 800f612:	7afa      	ldrb	r2, [r7, #11]
 800f614:	4611      	mov	r1, r2
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	4798      	blx	r3
 800f61a:	4603      	mov	r3, r0
 800f61c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f61e:	7dbb      	ldrb	r3, [r7, #22]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f624:	7dbb      	ldrb	r3, [r7, #22]
 800f626:	e000      	b.n	800f62a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b084      	sub	sp, #16
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f63a:	2300      	movs	r3, #0
 800f63c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2201      	movs	r2, #1
 800f642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2200      	movs	r2, #0
 800f64a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d014      	beq.n	800f698 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00e      	beq.n	800f698 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	6852      	ldr	r2, [r2, #4]
 800f686:	b2d2      	uxtb	r2, r2
 800f688:	4611      	mov	r1, r2
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	4798      	blx	r3
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f694:	2303      	movs	r3, #3
 800f696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f698:	2340      	movs	r3, #64	@ 0x40
 800f69a:	2200      	movs	r2, #0
 800f69c:	2100      	movs	r1, #0
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f001 fcdd 	bl	801105e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2240      	movs	r2, #64	@ 0x40
 800f6b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6b4:	2340      	movs	r3, #64	@ 0x40
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	2180      	movs	r1, #128	@ 0x80
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f001 fccf 	bl	801105e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2240      	movs	r2, #64	@ 0x40
 800f6ca:	621a      	str	r2, [r3, #32]

  return ret;
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b083      	sub	sp, #12
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	460b      	mov	r3, r1
 800f6e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	78fa      	ldrb	r2, [r7, #3]
 800f6e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	370c      	adds	r7, #12
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b083      	sub	sp, #12
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b04      	cmp	r3, #4
 800f708:	d006      	beq.n	800f718 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f710:	b2da      	uxtb	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2204      	movs	r2, #4
 800f71c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	370c      	adds	r7, #12
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f72e:	b480      	push	{r7}
 800f730:	b083      	sub	sp, #12
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b04      	cmp	r3, #4
 800f740:	d106      	bne.n	800f750 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr

0800f75e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b082      	sub	sp, #8
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d110      	bne.n	800f794 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00b      	beq.n	800f794 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d005      	beq.n	800f794 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f78e:	69db      	ldr	r3, [r3, #28]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b082      	sub	sp, #8
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	32ae      	adds	r2, #174	@ 0xae
 800f7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d101      	bne.n	800f7c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f7bc:	2303      	movs	r3, #3
 800f7be:	e01c      	b.n	800f7fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b03      	cmp	r3, #3
 800f7ca:	d115      	bne.n	800f7f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	32ae      	adds	r2, #174	@ 0xae
 800f7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7da:	6a1b      	ldr	r3, [r3, #32]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00b      	beq.n	800f7f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	32ae      	adds	r2, #174	@ 0xae
 800f7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ee:	6a1b      	ldr	r3, [r3, #32]
 800f7f0:	78fa      	ldrb	r2, [r7, #3]
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f7f8:	2300      	movs	r3, #0
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b082      	sub	sp, #8
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	460b      	mov	r3, r1
 800f80c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	32ae      	adds	r2, #174	@ 0xae
 800f818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d101      	bne.n	800f824 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f820:	2303      	movs	r3, #3
 800f822:	e01c      	b.n	800f85e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b03      	cmp	r3, #3
 800f82e:	d115      	bne.n	800f85c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	32ae      	adds	r2, #174	@ 0xae
 800f83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00b      	beq.n	800f85c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	32ae      	adds	r2, #174	@ 0xae
 800f84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f854:	78fa      	ldrb	r2, [r7, #3]
 800f856:	4611      	mov	r1, r2
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}

0800f866 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f866:	b480      	push	{r7}
 800f868:	b083      	sub	sp, #12
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f86e:	2300      	movs	r3, #0
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00e      	beq.n	800f8b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	6852      	ldr	r2, [r2, #4]
 800f8a6:	b2d2      	uxtb	r2, r2
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	4798      	blx	r3
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d001      	beq.n	800f8b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f8b4:	2303      	movs	r3, #3
 800f8b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8c2:	b480      	push	{r7}
 800f8c4:	b083      	sub	sp, #12
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b086      	sub	sp, #24
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	460b      	mov	r3, r1
 800f900:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f90a:	2300      	movs	r3, #0
 800f90c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	885b      	ldrh	r3, [r3, #2]
 800f912:	b29b      	uxth	r3, r3
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	7812      	ldrb	r2, [r2, #0]
 800f918:	4293      	cmp	r3, r2
 800f91a:	d91f      	bls.n	800f95c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f922:	e013      	b.n	800f94c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f924:	f107 030a 	add.w	r3, r7, #10
 800f928:	4619      	mov	r1, r3
 800f92a:	6978      	ldr	r0, [r7, #20]
 800f92c:	f000 f81b 	bl	800f966 <USBD_GetNextDesc>
 800f930:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	785b      	ldrb	r3, [r3, #1]
 800f936:	2b05      	cmp	r3, #5
 800f938:	d108      	bne.n	800f94c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	789b      	ldrb	r3, [r3, #2]
 800f942:	78fa      	ldrb	r2, [r7, #3]
 800f944:	429a      	cmp	r2, r3
 800f946:	d008      	beq.n	800f95a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f948:	2300      	movs	r3, #0
 800f94a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	885b      	ldrh	r3, [r3, #2]
 800f950:	b29a      	uxth	r2, r3
 800f952:	897b      	ldrh	r3, [r7, #10]
 800f954:	429a      	cmp	r2, r3
 800f956:	d8e5      	bhi.n	800f924 <USBD_GetEpDesc+0x2e>
 800f958:	e000      	b.n	800f95c <USBD_GetEpDesc+0x66>
          break;
 800f95a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f95c:	693b      	ldr	r3, [r7, #16]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3718      	adds	r7, #24
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f966:	b480      	push	{r7}
 800f968:	b085      	sub	sp, #20
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	881b      	ldrh	r3, [r3, #0]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	7812      	ldrb	r2, [r2, #0]
 800f97c:	4413      	add	r3, r2
 800f97e:	b29a      	uxth	r2, r3
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	4413      	add	r3, r2
 800f98e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f990:	68fb      	ldr	r3, [r7, #12]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b087      	sub	sp, #28
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f9bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f9c0:	021b      	lsls	r3, r3, #8
 800f9c2:	b21a      	sxth	r2, r3
 800f9c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	b21b      	sxth	r3, r3
 800f9cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f9ce:	89fb      	ldrh	r3, [r7, #14]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	371c      	adds	r7, #28
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9f2:	2b40      	cmp	r3, #64	@ 0x40
 800f9f4:	d005      	beq.n	800fa02 <USBD_StdDevReq+0x26>
 800f9f6:	2b40      	cmp	r3, #64	@ 0x40
 800f9f8:	d857      	bhi.n	800faaa <USBD_StdDevReq+0xce>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00f      	beq.n	800fa1e <USBD_StdDevReq+0x42>
 800f9fe:	2b20      	cmp	r3, #32
 800fa00:	d153      	bne.n	800faaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	32ae      	adds	r2, #174	@ 0xae
 800fa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	4798      	blx	r3
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa1c:	e04a      	b.n	800fab4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	785b      	ldrb	r3, [r3, #1]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d83b      	bhi.n	800fa9e <USBD_StdDevReq+0xc2>
 800fa26:	a201      	add	r2, pc, #4	@ (adr r2, 800fa2c <USBD_StdDevReq+0x50>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa81 	.word	0x0800fa81
 800fa30:	0800fa95 	.word	0x0800fa95
 800fa34:	0800fa9f 	.word	0x0800fa9f
 800fa38:	0800fa8b 	.word	0x0800fa8b
 800fa3c:	0800fa9f 	.word	0x0800fa9f
 800fa40:	0800fa5f 	.word	0x0800fa5f
 800fa44:	0800fa55 	.word	0x0800fa55
 800fa48:	0800fa9f 	.word	0x0800fa9f
 800fa4c:	0800fa77 	.word	0x0800fa77
 800fa50:	0800fa69 	.word	0x0800fa69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 fa3c 	bl	800fed4 <USBD_GetDescriptor>
          break;
 800fa5c:	e024      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 fbcb 	bl	80101fc <USBD_SetAddress>
          break;
 800fa66:	e01f      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fa68:	6839      	ldr	r1, [r7, #0]
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 fc0a 	bl	8010284 <USBD_SetConfig>
 800fa70:	4603      	mov	r3, r0
 800fa72:	73fb      	strb	r3, [r7, #15]
          break;
 800fa74:	e018      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fcad 	bl	80103d8 <USBD_GetConfig>
          break;
 800fa7e:	e013      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 fcde 	bl	8010444 <USBD_GetStatus>
          break;
 800fa88:	e00e      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fa8a:	6839      	ldr	r1, [r7, #0]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 fd0d 	bl	80104ac <USBD_SetFeature>
          break;
 800fa92:	e009      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fd31 	bl	80104fe <USBD_ClrFeature>
          break;
 800fa9c:	e004      	b.n	800faa8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 fd88 	bl	80105b6 <USBD_CtlError>
          break;
 800faa6:	bf00      	nop
      }
      break;
 800faa8:	e004      	b.n	800fab4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fd82 	bl	80105b6 <USBD_CtlError>
      break;
 800fab2:	bf00      	nop
  }

  return ret;
 800fab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop

0800fac0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fad6:	2b40      	cmp	r3, #64	@ 0x40
 800fad8:	d005      	beq.n	800fae6 <USBD_StdItfReq+0x26>
 800fada:	2b40      	cmp	r3, #64	@ 0x40
 800fadc:	d852      	bhi.n	800fb84 <USBD_StdItfReq+0xc4>
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <USBD_StdItfReq+0x26>
 800fae2:	2b20      	cmp	r3, #32
 800fae4:	d14e      	bne.n	800fb84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faec:	b2db      	uxtb	r3, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d840      	bhi.n	800fb76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	889b      	ldrh	r3, [r3, #4]
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d836      	bhi.n	800fb6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	889b      	ldrh	r3, [r3, #4]
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	4619      	mov	r1, r3
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fedb 	bl	800f8c2 <USBD_CoreFindIF>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb10:	7bbb      	ldrb	r3, [r7, #14]
 800fb12:	2bff      	cmp	r3, #255	@ 0xff
 800fb14:	d01d      	beq.n	800fb52 <USBD_StdItfReq+0x92>
 800fb16:	7bbb      	ldrb	r3, [r7, #14]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d11a      	bne.n	800fb52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fb1c:	7bba      	ldrb	r2, [r7, #14]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	32ae      	adds	r2, #174	@ 0xae
 800fb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00f      	beq.n	800fb4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fb2c:	7bba      	ldrb	r2, [r7, #14]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb34:	7bba      	ldrb	r2, [r7, #14]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	32ae      	adds	r2, #174	@ 0xae
 800fb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	6839      	ldr	r1, [r7, #0]
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	4798      	blx	r3
 800fb46:	4603      	mov	r3, r0
 800fb48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb4a:	e004      	b.n	800fb56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb50:	e001      	b.n	800fb56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fb52:	2303      	movs	r3, #3
 800fb54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	88db      	ldrh	r3, [r3, #6]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d110      	bne.n	800fb80 <USBD_StdItfReq+0xc0>
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10d      	bne.n	800fb80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fdfd 	bl	8010764 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb6a:	e009      	b.n	800fb80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fd21 	bl	80105b6 <USBD_CtlError>
          break;
 800fb74:	e004      	b.n	800fb80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fd1c 	bl	80105b6 <USBD_CtlError>
          break;
 800fb7e:	e000      	b.n	800fb82 <USBD_StdItfReq+0xc2>
          break;
 800fb80:	bf00      	nop
      }
      break;
 800fb82:	e004      	b.n	800fb8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fd15 	bl	80105b6 <USBD_CtlError>
      break;
 800fb8c:	bf00      	nop
  }

  return ret;
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fba2:	2300      	movs	r3, #0
 800fba4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	889b      	ldrh	r3, [r3, #4]
 800fbaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fbb4:	2b40      	cmp	r3, #64	@ 0x40
 800fbb6:	d007      	beq.n	800fbc8 <USBD_StdEPReq+0x30>
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	f200 817f 	bhi.w	800febc <USBD_StdEPReq+0x324>
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d02a      	beq.n	800fc18 <USBD_StdEPReq+0x80>
 800fbc2:	2b20      	cmp	r3, #32
 800fbc4:	f040 817a 	bne.w	800febc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fbc8:	7bbb      	ldrb	r3, [r7, #14]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff fe85 	bl	800f8dc <USBD_CoreFindEP>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fbd6:	7b7b      	ldrb	r3, [r7, #13]
 800fbd8:	2bff      	cmp	r3, #255	@ 0xff
 800fbda:	f000 8174 	beq.w	800fec6 <USBD_StdEPReq+0x32e>
 800fbde:	7b7b      	ldrb	r3, [r7, #13]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 8170 	bne.w	800fec6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fbe6:	7b7a      	ldrb	r2, [r7, #13]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fbee:	7b7a      	ldrb	r2, [r7, #13]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	32ae      	adds	r2, #174	@ 0xae
 800fbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 8163 	beq.w	800fec6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fc00:	7b7a      	ldrb	r2, [r7, #13]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	32ae      	adds	r2, #174	@ 0xae
 800fc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	6839      	ldr	r1, [r7, #0]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	4798      	blx	r3
 800fc12:	4603      	mov	r3, r0
 800fc14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fc16:	e156      	b.n	800fec6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	785b      	ldrb	r3, [r3, #1]
 800fc1c:	2b03      	cmp	r3, #3
 800fc1e:	d008      	beq.n	800fc32 <USBD_StdEPReq+0x9a>
 800fc20:	2b03      	cmp	r3, #3
 800fc22:	f300 8145 	bgt.w	800feb0 <USBD_StdEPReq+0x318>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 809b 	beq.w	800fd62 <USBD_StdEPReq+0x1ca>
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d03c      	beq.n	800fcaa <USBD_StdEPReq+0x112>
 800fc30:	e13e      	b.n	800feb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d002      	beq.n	800fc44 <USBD_StdEPReq+0xac>
 800fc3e:	2b03      	cmp	r3, #3
 800fc40:	d016      	beq.n	800fc70 <USBD_StdEPReq+0xd8>
 800fc42:	e02c      	b.n	800fc9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc44:	7bbb      	ldrb	r3, [r7, #14]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00d      	beq.n	800fc66 <USBD_StdEPReq+0xce>
 800fc4a:	7bbb      	ldrb	r3, [r7, #14]
 800fc4c:	2b80      	cmp	r3, #128	@ 0x80
 800fc4e:	d00a      	beq.n	800fc66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f001 fa47 	bl	80110e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc5a:	2180      	movs	r1, #128	@ 0x80
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 fa43 	bl	80110e8 <USBD_LL_StallEP>
 800fc62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc64:	e020      	b.n	800fca8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fca4 	bl	80105b6 <USBD_CtlError>
              break;
 800fc6e:	e01b      	b.n	800fca8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	885b      	ldrh	r3, [r3, #2]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10e      	bne.n	800fc96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d00b      	beq.n	800fc96 <USBD_StdEPReq+0xfe>
 800fc7e:	7bbb      	ldrb	r3, [r7, #14]
 800fc80:	2b80      	cmp	r3, #128	@ 0x80
 800fc82:	d008      	beq.n	800fc96 <USBD_StdEPReq+0xfe>
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	88db      	ldrh	r3, [r3, #6]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d104      	bne.n	800fc96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc8c:	7bbb      	ldrb	r3, [r7, #14]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f001 fa29 	bl	80110e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fd64 	bl	8010764 <USBD_CtlSendStatus>

              break;
 800fc9c:	e004      	b.n	800fca8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fc9e:	6839      	ldr	r1, [r7, #0]
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fc88 	bl	80105b6 <USBD_CtlError>
              break;
 800fca6:	bf00      	nop
          }
          break;
 800fca8:	e107      	b.n	800feba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b02      	cmp	r3, #2
 800fcb4:	d002      	beq.n	800fcbc <USBD_StdEPReq+0x124>
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	d016      	beq.n	800fce8 <USBD_StdEPReq+0x150>
 800fcba:	e04b      	b.n	800fd54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcbc:	7bbb      	ldrb	r3, [r7, #14]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00d      	beq.n	800fcde <USBD_StdEPReq+0x146>
 800fcc2:	7bbb      	ldrb	r3, [r7, #14]
 800fcc4:	2b80      	cmp	r3, #128	@ 0x80
 800fcc6:	d00a      	beq.n	800fcde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f001 fa0b 	bl	80110e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcd2:	2180      	movs	r1, #128	@ 0x80
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f001 fa07 	bl	80110e8 <USBD_LL_StallEP>
 800fcda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fcdc:	e040      	b.n	800fd60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 fc68 	bl	80105b6 <USBD_CtlError>
              break;
 800fce6:	e03b      	b.n	800fd60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	885b      	ldrh	r3, [r3, #2]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d136      	bne.n	800fd5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcf0:	7bbb      	ldrb	r3, [r7, #14]
 800fcf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d004      	beq.n	800fd04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcfa:	7bbb      	ldrb	r3, [r7, #14]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f001 fa11 	bl	8011126 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fd2d 	bl	8010764 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7ff fde4 	bl	800f8dc <USBD_CoreFindEP>
 800fd14:	4603      	mov	r3, r0
 800fd16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd18:	7b7b      	ldrb	r3, [r7, #13]
 800fd1a:	2bff      	cmp	r3, #255	@ 0xff
 800fd1c:	d01f      	beq.n	800fd5e <USBD_StdEPReq+0x1c6>
 800fd1e:	7b7b      	ldrb	r3, [r7, #13]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d11c      	bne.n	800fd5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fd24:	7b7a      	ldrb	r2, [r7, #13]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fd2c:	7b7a      	ldrb	r2, [r7, #13]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	32ae      	adds	r2, #174	@ 0xae
 800fd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d010      	beq.n	800fd5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fd3c:	7b7a      	ldrb	r2, [r7, #13]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	32ae      	adds	r2, #174	@ 0xae
 800fd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	4798      	blx	r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fd52:	e004      	b.n	800fd5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fc2d 	bl	80105b6 <USBD_CtlError>
              break;
 800fd5c:	e000      	b.n	800fd60 <USBD_StdEPReq+0x1c8>
              break;
 800fd5e:	bf00      	nop
          }
          break;
 800fd60:	e0ab      	b.n	800feba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	d002      	beq.n	800fd74 <USBD_StdEPReq+0x1dc>
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d032      	beq.n	800fdd8 <USBD_StdEPReq+0x240>
 800fd72:	e097      	b.n	800fea4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd74:	7bbb      	ldrb	r3, [r7, #14]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d007      	beq.n	800fd8a <USBD_StdEPReq+0x1f2>
 800fd7a:	7bbb      	ldrb	r3, [r7, #14]
 800fd7c:	2b80      	cmp	r3, #128	@ 0x80
 800fd7e:	d004      	beq.n	800fd8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 fc17 	bl	80105b6 <USBD_CtlError>
                break;
 800fd88:	e091      	b.n	800feae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da0b      	bge.n	800fdaa <USBD_StdEPReq+0x212>
 800fd92:	7bbb      	ldrb	r3, [r7, #14]
 800fd94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fd98:	4613      	mov	r3, r2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	3310      	adds	r3, #16
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	4413      	add	r3, r2
 800fda6:	3304      	adds	r3, #4
 800fda8:	e00b      	b.n	800fdc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fdaa:	7bbb      	ldrb	r3, [r7, #14]
 800fdac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	4413      	add	r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	2202      	movs	r2, #2
 800fdce:	4619      	mov	r1, r3
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fc6d 	bl	80106b0 <USBD_CtlSendData>
              break;
 800fdd6:	e06a      	b.n	800feae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fdd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	da11      	bge.n	800fe04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fde0:	7bbb      	ldrb	r3, [r7, #14]
 800fde2:	f003 020f 	and.w	r2, r3, #15
 800fde6:	6879      	ldr	r1, [r7, #4]
 800fde8:	4613      	mov	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	4413      	add	r3, r2
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	440b      	add	r3, r1
 800fdf2:	3324      	adds	r3, #36	@ 0x24
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d117      	bne.n	800fe2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 fbda 	bl	80105b6 <USBD_CtlError>
                  break;
 800fe02:	e054      	b.n	800feae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fe04:	7bbb      	ldrb	r3, [r7, #14]
 800fe06:	f003 020f 	and.w	r2, r3, #15
 800fe0a:	6879      	ldr	r1, [r7, #4]
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	4413      	add	r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	440b      	add	r3, r1
 800fe16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d104      	bne.n	800fe2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fbc7 	bl	80105b6 <USBD_CtlError>
                  break;
 800fe28:	e041      	b.n	800feae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da0b      	bge.n	800fe4a <USBD_StdEPReq+0x2b2>
 800fe32:	7bbb      	ldrb	r3, [r7, #14]
 800fe34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fe38:	4613      	mov	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	4413      	add	r3, r2
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	3310      	adds	r3, #16
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	4413      	add	r3, r2
 800fe46:	3304      	adds	r3, #4
 800fe48:	e00b      	b.n	800fe62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe4a:	7bbb      	ldrb	r3, [r7, #14]
 800fe4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe50:	4613      	mov	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	4413      	add	r3, r2
 800fe60:	3304      	adds	r3, #4
 800fe62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe64:	7bbb      	ldrb	r3, [r7, #14]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <USBD_StdEPReq+0x2d8>
 800fe6a:	7bbb      	ldrb	r3, [r7, #14]
 800fe6c:	2b80      	cmp	r3, #128	@ 0x80
 800fe6e:	d103      	bne.n	800fe78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	2200      	movs	r2, #0
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	e00e      	b.n	800fe96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe78:	7bbb      	ldrb	r3, [r7, #14]
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f001 f971 	bl	8011164 <USBD_LL_IsStallEP>
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	601a      	str	r2, [r3, #0]
 800fe8e:	e002      	b.n	800fe96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2202      	movs	r2, #2
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 fc07 	bl	80106b0 <USBD_CtlSendData>
              break;
 800fea2:	e004      	b.n	800feae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 fb85 	bl	80105b6 <USBD_CtlError>
              break;
 800feac:	bf00      	nop
          }
          break;
 800feae:	e004      	b.n	800feba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800feb0:	6839      	ldr	r1, [r7, #0]
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 fb7f 	bl	80105b6 <USBD_CtlError>
          break;
 800feb8:	bf00      	nop
      }
      break;
 800feba:	e005      	b.n	800fec8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800febc:	6839      	ldr	r1, [r7, #0]
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fb79 	bl	80105b6 <USBD_CtlError>
      break;
 800fec4:	e000      	b.n	800fec8 <USBD_StdEPReq+0x330>
      break;
 800fec6:	bf00      	nop
  }

  return ret;
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
	...

0800fed4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fede:	2300      	movs	r3, #0
 800fee0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fee6:	2300      	movs	r3, #0
 800fee8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	885b      	ldrh	r3, [r3, #2]
 800feee:	0a1b      	lsrs	r3, r3, #8
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	3b01      	subs	r3, #1
 800fef4:	2b0e      	cmp	r3, #14
 800fef6:	f200 8152 	bhi.w	801019e <USBD_GetDescriptor+0x2ca>
 800fefa:	a201      	add	r2, pc, #4	@ (adr r2, 800ff00 <USBD_GetDescriptor+0x2c>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ff71 	.word	0x0800ff71
 800ff04:	0800ff89 	.word	0x0800ff89
 800ff08:	0800ffc9 	.word	0x0800ffc9
 800ff0c:	0801019f 	.word	0x0801019f
 800ff10:	0801019f 	.word	0x0801019f
 800ff14:	0801013f 	.word	0x0801013f
 800ff18:	0801016b 	.word	0x0801016b
 800ff1c:	0801019f 	.word	0x0801019f
 800ff20:	0801019f 	.word	0x0801019f
 800ff24:	0801019f 	.word	0x0801019f
 800ff28:	0801019f 	.word	0x0801019f
 800ff2c:	0801019f 	.word	0x0801019f
 800ff30:	0801019f 	.word	0x0801019f
 800ff34:	0801019f 	.word	0x0801019f
 800ff38:	0800ff3d 	.word	0x0800ff3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff42:	69db      	ldr	r3, [r3, #28]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d00b      	beq.n	800ff60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	7c12      	ldrb	r2, [r2, #16]
 800ff54:	f107 0108 	add.w	r1, r7, #8
 800ff58:	4610      	mov	r0, r2
 800ff5a:	4798      	blx	r3
 800ff5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff5e:	e126      	b.n	80101ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff60:	6839      	ldr	r1, [r7, #0]
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 fb27 	bl	80105b6 <USBD_CtlError>
        err++;
 800ff68:	7afb      	ldrb	r3, [r7, #11]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ff6e:	e11e      	b.n	80101ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	7c12      	ldrb	r2, [r2, #16]
 800ff7c:	f107 0108 	add.w	r1, r7, #8
 800ff80:	4610      	mov	r0, r2
 800ff82:	4798      	blx	r3
 800ff84:	60f8      	str	r0, [r7, #12]
      break;
 800ff86:	e112      	b.n	80101ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7c1b      	ldrb	r3, [r3, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10d      	bne.n	800ffac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff98:	f107 0208 	add.w	r2, r7, #8
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4798      	blx	r3
 800ffa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	2202      	movs	r2, #2
 800ffa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ffaa:	e100      	b.n	80101ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb4:	f107 0208 	add.w	r2, r7, #8
 800ffb8:	4610      	mov	r0, r2
 800ffba:	4798      	blx	r3
 800ffbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	2202      	movs	r2, #2
 800ffc4:	701a      	strb	r2, [r3, #0]
      break;
 800ffc6:	e0f2      	b.n	80101ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	885b      	ldrh	r3, [r3, #2]
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	2b05      	cmp	r3, #5
 800ffd0:	f200 80ac 	bhi.w	801012c <USBD_GetDescriptor+0x258>
 800ffd4:	a201      	add	r2, pc, #4	@ (adr r2, 800ffdc <USBD_GetDescriptor+0x108>)
 800ffd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffda:	bf00      	nop
 800ffdc:	0800fff5 	.word	0x0800fff5
 800ffe0:	08010029 	.word	0x08010029
 800ffe4:	0801005d 	.word	0x0801005d
 800ffe8:	08010091 	.word	0x08010091
 800ffec:	080100c5 	.word	0x080100c5
 800fff0:	080100f9 	.word	0x080100f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00b      	beq.n	8010018 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	7c12      	ldrb	r2, [r2, #16]
 801000c:	f107 0108 	add.w	r1, r7, #8
 8010010:	4610      	mov	r0, r2
 8010012:	4798      	blx	r3
 8010014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010016:	e091      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010018:	6839      	ldr	r1, [r7, #0]
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 facb 	bl	80105b6 <USBD_CtlError>
            err++;
 8010020:	7afb      	ldrb	r3, [r7, #11]
 8010022:	3301      	adds	r3, #1
 8010024:	72fb      	strb	r3, [r7, #11]
          break;
 8010026:	e089      	b.n	801013c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00b      	beq.n	801004c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	7c12      	ldrb	r2, [r2, #16]
 8010040:	f107 0108 	add.w	r1, r7, #8
 8010044:	4610      	mov	r0, r2
 8010046:	4798      	blx	r3
 8010048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801004a:	e077      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fab1 	bl	80105b6 <USBD_CtlError>
            err++;
 8010054:	7afb      	ldrb	r3, [r7, #11]
 8010056:	3301      	adds	r3, #1
 8010058:	72fb      	strb	r3, [r7, #11]
          break;
 801005a:	e06f      	b.n	801013c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00b      	beq.n	8010080 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	7c12      	ldrb	r2, [r2, #16]
 8010074:	f107 0108 	add.w	r1, r7, #8
 8010078:	4610      	mov	r0, r2
 801007a:	4798      	blx	r3
 801007c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801007e:	e05d      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 fa97 	bl	80105b6 <USBD_CtlError>
            err++;
 8010088:	7afb      	ldrb	r3, [r7, #11]
 801008a:	3301      	adds	r3, #1
 801008c:	72fb      	strb	r3, [r7, #11]
          break;
 801008e:	e055      	b.n	801013c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00b      	beq.n	80100b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	7c12      	ldrb	r2, [r2, #16]
 80100a8:	f107 0108 	add.w	r1, r7, #8
 80100ac:	4610      	mov	r0, r2
 80100ae:	4798      	blx	r3
 80100b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100b2:	e043      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fa7d 	bl	80105b6 <USBD_CtlError>
            err++;
 80100bc:	7afb      	ldrb	r3, [r7, #11]
 80100be:	3301      	adds	r3, #1
 80100c0:	72fb      	strb	r3, [r7, #11]
          break;
 80100c2:	e03b      	b.n	801013c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100ca:	695b      	ldr	r3, [r3, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00b      	beq.n	80100e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100d6:	695b      	ldr	r3, [r3, #20]
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	7c12      	ldrb	r2, [r2, #16]
 80100dc:	f107 0108 	add.w	r1, r7, #8
 80100e0:	4610      	mov	r0, r2
 80100e2:	4798      	blx	r3
 80100e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100e6:	e029      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fa63 	bl	80105b6 <USBD_CtlError>
            err++;
 80100f0:	7afb      	ldrb	r3, [r7, #11]
 80100f2:	3301      	adds	r3, #1
 80100f4:	72fb      	strb	r3, [r7, #11]
          break;
 80100f6:	e021      	b.n	801013c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80100fe:	699b      	ldr	r3, [r3, #24]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00b      	beq.n	801011c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801010a:	699b      	ldr	r3, [r3, #24]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	7c12      	ldrb	r2, [r2, #16]
 8010110:	f107 0108 	add.w	r1, r7, #8
 8010114:	4610      	mov	r0, r2
 8010116:	4798      	blx	r3
 8010118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801011a:	e00f      	b.n	801013c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801011c:	6839      	ldr	r1, [r7, #0]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 fa49 	bl	80105b6 <USBD_CtlError>
            err++;
 8010124:	7afb      	ldrb	r3, [r7, #11]
 8010126:	3301      	adds	r3, #1
 8010128:	72fb      	strb	r3, [r7, #11]
          break;
 801012a:	e007      	b.n	801013c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801012c:	6839      	ldr	r1, [r7, #0]
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 fa41 	bl	80105b6 <USBD_CtlError>
          err++;
 8010134:	7afb      	ldrb	r3, [r7, #11]
 8010136:	3301      	adds	r3, #1
 8010138:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801013a:	bf00      	nop
      }
      break;
 801013c:	e037      	b.n	80101ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7c1b      	ldrb	r3, [r3, #16]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d109      	bne.n	801015a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801014c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801014e:	f107 0208 	add.w	r2, r7, #8
 8010152:	4610      	mov	r0, r2
 8010154:	4798      	blx	r3
 8010156:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010158:	e029      	b.n	80101ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fa2a 	bl	80105b6 <USBD_CtlError>
        err++;
 8010162:	7afb      	ldrb	r3, [r7, #11]
 8010164:	3301      	adds	r3, #1
 8010166:	72fb      	strb	r3, [r7, #11]
      break;
 8010168:	e021      	b.n	80101ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	7c1b      	ldrb	r3, [r3, #16]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d10d      	bne.n	801018e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801017a:	f107 0208 	add.w	r2, r7, #8
 801017e:	4610      	mov	r0, r2
 8010180:	4798      	blx	r3
 8010182:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3301      	adds	r3, #1
 8010188:	2207      	movs	r2, #7
 801018a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801018c:	e00f      	b.n	80101ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801018e:	6839      	ldr	r1, [r7, #0]
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 fa10 	bl	80105b6 <USBD_CtlError>
        err++;
 8010196:	7afb      	ldrb	r3, [r7, #11]
 8010198:	3301      	adds	r3, #1
 801019a:	72fb      	strb	r3, [r7, #11]
      break;
 801019c:	e007      	b.n	80101ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fa08 	bl	80105b6 <USBD_CtlError>
      err++;
 80101a6:	7afb      	ldrb	r3, [r7, #11]
 80101a8:	3301      	adds	r3, #1
 80101aa:	72fb      	strb	r3, [r7, #11]
      break;
 80101ac:	bf00      	nop
  }

  if (err != 0U)
 80101ae:	7afb      	ldrb	r3, [r7, #11]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d11e      	bne.n	80101f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	88db      	ldrh	r3, [r3, #6]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d016      	beq.n	80101ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80101bc:	893b      	ldrh	r3, [r7, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00e      	beq.n	80101e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	88da      	ldrh	r2, [r3, #6]
 80101c6:	893b      	ldrh	r3, [r7, #8]
 80101c8:	4293      	cmp	r3, r2
 80101ca:	bf28      	it	cs
 80101cc:	4613      	movcs	r3, r2
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80101d2:	893b      	ldrh	r3, [r7, #8]
 80101d4:	461a      	mov	r2, r3
 80101d6:	68f9      	ldr	r1, [r7, #12]
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fa69 	bl	80106b0 <USBD_CtlSendData>
 80101de:	e009      	b.n	80101f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80101e0:	6839      	ldr	r1, [r7, #0]
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f9e7 	bl	80105b6 <USBD_CtlError>
 80101e8:	e004      	b.n	80101f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 faba 	bl	8010764 <USBD_CtlSendStatus>
 80101f0:	e000      	b.n	80101f4 <USBD_GetDescriptor+0x320>
    return;
 80101f2:	bf00      	nop
  }
}
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop

080101fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	889b      	ldrh	r3, [r3, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d131      	bne.n	8010272 <USBD_SetAddress+0x76>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	88db      	ldrh	r3, [r3, #6]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d12d      	bne.n	8010272 <USBD_SetAddress+0x76>
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	885b      	ldrh	r3, [r3, #2]
 801021a:	2b7f      	cmp	r3, #127	@ 0x7f
 801021c:	d829      	bhi.n	8010272 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b03      	cmp	r3, #3
 8010234:	d104      	bne.n	8010240 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010236:	6839      	ldr	r1, [r7, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 f9bc 	bl	80105b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801023e:	e01d      	b.n	801027c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7bfa      	ldrb	r2, [r7, #15]
 8010244:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	4619      	mov	r1, r3
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 ffb5 	bl	80111bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fa86 	bl	8010764 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010258:	7bfb      	ldrb	r3, [r7, #15]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d004      	beq.n	8010268 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2202      	movs	r2, #2
 8010262:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010266:	e009      	b.n	801027c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2201      	movs	r2, #1
 801026c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010270:	e004      	b.n	801027c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010272:	6839      	ldr	r1, [r7, #0]
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f99e 	bl	80105b6 <USBD_CtlError>
  }
}
 801027a:	bf00      	nop
 801027c:	bf00      	nop
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	885b      	ldrh	r3, [r3, #2]
 8010296:	b2da      	uxtb	r2, r3
 8010298:	4b4e      	ldr	r3, [pc, #312]	@ (80103d4 <USBD_SetConfig+0x150>)
 801029a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801029c:	4b4d      	ldr	r3, [pc, #308]	@ (80103d4 <USBD_SetConfig+0x150>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d905      	bls.n	80102b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80102a4:	6839      	ldr	r1, [r7, #0]
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f985 	bl	80105b6 <USBD_CtlError>
    return USBD_FAIL;
 80102ac:	2303      	movs	r3, #3
 80102ae:	e08c      	b.n	80103ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d002      	beq.n	80102c2 <USBD_SetConfig+0x3e>
 80102bc:	2b03      	cmp	r3, #3
 80102be:	d029      	beq.n	8010314 <USBD_SetConfig+0x90>
 80102c0:	e075      	b.n	80103ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80102c2:	4b44      	ldr	r3, [pc, #272]	@ (80103d4 <USBD_SetConfig+0x150>)
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d020      	beq.n	801030c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80102ca:	4b42      	ldr	r3, [pc, #264]	@ (80103d4 <USBD_SetConfig+0x150>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	461a      	mov	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102d4:	4b3f      	ldr	r3, [pc, #252]	@ (80103d4 <USBD_SetConfig+0x150>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	4619      	mov	r1, r3
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7fe ffb9 	bl	800f252 <USBD_SetClassConfig>
 80102e0:	4603      	mov	r3, r0
 80102e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d008      	beq.n	80102fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 f962 	bl	80105b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2202      	movs	r2, #2
 80102f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80102fa:	e065      	b.n	80103c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 fa31 	bl	8010764 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2203      	movs	r2, #3
 8010306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801030a:	e05d      	b.n	80103c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fa29 	bl	8010764 <USBD_CtlSendStatus>
      break;
 8010312:	e059      	b.n	80103c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010314:	4b2f      	ldr	r3, [pc, #188]	@ (80103d4 <USBD_SetConfig+0x150>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d112      	bne.n	8010342 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2202      	movs	r2, #2
 8010320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010324:	4b2b      	ldr	r3, [pc, #172]	@ (80103d4 <USBD_SetConfig+0x150>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	461a      	mov	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801032e:	4b29      	ldr	r3, [pc, #164]	@ (80103d4 <USBD_SetConfig+0x150>)
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7fe ffa8 	bl	800f28a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 fa12 	bl	8010764 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010340:	e042      	b.n	80103c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010342:	4b24      	ldr	r3, [pc, #144]	@ (80103d4 <USBD_SetConfig+0x150>)
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	429a      	cmp	r2, r3
 801034e:	d02a      	beq.n	80103a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f7fe ff96 	bl	800f28a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801035e:	4b1d      	ldr	r3, [pc, #116]	@ (80103d4 <USBD_SetConfig+0x150>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010368:	4b1a      	ldr	r3, [pc, #104]	@ (80103d4 <USBD_SetConfig+0x150>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	4619      	mov	r1, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7fe ff6f 	bl	800f252 <USBD_SetClassConfig>
 8010374:	4603      	mov	r3, r0
 8010376:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010378:	7bfb      	ldrb	r3, [r7, #15]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00f      	beq.n	801039e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f918 	bl	80105b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	b2db      	uxtb	r3, r3
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7fe ff7b 	bl	800f28a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2202      	movs	r2, #2
 8010398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801039c:	e014      	b.n	80103c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f9e0 	bl	8010764 <USBD_CtlSendStatus>
      break;
 80103a4:	e010      	b.n	80103c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f9dc 	bl	8010764 <USBD_CtlSendStatus>
      break;
 80103ac:	e00c      	b.n	80103c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f900 	bl	80105b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103b6:	4b07      	ldr	r3, [pc, #28]	@ (80103d4 <USBD_SetConfig+0x150>)
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7fe ff64 	bl	800f28a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80103c2:	2303      	movs	r3, #3
 80103c4:	73fb      	strb	r3, [r7, #15]
      break;
 80103c6:	bf00      	nop
  }

  return ret;
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	240003e4 	.word	0x240003e4

080103d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	88db      	ldrh	r3, [r3, #6]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d004      	beq.n	80103f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f000 f8e2 	bl	80105b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80103f2:	e023      	b.n	801043c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	dc02      	bgt.n	8010406 <USBD_GetConfig+0x2e>
 8010400:	2b00      	cmp	r3, #0
 8010402:	dc03      	bgt.n	801040c <USBD_GetConfig+0x34>
 8010404:	e015      	b.n	8010432 <USBD_GetConfig+0x5a>
 8010406:	2b03      	cmp	r3, #3
 8010408:	d00b      	beq.n	8010422 <USBD_GetConfig+0x4a>
 801040a:	e012      	b.n	8010432 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	3308      	adds	r3, #8
 8010416:	2201      	movs	r2, #1
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f948 	bl	80106b0 <USBD_CtlSendData>
        break;
 8010420:	e00c      	b.n	801043c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3304      	adds	r3, #4
 8010426:	2201      	movs	r2, #1
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f940 	bl	80106b0 <USBD_CtlSendData>
        break;
 8010430:	e004      	b.n	801043c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f8be 	bl	80105b6 <USBD_CtlError>
        break;
 801043a:	bf00      	nop
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010454:	b2db      	uxtb	r3, r3
 8010456:	3b01      	subs	r3, #1
 8010458:	2b02      	cmp	r3, #2
 801045a:	d81e      	bhi.n	801049a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	88db      	ldrh	r3, [r3, #6]
 8010460:	2b02      	cmp	r3, #2
 8010462:	d004      	beq.n	801046e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f8a5 	bl	80105b6 <USBD_CtlError>
        break;
 801046c:	e01a      	b.n	80104a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2201      	movs	r2, #1
 8010472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801047a:	2b00      	cmp	r3, #0
 801047c:	d005      	beq.n	801048a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	f043 0202 	orr.w	r2, r3, #2
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	330c      	adds	r3, #12
 801048e:	2202      	movs	r2, #2
 8010490:	4619      	mov	r1, r3
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f90c 	bl	80106b0 <USBD_CtlSendData>
      break;
 8010498:	e004      	b.n	80104a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801049a:	6839      	ldr	r1, [r7, #0]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f88a 	bl	80105b6 <USBD_CtlError>
      break;
 80104a2:	bf00      	nop
  }
}
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	885b      	ldrh	r3, [r3, #2]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d107      	bne.n	80104ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2201      	movs	r2, #1
 80104c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f94c 	bl	8010764 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80104cc:	e013      	b.n	80104f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	885b      	ldrh	r3, [r3, #2]
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d10b      	bne.n	80104ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	889b      	ldrh	r3, [r3, #4]
 80104da:	0a1b      	lsrs	r3, r3, #8
 80104dc:	b29b      	uxth	r3, r3
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f93c 	bl	8010764 <USBD_CtlSendStatus>
}
 80104ec:	e003      	b.n	80104f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f860 	bl	80105b6 <USBD_CtlError>
}
 80104f6:	bf00      	nop
 80104f8:	3708      	adds	r7, #8
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801050e:	b2db      	uxtb	r3, r3
 8010510:	3b01      	subs	r3, #1
 8010512:	2b02      	cmp	r3, #2
 8010514:	d80b      	bhi.n	801052e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	885b      	ldrh	r3, [r3, #2]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d10c      	bne.n	8010538 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f91c 	bl	8010764 <USBD_CtlSendStatus>
      }
      break;
 801052c:	e004      	b.n	8010538 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801052e:	6839      	ldr	r1, [r7, #0]
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f840 	bl	80105b6 <USBD_CtlError>
      break;
 8010536:	e000      	b.n	801053a <USBD_ClrFeature+0x3c>
      break;
 8010538:	bf00      	nop
  }
}
 801053a:	bf00      	nop
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	781a      	ldrb	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	3301      	adds	r3, #1
 801055c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	781a      	ldrb	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3301      	adds	r3, #1
 801056a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f7ff fa16 	bl	800f99e <SWAPBYTE>
 8010572:	4603      	mov	r3, r0
 8010574:	461a      	mov	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	3301      	adds	r3, #1
 801057e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	3301      	adds	r3, #1
 8010584:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f7ff fa09 	bl	800f99e <SWAPBYTE>
 801058c:	4603      	mov	r3, r0
 801058e:	461a      	mov	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	3301      	adds	r3, #1
 8010598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	3301      	adds	r3, #1
 801059e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f7ff f9fc 	bl	800f99e <SWAPBYTE>
 80105a6:	4603      	mov	r3, r0
 80105a8:	461a      	mov	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	80da      	strh	r2, [r3, #6]
}
 80105ae:	bf00      	nop
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80105c0:	2180      	movs	r1, #128	@ 0x80
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fd90 	bl	80110e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80105c8:	2100      	movs	r1, #0
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fd8c 	bl	80110e8 <USBD_LL_StallEP>
}
 80105d0:	bf00      	nop
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80105e4:	2300      	movs	r3, #0
 80105e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d042      	beq.n	8010674 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80105f2:	6938      	ldr	r0, [r7, #16]
 80105f4:	f000 f842 	bl	801067c <USBD_GetLen>
 80105f8:	4603      	mov	r3, r0
 80105fa:	3301      	adds	r3, #1
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010602:	d808      	bhi.n	8010616 <USBD_GetString+0x3e>
 8010604:	6938      	ldr	r0, [r7, #16]
 8010606:	f000 f839 	bl	801067c <USBD_GetLen>
 801060a:	4603      	mov	r3, r0
 801060c:	3301      	adds	r3, #1
 801060e:	b29b      	uxth	r3, r3
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	b29a      	uxth	r2, r3
 8010614:	e001      	b.n	801061a <USBD_GetString+0x42>
 8010616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	4413      	add	r3, r2
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	7812      	ldrb	r2, [r2, #0]
 8010628:	701a      	strb	r2, [r3, #0]
  idx++;
 801062a:	7dfb      	ldrb	r3, [r7, #23]
 801062c:	3301      	adds	r3, #1
 801062e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010630:	7dfb      	ldrb	r3, [r7, #23]
 8010632:	68ba      	ldr	r2, [r7, #8]
 8010634:	4413      	add	r3, r2
 8010636:	2203      	movs	r2, #3
 8010638:	701a      	strb	r2, [r3, #0]
  idx++;
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	3301      	adds	r3, #1
 801063e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010640:	e013      	b.n	801066a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010642:	7dfb      	ldrb	r3, [r7, #23]
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	4413      	add	r3, r2
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	7812      	ldrb	r2, [r2, #0]
 801064c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	3301      	adds	r3, #1
 8010652:	613b      	str	r3, [r7, #16]
    idx++;
 8010654:	7dfb      	ldrb	r3, [r7, #23]
 8010656:	3301      	adds	r3, #1
 8010658:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801065a:	7dfb      	ldrb	r3, [r7, #23]
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	4413      	add	r3, r2
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
    idx++;
 8010664:	7dfb      	ldrb	r3, [r7, #23]
 8010666:	3301      	adds	r3, #1
 8010668:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1e7      	bne.n	8010642 <USBD_GetString+0x6a>
 8010672:	e000      	b.n	8010676 <USBD_GetString+0x9e>
    return;
 8010674:	bf00      	nop
  }
}
 8010676:	3718      	adds	r7, #24
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010684:	2300      	movs	r3, #0
 8010686:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801068c:	e005      	b.n	801069a <USBD_GetLen+0x1e>
  {
    len++;
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	3301      	adds	r3, #1
 8010692:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	3301      	adds	r3, #1
 8010698:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1f5      	bne.n	801068e <USBD_GetLen+0x12>
  }

  return len;
 80106a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2202      	movs	r2, #2
 80106c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68ba      	ldr	r2, [r7, #8]
 80106d4:	2100      	movs	r1, #0
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f000 fd8f 	bl	80111fa <USBD_LL_Transmit>

  return USBD_OK;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b084      	sub	sp, #16
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	60f8      	str	r0, [r7, #12]
 80106ee:	60b9      	str	r1, [r7, #8]
 80106f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	2100      	movs	r1, #0
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 fd7e 	bl	80111fa <USBD_LL_Transmit>

  return USBD_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2203      	movs	r2, #3
 8010718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	2100      	movs	r1, #0
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 fd82 	bl	801123c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	60f8      	str	r0, [r7, #12]
 801074a:	60b9      	str	r1, [r7, #8]
 801074c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	2100      	movs	r1, #0
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f000 fd71 	bl	801123c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801075a:	2300      	movs	r3, #0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3710      	adds	r7, #16
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2204      	movs	r2, #4
 8010770:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010774:	2300      	movs	r3, #0
 8010776:	2200      	movs	r2, #0
 8010778:	2100      	movs	r1, #0
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f000 fd3d 	bl	80111fa <USBD_LL_Transmit>

  return USBD_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b082      	sub	sp, #8
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2205      	movs	r2, #5
 8010796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801079a:	2300      	movs	r3, #0
 801079c:	2200      	movs	r2, #0
 801079e:	2100      	movs	r1, #0
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fd4b 	bl	801123c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80107a6:	2300      	movs	r3, #0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80107b4:	2200      	movs	r2, #0
 80107b6:	4913      	ldr	r1, [pc, #76]	@ (8010804 <MX_USB_DEVICE_Init+0x54>)
 80107b8:	4813      	ldr	r0, [pc, #76]	@ (8010808 <MX_USB_DEVICE_Init+0x58>)
 80107ba:	f7fe fccd 	bl	800f158 <USBD_Init>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80107c4:	f7f0 fc66 	bl	8001094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80107c8:	4910      	ldr	r1, [pc, #64]	@ (801080c <MX_USB_DEVICE_Init+0x5c>)
 80107ca:	480f      	ldr	r0, [pc, #60]	@ (8010808 <MX_USB_DEVICE_Init+0x58>)
 80107cc:	f7fe fcf4 	bl	800f1b8 <USBD_RegisterClass>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d001      	beq.n	80107da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80107d6:	f7f0 fc5d 	bl	8001094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80107da:	490d      	ldr	r1, [pc, #52]	@ (8010810 <MX_USB_DEVICE_Init+0x60>)
 80107dc:	480a      	ldr	r0, [pc, #40]	@ (8010808 <MX_USB_DEVICE_Init+0x58>)
 80107de:	f7fe fbeb 	bl	800efb8 <USBD_CDC_RegisterInterface>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d001      	beq.n	80107ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80107e8:	f7f0 fc54 	bl	8001094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80107ec:	4806      	ldr	r0, [pc, #24]	@ (8010808 <MX_USB_DEVICE_Init+0x58>)
 80107ee:	f7fe fd19 	bl	800f224 <USBD_Start>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80107f8:	f7f0 fc4c 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80107fc:	f7f7 fa62 	bl	8007cc4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010800:	bf00      	nop
 8010802:	bd80      	pop	{r7, pc}
 8010804:	240000b8 	.word	0x240000b8
 8010808:	240003e8 	.word	0x240003e8
 801080c:	2400001c 	.word	0x2400001c
 8010810:	240000a4 	.word	0x240000a4

08010814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010818:	2200      	movs	r2, #0
 801081a:	4905      	ldr	r1, [pc, #20]	@ (8010830 <CDC_Init_FS+0x1c>)
 801081c:	4805      	ldr	r0, [pc, #20]	@ (8010834 <CDC_Init_FS+0x20>)
 801081e:	f7fe fbe5 	bl	800efec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010822:	4905      	ldr	r1, [pc, #20]	@ (8010838 <CDC_Init_FS+0x24>)
 8010824:	4803      	ldr	r0, [pc, #12]	@ (8010834 <CDC_Init_FS+0x20>)
 8010826:	f7fe fc03 	bl	800f030 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801082a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801082c:	4618      	mov	r0, r3
 801082e:	bd80      	pop	{r7, pc}
 8010830:	24000ec4 	.word	0x24000ec4
 8010834:	240003e8 	.word	0x240003e8
 8010838:	240006c4 	.word	0x240006c4

0801083c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801083c:	b480      	push	{r7}
 801083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010842:	4618      	mov	r0, r3
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	4603      	mov	r3, r0
 8010854:	6039      	str	r1, [r7, #0]
 8010856:	71fb      	strb	r3, [r7, #7]
 8010858:	4613      	mov	r3, r2
 801085a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801085c:	79fb      	ldrb	r3, [r7, #7]
 801085e:	2b23      	cmp	r3, #35	@ 0x23
 8010860:	f200 8098 	bhi.w	8010994 <CDC_Control_FS+0x148>
 8010864:	a201      	add	r2, pc, #4	@ (adr r2, 801086c <CDC_Control_FS+0x20>)
 8010866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086a:	bf00      	nop
 801086c:	08010995 	.word	0x08010995
 8010870:	08010995 	.word	0x08010995
 8010874:	08010995 	.word	0x08010995
 8010878:	08010995 	.word	0x08010995
 801087c:	08010995 	.word	0x08010995
 8010880:	08010995 	.word	0x08010995
 8010884:	08010995 	.word	0x08010995
 8010888:	08010995 	.word	0x08010995
 801088c:	08010995 	.word	0x08010995
 8010890:	08010995 	.word	0x08010995
 8010894:	08010995 	.word	0x08010995
 8010898:	08010995 	.word	0x08010995
 801089c:	08010995 	.word	0x08010995
 80108a0:	08010995 	.word	0x08010995
 80108a4:	08010995 	.word	0x08010995
 80108a8:	08010995 	.word	0x08010995
 80108ac:	08010995 	.word	0x08010995
 80108b0:	08010995 	.word	0x08010995
 80108b4:	08010995 	.word	0x08010995
 80108b8:	08010995 	.word	0x08010995
 80108bc:	08010995 	.word	0x08010995
 80108c0:	08010995 	.word	0x08010995
 80108c4:	08010995 	.word	0x08010995
 80108c8:	08010995 	.word	0x08010995
 80108cc:	08010995 	.word	0x08010995
 80108d0:	08010995 	.word	0x08010995
 80108d4:	08010995 	.word	0x08010995
 80108d8:	08010995 	.word	0x08010995
 80108dc:	08010995 	.word	0x08010995
 80108e0:	08010995 	.word	0x08010995
 80108e4:	08010995 	.word	0x08010995
 80108e8:	08010995 	.word	0x08010995
 80108ec:	080108fd 	.word	0x080108fd
 80108f0:	08010941 	.word	0x08010941
 80108f4:	08010995 	.word	0x08010995
 80108f8:	08010995 	.word	0x08010995
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	461a      	mov	r2, r3
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	3301      	adds	r3, #1
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	021b      	lsls	r3, r3, #8
 801090a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	3302      	adds	r3, #2
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010914:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	3303      	adds	r3, #3
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	061b      	lsls	r3, r3, #24
 801091e:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010920:	461a      	mov	r2, r3
 8010922:	4b20      	ldr	r3, [pc, #128]	@ (80109a4 <CDC_Control_FS+0x158>)
 8010924:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	791a      	ldrb	r2, [r3, #4]
 801092a:	4b1e      	ldr	r3, [pc, #120]	@ (80109a4 <CDC_Control_FS+0x158>)
 801092c:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	795a      	ldrb	r2, [r3, #5]
 8010932:	4b1c      	ldr	r3, [pc, #112]	@ (80109a4 <CDC_Control_FS+0x158>)
 8010934:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	799a      	ldrb	r2, [r3, #6]
 801093a:	4b1a      	ldr	r3, [pc, #104]	@ (80109a4 <CDC_Control_FS+0x158>)
 801093c:	719a      	strb	r2, [r3, #6]

    break;
 801093e:	e02a      	b.n	8010996 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8010940:	4b18      	ldr	r3, [pc, #96]	@ (80109a4 <CDC_Control_FS+0x158>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	b2da      	uxtb	r2, r3
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 801094a:	4b16      	ldr	r3, [pc, #88]	@ (80109a4 <CDC_Control_FS+0x158>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	0a1a      	lsrs	r2, r3, #8
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	3301      	adds	r3, #1
 8010954:	b2d2      	uxtb	r2, r2
 8010956:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8010958:	4b12      	ldr	r3, [pc, #72]	@ (80109a4 <CDC_Control_FS+0x158>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	0c1a      	lsrs	r2, r3, #16
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	3302      	adds	r3, #2
 8010962:	b2d2      	uxtb	r2, r2
 8010964:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8010966:	4b0f      	ldr	r3, [pc, #60]	@ (80109a4 <CDC_Control_FS+0x158>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	0e1a      	lsrs	r2, r3, #24
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	3303      	adds	r3, #3
 8010970:	b2d2      	uxtb	r2, r2
 8010972:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	3304      	adds	r3, #4
 8010978:	4a0a      	ldr	r2, [pc, #40]	@ (80109a4 <CDC_Control_FS+0x158>)
 801097a:	7912      	ldrb	r2, [r2, #4]
 801097c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	3305      	adds	r3, #5
 8010982:	4a08      	ldr	r2, [pc, #32]	@ (80109a4 <CDC_Control_FS+0x158>)
 8010984:	7952      	ldrb	r2, [r2, #5]
 8010986:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	3306      	adds	r3, #6
 801098c:	4a05      	ldr	r2, [pc, #20]	@ (80109a4 <CDC_Control_FS+0x158>)
 801098e:	7992      	ldrb	r2, [r2, #6]
 8010990:	701a      	strb	r2, [r3, #0]

    break;
 8010992:	e000      	b.n	8010996 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010994:	bf00      	nop
  }

  return (USBD_OK);
 8010996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010998:	4618      	mov	r0, r3
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	2400009c 	.word	0x2400009c

080109a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80109b2:	6879      	ldr	r1, [r7, #4]
 80109b4:	480d      	ldr	r0, [pc, #52]	@ (80109ec <CDC_Receive_FS+0x44>)
 80109b6:	f7fe fb3b 	bl	800f030 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80109ba:	480c      	ldr	r0, [pc, #48]	@ (80109ec <CDC_Receive_FS+0x44>)
 80109bc:	f7fe fb96 	bl	800f0ec <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00d      	beq.n	80109e2 <CDC_Receive_FS+0x3a>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00a      	beq.n	80109e2 <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 80109d2:	89fb      	ldrh	r3, [r7, #14]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d004      	beq.n	80109e2 <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 80109d8:	89fb      	ldrh	r3, [r7, #14]
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f001 f9bf 	bl	8011d60 <USB_Receive>
	  }
  }
  return (USBD_OK);
 80109e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	240003e8 	.word	0x240003e8

080109f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	460b      	mov	r3, r1
 80109fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010a00:	4b0d      	ldr	r3, [pc, #52]	@ (8010a38 <CDC_Transmit_FS+0x48>)
 8010a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010a06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d001      	beq.n	8010a16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010a12:	2301      	movs	r3, #1
 8010a14:	e00b      	b.n	8010a2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010a16:	887b      	ldrh	r3, [r7, #2]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	4806      	ldr	r0, [pc, #24]	@ (8010a38 <CDC_Transmit_FS+0x48>)
 8010a1e:	f7fe fae5 	bl	800efec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010a22:	4805      	ldr	r0, [pc, #20]	@ (8010a38 <CDC_Transmit_FS+0x48>)
 8010a24:	f7fe fb22 	bl	800f06c <USBD_CDC_TransmitPacket>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	240003e8 	.word	0x240003e8

08010a3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b087      	sub	sp, #28
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	4613      	mov	r3, r2
 8010a48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	371c      	adds	r7, #28
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b082      	sub	sp, #8
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	460b      	mov	r3, r1
 8010a68:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 8010a6a:	887b      	ldrh	r3, [r7, #2]
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff ffbe 	bl	80109f0 <CDC_Transmit_FS>
 8010a74:	4603      	mov	r3, r0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
	...

08010a80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	4603      	mov	r3, r0
 8010a88:	6039      	str	r1, [r7, #0]
 8010a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	2212      	movs	r2, #18
 8010a90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a92:	4b03      	ldr	r3, [pc, #12]	@ (8010aa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr
 8010aa0:	240000d8 	.word	0x240000d8

08010aa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	4603      	mov	r3, r0
 8010aac:	6039      	str	r1, [r7, #0]
 8010aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2204      	movs	r2, #4
 8010ab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010ab6:	4b03      	ldr	r3, [pc, #12]	@ (8010ac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr
 8010ac4:	240000ec 	.word	0x240000ec

08010ac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	4603      	mov	r3, r0
 8010ad0:	6039      	str	r1, [r7, #0]
 8010ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ad4:	79fb      	ldrb	r3, [r7, #7]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d105      	bne.n	8010ae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ada:	683a      	ldr	r2, [r7, #0]
 8010adc:	4907      	ldr	r1, [pc, #28]	@ (8010afc <USBD_FS_ProductStrDescriptor+0x34>)
 8010ade:	4808      	ldr	r0, [pc, #32]	@ (8010b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ae0:	f7ff fd7a 	bl	80105d8 <USBD_GetString>
 8010ae4:	e004      	b.n	8010af0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	4904      	ldr	r1, [pc, #16]	@ (8010afc <USBD_FS_ProductStrDescriptor+0x34>)
 8010aea:	4805      	ldr	r0, [pc, #20]	@ (8010b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8010aec:	f7ff fd74 	bl	80105d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010af0:	4b02      	ldr	r3, [pc, #8]	@ (8010afc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	240016c4 	.word	0x240016c4
 8010b00:	08013168 	.word	0x08013168

08010b04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	6039      	str	r1, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	4904      	ldr	r1, [pc, #16]	@ (8010b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010b14:	4804      	ldr	r0, [pc, #16]	@ (8010b28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010b16:	f7ff fd5f 	bl	80105d8 <USBD_GetString>
  return USBD_StrDesc;
 8010b1a:	4b02      	ldr	r3, [pc, #8]	@ (8010b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	240016c4 	.word	0x240016c4
 8010b28:	08013180 	.word	0x08013180

08010b2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	6039      	str	r1, [r7, #0]
 8010b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	221a      	movs	r2, #26
 8010b3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b3e:	f000 f843 	bl	8010bc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b42:	4b02      	ldr	r3, [pc, #8]	@ (8010b4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3708      	adds	r7, #8
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	240000f0 	.word	0x240000f0

08010b50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	6039      	str	r1, [r7, #0]
 8010b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b5c:	79fb      	ldrb	r3, [r7, #7]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d105      	bne.n	8010b6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b62:	683a      	ldr	r2, [r7, #0]
 8010b64:	4907      	ldr	r1, [pc, #28]	@ (8010b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b66:	4808      	ldr	r0, [pc, #32]	@ (8010b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b68:	f7ff fd36 	bl	80105d8 <USBD_GetString>
 8010b6c:	e004      	b.n	8010b78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	4904      	ldr	r1, [pc, #16]	@ (8010b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b72:	4805      	ldr	r0, [pc, #20]	@ (8010b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b74:	f7ff fd30 	bl	80105d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b78:	4b02      	ldr	r3, [pc, #8]	@ (8010b84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3708      	adds	r7, #8
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	240016c4 	.word	0x240016c4
 8010b88:	08013194 	.word	0x08013194

08010b8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	4603      	mov	r3, r0
 8010b94:	6039      	str	r1, [r7, #0]
 8010b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b98:	79fb      	ldrb	r3, [r7, #7]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d105      	bne.n	8010baa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	4907      	ldr	r1, [pc, #28]	@ (8010bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ba2:	4808      	ldr	r0, [pc, #32]	@ (8010bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ba4:	f7ff fd18 	bl	80105d8 <USBD_GetString>
 8010ba8:	e004      	b.n	8010bb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	4904      	ldr	r1, [pc, #16]	@ (8010bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bae:	4805      	ldr	r0, [pc, #20]	@ (8010bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bb0:	f7ff fd12 	bl	80105d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bb4:	4b02      	ldr	r3, [pc, #8]	@ (8010bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	240016c4 	.word	0x240016c4
 8010bc4:	080131a0 	.word	0x080131a0

08010bc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010bce:	4b0f      	ldr	r3, [pc, #60]	@ (8010c0c <Get_SerialNum+0x44>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8010c10 <Get_SerialNum+0x48>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010bda:	4b0e      	ldr	r3, [pc, #56]	@ (8010c14 <Get_SerialNum+0x4c>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4413      	add	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d009      	beq.n	8010c02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bee:	2208      	movs	r2, #8
 8010bf0:	4909      	ldr	r1, [pc, #36]	@ (8010c18 <Get_SerialNum+0x50>)
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f000 f814 	bl	8010c20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bf8:	2204      	movs	r2, #4
 8010bfa:	4908      	ldr	r1, [pc, #32]	@ (8010c1c <Get_SerialNum+0x54>)
 8010bfc:	68b8      	ldr	r0, [r7, #8]
 8010bfe:	f000 f80f 	bl	8010c20 <IntToUnicode>
  }
}
 8010c02:	bf00      	nop
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	1ff1e800 	.word	0x1ff1e800
 8010c10:	1ff1e804 	.word	0x1ff1e804
 8010c14:	1ff1e808 	.word	0x1ff1e808
 8010c18:	240000f2 	.word	0x240000f2
 8010c1c:	24000102 	.word	0x24000102

08010c20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b087      	sub	sp, #28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c32:	2300      	movs	r3, #0
 8010c34:	75fb      	strb	r3, [r7, #23]
 8010c36:	e027      	b.n	8010c88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	0f1b      	lsrs	r3, r3, #28
 8010c3c:	2b09      	cmp	r3, #9
 8010c3e:	d80b      	bhi.n	8010c58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	0f1b      	lsrs	r3, r3, #28
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	7dfb      	ldrb	r3, [r7, #23]
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	440b      	add	r3, r1
 8010c50:	3230      	adds	r2, #48	@ 0x30
 8010c52:	b2d2      	uxtb	r2, r2
 8010c54:	701a      	strb	r2, [r3, #0]
 8010c56:	e00a      	b.n	8010c6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	0f1b      	lsrs	r3, r3, #28
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	005b      	lsls	r3, r3, #1
 8010c62:	4619      	mov	r1, r3
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	440b      	add	r3, r1
 8010c68:	3237      	adds	r2, #55	@ 0x37
 8010c6a:	b2d2      	uxtb	r2, r2
 8010c6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	011b      	lsls	r3, r3, #4
 8010c72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c74:	7dfb      	ldrb	r3, [r7, #23]
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	3301      	adds	r3, #1
 8010c7a:	68ba      	ldr	r2, [r7, #8]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	2200      	movs	r2, #0
 8010c80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
 8010c84:	3301      	adds	r3, #1
 8010c86:	75fb      	strb	r3, [r7, #23]
 8010c88:	7dfa      	ldrb	r2, [r7, #23]
 8010c8a:	79fb      	ldrb	r3, [r7, #7]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d3d3      	bcc.n	8010c38 <IntToUnicode+0x18>
  }
}
 8010c90:	bf00      	nop
 8010c92:	bf00      	nop
 8010c94:	371c      	adds	r7, #28
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
	...

08010ca0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ca8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010cac:	2200      	movs	r2, #0
 8010cae:	601a      	str	r2, [r3, #0]
 8010cb0:	605a      	str	r2, [r3, #4]
 8010cb2:	609a      	str	r2, [r3, #8]
 8010cb4:	60da      	str	r2, [r3, #12]
 8010cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010cb8:	f107 0310 	add.w	r3, r7, #16
 8010cbc:	22c0      	movs	r2, #192	@ 0xc0
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f001 f985 	bl	8011fd0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a33      	ldr	r2, [pc, #204]	@ (8010d98 <HAL_PCD_MspInit+0xf8>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d15f      	bne.n	8010d90 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010cd0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010cd4:	f04f 0300 	mov.w	r3, #0
 8010cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8010cdc:	2319      	movs	r3, #25
 8010cde:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8010ce0:	23c0      	movs	r3, #192	@ 0xc0
 8010ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8010ce8:	2304      	movs	r3, #4
 8010cea:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010cec:	2302      	movs	r3, #2
 8010cee:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010cf8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010d00:	f107 0310 	add.w	r3, r7, #16
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7f8 f8cf 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 8010d10:	f7f0 f9c0 	bl	8001094 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010d14:	f7f6 ffd6 	bl	8007cc4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d18:	4b20      	ldr	r3, [pc, #128]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d20:	f043 0301 	orr.w	r3, r3, #1
 8010d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010d28:	4b1c      	ldr	r3, [pc, #112]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010d2e:	f003 0301 	and.w	r3, r3, #1
 8010d32:	60fb      	str	r3, [r7, #12]
 8010d34:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d36:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d3e:	2302      	movs	r3, #2
 8010d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d44:	2300      	movs	r3, #0
 8010d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010d50:	230a      	movs	r3, #10
 8010d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4810      	ldr	r0, [pc, #64]	@ (8010da0 <HAL_PCD_MspInit+0x100>)
 8010d5e:	f7f4 fea7 	bl	8005ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d62:	4b0e      	ldr	r3, [pc, #56]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010d68:	4a0c      	ldr	r2, [pc, #48]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010d72:	4b0a      	ldr	r3, [pc, #40]	@ (8010d9c <HAL_PCD_MspInit+0xfc>)
 8010d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d7c:	60bb      	str	r3, [r7, #8]
 8010d7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010d80:	2200      	movs	r2, #0
 8010d82:	2100      	movs	r1, #0
 8010d84:	2065      	movs	r0, #101	@ 0x65
 8010d86:	f7f2 f9fd 	bl	8003184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d8a:	2065      	movs	r0, #101	@ 0x65
 8010d8c:	f7f2 fa14 	bl	80031b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d90:	bf00      	nop
 8010d92:	37e8      	adds	r7, #232	@ 0xe8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	40080000 	.word	0x40080000
 8010d9c:	58024400 	.word	0x58024400
 8010da0:	58020000 	.word	0x58020000

08010da4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010db8:	4619      	mov	r1, r3
 8010dba:	4610      	mov	r0, r2
 8010dbc:	f7fe fa7f 	bl	800f2be <USBD_LL_SetupStage>
}
 8010dc0:	bf00      	nop
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010dda:	78fa      	ldrb	r2, [r7, #3]
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	4613      	mov	r3, r2
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	4413      	add	r3, r2
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	440b      	add	r3, r1
 8010de8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	78fb      	ldrb	r3, [r7, #3]
 8010df0:	4619      	mov	r1, r3
 8010df2:	f7fe fab9 	bl	800f368 <USBD_LL_DataOutStage>
}
 8010df6:	bf00      	nop
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b082      	sub	sp, #8
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	460b      	mov	r3, r1
 8010e08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010e10:	78fa      	ldrb	r2, [r7, #3]
 8010e12:	6879      	ldr	r1, [r7, #4]
 8010e14:	4613      	mov	r3, r2
 8010e16:	00db      	lsls	r3, r3, #3
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	440b      	add	r3, r1
 8010e1e:	3320      	adds	r3, #32
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	78fb      	ldrb	r3, [r7, #3]
 8010e24:	4619      	mov	r1, r3
 8010e26:	f7fe fb52 	bl	800f4ce <USBD_LL_DataInStage>
}
 8010e2a:	bf00      	nop
 8010e2c:	3708      	adds	r7, #8
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}

08010e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b082      	sub	sp, #8
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fe fc8c 	bl	800f75e <USBD_LL_SOF>
}
 8010e46:	bf00      	nop
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b084      	sub	sp, #16
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e56:	2301      	movs	r3, #1
 8010e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	79db      	ldrb	r3, [r3, #7]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d102      	bne.n	8010e68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010e62:	2300      	movs	r3, #0
 8010e64:	73fb      	strb	r3, [r7, #15]
 8010e66:	e008      	b.n	8010e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	79db      	ldrb	r3, [r3, #7]
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d102      	bne.n	8010e76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010e70:	2301      	movs	r3, #1
 8010e72:	73fb      	strb	r3, [r7, #15]
 8010e74:	e001      	b.n	8010e7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010e76:	f7f0 f90d 	bl	8001094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e80:	7bfa      	ldrb	r2, [r7, #15]
 8010e82:	4611      	mov	r1, r2
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fc26 	bl	800f6d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7fe fbce 	bl	800f632 <USBD_LL_Reset>
}
 8010e96:	bf00      	nop
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
	...

08010ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fe fc21 	bl	800f6f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	6812      	ldr	r2, [r2, #0]
 8010ec2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010ec6:	f043 0301 	orr.w	r3, r3, #1
 8010eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	7adb      	ldrb	r3, [r3, #11]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d005      	beq.n	8010ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ed4:	4b04      	ldr	r3, [pc, #16]	@ (8010ee8 <HAL_PCD_SuspendCallback+0x48>)
 8010ed6:	691b      	ldr	r3, [r3, #16]
 8010ed8:	4a03      	ldr	r2, [pc, #12]	@ (8010ee8 <HAL_PCD_SuspendCallback+0x48>)
 8010eda:	f043 0306 	orr.w	r3, r3, #6
 8010ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	e000ed00 	.word	0xe000ed00

08010eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe fc17 	bl	800f72e <USBD_LL_Resume>
}
 8010f00:	bf00      	nop
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f1a:	78fa      	ldrb	r2, [r7, #3]
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fe fc6f 	bl	800f802 <USBD_LL_IsoOUTIncomplete>
}
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	460b      	mov	r3, r1
 8010f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f3e:	78fa      	ldrb	r2, [r7, #3]
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fe fc2b 	bl	800f79e <USBD_LL_IsoINIncomplete>
}
 8010f48:	bf00      	nop
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe fc81 	bl	800f866 <USBD_LL_DevConnected>
}
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fc7e 	bl	800f87c <USBD_LL_DevDisconnected>
}
 8010f80:	bf00      	nop
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d13e      	bne.n	8011016 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f98:	4a21      	ldr	r2, [pc, #132]	@ (8011020 <USBD_LL_Init+0x98>)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fa4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8011020 <USBD_LL_Init+0x98>)
 8010faa:	4a1e      	ldr	r2, [pc, #120]	@ (8011024 <USBD_LL_Init+0x9c>)
 8010fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010fae:	4b1c      	ldr	r3, [pc, #112]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fb0:	2209      	movs	r2, #9
 8010fb2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fb6:	2202      	movs	r2, #2
 8010fb8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010fba:	4b19      	ldr	r3, [pc, #100]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010fc0:	4b17      	ldr	r3, [pc, #92]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fc2:	2202      	movs	r2, #2
 8010fc4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010fc6:	4b16      	ldr	r3, [pc, #88]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010fcc:	4b14      	ldr	r3, [pc, #80]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010fd2:	4b13      	ldr	r3, [pc, #76]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010fd8:	4b11      	ldr	r3, [pc, #68]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010fde:	4b10      	ldr	r3, [pc, #64]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fea:	480d      	ldr	r0, [pc, #52]	@ (8011020 <USBD_LL_Init+0x98>)
 8010fec:	f7f5 fb8f 	bl	800670e <HAL_PCD_Init>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010ff6:	f7f0 f84d 	bl	8001094 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010ffa:	2180      	movs	r1, #128	@ 0x80
 8010ffc:	4808      	ldr	r0, [pc, #32]	@ (8011020 <USBD_LL_Init+0x98>)
 8010ffe:	f7f6 fde6 	bl	8007bce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011002:	2240      	movs	r2, #64	@ 0x40
 8011004:	2100      	movs	r1, #0
 8011006:	4806      	ldr	r0, [pc, #24]	@ (8011020 <USBD_LL_Init+0x98>)
 8011008:	f7f6 fd9a 	bl	8007b40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801100c:	2280      	movs	r2, #128	@ 0x80
 801100e:	2101      	movs	r1, #1
 8011010:	4803      	ldr	r0, [pc, #12]	@ (8011020 <USBD_LL_Init+0x98>)
 8011012:	f7f6 fd95 	bl	8007b40 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011016:	2300      	movs	r3, #0
}
 8011018:	4618      	mov	r0, r3
 801101a:	3708      	adds	r7, #8
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	240018c4 	.word	0x240018c4
 8011024:	40080000 	.word	0x40080000

08011028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011030:	2300      	movs	r3, #0
 8011032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801103e:	4618      	mov	r0, r3
 8011040:	f7f5 fc71 	bl	8006926 <HAL_PCD_Start>
 8011044:	4603      	mov	r3, r0
 8011046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011048:	7bfb      	ldrb	r3, [r7, #15]
 801104a:	4618      	mov	r0, r3
 801104c:	f000 f942 	bl	80112d4 <USBD_Get_USB_Status>
 8011050:	4603      	mov	r3, r0
 8011052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011054:	7bbb      	ldrb	r3, [r7, #14]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b084      	sub	sp, #16
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	4608      	mov	r0, r1
 8011068:	4611      	mov	r1, r2
 801106a:	461a      	mov	r2, r3
 801106c:	4603      	mov	r3, r0
 801106e:	70fb      	strb	r3, [r7, #3]
 8011070:	460b      	mov	r3, r1
 8011072:	70bb      	strb	r3, [r7, #2]
 8011074:	4613      	mov	r3, r2
 8011076:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011078:	2300      	movs	r3, #0
 801107a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011086:	78bb      	ldrb	r3, [r7, #2]
 8011088:	883a      	ldrh	r2, [r7, #0]
 801108a:	78f9      	ldrb	r1, [r7, #3]
 801108c:	f7f6 f972 	bl	8007374 <HAL_PCD_EP_Open>
 8011090:	4603      	mov	r3, r0
 8011092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011094:	7bfb      	ldrb	r3, [r7, #15]
 8011096:	4618      	mov	r0, r3
 8011098:	f000 f91c 	bl	80112d4 <USBD_Get_USB_Status>
 801109c:	4603      	mov	r3, r0
 801109e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b084      	sub	sp, #16
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
 80110b2:	460b      	mov	r3, r1
 80110b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110b6:	2300      	movs	r3, #0
 80110b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110ba:	2300      	movs	r3, #0
 80110bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80110c4:	78fa      	ldrb	r2, [r7, #3]
 80110c6:	4611      	mov	r1, r2
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7f6 f9bd 	bl	8007448 <HAL_PCD_EP_Close>
 80110ce:	4603      	mov	r3, r0
 80110d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f000 f8fd 	bl	80112d4 <USBD_Get_USB_Status>
 80110da:	4603      	mov	r3, r0
 80110dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110de:	7bbb      	ldrb	r3, [r7, #14]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3710      	adds	r7, #16
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	460b      	mov	r3, r1
 80110f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110f8:	2300      	movs	r3, #0
 80110fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011102:	78fa      	ldrb	r2, [r7, #3]
 8011104:	4611      	mov	r1, r2
 8011106:	4618      	mov	r0, r3
 8011108:	f7f6 fa75 	bl	80075f6 <HAL_PCD_EP_SetStall>
 801110c:	4603      	mov	r3, r0
 801110e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011110:	7bfb      	ldrb	r3, [r7, #15]
 8011112:	4618      	mov	r0, r3
 8011114:	f000 f8de 	bl	80112d4 <USBD_Get_USB_Status>
 8011118:	4603      	mov	r3, r0
 801111a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801111c:	7bbb      	ldrb	r3, [r7, #14]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011126:	b580      	push	{r7, lr}
 8011128:	b084      	sub	sp, #16
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
 801112e:	460b      	mov	r3, r1
 8011130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011140:	78fa      	ldrb	r2, [r7, #3]
 8011142:	4611      	mov	r1, r2
 8011144:	4618      	mov	r0, r3
 8011146:	f7f6 fab9 	bl	80076bc <HAL_PCD_EP_ClrStall>
 801114a:	4603      	mov	r3, r0
 801114c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801114e:	7bfb      	ldrb	r3, [r7, #15]
 8011150:	4618      	mov	r0, r3
 8011152:	f000 f8bf 	bl	80112d4 <USBD_Get_USB_Status>
 8011156:	4603      	mov	r3, r0
 8011158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801115a:	7bbb      	ldrb	r3, [r7, #14]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	460b      	mov	r3, r1
 801116e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011176:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801117c:	2b00      	cmp	r3, #0
 801117e:	da0b      	bge.n	8011198 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	4613      	mov	r3, r2
 801118a:	00db      	lsls	r3, r3, #3
 801118c:	4413      	add	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	440b      	add	r3, r1
 8011192:	3316      	adds	r3, #22
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	e00b      	b.n	80111b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	4613      	mov	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	440b      	add	r3, r1
 80111aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80111ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3714      	adds	r7, #20
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	460b      	mov	r3, r1
 80111c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c8:	2300      	movs	r3, #0
 80111ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111d6:	78fa      	ldrb	r2, [r7, #3]
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f6 f8a6 	bl	800732c <HAL_PCD_SetAddress>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111e4:	7bfb      	ldrb	r3, [r7, #15]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 f874 	bl	80112d4 <USBD_Get_USB_Status>
 80111ec:	4603      	mov	r3, r0
 80111ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3710      	adds	r7, #16
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b086      	sub	sp, #24
 80111fe:	af00      	add	r7, sp, #0
 8011200:	60f8      	str	r0, [r7, #12]
 8011202:	607a      	str	r2, [r7, #4]
 8011204:	603b      	str	r3, [r7, #0]
 8011206:	460b      	mov	r3, r1
 8011208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011218:	7af9      	ldrb	r1, [r7, #11]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	f7f6 f9b0 	bl	8007582 <HAL_PCD_EP_Transmit>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	4618      	mov	r0, r3
 801122a:	f000 f853 	bl	80112d4 <USBD_Get_USB_Status>
 801122e:	4603      	mov	r3, r0
 8011230:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011232:	7dbb      	ldrb	r3, [r7, #22]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b086      	sub	sp, #24
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	607a      	str	r2, [r7, #4]
 8011246:	603b      	str	r3, [r7, #0]
 8011248:	460b      	mov	r3, r1
 801124a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801125a:	7af9      	ldrb	r1, [r7, #11]
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	f7f6 f93c 	bl	80074dc <HAL_PCD_EP_Receive>
 8011264:	4603      	mov	r3, r0
 8011266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011268:	7dfb      	ldrb	r3, [r7, #23]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 f832 	bl	80112d4 <USBD_Get_USB_Status>
 8011270:	4603      	mov	r3, r0
 8011272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011274:	7dbb      	ldrb	r3, [r7, #22]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	460b      	mov	r3, r1
 8011288:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011290:	78fa      	ldrb	r2, [r7, #3]
 8011292:	4611      	mov	r1, r2
 8011294:	4618      	mov	r0, r3
 8011296:	f7f6 f95c 	bl	8007552 <HAL_PCD_EP_GetRxCount>
 801129a:	4603      	mov	r3, r0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80112ac:	4b03      	ldr	r3, [pc, #12]	@ (80112bc <USBD_static_malloc+0x18>)
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	24001da8 	.word	0x24001da8

080112c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80112c8:	bf00      	nop
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b085      	sub	sp, #20
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112de:	2300      	movs	r3, #0
 80112e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112e2:	79fb      	ldrb	r3, [r7, #7]
 80112e4:	2b03      	cmp	r3, #3
 80112e6:	d817      	bhi.n	8011318 <USBD_Get_USB_Status+0x44>
 80112e8:	a201      	add	r2, pc, #4	@ (adr r2, 80112f0 <USBD_Get_USB_Status+0x1c>)
 80112ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ee:	bf00      	nop
 80112f0:	08011301 	.word	0x08011301
 80112f4:	08011307 	.word	0x08011307
 80112f8:	0801130d 	.word	0x0801130d
 80112fc:	08011313 	.word	0x08011313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011300:	2300      	movs	r3, #0
 8011302:	73fb      	strb	r3, [r7, #15]
    break;
 8011304:	e00b      	b.n	801131e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011306:	2303      	movs	r3, #3
 8011308:	73fb      	strb	r3, [r7, #15]
    break;
 801130a:	e008      	b.n	801131e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801130c:	2301      	movs	r3, #1
 801130e:	73fb      	strb	r3, [r7, #15]
    break;
 8011310:	e005      	b.n	801131e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011312:	2303      	movs	r3, #3
 8011314:	73fb      	strb	r3, [r7, #15]
    break;
 8011316:	e002      	b.n	801131e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011318:	2303      	movs	r3, #3
 801131a:	73fb      	strb	r3, [r7, #15]
    break;
 801131c:	bf00      	nop
  }
  return usb_status;
 801131e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 801132c:	b5b0      	push	{r4, r5, r7, lr}
 801132e:	b088      	sub	sp, #32
 8011330:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 8011332:	4b3e      	ldr	r3, [pc, #248]	@ (801142c <do_dump+0x100>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4a3e      	ldr	r2, [pc, #248]	@ (8011430 <do_dump+0x104>)
 8011338:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 801133a:	4b3c      	ldr	r3, [pc, #240]	@ (801142c <do_dump+0x100>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f023 030f 	bic.w	r3, r3, #15
 8011342:	4619      	mov	r1, r3
 8011344:	483b      	ldr	r0, [pc, #236]	@ (8011434 <do_dump+0x108>)
 8011346:	f000 fc97 	bl	8011c78 <DebugPrint>
	strcpy(ascii_result,"................");
 801134a:	1d3b      	adds	r3, r7, #4
 801134c:	4a3a      	ldr	r2, [pc, #232]	@ (8011438 <do_dump+0x10c>)
 801134e:	461c      	mov	r4, r3
 8011350:	4615      	mov	r5, r2
 8011352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011356:	682b      	ldr	r3, [r5, #0]
 8011358:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 801135a:	2300      	movs	r3, #0
 801135c:	61fb      	str	r3, [r7, #28]
 801135e:	e005      	b.n	801136c <do_dump+0x40>
 8011360:	4836      	ldr	r0, [pc, #216]	@ (801143c <do_dump+0x110>)
 8011362:	f000 fc6f 	bl	8011c44 <DebugSend>
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	3301      	adds	r3, #1
 801136a:	61fb      	str	r3, [r7, #28]
 801136c:	4b2f      	ldr	r3, [pc, #188]	@ (801142c <do_dump+0x100>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f003 020f 	and.w	r2, r3, #15
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	429a      	cmp	r2, r3
 8011378:	d8f2      	bhi.n	8011360 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 801137a:	e049      	b.n	8011410 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 801137c:	4b2b      	ldr	r3, [pc, #172]	@ (801142c <do_dump+0x100>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	492a      	ldr	r1, [pc, #168]	@ (801142c <do_dump+0x100>)
 8011384:	600a      	str	r2, [r1, #0]
 8011386:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 801138e:	7dfb      	ldrb	r3, [r7, #23]
 8011390:	4619      	mov	r1, r3
 8011392:	482b      	ldr	r0, [pc, #172]	@ (8011440 <do_dump+0x114>)
 8011394:	f000 fc70 	bl	8011c78 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 8011398:	7dfb      	ldrb	r3, [r7, #23]
 801139a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801139e:	3301      	adds	r3, #1
 80113a0:	4a28      	ldr	r2, [pc, #160]	@ (8011444 <do_dump+0x118>)
 80113a2:	4413      	add	r3, r2
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	f003 0320 	and.w	r3, r3, #32
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d104      	bne.n	80113b8 <do_dump+0x8c>
 80113ae:	1d3a      	adds	r2, r7, #4
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	4413      	add	r3, r2
 80113b4:	7dfa      	ldrb	r2, [r7, #23]
 80113b6:	701a      	strb	r2, [r3, #0]
		i1++;
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	3301      	adds	r3, #1
 80113bc:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 80113be:	4b1b      	ldr	r3, [pc, #108]	@ (801142c <do_dump+0x100>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f003 030f 	and.w	r3, r3, #15
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d122      	bne.n	8011410 <do_dump+0xe4>
		{
			DebugSend("  ");
 80113ca:	481f      	ldr	r0, [pc, #124]	@ (8011448 <do_dump+0x11c>)
 80113cc:	f000 fc3a 	bl	8011c44 <DebugSend>
			DebugSend(ascii_result);
 80113d0:	1d3b      	adds	r3, r7, #4
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 fc36 	bl	8011c44 <DebugSend>
			i1 = 0;
 80113d8:	2300      	movs	r3, #0
 80113da:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 80113dc:	1d3b      	adds	r3, r7, #4
 80113de:	4a16      	ldr	r2, [pc, #88]	@ (8011438 <do_dump+0x10c>)
 80113e0:	461c      	mov	r4, r3
 80113e2:	4615      	mov	r5, r2
 80113e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113e8:	682b      	ldr	r3, [r5, #0]
 80113ea:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 80113ec:	4b0f      	ldr	r3, [pc, #60]	@ (801142c <do_dump+0x100>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d014      	beq.n	801141e <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 80113f4:	4b0d      	ldr	r3, [pc, #52]	@ (801142c <do_dump+0x100>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	4b14      	ldr	r3, [pc, #80]	@ (801144c <do_dump+0x120>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d807      	bhi.n	8011410 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 8011400:	4b0a      	ldr	r3, [pc, #40]	@ (801142c <do_dump+0x100>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f023 030f 	bic.w	r3, r3, #15
 8011408:	4619      	mov	r1, r3
 801140a:	480a      	ldr	r0, [pc, #40]	@ (8011434 <do_dump+0x108>)
 801140c:	f000 fc34 	bl	8011c78 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 8011410:	4b06      	ldr	r3, [pc, #24]	@ (801142c <do_dump+0x100>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	4b0d      	ldr	r3, [pc, #52]	@ (801144c <do_dump+0x120>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	429a      	cmp	r2, r3
 801141a:	d9af      	bls.n	801137c <do_dump+0x50>
 801141c:	e000      	b.n	8011420 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 801141e:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 8011420:	4b02      	ldr	r3, [pc, #8]	@ (801142c <do_dump+0x100>)
 8011422:	681b      	ldr	r3, [r3, #0]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3720      	adds	r7, #32
 8011428:	46bd      	mov	sp, r7
 801142a:	bdb0      	pop	{r4, r5, r7, pc}
 801142c:	24001fc8 	.word	0x24001fc8
 8011430:	24001fcc 	.word	0x24001fcc
 8011434:	080131b0 	.word	0x080131b0
 8011438:	080131bc 	.word	0x080131bc
 801143c:	080131d0 	.word	0x080131d0
 8011440:	080131d4 	.word	0x080131d4
 8011444:	080133d4 	.word	0x080133d4
 8011448:	080131dc 	.word	0x080131dc
 801144c:	24001fd0 	.word	0x24001fd0

08011450 <debug_parse>:


void debug_parse(char *cmd_line)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08e      	sub	sp, #56	@ 0x38
 8011454:	af02      	add	r7, sp, #8
 8011456:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 8011458:	e002      	b.n	8011460 <debug_parse+0x10>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3301      	adds	r3, #1
 801145e:	607b      	str	r3, [r7, #4]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b20      	cmp	r3, #32
 8011466:	d0f8      	beq.n	801145a <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	1c5a      	adds	r2, r3, #1
 801146c:	607a      	str	r2, [r7, #4]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011474:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011478:	3301      	adds	r3, #1
 801147a:	4aac      	ldr	r2, [pc, #688]	@ (801172c <debug_parse+0x2dc>)
 801147c:	4413      	add	r3, r2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 0303 	and.w	r3, r3, #3
 8011484:	2b02      	cmp	r3, #2
 8011486:	d103      	bne.n	8011490 <debug_parse+0x40>
 8011488:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801148c:	3b20      	subs	r3, #32
 801148e:	e001      	b.n	8011494 <debug_parse+0x44>
 8011490:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011494:	3b3f      	subs	r3, #63	@ 0x3f
 8011496:	2b1b      	cmp	r3, #27
 8011498:	f200 82dc 	bhi.w	8011a54 <debug_parse+0x604>
 801149c:	a201      	add	r2, pc, #4	@ (adr r2, 80114a4 <debug_parse+0x54>)
 801149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a2:	bf00      	nop
 80114a4:	08011515 	.word	0x08011515
 80114a8:	08011a55 	.word	0x08011a55
 80114ac:	08011521 	.word	0x08011521
 80114b0:	08011a33 	.word	0x08011a33
 80114b4:	08011a33 	.word	0x08011a33
 80114b8:	08011531 	.word	0x08011531
 80114bc:	08011591 	.word	0x08011591
 80114c0:	080115b5 	.word	0x080115b5
 80114c4:	08011a33 	.word	0x08011a33
 80114c8:	08011a33 	.word	0x08011a33
 80114cc:	080115e1 	.word	0x080115e1
 80114d0:	08011627 	.word	0x08011627
 80114d4:	08011a33 	.word	0x08011a33
 80114d8:	08011661 	.word	0x08011661
 80114dc:	080116a5 	.word	0x080116a5
 80114e0:	080116f9 	.word	0x080116f9
 80114e4:	0801177d 	.word	0x0801177d
 80114e8:	080117d1 	.word	0x080117d1
 80114ec:	08011a33 	.word	0x08011a33
 80114f0:	08011a33 	.word	0x08011a33
 80114f4:	08011a33 	.word	0x08011a33
 80114f8:	080117e1 	.word	0x080117e1
 80114fc:	08011823 	.word	0x08011823
 8011500:	080118b1 	.word	0x080118b1
 8011504:	08011901 	.word	0x08011901
 8011508:	08011999 	.word	0x08011999
 801150c:	080119a9 	.word	0x080119a9
 8011510:	08011a0d 	.word	0x08011a0d
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 8011514:	4a86      	ldr	r2, [pc, #536]	@ (8011730 <debug_parse+0x2e0>)
 8011516:	4987      	ldr	r1, [pc, #540]	@ (8011734 <debug_parse+0x2e4>)
 8011518:	4887      	ldr	r0, [pc, #540]	@ (8011738 <debug_parse+0x2e8>)
 801151a:	f000 fbad 	bl	8011c78 <DebugPrint>
		break;
 801151e:	e299      	b.n	8011a54 <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 8011520:	f7ef f9fa 	bl	8000918 <CalcTemperature>
 8011524:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 8011526:	6a39      	ldr	r1, [r7, #32]
 8011528:	4884      	ldr	r0, [pc, #528]	@ (801173c <debug_parse+0x2ec>)
 801152a:	f000 fba5 	bl	8011c78 <DebugPrint>
	}
		break;
 801152e:	e291      	b.n	8011a54 <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f107 010c 	add.w	r1, r7, #12
 801153a:	2210      	movs	r2, #16
 801153c:	4618      	mov	r0, r3
 801153e:	f000 fccd 	bl	8011edc <strtoul>
 8011542:	4603      	mov	r3, r0
 8011544:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d019      	beq.n	8011580 <debug_parse+0x130>
			_debug_dump_beg = temp2;
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	4a7c      	ldr	r2, [pc, #496]	@ (8011740 <debug_parse+0x2f0>)
 8011550:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f107 010c 	add.w	r1, r7, #12
 8011558:	2210      	movs	r2, #16
 801155a:	4618      	mov	r0, r3
 801155c:	f000 fcbe 	bl	8011edc <strtoul>
 8011560:	4603      	mov	r3, r0
 8011562:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 8011564:	697a      	ldr	r2, [r7, #20]
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	429a      	cmp	r2, r3
 801156a:	d903      	bls.n	8011574 <debug_parse+0x124>
				_debug_dump_end = temp3;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	4a75      	ldr	r2, [pc, #468]	@ (8011744 <debug_parse+0x2f4>)
 8011570:	6013      	str	r3, [r2, #0]
 8011572:	e00a      	b.n	801158a <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 8011574:	4b72      	ldr	r3, [pc, #456]	@ (8011740 <debug_parse+0x2f0>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	337f      	adds	r3, #127	@ 0x7f
 801157a:	4a72      	ldr	r2, [pc, #456]	@ (8011744 <debug_parse+0x2f4>)
 801157c:	6013      	str	r3, [r2, #0]
 801157e:	e004      	b.n	801158a <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 8011580:	4b6f      	ldr	r3, [pc, #444]	@ (8011740 <debug_parse+0x2f0>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	337f      	adds	r3, #127	@ 0x7f
 8011586:	4a6f      	ldr	r2, [pc, #444]	@ (8011744 <debug_parse+0x2f4>)
 8011588:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 801158a:	f7ff fecf 	bl	801132c <do_dump>
		break;
 801158e:	e261      	b.n	8011a54 <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 8011590:	2300      	movs	r3, #0
 8011592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 8011596:	f107 031c 	add.w	r3, r7, #28
 801159a:	461a      	mov	r2, r3
 801159c:	496a      	ldr	r1, [pc, #424]	@ (8011748 <debug_parse+0x2f8>)
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 fcc8 	bl	8011f34 <siscanf>
 80115a4:	4603      	mov	r3, r0
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	f040 8245 	bne.w	8011a36 <debug_parse+0x5e6>
			tempbyte = temp1;
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 80115b2:	e240      	b.n	8011a36 <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 80115b4:	f107 0114 	add.w	r1, r7, #20
 80115b8:	f107 0218 	add.w	r2, r7, #24
 80115bc:	f107 0310 	add.w	r3, r7, #16
 80115c0:	9300      	str	r3, [sp, #0]
 80115c2:	460b      	mov	r3, r1
 80115c4:	4961      	ldr	r1, [pc, #388]	@ (801174c <debug_parse+0x2fc>)
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f000 fcb4 	bl	8011f34 <siscanf>
 80115cc:	6278      	str	r0, [r7, #36]	@ 0x24
		switch (params) {
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	2b03      	cmp	r3, #3
 80115d2:	d003      	beq.n	80115dc <debug_parse+0x18c>
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 80115d4:	485e      	ldr	r0, [pc, #376]	@ (8011750 <debug_parse+0x300>)
 80115d6:	f000 fb35 	bl	8011c44 <DebugSend>
			}
			break;
 80115da:	e000      	b.n	80115de <debug_parse+0x18e>
			break;
 80115dc:	bf00      	nop
		}
		break;
 80115de:	e239      	b.n	8011a54 <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 80115e0:	f107 031c 	add.w	r3, r7, #28
 80115e4:	461a      	mov	r2, r3
 80115e6:	4958      	ldr	r1, [pc, #352]	@ (8011748 <debug_parse+0x2f8>)
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 fca3 	bl	8011f34 <siscanf>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	f040 8222 	bne.w	8011a3a <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	461a      	mov	r2, r3
 80115fa:	4b56      	ldr	r3, [pc, #344]	@ (8011754 <debug_parse+0x304>)
 80115fc:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 80115fe:	4b55      	ldr	r3, [pc, #340]	@ (8011754 <debug_parse+0x304>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 8011608:	4b52      	ldr	r3, [pc, #328]	@ (8011754 <debug_parse+0x304>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4619      	mov	r1, r3
 801160e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011612:	461a      	mov	r2, r3
 8011614:	4850      	ldr	r0, [pc, #320]	@ (8011758 <debug_parse+0x308>)
 8011616:	f000 fb2f 	bl	8011c78 <DebugPrint>
			debug_port += sizeof(tempbyte);
 801161a:	4b4e      	ldr	r3, [pc, #312]	@ (8011754 <debug_parse+0x304>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3301      	adds	r3, #1
 8011620:	4a4c      	ldr	r2, [pc, #304]	@ (8011754 <debug_parse+0x304>)
 8011622:	6013      	str	r3, [r2, #0]
		}
		break;
 8011624:	e209      	b.n	8011a3a <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 8011626:	f107 031c 	add.w	r3, r7, #28
 801162a:	461a      	mov	r2, r3
 801162c:	4946      	ldr	r1, [pc, #280]	@ (8011748 <debug_parse+0x2f8>)
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 fc80 	bl	8011f34 <siscanf>
 8011634:	4603      	mov	r3, r0
 8011636:	2b01      	cmp	r3, #1
 8011638:	d105      	bne.n	8011646 <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	f023 0301 	bic.w	r3, r3, #1
 8011640:	461a      	mov	r2, r3
 8011642:	4b44      	ldr	r3, [pc, #272]	@ (8011754 <debug_parse+0x304>)
 8011644:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 8011646:	4b43      	ldr	r3, [pc, #268]	@ (8011754 <debug_parse+0x304>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 801164e:	4b41      	ldr	r3, [pc, #260]	@ (8011754 <debug_parse+0x304>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	4619      	mov	r1, r3
 8011654:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011656:	461a      	mov	r2, r3
 8011658:	4840      	ldr	r0, [pc, #256]	@ (801175c <debug_parse+0x30c>)
 801165a:	f000 fb0d 	bl	8011c78 <DebugPrint>
		break;
 801165e:	e1f9      	b.n	8011a54 <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 8011660:	f7f7 fa0a 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8011664:	4603      	mov	r3, r0
 8011666:	4a3e      	ldr	r2, [pc, #248]	@ (8011760 <debug_parse+0x310>)
 8011668:	fba2 2303 	umull	r2, r3, r2, r3
 801166c:	0c9b      	lsrs	r3, r3, #18
 801166e:	4619      	mov	r1, r3
 8011670:	483c      	ldr	r0, [pc, #240]	@ (8011764 <debug_parse+0x314>)
 8011672:	f000 fb01 	bl	8011c78 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 8011676:	f7f7 fb79 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 801167a:	4603      	mov	r3, r0
 801167c:	4a38      	ldr	r2, [pc, #224]	@ (8011760 <debug_parse+0x310>)
 801167e:	fba2 2303 	umull	r2, r3, r2, r3
 8011682:	0c9b      	lsrs	r3, r3, #18
 8011684:	4619      	mov	r1, r3
 8011686:	4838      	ldr	r0, [pc, #224]	@ (8011768 <debug_parse+0x318>)
 8011688:	f000 faf6 	bl	8011c78 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 801168c:	f7f7 fb9e 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 8011690:	4603      	mov	r3, r0
 8011692:	4a33      	ldr	r2, [pc, #204]	@ (8011760 <debug_parse+0x310>)
 8011694:	fba2 2303 	umull	r2, r3, r2, r3
 8011698:	0c9b      	lsrs	r3, r3, #18
 801169a:	4619      	mov	r1, r3
 801169c:	4833      	ldr	r0, [pc, #204]	@ (801176c <debug_parse+0x31c>)
 801169e:	f000 faeb 	bl	8011c78 <DebugPrint>
		break;
 80116a2:	e1d7      	b.n	8011a54 <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 80116a4:	f107 0318 	add.w	r3, r7, #24
 80116a8:	f107 021c 	add.w	r2, r7, #28
 80116ac:	4930      	ldr	r1, [pc, #192]	@ (8011770 <debug_parse+0x320>)
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fc40 	bl	8011f34 <siscanf>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d117      	bne.n	80116ea <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	f023 0303 	bic.w	r3, r3, #3
 80116c0:	461a      	mov	r2, r3
 80116c2:	4b24      	ldr	r3, [pc, #144]	@ (8011754 <debug_parse+0x304>)
 80116c4:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 80116c6:	4b23      	ldr	r3, [pc, #140]	@ (8011754 <debug_parse+0x304>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4619      	mov	r1, r3
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	461a      	mov	r2, r3
 80116d0:	4828      	ldr	r0, [pc, #160]	@ (8011774 <debug_parse+0x324>)
 80116d2:	f000 fad1 	bl	8011c78 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 80116d6:	4b1f      	ldr	r3, [pc, #124]	@ (8011754 <debug_parse+0x304>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 80116de:	4b1d      	ldr	r3, [pc, #116]	@ (8011754 <debug_parse+0x304>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3304      	adds	r3, #4
 80116e4:	4a1b      	ldr	r2, [pc, #108]	@ (8011754 <debug_parse+0x304>)
 80116e6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 80116e8:	e1b4      	b.n	8011a54 <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 80116ea:	4819      	ldr	r0, [pc, #100]	@ (8011750 <debug_parse+0x300>)
 80116ec:	f000 faaa 	bl	8011c44 <DebugSend>
		break;
 80116f0:	e1b0      	b.n	8011a54 <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	3301      	adds	r3, #1
 80116f6:	607b      	str	r3, [r7, #4]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b20      	cmp	r3, #32
 80116fe:	d103      	bne.n	8011708 <debug_parse+0x2b8>
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1f4      	bne.n	80116f2 <debug_parse+0x2a2>
		DebugSend("\r\n");
 8011708:	481b      	ldr	r0, [pc, #108]	@ (8011778 <debug_parse+0x328>)
 801170a:	f000 fa9b 	bl	8011c44 <DebugSend>
		while (*cmd_line!=0) {
 801170e:	e007      	b.n	8011720 <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	4618      	mov	r0, r3
 8011716:	f000 fa53 	bl	8011bc0 <DebugPutChar>
			cmd_line++;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	3301      	adds	r3, #1
 801171e:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d1f3      	bne.n	8011710 <debug_parse+0x2c0>
		}
		break;
 8011728:	e194      	b.n	8011a54 <debug_parse+0x604>
 801172a:	bf00      	nop
 801172c:	080133d4 	.word	0x080133d4
 8011730:	080131e0 	.word	0x080131e0
 8011734:	080131ec 	.word	0x080131ec
 8011738:	080131f8 	.word	0x080131f8
 801173c:	08013218 	.word	0x08013218
 8011740:	24001fc8 	.word	0x24001fc8
 8011744:	24001fd0 	.word	0x24001fd0
 8011748:	0801322c 	.word	0x0801322c
 801174c:	08013230 	.word	0x08013230
 8011750:	0801323c 	.word	0x0801323c
 8011754:	2400010c 	.word	0x2400010c
 8011758:	08013244 	.word	0x08013244
 801175c:	08013254 	.word	0x08013254
 8011760:	431bde83 	.word	0x431bde83
 8011764:	08013264 	.word	0x08013264
 8011768:	0801328c 	.word	0x0801328c
 801176c:	080132b0 	.word	0x080132b0
 8011770:	080132d4 	.word	0x080132d4
 8011774:	080132dc 	.word	0x080132dc
 8011778:	080132ec 	.word	0x080132ec
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 801177c:	f107 0318 	add.w	r3, r7, #24
 8011780:	f107 021c 	add.w	r2, r7, #28
 8011784:	49b5      	ldr	r1, [pc, #724]	@ (8011a5c <debug_parse+0x60c>)
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f000 fbd4 	bl	8011f34 <siscanf>
 801178c:	4603      	mov	r3, r0
 801178e:	2b02      	cmp	r3, #2
 8011790:	d11a      	bne.n	80117c8 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	461a      	mov	r2, r3
 8011796:	4bb2      	ldr	r3, [pc, #712]	@ (8011a60 <debug_parse+0x610>)
 8011798:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 80117a0:	4baf      	ldr	r3, [pc, #700]	@ (8011a60 <debug_parse+0x610>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	4619      	mov	r1, r3
 80117a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80117aa:	461a      	mov	r2, r3
 80117ac:	48ad      	ldr	r0, [pc, #692]	@ (8011a64 <debug_parse+0x614>)
 80117ae:	f000 fa63 	bl	8011c78 <DebugPrint>
			*debug_port = tempbyte;
 80117b2:	4bab      	ldr	r3, [pc, #684]	@ (8011a60 <debug_parse+0x610>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80117ba:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 80117bc:	4ba8      	ldr	r3, [pc, #672]	@ (8011a60 <debug_parse+0x610>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	3301      	adds	r3, #1
 80117c2:	4aa7      	ldr	r2, [pc, #668]	@ (8011a60 <debug_parse+0x610>)
 80117c4:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 80117c6:	e145      	b.n	8011a54 <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 80117c8:	48a7      	ldr	r0, [pc, #668]	@ (8011a68 <debug_parse+0x618>)
 80117ca:	f000 fa3b 	bl	8011c44 <DebugSend>
		break;
 80117ce:	e141      	b.n	8011a54 <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80117d0:	f107 031c 	add.w	r3, r7, #28
 80117d4:	461a      	mov	r2, r3
 80117d6:	49a5      	ldr	r1, [pc, #660]	@ (8011a6c <debug_parse+0x61c>)
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 fbab 	bl	8011f34 <siscanf>
		{
		}
		else
		{
		}
		break;
 80117de:	e139      	b.n	8011a54 <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80117e0:	f107 031c 	add.w	r3, r7, #28
 80117e4:	461a      	mov	r2, r3
 80117e6:	49a1      	ldr	r1, [pc, #644]	@ (8011a6c <debug_parse+0x61c>)
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fba3 	bl	8011f34 <siscanf>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	f000 8124 	beq.w	8011a3e <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 80117f6:	4b9e      	ldr	r3, [pc, #632]	@ (8011a70 <debug_parse+0x620>)
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	bf0c      	ite	eq
 80117fe:	2301      	moveq	r3, #1
 8011800:	2300      	movne	r3, #0
 8011802:	b2db      	uxtb	r3, r3
 8011804:	461a      	mov	r2, r3
 8011806:	4b9a      	ldr	r3, [pc, #616]	@ (8011a70 <debug_parse+0x620>)
 8011808:	701a      	strb	r2, [r3, #0]
			if (bTest)
 801180a:	4b99      	ldr	r3, [pc, #612]	@ (8011a70 <debug_parse+0x620>)
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d003      	beq.n	801181a <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 8011812:	4898      	ldr	r0, [pc, #608]	@ (8011a74 <debug_parse+0x624>)
 8011814:	f000 fa16 	bl	8011c44 <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 8011818:	e111      	b.n	8011a3e <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 801181a:	4897      	ldr	r0, [pc, #604]	@ (8011a78 <debug_parse+0x628>)
 801181c:	f000 fa12 	bl	8011c44 <DebugSend>
		break;
 8011820:	e10d      	b.n	8011a3e <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 8011822:	f107 0318 	add.w	r3, r7, #24
 8011826:	f107 021c 	add.w	r2, r7, #28
 801182a:	4994      	ldr	r1, [pc, #592]	@ (8011a7c <debug_parse+0x62c>)
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fb81 	bl	8011f34 <siscanf>
 8011832:	4603      	mov	r3, r0
 8011834:	2b02      	cmp	r3, #2
 8011836:	f000 8104 	beq.w	8011a42 <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 801183a:	f107 031c 	add.w	r3, r7, #28
 801183e:	461a      	mov	r2, r3
 8011840:	498a      	ldr	r1, [pc, #552]	@ (8011a6c <debug_parse+0x61c>)
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fb76 	bl	8011f34 <siscanf>
 8011848:	4603      	mov	r3, r0
 801184a:	2b01      	cmp	r3, #1
 801184c:	f040 80f9 	bne.w	8011a42 <debug_parse+0x5f2>
		{
			switch (temp1){
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	2b12      	cmp	r3, #18
 8011854:	f200 80f5 	bhi.w	8011a42 <debug_parse+0x5f2>
 8011858:	a201      	add	r2, pc, #4	@ (adr r2, 8011860 <debug_parse+0x410>)
 801185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801185e:	bf00      	nop
 8011860:	080118ad 	.word	0x080118ad
 8011864:	080118ad 	.word	0x080118ad
 8011868:	080118ad 	.word	0x080118ad
 801186c:	080118ad 	.word	0x080118ad
 8011870:	080118ad 	.word	0x080118ad
 8011874:	080118ad 	.word	0x080118ad
 8011878:	080118ad 	.word	0x080118ad
 801187c:	080118ad 	.word	0x080118ad
 8011880:	080118ad 	.word	0x080118ad
 8011884:	080118ad 	.word	0x080118ad
 8011888:	080118ad 	.word	0x080118ad
 801188c:	080118ad 	.word	0x080118ad
 8011890:	080118ad 	.word	0x080118ad
 8011894:	080118ad 	.word	0x080118ad
 8011898:	080118ad 	.word	0x080118ad
 801189c:	080118ad 	.word	0x080118ad
 80118a0:	080118ad 	.word	0x080118ad
 80118a4:	080118ad 	.word	0x080118ad
 80118a8:	080118ad 	.word	0x080118ad
			case 0:
				break;
 80118ac:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 80118ae:	e0c8      	b.n	8011a42 <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80118b0:	f107 031c 	add.w	r3, r7, #28
 80118b4:	461a      	mov	r2, r3
 80118b6:	496d      	ldr	r1, [pc, #436]	@ (8011a6c <debug_parse+0x61c>)
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f000 fb3b 	bl	8011f34 <siscanf>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	f040 80c0 	bne.w	8011a46 <debug_parse+0x5f6>
		{
			switch (temp1){
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	2b09      	cmp	r3, #9
 80118ca:	f200 80bc 	bhi.w	8011a46 <debug_parse+0x5f6>
 80118ce:	a201      	add	r2, pc, #4	@ (adr r2, 80118d4 <debug_parse+0x484>)
 80118d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118d4:	080118fd 	.word	0x080118fd
 80118d8:	080118fd 	.word	0x080118fd
 80118dc:	080118fd 	.word	0x080118fd
 80118e0:	080118fd 	.word	0x080118fd
 80118e4:	080118fd 	.word	0x080118fd
 80118e8:	080118fd 	.word	0x080118fd
 80118ec:	080118fd 	.word	0x080118fd
 80118f0:	080118fd 	.word	0x080118fd
 80118f4:	080118fd 	.word	0x080118fd
 80118f8:	080118fd 	.word	0x080118fd
			case 0:	//V0
				break;
 80118fc:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 80118fe:	e0a2      	b.n	8011a46 <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 8011900:	f107 0318 	add.w	r3, r7, #24
 8011904:	f107 021c 	add.w	r2, r7, #28
 8011908:	4954      	ldr	r1, [pc, #336]	@ (8011a5c <debug_parse+0x60c>)
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f000 fb12 	bl	8011f34 <siscanf>
 8011910:	4603      	mov	r3, r0
 8011912:	2b02      	cmp	r3, #2
 8011914:	d119      	bne.n	801194a <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	f023 0301 	bic.w	r3, r3, #1
 801191c:	461a      	mov	r2, r3
 801191e:	4b50      	ldr	r3, [pc, #320]	@ (8011a60 <debug_parse+0x610>)
 8011920:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 8011926:	4b4e      	ldr	r3, [pc, #312]	@ (8011a60 <debug_parse+0x610>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4619      	mov	r1, r3
 801192c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801192e:	461a      	mov	r2, r3
 8011930:	4853      	ldr	r0, [pc, #332]	@ (8011a80 <debug_parse+0x630>)
 8011932:	f000 f9a1 	bl	8011c78 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 8011936:	4b4a      	ldr	r3, [pc, #296]	@ (8011a60 <debug_parse+0x610>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801193c:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 801193e:	4b48      	ldr	r3, [pc, #288]	@ (8011a60 <debug_parse+0x610>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	3302      	adds	r3, #2
 8011944:	4a46      	ldr	r2, [pc, #280]	@ (8011a60 <debug_parse+0x610>)
 8011946:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 8011948:	e07f      	b.n	8011a4a <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 801194a:	f107 031c 	add.w	r3, r7, #28
 801194e:	461a      	mov	r2, r3
 8011950:	4946      	ldr	r1, [pc, #280]	@ (8011a6c <debug_parse+0x61c>)
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f000 faee 	bl	8011f34 <siscanf>
 8011958:	4603      	mov	r3, r0
 801195a:	2b01      	cmp	r3, #1
 801195c:	d175      	bne.n	8011a4a <debug_parse+0x5fa>
			switch (temp1){
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	2b09      	cmp	r3, #9
 8011962:	d872      	bhi.n	8011a4a <debug_parse+0x5fa>
 8011964:	a201      	add	r2, pc, #4	@ (adr r2, 801196c <debug_parse+0x51c>)
 8011966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196a:	bf00      	nop
 801196c:	08011995 	.word	0x08011995
 8011970:	08011995 	.word	0x08011995
 8011974:	08011995 	.word	0x08011995
 8011978:	08011995 	.word	0x08011995
 801197c:	08011995 	.word	0x08011995
 8011980:	08011995 	.word	0x08011995
 8011984:	08011995 	.word	0x08011995
 8011988:	08011995 	.word	0x08011995
 801198c:	08011995 	.word	0x08011995
 8011990:	08011995 	.word	0x08011995
			break;
 8011994:	bf00      	nop
		break;
 8011996:	e058      	b.n	8011a4a <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8011998:	f107 031c 	add.w	r3, r7, #28
 801199c:	461a      	mov	r2, r3
 801199e:	4933      	ldr	r1, [pc, #204]	@ (8011a6c <debug_parse+0x61c>)
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f000 fac7 	bl	8011f34 <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 80119a6:	e055      	b.n	8011a54 <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 80119a8:	f107 0318 	add.w	r3, r7, #24
 80119ac:	f107 021c 	add.w	r2, r7, #28
 80119b0:	4934      	ldr	r1, [pc, #208]	@ (8011a84 <debug_parse+0x634>)
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fabe 	bl	8011f34 <siscanf>
 80119b8:	4603      	mov	r3, r0
 80119ba:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	2b0f      	cmp	r3, #15
 80119c0:	d845      	bhi.n	8011a4e <debug_parse+0x5fe>
 80119c2:	a201      	add	r2, pc, #4	@ (adr r2, 80119c8 <debug_parse+0x578>)
 80119c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c8:	08011a09 	.word	0x08011a09
 80119cc:	08011a09 	.word	0x08011a09
 80119d0:	08011a09 	.word	0x08011a09
 80119d4:	08011a09 	.word	0x08011a09
 80119d8:	08011a09 	.word	0x08011a09
 80119dc:	08011a09 	.word	0x08011a09
 80119e0:	08011a09 	.word	0x08011a09
 80119e4:	08011a09 	.word	0x08011a09
 80119e8:	08011a09 	.word	0x08011a09
 80119ec:	08011a09 	.word	0x08011a09
 80119f0:	08011a09 	.word	0x08011a09
 80119f4:	08011a09 	.word	0x08011a09
 80119f8:	08011a09 	.word	0x08011a09
 80119fc:	08011a09 	.word	0x08011a09
 8011a00:	08011a09 	.word	0x08011a09
 8011a04:	08011a09 	.word	0x08011a09
			case 0:	//Y0
				{
				}
				break;
 8011a08:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 8011a0a:	e020      	b.n	8011a4e <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 8011a0c:	f107 0318 	add.w	r3, r7, #24
 8011a10:	f107 021c 	add.w	r2, r7, #28
 8011a14:	491c      	ldr	r1, [pc, #112]	@ (8011a88 <debug_parse+0x638>)
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 fa8c 	bl	8011f34 <siscanf>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d017      	beq.n	8011a52 <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 8011a22:	f107 031c 	add.w	r3, r7, #28
 8011a26:	461a      	mov	r2, r3
 8011a28:	4918      	ldr	r1, [pc, #96]	@ (8011a8c <debug_parse+0x63c>)
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 fa82 	bl	8011f34 <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 8011a30:	e00f      	b.n	8011a52 <debug_parse+0x602>
		break;
 8011a32:	bf00      	nop
 8011a34:	e00e      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a36:	bf00      	nop
 8011a38:	e00c      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a3a:	bf00      	nop
 8011a3c:	e00a      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a3e:	bf00      	nop
 8011a40:	e008      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a42:	bf00      	nop
 8011a44:	e006      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a46:	bf00      	nop
 8011a48:	e004      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a4a:	bf00      	nop
 8011a4c:	e002      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a4e:	bf00      	nop
 8011a50:	e000      	b.n	8011a54 <debug_parse+0x604>
		break;
 8011a52:	bf00      	nop
	default:
		;
	}
}
 8011a54:	bf00      	nop
 8011a56:	3730      	adds	r7, #48	@ 0x30
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	080132f0 	.word	0x080132f0
 8011a60:	2400010c 	.word	0x2400010c
 8011a64:	080132f8 	.word	0x080132f8
 8011a68:	0801323c 	.word	0x0801323c
 8011a6c:	08013308 	.word	0x08013308
 8011a70:	24001fd4 	.word	0x24001fd4
 8011a74:	0801330c 	.word	0x0801330c
 8011a78:	08013318 	.word	0x08013318
 8011a7c:	08013328 	.word	0x08013328
 8011a80:	08013330 	.word	0x08013330
 8011a84:	08013340 	.word	0x08013340
 8011a88:	08013348 	.word	0x08013348
 8011a8c:	08013350 	.word	0x08013350

08011a90 <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	4603      	mov	r3, r0
 8011a98:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
 8011a9c:	2b0d      	cmp	r3, #13
 8011a9e:	d003      	beq.n	8011aa8 <debug_rcv+0x18>
 8011aa0:	4b21      	ldr	r3, [pc, #132]	@ (8011b28 <debug_rcv+0x98>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2bff      	cmp	r3, #255	@ 0xff
 8011aa6:	d112      	bne.n	8011ace <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 8011aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8011b28 <debug_rcv+0x98>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a1f      	ldr	r2, [pc, #124]	@ (8011b2c <debug_rcv+0x9c>)
 8011aae:	2100      	movs	r1, #0
 8011ab0:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 8011ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8011b28 <debug_rcv+0x98>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d002      	beq.n	8011ac0 <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 8011aba:	481c      	ldr	r0, [pc, #112]	@ (8011b2c <debug_rcv+0x9c>)
 8011abc:	f7ff fcc8 	bl	8011450 <debug_parse>
		}
		lineptr = 0;
 8011ac0:	4b19      	ldr	r3, [pc, #100]	@ (8011b28 <debug_rcv+0x98>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 8011ac6:	481a      	ldr	r0, [pc, #104]	@ (8011b30 <debug_rcv+0xa0>)
 8011ac8:	f000 f8bc 	bl	8011c44 <DebugSend>
 8011acc:	e027      	b.n	8011b1e <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 8011ace:	79fb      	ldrb	r3, [r7, #7]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	4a18      	ldr	r2, [pc, #96]	@ (8011b34 <debug_rcv+0xa4>)
 8011ad4:	4413      	add	r3, r2
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	f003 0320 	and.w	r3, r3, #32
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d010      	beq.n	8011b02 <debug_rcv+0x72>
	{
		switch (ch)
 8011ae0:	79fb      	ldrb	r3, [r7, #7]
 8011ae2:	2b08      	cmp	r3, #8
 8011ae4:	d11b      	bne.n	8011b1e <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 8011ae6:	4b10      	ldr	r3, [pc, #64]	@ (8011b28 <debug_rcv+0x98>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d016      	beq.n	8011b1c <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 8011aee:	79fb      	ldrb	r3, [r7, #7]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f000 f865 	bl	8011bc0 <DebugPutChar>
				lineptr--;
 8011af6:	4b0c      	ldr	r3, [pc, #48]	@ (8011b28 <debug_rcv+0x98>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3b01      	subs	r3, #1
 8011afc:	4a0a      	ldr	r2, [pc, #40]	@ (8011b28 <debug_rcv+0x98>)
 8011afe:	6013      	str	r3, [r2, #0]
			}
			break;
 8011b00:	e00c      	b.n	8011b1c <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 8011b02:	4b09      	ldr	r3, [pc, #36]	@ (8011b28 <debug_rcv+0x98>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	4907      	ldr	r1, [pc, #28]	@ (8011b28 <debug_rcv+0x98>)
 8011b0a:	600a      	str	r2, [r1, #0]
 8011b0c:	4907      	ldr	r1, [pc, #28]	@ (8011b2c <debug_rcv+0x9c>)
 8011b0e:	79fa      	ldrb	r2, [r7, #7]
 8011b10:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 f853 	bl	8011bc0 <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 8011b1a:	e000      	b.n	8011b1e <debug_rcv+0x8e>
			break;
 8011b1c:	bf00      	nop
}
 8011b1e:	bf00      	nop
 8011b20:	3708      	adds	r7, #8
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	240030e0 	.word	0x240030e0
 8011b2c:	240030e4 	.word	0x240030e4
 8011b30:	08013354 	.word	0x08013354
 8011b34:	080133d4 	.word	0x080133d4

08011b38 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
	if (!InDebug) {
 8011b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8011bb0 <DebugTask+0x78>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d12d      	bne.n	8011ba2 <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 8011b46:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb0 <DebugTask+0x78>)
 8011b48:	2201      	movs	r2, #1
 8011b4a:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 8011b4c:	4b19      	ldr	r3, [pc, #100]	@ (8011bb4 <DebugTask+0x7c>)
 8011b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b52:	4b19      	ldr	r3, [pc, #100]	@ (8011bb8 <DebugTask+0x80>)
 8011b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d01f      	beq.n	8011b9c <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 8011b5c:	4b16      	ldr	r3, [pc, #88]	@ (8011bb8 <DebugTask+0x80>)
 8011b5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b62:	b293      	uxth	r3, r2
 8011b64:	3301      	adds	r3, #1
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	b219      	sxth	r1, r3
 8011b6a:	4b13      	ldr	r3, [pc, #76]	@ (8011bb8 <DebugTask+0x80>)
 8011b6c:	8019      	strh	r1, [r3, #0]
 8011b6e:	4b13      	ldr	r3, [pc, #76]	@ (8011bbc <DebugTask+0x84>)
 8011b70:	5c9b      	ldrb	r3, [r3, r2]
 8011b72:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 8011b74:	4b10      	ldr	r3, [pc, #64]	@ (8011bb8 <DebugTask+0x80>)
 8011b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b7a:	2bff      	cmp	r3, #255	@ 0xff
 8011b7c:	dd02      	ble.n	8011b84 <DebugTask+0x4c>
 8011b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb8 <DebugTask+0x80>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7ff ff82 	bl	8011a90 <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 8011b8c:	4b09      	ldr	r3, [pc, #36]	@ (8011bb4 <DebugTask+0x7c>)
 8011b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b92:	4b09      	ldr	r3, [pc, #36]	@ (8011bb8 <DebugTask+0x80>)
 8011b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d1df      	bne.n	8011b5c <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 8011b9c:	4b04      	ldr	r3, [pc, #16]	@ (8011bb0 <DebugTask+0x78>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 8011ba2:	f000 f881 	bl	8011ca8 <DoDebugSerial>
#endif
}
 8011ba6:	bf00      	nop
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	240031e4 	.word	0x240031e4
 8011bb4:	240020d8 	.word	0x240020d8
 8011bb8:	240020da 	.word	0x240020da
 8011bbc:	24001fd8 	.word	0x24001fd8

08011bc0 <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 8011bca:	4b1b      	ldr	r3, [pc, #108]	@ (8011c38 <DebugPutChar+0x78>)
 8011bcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bd0:	b293      	uxth	r3, r2
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	b219      	sxth	r1, r3
 8011bd8:	4b17      	ldr	r3, [pc, #92]	@ (8011c38 <DebugPutChar+0x78>)
 8011bda:	8019      	strh	r1, [r3, #0]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4a17      	ldr	r2, [pc, #92]	@ (8011c3c <DebugPutChar+0x7c>)
 8011be0:	79fb      	ldrb	r3, [r7, #7]
 8011be2:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 8011be4:	4b14      	ldr	r3, [pc, #80]	@ (8011c38 <DebugPutChar+0x78>)
 8011be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bee:	db02      	blt.n	8011bf6 <DebugPutChar+0x36>
 8011bf0:	4b11      	ldr	r3, [pc, #68]	@ (8011c38 <DebugPutChar+0x78>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 8011bf6:	4b10      	ldr	r3, [pc, #64]	@ (8011c38 <DebugPutChar+0x78>)
 8011bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bfc:	4b10      	ldr	r3, [pc, #64]	@ (8011c40 <DebugPutChar+0x80>)
 8011bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d111      	bne.n	8011c2a <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 8011c06:	4b0e      	ldr	r3, [pc, #56]	@ (8011c40 <DebugPutChar+0x80>)
 8011c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	3301      	adds	r3, #1
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	b21a      	sxth	r2, r3
 8011c14:	4b0a      	ldr	r3, [pc, #40]	@ (8011c40 <DebugPutChar+0x80>)
 8011c16:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 8011c18:	4b09      	ldr	r3, [pc, #36]	@ (8011c40 <DebugPutChar+0x80>)
 8011c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011c22:	db02      	blt.n	8011c2a <DebugPutChar+0x6a>
 8011c24:	4b06      	ldr	r3, [pc, #24]	@ (8011c40 <DebugPutChar+0x80>)
 8011c26:	2200      	movs	r2, #0
 8011c28:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 8011c2a:	bf00      	nop
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	240028dc 	.word	0x240028dc
 8011c3c:	240020dc 	.word	0x240020dc
 8011c40:	240028de 	.word	0x240028de

08011c44 <DebugSend>:

void DebugSend(char *message)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
	char ch = *message;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 8011c52:	e009      	b.n	8011c68 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff ffb2 	bl	8011bc0 <DebugPutChar>
		message++;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	607b      	str	r3, [r7, #4]
		ch = *message;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1f2      	bne.n	8011c54 <DebugSend+0x10>
	}
}
 8011c6e:	bf00      	nop
 8011c70:	bf00      	nop
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 8011c78:	b40f      	push	{r0, r1, r2, r3}
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b096      	sub	sp, #88	@ 0x58
 8011c7e:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 8011c80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011c84:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 8011c86:	1d3b      	adds	r3, r7, #4
 8011c88:	683a      	ldr	r2, [r7, #0]
 8011c8a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f000 f995 	bl	8011fbc <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 8011c92:	1d3b      	adds	r3, r7, #4
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7ff ffd5 	bl	8011c44 <DebugSend>
}
 8011c9a:	bf00      	nop
 8011c9c:	3758      	adds	r7, #88	@ 0x58
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ca4:	b004      	add	sp, #16
 8011ca6:	4770      	bx	lr

08011ca8 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 8011cae:	4b28      	ldr	r3, [pc, #160]	@ (8011d50 <DoDebugSerial+0xa8>)
 8011cb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cb4:	4b27      	ldr	r3, [pc, #156]	@ (8011d54 <DoDebugSerial+0xac>)
 8011cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d043      	beq.n	8011d46 <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 8011cbe:	4b24      	ldr	r3, [pc, #144]	@ (8011d50 <DoDebugSerial+0xa8>)
 8011cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	4b23      	ldr	r3, [pc, #140]	@ (8011d54 <DoDebugSerial+0xac>)
 8011cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	1ad3      	subs	r3, r2, r3
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 8011cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	da04      	bge.n	8011ce6 <DoDebugSerial+0x3e>
 8011cdc:	88fb      	ldrh	r3, [r7, #6]
 8011cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 8011ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cee:	dd02      	ble.n	8011cf6 <DoDebugSerial+0x4e>
 8011cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011cf4:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	80bb      	strh	r3, [r7, #4]
 8011cfa:	e01a      	b.n	8011d32 <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 8011cfc:	4b15      	ldr	r3, [pc, #84]	@ (8011d54 <DoDebugSerial+0xac>)
 8011cfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d02:	b293      	uxth	r3, r2
 8011d04:	3301      	adds	r3, #1
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	b219      	sxth	r1, r3
 8011d0a:	4b12      	ldr	r3, [pc, #72]	@ (8011d54 <DoDebugSerial+0xac>)
 8011d0c:	8019      	strh	r1, [r3, #0]
 8011d0e:	4611      	mov	r1, r2
 8011d10:	88bb      	ldrh	r3, [r7, #4]
 8011d12:	4a11      	ldr	r2, [pc, #68]	@ (8011d58 <DoDebugSerial+0xb0>)
 8011d14:	5c51      	ldrb	r1, [r2, r1]
 8011d16:	4a11      	ldr	r2, [pc, #68]	@ (8011d5c <DoDebugSerial+0xb4>)
 8011d18:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 8011d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8011d54 <DoDebugSerial+0xac>)
 8011d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d24:	db02      	blt.n	8011d2c <DoDebugSerial+0x84>
 8011d26:	4b0b      	ldr	r3, [pc, #44]	@ (8011d54 <DoDebugSerial+0xac>)
 8011d28:	2200      	movs	r2, #0
 8011d2a:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8011d2c:	88bb      	ldrh	r3, [r7, #4]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	80bb      	strh	r3, [r7, #4]
 8011d32:	88ba      	ldrh	r2, [r7, #4]
 8011d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	dbdf      	blt.n	8011cfc <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 8011d3c:	88fb      	ldrh	r3, [r7, #6]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	4806      	ldr	r0, [pc, #24]	@ (8011d5c <DoDebugSerial+0xb4>)
 8011d42:	f7fe fe8c 	bl	8010a5e <USB_Transmit>
	}
}
 8011d46:	bf00      	nop
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	240028dc 	.word	0x240028dc
 8011d54:	240028de 	.word	0x240028de
 8011d58:	240020dc 	.word	0x240020dc
 8011d5c:	240028e0 	.word	0x240028e0

08011d60 <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	81fb      	strh	r3, [r7, #14]
 8011d70:	e033      	b.n	8011dda <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 8011d72:	89fb      	ldrh	r3, [r7, #14]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	4413      	add	r3, r2
 8011d78:	4a1d      	ldr	r2, [pc, #116]	@ (8011df0 <USB_Receive+0x90>)
 8011d7a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011d7e:	b28a      	uxth	r2, r1
 8011d80:	3201      	adds	r2, #1
 8011d82:	b292      	uxth	r2, r2
 8011d84:	b210      	sxth	r0, r2
 8011d86:	4a1a      	ldr	r2, [pc, #104]	@ (8011df0 <USB_Receive+0x90>)
 8011d88:	8010      	strh	r0, [r2, #0]
 8011d8a:	460a      	mov	r2, r1
 8011d8c:	7819      	ldrb	r1, [r3, #0]
 8011d8e:	4b19      	ldr	r3, [pc, #100]	@ (8011df4 <USB_Receive+0x94>)
 8011d90:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 8011d92:	4b17      	ldr	r3, [pc, #92]	@ (8011df0 <USB_Receive+0x90>)
 8011d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d98:	2bff      	cmp	r3, #255	@ 0xff
 8011d9a:	dd02      	ble.n	8011da2 <USB_Receive+0x42>
 8011d9c:	4b14      	ldr	r3, [pc, #80]	@ (8011df0 <USB_Receive+0x90>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 8011da2:	4b13      	ldr	r3, [pc, #76]	@ (8011df0 <USB_Receive+0x90>)
 8011da4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011da8:	4b13      	ldr	r3, [pc, #76]	@ (8011df8 <USB_Receive+0x98>)
 8011daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d110      	bne.n	8011dd4 <USB_Receive+0x74>
			dbg_rx_tail++;
 8011db2:	4b11      	ldr	r3, [pc, #68]	@ (8011df8 <USB_Receive+0x98>)
 8011db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	3301      	adds	r3, #1
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	b21a      	sxth	r2, r3
 8011dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011df8 <USB_Receive+0x98>)
 8011dc2:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8011df8 <USB_Receive+0x98>)
 8011dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dca:	2bff      	cmp	r3, #255	@ 0xff
 8011dcc:	dd02      	ble.n	8011dd4 <USB_Receive+0x74>
 8011dce:	4b0a      	ldr	r3, [pc, #40]	@ (8011df8 <USB_Receive+0x98>)
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 8011dd4:	89fb      	ldrh	r3, [r7, #14]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	81fb      	strh	r3, [r7, #14]
 8011dda:	89fa      	ldrh	r2, [r7, #14]
 8011ddc:	887b      	ldrh	r3, [r7, #2]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d3c7      	bcc.n	8011d72 <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	240020d8 	.word	0x240020d8
 8011df4:	24001fd8 	.word	0x24001fd8
 8011df8:	240020da 	.word	0x240020da

08011dfc <_strtoul_l.isra.0>:
 8011dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e00:	4e34      	ldr	r6, [pc, #208]	@ (8011ed4 <_strtoul_l.isra.0+0xd8>)
 8011e02:	4686      	mov	lr, r0
 8011e04:	460d      	mov	r5, r1
 8011e06:	4628      	mov	r0, r5
 8011e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e0c:	5d37      	ldrb	r7, [r6, r4]
 8011e0e:	f017 0708 	ands.w	r7, r7, #8
 8011e12:	d1f8      	bne.n	8011e06 <_strtoul_l.isra.0+0xa>
 8011e14:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e16:	d110      	bne.n	8011e3a <_strtoul_l.isra.0+0x3e>
 8011e18:	782c      	ldrb	r4, [r5, #0]
 8011e1a:	2701      	movs	r7, #1
 8011e1c:	1c85      	adds	r5, r0, #2
 8011e1e:	f033 0010 	bics.w	r0, r3, #16
 8011e22:	d115      	bne.n	8011e50 <_strtoul_l.isra.0+0x54>
 8011e24:	2c30      	cmp	r4, #48	@ 0x30
 8011e26:	d10d      	bne.n	8011e44 <_strtoul_l.isra.0+0x48>
 8011e28:	7828      	ldrb	r0, [r5, #0]
 8011e2a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011e2e:	2858      	cmp	r0, #88	@ 0x58
 8011e30:	d108      	bne.n	8011e44 <_strtoul_l.isra.0+0x48>
 8011e32:	786c      	ldrb	r4, [r5, #1]
 8011e34:	3502      	adds	r5, #2
 8011e36:	2310      	movs	r3, #16
 8011e38:	e00a      	b.n	8011e50 <_strtoul_l.isra.0+0x54>
 8011e3a:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e3c:	bf04      	itt	eq
 8011e3e:	782c      	ldrbeq	r4, [r5, #0]
 8011e40:	1c85      	addeq	r5, r0, #2
 8011e42:	e7ec      	b.n	8011e1e <_strtoul_l.isra.0+0x22>
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1f6      	bne.n	8011e36 <_strtoul_l.isra.0+0x3a>
 8011e48:	2c30      	cmp	r4, #48	@ 0x30
 8011e4a:	bf14      	ite	ne
 8011e4c:	230a      	movne	r3, #10
 8011e4e:	2308      	moveq	r3, #8
 8011e50:	f04f 38ff 	mov.w	r8, #4294967295
 8011e54:	2600      	movs	r6, #0
 8011e56:	fbb8 f8f3 	udiv	r8, r8, r3
 8011e5a:	fb03 f908 	mul.w	r9, r3, r8
 8011e5e:	ea6f 0909 	mvn.w	r9, r9
 8011e62:	4630      	mov	r0, r6
 8011e64:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011e68:	f1bc 0f09 	cmp.w	ip, #9
 8011e6c:	d810      	bhi.n	8011e90 <_strtoul_l.isra.0+0x94>
 8011e6e:	4664      	mov	r4, ip
 8011e70:	42a3      	cmp	r3, r4
 8011e72:	dd1e      	ble.n	8011eb2 <_strtoul_l.isra.0+0xb6>
 8011e74:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011e78:	d007      	beq.n	8011e8a <_strtoul_l.isra.0+0x8e>
 8011e7a:	4580      	cmp	r8, r0
 8011e7c:	d316      	bcc.n	8011eac <_strtoul_l.isra.0+0xb0>
 8011e7e:	d101      	bne.n	8011e84 <_strtoul_l.isra.0+0x88>
 8011e80:	45a1      	cmp	r9, r4
 8011e82:	db13      	blt.n	8011eac <_strtoul_l.isra.0+0xb0>
 8011e84:	fb00 4003 	mla	r0, r0, r3, r4
 8011e88:	2601      	movs	r6, #1
 8011e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e8e:	e7e9      	b.n	8011e64 <_strtoul_l.isra.0+0x68>
 8011e90:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011e94:	f1bc 0f19 	cmp.w	ip, #25
 8011e98:	d801      	bhi.n	8011e9e <_strtoul_l.isra.0+0xa2>
 8011e9a:	3c37      	subs	r4, #55	@ 0x37
 8011e9c:	e7e8      	b.n	8011e70 <_strtoul_l.isra.0+0x74>
 8011e9e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011ea2:	f1bc 0f19 	cmp.w	ip, #25
 8011ea6:	d804      	bhi.n	8011eb2 <_strtoul_l.isra.0+0xb6>
 8011ea8:	3c57      	subs	r4, #87	@ 0x57
 8011eaa:	e7e1      	b.n	8011e70 <_strtoul_l.isra.0+0x74>
 8011eac:	f04f 36ff 	mov.w	r6, #4294967295
 8011eb0:	e7eb      	b.n	8011e8a <_strtoul_l.isra.0+0x8e>
 8011eb2:	1c73      	adds	r3, r6, #1
 8011eb4:	d106      	bne.n	8011ec4 <_strtoul_l.isra.0+0xc8>
 8011eb6:	2322      	movs	r3, #34	@ 0x22
 8011eb8:	f8ce 3000 	str.w	r3, [lr]
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	b932      	cbnz	r2, 8011ece <_strtoul_l.isra.0+0xd2>
 8011ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ec4:	b107      	cbz	r7, 8011ec8 <_strtoul_l.isra.0+0xcc>
 8011ec6:	4240      	negs	r0, r0
 8011ec8:	2a00      	cmp	r2, #0
 8011eca:	d0f9      	beq.n	8011ec0 <_strtoul_l.isra.0+0xc4>
 8011ecc:	b106      	cbz	r6, 8011ed0 <_strtoul_l.isra.0+0xd4>
 8011ece:	1e69      	subs	r1, r5, #1
 8011ed0:	6011      	str	r1, [r2, #0]
 8011ed2:	e7f5      	b.n	8011ec0 <_strtoul_l.isra.0+0xc4>
 8011ed4:	080133d5 	.word	0x080133d5

08011ed8 <_strtoul_r>:
 8011ed8:	f7ff bf90 	b.w	8011dfc <_strtoul_l.isra.0>

08011edc <strtoul>:
 8011edc:	4613      	mov	r3, r2
 8011ede:	460a      	mov	r2, r1
 8011ee0:	4601      	mov	r1, r0
 8011ee2:	4802      	ldr	r0, [pc, #8]	@ (8011eec <strtoul+0x10>)
 8011ee4:	6800      	ldr	r0, [r0, #0]
 8011ee6:	f7ff bf89 	b.w	8011dfc <_strtoul_l.isra.0>
 8011eea:	bf00      	nop
 8011eec:	24000110 	.word	0x24000110

08011ef0 <siprintf>:
 8011ef0:	b40e      	push	{r1, r2, r3}
 8011ef2:	b510      	push	{r4, lr}
 8011ef4:	b09d      	sub	sp, #116	@ 0x74
 8011ef6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ef8:	9002      	str	r0, [sp, #8]
 8011efa:	9006      	str	r0, [sp, #24]
 8011efc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f00:	480a      	ldr	r0, [pc, #40]	@ (8011f2c <siprintf+0x3c>)
 8011f02:	9107      	str	r1, [sp, #28]
 8011f04:	9104      	str	r1, [sp, #16]
 8011f06:	490a      	ldr	r1, [pc, #40]	@ (8011f30 <siprintf+0x40>)
 8011f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f0c:	9105      	str	r1, [sp, #20]
 8011f0e:	2400      	movs	r4, #0
 8011f10:	a902      	add	r1, sp, #8
 8011f12:	6800      	ldr	r0, [r0, #0]
 8011f14:	9301      	str	r3, [sp, #4]
 8011f16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011f18:	f000 f9e2 	bl	80122e0 <_svfiprintf_r>
 8011f1c:	9b02      	ldr	r3, [sp, #8]
 8011f1e:	701c      	strb	r4, [r3, #0]
 8011f20:	b01d      	add	sp, #116	@ 0x74
 8011f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f26:	b003      	add	sp, #12
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	24000110 	.word	0x24000110
 8011f30:	ffff0208 	.word	0xffff0208

08011f34 <siscanf>:
 8011f34:	b40e      	push	{r1, r2, r3}
 8011f36:	b570      	push	{r4, r5, r6, lr}
 8011f38:	b09d      	sub	sp, #116	@ 0x74
 8011f3a:	ac21      	add	r4, sp, #132	@ 0x84
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011f42:	f854 6b04 	ldr.w	r6, [r4], #4
 8011f46:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f4a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011f4c:	9002      	str	r0, [sp, #8]
 8011f4e:	9006      	str	r0, [sp, #24]
 8011f50:	f7ee f9c6 	bl	80002e0 <strlen>
 8011f54:	4b0b      	ldr	r3, [pc, #44]	@ (8011f84 <siscanf+0x50>)
 8011f56:	9003      	str	r0, [sp, #12]
 8011f58:	9007      	str	r0, [sp, #28]
 8011f5a:	480b      	ldr	r0, [pc, #44]	@ (8011f88 <siscanf+0x54>)
 8011f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f66:	4632      	mov	r2, r6
 8011f68:	4623      	mov	r3, r4
 8011f6a:	a902      	add	r1, sp, #8
 8011f6c:	6800      	ldr	r0, [r0, #0]
 8011f6e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011f70:	9514      	str	r5, [sp, #80]	@ 0x50
 8011f72:	9401      	str	r4, [sp, #4]
 8011f74:	f000 fb0a 	bl	801258c <__ssvfiscanf_r>
 8011f78:	b01d      	add	sp, #116	@ 0x74
 8011f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f7e:	b003      	add	sp, #12
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	08011f8d 	.word	0x08011f8d
 8011f88:	24000110 	.word	0x24000110

08011f8c <__seofread>:
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	4770      	bx	lr

08011f90 <_vsiprintf_r>:
 8011f90:	b510      	push	{r4, lr}
 8011f92:	b09a      	sub	sp, #104	@ 0x68
 8011f94:	2400      	movs	r4, #0
 8011f96:	9100      	str	r1, [sp, #0]
 8011f98:	9104      	str	r1, [sp, #16]
 8011f9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011f9e:	9105      	str	r1, [sp, #20]
 8011fa0:	9102      	str	r1, [sp, #8]
 8011fa2:	4905      	ldr	r1, [pc, #20]	@ (8011fb8 <_vsiprintf_r+0x28>)
 8011fa4:	9103      	str	r1, [sp, #12]
 8011fa6:	4669      	mov	r1, sp
 8011fa8:	9419      	str	r4, [sp, #100]	@ 0x64
 8011faa:	f000 f999 	bl	80122e0 <_svfiprintf_r>
 8011fae:	9b00      	ldr	r3, [sp, #0]
 8011fb0:	701c      	strb	r4, [r3, #0]
 8011fb2:	b01a      	add	sp, #104	@ 0x68
 8011fb4:	bd10      	pop	{r4, pc}
 8011fb6:	bf00      	nop
 8011fb8:	ffff0208 	.word	0xffff0208

08011fbc <vsiprintf>:
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	460a      	mov	r2, r1
 8011fc0:	4601      	mov	r1, r0
 8011fc2:	4802      	ldr	r0, [pc, #8]	@ (8011fcc <vsiprintf+0x10>)
 8011fc4:	6800      	ldr	r0, [r0, #0]
 8011fc6:	f7ff bfe3 	b.w	8011f90 <_vsiprintf_r>
 8011fca:	bf00      	nop
 8011fcc:	24000110 	.word	0x24000110

08011fd0 <memset>:
 8011fd0:	4402      	add	r2, r0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d100      	bne.n	8011fda <memset+0xa>
 8011fd8:	4770      	bx	lr
 8011fda:	f803 1b01 	strb.w	r1, [r3], #1
 8011fde:	e7f9      	b.n	8011fd4 <memset+0x4>

08011fe0 <__errno>:
 8011fe0:	4b01      	ldr	r3, [pc, #4]	@ (8011fe8 <__errno+0x8>)
 8011fe2:	6818      	ldr	r0, [r3, #0]
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	24000110 	.word	0x24000110

08011fec <__libc_init_array>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	4d0d      	ldr	r5, [pc, #52]	@ (8012024 <__libc_init_array+0x38>)
 8011ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8012028 <__libc_init_array+0x3c>)
 8011ff2:	1b64      	subs	r4, r4, r5
 8011ff4:	10a4      	asrs	r4, r4, #2
 8011ff6:	2600      	movs	r6, #0
 8011ff8:	42a6      	cmp	r6, r4
 8011ffa:	d109      	bne.n	8012010 <__libc_init_array+0x24>
 8011ffc:	4d0b      	ldr	r5, [pc, #44]	@ (801202c <__libc_init_array+0x40>)
 8011ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8012030 <__libc_init_array+0x44>)
 8012000:	f001 f872 	bl	80130e8 <_init>
 8012004:	1b64      	subs	r4, r4, r5
 8012006:	10a4      	asrs	r4, r4, #2
 8012008:	2600      	movs	r6, #0
 801200a:	42a6      	cmp	r6, r4
 801200c:	d105      	bne.n	801201a <__libc_init_array+0x2e>
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	f855 3b04 	ldr.w	r3, [r5], #4
 8012014:	4798      	blx	r3
 8012016:	3601      	adds	r6, #1
 8012018:	e7ee      	b.n	8011ff8 <__libc_init_array+0xc>
 801201a:	f855 3b04 	ldr.w	r3, [r5], #4
 801201e:	4798      	blx	r3
 8012020:	3601      	adds	r6, #1
 8012022:	e7f2      	b.n	801200a <__libc_init_array+0x1e>
 8012024:	0801352c 	.word	0x0801352c
 8012028:	0801352c 	.word	0x0801352c
 801202c:	0801352c 	.word	0x0801352c
 8012030:	08013530 	.word	0x08013530

08012034 <__retarget_lock_acquire_recursive>:
 8012034:	4770      	bx	lr

08012036 <__retarget_lock_release_recursive>:
 8012036:	4770      	bx	lr

08012038 <_free_r>:
 8012038:	b538      	push	{r3, r4, r5, lr}
 801203a:	4605      	mov	r5, r0
 801203c:	2900      	cmp	r1, #0
 801203e:	d041      	beq.n	80120c4 <_free_r+0x8c>
 8012040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012044:	1f0c      	subs	r4, r1, #4
 8012046:	2b00      	cmp	r3, #0
 8012048:	bfb8      	it	lt
 801204a:	18e4      	addlt	r4, r4, r3
 801204c:	f000 f8e0 	bl	8012210 <__malloc_lock>
 8012050:	4a1d      	ldr	r2, [pc, #116]	@ (80120c8 <_free_r+0x90>)
 8012052:	6813      	ldr	r3, [r2, #0]
 8012054:	b933      	cbnz	r3, 8012064 <_free_r+0x2c>
 8012056:	6063      	str	r3, [r4, #4]
 8012058:	6014      	str	r4, [r2, #0]
 801205a:	4628      	mov	r0, r5
 801205c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012060:	f000 b8dc 	b.w	801221c <__malloc_unlock>
 8012064:	42a3      	cmp	r3, r4
 8012066:	d908      	bls.n	801207a <_free_r+0x42>
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	1821      	adds	r1, r4, r0
 801206c:	428b      	cmp	r3, r1
 801206e:	bf01      	itttt	eq
 8012070:	6819      	ldreq	r1, [r3, #0]
 8012072:	685b      	ldreq	r3, [r3, #4]
 8012074:	1809      	addeq	r1, r1, r0
 8012076:	6021      	streq	r1, [r4, #0]
 8012078:	e7ed      	b.n	8012056 <_free_r+0x1e>
 801207a:	461a      	mov	r2, r3
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	b10b      	cbz	r3, 8012084 <_free_r+0x4c>
 8012080:	42a3      	cmp	r3, r4
 8012082:	d9fa      	bls.n	801207a <_free_r+0x42>
 8012084:	6811      	ldr	r1, [r2, #0]
 8012086:	1850      	adds	r0, r2, r1
 8012088:	42a0      	cmp	r0, r4
 801208a:	d10b      	bne.n	80120a4 <_free_r+0x6c>
 801208c:	6820      	ldr	r0, [r4, #0]
 801208e:	4401      	add	r1, r0
 8012090:	1850      	adds	r0, r2, r1
 8012092:	4283      	cmp	r3, r0
 8012094:	6011      	str	r1, [r2, #0]
 8012096:	d1e0      	bne.n	801205a <_free_r+0x22>
 8012098:	6818      	ldr	r0, [r3, #0]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	6053      	str	r3, [r2, #4]
 801209e:	4408      	add	r0, r1
 80120a0:	6010      	str	r0, [r2, #0]
 80120a2:	e7da      	b.n	801205a <_free_r+0x22>
 80120a4:	d902      	bls.n	80120ac <_free_r+0x74>
 80120a6:	230c      	movs	r3, #12
 80120a8:	602b      	str	r3, [r5, #0]
 80120aa:	e7d6      	b.n	801205a <_free_r+0x22>
 80120ac:	6820      	ldr	r0, [r4, #0]
 80120ae:	1821      	adds	r1, r4, r0
 80120b0:	428b      	cmp	r3, r1
 80120b2:	bf04      	itt	eq
 80120b4:	6819      	ldreq	r1, [r3, #0]
 80120b6:	685b      	ldreq	r3, [r3, #4]
 80120b8:	6063      	str	r3, [r4, #4]
 80120ba:	bf04      	itt	eq
 80120bc:	1809      	addeq	r1, r1, r0
 80120be:	6021      	streq	r1, [r4, #0]
 80120c0:	6054      	str	r4, [r2, #4]
 80120c2:	e7ca      	b.n	801205a <_free_r+0x22>
 80120c4:	bd38      	pop	{r3, r4, r5, pc}
 80120c6:	bf00      	nop
 80120c8:	2400332c 	.word	0x2400332c

080120cc <sbrk_aligned>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	4e0f      	ldr	r6, [pc, #60]	@ (801210c <sbrk_aligned+0x40>)
 80120d0:	460c      	mov	r4, r1
 80120d2:	6831      	ldr	r1, [r6, #0]
 80120d4:	4605      	mov	r5, r0
 80120d6:	b911      	cbnz	r1, 80120de <sbrk_aligned+0x12>
 80120d8:	f000 ff36 	bl	8012f48 <_sbrk_r>
 80120dc:	6030      	str	r0, [r6, #0]
 80120de:	4621      	mov	r1, r4
 80120e0:	4628      	mov	r0, r5
 80120e2:	f000 ff31 	bl	8012f48 <_sbrk_r>
 80120e6:	1c43      	adds	r3, r0, #1
 80120e8:	d103      	bne.n	80120f2 <sbrk_aligned+0x26>
 80120ea:	f04f 34ff 	mov.w	r4, #4294967295
 80120ee:	4620      	mov	r0, r4
 80120f0:	bd70      	pop	{r4, r5, r6, pc}
 80120f2:	1cc4      	adds	r4, r0, #3
 80120f4:	f024 0403 	bic.w	r4, r4, #3
 80120f8:	42a0      	cmp	r0, r4
 80120fa:	d0f8      	beq.n	80120ee <sbrk_aligned+0x22>
 80120fc:	1a21      	subs	r1, r4, r0
 80120fe:	4628      	mov	r0, r5
 8012100:	f000 ff22 	bl	8012f48 <_sbrk_r>
 8012104:	3001      	adds	r0, #1
 8012106:	d1f2      	bne.n	80120ee <sbrk_aligned+0x22>
 8012108:	e7ef      	b.n	80120ea <sbrk_aligned+0x1e>
 801210a:	bf00      	nop
 801210c:	24003328 	.word	0x24003328

08012110 <_malloc_r>:
 8012110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012114:	1ccd      	adds	r5, r1, #3
 8012116:	f025 0503 	bic.w	r5, r5, #3
 801211a:	3508      	adds	r5, #8
 801211c:	2d0c      	cmp	r5, #12
 801211e:	bf38      	it	cc
 8012120:	250c      	movcc	r5, #12
 8012122:	2d00      	cmp	r5, #0
 8012124:	4606      	mov	r6, r0
 8012126:	db01      	blt.n	801212c <_malloc_r+0x1c>
 8012128:	42a9      	cmp	r1, r5
 801212a:	d904      	bls.n	8012136 <_malloc_r+0x26>
 801212c:	230c      	movs	r3, #12
 801212e:	6033      	str	r3, [r6, #0]
 8012130:	2000      	movs	r0, #0
 8012132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801220c <_malloc_r+0xfc>
 801213a:	f000 f869 	bl	8012210 <__malloc_lock>
 801213e:	f8d8 3000 	ldr.w	r3, [r8]
 8012142:	461c      	mov	r4, r3
 8012144:	bb44      	cbnz	r4, 8012198 <_malloc_r+0x88>
 8012146:	4629      	mov	r1, r5
 8012148:	4630      	mov	r0, r6
 801214a:	f7ff ffbf 	bl	80120cc <sbrk_aligned>
 801214e:	1c43      	adds	r3, r0, #1
 8012150:	4604      	mov	r4, r0
 8012152:	d158      	bne.n	8012206 <_malloc_r+0xf6>
 8012154:	f8d8 4000 	ldr.w	r4, [r8]
 8012158:	4627      	mov	r7, r4
 801215a:	2f00      	cmp	r7, #0
 801215c:	d143      	bne.n	80121e6 <_malloc_r+0xd6>
 801215e:	2c00      	cmp	r4, #0
 8012160:	d04b      	beq.n	80121fa <_malloc_r+0xea>
 8012162:	6823      	ldr	r3, [r4, #0]
 8012164:	4639      	mov	r1, r7
 8012166:	4630      	mov	r0, r6
 8012168:	eb04 0903 	add.w	r9, r4, r3
 801216c:	f000 feec 	bl	8012f48 <_sbrk_r>
 8012170:	4581      	cmp	r9, r0
 8012172:	d142      	bne.n	80121fa <_malloc_r+0xea>
 8012174:	6821      	ldr	r1, [r4, #0]
 8012176:	1a6d      	subs	r5, r5, r1
 8012178:	4629      	mov	r1, r5
 801217a:	4630      	mov	r0, r6
 801217c:	f7ff ffa6 	bl	80120cc <sbrk_aligned>
 8012180:	3001      	adds	r0, #1
 8012182:	d03a      	beq.n	80121fa <_malloc_r+0xea>
 8012184:	6823      	ldr	r3, [r4, #0]
 8012186:	442b      	add	r3, r5
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	f8d8 3000 	ldr.w	r3, [r8]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	bb62      	cbnz	r2, 80121ec <_malloc_r+0xdc>
 8012192:	f8c8 7000 	str.w	r7, [r8]
 8012196:	e00f      	b.n	80121b8 <_malloc_r+0xa8>
 8012198:	6822      	ldr	r2, [r4, #0]
 801219a:	1b52      	subs	r2, r2, r5
 801219c:	d420      	bmi.n	80121e0 <_malloc_r+0xd0>
 801219e:	2a0b      	cmp	r2, #11
 80121a0:	d917      	bls.n	80121d2 <_malloc_r+0xc2>
 80121a2:	1961      	adds	r1, r4, r5
 80121a4:	42a3      	cmp	r3, r4
 80121a6:	6025      	str	r5, [r4, #0]
 80121a8:	bf18      	it	ne
 80121aa:	6059      	strne	r1, [r3, #4]
 80121ac:	6863      	ldr	r3, [r4, #4]
 80121ae:	bf08      	it	eq
 80121b0:	f8c8 1000 	streq.w	r1, [r8]
 80121b4:	5162      	str	r2, [r4, r5]
 80121b6:	604b      	str	r3, [r1, #4]
 80121b8:	4630      	mov	r0, r6
 80121ba:	f000 f82f 	bl	801221c <__malloc_unlock>
 80121be:	f104 000b 	add.w	r0, r4, #11
 80121c2:	1d23      	adds	r3, r4, #4
 80121c4:	f020 0007 	bic.w	r0, r0, #7
 80121c8:	1ac2      	subs	r2, r0, r3
 80121ca:	bf1c      	itt	ne
 80121cc:	1a1b      	subne	r3, r3, r0
 80121ce:	50a3      	strne	r3, [r4, r2]
 80121d0:	e7af      	b.n	8012132 <_malloc_r+0x22>
 80121d2:	6862      	ldr	r2, [r4, #4]
 80121d4:	42a3      	cmp	r3, r4
 80121d6:	bf0c      	ite	eq
 80121d8:	f8c8 2000 	streq.w	r2, [r8]
 80121dc:	605a      	strne	r2, [r3, #4]
 80121de:	e7eb      	b.n	80121b8 <_malloc_r+0xa8>
 80121e0:	4623      	mov	r3, r4
 80121e2:	6864      	ldr	r4, [r4, #4]
 80121e4:	e7ae      	b.n	8012144 <_malloc_r+0x34>
 80121e6:	463c      	mov	r4, r7
 80121e8:	687f      	ldr	r7, [r7, #4]
 80121ea:	e7b6      	b.n	801215a <_malloc_r+0x4a>
 80121ec:	461a      	mov	r2, r3
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	42a3      	cmp	r3, r4
 80121f2:	d1fb      	bne.n	80121ec <_malloc_r+0xdc>
 80121f4:	2300      	movs	r3, #0
 80121f6:	6053      	str	r3, [r2, #4]
 80121f8:	e7de      	b.n	80121b8 <_malloc_r+0xa8>
 80121fa:	230c      	movs	r3, #12
 80121fc:	6033      	str	r3, [r6, #0]
 80121fe:	4630      	mov	r0, r6
 8012200:	f000 f80c 	bl	801221c <__malloc_unlock>
 8012204:	e794      	b.n	8012130 <_malloc_r+0x20>
 8012206:	6005      	str	r5, [r0, #0]
 8012208:	e7d6      	b.n	80121b8 <_malloc_r+0xa8>
 801220a:	bf00      	nop
 801220c:	2400332c 	.word	0x2400332c

08012210 <__malloc_lock>:
 8012210:	4801      	ldr	r0, [pc, #4]	@ (8012218 <__malloc_lock+0x8>)
 8012212:	f7ff bf0f 	b.w	8012034 <__retarget_lock_acquire_recursive>
 8012216:	bf00      	nop
 8012218:	24003324 	.word	0x24003324

0801221c <__malloc_unlock>:
 801221c:	4801      	ldr	r0, [pc, #4]	@ (8012224 <__malloc_unlock+0x8>)
 801221e:	f7ff bf0a 	b.w	8012036 <__retarget_lock_release_recursive>
 8012222:	bf00      	nop
 8012224:	24003324 	.word	0x24003324

08012228 <__ssputs_r>:
 8012228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801222c:	688e      	ldr	r6, [r1, #8]
 801222e:	461f      	mov	r7, r3
 8012230:	42be      	cmp	r6, r7
 8012232:	680b      	ldr	r3, [r1, #0]
 8012234:	4682      	mov	sl, r0
 8012236:	460c      	mov	r4, r1
 8012238:	4690      	mov	r8, r2
 801223a:	d82d      	bhi.n	8012298 <__ssputs_r+0x70>
 801223c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012240:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012244:	d026      	beq.n	8012294 <__ssputs_r+0x6c>
 8012246:	6965      	ldr	r5, [r4, #20]
 8012248:	6909      	ldr	r1, [r1, #16]
 801224a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801224e:	eba3 0901 	sub.w	r9, r3, r1
 8012252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012256:	1c7b      	adds	r3, r7, #1
 8012258:	444b      	add	r3, r9
 801225a:	106d      	asrs	r5, r5, #1
 801225c:	429d      	cmp	r5, r3
 801225e:	bf38      	it	cc
 8012260:	461d      	movcc	r5, r3
 8012262:	0553      	lsls	r3, r2, #21
 8012264:	d527      	bpl.n	80122b6 <__ssputs_r+0x8e>
 8012266:	4629      	mov	r1, r5
 8012268:	f7ff ff52 	bl	8012110 <_malloc_r>
 801226c:	4606      	mov	r6, r0
 801226e:	b360      	cbz	r0, 80122ca <__ssputs_r+0xa2>
 8012270:	6921      	ldr	r1, [r4, #16]
 8012272:	464a      	mov	r2, r9
 8012274:	f000 fe78 	bl	8012f68 <memcpy>
 8012278:	89a3      	ldrh	r3, [r4, #12]
 801227a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801227e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012282:	81a3      	strh	r3, [r4, #12]
 8012284:	6126      	str	r6, [r4, #16]
 8012286:	6165      	str	r5, [r4, #20]
 8012288:	444e      	add	r6, r9
 801228a:	eba5 0509 	sub.w	r5, r5, r9
 801228e:	6026      	str	r6, [r4, #0]
 8012290:	60a5      	str	r5, [r4, #8]
 8012292:	463e      	mov	r6, r7
 8012294:	42be      	cmp	r6, r7
 8012296:	d900      	bls.n	801229a <__ssputs_r+0x72>
 8012298:	463e      	mov	r6, r7
 801229a:	6820      	ldr	r0, [r4, #0]
 801229c:	4632      	mov	r2, r6
 801229e:	4641      	mov	r1, r8
 80122a0:	f000 fe37 	bl	8012f12 <memmove>
 80122a4:	68a3      	ldr	r3, [r4, #8]
 80122a6:	1b9b      	subs	r3, r3, r6
 80122a8:	60a3      	str	r3, [r4, #8]
 80122aa:	6823      	ldr	r3, [r4, #0]
 80122ac:	4433      	add	r3, r6
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	2000      	movs	r0, #0
 80122b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122b6:	462a      	mov	r2, r5
 80122b8:	f000 fe64 	bl	8012f84 <_realloc_r>
 80122bc:	4606      	mov	r6, r0
 80122be:	2800      	cmp	r0, #0
 80122c0:	d1e0      	bne.n	8012284 <__ssputs_r+0x5c>
 80122c2:	6921      	ldr	r1, [r4, #16]
 80122c4:	4650      	mov	r0, sl
 80122c6:	f7ff feb7 	bl	8012038 <_free_r>
 80122ca:	230c      	movs	r3, #12
 80122cc:	f8ca 3000 	str.w	r3, [sl]
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122d6:	81a3      	strh	r3, [r4, #12]
 80122d8:	f04f 30ff 	mov.w	r0, #4294967295
 80122dc:	e7e9      	b.n	80122b2 <__ssputs_r+0x8a>
	...

080122e0 <_svfiprintf_r>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	4698      	mov	r8, r3
 80122e6:	898b      	ldrh	r3, [r1, #12]
 80122e8:	061b      	lsls	r3, r3, #24
 80122ea:	b09d      	sub	sp, #116	@ 0x74
 80122ec:	4607      	mov	r7, r0
 80122ee:	460d      	mov	r5, r1
 80122f0:	4614      	mov	r4, r2
 80122f2:	d510      	bpl.n	8012316 <_svfiprintf_r+0x36>
 80122f4:	690b      	ldr	r3, [r1, #16]
 80122f6:	b973      	cbnz	r3, 8012316 <_svfiprintf_r+0x36>
 80122f8:	2140      	movs	r1, #64	@ 0x40
 80122fa:	f7ff ff09 	bl	8012110 <_malloc_r>
 80122fe:	6028      	str	r0, [r5, #0]
 8012300:	6128      	str	r0, [r5, #16]
 8012302:	b930      	cbnz	r0, 8012312 <_svfiprintf_r+0x32>
 8012304:	230c      	movs	r3, #12
 8012306:	603b      	str	r3, [r7, #0]
 8012308:	f04f 30ff 	mov.w	r0, #4294967295
 801230c:	b01d      	add	sp, #116	@ 0x74
 801230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012312:	2340      	movs	r3, #64	@ 0x40
 8012314:	616b      	str	r3, [r5, #20]
 8012316:	2300      	movs	r3, #0
 8012318:	9309      	str	r3, [sp, #36]	@ 0x24
 801231a:	2320      	movs	r3, #32
 801231c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012320:	f8cd 800c 	str.w	r8, [sp, #12]
 8012324:	2330      	movs	r3, #48	@ 0x30
 8012326:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80124c4 <_svfiprintf_r+0x1e4>
 801232a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801232e:	f04f 0901 	mov.w	r9, #1
 8012332:	4623      	mov	r3, r4
 8012334:	469a      	mov	sl, r3
 8012336:	f813 2b01 	ldrb.w	r2, [r3], #1
 801233a:	b10a      	cbz	r2, 8012340 <_svfiprintf_r+0x60>
 801233c:	2a25      	cmp	r2, #37	@ 0x25
 801233e:	d1f9      	bne.n	8012334 <_svfiprintf_r+0x54>
 8012340:	ebba 0b04 	subs.w	fp, sl, r4
 8012344:	d00b      	beq.n	801235e <_svfiprintf_r+0x7e>
 8012346:	465b      	mov	r3, fp
 8012348:	4622      	mov	r2, r4
 801234a:	4629      	mov	r1, r5
 801234c:	4638      	mov	r0, r7
 801234e:	f7ff ff6b 	bl	8012228 <__ssputs_r>
 8012352:	3001      	adds	r0, #1
 8012354:	f000 80a7 	beq.w	80124a6 <_svfiprintf_r+0x1c6>
 8012358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801235a:	445a      	add	r2, fp
 801235c:	9209      	str	r2, [sp, #36]	@ 0x24
 801235e:	f89a 3000 	ldrb.w	r3, [sl]
 8012362:	2b00      	cmp	r3, #0
 8012364:	f000 809f 	beq.w	80124a6 <_svfiprintf_r+0x1c6>
 8012368:	2300      	movs	r3, #0
 801236a:	f04f 32ff 	mov.w	r2, #4294967295
 801236e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012372:	f10a 0a01 	add.w	sl, sl, #1
 8012376:	9304      	str	r3, [sp, #16]
 8012378:	9307      	str	r3, [sp, #28]
 801237a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801237e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012380:	4654      	mov	r4, sl
 8012382:	2205      	movs	r2, #5
 8012384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012388:	484e      	ldr	r0, [pc, #312]	@ (80124c4 <_svfiprintf_r+0x1e4>)
 801238a:	f7ed ffb1 	bl	80002f0 <memchr>
 801238e:	9a04      	ldr	r2, [sp, #16]
 8012390:	b9d8      	cbnz	r0, 80123ca <_svfiprintf_r+0xea>
 8012392:	06d0      	lsls	r0, r2, #27
 8012394:	bf44      	itt	mi
 8012396:	2320      	movmi	r3, #32
 8012398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801239c:	0711      	lsls	r1, r2, #28
 801239e:	bf44      	itt	mi
 80123a0:	232b      	movmi	r3, #43	@ 0x2b
 80123a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123a6:	f89a 3000 	ldrb.w	r3, [sl]
 80123aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80123ac:	d015      	beq.n	80123da <_svfiprintf_r+0xfa>
 80123ae:	9a07      	ldr	r2, [sp, #28]
 80123b0:	4654      	mov	r4, sl
 80123b2:	2000      	movs	r0, #0
 80123b4:	f04f 0c0a 	mov.w	ip, #10
 80123b8:	4621      	mov	r1, r4
 80123ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123be:	3b30      	subs	r3, #48	@ 0x30
 80123c0:	2b09      	cmp	r3, #9
 80123c2:	d94b      	bls.n	801245c <_svfiprintf_r+0x17c>
 80123c4:	b1b0      	cbz	r0, 80123f4 <_svfiprintf_r+0x114>
 80123c6:	9207      	str	r2, [sp, #28]
 80123c8:	e014      	b.n	80123f4 <_svfiprintf_r+0x114>
 80123ca:	eba0 0308 	sub.w	r3, r0, r8
 80123ce:	fa09 f303 	lsl.w	r3, r9, r3
 80123d2:	4313      	orrs	r3, r2
 80123d4:	9304      	str	r3, [sp, #16]
 80123d6:	46a2      	mov	sl, r4
 80123d8:	e7d2      	b.n	8012380 <_svfiprintf_r+0xa0>
 80123da:	9b03      	ldr	r3, [sp, #12]
 80123dc:	1d19      	adds	r1, r3, #4
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	9103      	str	r1, [sp, #12]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	bfbb      	ittet	lt
 80123e6:	425b      	neglt	r3, r3
 80123e8:	f042 0202 	orrlt.w	r2, r2, #2
 80123ec:	9307      	strge	r3, [sp, #28]
 80123ee:	9307      	strlt	r3, [sp, #28]
 80123f0:	bfb8      	it	lt
 80123f2:	9204      	strlt	r2, [sp, #16]
 80123f4:	7823      	ldrb	r3, [r4, #0]
 80123f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80123f8:	d10a      	bne.n	8012410 <_svfiprintf_r+0x130>
 80123fa:	7863      	ldrb	r3, [r4, #1]
 80123fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80123fe:	d132      	bne.n	8012466 <_svfiprintf_r+0x186>
 8012400:	9b03      	ldr	r3, [sp, #12]
 8012402:	1d1a      	adds	r2, r3, #4
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	9203      	str	r2, [sp, #12]
 8012408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801240c:	3402      	adds	r4, #2
 801240e:	9305      	str	r3, [sp, #20]
 8012410:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80124d4 <_svfiprintf_r+0x1f4>
 8012414:	7821      	ldrb	r1, [r4, #0]
 8012416:	2203      	movs	r2, #3
 8012418:	4650      	mov	r0, sl
 801241a:	f7ed ff69 	bl	80002f0 <memchr>
 801241e:	b138      	cbz	r0, 8012430 <_svfiprintf_r+0x150>
 8012420:	9b04      	ldr	r3, [sp, #16]
 8012422:	eba0 000a 	sub.w	r0, r0, sl
 8012426:	2240      	movs	r2, #64	@ 0x40
 8012428:	4082      	lsls	r2, r0
 801242a:	4313      	orrs	r3, r2
 801242c:	3401      	adds	r4, #1
 801242e:	9304      	str	r3, [sp, #16]
 8012430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012434:	4824      	ldr	r0, [pc, #144]	@ (80124c8 <_svfiprintf_r+0x1e8>)
 8012436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801243a:	2206      	movs	r2, #6
 801243c:	f7ed ff58 	bl	80002f0 <memchr>
 8012440:	2800      	cmp	r0, #0
 8012442:	d036      	beq.n	80124b2 <_svfiprintf_r+0x1d2>
 8012444:	4b21      	ldr	r3, [pc, #132]	@ (80124cc <_svfiprintf_r+0x1ec>)
 8012446:	bb1b      	cbnz	r3, 8012490 <_svfiprintf_r+0x1b0>
 8012448:	9b03      	ldr	r3, [sp, #12]
 801244a:	3307      	adds	r3, #7
 801244c:	f023 0307 	bic.w	r3, r3, #7
 8012450:	3308      	adds	r3, #8
 8012452:	9303      	str	r3, [sp, #12]
 8012454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012456:	4433      	add	r3, r6
 8012458:	9309      	str	r3, [sp, #36]	@ 0x24
 801245a:	e76a      	b.n	8012332 <_svfiprintf_r+0x52>
 801245c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012460:	460c      	mov	r4, r1
 8012462:	2001      	movs	r0, #1
 8012464:	e7a8      	b.n	80123b8 <_svfiprintf_r+0xd8>
 8012466:	2300      	movs	r3, #0
 8012468:	3401      	adds	r4, #1
 801246a:	9305      	str	r3, [sp, #20]
 801246c:	4619      	mov	r1, r3
 801246e:	f04f 0c0a 	mov.w	ip, #10
 8012472:	4620      	mov	r0, r4
 8012474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012478:	3a30      	subs	r2, #48	@ 0x30
 801247a:	2a09      	cmp	r2, #9
 801247c:	d903      	bls.n	8012486 <_svfiprintf_r+0x1a6>
 801247e:	2b00      	cmp	r3, #0
 8012480:	d0c6      	beq.n	8012410 <_svfiprintf_r+0x130>
 8012482:	9105      	str	r1, [sp, #20]
 8012484:	e7c4      	b.n	8012410 <_svfiprintf_r+0x130>
 8012486:	fb0c 2101 	mla	r1, ip, r1, r2
 801248a:	4604      	mov	r4, r0
 801248c:	2301      	movs	r3, #1
 801248e:	e7f0      	b.n	8012472 <_svfiprintf_r+0x192>
 8012490:	ab03      	add	r3, sp, #12
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	462a      	mov	r2, r5
 8012496:	4b0e      	ldr	r3, [pc, #56]	@ (80124d0 <_svfiprintf_r+0x1f0>)
 8012498:	a904      	add	r1, sp, #16
 801249a:	4638      	mov	r0, r7
 801249c:	f3af 8000 	nop.w
 80124a0:	1c42      	adds	r2, r0, #1
 80124a2:	4606      	mov	r6, r0
 80124a4:	d1d6      	bne.n	8012454 <_svfiprintf_r+0x174>
 80124a6:	89ab      	ldrh	r3, [r5, #12]
 80124a8:	065b      	lsls	r3, r3, #25
 80124aa:	f53f af2d 	bmi.w	8012308 <_svfiprintf_r+0x28>
 80124ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124b0:	e72c      	b.n	801230c <_svfiprintf_r+0x2c>
 80124b2:	ab03      	add	r3, sp, #12
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	462a      	mov	r2, r5
 80124b8:	4b05      	ldr	r3, [pc, #20]	@ (80124d0 <_svfiprintf_r+0x1f0>)
 80124ba:	a904      	add	r1, sp, #16
 80124bc:	4638      	mov	r0, r7
 80124be:	f000 fa49 	bl	8012954 <_printf_i>
 80124c2:	e7ed      	b.n	80124a0 <_svfiprintf_r+0x1c0>
 80124c4:	080134d5 	.word	0x080134d5
 80124c8:	080134df 	.word	0x080134df
 80124cc:	00000000 	.word	0x00000000
 80124d0:	08012229 	.word	0x08012229
 80124d4:	080134db 	.word	0x080134db

080124d8 <_sungetc_r>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	1c4b      	adds	r3, r1, #1
 80124dc:	4614      	mov	r4, r2
 80124de:	d103      	bne.n	80124e8 <_sungetc_r+0x10>
 80124e0:	f04f 35ff 	mov.w	r5, #4294967295
 80124e4:	4628      	mov	r0, r5
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	8993      	ldrh	r3, [r2, #12]
 80124ea:	f023 0320 	bic.w	r3, r3, #32
 80124ee:	8193      	strh	r3, [r2, #12]
 80124f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124f2:	6852      	ldr	r2, [r2, #4]
 80124f4:	b2cd      	uxtb	r5, r1
 80124f6:	b18b      	cbz	r3, 801251c <_sungetc_r+0x44>
 80124f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80124fa:	4293      	cmp	r3, r2
 80124fc:	dd08      	ble.n	8012510 <_sungetc_r+0x38>
 80124fe:	6823      	ldr	r3, [r4, #0]
 8012500:	1e5a      	subs	r2, r3, #1
 8012502:	6022      	str	r2, [r4, #0]
 8012504:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012508:	6863      	ldr	r3, [r4, #4]
 801250a:	3301      	adds	r3, #1
 801250c:	6063      	str	r3, [r4, #4]
 801250e:	e7e9      	b.n	80124e4 <_sungetc_r+0xc>
 8012510:	4621      	mov	r1, r4
 8012512:	f000 fcc4 	bl	8012e9e <__submore>
 8012516:	2800      	cmp	r0, #0
 8012518:	d0f1      	beq.n	80124fe <_sungetc_r+0x26>
 801251a:	e7e1      	b.n	80124e0 <_sungetc_r+0x8>
 801251c:	6921      	ldr	r1, [r4, #16]
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	b151      	cbz	r1, 8012538 <_sungetc_r+0x60>
 8012522:	4299      	cmp	r1, r3
 8012524:	d208      	bcs.n	8012538 <_sungetc_r+0x60>
 8012526:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801252a:	42a9      	cmp	r1, r5
 801252c:	d104      	bne.n	8012538 <_sungetc_r+0x60>
 801252e:	3b01      	subs	r3, #1
 8012530:	3201      	adds	r2, #1
 8012532:	6023      	str	r3, [r4, #0]
 8012534:	6062      	str	r2, [r4, #4]
 8012536:	e7d5      	b.n	80124e4 <_sungetc_r+0xc>
 8012538:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801253c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012540:	6363      	str	r3, [r4, #52]	@ 0x34
 8012542:	2303      	movs	r3, #3
 8012544:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012546:	4623      	mov	r3, r4
 8012548:	f803 5f46 	strb.w	r5, [r3, #70]!
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	2301      	movs	r3, #1
 8012550:	e7dc      	b.n	801250c <_sungetc_r+0x34>

08012552 <__ssrefill_r>:
 8012552:	b510      	push	{r4, lr}
 8012554:	460c      	mov	r4, r1
 8012556:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012558:	b169      	cbz	r1, 8012576 <__ssrefill_r+0x24>
 801255a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801255e:	4299      	cmp	r1, r3
 8012560:	d001      	beq.n	8012566 <__ssrefill_r+0x14>
 8012562:	f7ff fd69 	bl	8012038 <_free_r>
 8012566:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012568:	6063      	str	r3, [r4, #4]
 801256a:	2000      	movs	r0, #0
 801256c:	6360      	str	r0, [r4, #52]	@ 0x34
 801256e:	b113      	cbz	r3, 8012576 <__ssrefill_r+0x24>
 8012570:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012572:	6023      	str	r3, [r4, #0]
 8012574:	bd10      	pop	{r4, pc}
 8012576:	6923      	ldr	r3, [r4, #16]
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	2300      	movs	r3, #0
 801257c:	6063      	str	r3, [r4, #4]
 801257e:	89a3      	ldrh	r3, [r4, #12]
 8012580:	f043 0320 	orr.w	r3, r3, #32
 8012584:	81a3      	strh	r3, [r4, #12]
 8012586:	f04f 30ff 	mov.w	r0, #4294967295
 801258a:	e7f3      	b.n	8012574 <__ssrefill_r+0x22>

0801258c <__ssvfiscanf_r>:
 801258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012590:	460c      	mov	r4, r1
 8012592:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012596:	2100      	movs	r1, #0
 8012598:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801259c:	49a6      	ldr	r1, [pc, #664]	@ (8012838 <__ssvfiscanf_r+0x2ac>)
 801259e:	91a0      	str	r1, [sp, #640]	@ 0x280
 80125a0:	f10d 0804 	add.w	r8, sp, #4
 80125a4:	49a5      	ldr	r1, [pc, #660]	@ (801283c <__ssvfiscanf_r+0x2b0>)
 80125a6:	4fa6      	ldr	r7, [pc, #664]	@ (8012840 <__ssvfiscanf_r+0x2b4>)
 80125a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80125ac:	4606      	mov	r6, r0
 80125ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	f892 9000 	ldrb.w	r9, [r2]
 80125b6:	f1b9 0f00 	cmp.w	r9, #0
 80125ba:	f000 8158 	beq.w	801286e <__ssvfiscanf_r+0x2e2>
 80125be:	f817 3009 	ldrb.w	r3, [r7, r9]
 80125c2:	f013 0308 	ands.w	r3, r3, #8
 80125c6:	f102 0501 	add.w	r5, r2, #1
 80125ca:	d019      	beq.n	8012600 <__ssvfiscanf_r+0x74>
 80125cc:	6863      	ldr	r3, [r4, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	dd0f      	ble.n	80125f2 <__ssvfiscanf_r+0x66>
 80125d2:	6823      	ldr	r3, [r4, #0]
 80125d4:	781a      	ldrb	r2, [r3, #0]
 80125d6:	5cba      	ldrb	r2, [r7, r2]
 80125d8:	0712      	lsls	r2, r2, #28
 80125da:	d401      	bmi.n	80125e0 <__ssvfiscanf_r+0x54>
 80125dc:	462a      	mov	r2, r5
 80125de:	e7e8      	b.n	80125b2 <__ssvfiscanf_r+0x26>
 80125e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80125e2:	3201      	adds	r2, #1
 80125e4:	9245      	str	r2, [sp, #276]	@ 0x114
 80125e6:	6862      	ldr	r2, [r4, #4]
 80125e8:	3301      	adds	r3, #1
 80125ea:	3a01      	subs	r2, #1
 80125ec:	6062      	str	r2, [r4, #4]
 80125ee:	6023      	str	r3, [r4, #0]
 80125f0:	e7ec      	b.n	80125cc <__ssvfiscanf_r+0x40>
 80125f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80125f4:	4621      	mov	r1, r4
 80125f6:	4630      	mov	r0, r6
 80125f8:	4798      	blx	r3
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d0e9      	beq.n	80125d2 <__ssvfiscanf_r+0x46>
 80125fe:	e7ed      	b.n	80125dc <__ssvfiscanf_r+0x50>
 8012600:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8012604:	f040 8085 	bne.w	8012712 <__ssvfiscanf_r+0x186>
 8012608:	9341      	str	r3, [sp, #260]	@ 0x104
 801260a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801260c:	7853      	ldrb	r3, [r2, #1]
 801260e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012610:	bf02      	ittt	eq
 8012612:	2310      	moveq	r3, #16
 8012614:	1c95      	addeq	r5, r2, #2
 8012616:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012618:	220a      	movs	r2, #10
 801261a:	46aa      	mov	sl, r5
 801261c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012620:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012624:	2b09      	cmp	r3, #9
 8012626:	d91e      	bls.n	8012666 <__ssvfiscanf_r+0xda>
 8012628:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012844 <__ssvfiscanf_r+0x2b8>
 801262c:	2203      	movs	r2, #3
 801262e:	4658      	mov	r0, fp
 8012630:	f7ed fe5e 	bl	80002f0 <memchr>
 8012634:	b138      	cbz	r0, 8012646 <__ssvfiscanf_r+0xba>
 8012636:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012638:	eba0 000b 	sub.w	r0, r0, fp
 801263c:	2301      	movs	r3, #1
 801263e:	4083      	lsls	r3, r0
 8012640:	4313      	orrs	r3, r2
 8012642:	9341      	str	r3, [sp, #260]	@ 0x104
 8012644:	4655      	mov	r5, sl
 8012646:	f815 3b01 	ldrb.w	r3, [r5], #1
 801264a:	2b78      	cmp	r3, #120	@ 0x78
 801264c:	d806      	bhi.n	801265c <__ssvfiscanf_r+0xd0>
 801264e:	2b57      	cmp	r3, #87	@ 0x57
 8012650:	d810      	bhi.n	8012674 <__ssvfiscanf_r+0xe8>
 8012652:	2b25      	cmp	r3, #37	@ 0x25
 8012654:	d05d      	beq.n	8012712 <__ssvfiscanf_r+0x186>
 8012656:	d857      	bhi.n	8012708 <__ssvfiscanf_r+0x17c>
 8012658:	2b00      	cmp	r3, #0
 801265a:	d075      	beq.n	8012748 <__ssvfiscanf_r+0x1bc>
 801265c:	2303      	movs	r3, #3
 801265e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012660:	230a      	movs	r3, #10
 8012662:	9342      	str	r3, [sp, #264]	@ 0x108
 8012664:	e088      	b.n	8012778 <__ssvfiscanf_r+0x1ec>
 8012666:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012668:	fb02 1103 	mla	r1, r2, r3, r1
 801266c:	3930      	subs	r1, #48	@ 0x30
 801266e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012670:	4655      	mov	r5, sl
 8012672:	e7d2      	b.n	801261a <__ssvfiscanf_r+0x8e>
 8012674:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012678:	2a20      	cmp	r2, #32
 801267a:	d8ef      	bhi.n	801265c <__ssvfiscanf_r+0xd0>
 801267c:	a101      	add	r1, pc, #4	@ (adr r1, 8012684 <__ssvfiscanf_r+0xf8>)
 801267e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012682:	bf00      	nop
 8012684:	08012757 	.word	0x08012757
 8012688:	0801265d 	.word	0x0801265d
 801268c:	0801265d 	.word	0x0801265d
 8012690:	080127b1 	.word	0x080127b1
 8012694:	0801265d 	.word	0x0801265d
 8012698:	0801265d 	.word	0x0801265d
 801269c:	0801265d 	.word	0x0801265d
 80126a0:	0801265d 	.word	0x0801265d
 80126a4:	0801265d 	.word	0x0801265d
 80126a8:	0801265d 	.word	0x0801265d
 80126ac:	0801265d 	.word	0x0801265d
 80126b0:	080127c7 	.word	0x080127c7
 80126b4:	080127ad 	.word	0x080127ad
 80126b8:	0801270f 	.word	0x0801270f
 80126bc:	0801270f 	.word	0x0801270f
 80126c0:	0801270f 	.word	0x0801270f
 80126c4:	0801265d 	.word	0x0801265d
 80126c8:	08012769 	.word	0x08012769
 80126cc:	0801265d 	.word	0x0801265d
 80126d0:	0801265d 	.word	0x0801265d
 80126d4:	0801265d 	.word	0x0801265d
 80126d8:	0801265d 	.word	0x0801265d
 80126dc:	080127d7 	.word	0x080127d7
 80126e0:	08012771 	.word	0x08012771
 80126e4:	0801274f 	.word	0x0801274f
 80126e8:	0801265d 	.word	0x0801265d
 80126ec:	0801265d 	.word	0x0801265d
 80126f0:	080127d3 	.word	0x080127d3
 80126f4:	0801265d 	.word	0x0801265d
 80126f8:	080127ad 	.word	0x080127ad
 80126fc:	0801265d 	.word	0x0801265d
 8012700:	0801265d 	.word	0x0801265d
 8012704:	08012757 	.word	0x08012757
 8012708:	3b45      	subs	r3, #69	@ 0x45
 801270a:	2b02      	cmp	r3, #2
 801270c:	d8a6      	bhi.n	801265c <__ssvfiscanf_r+0xd0>
 801270e:	2305      	movs	r3, #5
 8012710:	e031      	b.n	8012776 <__ssvfiscanf_r+0x1ea>
 8012712:	6863      	ldr	r3, [r4, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	dd0d      	ble.n	8012734 <__ssvfiscanf_r+0x1a8>
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	781a      	ldrb	r2, [r3, #0]
 801271c:	454a      	cmp	r2, r9
 801271e:	f040 80a6 	bne.w	801286e <__ssvfiscanf_r+0x2e2>
 8012722:	3301      	adds	r3, #1
 8012724:	6862      	ldr	r2, [r4, #4]
 8012726:	6023      	str	r3, [r4, #0]
 8012728:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801272a:	3a01      	subs	r2, #1
 801272c:	3301      	adds	r3, #1
 801272e:	6062      	str	r2, [r4, #4]
 8012730:	9345      	str	r3, [sp, #276]	@ 0x114
 8012732:	e753      	b.n	80125dc <__ssvfiscanf_r+0x50>
 8012734:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012736:	4621      	mov	r1, r4
 8012738:	4630      	mov	r0, r6
 801273a:	4798      	blx	r3
 801273c:	2800      	cmp	r0, #0
 801273e:	d0eb      	beq.n	8012718 <__ssvfiscanf_r+0x18c>
 8012740:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012742:	2800      	cmp	r0, #0
 8012744:	f040 808b 	bne.w	801285e <__ssvfiscanf_r+0x2d2>
 8012748:	f04f 30ff 	mov.w	r0, #4294967295
 801274c:	e08b      	b.n	8012866 <__ssvfiscanf_r+0x2da>
 801274e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012750:	f042 0220 	orr.w	r2, r2, #32
 8012754:	9241      	str	r2, [sp, #260]	@ 0x104
 8012756:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801275c:	9241      	str	r2, [sp, #260]	@ 0x104
 801275e:	2210      	movs	r2, #16
 8012760:	2b6e      	cmp	r3, #110	@ 0x6e
 8012762:	9242      	str	r2, [sp, #264]	@ 0x108
 8012764:	d902      	bls.n	801276c <__ssvfiscanf_r+0x1e0>
 8012766:	e005      	b.n	8012774 <__ssvfiscanf_r+0x1e8>
 8012768:	2300      	movs	r3, #0
 801276a:	9342      	str	r3, [sp, #264]	@ 0x108
 801276c:	2303      	movs	r3, #3
 801276e:	e002      	b.n	8012776 <__ssvfiscanf_r+0x1ea>
 8012770:	2308      	movs	r3, #8
 8012772:	9342      	str	r3, [sp, #264]	@ 0x108
 8012774:	2304      	movs	r3, #4
 8012776:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012778:	6863      	ldr	r3, [r4, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	dd39      	ble.n	80127f2 <__ssvfiscanf_r+0x266>
 801277e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012780:	0659      	lsls	r1, r3, #25
 8012782:	d404      	bmi.n	801278e <__ssvfiscanf_r+0x202>
 8012784:	6823      	ldr	r3, [r4, #0]
 8012786:	781a      	ldrb	r2, [r3, #0]
 8012788:	5cba      	ldrb	r2, [r7, r2]
 801278a:	0712      	lsls	r2, r2, #28
 801278c:	d438      	bmi.n	8012800 <__ssvfiscanf_r+0x274>
 801278e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012790:	2b02      	cmp	r3, #2
 8012792:	dc47      	bgt.n	8012824 <__ssvfiscanf_r+0x298>
 8012794:	466b      	mov	r3, sp
 8012796:	4622      	mov	r2, r4
 8012798:	a941      	add	r1, sp, #260	@ 0x104
 801279a:	4630      	mov	r0, r6
 801279c:	f000 f9f8 	bl	8012b90 <_scanf_chars>
 80127a0:	2801      	cmp	r0, #1
 80127a2:	d064      	beq.n	801286e <__ssvfiscanf_r+0x2e2>
 80127a4:	2802      	cmp	r0, #2
 80127a6:	f47f af19 	bne.w	80125dc <__ssvfiscanf_r+0x50>
 80127aa:	e7c9      	b.n	8012740 <__ssvfiscanf_r+0x1b4>
 80127ac:	220a      	movs	r2, #10
 80127ae:	e7d7      	b.n	8012760 <__ssvfiscanf_r+0x1d4>
 80127b0:	4629      	mov	r1, r5
 80127b2:	4640      	mov	r0, r8
 80127b4:	f000 fb3a 	bl	8012e2c <__sccl>
 80127b8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80127ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127be:	9341      	str	r3, [sp, #260]	@ 0x104
 80127c0:	4605      	mov	r5, r0
 80127c2:	2301      	movs	r3, #1
 80127c4:	e7d7      	b.n	8012776 <__ssvfiscanf_r+0x1ea>
 80127c6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80127c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127cc:	9341      	str	r3, [sp, #260]	@ 0x104
 80127ce:	2300      	movs	r3, #0
 80127d0:	e7d1      	b.n	8012776 <__ssvfiscanf_r+0x1ea>
 80127d2:	2302      	movs	r3, #2
 80127d4:	e7cf      	b.n	8012776 <__ssvfiscanf_r+0x1ea>
 80127d6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80127d8:	06c3      	lsls	r3, r0, #27
 80127da:	f53f aeff 	bmi.w	80125dc <__ssvfiscanf_r+0x50>
 80127de:	9b00      	ldr	r3, [sp, #0]
 80127e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80127e2:	1d19      	adds	r1, r3, #4
 80127e4:	9100      	str	r1, [sp, #0]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	07c0      	lsls	r0, r0, #31
 80127ea:	bf4c      	ite	mi
 80127ec:	801a      	strhmi	r2, [r3, #0]
 80127ee:	601a      	strpl	r2, [r3, #0]
 80127f0:	e6f4      	b.n	80125dc <__ssvfiscanf_r+0x50>
 80127f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80127f4:	4621      	mov	r1, r4
 80127f6:	4630      	mov	r0, r6
 80127f8:	4798      	blx	r3
 80127fa:	2800      	cmp	r0, #0
 80127fc:	d0bf      	beq.n	801277e <__ssvfiscanf_r+0x1f2>
 80127fe:	e79f      	b.n	8012740 <__ssvfiscanf_r+0x1b4>
 8012800:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012802:	3201      	adds	r2, #1
 8012804:	9245      	str	r2, [sp, #276]	@ 0x114
 8012806:	6862      	ldr	r2, [r4, #4]
 8012808:	3a01      	subs	r2, #1
 801280a:	2a00      	cmp	r2, #0
 801280c:	6062      	str	r2, [r4, #4]
 801280e:	dd02      	ble.n	8012816 <__ssvfiscanf_r+0x28a>
 8012810:	3301      	adds	r3, #1
 8012812:	6023      	str	r3, [r4, #0]
 8012814:	e7b6      	b.n	8012784 <__ssvfiscanf_r+0x1f8>
 8012816:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012818:	4621      	mov	r1, r4
 801281a:	4630      	mov	r0, r6
 801281c:	4798      	blx	r3
 801281e:	2800      	cmp	r0, #0
 8012820:	d0b0      	beq.n	8012784 <__ssvfiscanf_r+0x1f8>
 8012822:	e78d      	b.n	8012740 <__ssvfiscanf_r+0x1b4>
 8012824:	2b04      	cmp	r3, #4
 8012826:	dc0f      	bgt.n	8012848 <__ssvfiscanf_r+0x2bc>
 8012828:	466b      	mov	r3, sp
 801282a:	4622      	mov	r2, r4
 801282c:	a941      	add	r1, sp, #260	@ 0x104
 801282e:	4630      	mov	r0, r6
 8012830:	f000 fa08 	bl	8012c44 <_scanf_i>
 8012834:	e7b4      	b.n	80127a0 <__ssvfiscanf_r+0x214>
 8012836:	bf00      	nop
 8012838:	080124d9 	.word	0x080124d9
 801283c:	08012553 	.word	0x08012553
 8012840:	080133d5 	.word	0x080133d5
 8012844:	080134db 	.word	0x080134db
 8012848:	4b0a      	ldr	r3, [pc, #40]	@ (8012874 <__ssvfiscanf_r+0x2e8>)
 801284a:	2b00      	cmp	r3, #0
 801284c:	f43f aec6 	beq.w	80125dc <__ssvfiscanf_r+0x50>
 8012850:	466b      	mov	r3, sp
 8012852:	4622      	mov	r2, r4
 8012854:	a941      	add	r1, sp, #260	@ 0x104
 8012856:	4630      	mov	r0, r6
 8012858:	f3af 8000 	nop.w
 801285c:	e7a0      	b.n	80127a0 <__ssvfiscanf_r+0x214>
 801285e:	89a3      	ldrh	r3, [r4, #12]
 8012860:	065b      	lsls	r3, r3, #25
 8012862:	f53f af71 	bmi.w	8012748 <__ssvfiscanf_r+0x1bc>
 8012866:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012870:	e7f9      	b.n	8012866 <__ssvfiscanf_r+0x2da>
 8012872:	bf00      	nop
 8012874:	00000000 	.word	0x00000000

08012878 <_printf_common>:
 8012878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801287c:	4616      	mov	r6, r2
 801287e:	4698      	mov	r8, r3
 8012880:	688a      	ldr	r2, [r1, #8]
 8012882:	690b      	ldr	r3, [r1, #16]
 8012884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012888:	4293      	cmp	r3, r2
 801288a:	bfb8      	it	lt
 801288c:	4613      	movlt	r3, r2
 801288e:	6033      	str	r3, [r6, #0]
 8012890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012894:	4607      	mov	r7, r0
 8012896:	460c      	mov	r4, r1
 8012898:	b10a      	cbz	r2, 801289e <_printf_common+0x26>
 801289a:	3301      	adds	r3, #1
 801289c:	6033      	str	r3, [r6, #0]
 801289e:	6823      	ldr	r3, [r4, #0]
 80128a0:	0699      	lsls	r1, r3, #26
 80128a2:	bf42      	ittt	mi
 80128a4:	6833      	ldrmi	r3, [r6, #0]
 80128a6:	3302      	addmi	r3, #2
 80128a8:	6033      	strmi	r3, [r6, #0]
 80128aa:	6825      	ldr	r5, [r4, #0]
 80128ac:	f015 0506 	ands.w	r5, r5, #6
 80128b0:	d106      	bne.n	80128c0 <_printf_common+0x48>
 80128b2:	f104 0a19 	add.w	sl, r4, #25
 80128b6:	68e3      	ldr	r3, [r4, #12]
 80128b8:	6832      	ldr	r2, [r6, #0]
 80128ba:	1a9b      	subs	r3, r3, r2
 80128bc:	42ab      	cmp	r3, r5
 80128be:	dc26      	bgt.n	801290e <_printf_common+0x96>
 80128c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80128c4:	6822      	ldr	r2, [r4, #0]
 80128c6:	3b00      	subs	r3, #0
 80128c8:	bf18      	it	ne
 80128ca:	2301      	movne	r3, #1
 80128cc:	0692      	lsls	r2, r2, #26
 80128ce:	d42b      	bmi.n	8012928 <_printf_common+0xb0>
 80128d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80128d4:	4641      	mov	r1, r8
 80128d6:	4638      	mov	r0, r7
 80128d8:	47c8      	blx	r9
 80128da:	3001      	adds	r0, #1
 80128dc:	d01e      	beq.n	801291c <_printf_common+0xa4>
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	6922      	ldr	r2, [r4, #16]
 80128e2:	f003 0306 	and.w	r3, r3, #6
 80128e6:	2b04      	cmp	r3, #4
 80128e8:	bf02      	ittt	eq
 80128ea:	68e5      	ldreq	r5, [r4, #12]
 80128ec:	6833      	ldreq	r3, [r6, #0]
 80128ee:	1aed      	subeq	r5, r5, r3
 80128f0:	68a3      	ldr	r3, [r4, #8]
 80128f2:	bf0c      	ite	eq
 80128f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128f8:	2500      	movne	r5, #0
 80128fa:	4293      	cmp	r3, r2
 80128fc:	bfc4      	itt	gt
 80128fe:	1a9b      	subgt	r3, r3, r2
 8012900:	18ed      	addgt	r5, r5, r3
 8012902:	2600      	movs	r6, #0
 8012904:	341a      	adds	r4, #26
 8012906:	42b5      	cmp	r5, r6
 8012908:	d11a      	bne.n	8012940 <_printf_common+0xc8>
 801290a:	2000      	movs	r0, #0
 801290c:	e008      	b.n	8012920 <_printf_common+0xa8>
 801290e:	2301      	movs	r3, #1
 8012910:	4652      	mov	r2, sl
 8012912:	4641      	mov	r1, r8
 8012914:	4638      	mov	r0, r7
 8012916:	47c8      	blx	r9
 8012918:	3001      	adds	r0, #1
 801291a:	d103      	bne.n	8012924 <_printf_common+0xac>
 801291c:	f04f 30ff 	mov.w	r0, #4294967295
 8012920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012924:	3501      	adds	r5, #1
 8012926:	e7c6      	b.n	80128b6 <_printf_common+0x3e>
 8012928:	18e1      	adds	r1, r4, r3
 801292a:	1c5a      	adds	r2, r3, #1
 801292c:	2030      	movs	r0, #48	@ 0x30
 801292e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012932:	4422      	add	r2, r4
 8012934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801293c:	3302      	adds	r3, #2
 801293e:	e7c7      	b.n	80128d0 <_printf_common+0x58>
 8012940:	2301      	movs	r3, #1
 8012942:	4622      	mov	r2, r4
 8012944:	4641      	mov	r1, r8
 8012946:	4638      	mov	r0, r7
 8012948:	47c8      	blx	r9
 801294a:	3001      	adds	r0, #1
 801294c:	d0e6      	beq.n	801291c <_printf_common+0xa4>
 801294e:	3601      	adds	r6, #1
 8012950:	e7d9      	b.n	8012906 <_printf_common+0x8e>
	...

08012954 <_printf_i>:
 8012954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012958:	7e0f      	ldrb	r7, [r1, #24]
 801295a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801295c:	2f78      	cmp	r7, #120	@ 0x78
 801295e:	4691      	mov	r9, r2
 8012960:	4680      	mov	r8, r0
 8012962:	460c      	mov	r4, r1
 8012964:	469a      	mov	sl, r3
 8012966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801296a:	d807      	bhi.n	801297c <_printf_i+0x28>
 801296c:	2f62      	cmp	r7, #98	@ 0x62
 801296e:	d80a      	bhi.n	8012986 <_printf_i+0x32>
 8012970:	2f00      	cmp	r7, #0
 8012972:	f000 80d1 	beq.w	8012b18 <_printf_i+0x1c4>
 8012976:	2f58      	cmp	r7, #88	@ 0x58
 8012978:	f000 80b8 	beq.w	8012aec <_printf_i+0x198>
 801297c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012984:	e03a      	b.n	80129fc <_printf_i+0xa8>
 8012986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801298a:	2b15      	cmp	r3, #21
 801298c:	d8f6      	bhi.n	801297c <_printf_i+0x28>
 801298e:	a101      	add	r1, pc, #4	@ (adr r1, 8012994 <_printf_i+0x40>)
 8012990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012994:	080129ed 	.word	0x080129ed
 8012998:	08012a01 	.word	0x08012a01
 801299c:	0801297d 	.word	0x0801297d
 80129a0:	0801297d 	.word	0x0801297d
 80129a4:	0801297d 	.word	0x0801297d
 80129a8:	0801297d 	.word	0x0801297d
 80129ac:	08012a01 	.word	0x08012a01
 80129b0:	0801297d 	.word	0x0801297d
 80129b4:	0801297d 	.word	0x0801297d
 80129b8:	0801297d 	.word	0x0801297d
 80129bc:	0801297d 	.word	0x0801297d
 80129c0:	08012aff 	.word	0x08012aff
 80129c4:	08012a2b 	.word	0x08012a2b
 80129c8:	08012ab9 	.word	0x08012ab9
 80129cc:	0801297d 	.word	0x0801297d
 80129d0:	0801297d 	.word	0x0801297d
 80129d4:	08012b21 	.word	0x08012b21
 80129d8:	0801297d 	.word	0x0801297d
 80129dc:	08012a2b 	.word	0x08012a2b
 80129e0:	0801297d 	.word	0x0801297d
 80129e4:	0801297d 	.word	0x0801297d
 80129e8:	08012ac1 	.word	0x08012ac1
 80129ec:	6833      	ldr	r3, [r6, #0]
 80129ee:	1d1a      	adds	r2, r3, #4
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6032      	str	r2, [r6, #0]
 80129f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80129f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80129fc:	2301      	movs	r3, #1
 80129fe:	e09c      	b.n	8012b3a <_printf_i+0x1e6>
 8012a00:	6833      	ldr	r3, [r6, #0]
 8012a02:	6820      	ldr	r0, [r4, #0]
 8012a04:	1d19      	adds	r1, r3, #4
 8012a06:	6031      	str	r1, [r6, #0]
 8012a08:	0606      	lsls	r6, r0, #24
 8012a0a:	d501      	bpl.n	8012a10 <_printf_i+0xbc>
 8012a0c:	681d      	ldr	r5, [r3, #0]
 8012a0e:	e003      	b.n	8012a18 <_printf_i+0xc4>
 8012a10:	0645      	lsls	r5, r0, #25
 8012a12:	d5fb      	bpl.n	8012a0c <_printf_i+0xb8>
 8012a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012a18:	2d00      	cmp	r5, #0
 8012a1a:	da03      	bge.n	8012a24 <_printf_i+0xd0>
 8012a1c:	232d      	movs	r3, #45	@ 0x2d
 8012a1e:	426d      	negs	r5, r5
 8012a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a24:	4858      	ldr	r0, [pc, #352]	@ (8012b88 <_printf_i+0x234>)
 8012a26:	230a      	movs	r3, #10
 8012a28:	e011      	b.n	8012a4e <_printf_i+0xfa>
 8012a2a:	6821      	ldr	r1, [r4, #0]
 8012a2c:	6833      	ldr	r3, [r6, #0]
 8012a2e:	0608      	lsls	r0, r1, #24
 8012a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8012a34:	d402      	bmi.n	8012a3c <_printf_i+0xe8>
 8012a36:	0649      	lsls	r1, r1, #25
 8012a38:	bf48      	it	mi
 8012a3a:	b2ad      	uxthmi	r5, r5
 8012a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8012a3e:	4852      	ldr	r0, [pc, #328]	@ (8012b88 <_printf_i+0x234>)
 8012a40:	6033      	str	r3, [r6, #0]
 8012a42:	bf14      	ite	ne
 8012a44:	230a      	movne	r3, #10
 8012a46:	2308      	moveq	r3, #8
 8012a48:	2100      	movs	r1, #0
 8012a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012a4e:	6866      	ldr	r6, [r4, #4]
 8012a50:	60a6      	str	r6, [r4, #8]
 8012a52:	2e00      	cmp	r6, #0
 8012a54:	db05      	blt.n	8012a62 <_printf_i+0x10e>
 8012a56:	6821      	ldr	r1, [r4, #0]
 8012a58:	432e      	orrs	r6, r5
 8012a5a:	f021 0104 	bic.w	r1, r1, #4
 8012a5e:	6021      	str	r1, [r4, #0]
 8012a60:	d04b      	beq.n	8012afa <_printf_i+0x1a6>
 8012a62:	4616      	mov	r6, r2
 8012a64:	fbb5 f1f3 	udiv	r1, r5, r3
 8012a68:	fb03 5711 	mls	r7, r3, r1, r5
 8012a6c:	5dc7      	ldrb	r7, [r0, r7]
 8012a6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a72:	462f      	mov	r7, r5
 8012a74:	42bb      	cmp	r3, r7
 8012a76:	460d      	mov	r5, r1
 8012a78:	d9f4      	bls.n	8012a64 <_printf_i+0x110>
 8012a7a:	2b08      	cmp	r3, #8
 8012a7c:	d10b      	bne.n	8012a96 <_printf_i+0x142>
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	07df      	lsls	r7, r3, #31
 8012a82:	d508      	bpl.n	8012a96 <_printf_i+0x142>
 8012a84:	6923      	ldr	r3, [r4, #16]
 8012a86:	6861      	ldr	r1, [r4, #4]
 8012a88:	4299      	cmp	r1, r3
 8012a8a:	bfde      	ittt	le
 8012a8c:	2330      	movle	r3, #48	@ 0x30
 8012a8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012a96:	1b92      	subs	r2, r2, r6
 8012a98:	6122      	str	r2, [r4, #16]
 8012a9a:	f8cd a000 	str.w	sl, [sp]
 8012a9e:	464b      	mov	r3, r9
 8012aa0:	aa03      	add	r2, sp, #12
 8012aa2:	4621      	mov	r1, r4
 8012aa4:	4640      	mov	r0, r8
 8012aa6:	f7ff fee7 	bl	8012878 <_printf_common>
 8012aaa:	3001      	adds	r0, #1
 8012aac:	d14a      	bne.n	8012b44 <_printf_i+0x1f0>
 8012aae:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab2:	b004      	add	sp, #16
 8012ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab8:	6823      	ldr	r3, [r4, #0]
 8012aba:	f043 0320 	orr.w	r3, r3, #32
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	4832      	ldr	r0, [pc, #200]	@ (8012b8c <_printf_i+0x238>)
 8012ac2:	2778      	movs	r7, #120	@ 0x78
 8012ac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	6831      	ldr	r1, [r6, #0]
 8012acc:	061f      	lsls	r7, r3, #24
 8012ace:	f851 5b04 	ldr.w	r5, [r1], #4
 8012ad2:	d402      	bmi.n	8012ada <_printf_i+0x186>
 8012ad4:	065f      	lsls	r7, r3, #25
 8012ad6:	bf48      	it	mi
 8012ad8:	b2ad      	uxthmi	r5, r5
 8012ada:	6031      	str	r1, [r6, #0]
 8012adc:	07d9      	lsls	r1, r3, #31
 8012ade:	bf44      	itt	mi
 8012ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8012ae4:	6023      	strmi	r3, [r4, #0]
 8012ae6:	b11d      	cbz	r5, 8012af0 <_printf_i+0x19c>
 8012ae8:	2310      	movs	r3, #16
 8012aea:	e7ad      	b.n	8012a48 <_printf_i+0xf4>
 8012aec:	4826      	ldr	r0, [pc, #152]	@ (8012b88 <_printf_i+0x234>)
 8012aee:	e7e9      	b.n	8012ac4 <_printf_i+0x170>
 8012af0:	6823      	ldr	r3, [r4, #0]
 8012af2:	f023 0320 	bic.w	r3, r3, #32
 8012af6:	6023      	str	r3, [r4, #0]
 8012af8:	e7f6      	b.n	8012ae8 <_printf_i+0x194>
 8012afa:	4616      	mov	r6, r2
 8012afc:	e7bd      	b.n	8012a7a <_printf_i+0x126>
 8012afe:	6833      	ldr	r3, [r6, #0]
 8012b00:	6825      	ldr	r5, [r4, #0]
 8012b02:	6961      	ldr	r1, [r4, #20]
 8012b04:	1d18      	adds	r0, r3, #4
 8012b06:	6030      	str	r0, [r6, #0]
 8012b08:	062e      	lsls	r6, r5, #24
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	d501      	bpl.n	8012b12 <_printf_i+0x1be>
 8012b0e:	6019      	str	r1, [r3, #0]
 8012b10:	e002      	b.n	8012b18 <_printf_i+0x1c4>
 8012b12:	0668      	lsls	r0, r5, #25
 8012b14:	d5fb      	bpl.n	8012b0e <_printf_i+0x1ba>
 8012b16:	8019      	strh	r1, [r3, #0]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	6123      	str	r3, [r4, #16]
 8012b1c:	4616      	mov	r6, r2
 8012b1e:	e7bc      	b.n	8012a9a <_printf_i+0x146>
 8012b20:	6833      	ldr	r3, [r6, #0]
 8012b22:	1d1a      	adds	r2, r3, #4
 8012b24:	6032      	str	r2, [r6, #0]
 8012b26:	681e      	ldr	r6, [r3, #0]
 8012b28:	6862      	ldr	r2, [r4, #4]
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f7ed fbdf 	bl	80002f0 <memchr>
 8012b32:	b108      	cbz	r0, 8012b38 <_printf_i+0x1e4>
 8012b34:	1b80      	subs	r0, r0, r6
 8012b36:	6060      	str	r0, [r4, #4]
 8012b38:	6863      	ldr	r3, [r4, #4]
 8012b3a:	6123      	str	r3, [r4, #16]
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b42:	e7aa      	b.n	8012a9a <_printf_i+0x146>
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	4632      	mov	r2, r6
 8012b48:	4649      	mov	r1, r9
 8012b4a:	4640      	mov	r0, r8
 8012b4c:	47d0      	blx	sl
 8012b4e:	3001      	adds	r0, #1
 8012b50:	d0ad      	beq.n	8012aae <_printf_i+0x15a>
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	079b      	lsls	r3, r3, #30
 8012b56:	d413      	bmi.n	8012b80 <_printf_i+0x22c>
 8012b58:	68e0      	ldr	r0, [r4, #12]
 8012b5a:	9b03      	ldr	r3, [sp, #12]
 8012b5c:	4298      	cmp	r0, r3
 8012b5e:	bfb8      	it	lt
 8012b60:	4618      	movlt	r0, r3
 8012b62:	e7a6      	b.n	8012ab2 <_printf_i+0x15e>
 8012b64:	2301      	movs	r3, #1
 8012b66:	4632      	mov	r2, r6
 8012b68:	4649      	mov	r1, r9
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	47d0      	blx	sl
 8012b6e:	3001      	adds	r0, #1
 8012b70:	d09d      	beq.n	8012aae <_printf_i+0x15a>
 8012b72:	3501      	adds	r5, #1
 8012b74:	68e3      	ldr	r3, [r4, #12]
 8012b76:	9903      	ldr	r1, [sp, #12]
 8012b78:	1a5b      	subs	r3, r3, r1
 8012b7a:	42ab      	cmp	r3, r5
 8012b7c:	dcf2      	bgt.n	8012b64 <_printf_i+0x210>
 8012b7e:	e7eb      	b.n	8012b58 <_printf_i+0x204>
 8012b80:	2500      	movs	r5, #0
 8012b82:	f104 0619 	add.w	r6, r4, #25
 8012b86:	e7f5      	b.n	8012b74 <_printf_i+0x220>
 8012b88:	080134e6 	.word	0x080134e6
 8012b8c:	080134f7 	.word	0x080134f7

08012b90 <_scanf_chars>:
 8012b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b94:	4615      	mov	r5, r2
 8012b96:	688a      	ldr	r2, [r1, #8]
 8012b98:	4680      	mov	r8, r0
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	b932      	cbnz	r2, 8012bac <_scanf_chars+0x1c>
 8012b9e:	698a      	ldr	r2, [r1, #24]
 8012ba0:	2a00      	cmp	r2, #0
 8012ba2:	bf14      	ite	ne
 8012ba4:	f04f 32ff 	movne.w	r2, #4294967295
 8012ba8:	2201      	moveq	r2, #1
 8012baa:	608a      	str	r2, [r1, #8]
 8012bac:	6822      	ldr	r2, [r4, #0]
 8012bae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012c40 <_scanf_chars+0xb0>
 8012bb2:	06d1      	lsls	r1, r2, #27
 8012bb4:	bf5f      	itttt	pl
 8012bb6:	681a      	ldrpl	r2, [r3, #0]
 8012bb8:	1d11      	addpl	r1, r2, #4
 8012bba:	6019      	strpl	r1, [r3, #0]
 8012bbc:	6816      	ldrpl	r6, [r2, #0]
 8012bbe:	2700      	movs	r7, #0
 8012bc0:	69a0      	ldr	r0, [r4, #24]
 8012bc2:	b188      	cbz	r0, 8012be8 <_scanf_chars+0x58>
 8012bc4:	2801      	cmp	r0, #1
 8012bc6:	d107      	bne.n	8012bd8 <_scanf_chars+0x48>
 8012bc8:	682b      	ldr	r3, [r5, #0]
 8012bca:	781a      	ldrb	r2, [r3, #0]
 8012bcc:	6963      	ldr	r3, [r4, #20]
 8012bce:	5c9b      	ldrb	r3, [r3, r2]
 8012bd0:	b953      	cbnz	r3, 8012be8 <_scanf_chars+0x58>
 8012bd2:	2f00      	cmp	r7, #0
 8012bd4:	d031      	beq.n	8012c3a <_scanf_chars+0xaa>
 8012bd6:	e022      	b.n	8012c1e <_scanf_chars+0x8e>
 8012bd8:	2802      	cmp	r0, #2
 8012bda:	d120      	bne.n	8012c1e <_scanf_chars+0x8e>
 8012bdc:	682b      	ldr	r3, [r5, #0]
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012be4:	071b      	lsls	r3, r3, #28
 8012be6:	d41a      	bmi.n	8012c1e <_scanf_chars+0x8e>
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	06da      	lsls	r2, r3, #27
 8012bec:	bf5e      	ittt	pl
 8012bee:	682b      	ldrpl	r3, [r5, #0]
 8012bf0:	781b      	ldrbpl	r3, [r3, #0]
 8012bf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012bf6:	682a      	ldr	r2, [r5, #0]
 8012bf8:	686b      	ldr	r3, [r5, #4]
 8012bfa:	3201      	adds	r2, #1
 8012bfc:	602a      	str	r2, [r5, #0]
 8012bfe:	68a2      	ldr	r2, [r4, #8]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	3a01      	subs	r2, #1
 8012c04:	606b      	str	r3, [r5, #4]
 8012c06:	3701      	adds	r7, #1
 8012c08:	60a2      	str	r2, [r4, #8]
 8012c0a:	b142      	cbz	r2, 8012c1e <_scanf_chars+0x8e>
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	dcd7      	bgt.n	8012bc0 <_scanf_chars+0x30>
 8012c10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012c14:	4629      	mov	r1, r5
 8012c16:	4640      	mov	r0, r8
 8012c18:	4798      	blx	r3
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d0d0      	beq.n	8012bc0 <_scanf_chars+0x30>
 8012c1e:	6823      	ldr	r3, [r4, #0]
 8012c20:	f013 0310 	ands.w	r3, r3, #16
 8012c24:	d105      	bne.n	8012c32 <_scanf_chars+0xa2>
 8012c26:	68e2      	ldr	r2, [r4, #12]
 8012c28:	3201      	adds	r2, #1
 8012c2a:	60e2      	str	r2, [r4, #12]
 8012c2c:	69a2      	ldr	r2, [r4, #24]
 8012c2e:	b102      	cbz	r2, 8012c32 <_scanf_chars+0xa2>
 8012c30:	7033      	strb	r3, [r6, #0]
 8012c32:	6923      	ldr	r3, [r4, #16]
 8012c34:	443b      	add	r3, r7
 8012c36:	6123      	str	r3, [r4, #16]
 8012c38:	2000      	movs	r0, #0
 8012c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c3e:	bf00      	nop
 8012c40:	080133d5 	.word	0x080133d5

08012c44 <_scanf_i>:
 8012c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c48:	4698      	mov	r8, r3
 8012c4a:	4b74      	ldr	r3, [pc, #464]	@ (8012e1c <_scanf_i+0x1d8>)
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	4682      	mov	sl, r0
 8012c50:	4616      	mov	r6, r2
 8012c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c56:	b087      	sub	sp, #28
 8012c58:	ab03      	add	r3, sp, #12
 8012c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012c5e:	4b70      	ldr	r3, [pc, #448]	@ (8012e20 <_scanf_i+0x1dc>)
 8012c60:	69a1      	ldr	r1, [r4, #24]
 8012c62:	4a70      	ldr	r2, [pc, #448]	@ (8012e24 <_scanf_i+0x1e0>)
 8012c64:	2903      	cmp	r1, #3
 8012c66:	bf08      	it	eq
 8012c68:	461a      	moveq	r2, r3
 8012c6a:	68a3      	ldr	r3, [r4, #8]
 8012c6c:	9201      	str	r2, [sp, #4]
 8012c6e:	1e5a      	subs	r2, r3, #1
 8012c70:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012c74:	bf88      	it	hi
 8012c76:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012c7a:	4627      	mov	r7, r4
 8012c7c:	bf82      	ittt	hi
 8012c7e:	eb03 0905 	addhi.w	r9, r3, r5
 8012c82:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012c86:	60a3      	strhi	r3, [r4, #8]
 8012c88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012c8c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012c90:	bf98      	it	ls
 8012c92:	f04f 0900 	movls.w	r9, #0
 8012c96:	6023      	str	r3, [r4, #0]
 8012c98:	463d      	mov	r5, r7
 8012c9a:	f04f 0b00 	mov.w	fp, #0
 8012c9e:	6831      	ldr	r1, [r6, #0]
 8012ca0:	ab03      	add	r3, sp, #12
 8012ca2:	7809      	ldrb	r1, [r1, #0]
 8012ca4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012ca8:	2202      	movs	r2, #2
 8012caa:	f7ed fb21 	bl	80002f0 <memchr>
 8012cae:	b328      	cbz	r0, 8012cfc <_scanf_i+0xb8>
 8012cb0:	f1bb 0f01 	cmp.w	fp, #1
 8012cb4:	d159      	bne.n	8012d6a <_scanf_i+0x126>
 8012cb6:	6862      	ldr	r2, [r4, #4]
 8012cb8:	b92a      	cbnz	r2, 8012cc6 <_scanf_i+0x82>
 8012cba:	6822      	ldr	r2, [r4, #0]
 8012cbc:	2108      	movs	r1, #8
 8012cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012cc2:	6061      	str	r1, [r4, #4]
 8012cc4:	6022      	str	r2, [r4, #0]
 8012cc6:	6822      	ldr	r2, [r4, #0]
 8012cc8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012ccc:	6022      	str	r2, [r4, #0]
 8012cce:	68a2      	ldr	r2, [r4, #8]
 8012cd0:	1e51      	subs	r1, r2, #1
 8012cd2:	60a1      	str	r1, [r4, #8]
 8012cd4:	b192      	cbz	r2, 8012cfc <_scanf_i+0xb8>
 8012cd6:	6832      	ldr	r2, [r6, #0]
 8012cd8:	1c51      	adds	r1, r2, #1
 8012cda:	6031      	str	r1, [r6, #0]
 8012cdc:	7812      	ldrb	r2, [r2, #0]
 8012cde:	f805 2b01 	strb.w	r2, [r5], #1
 8012ce2:	6872      	ldr	r2, [r6, #4]
 8012ce4:	3a01      	subs	r2, #1
 8012ce6:	2a00      	cmp	r2, #0
 8012ce8:	6072      	str	r2, [r6, #4]
 8012cea:	dc07      	bgt.n	8012cfc <_scanf_i+0xb8>
 8012cec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012cf0:	4631      	mov	r1, r6
 8012cf2:	4650      	mov	r0, sl
 8012cf4:	4790      	blx	r2
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f040 8085 	bne.w	8012e06 <_scanf_i+0x1c2>
 8012cfc:	f10b 0b01 	add.w	fp, fp, #1
 8012d00:	f1bb 0f03 	cmp.w	fp, #3
 8012d04:	d1cb      	bne.n	8012c9e <_scanf_i+0x5a>
 8012d06:	6863      	ldr	r3, [r4, #4]
 8012d08:	b90b      	cbnz	r3, 8012d0e <_scanf_i+0xca>
 8012d0a:	230a      	movs	r3, #10
 8012d0c:	6063      	str	r3, [r4, #4]
 8012d0e:	6863      	ldr	r3, [r4, #4]
 8012d10:	4945      	ldr	r1, [pc, #276]	@ (8012e28 <_scanf_i+0x1e4>)
 8012d12:	6960      	ldr	r0, [r4, #20]
 8012d14:	1ac9      	subs	r1, r1, r3
 8012d16:	f000 f889 	bl	8012e2c <__sccl>
 8012d1a:	f04f 0b00 	mov.w	fp, #0
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	6822      	ldr	r2, [r4, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d03d      	beq.n	8012da2 <_scanf_i+0x15e>
 8012d26:	6831      	ldr	r1, [r6, #0]
 8012d28:	6960      	ldr	r0, [r4, #20]
 8012d2a:	f891 c000 	ldrb.w	ip, [r1]
 8012d2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012d32:	2800      	cmp	r0, #0
 8012d34:	d035      	beq.n	8012da2 <_scanf_i+0x15e>
 8012d36:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012d3a:	d124      	bne.n	8012d86 <_scanf_i+0x142>
 8012d3c:	0510      	lsls	r0, r2, #20
 8012d3e:	d522      	bpl.n	8012d86 <_scanf_i+0x142>
 8012d40:	f10b 0b01 	add.w	fp, fp, #1
 8012d44:	f1b9 0f00 	cmp.w	r9, #0
 8012d48:	d003      	beq.n	8012d52 <_scanf_i+0x10e>
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d50:	60a3      	str	r3, [r4, #8]
 8012d52:	6873      	ldr	r3, [r6, #4]
 8012d54:	3b01      	subs	r3, #1
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	6073      	str	r3, [r6, #4]
 8012d5a:	dd1b      	ble.n	8012d94 <_scanf_i+0x150>
 8012d5c:	6833      	ldr	r3, [r6, #0]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	6033      	str	r3, [r6, #0]
 8012d62:	68a3      	ldr	r3, [r4, #8]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	60a3      	str	r3, [r4, #8]
 8012d68:	e7d9      	b.n	8012d1e <_scanf_i+0xda>
 8012d6a:	f1bb 0f02 	cmp.w	fp, #2
 8012d6e:	d1ae      	bne.n	8012cce <_scanf_i+0x8a>
 8012d70:	6822      	ldr	r2, [r4, #0]
 8012d72:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012d76:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012d7a:	d1c4      	bne.n	8012d06 <_scanf_i+0xc2>
 8012d7c:	2110      	movs	r1, #16
 8012d7e:	6061      	str	r1, [r4, #4]
 8012d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012d84:	e7a2      	b.n	8012ccc <_scanf_i+0x88>
 8012d86:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012d8a:	6022      	str	r2, [r4, #0]
 8012d8c:	780b      	ldrb	r3, [r1, #0]
 8012d8e:	f805 3b01 	strb.w	r3, [r5], #1
 8012d92:	e7de      	b.n	8012d52 <_scanf_i+0x10e>
 8012d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012d98:	4631      	mov	r1, r6
 8012d9a:	4650      	mov	r0, sl
 8012d9c:	4798      	blx	r3
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	d0df      	beq.n	8012d62 <_scanf_i+0x11e>
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	05d9      	lsls	r1, r3, #23
 8012da6:	d50d      	bpl.n	8012dc4 <_scanf_i+0x180>
 8012da8:	42bd      	cmp	r5, r7
 8012daa:	d909      	bls.n	8012dc0 <_scanf_i+0x17c>
 8012dac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012db4:	4632      	mov	r2, r6
 8012db6:	4650      	mov	r0, sl
 8012db8:	4798      	blx	r3
 8012dba:	f105 39ff 	add.w	r9, r5, #4294967295
 8012dbe:	464d      	mov	r5, r9
 8012dc0:	42bd      	cmp	r5, r7
 8012dc2:	d028      	beq.n	8012e16 <_scanf_i+0x1d2>
 8012dc4:	6822      	ldr	r2, [r4, #0]
 8012dc6:	f012 0210 	ands.w	r2, r2, #16
 8012dca:	d113      	bne.n	8012df4 <_scanf_i+0x1b0>
 8012dcc:	702a      	strb	r2, [r5, #0]
 8012dce:	6863      	ldr	r3, [r4, #4]
 8012dd0:	9e01      	ldr	r6, [sp, #4]
 8012dd2:	4639      	mov	r1, r7
 8012dd4:	4650      	mov	r0, sl
 8012dd6:	47b0      	blx	r6
 8012dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8012ddc:	6821      	ldr	r1, [r4, #0]
 8012dde:	1d1a      	adds	r2, r3, #4
 8012de0:	f8c8 2000 	str.w	r2, [r8]
 8012de4:	f011 0f20 	tst.w	r1, #32
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	d00f      	beq.n	8012e0c <_scanf_i+0x1c8>
 8012dec:	6018      	str	r0, [r3, #0]
 8012dee:	68e3      	ldr	r3, [r4, #12]
 8012df0:	3301      	adds	r3, #1
 8012df2:	60e3      	str	r3, [r4, #12]
 8012df4:	6923      	ldr	r3, [r4, #16]
 8012df6:	1bed      	subs	r5, r5, r7
 8012df8:	445d      	add	r5, fp
 8012dfa:	442b      	add	r3, r5
 8012dfc:	6123      	str	r3, [r4, #16]
 8012dfe:	2000      	movs	r0, #0
 8012e00:	b007      	add	sp, #28
 8012e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e06:	f04f 0b00 	mov.w	fp, #0
 8012e0a:	e7ca      	b.n	8012da2 <_scanf_i+0x15e>
 8012e0c:	07ca      	lsls	r2, r1, #31
 8012e0e:	bf4c      	ite	mi
 8012e10:	8018      	strhmi	r0, [r3, #0]
 8012e12:	6018      	strpl	r0, [r3, #0]
 8012e14:	e7eb      	b.n	8012dee <_scanf_i+0x1aa>
 8012e16:	2001      	movs	r0, #1
 8012e18:	e7f2      	b.n	8012e00 <_scanf_i+0x1bc>
 8012e1a:	bf00      	nop
 8012e1c:	08013388 	.word	0x08013388
 8012e20:	080130d5 	.word	0x080130d5
 8012e24:	08011ed9 	.word	0x08011ed9
 8012e28:	08013518 	.word	0x08013518

08012e2c <__sccl>:
 8012e2c:	b570      	push	{r4, r5, r6, lr}
 8012e2e:	780b      	ldrb	r3, [r1, #0]
 8012e30:	4604      	mov	r4, r0
 8012e32:	2b5e      	cmp	r3, #94	@ 0x5e
 8012e34:	bf0b      	itete	eq
 8012e36:	784b      	ldrbeq	r3, [r1, #1]
 8012e38:	1c4a      	addne	r2, r1, #1
 8012e3a:	1c8a      	addeq	r2, r1, #2
 8012e3c:	2100      	movne	r1, #0
 8012e3e:	bf08      	it	eq
 8012e40:	2101      	moveq	r1, #1
 8012e42:	3801      	subs	r0, #1
 8012e44:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012e48:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012e4c:	42a8      	cmp	r0, r5
 8012e4e:	d1fb      	bne.n	8012e48 <__sccl+0x1c>
 8012e50:	b90b      	cbnz	r3, 8012e56 <__sccl+0x2a>
 8012e52:	1e50      	subs	r0, r2, #1
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	f081 0101 	eor.w	r1, r1, #1
 8012e5a:	54e1      	strb	r1, [r4, r3]
 8012e5c:	4610      	mov	r0, r2
 8012e5e:	4602      	mov	r2, r0
 8012e60:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012e64:	2d2d      	cmp	r5, #45	@ 0x2d
 8012e66:	d005      	beq.n	8012e74 <__sccl+0x48>
 8012e68:	2d5d      	cmp	r5, #93	@ 0x5d
 8012e6a:	d016      	beq.n	8012e9a <__sccl+0x6e>
 8012e6c:	2d00      	cmp	r5, #0
 8012e6e:	d0f1      	beq.n	8012e54 <__sccl+0x28>
 8012e70:	462b      	mov	r3, r5
 8012e72:	e7f2      	b.n	8012e5a <__sccl+0x2e>
 8012e74:	7846      	ldrb	r6, [r0, #1]
 8012e76:	2e5d      	cmp	r6, #93	@ 0x5d
 8012e78:	d0fa      	beq.n	8012e70 <__sccl+0x44>
 8012e7a:	42b3      	cmp	r3, r6
 8012e7c:	dcf8      	bgt.n	8012e70 <__sccl+0x44>
 8012e7e:	3002      	adds	r0, #2
 8012e80:	461a      	mov	r2, r3
 8012e82:	3201      	adds	r2, #1
 8012e84:	4296      	cmp	r6, r2
 8012e86:	54a1      	strb	r1, [r4, r2]
 8012e88:	dcfb      	bgt.n	8012e82 <__sccl+0x56>
 8012e8a:	1af2      	subs	r2, r6, r3
 8012e8c:	3a01      	subs	r2, #1
 8012e8e:	1c5d      	adds	r5, r3, #1
 8012e90:	42b3      	cmp	r3, r6
 8012e92:	bfa8      	it	ge
 8012e94:	2200      	movge	r2, #0
 8012e96:	18ab      	adds	r3, r5, r2
 8012e98:	e7e1      	b.n	8012e5e <__sccl+0x32>
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	e7da      	b.n	8012e54 <__sccl+0x28>

08012e9e <__submore>:
 8012e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea2:	460c      	mov	r4, r1
 8012ea4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012eaa:	4299      	cmp	r1, r3
 8012eac:	d11d      	bne.n	8012eea <__submore+0x4c>
 8012eae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012eb2:	f7ff f92d 	bl	8012110 <_malloc_r>
 8012eb6:	b918      	cbnz	r0, 8012ec0 <__submore+0x22>
 8012eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ec4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012ec6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012eca:	6360      	str	r0, [r4, #52]	@ 0x34
 8012ecc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012ed0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012ed4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012ed8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012edc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012ee0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012ee4:	6020      	str	r0, [r4, #0]
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	e7e8      	b.n	8012ebc <__submore+0x1e>
 8012eea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012eec:	0077      	lsls	r7, r6, #1
 8012eee:	463a      	mov	r2, r7
 8012ef0:	f000 f848 	bl	8012f84 <_realloc_r>
 8012ef4:	4605      	mov	r5, r0
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d0de      	beq.n	8012eb8 <__submore+0x1a>
 8012efa:	eb00 0806 	add.w	r8, r0, r6
 8012efe:	4601      	mov	r1, r0
 8012f00:	4632      	mov	r2, r6
 8012f02:	4640      	mov	r0, r8
 8012f04:	f000 f830 	bl	8012f68 <memcpy>
 8012f08:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012f0c:	f8c4 8000 	str.w	r8, [r4]
 8012f10:	e7e9      	b.n	8012ee6 <__submore+0x48>

08012f12 <memmove>:
 8012f12:	4288      	cmp	r0, r1
 8012f14:	b510      	push	{r4, lr}
 8012f16:	eb01 0402 	add.w	r4, r1, r2
 8012f1a:	d902      	bls.n	8012f22 <memmove+0x10>
 8012f1c:	4284      	cmp	r4, r0
 8012f1e:	4623      	mov	r3, r4
 8012f20:	d807      	bhi.n	8012f32 <memmove+0x20>
 8012f22:	1e43      	subs	r3, r0, #1
 8012f24:	42a1      	cmp	r1, r4
 8012f26:	d008      	beq.n	8012f3a <memmove+0x28>
 8012f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f30:	e7f8      	b.n	8012f24 <memmove+0x12>
 8012f32:	4402      	add	r2, r0
 8012f34:	4601      	mov	r1, r0
 8012f36:	428a      	cmp	r2, r1
 8012f38:	d100      	bne.n	8012f3c <memmove+0x2a>
 8012f3a:	bd10      	pop	{r4, pc}
 8012f3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f44:	e7f7      	b.n	8012f36 <memmove+0x24>
	...

08012f48 <_sbrk_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4d06      	ldr	r5, [pc, #24]	@ (8012f64 <_sbrk_r+0x1c>)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4604      	mov	r4, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	602b      	str	r3, [r5, #0]
 8012f54:	f7ee fa64 	bl	8001420 <_sbrk>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	d102      	bne.n	8012f62 <_sbrk_r+0x1a>
 8012f5c:	682b      	ldr	r3, [r5, #0]
 8012f5e:	b103      	cbz	r3, 8012f62 <_sbrk_r+0x1a>
 8012f60:	6023      	str	r3, [r4, #0]
 8012f62:	bd38      	pop	{r3, r4, r5, pc}
 8012f64:	24003320 	.word	0x24003320

08012f68 <memcpy>:
 8012f68:	440a      	add	r2, r1
 8012f6a:	4291      	cmp	r1, r2
 8012f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f70:	d100      	bne.n	8012f74 <memcpy+0xc>
 8012f72:	4770      	bx	lr
 8012f74:	b510      	push	{r4, lr}
 8012f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f7e:	4291      	cmp	r1, r2
 8012f80:	d1f9      	bne.n	8012f76 <memcpy+0xe>
 8012f82:	bd10      	pop	{r4, pc}

08012f84 <_realloc_r>:
 8012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f88:	4607      	mov	r7, r0
 8012f8a:	4614      	mov	r4, r2
 8012f8c:	460d      	mov	r5, r1
 8012f8e:	b921      	cbnz	r1, 8012f9a <_realloc_r+0x16>
 8012f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f94:	4611      	mov	r1, r2
 8012f96:	f7ff b8bb 	b.w	8012110 <_malloc_r>
 8012f9a:	b92a      	cbnz	r2, 8012fa8 <_realloc_r+0x24>
 8012f9c:	f7ff f84c 	bl	8012038 <_free_r>
 8012fa0:	4625      	mov	r5, r4
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa8:	f000 f896 	bl	80130d8 <_malloc_usable_size_r>
 8012fac:	4284      	cmp	r4, r0
 8012fae:	4606      	mov	r6, r0
 8012fb0:	d802      	bhi.n	8012fb8 <_realloc_r+0x34>
 8012fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012fb6:	d8f4      	bhi.n	8012fa2 <_realloc_r+0x1e>
 8012fb8:	4621      	mov	r1, r4
 8012fba:	4638      	mov	r0, r7
 8012fbc:	f7ff f8a8 	bl	8012110 <_malloc_r>
 8012fc0:	4680      	mov	r8, r0
 8012fc2:	b908      	cbnz	r0, 8012fc8 <_realloc_r+0x44>
 8012fc4:	4645      	mov	r5, r8
 8012fc6:	e7ec      	b.n	8012fa2 <_realloc_r+0x1e>
 8012fc8:	42b4      	cmp	r4, r6
 8012fca:	4622      	mov	r2, r4
 8012fcc:	4629      	mov	r1, r5
 8012fce:	bf28      	it	cs
 8012fd0:	4632      	movcs	r2, r6
 8012fd2:	f7ff ffc9 	bl	8012f68 <memcpy>
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f7ff f82d 	bl	8012038 <_free_r>
 8012fde:	e7f1      	b.n	8012fc4 <_realloc_r+0x40>

08012fe0 <_strtol_l.isra.0>:
 8012fe0:	2b24      	cmp	r3, #36	@ 0x24
 8012fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe6:	4686      	mov	lr, r0
 8012fe8:	4690      	mov	r8, r2
 8012fea:	d801      	bhi.n	8012ff0 <_strtol_l.isra.0+0x10>
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	d106      	bne.n	8012ffe <_strtol_l.isra.0+0x1e>
 8012ff0:	f7fe fff6 	bl	8011fe0 <__errno>
 8012ff4:	2316      	movs	r3, #22
 8012ff6:	6003      	str	r3, [r0, #0]
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffe:	4834      	ldr	r0, [pc, #208]	@ (80130d0 <_strtol_l.isra.0+0xf0>)
 8013000:	460d      	mov	r5, r1
 8013002:	462a      	mov	r2, r5
 8013004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013008:	5d06      	ldrb	r6, [r0, r4]
 801300a:	f016 0608 	ands.w	r6, r6, #8
 801300e:	d1f8      	bne.n	8013002 <_strtol_l.isra.0+0x22>
 8013010:	2c2d      	cmp	r4, #45	@ 0x2d
 8013012:	d110      	bne.n	8013036 <_strtol_l.isra.0+0x56>
 8013014:	782c      	ldrb	r4, [r5, #0]
 8013016:	2601      	movs	r6, #1
 8013018:	1c95      	adds	r5, r2, #2
 801301a:	f033 0210 	bics.w	r2, r3, #16
 801301e:	d115      	bne.n	801304c <_strtol_l.isra.0+0x6c>
 8013020:	2c30      	cmp	r4, #48	@ 0x30
 8013022:	d10d      	bne.n	8013040 <_strtol_l.isra.0+0x60>
 8013024:	782a      	ldrb	r2, [r5, #0]
 8013026:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801302a:	2a58      	cmp	r2, #88	@ 0x58
 801302c:	d108      	bne.n	8013040 <_strtol_l.isra.0+0x60>
 801302e:	786c      	ldrb	r4, [r5, #1]
 8013030:	3502      	adds	r5, #2
 8013032:	2310      	movs	r3, #16
 8013034:	e00a      	b.n	801304c <_strtol_l.isra.0+0x6c>
 8013036:	2c2b      	cmp	r4, #43	@ 0x2b
 8013038:	bf04      	itt	eq
 801303a:	782c      	ldrbeq	r4, [r5, #0]
 801303c:	1c95      	addeq	r5, r2, #2
 801303e:	e7ec      	b.n	801301a <_strtol_l.isra.0+0x3a>
 8013040:	2b00      	cmp	r3, #0
 8013042:	d1f6      	bne.n	8013032 <_strtol_l.isra.0+0x52>
 8013044:	2c30      	cmp	r4, #48	@ 0x30
 8013046:	bf14      	ite	ne
 8013048:	230a      	movne	r3, #10
 801304a:	2308      	moveq	r3, #8
 801304c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013050:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013054:	2200      	movs	r2, #0
 8013056:	fbbc f9f3 	udiv	r9, ip, r3
 801305a:	4610      	mov	r0, r2
 801305c:	fb03 ca19 	mls	sl, r3, r9, ip
 8013060:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013064:	2f09      	cmp	r7, #9
 8013066:	d80f      	bhi.n	8013088 <_strtol_l.isra.0+0xa8>
 8013068:	463c      	mov	r4, r7
 801306a:	42a3      	cmp	r3, r4
 801306c:	dd1b      	ble.n	80130a6 <_strtol_l.isra.0+0xc6>
 801306e:	1c57      	adds	r7, r2, #1
 8013070:	d007      	beq.n	8013082 <_strtol_l.isra.0+0xa2>
 8013072:	4581      	cmp	r9, r0
 8013074:	d314      	bcc.n	80130a0 <_strtol_l.isra.0+0xc0>
 8013076:	d101      	bne.n	801307c <_strtol_l.isra.0+0x9c>
 8013078:	45a2      	cmp	sl, r4
 801307a:	db11      	blt.n	80130a0 <_strtol_l.isra.0+0xc0>
 801307c:	fb00 4003 	mla	r0, r0, r3, r4
 8013080:	2201      	movs	r2, #1
 8013082:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013086:	e7eb      	b.n	8013060 <_strtol_l.isra.0+0x80>
 8013088:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801308c:	2f19      	cmp	r7, #25
 801308e:	d801      	bhi.n	8013094 <_strtol_l.isra.0+0xb4>
 8013090:	3c37      	subs	r4, #55	@ 0x37
 8013092:	e7ea      	b.n	801306a <_strtol_l.isra.0+0x8a>
 8013094:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013098:	2f19      	cmp	r7, #25
 801309a:	d804      	bhi.n	80130a6 <_strtol_l.isra.0+0xc6>
 801309c:	3c57      	subs	r4, #87	@ 0x57
 801309e:	e7e4      	b.n	801306a <_strtol_l.isra.0+0x8a>
 80130a0:	f04f 32ff 	mov.w	r2, #4294967295
 80130a4:	e7ed      	b.n	8013082 <_strtol_l.isra.0+0xa2>
 80130a6:	1c53      	adds	r3, r2, #1
 80130a8:	d108      	bne.n	80130bc <_strtol_l.isra.0+0xdc>
 80130aa:	2322      	movs	r3, #34	@ 0x22
 80130ac:	f8ce 3000 	str.w	r3, [lr]
 80130b0:	4660      	mov	r0, ip
 80130b2:	f1b8 0f00 	cmp.w	r8, #0
 80130b6:	d0a0      	beq.n	8012ffa <_strtol_l.isra.0+0x1a>
 80130b8:	1e69      	subs	r1, r5, #1
 80130ba:	e006      	b.n	80130ca <_strtol_l.isra.0+0xea>
 80130bc:	b106      	cbz	r6, 80130c0 <_strtol_l.isra.0+0xe0>
 80130be:	4240      	negs	r0, r0
 80130c0:	f1b8 0f00 	cmp.w	r8, #0
 80130c4:	d099      	beq.n	8012ffa <_strtol_l.isra.0+0x1a>
 80130c6:	2a00      	cmp	r2, #0
 80130c8:	d1f6      	bne.n	80130b8 <_strtol_l.isra.0+0xd8>
 80130ca:	f8c8 1000 	str.w	r1, [r8]
 80130ce:	e794      	b.n	8012ffa <_strtol_l.isra.0+0x1a>
 80130d0:	080133d5 	.word	0x080133d5

080130d4 <_strtol_r>:
 80130d4:	f7ff bf84 	b.w	8012fe0 <_strtol_l.isra.0>

080130d8 <_malloc_usable_size_r>:
 80130d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130dc:	1f18      	subs	r0, r3, #4
 80130de:	2b00      	cmp	r3, #0
 80130e0:	bfbc      	itt	lt
 80130e2:	580b      	ldrlt	r3, [r1, r0]
 80130e4:	18c0      	addlt	r0, r0, r3
 80130e6:	4770      	bx	lr

080130e8 <_init>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	bf00      	nop
 80130ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ee:	bc08      	pop	{r3}
 80130f0:	469e      	mov	lr, r3
 80130f2:	4770      	bx	lr

080130f4 <_fini>:
 80130f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f6:	bf00      	nop
 80130f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130fa:	bc08      	pop	{r3}
 80130fc:	469e      	mov	lr, r3
 80130fe:	4770      	bx	lr
