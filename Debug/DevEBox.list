
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013974  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08013c14  08013c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014038  08014038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014040  08014040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014044  08014044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  24000000  08014048  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007b2c  24000164  080141ac  00016164  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007c90  080141ac  00016c90  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000200  38000000  38000000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030391  00000000  00000000  0001722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000069fe  00000000  00000000  000475bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000024e8  00000000  00000000  0004dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c4b  00000000  00000000  000504a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000408d1  00000000  00000000  000520f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003376e  00000000  00000000  000929c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00184336  00000000  00000000  000c6132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0024a468  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a34c  00000000  00000000  0024a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  002547f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000164 	.word	0x24000164
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013bfc 	.word	0x08013bfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000168 	.word	0x24000168
 80002dc:	08013bfc 	.word	0x08013bfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	463b      	mov	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000468 <MX_ADC3_Init+0xd8>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000404:	2201      	movs	r2, #1
 8000406:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000408:	4816      	ldr	r0, [pc, #88]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800040a:	f001 f953 	bl	80016b4 <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000414:	f000 fb88 	bl	8000b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_ADC3_Init+0xdc>)
 800041a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	2306      	movs	r3, #6
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000420:	2307      	movs	r3, #7
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000424:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042a:	2304      	movs	r3, #4
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	480a      	ldr	r0, [pc, #40]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800043c:	f001 fc0c 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000446:	f000 fb6f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_ADC3_Init+0xe0>)
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 800044e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000452:	69f9      	ldr	r1, [r7, #28]
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000456:	f001 facf 	bl	80019f8 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	24000180 	.word	0x24000180
 8000468:	58026000 	.word	0x58026000
 800046c:	cb840000 	.word	0xcb840000
 8000470:	38000000 	.word	0x38000000

08000474 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b0b4      	sub	sp, #208	@ 0xd0
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	22c0      	movs	r2, #192	@ 0xc0
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f012 facf 	bl	8012a28 <memset>
  if(adcHandle->Instance==ADC3)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a34      	ldr	r2, [pc, #208]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d161      	bne.n	8000558 <HAL_ADC_MspInit+0xe4>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000494:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000498:	f04f 0300 	mov.w	r3, #0
 800049c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004a0:	2319      	movs	r3, #25
 80004a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 fd9a 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80004d6:	f000 fb27 	bl	8000b28 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e0:	4a20      	ldr	r2, [pc, #128]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <HAL_ADC_MspInit+0xf8>)
 80004fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000500:	2273      	movs	r2, #115	@ 0x73
 8000502:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000516:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 800051a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800051e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000522:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000526:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 800052a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800052e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800053c:	480a      	ldr	r0, [pc, #40]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 800053e:	f002 faa1 	bl	8002a84 <HAL_DMA_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000548:	f000 faee 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000550:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000558:	bf00      	nop
 800055a:	37d0      	adds	r7, #208	@ 0xd0
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	58026000 	.word	0x58026000
 8000564:	58024400 	.word	0x58024400
 8000568:	240001e4 	.word	0x240001e4
 800056c:	40020010 	.word	0x40020010

08000570 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <HAL_ADC_ConvCpltCallback+0x24>)
 800057a:	f001 fb01 	bl	8001b80 <HAL_ADC_Stop_DMA>
	conversion_count++;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_ADC_ConvCpltCallback+0x28>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	b29b      	uxth	r3, r3
 8000584:	3301      	adds	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <HAL_ADC_ConvCpltCallback+0x28>)
 800058a:	801a      	strh	r2, [r3, #0]
	//DebugPrint("\r\n conversion_count = %d", conversion_count);
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	24000180 	.word	0x24000180
 8000598:	2400025c 	.word	0x2400025c

0800059c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <HAL_ADC_ErrorCallback+0x38>)
 80005a6:	f001 faeb 	bl	8001b80 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <HAL_ADC_ErrorCallback+0x3c>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_ADC_ErrorCallback+0x3c>)
 80005b6:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_ADC_ErrorCallback+0x38>)
 80005ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005bc:	4619      	mov	r1, r3
 80005be:	4807      	ldr	r0, [pc, #28]	@ (80005dc <HAL_ADC_ErrorCallback+0x40>)
 80005c0:	f012 f8a8 	bl	8012714 <DebugPrint>
	hadc3.State = 0;
 80005c4:	4b03      	ldr	r3, [pc, #12]	@ (80005d4 <HAL_ADC_ErrorCallback+0x38>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	24000180 	.word	0x24000180
 80005d8:	2400025c 	.word	0x2400025c
 80005dc:	08013c14 	.word	0x08013c14

080005e0 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 80005e6:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <CalcTemperature+0xe4>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d05c      	beq.n	80006aa <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 80005f0:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <CalcTemperature+0xe8>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d030      	beq.n	800065e <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005fc:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <CalcTemperature+0xe8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000604:	f3bf 8f4f 	dsb	sy
}
 8000608:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <CalcTemperature+0xe8>)
 800060c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000610:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	0b5b      	lsrs	r3, r3, #13
 8000616:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800061a:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000624:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	015a      	lsls	r2, r3, #5
 800062a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800062e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000634:	4924      	ldr	r1, [pc, #144]	@ (80006c8 <CalcTemperature+0xe8>)
 8000636:	4313      	orrs	r3, r2
 8000638:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	603a      	str	r2, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1ef      	bne.n	8000626 <CalcTemperature+0x46>
    } while(sets-- != 0U);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1e5      	bne.n	800061c <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000656:	f3bf 8f6f 	isb	sy
}
 800065a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800065c:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	e010      	b.n	800068a <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 8000668:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <CalcTemperature+0xec>)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000670:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	69fa      	ldr	r2, [r7, #28]
 8000676:	4413      	add	r3, r2
 8000678:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 800067a:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <CalcTemperature+0xec>)
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	2100      	movs	r1, #0
 8000680:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	3301      	adds	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2bff      	cmp	r3, #255	@ 0xff
 800068e:	ddeb      	ble.n	8000668 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <CalcTemperature+0xe4>)
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <CalcTemperature+0xec>)
 8000698:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 800069a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069e:	6939      	ldr	r1, [r7, #16]
 80006a0:	480b      	ldr	r0, [pc, #44]	@ (80006d0 <CalcTemperature+0xf0>)
 80006a2:	f001 f9a9 	bl	80019f8 <HAL_ADC_Start_DMA>

		return total_adc;
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	e008      	b.n	80006bc <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <CalcTemperature+0xec>)
 80006ac:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80006ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b2:	6979      	ldr	r1, [r7, #20]
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <CalcTemperature+0xf0>)
 80006b6:	f001 f99f 	bl	80019f8 <HAL_ADC_Start_DMA>
	}

	return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2400025c 	.word	0x2400025c
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	38000000 	.word	0x38000000
 80006d0:	24000180 	.word	0x24000180

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2105      	movs	r1, #5
 80006fc:	200b      	movs	r0, #11
 80006fe:	f002 f999 	bl	8002a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000702:	200b      	movs	r0, #11
 8000704:	f002 f9b0 	bl	8002a68 <HAL_NVIC_EnableIRQ>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58024400 	.word	0x58024400

08000714 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <MX_FREERTOS_Init+0x28>)
 800071a:	2100      	movs	r1, #0
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <MX_FREERTOS_Init+0x2c>)
 800071e:	f00e f819 	bl	800e754 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a07      	ldr	r2, [pc, #28]	@ (8000744 <MX_FREERTOS_Init+0x30>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of DebugTask */
  DebugTaskHandle = osThreadNew(StartDebugTask, NULL, &DebugTask_attributes);
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <MX_FREERTOS_Init+0x34>)
 800072a:	2100      	movs	r1, #0
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_FREERTOS_Init+0x38>)
 800072e:	f00e f811 	bl	800e754 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <MX_FREERTOS_Init+0x3c>)
 8000736:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08013e88 	.word	0x08013e88
 8000740:	08000755 	.word	0x08000755
 8000744:	24000260 	.word	0x24000260
 8000748:	08013eac 	.word	0x08013eac
 800074c:	08000789 	.word	0x08000789
 8000750:	24000264 	.word	0x24000264

08000754 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800075c:	f010 fd5c 	bl	8011218 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2102      	movs	r1, #2
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <StartDefaultTask+0x30>)
 8000766:	f004 ff33 	bl	80055d0 <HAL_GPIO_WritePin>
    osDelay(200);
 800076a:	20c8      	movs	r0, #200	@ 0xc8
 800076c:	f00e f884 	bl	800e878 <osDelay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2102      	movs	r1, #2
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <StartDefaultTask+0x30>)
 8000776:	f004 ff2b 	bl	80055d0 <HAL_GPIO_WritePin>
    osDelay(200);
 800077a:	20c8      	movs	r0, #200	@ 0xc8
 800077c:	f00e f87c 	bl	800e878 <osDelay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000780:	bf00      	nop
 8000782:	e7ed      	b.n	8000760 <StartDefaultTask+0xc>
 8000784:	58020000 	.word	0x58020000

08000788 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	DebugInit();
 8000790:	f011 ff06 	bl	80125a0 <DebugInit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f00e f86f 	bl	800e878 <osDelay>
    DebugTask();
 800079a:	f011 ff1b 	bl	80125d4 <DebugTask>
  {
 800079e:	bf00      	nop
 80007a0:	e7f8      	b.n	8000794 <StartDebugTask+0xc>
	...

080007a4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007de:	4a28      	ldr	r2, [pc, #160]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fc:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <MX_GPIO_Init+0xdc>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_GPIO_Init+0xdc>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_GPIO_Init+0xdc>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081a:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <MX_GPIO_Init+0xdc>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_GPIO_Init+0xdc>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_GPIO_Init+0xdc>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a11      	ldr	r2, [pc, #68]	@ (8000880 <MX_GPIO_Init+0xdc>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_GPIO_Init+0xdc>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2102      	movs	r1, #2
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <MX_GPIO_Init+0xe0>)
 8000856:	f004 febb 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0xe0>)
 8000872:	f004 fcfd 	bl	8005270 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400
 8000884:	58020000 	.word	0x58020000

08000888 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f004 fe9e 	bl	8005604 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 f92b 	bl	8000b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f004 ff31 	bl	800573c <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 f922 	bl	8000b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f004 ff73 	bl	80057d2 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 f919 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000268 	.word	0x24000268
 8000900:	40005400 	.word	0x40005400
 8000904:	10c0ecff 	.word	0x10c0ecff

08000908 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0ba      	sub	sp, #232	@ 0xe8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	22c0      	movs	r2, #192	@ 0xc0
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f012 f87d 	bl	8012a28 <memset>
  if(i2cHandle->Instance==I2C1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <HAL_I2C_MspInit+0xc8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d146      	bne.n	80009c6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000938:	f04f 0208 	mov.w	r2, #8
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4618      	mov	r0, r3
 8000950:	f007 fb58 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800095a:	f000 f8e5 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000980:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000984:	2312      	movs	r3, #18
 8000986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000996:	2304      	movs	r3, #4
 8000998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <HAL_I2C_MspInit+0xd0>)
 80009a4:	f004 fc64 	bl	8005270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 80009aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009ae:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 80009b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_I2C_MspInit+0xcc>)
 80009ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009c6:	bf00      	nop
 80009c8:	37e8      	adds	r7, #232	@ 0xe8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40005400 	.word	0x40005400
 80009d4:	58024400 	.word	0x58024400
 80009d8:	58020400 	.word	0x58020400

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fb72 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f814 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff fedc 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ec:	f7ff fe72 	bl	80006d4 <MX_DMA_Init>
  MX_QUADSPI_Init();
 80009f0:	f000 f8a0 	bl	8000b34 <MX_QUADSPI_Init>
  MX_ADC3_Init();
 80009f4:	f7ff fccc 	bl	8000390 <MX_ADC3_Init>
  MX_I2C1_Init();
 80009f8:	f7ff ff46 	bl	8000888 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80009fc:	f010 fc0c 	bl	8011218 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a00:	f00d fe5e 	bl	800e6c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a04:	f7ff fe86 	bl	8000714 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a08:	f00d fe7e 	bl	800e708 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <main+0x30>

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	@ 0x70
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	224c      	movs	r2, #76	@ 0x4c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f012 f802 	bl	8012a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f011 fffc 	bl	8012a28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f006 f9bb 	bl	8006dac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <SystemClock_Config+0xec>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000afc <SystemClock_Config+0xec>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a46:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <SystemClock_Config+0xec>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <SystemClock_Config+0xf0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a2a      	ldr	r2, [pc, #168]	@ (8000b00 <SystemClock_Config+0xf0>)
 8000a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <SystemClock_Config+0xf0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a68:	bf00      	nop
 8000a6a:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <SystemClock_Config+0xf0>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a76:	d1f8      	bne.n	8000a6a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a8e:	23a0      	movs	r3, #160	@ 0xa0
 8000a90:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 fa80 	bl	8006fb4 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000aba:	f000 f835 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	233f      	movs	r3, #63	@ 0x3f
 8000ac0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aca:	2308      	movs	r3, #8
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad2:	2340      	movs	r3, #64	@ 0x40
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000adc:	2340      	movs	r3, #64	@ 0x40
 8000ade:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 febf 	bl	8007868 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000af0:	f000 f81a 	bl	8000b28 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3770      	adds	r7, #112	@ 0x70
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58000400 	.word	0x58000400
 8000b00:	58024800 	.word	0x58024800

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 fb13 	bl	8001140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010000 	.word	0x40010000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <MX_QUADSPI_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b52:	2216      	movs	r2, #22
 8000b54:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_QUADSPI_Init+0x50>)
 8000b70:	f006 f966 	bl	8006e40 <HAL_QSPI_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f7ff ffd5 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240002bc 	.word	0x240002bc
 8000b88:	52005000 	.word	0x52005000

08000b8c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0bc      	sub	sp, #240	@ 0xf0
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	22c0      	movs	r2, #192	@ 0xc0
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f011 ff3b 	bl	8012a28 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a55      	ldr	r2, [pc, #340]	@ (8000d0c <HAL_QSPI_MspInit+0x180>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	f040 80a3 	bne.w	8000d04 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f007 fa16 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000bde:	f7ff ffa3 	bl	8000b28 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000be2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000be4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000be8:	4a49      	ldr	r2, [pc, #292]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000bf2:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000bf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c00:	4b43      	ldr	r3, [pc, #268]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	4a42      	ldr	r2, [pc, #264]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	4a3a      	ldr	r2, [pc, #232]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2e:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	4a33      	ldr	r2, [pc, #204]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4c:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <HAL_QSPI_MspInit+0x184>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c72:	2309      	movs	r3, #9
 8000c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4825      	ldr	r0, [pc, #148]	@ (8000d14 <HAL_QSPI_MspInit+0x188>)
 8000c80:	f004 faf6 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	481b      	ldr	r0, [pc, #108]	@ (8000d18 <HAL_QSPI_MspInit+0x18c>)
 8000caa:	f004 fae1 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000cae:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <HAL_QSPI_MspInit+0x190>)
 8000cd6:	f004 facb 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cda:	2340      	movs	r3, #64	@ 0x40
 8000cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <HAL_QSPI_MspInit+0x18c>)
 8000d00:	f004 fab6 	bl	8005270 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	37f0      	adds	r7, #240	@ 0xf0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	52005000 	.word	0x52005000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58020400 	.word	0x58020400
 8000d1c:	58020c00 	.word	0x58020c00

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_MspInit+0x38>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	210f      	movs	r1, #15
 8000d48:	f06f 0001 	mvn.w	r0, #1
 8000d4c:	f001 fe72 	bl	8002a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d844      	bhi.n	8000df4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f001 fe60 	bl	8002a34 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d74:	2019      	movs	r0, #25
 8000d76:	f001 fe77 	bl	8002a68 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d7a:	4a24      	ldr	r2, [pc, #144]	@ (8000e0c <HAL_InitTick+0xb0>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d80:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <HAL_InitTick+0xb4>)
 8000d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d86:	4a22      	ldr	r2, [pc, #136]	@ (8000e10 <HAL_InitTick+0xb4>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <HAL_InitTick+0xb4>)
 8000d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f007 f8e9 	bl	8007f80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000dae:	f007 f8d1 	bl	8007f54 <HAL_RCC_GetPCLK2Freq>
 8000db2:	4603      	mov	r3, r0
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <HAL_InitTick+0xb8>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	0c9b      	lsrs	r3, r3, #18
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_InitTick+0xc0>)
 8000dca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dd4:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dd8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000de8:	f009 fe0a 	bl	800aa00 <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <HAL_InitTick+0xa6>
 8000df2:	e001      	b.n	8000df8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e005      	b.n	8000e04 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <HAL_InitTick+0xbc>)
 8000dfa:	f009 fe63 	bl	800aac4 <HAL_TIM_Base_Start_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3738      	adds	r7, #56	@ 0x38
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000008 	.word	0x24000008
 8000e10:	58024400 	.word	0x58024400
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	24000308 	.word	0x24000308
 8000e1c:	40010000 	.word	0x40010000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <DMA1_Stream0_IRQHandler+0x10>)
 8000e5e:	f002 fef5 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	240001e4 	.word	0x240001e4

08000e6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <TIM1_UP_IRQHandler+0x10>)
 8000e72:	f009 fe9f 	bl	800abb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000308 	.word	0x24000308

08000e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <OTG_FS_IRQHandler+0x10>)
 8000e86:	f004 fe31 	bl	8005aec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	24006224 	.word	0x24006224

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f011 fe16 	bl	8012af4 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24080000 	.word	0x24080000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	24000354 	.word	0x24000354
 8000efc:	24007c90 	.word	0x24007c90

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f04:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <SystemInit+0x114>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a42      	ldr	r2, [pc, #264]	@ (8001014 <SystemInit+0x114>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f14:	4b40      	ldr	r3, [pc, #256]	@ (8001018 <SystemInit+0x118>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	2b06      	cmp	r3, #6
 8000f1e:	d807      	bhi.n	8000f30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f20:	4b3d      	ldr	r3, [pc, #244]	@ (8001018 <SystemInit+0x118>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 030f 	bic.w	r3, r3, #15
 8000f28:	4a3b      	ldr	r2, [pc, #236]	@ (8001018 <SystemInit+0x118>)
 8000f2a:	f043 0307 	orr.w	r3, r3, #7
 8000f2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f30:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <SystemInit+0x11c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a39      	ldr	r2, [pc, #228]	@ (800101c <SystemInit+0x11c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f3c:	4b37      	ldr	r3, [pc, #220]	@ (800101c <SystemInit+0x11c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <SystemInit+0x11c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4935      	ldr	r1, [pc, #212]	@ (800101c <SystemInit+0x11c>)
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <SystemInit+0x120>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <SystemInit+0x118>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <SystemInit+0x118>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 030f 	bic.w	r3, r3, #15
 8000f62:	4a2d      	ldr	r2, [pc, #180]	@ (8001018 <SystemInit+0x118>)
 8000f64:	f043 0307 	orr.w	r3, r3, #7
 8000f68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <SystemInit+0x11c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <SystemInit+0x11c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <SystemInit+0x11c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <SystemInit+0x11c>)
 8000f7e:	4a29      	ldr	r2, [pc, #164]	@ (8001024 <SystemInit+0x124>)
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <SystemInit+0x11c>)
 8000f84:	4a28      	ldr	r2, [pc, #160]	@ (8001028 <SystemInit+0x128>)
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f88:	4b24      	ldr	r3, [pc, #144]	@ (800101c <SystemInit+0x11c>)
 8000f8a:	4a28      	ldr	r2, [pc, #160]	@ (800102c <SystemInit+0x12c>)
 8000f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <SystemInit+0x11c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <SystemInit+0x11c>)
 8000f96:	4a25      	ldr	r2, [pc, #148]	@ (800102c <SystemInit+0x12c>)
 8000f98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <SystemInit+0x11c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <SystemInit+0x11c>)
 8000fa2:	4a22      	ldr	r2, [pc, #136]	@ (800102c <SystemInit+0x12c>)
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <SystemInit+0x11c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <SystemInit+0x11c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <SystemInit+0x11c>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <SystemInit+0x11c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <SystemInit+0x130>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <SystemInit+0x134>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fca:	d202      	bcs.n	8000fd2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <SystemInit+0x138>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <SystemInit+0x11c>)
 8000fd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d113      	bne.n	8001008 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <SystemInit+0x11c>)
 8000fe2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <SystemInit+0x11c>)
 8000fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <SystemInit+0x13c>)
 8000ff2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <SystemInit+0x11c>)
 8000ffa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ffe:	4a07      	ldr	r2, [pc, #28]	@ (800101c <SystemInit+0x11c>)
 8001000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001004:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	52002000 	.word	0x52002000
 800101c:	58024400 	.word	0x58024400
 8001020:	eaf6ed7f 	.word	0xeaf6ed7f
 8001024:	02020200 	.word	0x02020200
 8001028:	01ff0000 	.word	0x01ff0000
 800102c:	01010280 	.word	0x01010280
 8001030:	5c001000 	.word	0x5c001000
 8001034:	ffff0000 	.word	0xffff0000
 8001038:	51008108 	.word	0x51008108
 800103c:	52004000 	.word	0x52004000

08001040 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <ExitRun0Mode+0x2c>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <ExitRun0Mode+0x2c>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001050:	bf00      	nop
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <ExitRun0Mode+0x2c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f9      	beq.n	8001052 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	58024800 	.word	0x58024800

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010ac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001074:	f7ff ffe4 	bl	8001040 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001078:	f7ff ff42 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f011 fd2d 	bl	8012b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fc99 	bl	80009dc <main>
  bx  lr
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b4:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 80010b8:	08014048 	.word	0x08014048
  ldr r2, =_sbss
 80010bc:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 80010c0:	24007c90 	.word	0x24007c90

080010c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC3_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f001 fca5 	bl	8002a1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010d4:	f006 fd7e 	bl	8007bd4 <HAL_RCC_GetSysClockFreq>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_Init+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	4913      	ldr	r1, [pc, #76]	@ (8001134 <HAL_Init+0x6c>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_Init+0x6c>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <HAL_Init+0x70>)
 800110a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_Init+0x74>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	200f      	movs	r0, #15
 8001114:	f7ff fe22 	bl	8000d5c <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e002      	b.n	8001128 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001122:	f7ff fdfd 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58024400 	.word	0x58024400
 8001134:	08013ed0 	.word	0x08013ed0
 8001138:	24000004 	.word	0x24000004
 800113c:	24000000 	.word	0x24000000

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2400000c 	.word	0x2400000c
 8001164:	24000358 	.word	0x24000358

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	24000358 	.word	0x24000358

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2400000c 	.word	0x2400000c

080011c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetREVID+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	5c001000 	.word	0x5c001000

080011e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <LL_ADC_SetChannelPreselection+0x24>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	0e9b      	lsrs	r3, r3, #26
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	e015      	b.n	8001298 <LL_ADC_SetChannelPreselection+0x50>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001282:	2320      	movs	r3, #32
 8001284:	e003      	b.n	800128e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	2201      	movs	r2, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	69d2      	ldr	r2, [r2, #28]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b087      	sub	sp, #28
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3360      	adds	r3, #96	@ 0x60
 80012c0:	461a      	mov	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	430b      	orrs	r3, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	431a      	orrs	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	611a      	str	r2, [r3, #16]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3360      	adds	r3, #96	@ 0x60
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
  }
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3330      	adds	r3, #48	@ 0x30
 800138c:	461a      	mov	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	211f      	movs	r1, #31
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0e9b      	lsrs	r3, r3, #26
 80013b4:	f003 011f 	and.w	r1, r3, #31
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	431a      	orrs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013c8:	bf00      	nop
 80013ca:	371c      	adds	r7, #28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f023 0203 	bic.w	r2, r3, #3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60da      	str	r2, [r3, #12]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b087      	sub	sp, #28
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3314      	adds	r3, #20
 800140a:	461a      	mov	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	0e5b      	lsrs	r3, r3, #25
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	0d1b      	lsrs	r3, r3, #20
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2107      	movs	r1, #7
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	0d1b      	lsrs	r3, r3, #20
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0318 	and.w	r3, r3, #24
 8001472:	4908      	ldr	r1, [pc, #32]	@ (8001494 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001474:	40d9      	lsrs	r1, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	400b      	ands	r3, r1
 800147a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800147e:	431a      	orrs	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	000fffff 	.word	0x000fffff

08001498 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 031f 	and.w	r3, r3, #31
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6093      	str	r3, [r2, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	5fffffc0 	.word	0x5fffffc0

080014d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014ec:	d101      	bne.n	80014f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <LL_ADC_EnableInternalRegulator+0x24>)
 800150e:	4013      	ands	r3, r2
 8001510:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	6fffffc0 	.word	0x6fffffc0

08001528 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800153c:	d101      	bne.n	8001542 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <LL_ADC_Enable+0x24>)
 800155e:	4013      	ands	r3, r2
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	7fffffc0 	.word	0x7fffffc0

08001578 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <LL_ADC_Disable+0x24>)
 8001586:	4013      	ands	r3, r2
 8001588:	f043 0202 	orr.w	r2, r3, #2
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	7fffffc0 	.word	0x7fffffc0

080015a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_IsEnabled+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_IsEnabled+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d101      	bne.n	80015de <LL_ADC_IsDisableOngoing+0x18>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_ADC_IsDisableOngoing+0x1a>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <LL_ADC_REG_StartConversion+0x24>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	f043 0204 	orr.w	r2, r3, #4
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	7fffffc0 	.word	0x7fffffc0

08001614 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <LL_ADC_REG_StopConversion+0x24>)
 8001622:	4013      	ands	r3, r2
 8001624:	f043 0210 	orr.w	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	7fffffc0 	.word	0x7fffffc0

0800163c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b04      	cmp	r3, #4
 800164e:	d101      	bne.n	8001654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <LL_ADC_INJ_StopConversion+0x24>)
 8001672:	4013      	ands	r3, r2
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	7fffffc0 	.word	0x7fffffc0

0800168c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b08      	cmp	r3, #8
 800169e:	d101      	bne.n	80016a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e18f      	b.n	80019ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fec9 	bl	8000474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff feef 	bl	80014d8 <LL_ADC_IsDeepPowerDownEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fed5 	bl	80014b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff0a 	bl	8001528 <LL_ADC_IsInternalRegulatorEnabled>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d114      	bne.n	8001744 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff feee 	bl	8001500 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001724:	4b87      	ldr	r3, [pc, #540]	@ (8001944 <HAL_ADC_Init+0x290>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	4a87      	ldr	r2, [pc, #540]	@ (8001948 <HAL_ADC_Init+0x294>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001736:	e002      	b.n	800173e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3b01      	subs	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff feed 	bl	8001528 <LL_ADC_IsInternalRegulatorEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001758:	f043 0210 	orr.w	r2, r3, #16
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff61 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 800177a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 8129 	bne.w	80019dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 8125 	bne.w	80019dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001796:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fefa 	bl	80015a0 <LL_ADC_IsEnabled>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d136      	bne.n	8001820 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_ADC_Init+0x298>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d004      	beq.n	80017c6 <HAL_ADC_Init+0x112>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a63      	ldr	r2, [pc, #396]	@ (8001950 <HAL_ADC_Init+0x29c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10e      	bne.n	80017e4 <HAL_ADC_Init+0x130>
 80017c6:	4861      	ldr	r0, [pc, #388]	@ (800194c <HAL_ADC_Init+0x298>)
 80017c8:	f7ff feea 	bl	80015a0 <LL_ADC_IsEnabled>
 80017cc:	4604      	mov	r4, r0
 80017ce:	4860      	ldr	r0, [pc, #384]	@ (8001950 <HAL_ADC_Init+0x29c>)
 80017d0:	f7ff fee6 	bl	80015a0 <LL_ADC_IsEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4323      	orrs	r3, r4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e008      	b.n	80017f6 <HAL_ADC_Init+0x142>
 80017e4:	485b      	ldr	r0, [pc, #364]	@ (8001954 <HAL_ADC_Init+0x2a0>)
 80017e6:	f7ff fedb 	bl	80015a0 <LL_ADC_IsEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a53      	ldr	r2, [pc, #332]	@ (800194c <HAL_ADC_Init+0x298>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_ADC_Init+0x15a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a51      	ldr	r2, [pc, #324]	@ (8001950 <HAL_ADC_Init+0x29c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x15e>
 800180e:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_ADC_Init+0x2a4>)
 8001810:	e000      	b.n	8001814 <HAL_ADC_Init+0x160>
 8001812:	4a52      	ldr	r2, [pc, #328]	@ (800195c <HAL_ADC_Init+0x2a8>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fce0 	bl	80011e0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001820:	f7ff fcd2 	bl	80011c8 <HAL_GetREVID>
 8001824:	4603      	mov	r3, r0
 8001826:	f241 0203 	movw	r2, #4099	@ 0x1003
 800182a:	4293      	cmp	r3, r2
 800182c:	d914      	bls.n	8001858 <HAL_ADC_Init+0x1a4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d110      	bne.n	8001858 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7d5b      	ldrb	r3, [r3, #21]
 800183a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001840:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001846:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7f1b      	ldrb	r3, [r3, #28]
 800184c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800184e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001850:	f043 030c 	orr.w	r3, r3, #12
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	e00d      	b.n	8001874 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7d5b      	ldrb	r3, [r3, #21]
 800185c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001862:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001868:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7f1b      	ldrb	r3, [r3, #28]
 800186e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7f1b      	ldrb	r3, [r3, #28]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d106      	bne.n	800188a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	3b01      	subs	r3, #1
 8001882:	045b      	lsls	r3, r3, #17
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <HAL_ADC_Init+0x2ac>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	69b9      	ldr	r1, [r7, #24]
 80018b6:	430b      	orrs	r3, r1
 80018b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff febc 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 80018c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fede 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 80018d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d15f      	bne.n	8001998 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d15c      	bne.n	8001998 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7d1b      	ldrb	r3, [r3, #20]
 80018e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <HAL_ADC_Init+0x2b0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001906:	2b01      	cmp	r3, #1
 8001908:	d130      	bne.n	800196c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_ADC_Init+0x2b4>)
 8001918:	4013      	ands	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800191e:	3a01      	subs	r2, #1
 8001920:	0411      	lsls	r1, r2, #16
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001932:	430a      	orrs	r2, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	e01c      	b.n	800197c <HAL_ADC_Init+0x2c8>
 8001942:	bf00      	nop
 8001944:	24000000 	.word	0x24000000
 8001948:	053e2d63 	.word	0x053e2d63
 800194c:	40022000 	.word	0x40022000
 8001950:	40022100 	.word	0x40022100
 8001954:	58026000 	.word	0x58026000
 8001958:	40022300 	.word	0x40022300
 800195c:	58026300 	.word	0x58026300
 8001960:	fff0c003 	.word	0xfff0c003
 8001964:	ffffbffc 	.word	0xffffbffc
 8001968:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fe8a 	bl	80026ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10c      	bne.n	80019ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f023 010f 	bic.w	r1, r3, #15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	1e5a      	subs	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b8:	e007      	b.n	80019ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 020f 	bic.w	r2, r2, #15
 80019c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80019da:	e007      	b.n	80019ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop

080019f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a55      	ldr	r2, [pc, #340]	@ (8001b60 <HAL_ADC_Start_DMA+0x168>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_Start_DMA+0x20>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a54      	ldr	r2, [pc, #336]	@ (8001b64 <HAL_ADC_Start_DMA+0x16c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_Start_DMA+0x24>
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_ADC_Start_DMA+0x170>)
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_Start_DMA+0x26>
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <HAL_ADC_Start_DMA+0x174>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fd3a 	bl	8001498 <LL_ADC_GetMultimode>
 8001a24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe06 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 808c 	bne.w	8001b50 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Start_DMA+0x4e>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e087      	b.n	8001b56 <HAL_ADC_Start_DMA+0x15e>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d002      	beq.n	8001a60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	d170      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fca5 	bl	80023b0 <ADC_Enable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d163      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a74:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <HAL_ADC_Start_DMA+0x178>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a37      	ldr	r2, [pc, #220]	@ (8001b64 <HAL_ADC_Start_DMA+0x16c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d002      	beq.n	8001a90 <HAL_ADC_Start_DMA+0x98>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e000      	b.n	8001a92 <HAL_ADC_Start_DMA+0x9a>
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <HAL_ADC_Start_DMA+0x168>)
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d002      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abc:	f023 0206 	bic.w	r2, r3, #6
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <HAL_ADC_Start_DMA+0x17c>)
 8001ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_ADC_Start_DMA+0x180>)
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	4a26      	ldr	r2, [pc, #152]	@ (8001b7c <HAL_ADC_Start_DMA+0x184>)
 8001ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	221c      	movs	r2, #28
 8001aea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0210 	orr.w	r2, r2, #16
 8001b02:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f7ff fc60 	bl	80013d4 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3340      	adds	r3, #64	@ 0x40
 8001b1e:	4619      	mov	r1, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f001 fb0a 	bl	800313c <HAL_DMA_Start_IT>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fd5b 	bl	80015ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b36:	e00d      	b.n	8001b54 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001b40:	e008      	b.n	8001b54 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
 8001b52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40022100 	.word	0x40022100
 8001b68:	40022300 	.word	0x40022300
 8001b6c:	58026300 	.word	0x58026300
 8001b70:	fffff0fe 	.word	0xfffff0fe
 8001b74:	08002583 	.word	0x08002583
 8001b78:	0800265b 	.word	0x0800265b
 8001b7c:	08002677 	.word	0x08002677

08001b80 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Stop_DMA+0x16>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e04f      	b.n	8001c36 <HAL_ADC_Stop_DMA+0xb6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fb49 	bl	8002238 <ADC_ConversionStop>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13d      	bne.n	8001c2c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0203 	bic.w	r2, r2, #3
 8001bbe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d10f      	bne.n	8001bee <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fd1c 	bl	8003610 <HAL_DMA_Abort>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0210 	bic.w	r2, r2, #16
 8001bfc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fc5d 	bl	80024c4 <ADC_Disable>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fc57 	bl	80024c4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_ADC_Stop_DMA+0xc0>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	ffffeefe 	.word	0xffffeefe

08001c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b08d      	sub	sp, #52	@ 0x34
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_ADC_ConfigChannel+0x1b0>)
 8001c72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x2a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e2c7      	b.n	8002212 <HAL_ADC_ConfigChannel+0x5ba>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fcd4 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 82ac 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db2c      	blt.n	8001cfe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x98>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	613b      	str	r3, [r7, #16]
  return result;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	69d1      	ldr	r1, [r2, #28]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fb36 	bl	800137c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fc91 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fcb3 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8001d26:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 80b8 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80b4 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff fb58 	bl	80013fa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1b4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d56:	d10b      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x118>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x13e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	e00a      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d02c      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f7ff fa73 	bl	80012ae <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7e5b      	ldrb	r3, [r3, #25]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x186>
 8001dd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x188>
 8001dde:	2300      	movs	r3, #0
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fa9d 	bl	8001320 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7e1b      	ldrb	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1a4>
 8001df6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1a6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f7ff fa75 	bl	80012ee <LL_ADC_SetDataRightShift>
 8001e04:	e04c      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
 8001e06:	bf00      	nop
 8001e08:	47ff0000 	.word	0x47ff0000
 8001e0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb7b 	bl	80015a0 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 81aa 	bne.w	8002206 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fac6 	bl	8001450 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a87      	ldr	r2, [pc, #540]	@ (80020e8 <HAL_ADC_ConfigChannel+0x490>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 809a 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4984      	ldr	r1, [pc, #528]	@ (80020ec <HAL_ADC_ConfigChannel+0x494>)
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d147      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x316>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4983      	ldr	r1, [pc, #524]	@ (80020f0 <HAL_ADC_ConfigChannel+0x498>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d040      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x312>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4981      	ldr	r1, [pc, #516]	@ (80020f4 <HAL_ADC_ConfigChannel+0x49c>)
 8001eee:	428b      	cmp	r3, r1
 8001ef0:	d039      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x30e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4980      	ldr	r1, [pc, #512]	@ (80020f8 <HAL_ADC_ConfigChannel+0x4a0>)
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	d032      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x30a>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	497e      	ldr	r1, [pc, #504]	@ (80020fc <HAL_ADC_ConfigChannel+0x4a4>)
 8001f02:	428b      	cmp	r3, r1
 8001f04:	d02b      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x306>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	497d      	ldr	r1, [pc, #500]	@ (8002100 <HAL_ADC_ConfigChannel+0x4a8>)
 8001f0c:	428b      	cmp	r3, r1
 8001f0e:	d024      	beq.n	8001f5a <HAL_ADC_ConfigChannel+0x302>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	497b      	ldr	r1, [pc, #492]	@ (8002104 <HAL_ADC_ConfigChannel+0x4ac>)
 8001f16:	428b      	cmp	r3, r1
 8001f18:	d01d      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0x2fe>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	497a      	ldr	r1, [pc, #488]	@ (8002108 <HAL_ADC_ConfigChannel+0x4b0>)
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d016      	beq.n	8001f52 <HAL_ADC_ConfigChannel+0x2fa>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4978      	ldr	r1, [pc, #480]	@ (800210c <HAL_ADC_ConfigChannel+0x4b4>)
 8001f2a:	428b      	cmp	r3, r1
 8001f2c:	d00f      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x2f6>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4977      	ldr	r1, [pc, #476]	@ (8002110 <HAL_ADC_ConfigChannel+0x4b8>)
 8001f34:	428b      	cmp	r3, r1
 8001f36:	d008      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x2f2>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4975      	ldr	r1, [pc, #468]	@ (8002114 <HAL_ADC_ConfigChannel+0x4bc>)
 8001f3e:	428b      	cmp	r3, r1
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x2ee>
 8001f42:	4b75      	ldr	r3, [pc, #468]	@ (8002118 <HAL_ADC_ConfigChannel+0x4c0>)
 8001f44:	e05a      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f46:	2300      	movs	r3, #0
 8001f48:	e058      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f4a:	4b74      	ldr	r3, [pc, #464]	@ (800211c <HAL_ADC_ConfigChannel+0x4c4>)
 8001f4c:	e056      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f4e:	4b74      	ldr	r3, [pc, #464]	@ (8002120 <HAL_ADC_ConfigChannel+0x4c8>)
 8001f50:	e054      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f52:	4b6e      	ldr	r3, [pc, #440]	@ (800210c <HAL_ADC_ConfigChannel+0x4b4>)
 8001f54:	e052      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f56:	4b6c      	ldr	r3, [pc, #432]	@ (8002108 <HAL_ADC_ConfigChannel+0x4b0>)
 8001f58:	e050      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	@ (8002124 <HAL_ADC_ConfigChannel+0x4cc>)
 8001f5c:	e04e      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f5e:	4b72      	ldr	r3, [pc, #456]	@ (8002128 <HAL_ADC_ConfigChannel+0x4d0>)
 8001f60:	e04c      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f62:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_ADC_ConfigChannel+0x4d4>)
 8001f64:	e04a      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f66:	4b72      	ldr	r3, [pc, #456]	@ (8002130 <HAL_ADC_ConfigChannel+0x4d8>)
 8001f68:	e048      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e046      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4970      	ldr	r1, [pc, #448]	@ (8002134 <HAL_ADC_ConfigChannel+0x4dc>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d140      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x3a2>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	495c      	ldr	r1, [pc, #368]	@ (80020f0 <HAL_ADC_ConfigChannel+0x498>)
 8001f7e:	428b      	cmp	r3, r1
 8001f80:	d039      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x39e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	495b      	ldr	r1, [pc, #364]	@ (80020f4 <HAL_ADC_ConfigChannel+0x49c>)
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d032      	beq.n	8001ff2 <HAL_ADC_ConfigChannel+0x39a>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4959      	ldr	r1, [pc, #356]	@ (80020f8 <HAL_ADC_ConfigChannel+0x4a0>)
 8001f92:	428b      	cmp	r3, r1
 8001f94:	d02b      	beq.n	8001fee <HAL_ADC_ConfigChannel+0x396>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4958      	ldr	r1, [pc, #352]	@ (80020fc <HAL_ADC_ConfigChannel+0x4a4>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d024      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x392>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4956      	ldr	r1, [pc, #344]	@ (8002100 <HAL_ADC_ConfigChannel+0x4a8>)
 8001fa6:	428b      	cmp	r3, r1
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x38e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4955      	ldr	r1, [pc, #340]	@ (8002104 <HAL_ADC_ConfigChannel+0x4ac>)
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d016      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x38a>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4953      	ldr	r1, [pc, #332]	@ (8002108 <HAL_ADC_ConfigChannel+0x4b0>)
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d00f      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x386>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4952      	ldr	r1, [pc, #328]	@ (800210c <HAL_ADC_ConfigChannel+0x4b4>)
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d008      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x382>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4951      	ldr	r1, [pc, #324]	@ (8002114 <HAL_ADC_ConfigChannel+0x4bc>)
 8001fce:	428b      	cmp	r3, r1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x37e>
 8001fd2:	4b51      	ldr	r3, [pc, #324]	@ (8002118 <HAL_ADC_ConfigChannel+0x4c0>)
 8001fd4:	e012      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e010      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fda:	4b51      	ldr	r3, [pc, #324]	@ (8002120 <HAL_ADC_ConfigChannel+0x4c8>)
 8001fdc:	e00e      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fde:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_ADC_ConfigChannel+0x4b4>)
 8001fe0:	e00c      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fe2:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <HAL_ADC_ConfigChannel+0x4b0>)
 8001fe4:	e00a      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8002124 <HAL_ADC_ConfigChannel+0x4cc>)
 8001fe8:	e008      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fea:	4b4f      	ldr	r3, [pc, #316]	@ (8002128 <HAL_ADC_ConfigChannel+0x4d0>)
 8001fec:	e006      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001fee:	4b4f      	ldr	r3, [pc, #316]	@ (800212c <HAL_ADC_ConfigChannel+0x4d4>)
 8001ff0:	e004      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8002130 <HAL_ADC_ConfigChannel+0x4d8>)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x3a4>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f7ff f922 	bl	8001248 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f280 80fc 	bge.w	8002206 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a36      	ldr	r2, [pc, #216]	@ (80020ec <HAL_ADC_ConfigChannel+0x494>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x3ca>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a45      	ldr	r2, [pc, #276]	@ (8002134 <HAL_ADC_ConfigChannel+0x4dc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x3ce>
 8002022:	4b45      	ldr	r3, [pc, #276]	@ (8002138 <HAL_ADC_ConfigChannel+0x4e0>)
 8002024:	e000      	b.n	8002028 <HAL_ADC_ConfigChannel+0x3d0>
 8002026:	4b45      	ldr	r3, [pc, #276]	@ (800213c <HAL_ADC_ConfigChannel+0x4e4>)
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f8ff 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 800202e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_ADC_ConfigChannel+0x494>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x3ec>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3d      	ldr	r2, [pc, #244]	@ (8002134 <HAL_ADC_ConfigChannel+0x4dc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d10e      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x40a>
 8002044:	4829      	ldr	r0, [pc, #164]	@ (80020ec <HAL_ADC_ConfigChannel+0x494>)
 8002046:	f7ff faab 	bl	80015a0 <LL_ADC_IsEnabled>
 800204a:	4604      	mov	r4, r0
 800204c:	4839      	ldr	r0, [pc, #228]	@ (8002134 <HAL_ADC_ConfigChannel+0x4dc>)
 800204e:	f7ff faa7 	bl	80015a0 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	4323      	orrs	r3, r4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e008      	b.n	8002074 <HAL_ADC_ConfigChannel+0x41c>
 8002062:	4837      	ldr	r0, [pc, #220]	@ (8002140 <HAL_ADC_ConfigChannel+0x4e8>)
 8002064:	f7ff fa9c 	bl	80015a0 <LL_ADC_IsEnabled>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80b3 	beq.w	80021e0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a31      	ldr	r2, [pc, #196]	@ (8002144 <HAL_ADC_ConfigChannel+0x4ec>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d165      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x4f8>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d160      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2b      	ldr	r2, [pc, #172]	@ (8002140 <HAL_ADC_ConfigChannel+0x4e8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f040 80b6 	bne.w	8002206 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <HAL_ADC_ConfigChannel+0x494>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x456>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a22      	ldr	r2, [pc, #136]	@ (8002134 <HAL_ADC_ConfigChannel+0x4dc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x45a>
 80020ae:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_ADC_ConfigChannel+0x4e0>)
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x45c>
 80020b2:	4a22      	ldr	r2, [pc, #136]	@ (800213c <HAL_ADC_ConfigChannel+0x4e4>)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f7ff f8a2 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_ADC_ConfigChannel+0x4f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	4a20      	ldr	r2, [pc, #128]	@ (800214c <HAL_ADC_ConfigChannel+0x4f4>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	3301      	adds	r3, #1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80020d6:	e002      	b.n	80020de <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e4:	e08f      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
 80020e6:	bf00      	nop
 80020e8:	47ff0000 	.word	0x47ff0000
 80020ec:	40022000 	.word	0x40022000
 80020f0:	04300002 	.word	0x04300002
 80020f4:	08600004 	.word	0x08600004
 80020f8:	0c900008 	.word	0x0c900008
 80020fc:	10c00010 	.word	0x10c00010
 8002100:	14f00020 	.word	0x14f00020
 8002104:	2a000400 	.word	0x2a000400
 8002108:	2e300800 	.word	0x2e300800
 800210c:	32601000 	.word	0x32601000
 8002110:	43210000 	.word	0x43210000
 8002114:	4b840000 	.word	0x4b840000
 8002118:	4fb80000 	.word	0x4fb80000
 800211c:	47520000 	.word	0x47520000
 8002120:	36902000 	.word	0x36902000
 8002124:	25b00200 	.word	0x25b00200
 8002128:	21800100 	.word	0x21800100
 800212c:	1d500080 	.word	0x1d500080
 8002130:	19200040 	.word	0x19200040
 8002134:	40022100 	.word	0x40022100
 8002138:	40022300 	.word	0x40022300
 800213c:	58026300 	.word	0x58026300
 8002140:	58026000 	.word	0x58026000
 8002144:	cb840000 	.word	0xcb840000
 8002148:	24000000 	.word	0x24000000
 800214c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a31      	ldr	r2, [pc, #196]	@ (800221c <HAL_ADC_ConfigChannel+0x5c4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11e      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x540>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d119      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2d      	ldr	r2, [pc, #180]	@ (8002220 <HAL_ADC_ConfigChannel+0x5c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d14b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <HAL_ADC_ConfigChannel+0x5cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x52a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <HAL_ADC_ConfigChannel+0x5d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x52e>
 8002182:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <HAL_ADC_ConfigChannel+0x5d4>)
 8002184:	e000      	b.n	8002188 <HAL_ADC_ConfigChannel+0x530>
 8002186:	4a2a      	ldr	r2, [pc, #168]	@ (8002230 <HAL_ADC_ConfigChannel+0x5d8>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f7ff f838 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002196:	e036      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a25      	ldr	r2, [pc, #148]	@ (8002234 <HAL_ADC_ConfigChannel+0x5dc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d131      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12c      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002220 <HAL_ADC_ConfigChannel+0x5c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d127      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002224 <HAL_ADC_ConfigChannel+0x5cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_ADC_ConfigChannel+0x572>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a18      	ldr	r2, [pc, #96]	@ (8002228 <HAL_ADC_ConfigChannel+0x5d0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x576>
 80021ca:	4a18      	ldr	r2, [pc, #96]	@ (800222c <HAL_ADC_ConfigChannel+0x5d4>)
 80021cc:	e000      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x578>
 80021ce:	4a18      	ldr	r2, [pc, #96]	@ (8002230 <HAL_ADC_ConfigChannel+0x5d8>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d6:	4619      	mov	r1, r3
 80021d8:	4610      	mov	r0, r2
 80021da:	f7ff f814 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
 80021de:	e012      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021f2:	e008      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800220e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002212:	4618      	mov	r0, r3
 8002214:	3734      	adds	r7, #52	@ 0x34
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	c7520000 	.word	0xc7520000
 8002220:	58026000 	.word	0x58026000
 8002224:	40022000 	.word	0x40022000
 8002228:	40022100 	.word	0x40022100
 800222c:	40022300 	.word	0x40022300
 8002230:	58026300 	.word	0x58026300
 8002234:	cfb80000 	.word	0xcfb80000

08002238 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f9f4 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 8002254:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fa16 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8002260:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8098 	beq.w	80023a0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d02a      	beq.n	80022d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	7d5b      	ldrb	r3, [r3, #21]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d126      	bne.n	80022d4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7d1b      	ldrb	r3, [r3, #20]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d122      	bne.n	80022d4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002292:	e014      	b.n	80022be <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4a45      	ldr	r2, [pc, #276]	@ (80023ac <ADC_ConversionStop+0x174>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d90d      	bls.n	80022b8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f043 0210 	orr.w	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e074      	b.n	80023a2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c8:	2b40      	cmp	r3, #64	@ 0x40
 80022ca:	d1e3      	bne.n	8002294 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2240      	movs	r2, #64	@ 0x40
 80022d2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d014      	beq.n	8002304 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff f9ac 	bl	800163c <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f969 	bl	80015c6 <LL_ADC_IsDisableOngoing>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f988 	bl	8001614 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d014      	beq.n	8002334 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9bc 	bl	800168c <LL_ADC_INJ_IsConversionOngoing>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f951 	bl	80015c6 <LL_ADC_IsDisableOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f998 	bl	8001664 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d005      	beq.n	8002346 <ADC_ConversionStop+0x10e>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d105      	bne.n	800234c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002340:	230c      	movs	r3, #12
 8002342:	617b      	str	r3, [r7, #20]
        break;
 8002344:	e005      	b.n	8002352 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002346:	2308      	movs	r3, #8
 8002348:	617b      	str	r3, [r7, #20]
        break;
 800234a:	e002      	b.n	8002352 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800234c:	2304      	movs	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
        break;
 8002350:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002352:	f7fe ff09 	bl	8001168 <HAL_GetTick>
 8002356:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002358:	e01b      	b.n	8002392 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800235a:	f7fe ff05 	bl	8001168 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b05      	cmp	r3, #5
 8002366:	d914      	bls.n	8002392 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1dc      	bne.n	800235a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	000cdbff 	.word	0x000cdbff

080023b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f8ef 	bl	80015a0 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d16e      	bne.n	80024a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <ADC_Enable+0x100>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e05a      	b.n	80024a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f8aa 	bl	8001550 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023fc:	f7fe feb4 	bl	8001168 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <ADC_Enable+0x104>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <ADC_Enable+0x66>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <ADC_Enable+0x108>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <ADC_Enable+0x6a>
 8002416:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <ADC_Enable+0x10c>)
 8002418:	e000      	b.n	800241c <ADC_Enable+0x6c>
 800241a:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <ADC_Enable+0x110>)
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f83b 	bl	8001498 <LL_ADC_GetMultimode>
 8002422:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <ADC_Enable+0x108>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d002      	beq.n	8002434 <ADC_Enable+0x84>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e000      	b.n	8002436 <ADC_Enable+0x86>
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <ADC_Enable+0x104>)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4293      	cmp	r3, r2
 800243c:	d02c      	beq.n	8002498 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d130      	bne.n	80024a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002444:	e028      	b.n	8002498 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f8a8 	bl	80015a0 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f878 	bl	8001550 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002460:	f7fe fe82 	bl	8001168 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d914      	bls.n	8002498 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d00d      	beq.n	8002498 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002480:	f043 0210 	orr.w	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e007      	b.n	80024a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d1cf      	bne.n	8002446 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	8000003f 	.word	0x8000003f
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40022100 	.word	0x40022100
 80024bc:	40022300 	.word	0x40022300
 80024c0:	58026300 	.word	0x58026300

080024c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f878 	bl	80015c6 <LL_ADC_IsDisableOngoing>
 80024d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f85f 	bl	80015a0 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d047      	beq.n	8002578 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d144      	bne.n	8002578 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030d 	and.w	r3, r3, #13
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10c      	bne.n	8002516 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff f839 	bl	8001578 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2203      	movs	r2, #3
 800250c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800250e:	f7fe fe2b 	bl	8001168 <HAL_GetTick>
 8002512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002514:	e029      	b.n	800256a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e023      	b.n	800257a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002532:	f7fe fe19 	bl	8001168 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d914      	bls.n	800256a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002552:	f043 0210 	orr.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e007      	b.n	800257a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1dc      	bne.n	8002532 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002598:	2b00      	cmp	r3, #0
 800259a:	d14b      	bne.n	8002634 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d021      	beq.n	80025fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fecb 	bl	8001356 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d032      	beq.n	800262c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d12b      	bne.n	800262c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11f      	bne.n	800262c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80025f8:	e018      	b.n	800262c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7fd ff9f 	bl	8000570 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002632:	e00e      	b.n	8002652 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7fd ffab 	bl	800059c <HAL_ADC_ErrorCallback>
}
 8002646:	e004      	b.n	8002652 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff faeb 	bl	8001c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fd ff7d 	bl	800059c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7a      	ldr	r2, [pc, #488]	@ (80028a4 <ADC_ConfigureBoostMode+0x1f8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x1c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a79      	ldr	r2, [pc, #484]	@ (80028a8 <ADC_ConfigureBoostMode+0x1fc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d109      	bne.n	80026dc <ADC_ConfigureBoostMode+0x30>
 80026c8:	4b78      	ldr	r3, [pc, #480]	@ (80028ac <ADC_ConfigureBoostMode+0x200>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e008      	b.n	80026ee <ADC_ConfigureBoostMode+0x42>
 80026dc:	4b74      	ldr	r3, [pc, #464]	@ (80028b0 <ADC_ConfigureBoostMode+0x204>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026f2:	f005 fbe9 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 80026f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002700:	d010      	beq.n	8002724 <ADC_ConfigureBoostMode+0x78>
 8002702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002706:	d873      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x144>
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270c:	d002      	beq.n	8002714 <ADC_ConfigureBoostMode+0x68>
 800270e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002712:	d16d      	bne.n	80027f0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	60fb      	str	r3, [r7, #12]
        break;
 8002722:	e068      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	60fb      	str	r3, [r7, #12]
        break;
 800272a:	e064      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800272c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	f006 fe70 	bl	8009418 <HAL_RCCEx_GetPeriphCLKFreq>
 8002738:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002742:	d051      	beq.n	80027e8 <ADC_ConfigureBoostMode+0x13c>
 8002744:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002748:	d854      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 800274a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800274e:	d047      	beq.n	80027e0 <ADC_ConfigureBoostMode+0x134>
 8002750:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002754:	d84e      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 8002756:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800275a:	d03d      	beq.n	80027d8 <ADC_ConfigureBoostMode+0x12c>
 800275c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002760:	d848      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 8002762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002766:	d033      	beq.n	80027d0 <ADC_ConfigureBoostMode+0x124>
 8002768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800276c:	d842      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 800276e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002772:	d029      	beq.n	80027c8 <ADC_ConfigureBoostMode+0x11c>
 8002774:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002778:	d83c      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 800277a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800277e:	d01a      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 8002780:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002784:	d836      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 8002786:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800278a:	d014      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 800278c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002790:	d830      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002796:	d00e      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 8002798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800279c:	d82a      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 800279e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027a2:	d008      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 80027a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027a8:	d824      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x148>
 80027aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027ae:	d002      	beq.n	80027b6 <ADC_ConfigureBoostMode+0x10a>
 80027b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027b4:	d11e      	bne.n	80027f4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	60fb      	str	r3, [r7, #12]
        break;
 80027c6:	e016      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
        break;
 80027ce:	e012      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	60fb      	str	r3, [r7, #12]
        break;
 80027d6:	e00e      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	60fb      	str	r3, [r7, #12]
        break;
 80027de:	e00a      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	09db      	lsrs	r3, r3, #7
 80027e4:	60fb      	str	r3, [r7, #12]
        break;
 80027e6:	e006      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	60fb      	str	r3, [r7, #12]
        break;
 80027ee:	e002      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027f4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027f6:	f7fe fce7 	bl	80011c8 <HAL_GetREVID>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002800:	4293      	cmp	r3, r2
 8002802:	d815      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a2b      	ldr	r2, [pc, #172]	@ (80028b4 <ADC_ConfigureBoostMode+0x208>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d908      	bls.n	800281e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800281a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800281c:	e03e      	b.n	800289c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	e035      	b.n	800289c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a1f      	ldr	r2, [pc, #124]	@ (80028b8 <ADC_ConfigureBoostMode+0x20c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d808      	bhi.n	8002850 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800284c:	609a      	str	r2, [r3, #8]
}
 800284e:	e025      	b.n	800289c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <ADC_ConfigureBoostMode+0x210>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d80a      	bhi.n	800286e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	e016      	b.n	800289c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <ADC_ConfigureBoostMode+0x214>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d80a      	bhi.n	800288c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	e007      	b.n	800289c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40022100 	.word	0x40022100
 80028ac:	40022300 	.word	0x40022300
 80028b0:	58026300 	.word	0x58026300
 80028b4:	01312d00 	.word	0x01312d00
 80028b8:	005f5e10 	.word	0x005f5e10
 80028bc:	00bebc20 	.word	0x00bebc20
 80028c0:	017d7840 	.word	0x017d7840

080028c4 <__NVIC_SetPriorityGrouping>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <__NVIC_SetPriorityGrouping+0x40>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f2:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <__NVIC_SetPriorityGrouping+0x40>)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	60d3      	str	r3, [r2, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	05fa0000 	.word	0x05fa0000

0800290c <__NVIC_GetPriorityGrouping>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	@ (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff4c 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a42:	f7ff ff63 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	6978      	ldr	r0, [r7, #20]
 8002a4e:	f7ff ffb3 	bl	80029b8 <NVIC_EncodePriority>
 8002a52:	4602      	mov	r2, r0
 8002a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff82 	bl	8002964 <__NVIC_SetPriority>
}
 8002a60:	bf00      	nop
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff56 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7fe fb6c 	bl	8001168 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e316      	b.n	80030ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a66      	ldr	r2, [pc, #408]	@ (8002c3c <HAL_DMA_Init+0x1b8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <HAL_DMA_Init+0x1bc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a63      	ldr	r2, [pc, #396]	@ (8002c44 <HAL_DMA_Init+0x1c0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a62      	ldr	r2, [pc, #392]	@ (8002c48 <HAL_DMA_Init+0x1c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a60      	ldr	r2, [pc, #384]	@ (8002c4c <HAL_DMA_Init+0x1c8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c50 <HAL_DMA_Init+0x1cc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c54 <HAL_DMA_Init+0x1d0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <HAL_DMA_Init+0x1d4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c5c <HAL_DMA_Init+0x1d8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a59      	ldr	r2, [pc, #356]	@ (8002c60 <HAL_DMA_Init+0x1dc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <HAL_DMA_Init+0x1e0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a56      	ldr	r2, [pc, #344]	@ (8002c68 <HAL_DMA_Init+0x1e4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a54      	ldr	r2, [pc, #336]	@ (8002c6c <HAL_DMA_Init+0x1e8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a53      	ldr	r2, [pc, #332]	@ (8002c70 <HAL_DMA_Init+0x1ec>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a51      	ldr	r2, [pc, #324]	@ (8002c74 <HAL_DMA_Init+0x1f0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_Init+0xb8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a50      	ldr	r2, [pc, #320]	@ (8002c78 <HAL_DMA_Init+0x1f4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_DMA_Init+0xbc>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_Init+0xbe>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 813b 	beq.w	8002dbe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a37      	ldr	r2, [pc, #220]	@ (8002c3c <HAL_DMA_Init+0x1b8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04a      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a36      	ldr	r2, [pc, #216]	@ (8002c40 <HAL_DMA_Init+0x1bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d045      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	@ (8002c44 <HAL_DMA_Init+0x1c0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d040      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a33      	ldr	r2, [pc, #204]	@ (8002c48 <HAL_DMA_Init+0x1c4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d03b      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a31      	ldr	r2, [pc, #196]	@ (8002c4c <HAL_DMA_Init+0x1c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d036      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a30      	ldr	r2, [pc, #192]	@ (8002c50 <HAL_DMA_Init+0x1cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d031      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2e      	ldr	r2, [pc, #184]	@ (8002c54 <HAL_DMA_Init+0x1d0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d02c      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <HAL_DMA_Init+0x1d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d027      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <HAL_DMA_Init+0x1d8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d022      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c60 <HAL_DMA_Init+0x1dc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d01d      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	@ (8002c64 <HAL_DMA_Init+0x1e0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <HAL_DMA_Init+0x1e4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	@ (8002c6c <HAL_DMA_Init+0x1e8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00e      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <HAL_DMA_Init+0x1ec>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <HAL_DMA_Init+0x1f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_DMA_Init+0x174>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <HAL_DMA_Init+0x1f4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d108      	bne.n	8002c0a <HAL_DMA_Init+0x186>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <HAL_DMA_Init+0x196>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c1a:	e02f      	b.n	8002c7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1c:	f7fe faa4 	bl	8001168 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d928      	bls.n	8002c7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2203      	movs	r2, #3
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e246      	b.n	80030ca <HAL_DMA_Init+0x646>
 8002c3c:	40020010 	.word	0x40020010
 8002c40:	40020028 	.word	0x40020028
 8002c44:	40020040 	.word	0x40020040
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	40020088 	.word	0x40020088
 8002c54:	400200a0 	.word	0x400200a0
 8002c58:	400200b8 	.word	0x400200b8
 8002c5c:	40020410 	.word	0x40020410
 8002c60:	40020428 	.word	0x40020428
 8002c64:	40020440 	.word	0x40020440
 8002c68:	40020458 	.word	0x40020458
 8002c6c:	40020470 	.word	0x40020470
 8002c70:	40020488 	.word	0x40020488
 8002c74:	400204a0 	.word	0x400204a0
 8002c78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1c8      	bne.n	8002c1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4b83      	ldr	r3, [pc, #524]	@ (8002ea4 <HAL_DMA_Init+0x420>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ca2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ce0:	4b71      	ldr	r3, [pc, #452]	@ (8002ea8 <HAL_DMA_Init+0x424>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b71      	ldr	r3, [pc, #452]	@ (8002eac <HAL_DMA_Init+0x428>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cec:	d328      	bcc.n	8002d40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b28      	cmp	r3, #40	@ 0x28
 8002cf4:	d903      	bls.n	8002cfe <HAL_DMA_Init+0x27a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cfc:	d917      	bls.n	8002d2e <HAL_DMA_Init+0x2aa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d04:	d903      	bls.n	8002d0e <HAL_DMA_Init+0x28a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b42      	cmp	r3, #66	@ 0x42
 8002d0c:	d90f      	bls.n	8002d2e <HAL_DMA_Init+0x2aa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b46      	cmp	r3, #70	@ 0x46
 8002d14:	d903      	bls.n	8002d1e <HAL_DMA_Init+0x29a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b48      	cmp	r3, #72	@ 0x48
 8002d1c:	d907      	bls.n	8002d2e <HAL_DMA_Init+0x2aa>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b4e      	cmp	r3, #78	@ 0x4e
 8002d24:	d905      	bls.n	8002d32 <HAL_DMA_Init+0x2ae>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b52      	cmp	r3, #82	@ 0x52
 8002d2c:	d801      	bhi.n	8002d32 <HAL_DMA_Init+0x2ae>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_DMA_Init+0x2b0>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0307 	bic.w	r3, r3, #7
 8002d56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d117      	bne.n	8002d9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f002 f8ed 	bl	8004f5c <DMA_CheckFifoParam>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e197      	b.n	80030ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 f828 	bl	8004df8 <DMA_CalcBaseAndBitshift>
 8002da8:	4603      	mov	r3, r0
 8002daa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	223f      	movs	r2, #63	@ 0x3f
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e0cd      	b.n	8002f5a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb0 <HAL_DMA_Init+0x42c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a39      	ldr	r2, [pc, #228]	@ (8002eb4 <HAL_DMA_Init+0x430>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a38      	ldr	r2, [pc, #224]	@ (8002eb8 <HAL_DMA_Init+0x434>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a36      	ldr	r2, [pc, #216]	@ (8002ebc <HAL_DMA_Init+0x438>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a35      	ldr	r2, [pc, #212]	@ (8002ec0 <HAL_DMA_Init+0x43c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a33      	ldr	r2, [pc, #204]	@ (8002ec4 <HAL_DMA_Init+0x440>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_DMA_Init+0x444>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Init+0x38a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a30      	ldr	r2, [pc, #192]	@ (8002ecc <HAL_DMA_Init+0x448>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Init+0x38e>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_Init+0x390>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8097 	beq.w	8002f48 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <HAL_DMA_Init+0x42c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d021      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	@ (8002eb4 <HAL_DMA_Init+0x430>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01c      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	@ (8002eb8 <HAL_DMA_Init+0x434>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d017      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_DMA_Init+0x438>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d012      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_DMA_Init+0x43c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00d      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_DMA_Init+0x440>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d008      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <HAL_DMA_Init+0x444>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d003      	beq.n	8002e68 <HAL_DMA_Init+0x3e4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <HAL_DMA_Init+0x448>)
 8002e66:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_DMA_Init+0x44c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d021      	beq.n	8002ed4 <HAL_DMA_Init+0x450>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	d102      	bne.n	8002e9e <HAL_DMA_Init+0x41a>
 8002e98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e9c:	e01b      	b.n	8002ed6 <HAL_DMA_Init+0x452>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e019      	b.n	8002ed6 <HAL_DMA_Init+0x452>
 8002ea2:	bf00      	nop
 8002ea4:	fe10803f 	.word	0xfe10803f
 8002ea8:	5c001000 	.word	0x5c001000
 8002eac:	ffff0000 	.word	0xffff0000
 8002eb0:	58025408 	.word	0x58025408
 8002eb4:	5802541c 	.word	0x5802541c
 8002eb8:	58025430 	.word	0x58025430
 8002ebc:	58025444 	.word	0x58025444
 8002ec0:	58025458 	.word	0x58025458
 8002ec4:	5802546c 	.word	0x5802546c
 8002ec8:	58025480 	.word	0x58025480
 8002ecc:	58025494 	.word	0x58025494
 8002ed0:	fffe000f 	.word	0xfffe000f
 8002ed4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002f04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80030d4 <HAL_DMA_Init+0x650>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80030d8 <HAL_DMA_Init+0x654>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f001 ff63 	bl	8004df8 <DMA_CalcBaseAndBitshift>
 8002f32:	4603      	mov	r3, r0
 8002f34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2201      	movs	r2, #1
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	e008      	b.n	8002f5a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	@ 0x40
 8002f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0b7      	b.n	80030ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80030dc <HAL_DMA_Init+0x658>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d072      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_DMA_Init+0x65c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d06d      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5c      	ldr	r2, [pc, #368]	@ (80030e4 <HAL_DMA_Init+0x660>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d068      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_DMA_Init+0x664>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d063      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a59      	ldr	r2, [pc, #356]	@ (80030ec <HAL_DMA_Init+0x668>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d05e      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_DMA_Init+0x66c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d059      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a56      	ldr	r2, [pc, #344]	@ (80030f4 <HAL_DMA_Init+0x670>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d054      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_DMA_Init+0x674>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d04f      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_DMA_Init+0x678>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a51      	ldr	r2, [pc, #324]	@ (8003100 <HAL_DMA_Init+0x67c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a50      	ldr	r2, [pc, #320]	@ (8003104 <HAL_DMA_Init+0x680>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8003108 <HAL_DMA_Init+0x684>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800310c <HAL_DMA_Init+0x688>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <HAL_DMA_Init+0x68c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a4a      	ldr	r2, [pc, #296]	@ (8003114 <HAL_DMA_Init+0x690>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a48      	ldr	r2, [pc, #288]	@ (8003118 <HAL_DMA_Init+0x694>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a47      	ldr	r2, [pc, #284]	@ (800311c <HAL_DMA_Init+0x698>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a45      	ldr	r2, [pc, #276]	@ (8003120 <HAL_DMA_Init+0x69c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a44      	ldr	r2, [pc, #272]	@ (8003124 <HAL_DMA_Init+0x6a0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a42      	ldr	r2, [pc, #264]	@ (8003128 <HAL_DMA_Init+0x6a4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a41      	ldr	r2, [pc, #260]	@ (800312c <HAL_DMA_Init+0x6a8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3f      	ldr	r2, [pc, #252]	@ (8003130 <HAL_DMA_Init+0x6ac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3e      	ldr	r2, [pc, #248]	@ (8003134 <HAL_DMA_Init+0x6b0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Init+0x5c6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <HAL_DMA_Init+0x6b4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_DMA_Init+0x5ca>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_DMA_Init+0x5cc>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d032      	beq.n	80030ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 fffd 	bl	8005054 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b80      	cmp	r3, #128	@ 0x80
 8003060:	d102      	bne.n	8003068 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800307c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_DMA_Init+0x624>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d80c      	bhi.n	80030a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f002 f87a 	bl	8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e008      	b.n	80030ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	a7fdabf8 	.word	0xa7fdabf8
 80030d8:	cccccccd 	.word	0xcccccccd
 80030dc:	40020010 	.word	0x40020010
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40020040 	.word	0x40020040
 80030e8:	40020058 	.word	0x40020058
 80030ec:	40020070 	.word	0x40020070
 80030f0:	40020088 	.word	0x40020088
 80030f4:	400200a0 	.word	0x400200a0
 80030f8:	400200b8 	.word	0x400200b8
 80030fc:	40020410 	.word	0x40020410
 8003100:	40020428 	.word	0x40020428
 8003104:	40020440 	.word	0x40020440
 8003108:	40020458 	.word	0x40020458
 800310c:	40020470 	.word	0x40020470
 8003110:	40020488 	.word	0x40020488
 8003114:	400204a0 	.word	0x400204a0
 8003118:	400204b8 	.word	0x400204b8
 800311c:	58025408 	.word	0x58025408
 8003120:	5802541c 	.word	0x5802541c
 8003124:	58025430 	.word	0x58025430
 8003128:	58025444 	.word	0x58025444
 800312c:	58025458 	.word	0x58025458
 8003130:	5802546c 	.word	0x5802546c
 8003134:	58025480 	.word	0x58025480
 8003138:	58025494 	.word	0x58025494

0800313c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e226      	b.n	80035a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DMA_Start_IT+0x2a>
 8003162:	2302      	movs	r3, #2
 8003164:	e21f      	b.n	80035a6 <HAL_DMA_Start_IT+0x46a>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 820a 	bne.w	8003590 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a68      	ldr	r2, [pc, #416]	@ (8003330 <HAL_DMA_Start_IT+0x1f4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a66      	ldr	r2, [pc, #408]	@ (8003334 <HAL_DMA_Start_IT+0x1f8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a65      	ldr	r2, [pc, #404]	@ (8003338 <HAL_DMA_Start_IT+0x1fc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a63      	ldr	r2, [pc, #396]	@ (800333c <HAL_DMA_Start_IT+0x200>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a62      	ldr	r2, [pc, #392]	@ (8003340 <HAL_DMA_Start_IT+0x204>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a60      	ldr	r2, [pc, #384]	@ (8003344 <HAL_DMA_Start_IT+0x208>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003348 <HAL_DMA_Start_IT+0x20c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5d      	ldr	r2, [pc, #372]	@ (800334c <HAL_DMA_Start_IT+0x210>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5c      	ldr	r2, [pc, #368]	@ (8003350 <HAL_DMA_Start_IT+0x214>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003354 <HAL_DMA_Start_IT+0x218>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a59      	ldr	r2, [pc, #356]	@ (8003358 <HAL_DMA_Start_IT+0x21c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a57      	ldr	r2, [pc, #348]	@ (800335c <HAL_DMA_Start_IT+0x220>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a56      	ldr	r2, [pc, #344]	@ (8003360 <HAL_DMA_Start_IT+0x224>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a54      	ldr	r2, [pc, #336]	@ (8003364 <HAL_DMA_Start_IT+0x228>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a53      	ldr	r2, [pc, #332]	@ (8003368 <HAL_DMA_Start_IT+0x22c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Start_IT+0xee>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a51      	ldr	r2, [pc, #324]	@ (800336c <HAL_DMA_Start_IT+0x230>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <HAL_DMA_Start_IT+0x100>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e007      	b.n	800324c <HAL_DMA_Start_IT+0x110>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f001 fc24 	bl	8004aa0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a34      	ldr	r2, [pc, #208]	@ (8003330 <HAL_DMA_Start_IT+0x1f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a33      	ldr	r2, [pc, #204]	@ (8003334 <HAL_DMA_Start_IT+0x1f8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_DMA_Start_IT+0x1fc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a30      	ldr	r2, [pc, #192]	@ (800333c <HAL_DMA_Start_IT+0x200>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2e      	ldr	r2, [pc, #184]	@ (8003340 <HAL_DMA_Start_IT+0x204>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2d      	ldr	r2, [pc, #180]	@ (8003344 <HAL_DMA_Start_IT+0x208>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <HAL_DMA_Start_IT+0x20c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_DMA_Start_IT+0x210>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a28      	ldr	r2, [pc, #160]	@ (8003350 <HAL_DMA_Start_IT+0x214>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <HAL_DMA_Start_IT+0x218>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <HAL_DMA_Start_IT+0x21c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a24      	ldr	r2, [pc, #144]	@ (800335c <HAL_DMA_Start_IT+0x220>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <HAL_DMA_Start_IT+0x224>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	@ (8003364 <HAL_DMA_Start_IT+0x228>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_DMA_Start_IT+0x22c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Start_IT+0x1bc>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_DMA_Start_IT+0x230>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_DMA_Start_IT+0x1c0>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_DMA_Start_IT+0x1c2>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d036      	beq.n	8003370 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 021e 	bic.w	r2, r3, #30
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0216 	orr.w	r2, r2, #22
 8003314:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03e      	beq.n	800339c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0208 	orr.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e035      	b.n	800339c <HAL_DMA_Start_IT+0x260>
 8003330:	40020010 	.word	0x40020010
 8003334:	40020028 	.word	0x40020028
 8003338:	40020040 	.word	0x40020040
 800333c:	40020058 	.word	0x40020058
 8003340:	40020070 	.word	0x40020070
 8003344:	40020088 	.word	0x40020088
 8003348:	400200a0 	.word	0x400200a0
 800334c:	400200b8 	.word	0x400200b8
 8003350:	40020410 	.word	0x40020410
 8003354:	40020428 	.word	0x40020428
 8003358:	40020440 	.word	0x40020440
 800335c:	40020458 	.word	0x40020458
 8003360:	40020470 	.word	0x40020470
 8003364:	40020488 	.word	0x40020488
 8003368:	400204a0 	.word	0x400204a0
 800336c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 020e 	bic.w	r2, r3, #14
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 020a 	orr.w	r2, r2, #10
 8003382:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0204 	orr.w	r2, r2, #4
 800339a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a83      	ldr	r2, [pc, #524]	@ (80035b0 <HAL_DMA_Start_IT+0x474>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d072      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a82      	ldr	r2, [pc, #520]	@ (80035b4 <HAL_DMA_Start_IT+0x478>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d06d      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a80      	ldr	r2, [pc, #512]	@ (80035b8 <HAL_DMA_Start_IT+0x47c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d068      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7f      	ldr	r2, [pc, #508]	@ (80035bc <HAL_DMA_Start_IT+0x480>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d063      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7d      	ldr	r2, [pc, #500]	@ (80035c0 <HAL_DMA_Start_IT+0x484>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d05e      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7c      	ldr	r2, [pc, #496]	@ (80035c4 <HAL_DMA_Start_IT+0x488>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d059      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7a      	ldr	r2, [pc, #488]	@ (80035c8 <HAL_DMA_Start_IT+0x48c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d054      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a79      	ldr	r2, [pc, #484]	@ (80035cc <HAL_DMA_Start_IT+0x490>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d04f      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a77      	ldr	r2, [pc, #476]	@ (80035d0 <HAL_DMA_Start_IT+0x494>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d04a      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a76      	ldr	r2, [pc, #472]	@ (80035d4 <HAL_DMA_Start_IT+0x498>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d045      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a74      	ldr	r2, [pc, #464]	@ (80035d8 <HAL_DMA_Start_IT+0x49c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d040      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a73      	ldr	r2, [pc, #460]	@ (80035dc <HAL_DMA_Start_IT+0x4a0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d03b      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a71      	ldr	r2, [pc, #452]	@ (80035e0 <HAL_DMA_Start_IT+0x4a4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d036      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a70      	ldr	r2, [pc, #448]	@ (80035e4 <HAL_DMA_Start_IT+0x4a8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d031      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6e      	ldr	r2, [pc, #440]	@ (80035e8 <HAL_DMA_Start_IT+0x4ac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02c      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6d      	ldr	r2, [pc, #436]	@ (80035ec <HAL_DMA_Start_IT+0x4b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d027      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	@ (80035f0 <HAL_DMA_Start_IT+0x4b4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6a      	ldr	r2, [pc, #424]	@ (80035f4 <HAL_DMA_Start_IT+0x4b8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a68      	ldr	r2, [pc, #416]	@ (80035f8 <HAL_DMA_Start_IT+0x4bc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a67      	ldr	r2, [pc, #412]	@ (80035fc <HAL_DMA_Start_IT+0x4c0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a65      	ldr	r2, [pc, #404]	@ (8003600 <HAL_DMA_Start_IT+0x4c4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a64      	ldr	r2, [pc, #400]	@ (8003604 <HAL_DMA_Start_IT+0x4c8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a62      	ldr	r2, [pc, #392]	@ (8003608 <HAL_DMA_Start_IT+0x4cc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Start_IT+0x350>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a61      	ldr	r2, [pc, #388]	@ (800360c <HAL_DMA_Start_IT+0x4d0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Start_IT+0x354>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_DMA_Start_IT+0x356>
 8003490:	2300      	movs	r3, #0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01a      	beq.n	80034cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a37      	ldr	r2, [pc, #220]	@ (80035b0 <HAL_DMA_Start_IT+0x474>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d04a      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a36      	ldr	r2, [pc, #216]	@ (80035b4 <HAL_DMA_Start_IT+0x478>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d045      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a34      	ldr	r2, [pc, #208]	@ (80035b8 <HAL_DMA_Start_IT+0x47c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d040      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a33      	ldr	r2, [pc, #204]	@ (80035bc <HAL_DMA_Start_IT+0x480>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a31      	ldr	r2, [pc, #196]	@ (80035c0 <HAL_DMA_Start_IT+0x484>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d036      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a30      	ldr	r2, [pc, #192]	@ (80035c4 <HAL_DMA_Start_IT+0x488>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d031      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <HAL_DMA_Start_IT+0x48c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02c      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2d      	ldr	r2, [pc, #180]	@ (80035cc <HAL_DMA_Start_IT+0x490>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d027      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2b      	ldr	r2, [pc, #172]	@ (80035d0 <HAL_DMA_Start_IT+0x494>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <HAL_DMA_Start_IT+0x498>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d01d      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a28      	ldr	r2, [pc, #160]	@ (80035d8 <HAL_DMA_Start_IT+0x49c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a27      	ldr	r2, [pc, #156]	@ (80035dc <HAL_DMA_Start_IT+0x4a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a25      	ldr	r2, [pc, #148]	@ (80035e0 <HAL_DMA_Start_IT+0x4a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <HAL_DMA_Start_IT+0x4a8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	@ (80035e8 <HAL_DMA_Start_IT+0x4ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Start_IT+0x430>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a21      	ldr	r2, [pc, #132]	@ (80035ec <HAL_DMA_Start_IT+0x4b0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <HAL_DMA_Start_IT+0x442>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e012      	b.n	80035a4 <HAL_DMA_Start_IT+0x468>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e009      	b.n	80035a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40020010 	.word	0x40020010
 80035b4:	40020028 	.word	0x40020028
 80035b8:	40020040 	.word	0x40020040
 80035bc:	40020058 	.word	0x40020058
 80035c0:	40020070 	.word	0x40020070
 80035c4:	40020088 	.word	0x40020088
 80035c8:	400200a0 	.word	0x400200a0
 80035cc:	400200b8 	.word	0x400200b8
 80035d0:	40020410 	.word	0x40020410
 80035d4:	40020428 	.word	0x40020428
 80035d8:	40020440 	.word	0x40020440
 80035dc:	40020458 	.word	0x40020458
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204a0 	.word	0x400204a0
 80035ec:	400204b8 	.word	0x400204b8
 80035f0:	58025408 	.word	0x58025408
 80035f4:	5802541c 	.word	0x5802541c
 80035f8:	58025430 	.word	0x58025430
 80035fc:	58025444 	.word	0x58025444
 8003600:	58025458 	.word	0x58025458
 8003604:	5802546c 	.word	0x5802546c
 8003608:	58025480 	.word	0x58025480
 800360c:	58025494 	.word	0x58025494

08003610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003618:	f7fd fda6 	bl	8001168 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e2dc      	b.n	8003be2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d008      	beq.n	8003646 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2280      	movs	r2, #128	@ 0x80
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e2cd      	b.n	8003be2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a76      	ldr	r2, [pc, #472]	@ (8003824 <HAL_DMA_Abort+0x214>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d04a      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a74      	ldr	r2, [pc, #464]	@ (8003828 <HAL_DMA_Abort+0x218>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d045      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	@ (800382c <HAL_DMA_Abort+0x21c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d040      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a71      	ldr	r2, [pc, #452]	@ (8003830 <HAL_DMA_Abort+0x220>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d03b      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a70      	ldr	r2, [pc, #448]	@ (8003834 <HAL_DMA_Abort+0x224>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d036      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6e      	ldr	r2, [pc, #440]	@ (8003838 <HAL_DMA_Abort+0x228>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d031      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6d      	ldr	r2, [pc, #436]	@ (800383c <HAL_DMA_Abort+0x22c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d02c      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6b      	ldr	r2, [pc, #428]	@ (8003840 <HAL_DMA_Abort+0x230>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d027      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6a      	ldr	r2, [pc, #424]	@ (8003844 <HAL_DMA_Abort+0x234>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a68      	ldr	r2, [pc, #416]	@ (8003848 <HAL_DMA_Abort+0x238>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a67      	ldr	r2, [pc, #412]	@ (800384c <HAL_DMA_Abort+0x23c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a65      	ldr	r2, [pc, #404]	@ (8003850 <HAL_DMA_Abort+0x240>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a64      	ldr	r2, [pc, #400]	@ (8003854 <HAL_DMA_Abort+0x244>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a62      	ldr	r2, [pc, #392]	@ (8003858 <HAL_DMA_Abort+0x248>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a61      	ldr	r2, [pc, #388]	@ (800385c <HAL_DMA_Abort+0x24c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_DMA_Abort+0xd6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003860 <HAL_DMA_Abort+0x250>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_Abort+0xda>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_DMA_Abort+0xdc>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 021e 	bic.w	r2, r2, #30
 80036fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800370e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e00a      	b.n	800372e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 020e 	bic.w	r2, r2, #14
 8003726:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3c      	ldr	r2, [pc, #240]	@ (8003824 <HAL_DMA_Abort+0x214>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d072      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3a      	ldr	r2, [pc, #232]	@ (8003828 <HAL_DMA_Abort+0x218>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d06d      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a39      	ldr	r2, [pc, #228]	@ (800382c <HAL_DMA_Abort+0x21c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d068      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a37      	ldr	r2, [pc, #220]	@ (8003830 <HAL_DMA_Abort+0x220>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d063      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a36      	ldr	r2, [pc, #216]	@ (8003834 <HAL_DMA_Abort+0x224>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d05e      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a34      	ldr	r2, [pc, #208]	@ (8003838 <HAL_DMA_Abort+0x228>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d059      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a33      	ldr	r2, [pc, #204]	@ (800383c <HAL_DMA_Abort+0x22c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d054      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a31      	ldr	r2, [pc, #196]	@ (8003840 <HAL_DMA_Abort+0x230>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04f      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a30      	ldr	r2, [pc, #192]	@ (8003844 <HAL_DMA_Abort+0x234>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2e      	ldr	r2, [pc, #184]	@ (8003848 <HAL_DMA_Abort+0x238>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2d      	ldr	r2, [pc, #180]	@ (800384c <HAL_DMA_Abort+0x23c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003850 <HAL_DMA_Abort+0x240>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003854 <HAL_DMA_Abort+0x244>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a28      	ldr	r2, [pc, #160]	@ (8003858 <HAL_DMA_Abort+0x248>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a27      	ldr	r2, [pc, #156]	@ (800385c <HAL_DMA_Abort+0x24c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a25      	ldr	r2, [pc, #148]	@ (8003860 <HAL_DMA_Abort+0x250>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a24      	ldr	r2, [pc, #144]	@ (8003864 <HAL_DMA_Abort+0x254>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <HAL_DMA_Abort+0x258>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a21      	ldr	r2, [pc, #132]	@ (800386c <HAL_DMA_Abort+0x25c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <HAL_DMA_Abort+0x260>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003874 <HAL_DMA_Abort+0x264>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1c      	ldr	r2, [pc, #112]	@ (8003878 <HAL_DMA_Abort+0x268>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <HAL_DMA_Abort+0x26c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_Abort+0x20e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <HAL_DMA_Abort+0x270>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d132      	bne.n	8003884 <HAL_DMA_Abort+0x274>
 800381e:	2301      	movs	r3, #1
 8003820:	e031      	b.n	8003886 <HAL_DMA_Abort+0x276>
 8003822:	bf00      	nop
 8003824:	40020010 	.word	0x40020010
 8003828:	40020028 	.word	0x40020028
 800382c:	40020040 	.word	0x40020040
 8003830:	40020058 	.word	0x40020058
 8003834:	40020070 	.word	0x40020070
 8003838:	40020088 	.word	0x40020088
 800383c:	400200a0 	.word	0x400200a0
 8003840:	400200b8 	.word	0x400200b8
 8003844:	40020410 	.word	0x40020410
 8003848:	40020428 	.word	0x40020428
 800384c:	40020440 	.word	0x40020440
 8003850:	40020458 	.word	0x40020458
 8003854:	40020470 	.word	0x40020470
 8003858:	40020488 	.word	0x40020488
 800385c:	400204a0 	.word	0x400204a0
 8003860:	400204b8 	.word	0x400204b8
 8003864:	58025408 	.word	0x58025408
 8003868:	5802541c 	.word	0x5802541c
 800386c:	58025430 	.word	0x58025430
 8003870:	58025444 	.word	0x58025444
 8003874:	58025458 	.word	0x58025458
 8003878:	5802546c 	.word	0x5802546c
 800387c:	58025480 	.word	0x58025480
 8003880:	58025494 	.word	0x58025494
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003898:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a54 <HAL_DMA_Abort+0x444>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a58 <HAL_DMA_Abort+0x448>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a5c <HAL_DMA_Abort+0x44c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a68      	ldr	r2, [pc, #416]	@ (8003a60 <HAL_DMA_Abort+0x450>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a67      	ldr	r2, [pc, #412]	@ (8003a64 <HAL_DMA_Abort+0x454>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a65      	ldr	r2, [pc, #404]	@ (8003a68 <HAL_DMA_Abort+0x458>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a64      	ldr	r2, [pc, #400]	@ (8003a6c <HAL_DMA_Abort+0x45c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a62      	ldr	r2, [pc, #392]	@ (8003a70 <HAL_DMA_Abort+0x460>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a61      	ldr	r2, [pc, #388]	@ (8003a74 <HAL_DMA_Abort+0x464>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003a78 <HAL_DMA_Abort+0x468>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5e      	ldr	r2, [pc, #376]	@ (8003a7c <HAL_DMA_Abort+0x46c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a80 <HAL_DMA_Abort+0x470>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5b      	ldr	r2, [pc, #364]	@ (8003a84 <HAL_DMA_Abort+0x474>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a59      	ldr	r2, [pc, #356]	@ (8003a88 <HAL_DMA_Abort+0x478>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a58      	ldr	r2, [pc, #352]	@ (8003a8c <HAL_DMA_Abort+0x47c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort+0x32a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a56      	ldr	r2, [pc, #344]	@ (8003a90 <HAL_DMA_Abort+0x480>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <HAL_DMA_Abort+0x33c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e007      	b.n	800395c <HAL_DMA_Abort+0x34c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800395c:	e013      	b.n	8003986 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395e:	f7fd fc03 	bl	8001168 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b05      	cmp	r3, #5
 800396a:	d90c      	bls.n	8003986 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e12d      	b.n	8003be2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2f      	ldr	r2, [pc, #188]	@ (8003a54 <HAL_DMA_Abort+0x444>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a58 <HAL_DMA_Abort+0x448>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2c      	ldr	r2, [pc, #176]	@ (8003a5c <HAL_DMA_Abort+0x44c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a60 <HAL_DMA_Abort+0x450>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a29      	ldr	r2, [pc, #164]	@ (8003a64 <HAL_DMA_Abort+0x454>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a27      	ldr	r2, [pc, #156]	@ (8003a68 <HAL_DMA_Abort+0x458>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a26      	ldr	r2, [pc, #152]	@ (8003a6c <HAL_DMA_Abort+0x45c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a24      	ldr	r2, [pc, #144]	@ (8003a70 <HAL_DMA_Abort+0x460>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <HAL_DMA_Abort+0x464>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a21      	ldr	r2, [pc, #132]	@ (8003a78 <HAL_DMA_Abort+0x468>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a20      	ldr	r2, [pc, #128]	@ (8003a7c <HAL_DMA_Abort+0x46c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <HAL_DMA_Abort+0x470>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_DMA_Abort+0x474>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <HAL_DMA_Abort+0x478>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <HAL_DMA_Abort+0x47c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_Abort+0x422>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <HAL_DMA_Abort+0x480>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_DMA_Abort+0x426>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_Abort+0x428>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02b      	beq.n	8003a94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	223f      	movs	r2, #63	@ 0x3f
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	e02a      	b.n	8003aaa <HAL_DMA_Abort+0x49a>
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4f      	ldr	r2, [pc, #316]	@ (8003bec <HAL_DMA_Abort+0x5dc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d072      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf0 <HAL_DMA_Abort+0x5e0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d06d      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8003bf4 <HAL_DMA_Abort+0x5e4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d068      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf8 <HAL_DMA_Abort+0x5e8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d063      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a49      	ldr	r2, [pc, #292]	@ (8003bfc <HAL_DMA_Abort+0x5ec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d05e      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a47      	ldr	r2, [pc, #284]	@ (8003c00 <HAL_DMA_Abort+0x5f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d059      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a46      	ldr	r2, [pc, #280]	@ (8003c04 <HAL_DMA_Abort+0x5f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d054      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a44      	ldr	r2, [pc, #272]	@ (8003c08 <HAL_DMA_Abort+0x5f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d04f      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a43      	ldr	r2, [pc, #268]	@ (8003c0c <HAL_DMA_Abort+0x5fc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a41      	ldr	r2, [pc, #260]	@ (8003c10 <HAL_DMA_Abort+0x600>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a40      	ldr	r2, [pc, #256]	@ (8003c14 <HAL_DMA_Abort+0x604>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c18 <HAL_DMA_Abort+0x608>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3d      	ldr	r2, [pc, #244]	@ (8003c1c <HAL_DMA_Abort+0x60c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3b      	ldr	r2, [pc, #236]	@ (8003c20 <HAL_DMA_Abort+0x610>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c24 <HAL_DMA_Abort+0x614>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a38      	ldr	r2, [pc, #224]	@ (8003c28 <HAL_DMA_Abort+0x618>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a37      	ldr	r2, [pc, #220]	@ (8003c2c <HAL_DMA_Abort+0x61c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a35      	ldr	r2, [pc, #212]	@ (8003c30 <HAL_DMA_Abort+0x620>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a34      	ldr	r2, [pc, #208]	@ (8003c34 <HAL_DMA_Abort+0x624>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a32      	ldr	r2, [pc, #200]	@ (8003c38 <HAL_DMA_Abort+0x628>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <HAL_DMA_Abort+0x62c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2f      	ldr	r2, [pc, #188]	@ (8003c40 <HAL_DMA_Abort+0x630>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c44 <HAL_DMA_Abort+0x634>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_Abort+0x58a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <HAL_DMA_Abort+0x638>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_DMA_Abort+0x58e>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_DMA_Abort+0x590>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	58025408 	.word	0x58025408
 8003c30:	5802541c 	.word	0x5802541c
 8003c34:	58025430 	.word	0x58025430
 8003c38:	58025444 	.word	0x58025444
 8003c3c:	58025458 	.word	0x58025458
 8003c40:	5802546c 	.word	0x5802546c
 8003c44:	58025480 	.word	0x58025480
 8003c48:	58025494 	.word	0x58025494

08003c4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	@ 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c58:	4b67      	ldr	r3, [pc, #412]	@ (8003df8 <HAL_DMA_IRQHandler+0x1ac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a67      	ldr	r2, [pc, #412]	@ (8003dfc <HAL_DMA_IRQHandler+0x1b0>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e04 <HAL_DMA_IRQHandler+0x1b8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5c      	ldr	r2, [pc, #368]	@ (8003e08 <HAL_DMA_IRQHandler+0x1bc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a59      	ldr	r2, [pc, #356]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_DMA_IRQHandler+0x1c8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <HAL_DMA_IRQHandler+0x1cc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a54      	ldr	r2, [pc, #336]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a53      	ldr	r2, [pc, #332]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <HAL_DMA_IRQHandler+0x1d8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a50      	ldr	r2, [pc, #320]	@ (8003e28 <HAL_DMA_IRQHandler+0x1dc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	@ (8003e34 <HAL_DMA_IRQHandler+0x1e8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e38 <HAL_DMA_IRQHandler+0x1ec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xd2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a48      	ldr	r2, [pc, #288]	@ (8003e3c <HAL_DMA_IRQHandler+0x1f0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_DMA_IRQHandler+0xd6>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 842b 	beq.w	8004580 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2208      	movs	r2, #8
 8003d34:	409a      	lsls	r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80a2 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d04a      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <HAL_DMA_IRQHandler+0x1b8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d045      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <HAL_DMA_IRQHandler+0x1bc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d040      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d036      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <HAL_DMA_IRQHandler+0x1c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d031      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a25      	ldr	r2, [pc, #148]	@ (8003e18 <HAL_DMA_IRQHandler+0x1cc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d027      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a22      	ldr	r2, [pc, #136]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <HAL_DMA_IRQHandler+0x1d8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d01d      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e28 <HAL_DMA_IRQHandler+0x1dc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e34 <HAL_DMA_IRQHandler+0x1e8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	@ (8003e38 <HAL_DMA_IRQHandler+0x1ec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x194>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a18      	ldr	r2, [pc, #96]	@ (8003e3c <HAL_DMA_IRQHandler+0x1f0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d12f      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x1f4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e02e      	b.n	8003e54 <HAL_DMA_IRQHandler+0x208>
 8003df6:	bf00      	nop
 8003df8:	24000000 	.word	0x24000000
 8003dfc:	1b4e81b5 	.word	0x1b4e81b5
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2208      	movs	r2, #8
 8003e72:	409a      	lsls	r2, r3
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d06e      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a69      	ldr	r2, [pc, #420]	@ (8004044 <HAL_DMA_IRQHandler+0x3f8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d04a      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a67      	ldr	r2, [pc, #412]	@ (8004048 <HAL_DMA_IRQHandler+0x3fc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d045      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a66      	ldr	r2, [pc, #408]	@ (800404c <HAL_DMA_IRQHandler+0x400>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d040      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a64      	ldr	r2, [pc, #400]	@ (8004050 <HAL_DMA_IRQHandler+0x404>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a63      	ldr	r2, [pc, #396]	@ (8004054 <HAL_DMA_IRQHandler+0x408>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d036      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <HAL_DMA_IRQHandler+0x40c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a60      	ldr	r2, [pc, #384]	@ (800405c <HAL_DMA_IRQHandler+0x410>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02c      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8004060 <HAL_DMA_IRQHandler+0x414>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d027      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <HAL_DMA_IRQHandler+0x418>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5b      	ldr	r2, [pc, #364]	@ (8004068 <HAL_DMA_IRQHandler+0x41c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01d      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5a      	ldr	r2, [pc, #360]	@ (800406c <HAL_DMA_IRQHandler+0x420>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	@ (8004070 <HAL_DMA_IRQHandler+0x424>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a57      	ldr	r2, [pc, #348]	@ (8004074 <HAL_DMA_IRQHandler+0x428>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <HAL_DMA_IRQHandler+0x42c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_DMA_IRQHandler+0x430>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x2ee>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <HAL_DMA_IRQHandler+0x434>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10a      	bne.n	8003f50 <HAL_DMA_IRQHandler+0x304>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e003      	b.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	f043 0202 	orr.w	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	2204      	movs	r2, #4
 8003f82:	409a      	lsls	r2, r3
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 808f 	beq.w	80040ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a2c      	ldr	r2, [pc, #176]	@ (8004044 <HAL_DMA_IRQHandler+0x3f8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <HAL_DMA_IRQHandler+0x3fc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	@ (800404c <HAL_DMA_IRQHandler+0x400>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	@ (8004050 <HAL_DMA_IRQHandler+0x404>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <HAL_DMA_IRQHandler+0x408>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a24      	ldr	r2, [pc, #144]	@ (8004058 <HAL_DMA_IRQHandler+0x40c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a23      	ldr	r2, [pc, #140]	@ (800405c <HAL_DMA_IRQHandler+0x410>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <HAL_DMA_IRQHandler+0x414>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <HAL_DMA_IRQHandler+0x418>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	@ (8004068 <HAL_DMA_IRQHandler+0x41c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800406c <HAL_DMA_IRQHandler+0x420>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <HAL_DMA_IRQHandler+0x424>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1a      	ldr	r2, [pc, #104]	@ (8004074 <HAL_DMA_IRQHandler+0x428>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a18      	ldr	r2, [pc, #96]	@ (8004078 <HAL_DMA_IRQHandler+0x42c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_DMA_IRQHandler+0x430>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0x3e2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <HAL_DMA_IRQHandler+0x434>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d12a      	bne.n	8004084 <HAL_DMA_IRQHandler+0x438>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e023      	b.n	800408c <HAL_DMA_IRQHandler+0x440>
 8004044:	40020010 	.word	0x40020010
 8004048:	40020028 	.word	0x40020028
 800404c:	40020040 	.word	0x40020040
 8004050:	40020058 	.word	0x40020058
 8004054:	40020070 	.word	0x40020070
 8004058:	40020088 	.word	0x40020088
 800405c:	400200a0 	.word	0x400200a0
 8004060:	400200b8 	.word	0x400200b8
 8004064:	40020410 	.word	0x40020410
 8004068:	40020428 	.word	0x40020428
 800406c:	40020440 	.word	0x40020440
 8004070:	40020458 	.word	0x40020458
 8004074:	40020470 	.word	0x40020470
 8004078:	40020488 	.word	0x40020488
 800407c:	400204a0 	.word	0x400204a0
 8004080:	400204b8 	.word	0x400204b8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2204      	movs	r2, #4
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2210      	movs	r2, #16
 80040b6:	409a      	lsls	r2, r3
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a6 	beq.w	800420e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a85      	ldr	r2, [pc, #532]	@ (80042dc <HAL_DMA_IRQHandler+0x690>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a83      	ldr	r2, [pc, #524]	@ (80042e0 <HAL_DMA_IRQHandler+0x694>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d045      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a82      	ldr	r2, [pc, #520]	@ (80042e4 <HAL_DMA_IRQHandler+0x698>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d040      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a80      	ldr	r2, [pc, #512]	@ (80042e8 <HAL_DMA_IRQHandler+0x69c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d03b      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7f      	ldr	r2, [pc, #508]	@ (80042ec <HAL_DMA_IRQHandler+0x6a0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7d      	ldr	r2, [pc, #500]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7c      	ldr	r2, [pc, #496]	@ (80042f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d02c      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7a      	ldr	r2, [pc, #488]	@ (80042f8 <HAL_DMA_IRQHandler+0x6ac>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d027      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a79      	ldr	r2, [pc, #484]	@ (80042fc <HAL_DMA_IRQHandler+0x6b0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a77      	ldr	r2, [pc, #476]	@ (8004300 <HAL_DMA_IRQHandler+0x6b4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a76      	ldr	r2, [pc, #472]	@ (8004304 <HAL_DMA_IRQHandler+0x6b8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	@ (8004308 <HAL_DMA_IRQHandler+0x6bc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a73      	ldr	r2, [pc, #460]	@ (800430c <HAL_DMA_IRQHandler+0x6c0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a71      	ldr	r2, [pc, #452]	@ (8004310 <HAL_DMA_IRQHandler+0x6c4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a70      	ldr	r2, [pc, #448]	@ (8004314 <HAL_DMA_IRQHandler+0x6c8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_IRQHandler+0x516>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6e      	ldr	r2, [pc, #440]	@ (8004318 <HAL_DMA_IRQHandler+0x6cc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10a      	bne.n	8004178 <HAL_DMA_IRQHandler+0x52c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e009      	b.n	800418c <HAL_DMA_IRQHandler+0x540>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d03e      	beq.n	800420e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2210      	movs	r2, #16
 800419a:	409a      	lsls	r2, r3
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d108      	bne.n	80041ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d024      	beq.n	800420e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
 80041cc:	e01f      	b.n	800420e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01b      	beq.n	800420e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
 80041de:	e016      	b.n	800420e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0208 	bic.w	r2, r2, #8
 80041fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2220      	movs	r2, #32
 8004218:	409a      	lsls	r2, r3
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8110 	beq.w	8004444 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2c      	ldr	r2, [pc, #176]	@ (80042dc <HAL_DMA_IRQHandler+0x690>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d04a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <HAL_DMA_IRQHandler+0x694>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d045      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a29      	ldr	r2, [pc, #164]	@ (80042e4 <HAL_DMA_IRQHandler+0x698>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d040      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a28      	ldr	r2, [pc, #160]	@ (80042e8 <HAL_DMA_IRQHandler+0x69c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d03b      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a26      	ldr	r2, [pc, #152]	@ (80042ec <HAL_DMA_IRQHandler+0x6a0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d036      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a25      	ldr	r2, [pc, #148]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d031      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a23      	ldr	r2, [pc, #140]	@ (80042f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02c      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a22      	ldr	r2, [pc, #136]	@ (80042f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d027      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a20      	ldr	r2, [pc, #128]	@ (80042fc <HAL_DMA_IRQHandler+0x6b0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d022      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <HAL_DMA_IRQHandler+0x6b4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d01d      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_DMA_IRQHandler+0x6b8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d018      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1c      	ldr	r2, [pc, #112]	@ (8004308 <HAL_DMA_IRQHandler+0x6bc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1a      	ldr	r2, [pc, #104]	@ (800430c <HAL_DMA_IRQHandler+0x6c0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00e      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_DMA_IRQHandler+0x6c4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d009      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <HAL_DMA_IRQHandler+0x6c8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x678>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <HAL_DMA_IRQHandler+0x6cc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d12b      	bne.n	800431c <HAL_DMA_IRQHandler+0x6d0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e02a      	b.n	8004330 <HAL_DMA_IRQHandler+0x6e4>
 80042da:	bf00      	nop
 80042dc:	40020010 	.word	0x40020010
 80042e0:	40020028 	.word	0x40020028
 80042e4:	40020040 	.word	0x40020040
 80042e8:	40020058 	.word	0x40020058
 80042ec:	40020070 	.word	0x40020070
 80042f0:	40020088 	.word	0x40020088
 80042f4:	400200a0 	.word	0x400200a0
 80042f8:	400200b8 	.word	0x400200b8
 80042fc:	40020410 	.word	0x40020410
 8004300:	40020428 	.word	0x40020428
 8004304:	40020440 	.word	0x40020440
 8004308:	40020458 	.word	0x40020458
 800430c:	40020470 	.word	0x40020470
 8004310:	40020488 	.word	0x40020488
 8004314:	400204a0 	.word	0x400204a0
 8004318:	400204b8 	.word	0x400204b8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8087 	beq.w	8004444 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2220      	movs	r2, #32
 8004340:	409a      	lsls	r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b04      	cmp	r3, #4
 8004350:	d139      	bne.n	80043c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0216 	bic.w	r2, r2, #22
 8004360:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004370:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <HAL_DMA_IRQHandler+0x736>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0208 	bic.w	r2, r2, #8
 8004390:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	223f      	movs	r2, #63	@ 0x3f
 800439c:	409a      	lsls	r2, r3
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 834a 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
          }
          return;
 80043c4:	e344      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d018      	beq.n	8004406 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02c      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
 80043f2:	e027      	b.n	8004444 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
 8004404:	e01e      	b.n	8004444 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10f      	bne.n	8004434 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8306 	beq.w	8004a5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8088 	beq.w	800456c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2204      	movs	r2, #4
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a7a      	ldr	r2, [pc, #488]	@ (8004654 <HAL_DMA_IRQHandler+0xa08>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a79      	ldr	r2, [pc, #484]	@ (8004658 <HAL_DMA_IRQHandler+0xa0c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a77      	ldr	r2, [pc, #476]	@ (800465c <HAL_DMA_IRQHandler+0xa10>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a76      	ldr	r2, [pc, #472]	@ (8004660 <HAL_DMA_IRQHandler+0xa14>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a74      	ldr	r2, [pc, #464]	@ (8004664 <HAL_DMA_IRQHandler+0xa18>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a73      	ldr	r2, [pc, #460]	@ (8004668 <HAL_DMA_IRQHandler+0xa1c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a71      	ldr	r2, [pc, #452]	@ (800466c <HAL_DMA_IRQHandler+0xa20>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a70      	ldr	r2, [pc, #448]	@ (8004670 <HAL_DMA_IRQHandler+0xa24>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_DMA_IRQHandler+0xa28>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004678 <HAL_DMA_IRQHandler+0xa2c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6b      	ldr	r2, [pc, #428]	@ (800467c <HAL_DMA_IRQHandler+0xa30>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004680 <HAL_DMA_IRQHandler+0xa34>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_DMA_IRQHandler+0xa38>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <HAL_DMA_IRQHandler+0xa3c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a65      	ldr	r2, [pc, #404]	@ (800468c <HAL_DMA_IRQHandler+0xa40>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_IRQHandler+0x8b8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a64      	ldr	r2, [pc, #400]	@ (8004690 <HAL_DMA_IRQHandler+0xa44>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <HAL_DMA_IRQHandler+0x8ca>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e007      	b.n	8004526 <HAL_DMA_IRQHandler+0x8da>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	429a      	cmp	r2, r3
 8004530:	d307      	bcc.n	8004542 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f2      	bne.n	8004526 <HAL_DMA_IRQHandler+0x8da>
 8004540:	e000      	b.n	8004544 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004542:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2203      	movs	r2, #3
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800455a:	e003      	b.n	8004564 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8272 	beq.w	8004a5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
 800457e:	e26c      	b.n	8004a5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a43      	ldr	r2, [pc, #268]	@ (8004694 <HAL_DMA_IRQHandler+0xa48>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d022      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <HAL_DMA_IRQHandler+0xa4c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d01d      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a40      	ldr	r2, [pc, #256]	@ (800469c <HAL_DMA_IRQHandler+0xa50>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d018      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3f      	ldr	r2, [pc, #252]	@ (80046a0 <HAL_DMA_IRQHandler+0xa54>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3d      	ldr	r2, [pc, #244]	@ (80046a4 <HAL_DMA_IRQHandler+0xa58>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <HAL_DMA_IRQHandler+0xa5c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a3a      	ldr	r2, [pc, #232]	@ (80046ac <HAL_DMA_IRQHandler+0xa60>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x984>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a39      	ldr	r2, [pc, #228]	@ (80046b0 <HAL_DMA_IRQHandler+0xa64>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x988>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_DMA_IRQHandler+0x98a>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 823f 	beq.w	8004a5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	2204      	movs	r2, #4
 80045ee:	409a      	lsls	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80cd 	beq.w	8004794 <HAL_DMA_IRQHandler+0xb48>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80c7 	beq.w	8004794 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2204      	movs	r2, #4
 8004610:	409a      	lsls	r2, r3
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d049      	beq.n	80046b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8210 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463c:	e20a      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8206 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004650:	e200      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe08>
 8004652:	bf00      	nop
 8004654:	40020010 	.word	0x40020010
 8004658:	40020028 	.word	0x40020028
 800465c:	40020040 	.word	0x40020040
 8004660:	40020058 	.word	0x40020058
 8004664:	40020070 	.word	0x40020070
 8004668:	40020088 	.word	0x40020088
 800466c:	400200a0 	.word	0x400200a0
 8004670:	400200b8 	.word	0x400200b8
 8004674:	40020410 	.word	0x40020410
 8004678:	40020428 	.word	0x40020428
 800467c:	40020440 	.word	0x40020440
 8004680:	40020458 	.word	0x40020458
 8004684:	40020470 	.word	0x40020470
 8004688:	40020488 	.word	0x40020488
 800468c:	400204a0 	.word	0x400204a0
 8004690:	400204b8 	.word	0x400204b8
 8004694:	58025408 	.word	0x58025408
 8004698:	5802541c 	.word	0x5802541c
 800469c:	58025430 	.word	0x58025430
 80046a0:	58025444 	.word	0x58025444
 80046a4:	58025458 	.word	0x58025458
 80046a8:	5802546c 	.word	0x5802546c
 80046ac:	58025480 	.word	0x58025480
 80046b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d160      	bne.n	8004780 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7f      	ldr	r2, [pc, #508]	@ (80048c0 <HAL_DMA_IRQHandler+0xc74>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d04a      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a7d      	ldr	r2, [pc, #500]	@ (80048c4 <HAL_DMA_IRQHandler+0xc78>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d045      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7c      	ldr	r2, [pc, #496]	@ (80048c8 <HAL_DMA_IRQHandler+0xc7c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d040      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a7a      	ldr	r2, [pc, #488]	@ (80048cc <HAL_DMA_IRQHandler+0xc80>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d03b      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a79      	ldr	r2, [pc, #484]	@ (80048d0 <HAL_DMA_IRQHandler+0xc84>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d036      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a77      	ldr	r2, [pc, #476]	@ (80048d4 <HAL_DMA_IRQHandler+0xc88>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d031      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a76      	ldr	r2, [pc, #472]	@ (80048d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02c      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a74      	ldr	r2, [pc, #464]	@ (80048dc <HAL_DMA_IRQHandler+0xc90>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d027      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	@ (80048e0 <HAL_DMA_IRQHandler+0xc94>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d022      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a71      	ldr	r2, [pc, #452]	@ (80048e4 <HAL_DMA_IRQHandler+0xc98>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01d      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a70      	ldr	r2, [pc, #448]	@ (80048e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6e      	ldr	r2, [pc, #440]	@ (80048ec <HAL_DMA_IRQHandler+0xca0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6d      	ldr	r2, [pc, #436]	@ (80048f0 <HAL_DMA_IRQHandler+0xca4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6b      	ldr	r2, [pc, #428]	@ (80048f4 <HAL_DMA_IRQHandler+0xca8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6a      	ldr	r2, [pc, #424]	@ (80048f8 <HAL_DMA_IRQHandler+0xcac>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_DMA_IRQHandler+0xb12>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a68      	ldr	r2, [pc, #416]	@ (80048fc <HAL_DMA_IRQHandler+0xcb0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <HAL_DMA_IRQHandler+0xb24>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0208 	bic.w	r2, r2, #8
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e007      	b.n	8004780 <HAL_DMA_IRQHandler+0xb34>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8165 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004792:	e15f      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2202      	movs	r2, #2
 800479e:	409a      	lsls	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80c5 	beq.w	8004934 <HAL_DMA_IRQHandler+0xce8>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80bf 	beq.w	8004934 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	2202      	movs	r2, #2
 80047c0:	409a      	lsls	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 813a 	beq.w	8004a58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ec:	e134      	b.n	8004a58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8130 	beq.w	8004a58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004800:	e12a      	b.n	8004a58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8089 	bne.w	8004920 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2b      	ldr	r2, [pc, #172]	@ (80048c0 <HAL_DMA_IRQHandler+0xc74>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d04a      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a29      	ldr	r2, [pc, #164]	@ (80048c4 <HAL_DMA_IRQHandler+0xc78>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d045      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a28      	ldr	r2, [pc, #160]	@ (80048c8 <HAL_DMA_IRQHandler+0xc7c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d040      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a26      	ldr	r2, [pc, #152]	@ (80048cc <HAL_DMA_IRQHandler+0xc80>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d03b      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a25      	ldr	r2, [pc, #148]	@ (80048d0 <HAL_DMA_IRQHandler+0xc84>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d036      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	@ (80048d4 <HAL_DMA_IRQHandler+0xc88>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d031      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d02c      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a20      	ldr	r2, [pc, #128]	@ (80048dc <HAL_DMA_IRQHandler+0xc90>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d027      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <HAL_DMA_IRQHandler+0xc94>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <HAL_DMA_IRQHandler+0xc98>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1c      	ldr	r2, [pc, #112]	@ (80048e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <HAL_DMA_IRQHandler+0xca0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <HAL_DMA_IRQHandler+0xca4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <HAL_DMA_IRQHandler+0xca8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <HAL_DMA_IRQHandler+0xcac>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_DMA_IRQHandler+0xc62>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <HAL_DMA_IRQHandler+0xcb0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d128      	bne.n	8004900 <HAL_DMA_IRQHandler+0xcb4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0214 	bic.w	r2, r2, #20
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e027      	b.n	8004910 <HAL_DMA_IRQHandler+0xcc4>
 80048c0:	40020010 	.word	0x40020010
 80048c4:	40020028 	.word	0x40020028
 80048c8:	40020040 	.word	0x40020040
 80048cc:	40020058 	.word	0x40020058
 80048d0:	40020070 	.word	0x40020070
 80048d4:	40020088 	.word	0x40020088
 80048d8:	400200a0 	.word	0x400200a0
 80048dc:	400200b8 	.word	0x400200b8
 80048e0:	40020410 	.word	0x40020410
 80048e4:	40020428 	.word	0x40020428
 80048e8:	40020440 	.word	0x40020440
 80048ec:	40020458 	.word	0x40020458
 80048f0:	40020470 	.word	0x40020470
 80048f4:	40020488 	.word	0x40020488
 80048f8:	400204a0 	.word	0x400204a0
 80048fc:	400204b8 	.word	0x400204b8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 020a 	bic.w	r2, r2, #10
 800490e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8097 	beq.w	8004a58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004932:	e091      	b.n	8004a58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2208      	movs	r2, #8
 800493e:	409a      	lsls	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8088 	beq.w	8004a5a <HAL_DMA_IRQHandler+0xe0e>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8082 	beq.w	8004a5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a41      	ldr	r2, [pc, #260]	@ (8004a60 <HAL_DMA_IRQHandler+0xe14>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d04a      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3f      	ldr	r2, [pc, #252]	@ (8004a64 <HAL_DMA_IRQHandler+0xe18>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d045      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a68 <HAL_DMA_IRQHandler+0xe1c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d040      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3c      	ldr	r2, [pc, #240]	@ (8004a6c <HAL_DMA_IRQHandler+0xe20>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d03b      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3b      	ldr	r2, [pc, #236]	@ (8004a70 <HAL_DMA_IRQHandler+0xe24>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d036      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a39      	ldr	r2, [pc, #228]	@ (8004a74 <HAL_DMA_IRQHandler+0xe28>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a38      	ldr	r2, [pc, #224]	@ (8004a78 <HAL_DMA_IRQHandler+0xe2c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d02c      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a36      	ldr	r2, [pc, #216]	@ (8004a7c <HAL_DMA_IRQHandler+0xe30>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d027      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a35      	ldr	r2, [pc, #212]	@ (8004a80 <HAL_DMA_IRQHandler+0xe34>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d022      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a33      	ldr	r2, [pc, #204]	@ (8004a84 <HAL_DMA_IRQHandler+0xe38>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01d      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a32      	ldr	r2, [pc, #200]	@ (8004a88 <HAL_DMA_IRQHandler+0xe3c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d018      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a30      	ldr	r2, [pc, #192]	@ (8004a8c <HAL_DMA_IRQHandler+0xe40>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004a90 <HAL_DMA_IRQHandler+0xe44>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a94 <HAL_DMA_IRQHandler+0xe48>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a98 <HAL_DMA_IRQHandler+0xe4c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xdaa>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a9c <HAL_DMA_IRQHandler+0xe50>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <HAL_DMA_IRQHandler+0xdbc>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 021c 	bic.w	r2, r2, #28
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e007      	b.n	8004a18 <HAL_DMA_IRQHandler+0xdcc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 020e 	bic.w	r2, r2, #14
 8004a16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
 8004a4e:	e004      	b.n	8004a5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a5a:	3728      	adds	r7, #40	@ 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40020010 	.word	0x40020010
 8004a64:	40020028 	.word	0x40020028
 8004a68:	40020040 	.word	0x40020040
 8004a6c:	40020058 	.word	0x40020058
 8004a70:	40020070 	.word	0x40020070
 8004a74:	40020088 	.word	0x40020088
 8004a78:	400200a0 	.word	0x400200a0
 8004a7c:	400200b8 	.word	0x400200b8
 8004a80:	40020410 	.word	0x40020410
 8004a84:	40020428 	.word	0x40020428
 8004a88:	40020440 	.word	0x40020440
 8004a8c:	40020458 	.word	0x40020458
 8004a90:	40020470 	.word	0x40020470
 8004a94:	40020488 	.word	0x40020488
 8004a98:	400204a0 	.word	0x400204a0
 8004a9c:	400204b8 	.word	0x400204b8

08004aa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a7f      	ldr	r2, [pc, #508]	@ (8004cbc <DMA_SetConfig+0x21c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d072      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc0 <DMA_SetConfig+0x220>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d06d      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc4 <DMA_SetConfig+0x224>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d068      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7a      	ldr	r2, [pc, #488]	@ (8004cc8 <DMA_SetConfig+0x228>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d063      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a79      	ldr	r2, [pc, #484]	@ (8004ccc <DMA_SetConfig+0x22c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d05e      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a77      	ldr	r2, [pc, #476]	@ (8004cd0 <DMA_SetConfig+0x230>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d059      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a76      	ldr	r2, [pc, #472]	@ (8004cd4 <DMA_SetConfig+0x234>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d054      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a74      	ldr	r2, [pc, #464]	@ (8004cd8 <DMA_SetConfig+0x238>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04f      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a73      	ldr	r2, [pc, #460]	@ (8004cdc <DMA_SetConfig+0x23c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d04a      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a71      	ldr	r2, [pc, #452]	@ (8004ce0 <DMA_SetConfig+0x240>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d045      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a70      	ldr	r2, [pc, #448]	@ (8004ce4 <DMA_SetConfig+0x244>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce8 <DMA_SetConfig+0x248>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d03b      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6d      	ldr	r2, [pc, #436]	@ (8004cec <DMA_SetConfig+0x24c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d036      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf0 <DMA_SetConfig+0x250>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf4 <DMA_SetConfig+0x254>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02c      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a68      	ldr	r2, [pc, #416]	@ (8004cf8 <DMA_SetConfig+0x258>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d027      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a67      	ldr	r2, [pc, #412]	@ (8004cfc <DMA_SetConfig+0x25c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a65      	ldr	r2, [pc, #404]	@ (8004d00 <DMA_SetConfig+0x260>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a64      	ldr	r2, [pc, #400]	@ (8004d04 <DMA_SetConfig+0x264>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a62      	ldr	r2, [pc, #392]	@ (8004d08 <DMA_SetConfig+0x268>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a61      	ldr	r2, [pc, #388]	@ (8004d0c <DMA_SetConfig+0x26c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5f      	ldr	r2, [pc, #380]	@ (8004d10 <DMA_SetConfig+0x270>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8004d14 <DMA_SetConfig+0x274>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <DMA_SetConfig+0x10a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d18 <DMA_SetConfig+0x278>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <DMA_SetConfig+0x10e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <DMA_SetConfig+0x110>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a39      	ldr	r2, [pc, #228]	@ (8004cbc <DMA_SetConfig+0x21c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a38      	ldr	r2, [pc, #224]	@ (8004cc0 <DMA_SetConfig+0x220>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a36      	ldr	r2, [pc, #216]	@ (8004cc4 <DMA_SetConfig+0x224>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a35      	ldr	r2, [pc, #212]	@ (8004cc8 <DMA_SetConfig+0x228>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <DMA_SetConfig+0x22c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <DMA_SetConfig+0x230>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a30      	ldr	r2, [pc, #192]	@ (8004cd4 <DMA_SetConfig+0x234>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004cd8 <DMA_SetConfig+0x238>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	@ (8004cdc <DMA_SetConfig+0x23c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce0 <DMA_SetConfig+0x240>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce4 <DMA_SetConfig+0x244>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a29      	ldr	r2, [pc, #164]	@ (8004ce8 <DMA_SetConfig+0x248>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a27      	ldr	r2, [pc, #156]	@ (8004cec <DMA_SetConfig+0x24c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <DMA_SetConfig+0x250>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a24      	ldr	r2, [pc, #144]	@ (8004cf4 <DMA_SetConfig+0x254>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <DMA_SetConfig+0x1d0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a23      	ldr	r2, [pc, #140]	@ (8004cf8 <DMA_SetConfig+0x258>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <DMA_SetConfig+0x1d4>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <DMA_SetConfig+0x1d6>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d059      	beq.n	8004d2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	223f      	movs	r2, #63	@ 0x3f
 8004c84:	409a      	lsls	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d138      	bne.n	8004d1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cba:	e086      	b.n	8004dca <DMA_SetConfig+0x32a>
 8004cbc:	40020010 	.word	0x40020010
 8004cc0:	40020028 	.word	0x40020028
 8004cc4:	40020040 	.word	0x40020040
 8004cc8:	40020058 	.word	0x40020058
 8004ccc:	40020070 	.word	0x40020070
 8004cd0:	40020088 	.word	0x40020088
 8004cd4:	400200a0 	.word	0x400200a0
 8004cd8:	400200b8 	.word	0x400200b8
 8004cdc:	40020410 	.word	0x40020410
 8004ce0:	40020428 	.word	0x40020428
 8004ce4:	40020440 	.word	0x40020440
 8004ce8:	40020458 	.word	0x40020458
 8004cec:	40020470 	.word	0x40020470
 8004cf0:	40020488 	.word	0x40020488
 8004cf4:	400204a0 	.word	0x400204a0
 8004cf8:	400204b8 	.word	0x400204b8
 8004cfc:	58025408 	.word	0x58025408
 8004d00:	5802541c 	.word	0x5802541c
 8004d04:	58025430 	.word	0x58025430
 8004d08:	58025444 	.word	0x58025444
 8004d0c:	58025458 	.word	0x58025458
 8004d10:	5802546c 	.word	0x5802546c
 8004d14:	58025480 	.word	0x58025480
 8004d18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	e04d      	b.n	8004dca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a29      	ldr	r2, [pc, #164]	@ (8004dd8 <DMA_SetConfig+0x338>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <DMA_SetConfig+0x33c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a26      	ldr	r2, [pc, #152]	@ (8004de0 <DMA_SetConfig+0x340>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <DMA_SetConfig+0x344>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a23      	ldr	r2, [pc, #140]	@ (8004de8 <DMA_SetConfig+0x348>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <DMA_SetConfig+0x34c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a20      	ldr	r2, [pc, #128]	@ (8004df0 <DMA_SetConfig+0x350>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <DMA_SetConfig+0x2de>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <DMA_SetConfig+0x354>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <DMA_SetConfig+0x2e2>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <DMA_SetConfig+0x2e4>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d108      	bne.n	8004dba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	e007      	b.n	8004dca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	58025408 	.word	0x58025408
 8004ddc:	5802541c 	.word	0x5802541c
 8004de0:	58025430 	.word	0x58025430
 8004de4:	58025444 	.word	0x58025444
 8004de8:	58025458 	.word	0x58025458
 8004dec:	5802546c 	.word	0x5802546c
 8004df0:	58025480 	.word	0x58025480
 8004df4:	58025494 	.word	0x58025494

08004df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x118>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a41      	ldr	r2, [pc, #260]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <DMA_CalcBaseAndBitshift+0x120>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a39      	ldr	r2, [pc, #228]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a38      	ldr	r2, [pc, #224]	@ (8004f2c <DMA_CalcBaseAndBitshift+0x134>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a36      	ldr	r2, [pc, #216]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a35      	ldr	r2, [pc, #212]	@ (8004f34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <DMA_CalcBaseAndBitshift+0x140>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a32      	ldr	r2, [pc, #200]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x144>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <DMA_CalcBaseAndBitshift+0x148>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <DMA_CalcBaseAndBitshift+0x150>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <DMA_CalcBaseAndBitshift+0x154>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <DMA_CalcBaseAndBitshift+0xac>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <DMA_CalcBaseAndBitshift+0xae>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d024      	beq.n	8004ef4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	3b10      	subs	r3, #16
 8004eb2:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <DMA_CalcBaseAndBitshift+0x158>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d908      	bls.n	8004ee4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x160>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ee2:	e00d      	b.n	8004f00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x160>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef2:	e005      	b.n	8004f00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40020010 	.word	0x40020010
 8004f14:	40020028 	.word	0x40020028
 8004f18:	40020040 	.word	0x40020040
 8004f1c:	40020058 	.word	0x40020058
 8004f20:	40020070 	.word	0x40020070
 8004f24:	40020088 	.word	0x40020088
 8004f28:	400200a0 	.word	0x400200a0
 8004f2c:	400200b8 	.word	0x400200b8
 8004f30:	40020410 	.word	0x40020410
 8004f34:	40020428 	.word	0x40020428
 8004f38:	40020440 	.word	0x40020440
 8004f3c:	40020458 	.word	0x40020458
 8004f40:	40020470 	.word	0x40020470
 8004f44:	40020488 	.word	0x40020488
 8004f48:	400204a0 	.word	0x400204a0
 8004f4c:	400204b8 	.word	0x400204b8
 8004f50:	aaaaaaab 	.word	0xaaaaaaab
 8004f54:	08013ee0 	.word	0x08013ee0
 8004f58:	fffffc00 	.word	0xfffffc00

08004f5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d120      	bne.n	8004fb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d858      	bhi.n	800502a <DMA_CheckFifoParam+0xce>
 8004f78:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <DMA_CheckFifoParam+0x24>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004fa3 	.word	0x08004fa3
 8004f88:	08004f91 	.word	0x08004f91
 8004f8c:	0800502b 	.word	0x0800502b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d048      	beq.n	800502e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fa0:	e045      	b.n	800502e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004faa:	d142      	bne.n	8005032 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb0:	e03f      	b.n	8005032 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fba:	d123      	bne.n	8005004 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d838      	bhi.n	8005036 <DMA_CheckFifoParam+0xda>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <DMA_CheckFifoParam+0x70>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fe3 	.word	0x08004fe3
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08004ff5 	.word	0x08004ff5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe0:	e030      	b.n	8005044 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d025      	beq.n	800503a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ff2:	e022      	b.n	800503a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ffc:	d11f      	bne.n	800503e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005002:	e01c      	b.n	800503e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	2b02      	cmp	r3, #2
 800500a:	d902      	bls.n	8005012 <DMA_CheckFifoParam+0xb6>
 800500c:	2b03      	cmp	r3, #3
 800500e:	d003      	beq.n	8005018 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005010:	e018      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
        break;
 8005016:	e015      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
    break;
 8005028:	e00b      	b.n	8005042 <DMA_CheckFifoParam+0xe6>
        break;
 800502a:	bf00      	nop
 800502c:	e00a      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800502e:	bf00      	nop
 8005030:	e008      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 8005032:	bf00      	nop
 8005034:	e006      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 8005036:	bf00      	nop
 8005038:	e004      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
        break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <DMA_CheckFifoParam+0xe8>
    break;
 8005042:	bf00      	nop
    }
  }

  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a36      	ldr	r2, [pc, #216]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a35      	ldr	r2, [pc, #212]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	@ (8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3b08      	subs	r3, #8
 80050c4:	4a28      	ldr	r2, [pc, #160]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4b26      	ldr	r3, [pc, #152]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	461a      	mov	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050f0:	e024      	b.n	800513c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	3b10      	subs	r3, #16
 80050fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d806      	bhi.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d902      	bls.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3308      	adds	r3, #8
 8005118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800512c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	58025408 	.word	0x58025408
 800514c:	5802541c 	.word	0x5802541c
 8005150:	58025430 	.word	0x58025430
 8005154:	58025444 	.word	0x58025444
 8005158:	58025458 	.word	0x58025458
 800515c:	5802546c 	.word	0x5802546c
 8005160:	58025480 	.word	0x58025480
 8005164:	58025494 	.word	0x58025494
 8005168:	cccccccd 	.word	0xcccccccd
 800516c:	16009600 	.word	0x16009600
 8005170:	58025880 	.word	0x58025880
 8005174:	aaaaaaab 	.word	0xaaaaaaab
 8005178:	400204b8 	.word	0x400204b8
 800517c:	4002040f 	.word	0x4002040f
 8005180:	10008200 	.word	0x10008200
 8005184:	40020880 	.word	0x40020880

08005188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04a      	beq.n	8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d847      	bhi.n	8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	@ (8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a24      	ldr	r2, [pc, #144]	@ (8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a21      	ldr	r2, [pc, #132]	@ (800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1e      	ldr	r2, [pc, #120]	@ (8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4b17      	ldr	r3, [pc, #92]	@ (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005210:	671a      	str	r2, [r3, #112]	@ 0x70
 8005212:	e009      	b.n	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a11      	ldr	r2, [pc, #68]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005226:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3b01      	subs	r3, #1
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	58025408 	.word	0x58025408
 8005244:	5802541c 	.word	0x5802541c
 8005248:	58025430 	.word	0x58025430
 800524c:	58025444 	.word	0x58025444
 8005250:	58025458 	.word	0x58025458
 8005254:	5802546c 	.word	0x5802546c
 8005258:	58025480 	.word	0x58025480
 800525c:	58025494 	.word	0x58025494
 8005260:	1600963f 	.word	0x1600963f
 8005264:	58025940 	.word	0x58025940
 8005268:	1000823f 	.word	0x1000823f
 800526c:	40020940 	.word	0x40020940

08005270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800527e:	4b89      	ldr	r3, [pc, #548]	@ (80054a4 <HAL_GPIO_Init+0x234>)
 8005280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005282:	e194      	b.n	80055ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	2101      	movs	r1, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	4013      	ands	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8186 	beq.w	80055a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d005      	beq.n	80052b4 <HAL_GPIO_Init+0x44>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d130      	bne.n	8005316 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	2203      	movs	r2, #3
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4313      	orrs	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ea:	2201      	movs	r2, #1
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	f003 0201 	and.w	r2, r3, #1
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4313      	orrs	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b03      	cmp	r3, #3
 8005320:	d017      	beq.n	8005352 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	2203      	movs	r2, #3
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d123      	bne.n	80053a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	08da      	lsrs	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	220f      	movs	r2, #15
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	08da      	lsrs	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3208      	adds	r2, #8
 80053a0:	69b9      	ldr	r1, [r7, #24]
 80053a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	2203      	movs	r2, #3
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f003 0203 	and.w	r2, r3, #3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80e0 	beq.w	80055a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e8:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <HAL_GPIO_Init+0x238>)
 80053ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053ee:	4a2e      	ldr	r2, [pc, #184]	@ (80054a8 <HAL_GPIO_Init+0x238>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053f8:	4b2b      	ldr	r3, [pc, #172]	@ (80054a8 <HAL_GPIO_Init+0x238>)
 80053fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005406:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <HAL_GPIO_Init+0x23c>)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	3302      	adds	r3, #2
 800540e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	220f      	movs	r2, #15
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4013      	ands	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a20      	ldr	r2, [pc, #128]	@ (80054b0 <HAL_GPIO_Init+0x240>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d052      	beq.n	80054d8 <HAL_GPIO_Init+0x268>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <HAL_GPIO_Init+0x244>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d031      	beq.n	800549e <HAL_GPIO_Init+0x22e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1e      	ldr	r2, [pc, #120]	@ (80054b8 <HAL_GPIO_Init+0x248>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02b      	beq.n	800549a <HAL_GPIO_Init+0x22a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1d      	ldr	r2, [pc, #116]	@ (80054bc <HAL_GPIO_Init+0x24c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d025      	beq.n	8005496 <HAL_GPIO_Init+0x226>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1c      	ldr	r2, [pc, #112]	@ (80054c0 <HAL_GPIO_Init+0x250>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <HAL_GPIO_Init+0x222>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <HAL_GPIO_Init+0x254>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d019      	beq.n	800548e <HAL_GPIO_Init+0x21e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_GPIO_Init+0x258>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_GPIO_Init+0x21a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_GPIO_Init+0x25c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00d      	beq.n	8005486 <HAL_GPIO_Init+0x216>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <HAL_GPIO_Init+0x260>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <HAL_GPIO_Init+0x212>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <HAL_GPIO_Init+0x264>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_GPIO_Init+0x20e>
 800547a:	2309      	movs	r3, #9
 800547c:	e02d      	b.n	80054da <HAL_GPIO_Init+0x26a>
 800547e:	230a      	movs	r3, #10
 8005480:	e02b      	b.n	80054da <HAL_GPIO_Init+0x26a>
 8005482:	2308      	movs	r3, #8
 8005484:	e029      	b.n	80054da <HAL_GPIO_Init+0x26a>
 8005486:	2307      	movs	r3, #7
 8005488:	e027      	b.n	80054da <HAL_GPIO_Init+0x26a>
 800548a:	2306      	movs	r3, #6
 800548c:	e025      	b.n	80054da <HAL_GPIO_Init+0x26a>
 800548e:	2305      	movs	r3, #5
 8005490:	e023      	b.n	80054da <HAL_GPIO_Init+0x26a>
 8005492:	2304      	movs	r3, #4
 8005494:	e021      	b.n	80054da <HAL_GPIO_Init+0x26a>
 8005496:	2303      	movs	r3, #3
 8005498:	e01f      	b.n	80054da <HAL_GPIO_Init+0x26a>
 800549a:	2302      	movs	r3, #2
 800549c:	e01d      	b.n	80054da <HAL_GPIO_Init+0x26a>
 800549e:	2301      	movs	r3, #1
 80054a0:	e01b      	b.n	80054da <HAL_GPIO_Init+0x26a>
 80054a2:	bf00      	nop
 80054a4:	58000080 	.word	0x58000080
 80054a8:	58024400 	.word	0x58024400
 80054ac:	58000400 	.word	0x58000400
 80054b0:	58020000 	.word	0x58020000
 80054b4:	58020400 	.word	0x58020400
 80054b8:	58020800 	.word	0x58020800
 80054bc:	58020c00 	.word	0x58020c00
 80054c0:	58021000 	.word	0x58021000
 80054c4:	58021400 	.word	0x58021400
 80054c8:	58021800 	.word	0x58021800
 80054cc:	58021c00 	.word	0x58021c00
 80054d0:	58022000 	.word	0x58022000
 80054d4:	58022400 	.word	0x58022400
 80054d8:	2300      	movs	r3, #0
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	f002 0203 	and.w	r2, r2, #3
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	4093      	lsls	r3, r2
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ea:	4938      	ldr	r1, [pc, #224]	@ (80055cc <HAL_GPIO_Init+0x35c>)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800551e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800554c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	43db      	mvns	r3, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	43db      	mvns	r3, r3
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4013      	ands	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f ae63 	bne.w	8005284 <HAL_GPIO_Init+0x14>
  }
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	3724      	adds	r7, #36	@ 0x24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	58000400 	.word	0x58000400

080055d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
 80055dc:	4613      	mov	r3, r2
 80055de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055e0:	787b      	ldrb	r3, [r7, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055ec:	e003      	b.n	80055f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055ee:	887b      	ldrh	r3, [r7, #2]
 80055f0:	041a      	lsls	r2, r3, #16
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	619a      	str	r2, [r3, #24]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e08b      	b.n	800572e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb f96c 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	@ 0x24
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	e006      	b.n	800568c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800568a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d108      	bne.n	80056a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	e007      	b.n	80056b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <HAL_I2C_Init+0x134>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	02008000 	.word	0x02008000

0800573c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b20      	cmp	r3, #32
 8005750:	d138      	bne.n	80057c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800575c:	2302      	movs	r3, #2
 800575e:	e032      	b.n	80057c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800578e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d139      	bne.n	800585c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e033      	b.n	800585e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2224      	movs	r2, #36	@ 0x24
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b086      	sub	sp, #24
 800586e:	af02      	add	r7, sp, #8
 8005870:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0fe      	b.n	8005a7a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f00b ff39 	bl	8011708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2203      	movs	r2, #3
 800589a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 fc99 	bl	800b1da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7c1a      	ldrb	r2, [r3, #16]
 80058b0:	f88d 2000 	strb.w	r2, [sp]
 80058b4:	3304      	adds	r3, #4
 80058b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b8:	f005 fb6a 	bl	800af90 <USB_CoreInit>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0d5      	b.n	8005a7a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f005 fc91 	bl	800b1fc <USB_SetCurrentMode>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0c6      	b.n	8005a7a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	e04a      	b.n	8005988 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3315      	adds	r3, #21
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	3314      	adds	r3, #20
 8005916:	7bfa      	ldrb	r2, [r7, #15]
 8005918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	b298      	uxth	r0, r3
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	332e      	adds	r3, #46	@ 0x2e
 800592e:	4602      	mov	r2, r0
 8005930:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	3318      	adds	r3, #24
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	331c      	adds	r3, #28
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3320      	adds	r3, #32
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	3324      	adds	r3, #36	@ 0x24
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	3301      	adds	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	429a      	cmp	r2, r3
 8005990:	d3af      	bcc.n	80058f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e044      	b.n	8005a22 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005998:	7bfa      	ldrb	r2, [r7, #15]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059ae:	7bfa      	ldrb	r2, [r7, #15]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059c4:	7bfa      	ldrb	r2, [r7, #15]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059f0:	7bfa      	ldrb	r2, [r7, #15]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	791b      	ldrb	r3, [r3, #4]
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3b5      	bcc.n	8005998 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7c1a      	ldrb	r2, [r3, #16]
 8005a34:	f88d 2000 	strb.w	r2, [sp]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a3c:	f005 fc2a 	bl	800b294 <USB_DevInit>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e013      	b.n	8005a7a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7b1b      	ldrb	r3, [r3, #12]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d102      	bne.n	8005a6e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 f96f 	bl	8006d4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f006 fc6d 	bl	800c352 <USB_DevDisconnect>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_PCD_Start+0x1c>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e022      	b.n	8005ae4 <HAL_PCD_Start+0x62>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f005 fb74 	bl	800b1b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f006 fc1b 	bl	800c310 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b08d      	sub	sp, #52	@ 0x34
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f006 fcd9 	bl	800c4ba <USB_GetMode>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 84b9 	bne.w	8006482 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f006 fc3d 	bl	800c394 <USB_ReadInterrupts>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 84af 	beq.w	8006480 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f006 fc2a 	bl	800c394 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d107      	bne.n	8005b5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 0202 	and.w	r2, r2, #2
 8005b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f006 fc18 	bl	800c394 <USB_ReadInterrupts>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d161      	bne.n	8005c32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0210 	bic.w	r2, r2, #16
 8005b7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ba8:	d124      	bne.n	8005bf4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d035      	beq.n	8005c22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6a38      	ldr	r0, [r7, #32]
 8005bca:	f006 fa4f 	bl	800c06c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bda:	441a      	add	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bec:	441a      	add	r2, r3
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	615a      	str	r2, [r3, #20]
 8005bf2:	e016      	b.n	8005c22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005bfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005bfe:	d110      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c06:	2208      	movs	r2, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6a38      	ldr	r0, [r7, #32]
 8005c0c:	f006 fa2e 	bl	800c06c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1c:	441a      	add	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0210 	orr.w	r2, r2, #16
 8005c30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f006 fbac 	bl	800c394 <USB_ReadInterrupts>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c46:	f040 80a7 	bne.w	8005d98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f006 fbb1 	bl	800c3ba <USB_ReadDevAllOutEpInterrupt>
 8005c58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005c5a:	e099      	b.n	8005d90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 808e 	beq.w	8005d84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f006 fbd5 	bl	800c422 <USB_ReadDevOutEPInterrupt>
 8005c78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	2301      	movs	r3, #1
 8005c94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fed1 	bl	8006a40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 ffa7 	bl	8006c10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2310      	movs	r3, #16
 8005cdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d030      	beq.n	8005d4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf0:	2b80      	cmp	r3, #128	@ 0x80
 8005cf2:	d109      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	78db      	ldrb	r3, [r3, #3]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f00b fe1c 	bl	8011970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	2302      	movs	r3, #2
 8005d48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	2320      	movs	r3, #32
 8005d64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f47f af62 	bne.w	8005c5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f006 faf9 	bl	800c394 <USB_ReadInterrupts>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dac:	f040 80db 	bne.w	8005f66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f006 fb1a 	bl	800c3ee <USB_ReadDevAllInEpInterrupt>
 8005dba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005dc0:	e0cd      	b.n	8005f5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80c2 	beq.w	8005f52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f006 fb40 	bl	800c45e <USB_ReadDevInEPInterrupt>
 8005dde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d057      	beq.n	8005e9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	799b      	ldrb	r3, [r3, #6]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d132      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	3320      	adds	r3, #32
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4403      	add	r3, r0
 8005e48:	331c      	adds	r3, #28
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4419      	add	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4403      	add	r3, r0
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3324      	adds	r3, #36	@ 0x24
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d108      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e86:	461a      	mov	r2, r3
 8005e88:	2101      	movs	r1, #1
 8005e8a:	f006 fb49 	bl	800c520 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f00b fce6 	bl	8011866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2310      	movs	r3, #16
 8005ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2340      	movs	r3, #64	@ 0x40
 8005eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d023      	beq.n	8005f40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005efa:	6a38      	ldr	r0, [r7, #32]
 8005efc:	f005 fb28 	bl	800b550 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d108      	bne.n	8005f2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f00b fd33 	bl	8011994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fcea 	bl	8006926 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	3301      	adds	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f47f af2e 	bne.w	8005dc2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f006 fa12 	bl	800c394 <USB_ReadInterrupts>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f7a:	d122      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d108      	bne.n	8005fac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fef5 	bl	8006d94 <HAL_PCDEx_LPM_Callback>
 8005faa:	e002      	b.n	8005fb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f00b fcd1 	bl	8011954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f006 f9e4 	bl	800c394 <USB_ReadInterrupts>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd6:	d112      	bne.n	8005ffe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d102      	bne.n	8005fee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f00b fc8d 	bl	8011908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f006 f9c6 	bl	800c394 <USB_ReadInterrupts>
 8006008:	4603      	mov	r3, r0
 800600a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800600e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006012:	d121      	bne.n	8006058 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006022:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800602a:	2b00      	cmp	r3, #0
 800602c:	d111      	bne.n	8006052 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006048:	2101      	movs	r1, #1
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fea2 	bl	8006d94 <HAL_PCDEx_LPM_Callback>
 8006050:	e002      	b.n	8006058 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f00b fc58 	bl	8011908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f006 f999 	bl	800c394 <USB_ReadInterrupts>
 8006062:	4603      	mov	r3, r0
 8006064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606c:	f040 80b7 	bne.w	80061de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2110      	movs	r1, #16
 800608a:	4618      	mov	r0, r3
 800608c:	f005 fa60 	bl	800b550 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006090:	2300      	movs	r3, #0
 8006092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006094:	e046      	b.n	8006124 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a2:	461a      	mov	r2, r3
 80060a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	461a      	mov	r2, r3
 80060d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006118:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800611c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	3301      	adds	r3, #1
 8006122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	461a      	mov	r2, r3
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	4293      	cmp	r3, r2
 800612e:	d3b2      	bcc.n	8006096 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800613e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006142:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7bdb      	ldrb	r3, [r3, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d016      	beq.n	800617a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800615c:	f043 030b 	orr.w	r3, r3, #11
 8006160:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006172:	f043 030b 	orr.w	r3, r3, #11
 8006176:	6453      	str	r3, [r2, #68]	@ 0x44
 8006178:	e015      	b.n	80061a6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006188:	4619      	mov	r1, r3
 800618a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800618e:	4313      	orrs	r3, r2
 8006190:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a0:	f043 030b 	orr.w	r3, r3, #11
 80061a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061c8:	461a      	mov	r2, r3
 80061ca:	f006 f9a9 	bl	800c520 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80061dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f006 f8d6 	bl	800c394 <USB_ReadInterrupts>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	d123      	bne.n	800623c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f006 f96d 	bl	800c4d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f005 fa1d 	bl	800b642 <USB_GetDevSpeed>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681c      	ldr	r4, [r3, #0]
 8006214:	f001 fe58 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8006218:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800621e:	461a      	mov	r2, r3
 8006220:	4620      	mov	r0, r4
 8006222:	f004 ff27 	bl	800b074 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f00b fb45 	bl	80118b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800623a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f006 f8a7 	bl	800c394 <USB_ReadInterrupts>
 8006246:	4603      	mov	r3, r0
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d10a      	bne.n	8006266 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f00b fb22 	bl	801189a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f002 0208 	and.w	r2, r2, #8
 8006264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f006 f892 	bl	800c394 <USB_ReadInterrupts>
 8006270:	4603      	mov	r3, r0
 8006272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006276:	2b80      	cmp	r3, #128	@ 0x80
 8006278:	d123      	bne.n	80062c2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006286:	2301      	movs	r3, #1
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
 800628a:	e014      	b.n	80062b6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d105      	bne.n	80062b0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fb0a 	bl	80068c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	3301      	adds	r3, #1
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	791b      	ldrb	r3, [r3, #4]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	4293      	cmp	r3, r2
 80062c0:	d3e4      	bcc.n	800628c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f006 f864 	bl	800c394 <USB_ReadInterrupts>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d6:	d13c      	bne.n	8006352 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062d8:	2301      	movs	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
 80062dc:	e02b      	b.n	8006336 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3318      	adds	r3, #24
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d115      	bne.n	8006330 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006304:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006306:	2b00      	cmp	r3, #0
 8006308:	da12      	bge.n	8006330 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3317      	adds	r3, #23
 800631a:	2201      	movs	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 faca 	bl	80068c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	791b      	ldrb	r3, [r3, #4]
 800633a:	461a      	mov	r2, r3
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	4293      	cmp	r3, r2
 8006340:	d3cd      	bcc.n	80062de <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f006 f81c 	bl	800c394 <USB_ReadInterrupts>
 800635c:	4603      	mov	r3, r0
 800635e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006366:	d156      	bne.n	8006416 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006368:	2301      	movs	r3, #1
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
 800636c:	e045      	b.n	80063fa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d12e      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006396:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006398:	2b00      	cmp	r3, #0
 800639a:	da2b      	bge.n	80063f4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	0c1a      	lsrs	r2, r3, #16
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80063a6:	4053      	eors	r3, r2
 80063a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063f0:	6053      	str	r3, [r2, #4]
            break;
 80063f2:	e008      	b.n	8006406 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	3301      	adds	r3, #1
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	461a      	mov	r2, r3
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	4293      	cmp	r3, r2
 8006404:	d3b3      	bcc.n	800636e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f005 ffba 	bl	800c394 <USB_ReadInterrupts>
 8006420:	4603      	mov	r3, r0
 8006422:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d10a      	bne.n	8006442 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f00b fac3 	bl	80119b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f005 ffa4 	bl	800c394 <USB_ReadInterrupts>
 800644c:	4603      	mov	r3, r0
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d115      	bne.n	8006482 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f00b fab3 	bl	80119d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	e000      	b.n	8006482 <HAL_PCD_IRQHandler+0x996>
      return;
 8006480:	bf00      	nop
    }
  }
}
 8006482:	3734      	adds	r7, #52	@ 0x34
 8006484:	46bd      	mov	sp, r7
 8006486:	bd90      	pop	{r4, r7, pc}

08006488 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_PCD_SetAddress+0x1a>
 800649e:	2302      	movs	r3, #2
 80064a0:	e012      	b.n	80064c8 <HAL_PCD_SetAddress+0x40>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	78fa      	ldrb	r2, [r7, #3]
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f005 ff03 	bl	800c2c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	70fb      	strb	r3, [r7, #3]
 80064e2:	460b      	mov	r3, r1
 80064e4:	803b      	strh	r3, [r7, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da0f      	bge.n	8006516 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	4613      	mov	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3304      	adds	r3, #4
 800650c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	705a      	strb	r2, [r3, #1]
 8006514:	e00f      	b.n	8006536 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	4613      	mov	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	3304      	adds	r3, #4
 800652e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006542:	883b      	ldrh	r3, [r7, #0]
 8006544:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	78ba      	ldrb	r2, [r7, #2]
 8006550:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006564:	78bb      	ldrb	r3, [r7, #2]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d102      	bne.n	8006570 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_PCD_EP_Open+0xae>
 800657a:	2302      	movs	r3, #2
 800657c:	e00e      	b.n	800659c <HAL_PCD_EP_Open+0xcc>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	4618      	mov	r0, r3
 800658e:	f005 f87d 	bl	800b68c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800659a:	7afb      	ldrb	r3, [r7, #11]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da0f      	bge.n	80065d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 020f 	and.w	r2, r3, #15
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	3310      	adds	r3, #16
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	4413      	add	r3, r2
 80065cc:	3304      	adds	r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	705a      	strb	r2, [r3, #1]
 80065d6:	e00f      	b.n	80065f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	3304      	adds	r3, #4
 80065f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_PCD_EP_Close+0x6e>
 800660e:	2302      	movs	r3, #2
 8006610:	e00e      	b.n	8006630 <HAL_PCD_EP_Close+0x8c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	4618      	mov	r0, r3
 8006622:	f005 f8bb 	bl	800b79c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	460b      	mov	r3, r1
 8006646:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	f003 020f 	and.w	r2, r3, #15
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	3304      	adds	r3, #4
 8006660:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	b2da      	uxtb	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	799b      	ldrb	r3, [r3, #6]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d102      	bne.n	8006694 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	799b      	ldrb	r3, [r3, #6]
 800669c:	461a      	mov	r2, r3
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	f005 f958 	bl	800b954 <USB_EPStartXfer>

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80066d0:	681b      	ldr	r3, [r3, #0]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	460b      	mov	r3, r1
 80066ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	7afb      	ldrb	r3, [r7, #11]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	3310      	adds	r3, #16
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	3304      	adds	r3, #4
 8006704:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2201      	movs	r2, #1
 800671c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800671e:	7afb      	ldrb	r3, [r7, #11]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	b2da      	uxtb	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	799b      	ldrb	r3, [r3, #6]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d102      	bne.n	8006738 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	799b      	ldrb	r3, [r3, #6]
 8006740:	461a      	mov	r2, r3
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	f005 f906 	bl	800b954 <USB_EPStartXfer>

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	7912      	ldrb	r2, [r2, #4]
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e04f      	b.n	8006810 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006774:	2b00      	cmp	r3, #0
 8006776:	da0f      	bge.n	8006798 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	4613      	mov	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3310      	adds	r3, #16
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	3304      	adds	r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	705a      	strb	r2, [r3, #1]
 8006796:	e00d      	b.n	80067b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	4613      	mov	r3, r2
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	3304      	adds	r3, #4
 80067ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_PCD_EP_SetStall+0x82>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e01d      	b.n	8006810 <HAL_PCD_EP_SetStall+0xbe>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f005 fc9a 	bl	800c11c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	7999      	ldrb	r1, [r3, #6]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006800:	461a      	mov	r2, r3
 8006802:	f005 fe8d 	bl	800c520 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	7912      	ldrb	r2, [r2, #4]
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e042      	b.n	80068bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800683a:	2b00      	cmp	r3, #0
 800683c:	da0f      	bge.n	800685e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	f003 020f 	and.w	r2, r3, #15
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	3310      	adds	r3, #16
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	3304      	adds	r3, #4
 8006854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	705a      	strb	r2, [r3, #1]
 800685c:	e00f      	b.n	800687e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	3304      	adds	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <HAL_PCD_EP_ClrStall+0x86>
 800689a:	2302      	movs	r3, #2
 800689c:	e00e      	b.n	80068bc <HAL_PCD_EP_ClrStall+0xa4>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f005 fca3 	bl	800c1f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80068d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da0c      	bge.n	80068f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	f003 020f 	and.w	r2, r3, #15
 80068de:	4613      	mov	r3, r2
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	3310      	adds	r3, #16
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	3304      	adds	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e00c      	b.n	800690c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	f003 020f 	and.w	r2, r3, #15
 80068f8:	4613      	mov	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	3304      	adds	r3, #4
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	4618      	mov	r0, r3
 8006914:	f005 fac2 	bl	800be9c <USB_EPStopXfer>
 8006918:	4603      	mov	r3, r0
 800691a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800691c:	7afb      	ldrb	r3, [r7, #11]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b08a      	sub	sp, #40	@ 0x28
 800692a:	af02      	add	r7, sp, #8
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	3310      	adds	r3, #16
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	4413      	add	r3, r2
 800694a:	3304      	adds	r3, #4
 800694c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d901      	bls.n	800695e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06b      	b.n	8006a36 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	429a      	cmp	r2, r3
 8006972:	d902      	bls.n	800697a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3303      	adds	r3, #3
 800697e:	089b      	lsrs	r3, r3, #2
 8006980:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006982:	e02a      	b.n	80069da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	429a      	cmp	r2, r3
 8006998:	d902      	bls.n	80069a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3303      	adds	r3, #3
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68d9      	ldr	r1, [r3, #12]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4603      	mov	r3, r0
 80069bc:	6978      	ldr	r0, [r7, #20]
 80069be:	f005 fb17 	bl	800bff0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	441a      	add	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	441a      	add	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d809      	bhi.n	8006a04 <PCD_WriteEmptyTxFifo+0xde>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d203      	bcs.n	8006a04 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1bf      	bne.n	8006984 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d811      	bhi.n	8006a34 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	2201      	movs	r2, #1
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	6939      	ldr	r1, [r7, #16]
 8006a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a30:	4013      	ands	r3, r2
 8006a32:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	333c      	adds	r3, #60	@ 0x3c
 8006a58:	3304      	adds	r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	799b      	ldrb	r3, [r3, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d17b      	bne.n	8006b6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d015      	beq.n	8006aac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4a61      	ldr	r2, [pc, #388]	@ (8006c08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	f240 80b9 	bls.w	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80b3 	beq.w	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa8:	6093      	str	r3, [r2, #8]
 8006aaa:	e0a7      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	6093      	str	r3, [r2, #8]
 8006ac8:	e098      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 8093 	bne.w	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4a4b      	ldr	r2, [pc, #300]	@ (8006c08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d90f      	bls.n	8006afe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af4:	461a      	mov	r2, r3
 8006af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afa:	6093      	str	r3, [r2, #8]
 8006afc:	e07e      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	3304      	adds	r3, #4
 8006b12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	0159      	lsls	r1, r3, #5
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	440b      	add	r3, r1
 8006b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d114      	bne.n	8006b60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	f005 fce8 	bl	800c520 <USB_EP0_OutStart>
 8006b50:	e006      	b.n	8006b60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f00a fe62 	bl	8011830 <HAL_PCD_DataOutStageCallback>
 8006b6c:	e046      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	4a26      	ldr	r2, [pc, #152]	@ (8006c0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d124      	bne.n	8006bc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b92:	6093      	str	r3, [r2, #8]
 8006b94:	e032      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	461a      	mov	r2, r3
 8006bae:	2320      	movs	r3, #32
 8006bb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f00a fe39 	bl	8011830 <HAL_PCD_DataOutStageCallback>
 8006bbe:	e01d      	b.n	8006bfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d114      	bne.n	8006bf0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006be8:	461a      	mov	r2, r3
 8006bea:	2100      	movs	r1, #0
 8006bec:	f005 fc98 	bl	800c520 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f00a fe1a 	bl	8011830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	4f54300a 	.word	0x4f54300a
 8006c0c:	4f54310a 	.word	0x4f54310a

08006c10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	333c      	adds	r3, #60	@ 0x3c
 8006c28:	3304      	adds	r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a15      	ldr	r2, [pc, #84]	@ (8006c98 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d90e      	bls.n	8006c64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f00a fdd1 	bl	801180c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c98 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d90c      	bls.n	8006c8c <PCD_EP_OutSetupPacket_int+0x7c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	799b      	ldrb	r3, [r3, #6]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d108      	bne.n	8006c8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c84:	461a      	mov	r2, r3
 8006c86:	2101      	movs	r1, #1
 8006c88:	f005 fc4a 	bl	800c520 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	4f54300a 	.word	0x4f54300a

08006c9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d107      	bne.n	8006cca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006cba:	883b      	ldrh	r3, [r7, #0]
 8006cbc:	0419      	lsls	r1, r3, #16
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cc8:	e028      	b.n	8006d1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	e00d      	b.n	8006cfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	3340      	adds	r3, #64	@ 0x40
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	73fb      	strb	r3, [r7, #15]
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d3ec      	bcc.n	8006cde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d04:	883b      	ldrh	r3, [r7, #0]
 8006d06:	0418      	lsls	r0, r3, #16
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	4302      	orrs	r2, r0
 8006d14:	3340      	adds	r3, #64	@ 0x40
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	887a      	ldrh	r2, [r7, #2]
 8006d3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d7a:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_PCDEx_ActivateLPM+0x44>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	10000003 	.word	0x10000003

08006d94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006db4:	4b19      	ldr	r3, [pc, #100]	@ (8006e1c <HAL_PWREx_ConfigSupply+0x70>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dc0:	4b16      	ldr	r3, [pc, #88]	@ (8006e1c <HAL_PWREx_ConfigSupply+0x70>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d001      	beq.n	8006dd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e01f      	b.n	8006e12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e01d      	b.n	8006e12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006dd6:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <HAL_PWREx_ConfigSupply+0x70>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f023 0207 	bic.w	r2, r3, #7
 8006dde:	490f      	ldr	r1, [pc, #60]	@ (8006e1c <HAL_PWREx_ConfigSupply+0x70>)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006de6:	f7fa f9bf 	bl	8001168 <HAL_GetTick>
 8006dea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dec:	e009      	b.n	8006e02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dee:	f7fa f9bb 	bl	8001168 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dfc:	d901      	bls.n	8006e02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e007      	b.n	8006e12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <HAL_PWREx_ConfigSupply+0x70>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0e:	d1ee      	bne.n	8006dee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	58024800 	.word	0x58024800

08006e20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4a04      	ldr	r2, [pc, #16]	@ (8006e3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e2e:	60d3      	str	r3, [r2, #12]
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	58024800 	.word	0x58024800

08006e40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e48:	f7fa f98e 	bl	8001168 <HAL_GetTick>
 8006e4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e05f      	b.n	8006f18 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7f9 fe91 	bl	8000b8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e6a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f85a 	bl	8006f28 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	021a      	lsls	r2, r3, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	2120      	movs	r1, #32
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f852 	bl	8006f44 <QSPI_WaitFlagStateUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d135      	bne.n	8006f16 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <HAL_QSPI_Init+0xe0>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6852      	ldr	r2, [r2, #4]
 8006eb8:	0611      	lsls	r1, r2, #24
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68d2      	ldr	r2, [r2, #12]
 8006ebe:	4311      	orrs	r1, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	69d2      	ldr	r2, [r2, #28]
 8006ec4:	4311      	orrs	r1, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6a12      	ldr	r2, [r2, #32]
 8006eca:	4311      	orrs	r1, r2
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <HAL_QSPI_Init+0xe4>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6912      	ldr	r2, [r2, #16]
 8006ee2:	0411      	lsls	r1, r2, #16
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6952      	ldr	r2, [r2, #20]
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6992      	ldr	r2, [r2, #24]
 8006eee:	4311      	orrs	r1, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0201 	orr.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006f16:	7afb      	ldrb	r3, [r7, #11]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	00ffff2f 	.word	0x00ffff2f
 8006f24:	ffe0f8fe 	.word	0xffe0f8fe

08006f28 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f54:	e01a      	b.n	8006f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d016      	beq.n	8006f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fa f903 	bl	8001168 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10b      	bne.n	8006f8c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2204      	movs	r2, #4
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f80:	f043 0201 	orr.w	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e00e      	b.n	8006faa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d1d6      	bne.n	8006f56 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08c      	sub	sp, #48	@ 0x30
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	f000 bc48 	b.w	8007858 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8088 	beq.w	80070e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd6:	4b99      	ldr	r3, [pc, #612]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fe0:	4b96      	ldr	r3, [pc, #600]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d007      	beq.n	8006ffc <HAL_RCC_OscConfig+0x48>
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	2b18      	cmp	r3, #24
 8006ff0:	d111      	bne.n	8007016 <HAL_RCC_OscConfig+0x62>
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d10c      	bne.n	8007016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d06d      	beq.n	80070e4 <HAL_RCC_OscConfig+0x130>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d169      	bne.n	80070e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f000 bc21 	b.w	8007858 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701e:	d106      	bne.n	800702e <HAL_RCC_OscConfig+0x7a>
 8007020:	4b86      	ldr	r3, [pc, #536]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a85      	ldr	r2, [pc, #532]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e02e      	b.n	800708c <HAL_RCC_OscConfig+0xd8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10c      	bne.n	8007050 <HAL_RCC_OscConfig+0x9c>
 8007036:	4b81      	ldr	r3, [pc, #516]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a80      	ldr	r2, [pc, #512]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800703c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4b7e      	ldr	r3, [pc, #504]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a7d      	ldr	r2, [pc, #500]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e01d      	b.n	800708c <HAL_RCC_OscConfig+0xd8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0xc0>
 800705a:	4b78      	ldr	r3, [pc, #480]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a77      	ldr	r2, [pc, #476]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4b75      	ldr	r3, [pc, #468]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a74      	ldr	r2, [pc, #464]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800706c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e00b      	b.n	800708c <HAL_RCC_OscConfig+0xd8>
 8007074:	4b71      	ldr	r3, [pc, #452]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a70      	ldr	r2, [pc, #448]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800707a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	4b6e      	ldr	r3, [pc, #440]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a6d      	ldr	r2, [pc, #436]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800708a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d013      	beq.n	80070bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fa f868 	bl	8001168 <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800709c:	f7fa f864 	bl	8001168 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b64      	cmp	r3, #100	@ 0x64
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e3d4      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070ae:	4b63      	ldr	r3, [pc, #396]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0xe8>
 80070ba:	e014      	b.n	80070e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070bc:	f7fa f854 	bl	8001168 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c4:	f7fa f850 	bl	8001168 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b64      	cmp	r3, #100	@ 0x64
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e3c0      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070d6:	4b59      	ldr	r3, [pc, #356]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f0      	bne.n	80070c4 <HAL_RCC_OscConfig+0x110>
 80070e2:	e000      	b.n	80070e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 80ca 	beq.w	8007288 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070f4:	4b51      	ldr	r3, [pc, #324]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070fe:	4b4f      	ldr	r3, [pc, #316]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_RCC_OscConfig+0x166>
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	2b18      	cmp	r3, #24
 800710e:	d156      	bne.n	80071be <HAL_RCC_OscConfig+0x20a>
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d151      	bne.n	80071be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800711a:	4b48      	ldr	r3, [pc, #288]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_RCC_OscConfig+0x17e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e392      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007132:	4b42      	ldr	r3, [pc, #264]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f023 0219 	bic.w	r2, r3, #25
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	493f      	ldr	r1, [pc, #252]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007140:	4313      	orrs	r3, r2
 8007142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7fa f810 	bl	8001168 <HAL_GetTick>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800714c:	f7fa f80c 	bl	8001168 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e37c      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800715e:	4b37      	ldr	r3, [pc, #220]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800716a:	f7fa f82d 	bl	80011c8 <HAL_GetREVID>
 800716e:	4603      	mov	r3, r0
 8007170:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007174:	4293      	cmp	r3, r2
 8007176:	d817      	bhi.n	80071a8 <HAL_RCC_OscConfig+0x1f4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d108      	bne.n	8007192 <HAL_RCC_OscConfig+0x1de>
 8007180:	4b2e      	ldr	r3, [pc, #184]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007188:	4a2c      	ldr	r2, [pc, #176]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800718e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007190:	e07a      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007192:	4b2a      	ldr	r3, [pc, #168]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	031b      	lsls	r3, r3, #12
 80071a0:	4926      	ldr	r1, [pc, #152]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a6:	e06f      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a8:	4b24      	ldr	r3, [pc, #144]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	4921      	ldr	r1, [pc, #132]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071bc:	e064      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d047      	beq.n	8007256 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071c6:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f023 0219 	bic.w	r2, r3, #25
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	491a      	ldr	r1, [pc, #104]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7f9 ffc6 	bl	8001168 <HAL_GetTick>
 80071dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e0:	f7f9 ffc2 	bl	8001168 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e332      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071f2:	4b12      	ldr	r3, [pc, #72]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	f7f9 ffe3 	bl	80011c8 <HAL_GetREVID>
 8007202:	4603      	mov	r3, r0
 8007204:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007208:	4293      	cmp	r3, r2
 800720a:	d819      	bhi.n	8007240 <HAL_RCC_OscConfig+0x28c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b40      	cmp	r3, #64	@ 0x40
 8007212:	d108      	bne.n	8007226 <HAL_RCC_OscConfig+0x272>
 8007214:	4b09      	ldr	r3, [pc, #36]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800721c:	4a07      	ldr	r2, [pc, #28]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 800721e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007222:	6053      	str	r3, [r2, #4]
 8007224:	e030      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
 8007226:	4b05      	ldr	r3, [pc, #20]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	031b      	lsls	r3, r3, #12
 8007234:	4901      	ldr	r1, [pc, #4]	@ (800723c <HAL_RCC_OscConfig+0x288>)
 8007236:	4313      	orrs	r3, r2
 8007238:	604b      	str	r3, [r1, #4]
 800723a:	e025      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
 800723c:	58024400 	.word	0x58024400
 8007240:	4b9a      	ldr	r3, [pc, #616]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	4997      	ldr	r1, [pc, #604]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007250:	4313      	orrs	r3, r2
 8007252:	604b      	str	r3, [r1, #4]
 8007254:	e018      	b.n	8007288 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b95      	ldr	r3, [pc, #596]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a94      	ldr	r2, [pc, #592]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7f9 ff81 	bl	8001168 <HAL_GetTick>
 8007266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726a:	f7f9 ff7d 	bl	8001168 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e2ed      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800727c:	4b8b      	ldr	r3, [pc, #556]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80a9 	beq.w	80073e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007296:	4b85      	ldr	r3, [pc, #532]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800729e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072a0:	4b82      	ldr	r3, [pc, #520]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d007      	beq.n	80072bc <HAL_RCC_OscConfig+0x308>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b18      	cmp	r3, #24
 80072b0:	d13a      	bne.n	8007328 <HAL_RCC_OscConfig+0x374>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d135      	bne.n	8007328 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072bc:	4b7b      	ldr	r3, [pc, #492]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_OscConfig+0x320>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d001      	beq.n	80072d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e2c1      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072d4:	f7f9 ff78 	bl	80011c8 <HAL_GetREVID>
 80072d8:	4603      	mov	r3, r0
 80072da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80072de:	4293      	cmp	r3, r2
 80072e0:	d817      	bhi.n	8007312 <HAL_RCC_OscConfig+0x35e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d108      	bne.n	80072fc <HAL_RCC_OscConfig+0x348>
 80072ea:	4b70      	ldr	r3, [pc, #448]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80072f2:	4a6e      	ldr	r2, [pc, #440]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80072f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072fa:	e075      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072fc:	4b6b      	ldr	r3, [pc, #428]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	069b      	lsls	r3, r3, #26
 800730a:	4968      	ldr	r1, [pc, #416]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800730c:	4313      	orrs	r3, r2
 800730e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007310:	e06a      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007312:	4b66      	ldr	r3, [pc, #408]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	061b      	lsls	r3, r3, #24
 8007320:	4962      	ldr	r1, [pc, #392]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007322:	4313      	orrs	r3, r2
 8007324:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007326:	e05f      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d042      	beq.n	80073b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007330:	4b5e      	ldr	r3, [pc, #376]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5d      	ldr	r2, [pc, #372]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7f9 ff14 	bl	8001168 <HAL_GetTick>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007344:	f7f9 ff10 	bl	8001168 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e280      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007356:	4b55      	ldr	r3, [pc, #340]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007362:	f7f9 ff31 	bl	80011c8 <HAL_GetREVID>
 8007366:	4603      	mov	r3, r0
 8007368:	f241 0203 	movw	r2, #4099	@ 0x1003
 800736c:	4293      	cmp	r3, r2
 800736e:	d817      	bhi.n	80073a0 <HAL_RCC_OscConfig+0x3ec>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	2b20      	cmp	r3, #32
 8007376:	d108      	bne.n	800738a <HAL_RCC_OscConfig+0x3d6>
 8007378:	4b4c      	ldr	r3, [pc, #304]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007380:	4a4a      	ldr	r2, [pc, #296]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007382:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007386:	6053      	str	r3, [r2, #4]
 8007388:	e02e      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
 800738a:	4b48      	ldr	r3, [pc, #288]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	069b      	lsls	r3, r3, #26
 8007398:	4944      	ldr	r1, [pc, #272]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800739a:	4313      	orrs	r3, r2
 800739c:	604b      	str	r3, [r1, #4]
 800739e:	e023      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
 80073a0:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	061b      	lsls	r3, r3, #24
 80073ae:	493f      	ldr	r1, [pc, #252]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60cb      	str	r3, [r1, #12]
 80073b4:	e018      	b.n	80073e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073b6:	4b3d      	ldr	r3, [pc, #244]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3c      	ldr	r2, [pc, #240]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c2:	f7f9 fed1 	bl	8001168 <HAL_GetTick>
 80073c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073ca:	f7f9 fecd 	bl	8001168 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e23d      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073dc:	4b33      	ldr	r3, [pc, #204]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f0      	bne.n	80073ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d036      	beq.n	8007462 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d019      	beq.n	8007430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 80073fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007400:	4a2a      	ldr	r2, [pc, #168]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007408:	f7f9 feae 	bl	8001168 <HAL_GetTick>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007410:	f7f9 feaa 	bl	8001168 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e21a      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007422:	4b22      	ldr	r3, [pc, #136]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f0      	beq.n	8007410 <HAL_RCC_OscConfig+0x45c>
 800742e:	e018      	b.n	8007462 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007430:	4b1e      	ldr	r3, [pc, #120]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007434:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743c:	f7f9 fe94 	bl	8001168 <HAL_GetTick>
 8007440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007444:	f7f9 fe90 	bl	8001168 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e200      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007456:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d039      	beq.n	80074e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01c      	beq.n	80074b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a0c      	ldr	r2, [pc, #48]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800747c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007482:	f7f9 fe71 	bl	8001168 <HAL_GetTick>
 8007486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007488:	e008      	b.n	800749c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800748a:	f7f9 fe6d 	bl	8001168 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e1dd      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800749c:	4b03      	ldr	r3, [pc, #12]	@ (80074ac <HAL_RCC_OscConfig+0x4f8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0f0      	beq.n	800748a <HAL_RCC_OscConfig+0x4d6>
 80074a8:	e01b      	b.n	80074e2 <HAL_RCC_OscConfig+0x52e>
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074b0:	4b9b      	ldr	r3, [pc, #620]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a9a      	ldr	r2, [pc, #616]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80074b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074bc:	f7f9 fe54 	bl	8001168 <HAL_GetTick>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074c4:	f7f9 fe50 	bl	8001168 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e1c0      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074d6:	4b92      	ldr	r3, [pc, #584]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f0      	bne.n	80074c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8081 	beq.w	80075f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007724 <HAL_RCC_OscConfig+0x770>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a8b      	ldr	r2, [pc, #556]	@ (8007724 <HAL_RCC_OscConfig+0x770>)
 80074f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074fc:	f7f9 fe34 	bl	8001168 <HAL_GetTick>
 8007500:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007504:	f7f9 fe30 	bl	8001168 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b64      	cmp	r3, #100	@ 0x64
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e1a0      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007516:	4b83      	ldr	r3, [pc, #524]	@ (8007724 <HAL_RCC_OscConfig+0x770>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d106      	bne.n	8007538 <HAL_RCC_OscConfig+0x584>
 800752a:	4b7d      	ldr	r3, [pc, #500]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752e:	4a7c      	ldr	r2, [pc, #496]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	6713      	str	r3, [r2, #112]	@ 0x70
 8007536:	e02d      	b.n	8007594 <HAL_RCC_OscConfig+0x5e0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <HAL_RCC_OscConfig+0x5a6>
 8007540:	4b77      	ldr	r3, [pc, #476]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007544:	4a76      	ldr	r2, [pc, #472]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	6713      	str	r3, [r2, #112]	@ 0x70
 800754c:	4b74      	ldr	r3, [pc, #464]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	4a73      	ldr	r2, [pc, #460]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007552:	f023 0304 	bic.w	r3, r3, #4
 8007556:	6713      	str	r3, [r2, #112]	@ 0x70
 8007558:	e01c      	b.n	8007594 <HAL_RCC_OscConfig+0x5e0>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2b05      	cmp	r3, #5
 8007560:	d10c      	bne.n	800757c <HAL_RCC_OscConfig+0x5c8>
 8007562:	4b6f      	ldr	r3, [pc, #444]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	4a6e      	ldr	r2, [pc, #440]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007568:	f043 0304 	orr.w	r3, r3, #4
 800756c:	6713      	str	r3, [r2, #112]	@ 0x70
 800756e:	4b6c      	ldr	r3, [pc, #432]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007572:	4a6b      	ldr	r2, [pc, #428]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	6713      	str	r3, [r2, #112]	@ 0x70
 800757a:	e00b      	b.n	8007594 <HAL_RCC_OscConfig+0x5e0>
 800757c:	4b68      	ldr	r3, [pc, #416]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007580:	4a67      	ldr	r2, [pc, #412]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	6713      	str	r3, [r2, #112]	@ 0x70
 8007588:	4b65      	ldr	r3, [pc, #404]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758c:	4a64      	ldr	r2, [pc, #400]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800758e:	f023 0304 	bic.w	r3, r3, #4
 8007592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d015      	beq.n	80075c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759c:	f7f9 fde4 	bl	8001168 <HAL_GetTick>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a2:	e00a      	b.n	80075ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7f9 fde0 	bl	8001168 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e14e      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ba:	4b59      	ldr	r3, [pc, #356]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0ee      	beq.n	80075a4 <HAL_RCC_OscConfig+0x5f0>
 80075c6:	e014      	b.n	80075f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c8:	f7f9 fdce 	bl	8001168 <HAL_GetTick>
 80075cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7f9 fdca 	bl	8001168 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e138      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ee      	bne.n	80075d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 812d 	beq.w	8007856 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075fc:	4b48      	ldr	r3, [pc, #288]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007604:	2b18      	cmp	r3, #24
 8007606:	f000 80bd 	beq.w	8007784 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760e:	2b02      	cmp	r3, #2
 8007610:	f040 809e 	bne.w	8007750 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007614:	4b42      	ldr	r3, [pc, #264]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a41      	ldr	r2, [pc, #260]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800761a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800761e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7f9 fda2 	bl	8001168 <HAL_GetTick>
 8007624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007628:	f7f9 fd9e 	bl	8001168 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e10e      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763a:	4b39      	ldr	r3, [pc, #228]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007646:	4b36      	ldr	r3, [pc, #216]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800764a:	4b37      	ldr	r3, [pc, #220]	@ (8007728 <HAL_RCC_OscConfig+0x774>)
 800764c:	4013      	ands	r3, r2
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007656:	0112      	lsls	r2, r2, #4
 8007658:	430a      	orrs	r2, r1
 800765a:	4931      	ldr	r1, [pc, #196]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800765c:	4313      	orrs	r3, r2
 800765e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007664:	3b01      	subs	r3, #1
 8007666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766e:	3b01      	subs	r3, #1
 8007670:	025b      	lsls	r3, r3, #9
 8007672:	b29b      	uxth	r3, r3
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	3b01      	subs	r3, #1
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007688:	3b01      	subs	r3, #1
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007690:	4923      	ldr	r1, [pc, #140]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007692:	4313      	orrs	r3, r2
 8007694:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007696:	4b22      	ldr	r3, [pc, #136]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	4a21      	ldr	r2, [pc, #132]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a6:	4b21      	ldr	r3, [pc, #132]	@ (800772c <HAL_RCC_OscConfig+0x778>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076ae:	00d2      	lsls	r2, r2, #3
 80076b0:	491b      	ldr	r1, [pc, #108]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	f023 020c 	bic.w	r2, r3, #12
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	4917      	ldr	r1, [pc, #92]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076c8:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f023 0202 	bic.w	r2, r3, #2
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d4:	4912      	ldr	r1, [pc, #72]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076da:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	4a10      	ldr	r2, [pc, #64]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 80076f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076fe:	4b08      	ldr	r3, [pc, #32]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4a07      	ldr	r2, [pc, #28]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800770a:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a04      	ldr	r2, [pc, #16]	@ (8007720 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007716:	f7f9 fd27 	bl	8001168 <HAL_GetTick>
 800771a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800771c:	e011      	b.n	8007742 <HAL_RCC_OscConfig+0x78e>
 800771e:	bf00      	nop
 8007720:	58024400 	.word	0x58024400
 8007724:	58024800 	.word	0x58024800
 8007728:	fffffc0c 	.word	0xfffffc0c
 800772c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007730:	f7f9 fd1a 	bl	8001168 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e08a      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007742:	4b47      	ldr	r3, [pc, #284]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0x77c>
 800774e:	e082      	b.n	8007856 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007750:	4b43      	ldr	r3, [pc, #268]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a42      	ldr	r2, [pc, #264]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7f9 fd04 	bl	8001168 <HAL_GetTick>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007764:	f7f9 fd00 	bl	8001168 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e070      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007776:	4b3a      	ldr	r3, [pc, #232]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x7b0>
 8007782:	e068      	b.n	8007856 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007784:	4b36      	ldr	r3, [pc, #216]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800778a:	4b35      	ldr	r3, [pc, #212]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 800778c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	2b01      	cmp	r3, #1
 8007796:	d031      	beq.n	80077fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f003 0203 	and.w	r2, r3, #3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d12a      	bne.n	80077fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d122      	bne.n	80077fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d11a      	bne.n	80077fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0a5b      	lsrs	r3, r3, #9
 80077ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d111      	bne.n	80077fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	0c1b      	lsrs	r3, r3, #16
 80077dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d108      	bne.n	80077fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0e1b      	lsrs	r3, r3, #24
 80077ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e02b      	b.n	8007858 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007800:	4b17      	ldr	r3, [pc, #92]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007804:	08db      	lsrs	r3, r3, #3
 8007806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800780a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d01f      	beq.n	8007856 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007816:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	4a11      	ldr	r2, [pc, #68]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007822:	f7f9 fca1 	bl	8001168 <HAL_GetTick>
 8007826:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007828:	bf00      	nop
 800782a:	f7f9 fc9d 	bl	8001168 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	4293      	cmp	r3, r2
 8007834:	d0f9      	beq.n	800782a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800783a:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <HAL_RCC_OscConfig+0x8b0>)
 800783c:	4013      	ands	r3, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007842:	00d2      	lsls	r2, r2, #3
 8007844:	4906      	ldr	r1, [pc, #24]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007846:	4313      	orrs	r3, r2
 8007848:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800784a:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	4a04      	ldr	r2, [pc, #16]	@ (8007860 <HAL_RCC_OscConfig+0x8ac>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3730      	adds	r7, #48	@ 0x30
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	58024400 	.word	0x58024400
 8007864:	ffff0007 	.word	0xffff0007

08007868 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e19c      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800787c:	4b8a      	ldr	r3, [pc, #552]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d910      	bls.n	80078ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800788a:	4b87      	ldr	r3, [pc, #540]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f023 020f 	bic.w	r2, r3, #15
 8007892:	4985      	ldr	r1, [pc, #532]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	4313      	orrs	r3, r2
 8007898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800789a:	4b83      	ldr	r3, [pc, #524]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d001      	beq.n	80078ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e184      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d010      	beq.n	80078da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	4b7b      	ldr	r3, [pc, #492]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d908      	bls.n	80078da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078c8:	4b78      	ldr	r3, [pc, #480]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	4975      	ldr	r1, [pc, #468]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d010      	beq.n	8007908 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	4b70      	ldr	r3, [pc, #448]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d908      	bls.n	8007908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078f6:	4b6d      	ldr	r3, [pc, #436]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	496a      	ldr	r1, [pc, #424]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007904:	4313      	orrs	r3, r2
 8007906:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b00      	cmp	r3, #0
 8007912:	d010      	beq.n	8007936 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	4b64      	ldr	r3, [pc, #400]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007920:	429a      	cmp	r2, r3
 8007922:	d908      	bls.n	8007936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007924:	4b61      	ldr	r3, [pc, #388]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	495e      	ldr	r1, [pc, #376]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007932:	4313      	orrs	r3, r2
 8007934:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d010      	beq.n	8007964 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	4b59      	ldr	r3, [pc, #356]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800794e:	429a      	cmp	r2, r3
 8007950:	d908      	bls.n	8007964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007952:	4b56      	ldr	r3, [pc, #344]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	4953      	ldr	r1, [pc, #332]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007960:	4313      	orrs	r3, r2
 8007962:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d010      	beq.n	8007992 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	4b4d      	ldr	r3, [pc, #308]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	429a      	cmp	r2, r3
 800797e:	d908      	bls.n	8007992 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007980:	4b4a      	ldr	r3, [pc, #296]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f023 020f 	bic.w	r2, r3, #15
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4947      	ldr	r1, [pc, #284]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 800798e:	4313      	orrs	r3, r2
 8007990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d055      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800799e:	4b43      	ldr	r3, [pc, #268]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4940      	ldr	r1, [pc, #256]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d107      	bne.n	80079c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079b8:	4b3c      	ldr	r3, [pc, #240]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d121      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e0f6      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d107      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079d0:	4b36      	ldr	r3, [pc, #216]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d115      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0ea      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d107      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079e8:	4b30      	ldr	r3, [pc, #192]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0de      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f8:	4b2c      	ldr	r3, [pc, #176]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0d6      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a08:	4b28      	ldr	r3, [pc, #160]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f023 0207 	bic.w	r2, r3, #7
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4925      	ldr	r1, [pc, #148]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a1a:	f7f9 fba5 	bl	8001168 <HAL_GetTick>
 8007a1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a20:	e00a      	b.n	8007a38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a22:	f7f9 fba1 	bl	8001168 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e0be      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a38:	4b1c      	ldr	r3, [pc, #112]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d1eb      	bne.n	8007a22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d010      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	4b14      	ldr	r3, [pc, #80]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d208      	bcs.n	8007a78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a66:	4b11      	ldr	r3, [pc, #68]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f023 020f 	bic.w	r2, r3, #15
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	490e      	ldr	r1, [pc, #56]	@ (8007aac <HAL_RCC_ClockConfig+0x244>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a78:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d214      	bcs.n	8007ab0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 020f 	bic.w	r2, r3, #15
 8007a8e:	4906      	ldr	r1, [pc, #24]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a96:	4b04      	ldr	r3, [pc, #16]	@ (8007aa8 <HAL_RCC_ClockConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e086      	b.n	8007bb6 <HAL_RCC_ClockConfig+0x34e>
 8007aa8:	52002000 	.word	0x52002000
 8007aac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d208      	bcs.n	8007ade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007acc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4939      	ldr	r1, [pc, #228]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d010      	beq.n	8007b0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	4b34      	ldr	r3, [pc, #208]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d208      	bcs.n	8007b0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007afa:	4b31      	ldr	r3, [pc, #196]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	492e      	ldr	r1, [pc, #184]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d010      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	4b28      	ldr	r3, [pc, #160]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d208      	bcs.n	8007b3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b28:	4b25      	ldr	r3, [pc, #148]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	4922      	ldr	r1, [pc, #136]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d010      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d208      	bcs.n	8007b68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b56:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	4917      	ldr	r1, [pc, #92]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b68:	f000 f834 	bl	8007bd4 <HAL_RCC_GetSysClockFreq>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	4b14      	ldr	r3, [pc, #80]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	4912      	ldr	r1, [pc, #72]	@ (8007bc4 <HAL_RCC_ClockConfig+0x35c>)
 8007b7a:	5ccb      	ldrb	r3, [r1, r3]
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b86:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc0 <HAL_RCC_ClockConfig+0x358>)
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc4 <HAL_RCC_ClockConfig+0x35c>)
 8007b90:	5cd3      	ldrb	r3, [r2, r3]
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007bc8 <HAL_RCC_ClockConfig+0x360>)
 8007b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <HAL_RCC_ClockConfig+0x364>)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd0 <HAL_RCC_ClockConfig+0x368>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f9 f8d6 	bl	8000d5c <HAL_InitTick>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	08013ed0 	.word	0x08013ed0
 8007bc8:	24000004 	.word	0x24000004
 8007bcc:	24000000 	.word	0x24000000
 8007bd0:	24000008 	.word	0x24000008

08007bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b089      	sub	sp, #36	@ 0x24
 8007bd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bda:	4bb3      	ldr	r3, [pc, #716]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007be2:	2b18      	cmp	r3, #24
 8007be4:	f200 8155 	bhi.w	8007e92 <HAL_RCC_GetSysClockFreq+0x2be>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c55 	.word	0x08007c55
 8007bf4:	08007e93 	.word	0x08007e93
 8007bf8:	08007e93 	.word	0x08007e93
 8007bfc:	08007e93 	.word	0x08007e93
 8007c00:	08007e93 	.word	0x08007e93
 8007c04:	08007e93 	.word	0x08007e93
 8007c08:	08007e93 	.word	0x08007e93
 8007c0c:	08007e93 	.word	0x08007e93
 8007c10:	08007c7b 	.word	0x08007c7b
 8007c14:	08007e93 	.word	0x08007e93
 8007c18:	08007e93 	.word	0x08007e93
 8007c1c:	08007e93 	.word	0x08007e93
 8007c20:	08007e93 	.word	0x08007e93
 8007c24:	08007e93 	.word	0x08007e93
 8007c28:	08007e93 	.word	0x08007e93
 8007c2c:	08007e93 	.word	0x08007e93
 8007c30:	08007c81 	.word	0x08007c81
 8007c34:	08007e93 	.word	0x08007e93
 8007c38:	08007e93 	.word	0x08007e93
 8007c3c:	08007e93 	.word	0x08007e93
 8007c40:	08007e93 	.word	0x08007e93
 8007c44:	08007e93 	.word	0x08007e93
 8007c48:	08007e93 	.word	0x08007e93
 8007c4c:	08007e93 	.word	0x08007e93
 8007c50:	08007c87 	.word	0x08007c87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c54:	4b94      	ldr	r3, [pc, #592]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c60:	4b91      	ldr	r3, [pc, #580]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	08db      	lsrs	r3, r3, #3
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	4a90      	ldr	r2, [pc, #576]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c72:	e111      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c74:	4b8d      	ldr	r3, [pc, #564]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c76:	61bb      	str	r3, [r7, #24]
      break;
 8007c78:	e10e      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c7c:	61bb      	str	r3, [r7, #24]
      break;
 8007c7e:	e10b      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c80:	4b8c      	ldr	r3, [pc, #560]	@ (8007eb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c82:	61bb      	str	r3, [r7, #24]
      break;
 8007c84:	e108      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c86:	4b88      	ldr	r3, [pc, #544]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c90:	4b85      	ldr	r3, [pc, #532]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	091b      	lsrs	r3, r3, #4
 8007c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c9c:	4b82      	ldr	r3, [pc, #520]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ca6:	4b80      	ldr	r3, [pc, #512]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80e1 	beq.w	8007e8c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	f000 8083 	beq.w	8007dd8 <HAL_RCC_GetSysClockFreq+0x204>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	f200 80a1 	bhi.w	8007e1c <HAL_RCC_GetSysClockFreq+0x248>
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x114>
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d056      	beq.n	8007d94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ce6:	e099      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d02d      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8007eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d00:	fa22 f303 	lsr.w	r3, r2, r3
 8007d04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b62      	ldr	r3, [pc, #392]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d4e:	e087      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ebc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b51      	ldr	r3, [pc, #324]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d92:	e065      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b40      	ldr	r3, [pc, #256]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dd6:	e043      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ec4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dfe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e1a:	e021      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e60:	4b11      	ldr	r3, [pc, #68]	@ (8007ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	0a5b      	lsrs	r3, r3, #9
 8007e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e84:	ee17 3a90 	vmov	r3, s15
 8007e88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e8a:	e005      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61bb      	str	r3, [r7, #24]
      break;
 8007e90:	e002      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e92:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e94:	61bb      	str	r3, [r7, #24]
      break;
 8007e96:	bf00      	nop
  }

  return sysclockfreq;
 8007e98:	69bb      	ldr	r3, [r7, #24]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3724      	adds	r7, #36	@ 0x24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	58024400 	.word	0x58024400
 8007eac:	03d09000 	.word	0x03d09000
 8007eb0:	003d0900 	.word	0x003d0900
 8007eb4:	017d7840 	.word	0x017d7840
 8007eb8:	46000000 	.word	0x46000000
 8007ebc:	4c742400 	.word	0x4c742400
 8007ec0:	4a742400 	.word	0x4a742400
 8007ec4:	4bbebc20 	.word	0x4bbebc20

08007ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ece:	f7ff fe81 	bl	8007bd4 <HAL_RCC_GetSysClockFreq>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4b10      	ldr	r3, [pc, #64]	@ (8007f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	0a1b      	lsrs	r3, r3, #8
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	490f      	ldr	r1, [pc, #60]	@ (8007f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ee0:	5ccb      	ldrb	r3, [r1, r3]
 8007ee2:	f003 031f 	and.w	r3, r3, #31
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ef6:	5cd3      	ldrb	r3, [r2, r3]
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	fa22 f303 	lsr.w	r3, r2, r3
 8007f02:	4a07      	ldr	r2, [pc, #28]	@ (8007f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f06:	4a07      	ldr	r2, [pc, #28]	@ (8007f24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f0c:	4b04      	ldr	r3, [pc, #16]	@ (8007f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	08013ed0 	.word	0x08013ed0
 8007f20:	24000004 	.word	0x24000004
 8007f24:	24000000 	.word	0x24000000

08007f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f2c:	f7ff ffcc 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	091b      	lsrs	r3, r3, #4
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	4904      	ldr	r1, [pc, #16]	@ (8007f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f3e:	5ccb      	ldrb	r3, [r1, r3]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	08013ed0 	.word	0x08013ed0

08007f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f58:	f7ff ffb6 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	4904      	ldr	r1, [pc, #16]	@ (8007f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f6a:	5ccb      	ldrb	r3, [r1, r3]
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	08013ed0 	.word	0x08013ed0

08007f80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	223f      	movs	r2, #63	@ 0x3f
 8007f8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f90:	4b1a      	ldr	r3, [pc, #104]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0207 	and.w	r2, r3, #7
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007f9c:	4b17      	ldr	r3, [pc, #92]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007fa8:	4b14      	ldr	r3, [pc, #80]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007fb4:	4b11      	ldr	r3, [pc, #68]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007fd8:	4b08      	ldr	r3, [pc, #32]	@ (8007ffc <HAL_RCC_GetClockConfig+0x7c>)
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fe4:	4b06      	ldr	r3, [pc, #24]	@ (8008000 <HAL_RCC_GetClockConfig+0x80>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 020f 	and.w	r2, r3, #15
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	601a      	str	r2, [r3, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	58024400 	.word	0x58024400
 8008000:	52002000 	.word	0x52002000

08008004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008008:	b0ca      	sub	sp, #296	@ 0x128
 800800a:	af00      	add	r7, sp, #0
 800800c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008028:	2500      	movs	r5, #0
 800802a:	ea54 0305 	orrs.w	r3, r4, r5
 800802e:	d049      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008036:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800803a:	d02f      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800803c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008040:	d828      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008046:	d01a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008048:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800804c:	d822      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008056:	d007      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008058:	e01c      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800805a:	4bb8      	ldr	r3, [pc, #736]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	4ab7      	ldr	r2, [pc, #732]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008066:	e01a      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806c:	3308      	adds	r3, #8
 800806e:	2102      	movs	r1, #2
 8008070:	4618      	mov	r0, r3
 8008072:	f002 fb61 	bl	800a738 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800807c:	e00f      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f002 fc08 	bl	800a89c <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008092:	e004      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800809a:	e000      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800809c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080a6:	4ba5      	ldr	r3, [pc, #660]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b4:	4aa1      	ldr	r2, [pc, #644]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080b6:	430b      	orrs	r3, r1
 80080b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ba:	e003      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80080d0:	f04f 0900 	mov.w	r9, #0
 80080d4:	ea58 0309 	orrs.w	r3, r8, r9
 80080d8:	d047      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d82a      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80080e4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008101 	.word	0x08008101
 80080f0:	0800810f 	.word	0x0800810f
 80080f4:	08008125 	.word	0x08008125
 80080f8:	08008143 	.word	0x08008143
 80080fc:	08008143 	.word	0x08008143
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008100:	4b8e      	ldr	r3, [pc, #568]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	4a8d      	ldr	r2, [pc, #564]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800810c:	e01a      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	3308      	adds	r3, #8
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f002 fb0e 	bl	800a738 <RCCEx_PLL2_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008122:	e00f      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	3328      	adds	r3, #40	@ 0x28
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f002 fbb5 	bl	800a89c <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008138:	e004      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008140:	e000      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800814c:	4b7b      	ldr	r3, [pc, #492]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800814e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008150:	f023 0107 	bic.w	r1, r3, #7
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800815a:	4a78      	ldr	r2, [pc, #480]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800815c:	430b      	orrs	r3, r1
 800815e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008160:	e003      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008176:	f04f 0b00 	mov.w	fp, #0
 800817a:	ea5a 030b 	orrs.w	r3, sl, fp
 800817e:	d04c      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800818a:	d030      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800818c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008190:	d829      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008192:	2bc0      	cmp	r3, #192	@ 0xc0
 8008194:	d02d      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008196:	2bc0      	cmp	r3, #192	@ 0xc0
 8008198:	d825      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800819a:	2b80      	cmp	r3, #128	@ 0x80
 800819c:	d018      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800819e:	2b80      	cmp	r3, #128	@ 0x80
 80081a0:	d821      	bhi.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d007      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80081aa:	e01c      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ac:	4b63      	ldr	r3, [pc, #396]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b0:	4a62      	ldr	r2, [pc, #392]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081b8:	e01c      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	3308      	adds	r3, #8
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f002 fab8 	bl	800a738 <RCCEx_PLL2_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081ce:	e011      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d4:	3328      	adds	r3, #40	@ 0x28
 80081d6:	2100      	movs	r1, #0
 80081d8:	4618      	mov	r0, r3
 80081da:	f002 fb5f 	bl	800a89c <RCCEx_PLL3_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081e4:	e006      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081ec:	e002      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80081f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80081fc:	4b4f      	ldr	r3, [pc, #316]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008200:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800820a:	4a4c      	ldr	r2, [pc, #304]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800820c:	430b      	orrs	r3, r1
 800820e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008210:	e003      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800822a:	2300      	movs	r3, #0
 800822c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008230:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008234:	460b      	mov	r3, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	d053      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008246:	d035      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800824c:	d82e      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800824e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008252:	d031      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008254:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008258:	d828      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800825a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800825e:	d01a      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008264:	d822      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800826a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800826e:	d007      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008270:	e01c      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008272:	4b32      	ldr	r3, [pc, #200]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	4a31      	ldr	r2, [pc, #196]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800827c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800827e:	e01c      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008284:	3308      	adds	r3, #8
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f002 fa55 	bl	800a738 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008294:	e011      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829a:	3328      	adds	r3, #40	@ 0x28
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 fafc 	bl	800a89c <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80082b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80082c2:	4b1e      	ldr	r3, [pc, #120]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082d2:	4a1a      	ldr	r2, [pc, #104]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80082d8:	e003      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80082ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80082f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80082fc:	460b      	mov	r3, r1
 80082fe:	4313      	orrs	r3, r2
 8008300:	d056      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800830a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800830e:	d038      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008314:	d831      	bhi.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800831a:	d034      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800831c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008320:	d82b      	bhi.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008326:	d01d      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800832c:	d825      	bhi.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d006      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008338:	e01f      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800833a:	bf00      	nop
 800833c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008340:	4ba2      	ldr	r3, [pc, #648]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4aa1      	ldr	r2, [pc, #644]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800834a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800834c:	e01c      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	3308      	adds	r3, #8
 8008354:	2100      	movs	r1, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f002 f9ee 	bl	800a738 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008362:	e011      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	3328      	adds	r3, #40	@ 0x28
 800836a:	2100      	movs	r1, #0
 800836c:	4618      	mov	r0, r3
 800836e:	f002 fa95 	bl	800a89c <RCCEx_PLL3_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008378:	e006      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008380:	e002      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008382:	bf00      	nop
 8008384:	e000      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008390:	4b8e      	ldr	r3, [pc, #568]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008394:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083a0:	4a8a      	ldr	r2, [pc, #552]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083a2:	430b      	orrs	r3, r1
 80083a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80083bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083c0:	2300      	movs	r3, #0
 80083c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80083ca:	460b      	mov	r3, r1
 80083cc:	4313      	orrs	r3, r2
 80083ce:	d03a      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d6:	2b30      	cmp	r3, #48	@ 0x30
 80083d8:	d01f      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80083da:	2b30      	cmp	r3, #48	@ 0x30
 80083dc:	d819      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d00c      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d815      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d019      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d111      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ee:	4b77      	ldr	r3, [pc, #476]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f2:	4a76      	ldr	r2, [pc, #472]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80083fa:	e011      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008400:	3308      	adds	r3, #8
 8008402:	2102      	movs	r1, #2
 8008404:	4618      	mov	r0, r3
 8008406:	f002 f997 	bl	800a738 <RCCEx_PLL2_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008410:	e006      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008418:	e002      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800841a:	bf00      	nop
 800841c:	e000      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800841e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008428:	4b68      	ldr	r3, [pc, #416]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800842a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008436:	4a65      	ldr	r2, [pc, #404]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008438:	430b      	orrs	r3, r1
 800843a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800843c:	e003      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008456:	2300      	movs	r3, #0
 8008458:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800845c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008460:	460b      	mov	r3, r1
 8008462:	4313      	orrs	r3, r2
 8008464:	d051      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800846c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008470:	d035      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008476:	d82e      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008478:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800847c:	d031      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800847e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008482:	d828      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008488:	d01a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800848a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800848e:	d822      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008498:	d007      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800849a:	e01c      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4b4b      	ldr	r3, [pc, #300]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	4a4a      	ldr	r2, [pc, #296]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084a8:	e01c      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	3308      	adds	r3, #8
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 f940 	bl	800a738 <RCCEx_PLL2_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084be:	e011      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	3328      	adds	r3, #40	@ 0x28
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 f9e7 	bl	800a89c <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80084e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084ec:	4b37      	ldr	r3, [pc, #220]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084fa:	4a34      	ldr	r2, [pc, #208]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084fc:	430b      	orrs	r3, r1
 80084fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008500:	e003      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008520:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008524:	460b      	mov	r3, r1
 8008526:	4313      	orrs	r3, r2
 8008528:	d056      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008534:	d033      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800853a:	d82c      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800853c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008540:	d02f      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008542:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008546:	d826      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800854c:	d02b      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800854e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008552:	d820      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008558:	d012      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800855a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800855e:	d81a      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d022      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008568:	d115      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	3308      	adds	r3, #8
 8008570:	2101      	movs	r1, #1
 8008572:	4618      	mov	r0, r3
 8008574:	f002 f8e0 	bl	800a738 <RCCEx_PLL2_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800857e:	e015      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	3328      	adds	r3, #40	@ 0x28
 8008586:	2101      	movs	r1, #1
 8008588:	4618      	mov	r0, r3
 800858a:	f002 f987 	bl	800a89c <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008594:	e00a      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800859c:	e006      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800859e:	bf00      	nop
 80085a0:	e004      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80085bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c2:	4a02      	ldr	r2, [pc, #8]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80085c8:	e006      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80085ca:	bf00      	nop
 80085cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80085e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4313      	orrs	r3, r2
 80085f6:	d055      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80085f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008604:	d033      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800860a:	d82c      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800860c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008610:	d02f      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008616:	d826      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800861c:	d02b      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800861e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008622:	d820      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008628:	d012      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800862a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862e:	d81a      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d022      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008638:	d115      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863e:	3308      	adds	r3, #8
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f002 f878 	bl	800a738 <RCCEx_PLL2_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800864e:	e015      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008654:	3328      	adds	r3, #40	@ 0x28
 8008656:	2101      	movs	r1, #1
 8008658:	4618      	mov	r0, r3
 800865a:	f002 f91f 	bl	800a89c <RCCEx_PLL3_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008664:	e00a      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800866c:	e006      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800866e:	bf00      	nop
 8008670:	e004      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008672:	bf00      	nop
 8008674:	e002      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008676:	bf00      	nop
 8008678:	e000      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800867a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10b      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008684:	4ba3      	ldr	r3, [pc, #652]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008688:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800868c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008690:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008694:	4a9f      	ldr	r2, [pc, #636]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008696:	430b      	orrs	r3, r1
 8008698:	6593      	str	r3, [r2, #88]	@ 0x58
 800869a:	e003      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80086b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	d037      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ce:	d00e      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80086d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d4:	d816      	bhi.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d018      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80086da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086de:	d111      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	4a8b      	ldr	r2, [pc, #556]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80086ec:	e00f      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f2:	3308      	adds	r3, #8
 80086f4:	2101      	movs	r1, #1
 80086f6:	4618      	mov	r0, r3
 80086f8:	f002 f81e 	bl	800a738 <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008702:	e004      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800870a:	e000      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800870c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008716:	4b7f      	ldr	r3, [pc, #508]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800871a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800871e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008724:	4a7b      	ldr	r2, [pc, #492]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008726:	430b      	orrs	r3, r1
 8008728:	6513      	str	r3, [r2, #80]	@ 0x50
 800872a:	e003      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008744:	2300      	movs	r3, #0
 8008746:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800874a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800874e:	460b      	mov	r3, r1
 8008750:	4313      	orrs	r3, r2
 8008752:	d039      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	2b03      	cmp	r3, #3
 800875c:	d81c      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	080087a1 	.word	0x080087a1
 8008768:	08008775 	.word	0x08008775
 800876c:	08008783 	.word	0x08008783
 8008770:	080087a1 	.word	0x080087a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008774:	4b67      	ldr	r3, [pc, #412]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	4a66      	ldr	r2, [pc, #408]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800877a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800877e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008780:	e00f      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	3308      	adds	r3, #8
 8008788:	2102      	movs	r1, #2
 800878a:	4618      	mov	r0, r3
 800878c:	f001 ffd4 	bl	800a738 <RCCEx_PLL2_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008796:	e004      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800879e:	e000      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80087a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80087aa:	4b5a      	ldr	r3, [pc, #360]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087ae:	f023 0103 	bic.w	r1, r3, #3
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b8:	4a56      	ldr	r2, [pc, #344]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ba:	430b      	orrs	r3, r1
 80087bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087be:	e003      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80087d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f000 809f 	beq.w	8008928 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80087f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087f6:	f7f8 fcb7 	bl	8001168 <HAL_GetTick>
 80087fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087fe:	e00b      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008800:	f7f8 fcb2 	bl	8001168 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b64      	cmp	r3, #100	@ 0x64
 800880e:	d903      	bls.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008816:	e005      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008818:	4b3f      	ldr	r3, [pc, #252]	@ (8008918 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0ed      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008828:	2b00      	cmp	r3, #0
 800882a:	d179      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800882c:	4b39      	ldr	r3, [pc, #228]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800882e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008838:	4053      	eors	r3, r2
 800883a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800883e:	2b00      	cmp	r3, #0
 8008840:	d015      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008842:	4b34      	ldr	r3, [pc, #208]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800884a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800884e:	4b31      	ldr	r3, [pc, #196]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008852:	4a30      	ldr	r2, [pc, #192]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008858:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800885a:	4b2e      	ldr	r3, [pc, #184]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800885c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800885e:	4a2d      	ldr	r2, [pc, #180]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008864:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008866:	4a2b      	ldr	r2, [pc, #172]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800886c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887a:	d118      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7f8 fc74 	bl	8001168 <HAL_GetTick>
 8008880:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008884:	e00d      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008886:	f7f8 fc6f 	bl	8001168 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008896:	429a      	cmp	r2, r3
 8008898:	d903      	bls.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80088a0:	e005      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0eb      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80088ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d129      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c6:	d10e      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80088c8:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80088d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088d8:	091a      	lsrs	r2, r3, #4
 80088da:	4b10      	ldr	r3, [pc, #64]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80088dc:	4013      	ands	r3, r2
 80088de:	4a0d      	ldr	r2, [pc, #52]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088e0:	430b      	orrs	r3, r1
 80088e2:	6113      	str	r3, [r2, #16]
 80088e4:	e005      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80088e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80088f0:	6113      	str	r3, [r2, #16]
 80088f2:	4b08      	ldr	r3, [pc, #32]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008902:	4a04      	ldr	r2, [pc, #16]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6713      	str	r3, [r2, #112]	@ 0x70
 8008908:	e00e      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800890a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800890e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008912:	e009      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008914:	58024400 	.word	0x58024400
 8008918:	58024800 	.word	0x58024800
 800891c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f002 0301 	and.w	r3, r2, #1
 8008934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008938:	2300      	movs	r3, #0
 800893a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800893e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008942:	460b      	mov	r3, r1
 8008944:	4313      	orrs	r3, r2
 8008946:	f000 8089 	beq.w	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800894a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008950:	2b28      	cmp	r3, #40	@ 0x28
 8008952:	d86b      	bhi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008954:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008a35 	.word	0x08008a35
 8008960:	08008a2d 	.word	0x08008a2d
 8008964:	08008a2d 	.word	0x08008a2d
 8008968:	08008a2d 	.word	0x08008a2d
 800896c:	08008a2d 	.word	0x08008a2d
 8008970:	08008a2d 	.word	0x08008a2d
 8008974:	08008a2d 	.word	0x08008a2d
 8008978:	08008a2d 	.word	0x08008a2d
 800897c:	08008a01 	.word	0x08008a01
 8008980:	08008a2d 	.word	0x08008a2d
 8008984:	08008a2d 	.word	0x08008a2d
 8008988:	08008a2d 	.word	0x08008a2d
 800898c:	08008a2d 	.word	0x08008a2d
 8008990:	08008a2d 	.word	0x08008a2d
 8008994:	08008a2d 	.word	0x08008a2d
 8008998:	08008a2d 	.word	0x08008a2d
 800899c:	08008a17 	.word	0x08008a17
 80089a0:	08008a2d 	.word	0x08008a2d
 80089a4:	08008a2d 	.word	0x08008a2d
 80089a8:	08008a2d 	.word	0x08008a2d
 80089ac:	08008a2d 	.word	0x08008a2d
 80089b0:	08008a2d 	.word	0x08008a2d
 80089b4:	08008a2d 	.word	0x08008a2d
 80089b8:	08008a2d 	.word	0x08008a2d
 80089bc:	08008a35 	.word	0x08008a35
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	08008a2d 	.word	0x08008a2d
 80089cc:	08008a2d 	.word	0x08008a2d
 80089d0:	08008a2d 	.word	0x08008a2d
 80089d4:	08008a2d 	.word	0x08008a2d
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008a35 	.word	0x08008a35
 80089e0:	08008a2d 	.word	0x08008a2d
 80089e4:	08008a2d 	.word	0x08008a2d
 80089e8:	08008a2d 	.word	0x08008a2d
 80089ec:	08008a2d 	.word	0x08008a2d
 80089f0:	08008a2d 	.word	0x08008a2d
 80089f4:	08008a2d 	.word	0x08008a2d
 80089f8:	08008a2d 	.word	0x08008a2d
 80089fc:	08008a35 	.word	0x08008a35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a04:	3308      	adds	r3, #8
 8008a06:	2101      	movs	r1, #1
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fe95 	bl	800a738 <RCCEx_PLL2_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a14:	e00f      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1a:	3328      	adds	r3, #40	@ 0x28
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 ff3c 	bl	800a89c <RCCEx_PLL3_Config>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a2a:	e004      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a32:	e000      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a3e:	4bbf      	ldr	r3, [pc, #764]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a4c:	4abb      	ldr	r2, [pc, #748]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a52:	e003      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f002 0302 	and.w	r3, r2, #2
 8008a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008a72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d041      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d824      	bhi.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008aa5 	.word	0x08008aa5
 8008a94:	08008abb 	.word	0x08008abb
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 fe43 	bl	800a738 <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ab8:	e00f      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	3328      	adds	r3, #40	@ 0x28
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 feea 	bl	800a89c <RCCEx_PLL3_Config>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ace:	e004      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ad6:	e000      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008ae2:	4b96      	ldr	r3, [pc, #600]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae6:	f023 0107 	bic.w	r1, r3, #7
 8008aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008af0:	4a92      	ldr	r2, [pc, #584]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008af2:	430b      	orrs	r3, r1
 8008af4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008af6:	e003      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f002 0304 	and.w	r3, r2, #4
 8008b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b10:	2300      	movs	r3, #0
 8008b12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	d044      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d825      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b81 	.word	0x08008b81
 8008b38:	08008b4d 	.word	0x08008b4d
 8008b3c:	08008b63 	.word	0x08008b63
 8008b40:	08008b81 	.word	0x08008b81
 8008b44:	08008b81 	.word	0x08008b81
 8008b48:	08008b81 	.word	0x08008b81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b50:	3308      	adds	r3, #8
 8008b52:	2101      	movs	r1, #1
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 fdef 	bl	800a738 <RCCEx_PLL2_Config>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b60:	e00f      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b66:	3328      	adds	r3, #40	@ 0x28
 8008b68:	2101      	movs	r1, #1
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 fe96 	bl	800a89c <RCCEx_PLL3_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b76:	e004      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b7e:	e000      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10b      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b8e:	f023 0107 	bic.w	r1, r3, #7
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b9a:	4a68      	ldr	r2, [pc, #416]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f002 0320 	and.w	r3, r2, #32
 8008bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d055      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bd6:	d033      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bdc:	d82c      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be2:	d02f      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be8:	d826      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008bee:	d02b      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008bf0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008bf4:	d820      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bfa:	d012      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c00:	d81a      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d022      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c0a:	d115      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	3308      	adds	r3, #8
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fd8f 	bl	800a738 <RCCEx_PLL2_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008c20:	e015      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c26:	3328      	adds	r3, #40	@ 0x28
 8008c28:	2102      	movs	r1, #2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 fe36 	bl	800a89c <RCCEx_PLL3_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008c36:	e00a      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c3e:	e006      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c40:	bf00      	nop
 8008c42:	e004      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c56:	4b39      	ldr	r3, [pc, #228]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c66:	4a35      	ldr	r2, [pc, #212]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c6c:	e003      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c86:	2300      	movs	r3, #0
 8008c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008c8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4313      	orrs	r3, r2
 8008c94:	d058      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ca2:	d033      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008ca4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ca8:	d82c      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cae:	d02f      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cb4:	d826      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cba:	d02b      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cc0:	d820      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc6:	d012      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ccc:	d81a      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d022      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cd6:	d115      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cdc:	3308      	adds	r3, #8
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fd29 	bl	800a738 <RCCEx_PLL2_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008cec:	e015      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	3328      	adds	r3, #40	@ 0x28
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fdd0 	bl	800a89c <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d02:	e00a      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d0a:	e006      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d0c:	bf00      	nop
 8008d0e:	e004      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10e      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d22:	4b06      	ldr	r3, [pc, #24]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d32:	4a02      	ldr	r2, [pc, #8]	@ (8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d38:	e006      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008d3a:	bf00      	nop
 8008d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008d62:	460b      	mov	r3, r1
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d055      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008d74:	d033      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008d76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008d7a:	d82c      	bhi.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d80:	d02f      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d86:	d826      	bhi.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008d8c:	d02b      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008d8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008d92:	d820      	bhi.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d98:	d012      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d9e:	d81a      	bhi.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d022      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da8:	d115      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dae:	3308      	adds	r3, #8
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 fcc0 	bl	800a738 <RCCEx_PLL2_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008dbe:	e015      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc4:	3328      	adds	r3, #40	@ 0x28
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 fd67 	bl	800a89c <RCCEx_PLL3_Config>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008dd4:	e00a      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008dde:	bf00      	nop
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008de2:	bf00      	nop
 8008de4:	e002      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008de6:	bf00      	nop
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10b      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008df4:	4ba1      	ldr	r3, [pc, #644]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e04:	4a9d      	ldr	r2, [pc, #628]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e06:	430b      	orrs	r3, r1
 8008e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e0a:	e003      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	f002 0308 	and.w	r3, r2, #8
 8008e20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e24:	2300      	movs	r3, #0
 8008e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4313      	orrs	r3, r2
 8008e32:	d01e      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e40:	d10c      	bne.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e46:	3328      	adds	r3, #40	@ 0x28
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 fd26 	bl	800a89c <RCCEx_PLL3_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e5c:	4b87      	ldr	r3, [pc, #540]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6c:	4a83      	ldr	r2, [pc, #524]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f002 0310 	and.w	r3, r2, #16
 8008e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e82:	2300      	movs	r3, #0
 8008e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	d01e      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e9e:	d10c      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea4:	3328      	adds	r3, #40	@ 0x28
 8008ea6:	2102      	movs	r1, #2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fcf7 	bl	800a89c <RCCEx_PLL3_Config>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eba:	4b70      	ldr	r3, [pc, #448]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ebe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eca:	4a6c      	ldr	r2, [pc, #432]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ee6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d03e      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008efc:	d022      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f02:	d81b      	bhi.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f0c:	d00b      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008f0e:	e015      	b.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f14:	3308      	adds	r3, #8
 8008f16:	2100      	movs	r1, #0
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fc0d 	bl	800a738 <RCCEx_PLL2_Config>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f24:	e00f      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	3328      	adds	r3, #40	@ 0x28
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 fcb4 	bl	800a89c <RCCEx_PLL3_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f3a:	e004      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f42:	e000      	b.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10b      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f5e:	4a47      	ldr	r2, [pc, #284]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f60:	430b      	orrs	r3, r1
 8008f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f64:	e003      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008f84:	460b      	mov	r3, r1
 8008f86:	4313      	orrs	r3, r2
 8008f88:	d03b      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f96:	d01f      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008f98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f9c:	d818      	bhi.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fa2:	d003      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fa8:	d007      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008faa:	e011      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fac:	4b33      	ldr	r3, [pc, #204]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb0:	4a32      	ldr	r2, [pc, #200]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008fb8:	e00f      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbe:	3328      	adds	r3, #40	@ 0x28
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 fc6a 	bl	800a89c <RCCEx_PLL3_Config>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008fce:	e004      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fd6:	e000      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fe2:	4b26      	ldr	r3, [pc, #152]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff2:	4a22      	ldr	r2, [pc, #136]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800900e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009010:	2300      	movs	r3, #0
 8009012:	677b      	str	r3, [r7, #116]	@ 0x74
 8009014:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009018:	460b      	mov	r3, r1
 800901a:	4313      	orrs	r3, r2
 800901c:	d034      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902c:	d007      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800902e:	e011      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4b12      	ldr	r3, [pc, #72]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	4a11      	ldr	r2, [pc, #68]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800903a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800903c:	e00e      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009042:	3308      	adds	r3, #8
 8009044:	2102      	movs	r1, #2
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fb76 	bl	800a738 <RCCEx_PLL2_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009052:	e003      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800905a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10d      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009064:	4b05      	ldr	r3, [pc, #20]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009068:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009072:	4a02      	ldr	r2, [pc, #8]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009074:	430b      	orrs	r3, r1
 8009076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009078:	e006      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800907a:	bf00      	nop
 800907c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009094:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009096:	2300      	movs	r3, #0
 8009098:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800909a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800909e:	460b      	mov	r3, r1
 80090a0:	4313      	orrs	r3, r2
 80090a2:	d00c      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a8:	3328      	adds	r3, #40	@ 0x28
 80090aa:	2102      	movs	r1, #2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fbf5 	bl	800a89c <RCCEx_PLL3_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80090ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80090cc:	2300      	movs	r3, #0
 80090ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80090d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80090d4:	460b      	mov	r3, r1
 80090d6:	4313      	orrs	r3, r2
 80090d8:	d038      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090e6:	d018      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80090e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ec:	d811      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80090ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f2:	d014      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80090f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f8:	d80b      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d011      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80090fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009102:	d106      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009104:	4bc3      	ldr	r3, [pc, #780]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009108:	4ac2      	ldr	r2, [pc, #776]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800910a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800910e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009110:	e008      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009118:	e004      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800911a:	bf00      	nop
 800911c:	e002      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800911e:	bf00      	nop
 8009120:	e000      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10b      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800912c:	4bb9      	ldr	r3, [pc, #740]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009130:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800913c:	4ab5      	ldr	r2, [pc, #724]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800913e:	430b      	orrs	r3, r1
 8009140:	6553      	str	r3, [r2, #84]	@ 0x54
 8009142:	e003      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800915a:	2300      	movs	r3, #0
 800915c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800915e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009162:	460b      	mov	r3, r1
 8009164:	4313      	orrs	r3, r2
 8009166:	d009      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009168:	4baa      	ldr	r3, [pc, #680]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800916a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009176:	4aa7      	ldr	r2, [pc, #668]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009178:	430b      	orrs	r3, r1
 800917a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800917c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009188:	653b      	str	r3, [r7, #80]	@ 0x50
 800918a:	2300      	movs	r3, #0
 800918c:	657b      	str	r3, [r7, #84]	@ 0x54
 800918e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009192:	460b      	mov	r3, r1
 8009194:	4313      	orrs	r3, r2
 8009196:	d00a      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009198:	4b9e      	ldr	r3, [pc, #632]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80091a8:	4a9a      	ldr	r2, [pc, #616]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091aa:	430b      	orrs	r3, r1
 80091ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80091ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091bc:	2300      	movs	r3, #0
 80091be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80091c4:	460b      	mov	r3, r1
 80091c6:	4313      	orrs	r3, r2
 80091c8:	d009      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091ca:	4b92      	ldr	r3, [pc, #584]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091d8:	4a8e      	ldr	r2, [pc, #568]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091da:	430b      	orrs	r3, r1
 80091dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80091ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ec:	2300      	movs	r3, #0
 80091ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80091f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80091f4:	460b      	mov	r3, r1
 80091f6:	4313      	orrs	r3, r2
 80091f8:	d00e      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091fa:	4b86      	ldr	r3, [pc, #536]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	4a85      	ldr	r2, [pc, #532]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009200:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009204:	6113      	str	r3, [r2, #16]
 8009206:	4b83      	ldr	r3, [pc, #524]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009208:	6919      	ldr	r1, [r3, #16]
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009212:	4a80      	ldr	r2, [pc, #512]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009214:	430b      	orrs	r3, r1
 8009216:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009224:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800922e:	460b      	mov	r3, r1
 8009230:	4313      	orrs	r3, r2
 8009232:	d009      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009234:	4b77      	ldr	r3, [pc, #476]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009238:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009242:	4a74      	ldr	r2, [pc, #464]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009244:	430b      	orrs	r3, r1
 8009246:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009254:	633b      	str	r3, [r7, #48]	@ 0x30
 8009256:	2300      	movs	r3, #0
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
 800925a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800925e:	460b      	mov	r3, r1
 8009260:	4313      	orrs	r3, r2
 8009262:	d00a      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009264:	4b6b      	ldr	r3, [pc, #428]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009268:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009274:	4a67      	ldr	r2, [pc, #412]	@ (8009414 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009276:	430b      	orrs	r3, r1
 8009278:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	2100      	movs	r1, #0
 8009284:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800928c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009290:	460b      	mov	r3, r1
 8009292:	4313      	orrs	r3, r2
 8009294:	d011      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929a:	3308      	adds	r3, #8
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 fa4a 	bl	800a738 <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	2100      	movs	r1, #0
 80092c4:	6239      	str	r1, [r7, #32]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80092cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80092d0:	460b      	mov	r3, r1
 80092d2:	4313      	orrs	r3, r2
 80092d4:	d011      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092da:	3308      	adds	r3, #8
 80092dc:	2101      	movs	r1, #1
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fa2a 	bl	800a738 <RCCEx_PLL2_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	2100      	movs	r1, #0
 8009304:	61b9      	str	r1, [r7, #24]
 8009306:	f003 0304 	and.w	r3, r3, #4
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009310:	460b      	mov	r3, r1
 8009312:	4313      	orrs	r3, r2
 8009314:	d011      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931a:	3308      	adds	r3, #8
 800931c:	2102      	movs	r1, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f001 fa0a 	bl	800a738 <RCCEx_PLL2_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	2100      	movs	r1, #0
 8009344:	6139      	str	r1, [r7, #16]
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d011      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	3328      	adds	r3, #40	@ 0x28
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f001 fa9c 	bl	800a89c <RCCEx_PLL3_Config>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800936a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	2100      	movs	r1, #0
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009390:	460b      	mov	r3, r1
 8009392:	4313      	orrs	r3, r2
 8009394:	d011      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	3328      	adds	r3, #40	@ 0x28
 800939c:	2101      	movs	r1, #1
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fa7c 	bl	800a89c <RCCEx_PLL3_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	2100      	movs	r1, #0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	3328      	adds	r3, #40	@ 0x28
 80093dc:	2102      	movs	r1, #2
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fa5c 	bl	800a89c <RCCEx_PLL3_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80093fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	e000      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
}
 8009408:	4618      	mov	r0, r3
 800940a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800940e:	46bd      	mov	sp, r7
 8009410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009414:	58024400 	.word	0x58024400

08009418 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b090      	sub	sp, #64	@ 0x40
 800941c:	af00      	add	r7, sp, #0
 800941e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009426:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800942a:	430b      	orrs	r3, r1
 800942c:	f040 8094 	bne.w	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009430:	4b9e      	ldr	r3, [pc, #632]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	2b04      	cmp	r3, #4
 800943e:	f200 8087 	bhi.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009442:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	0800945d 	.word	0x0800945d
 800944c:	08009485 	.word	0x08009485
 8009450:	080094ad 	.word	0x080094ad
 8009454:	08009549 	.word	0x08009549
 8009458:	080094d5 	.word	0x080094d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945c:	4b93      	ldr	r3, [pc, #588]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009468:	d108      	bne.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800946e:	4618      	mov	r0, r3
 8009470:	f001 f810 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009478:	f000 bd45 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009480:	f000 bd41 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009484:	4b89      	ldr	r3, [pc, #548]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800948c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009490:	d108      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009492:	f107 0318 	add.w	r3, r7, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fd54 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a0:	f000 bd31 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a8:	f000 bd2d 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ac:	4b7f      	ldr	r3, [pc, #508]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b8:	d108      	bne.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ba:	f107 030c 	add.w	r3, r7, #12
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fe94 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c8:	f000 bd1d 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	f000 bd19 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094d4:	4b75      	ldr	r3, [pc, #468]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094de:	4b73      	ldr	r3, [pc, #460]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d10c      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80094ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d109      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094f0:	4b6e      	ldr	r3, [pc, #440]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	08db      	lsrs	r3, r3, #3
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	4a6d      	ldr	r2, [pc, #436]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009502:	e01f      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009504:	4b69      	ldr	r3, [pc, #420]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800950c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009510:	d106      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009518:	d102      	bne.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800951a:	4b66      	ldr	r3, [pc, #408]	@ (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951e:	e011      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009520:	4b62      	ldr	r3, [pc, #392]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800952c:	d106      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009534:	d102      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009536:	4b60      	ldr	r3, [pc, #384]	@ (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800953a:	e003      	b.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009540:	f000 bce1 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009544:	f000 bcdf 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009548:	4b5c      	ldr	r3, [pc, #368]	@ (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	f000 bcdb 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	f000 bcd7 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009560:	430b      	orrs	r3, r1
 8009562:	f040 80ad 	bne.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009566:	4b51      	ldr	r3, [pc, #324]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800956e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009576:	d056      	beq.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800957e:	f200 8090 	bhi.w	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	2bc0      	cmp	r3, #192	@ 0xc0
 8009586:	f000 8088 	beq.w	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	2bc0      	cmp	r3, #192	@ 0xc0
 800958e:	f200 8088 	bhi.w	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	2b80      	cmp	r3, #128	@ 0x80
 8009596:	d032      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	2b80      	cmp	r3, #128	@ 0x80
 800959c:	f200 8081 	bhi.w	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d014      	beq.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80095ac:	e079      	b.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095ae:	4b3f      	ldr	r3, [pc, #252]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ba:	d108      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 ff67 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ca:	f000 bc9c 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d2:	f000 bc98 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095d6:	4b35      	ldr	r3, [pc, #212]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e2:	d108      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e4:	f107 0318 	add.w	r3, r7, #24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fcab 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f2:	f000 bc88 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fa:	f000 bc84 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095fe:	4b2b      	ldr	r3, [pc, #172]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960a:	d108      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fdeb 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961a:	f000 bc74 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009622:	f000 bc70 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009626:	4b21      	ldr	r3, [pc, #132]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800962e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009630:	4b1e      	ldr	r3, [pc, #120]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b04      	cmp	r3, #4
 800963a:	d10c      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800963c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009642:	4b1a      	ldr	r3, [pc, #104]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	08db      	lsrs	r3, r3, #3
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	4a18      	ldr	r2, [pc, #96]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800964e:	fa22 f303 	lsr.w	r3, r2, r3
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009654:	e01f      	b.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009656:	4b15      	ldr	r3, [pc, #84]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009662:	d106      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800966a:	d102      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800966c:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800966e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009670:	e011      	b.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009672:	4b0e      	ldr	r3, [pc, #56]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800967a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800967e:	d106      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009686:	d102      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009688:	4b0b      	ldr	r3, [pc, #44]	@ (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800968c:	e003      	b.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009692:	f000 bc38 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009696:	f000 bc36 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800969a:	4b08      	ldr	r3, [pc, #32]	@ (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800969c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969e:	f000 bc32 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a6:	f000 bc2e 	b.w	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096aa:	bf00      	nop
 80096ac:	58024400 	.word	0x58024400
 80096b0:	03d09000 	.word	0x03d09000
 80096b4:	003d0900 	.word	0x003d0900
 80096b8:	017d7840 	.word	0x017d7840
 80096bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80096c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80096c8:	430b      	orrs	r3, r1
 80096ca:	f040 809c 	bne.w	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80096ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80096d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096de:	d054      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096e6:	f200 808b 	bhi.w	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80096ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80096f0:	f000 8083 	beq.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80096fa:	f200 8081 	bhi.w	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009704:	d02f      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800970c:	d878      	bhi.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800971a:	d012      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800971c:	e070      	b.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800971e:	4b8a      	ldr	r3, [pc, #552]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009726:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800972a:	d107      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800972c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009730:	4618      	mov	r0, r3
 8009732:	f000 feaf 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973a:	e3e4      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009740:	e3e1      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009742:	4b81      	ldr	r3, [pc, #516]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800974a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800974e:	d107      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009750:	f107 0318 	add.w	r3, r7, #24
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fbf5 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975e:	e3d2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e3cf      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009766:	4b78      	ldr	r3, [pc, #480]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800976e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009774:	f107 030c 	add.w	r3, r7, #12
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fd37 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009782:	e3c0      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e3bd      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800978a:	4b6f      	ldr	r3, [pc, #444]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800978c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800978e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009794:	4b6c      	ldr	r3, [pc, #432]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b04      	cmp	r3, #4
 800979e:	d10c      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80097a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097a6:	4b68      	ldr	r3, [pc, #416]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	08db      	lsrs	r3, r3, #3
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	4a66      	ldr	r2, [pc, #408]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b8:	e01e      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ba:	4b63      	ldr	r3, [pc, #396]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097c6:	d106      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80097c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ce:	d102      	bne.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097d0:	4b5f      	ldr	r3, [pc, #380]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d4:	e010      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097e2:	d106      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80097e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ea:	d102      	bne.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097ec:	4b59      	ldr	r3, [pc, #356]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80097ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097f6:	e386      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097f8:	e385      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097fa:	4b57      	ldr	r3, [pc, #348]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097fe:	e382      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009804:	e37f      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800980a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800980e:	430b      	orrs	r3, r1
 8009810:	f040 80a7 	bne.w	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009814:	4b4c      	ldr	r3, [pc, #304]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009818:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009824:	d055      	beq.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800982c:	f200 8096 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009836:	f000 8084 	beq.w	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009840:	f200 808c 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800984a:	d030      	beq.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009852:	f200 8083 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	2b00      	cmp	r3, #0
 800985a:	d004      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009862:	d012      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009864:	e07a      	b.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009866:	4b38      	ldr	r3, [pc, #224]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800986e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009872:	d107      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fe0b 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009882:	e340      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009888:	e33d      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800988a:	4b2f      	ldr	r3, [pc, #188]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009896:	d107      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009898:	f107 0318 	add.w	r3, r7, #24
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fb51 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a6:	e32e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ac:	e32b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098ae:	4b26      	ldr	r3, [pc, #152]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ba:	d107      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098bc:	f107 030c 	add.w	r3, r7, #12
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fc93 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ca:	e31c      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d0:	e319      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d10c      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80098e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d109      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ee:	4b16      	ldr	r3, [pc, #88]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	08db      	lsrs	r3, r3, #3
 80098f4:	f003 0303 	and.w	r3, r3, #3
 80098f8:	4a14      	ldr	r2, [pc, #80]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098fa:	fa22 f303 	lsr.w	r3, r2, r3
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009900:	e01e      	b.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009902:	4b11      	ldr	r3, [pc, #68]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800990a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800990e:	d106      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009916:	d102      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009918:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800991c:	e010      	b.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800991e:	4b0a      	ldr	r3, [pc, #40]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992a:	d106      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800992c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009932:	d102      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009934:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009938:	e002      	b.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800993e:	e2e2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009940:	e2e1      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009942:	4b05      	ldr	r3, [pc, #20]	@ (8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009946:	e2de      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009948:	58024400 	.word	0x58024400
 800994c:	03d09000 	.word	0x03d09000
 8009950:	003d0900 	.word	0x003d0900
 8009954:	017d7840 	.word	0x017d7840
 8009958:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e2d1      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009966:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800996a:	430b      	orrs	r3, r1
 800996c:	f040 809c 	bne.w	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009970:	4b93      	ldr	r3, [pc, #588]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009974:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009978:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800997a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800997c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009980:	d054      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009988:	f200 808b 	bhi.w	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009992:	f000 8083 	beq.w	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800999c:	f200 8081 	bhi.w	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a6:	d02f      	beq.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80099a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ae:	d878      	bhi.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099bc:	d012      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80099be:	e070      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099c0:	4b7f      	ldr	r3, [pc, #508]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099cc:	d107      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fd5e 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099dc:	e293      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e2:	e290      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099e4:	4b76      	ldr	r3, [pc, #472]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f2:	f107 0318 	add.w	r3, r7, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 faa4 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a00:	e281      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a06:	e27e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a08:	4b6d      	ldr	r3, [pc, #436]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a14:	d107      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fbe6 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a24:	e26f      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2a:	e26c      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a2c:	4b64      	ldr	r3, [pc, #400]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a36:	4b62      	ldr	r3, [pc, #392]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d10c      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d109      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a48:	4b5d      	ldr	r3, [pc, #372]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	08db      	lsrs	r3, r3, #3
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	4a5c      	ldr	r2, [pc, #368]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a5a:	e01e      	b.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a5c:	4b58      	ldr	r3, [pc, #352]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a68:	d106      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a70:	d102      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a72:	4b55      	ldr	r3, [pc, #340]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a76:	e010      	b.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a78:	4b51      	ldr	r3, [pc, #324]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a84:	d106      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a8c:	d102      	bne.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a92:	e002      	b.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a98:	e235      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a9a:	e234      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa0:	e231      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa6:	e22e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009ab0:	430b      	orrs	r3, r1
 8009ab2:	f040 808f 	bne.w	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009ab6:	4b42      	ldr	r3, [pc, #264]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009abe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ac6:	d06b      	beq.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ace:	d874      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ad6:	d056      	beq.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ade:	d86c      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ae6:	d03b      	beq.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009aee:	d864      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009af6:	d021      	beq.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009afe:	d85c      	bhi.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b0c:	d004      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009b0e:	e054      	b.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009b10:	f7fe fa0a 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 8009b14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b16:	e1f6      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b18:	4b29      	ldr	r3, [pc, #164]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b24:	d107      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b26:	f107 0318 	add.w	r3, r7, #24
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fa0a 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b34:	e1e7      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3a:	e1e4      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b3c:	4b20      	ldr	r3, [pc, #128]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b48:	d107      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b4a:	f107 030c 	add.w	r3, r7, #12
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fb4c 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b58:	e1d5      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5e:	e1d2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b60:	4b17      	ldr	r3, [pc, #92]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d109      	bne.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b6c:	4b14      	ldr	r3, [pc, #80]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	08db      	lsrs	r3, r3, #3
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	4a13      	ldr	r2, [pc, #76]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b78:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7e:	e1c2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b84:	e1bf      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b86:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b92:	d102      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009b94:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b98:	e1b5      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9e:	e1b2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bac:	d102      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009bae:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb2:	e1a8      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bb8:	e1a5      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbe:	e1a2      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bc0:	58024400 	.word	0x58024400
 8009bc4:	03d09000 	.word	0x03d09000
 8009bc8:	003d0900 	.word	0x003d0900
 8009bcc:	017d7840 	.word	0x017d7840
 8009bd0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	d173      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009be0:	4b9c      	ldr	r3, [pc, #624]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009be8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bf0:	d02f      	beq.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bf8:	d863      	bhi.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c06:	d012      	beq.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009c08:	e05b      	b.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c0a:	4b92      	ldr	r3, [pc, #584]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c16:	d107      	bne.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c18:	f107 0318 	add.w	r3, r7, #24
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 f991 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c26:	e16e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c2c:	e16b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c2e:	4b89      	ldr	r3, [pc, #548]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c3a:	d107      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c3c:	f107 030c 	add.w	r3, r7, #12
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fad3 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4a:	e15c      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c50:	e159      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c52:	4b80      	ldr	r3, [pc, #512]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c5c:	4b7d      	ldr	r3, [pc, #500]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d10c      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c6e:	4b79      	ldr	r3, [pc, #484]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	08db      	lsrs	r3, r3, #3
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	4a77      	ldr	r2, [pc, #476]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c80:	e01e      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c82:	4b74      	ldr	r3, [pc, #464]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c96:	d102      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c98:	4b70      	ldr	r3, [pc, #448]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c9c:	e010      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009caa:	d106      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cb2:	d102      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cb8:	e002      	b.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009cbe:	e122      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009cc0:	e121      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc6:	e11e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ccc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	d133      	bne.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cea:	d012      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009cec:	e023      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cee:	4b59      	ldr	r3, [pc, #356]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cfa:	d107      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fbc7 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0a:	e0fc      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d10:	e0f9      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d12:	4b50      	ldr	r3, [pc, #320]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1e:	d107      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d20:	f107 0318 	add.w	r3, r7, #24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f90d 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d2e:	e0ea      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d34:	e0e7      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d3a:	e0e4      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d40:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009d44:	430b      	orrs	r3, r1
 8009d46:	f040 808d 	bne.w	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d4a:	4b42      	ldr	r3, [pc, #264]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009d52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d5a:	d06b      	beq.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d62:	d874      	bhi.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d6a:	d056      	beq.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d72:	d86c      	bhi.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d7a:	d03b      	beq.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d82:	d864      	bhi.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d8a:	d021      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d92:	d85c      	bhi.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da0:	d004      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009da2:	e054      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009da4:	f000 f8b8 	bl	8009f18 <HAL_RCCEx_GetD3PCLK1Freq>
 8009da8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009daa:	e0ac      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dac:	4b29      	ldr	r3, [pc, #164]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009db8:	d107      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dba:	f107 0318 	add.w	r3, r7, #24
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f8c0 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc8:	e09d      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dce:	e09a      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dd0:	4b20      	ldr	r3, [pc, #128]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ddc:	d107      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dde:	f107 030c 	add.w	r3, r7, #12
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fa02 	bl	800a1ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dec:	e08b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df2:	e088      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009df4:	4b17      	ldr	r3, [pc, #92]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d109      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e00:	4b14      	ldr	r3, [pc, #80]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	08db      	lsrs	r3, r3, #3
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	4a13      	ldr	r2, [pc, #76]	@ (8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e12:	e078      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e18:	e075      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e26:	d102      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009e28:	4b0c      	ldr	r3, [pc, #48]	@ (8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2c:	e06b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e32:	e068      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e40:	d102      	bne.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009e42:	4b07      	ldr	r3, [pc, #28]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e46:	e05e      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e05b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e52:	e058      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e54:	58024400 	.word	0x58024400
 8009e58:	03d09000 	.word	0x03d09000
 8009e5c:	003d0900 	.word	0x003d0900
 8009e60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	d148      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e70:	4b27      	ldr	r3, [pc, #156]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e80:	d02a      	beq.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e88:	d838      	bhi.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e96:	d00d      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009e98:	e030      	b.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ea6:	d102      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eac:	e02b      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb2:	e028      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009eb4:	4b16      	ldr	r3, [pc, #88]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ec0:	d107      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fae4 	bl	800a494 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ed0:	e019      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed6:	e016      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee4:	d107      	bne.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ee6:	f107 0318 	add.w	r3, r7, #24
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f82a 	bl	8009f44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef4:	e007      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009efa:	e004      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f00:	e001      	b.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3740      	adds	r7, #64	@ 0x40
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	58024400 	.word	0x58024400
 8009f14:	017d7840 	.word	0x017d7840

08009f18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f1c:	f7fd ffd4 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8009f20:	4602      	mov	r2, r0
 8009f22:	4b06      	ldr	r3, [pc, #24]	@ (8009f3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	091b      	lsrs	r3, r3, #4
 8009f28:	f003 0307 	and.w	r3, r3, #7
 8009f2c:	4904      	ldr	r1, [pc, #16]	@ (8009f40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f2e:	5ccb      	ldrb	r3, [r1, r3]
 8009f30:	f003 031f 	and.w	r3, r3, #31
 8009f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	08013ed0 	.word	0x08013ed0

08009f44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b089      	sub	sp, #36	@ 0x24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f4c:	4ba1      	ldr	r3, [pc, #644]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f56:	4b9f      	ldr	r3, [pc, #636]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f5a:	0b1b      	lsrs	r3, r3, #12
 8009f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f62:	4b9c      	ldr	r3, [pc, #624]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f6e:	4b99      	ldr	r3, [pc, #612]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f72:	08db      	lsrs	r3, r3, #3
 8009f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	fb02 f303 	mul.w	r3, r2, r3
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8111 	beq.w	800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	f000 8083 	beq.w	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	f200 80a1 	bhi.w	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d056      	beq.n	800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009fae:	e099      	b.n	800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fb0:	4b88      	ldr	r3, [pc, #544]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0320 	and.w	r3, r3, #32
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d02d      	beq.n	800a018 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fbc:	4b85      	ldr	r3, [pc, #532]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	08db      	lsrs	r3, r3, #3
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	4a84      	ldr	r2, [pc, #528]	@ (800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	ee07 3a90 	vmov	s15, r3
 8009fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b7b      	ldr	r3, [pc, #492]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a016:	e087      	b.n	800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b6a      	ldr	r3, [pc, #424]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05a:	e065      	b.n	800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b59      	ldr	r3, [pc, #356]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a082:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09e:	e043      	b.n	800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b48      	ldr	r3, [pc, #288]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0e2:	e021      	b.n	800a128 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	ee07 3a90 	vmov	s15, r3
 800a0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f6:	4b37      	ldr	r3, [pc, #220]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a106:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a126:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a128:	4b2a      	ldr	r3, [pc, #168]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12c:	0a5b      	lsrs	r3, r3, #9
 800a12e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a132:	ee07 3a90 	vmov	s15, r3
 800a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a13e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a142:	edd7 6a07 	vldr	s13, [r7, #28]
 800a146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a14e:	ee17 2a90 	vmov	r2, s15
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a156:	4b1f      	ldr	r3, [pc, #124]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a16c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a170:	edd7 6a07 	vldr	s13, [r7, #28]
 800a174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17c:	ee17 2a90 	vmov	r2, s15
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a184:	4b13      	ldr	r3, [pc, #76]	@ (800a1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a188:	0e1b      	lsrs	r3, r3, #24
 800a18a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a19a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a19e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1aa:	ee17 2a90 	vmov	r2, s15
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a1b2:	e008      	b.n	800a1c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	609a      	str	r2, [r3, #8]
}
 800a1c6:	bf00      	nop
 800a1c8:	3724      	adds	r7, #36	@ 0x24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	58024400 	.word	0x58024400
 800a1d8:	03d09000 	.word	0x03d09000
 800a1dc:	46000000 	.word	0x46000000
 800a1e0:	4c742400 	.word	0x4c742400
 800a1e4:	4a742400 	.word	0x4a742400
 800a1e8:	4bbebc20 	.word	0x4bbebc20

0800a1ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b089      	sub	sp, #36	@ 0x24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1f4:	4ba1      	ldr	r3, [pc, #644]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	f003 0303 	and.w	r3, r3, #3
 800a1fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a1fe:	4b9f      	ldr	r3, [pc, #636]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a202:	0d1b      	lsrs	r3, r3, #20
 800a204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a208:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a20a:	4b9c      	ldr	r3, [pc, #624]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a216:	4b99      	ldr	r3, [pc, #612]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8111 	beq.w	800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	f000 8083 	beq.w	800a348 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b02      	cmp	r3, #2
 800a246:	f200 80a1 	bhi.w	800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d056      	beq.n	800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a256:	e099      	b.n	800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a258:	4b88      	ldr	r3, [pc, #544]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0320 	and.w	r3, r3, #32
 800a260:	2b00      	cmp	r3, #0
 800a262:	d02d      	beq.n	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a264:	4b85      	ldr	r3, [pc, #532]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	08db      	lsrs	r3, r3, #3
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	4a84      	ldr	r2, [pc, #528]	@ (800a480 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a270:	fa22 f303 	lsr.w	r3, r2, r3
 800a274:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a28e:	4b7b      	ldr	r3, [pc, #492]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2be:	e087      	b.n	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a488 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d2:	4b6a      	ldr	r3, [pc, #424]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a302:	e065      	b.n	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a48c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a316:	4b59      	ldr	r3, [pc, #356]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a326:	ed97 6a03 	vldr	s12, [r7, #12]
 800a32a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a346:	e043      	b.n	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a35a:	4b48      	ldr	r3, [pc, #288]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a36e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a37a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a38a:	e021      	b.n	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a48c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39e:	4b37      	ldr	r3, [pc, #220]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a484 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a3d0:	4b2a      	ldr	r3, [pc, #168]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d4:	0a5b      	lsrs	r3, r3, #9
 800a3d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f6:	ee17 2a90 	vmov	r2, s15
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a3fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a408:	ee07 3a90 	vmov	s15, r3
 800a40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a414:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a418:	edd7 6a07 	vldr	s13, [r7, #28]
 800a41c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a424:	ee17 2a90 	vmov	r2, s15
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a42c:	4b13      	ldr	r3, [pc, #76]	@ (800a47c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a430:	0e1b      	lsrs	r3, r3, #24
 800a432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a442:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a446:	edd7 6a07 	vldr	s13, [r7, #28]
 800a44a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a44e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a452:	ee17 2a90 	vmov	r2, s15
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a45a:	e008      	b.n	800a46e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	609a      	str	r2, [r3, #8]
}
 800a46e:	bf00      	nop
 800a470:	3724      	adds	r7, #36	@ 0x24
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	58024400 	.word	0x58024400
 800a480:	03d09000 	.word	0x03d09000
 800a484:	46000000 	.word	0x46000000
 800a488:	4c742400 	.word	0x4c742400
 800a48c:	4a742400 	.word	0x4a742400
 800a490:	4bbebc20 	.word	0x4bbebc20

0800a494 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a494:	b480      	push	{r7}
 800a496:	b089      	sub	sp, #36	@ 0x24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a49c:	4ba0      	ldr	r3, [pc, #640]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a0:	f003 0303 	and.w	r3, r3, #3
 800a4a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a4a6:	4b9e      	ldr	r3, [pc, #632]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4aa:	091b      	lsrs	r3, r3, #4
 800a4ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a4b2:	4b9b      	ldr	r3, [pc, #620]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4bc:	4b98      	ldr	r3, [pc, #608]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c0:	08db      	lsrs	r3, r3, #3
 800a4c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	fb02 f303 	mul.w	r3, r2, r3
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 8111 	beq.w	800a702 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	f000 8083 	beq.w	800a5ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	f200 80a1 	bhi.w	800a632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d056      	beq.n	800a5aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4fc:	e099      	b.n	800a632 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4fe:	4b88      	ldr	r3, [pc, #544]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d02d      	beq.n	800a566 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a50a:	4b85      	ldr	r3, [pc, #532]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	08db      	lsrs	r3, r3, #3
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	4a83      	ldr	r2, [pc, #524]	@ (800a724 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a516:	fa22 f303 	lsr.w	r3, r2, r3
 800a51a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	ee07 3a90 	vmov	s15, r3
 800a52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a534:	4b7a      	ldr	r3, [pc, #488]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a53c:	ee07 3a90 	vmov	s15, r3
 800a540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a544:	ed97 6a03 	vldr	s12, [r7, #12]
 800a548:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a54c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a55c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a560:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a564:	e087      	b.n	800a676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a570:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a72c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a578:	4b69      	ldr	r3, [pc, #420]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a588:	ed97 6a03 	vldr	s12, [r7, #12]
 800a58c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5a8:	e065      	b.n	800a676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	ee07 3a90 	vmov	s15, r3
 800a5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a730 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a5b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5bc:	4b58      	ldr	r3, [pc, #352]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ec:	e043      	b.n	800a676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a600:	4b47      	ldr	r3, [pc, #284]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a608:	ee07 3a90 	vmov	s15, r3
 800a60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a610:	ed97 6a03 	vldr	s12, [r7, #12]
 800a614:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a630:	e021      	b.n	800a676 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	ee07 3a90 	vmov	s15, r3
 800a638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a72c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a644:	4b36      	ldr	r3, [pc, #216]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64c:	ee07 3a90 	vmov	s15, r3
 800a650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a654:	ed97 6a03 	vldr	s12, [r7, #12]
 800a658:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a728 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a65c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a674:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a676:	4b2a      	ldr	r3, [pc, #168]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67a:	0a5b      	lsrs	r3, r3, #9
 800a67c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a68c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a690:	edd7 6a07 	vldr	s13, [r7, #28]
 800a694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69c:	ee17 2a90 	vmov	r2, s15
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a6a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a8:	0c1b      	lsrs	r3, r3, #16
 800a6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ca:	ee17 2a90 	vmov	r2, s15
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a6d2:	4b13      	ldr	r3, [pc, #76]	@ (800a720 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d6:	0e1b      	lsrs	r3, r3, #24
 800a6d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f8:	ee17 2a90 	vmov	r2, s15
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a700:	e008      	b.n	800a714 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	609a      	str	r2, [r3, #8]
}
 800a714:	bf00      	nop
 800a716:	3724      	adds	r7, #36	@ 0x24
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	58024400 	.word	0x58024400
 800a724:	03d09000 	.word	0x03d09000
 800a728:	46000000 	.word	0x46000000
 800a72c:	4c742400 	.word	0x4c742400
 800a730:	4a742400 	.word	0x4a742400
 800a734:	4bbebc20 	.word	0x4bbebc20

0800a738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a746:	4b53      	ldr	r3, [pc, #332]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d101      	bne.n	800a756 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e099      	b.n	800a88a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a756:	4b4f      	ldr	r3, [pc, #316]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a4e      	ldr	r2, [pc, #312]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a75c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a762:	f7f6 fd01 	bl	8001168 <HAL_GetTick>
 800a766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a768:	e008      	b.n	800a77c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a76a:	f7f6 fcfd 	bl	8001168 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d901      	bls.n	800a77c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e086      	b.n	800a88a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a77c:	4b45      	ldr	r3, [pc, #276]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1f0      	bne.n	800a76a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a788:	4b42      	ldr	r3, [pc, #264]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	031b      	lsls	r3, r3, #12
 800a796:	493f      	ldr	r1, [pc, #252]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	025b      	lsls	r3, r3, #9
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	041b      	lsls	r3, r3, #16
 800a7ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	061b      	lsls	r3, r3, #24
 800a7c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a7cc:	4931      	ldr	r1, [pc, #196]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a7d2:	4b30      	ldr	r3, [pc, #192]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	492d      	ldr	r1, [pc, #180]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7e8:	f023 0220 	bic.w	r2, r3, #32
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	4928      	ldr	r1, [pc, #160]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7f6:	4b27      	ldr	r3, [pc, #156]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fa:	4a26      	ldr	r2, [pc, #152]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a7fc:	f023 0310 	bic.w	r3, r3, #16
 800a800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a802:	4b24      	ldr	r3, [pc, #144]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a806:	4b24      	ldr	r3, [pc, #144]	@ (800a898 <RCCEx_PLL2_Config+0x160>)
 800a808:	4013      	ands	r3, r2
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	69d2      	ldr	r2, [r2, #28]
 800a80e:	00d2      	lsls	r2, r2, #3
 800a810:	4920      	ldr	r1, [pc, #128]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a812:	4313      	orrs	r3, r2
 800a814:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a816:	4b1f      	ldr	r3, [pc, #124]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81a:	4a1e      	ldr	r2, [pc, #120]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a81c:	f043 0310 	orr.w	r3, r3, #16
 800a820:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a828:	4b1a      	ldr	r3, [pc, #104]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	4a19      	ldr	r2, [pc, #100]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a82e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a832:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a834:	e00f      	b.n	800a856 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d106      	bne.n	800a84a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a83c:	4b15      	ldr	r3, [pc, #84]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a83e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a840:	4a14      	ldr	r2, [pc, #80]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a846:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a848:	e005      	b.n	800a856 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a84a:	4b12      	ldr	r3, [pc, #72]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84e:	4a11      	ldr	r2, [pc, #68]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a850:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a854:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a856:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a0e      	ldr	r2, [pc, #56]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a85c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a862:	f7f6 fc81 	bl	8001168 <HAL_GetTick>
 800a866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a868:	e008      	b.n	800a87c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a86a:	f7f6 fc7d 	bl	8001168 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e006      	b.n	800a88a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <RCCEx_PLL2_Config+0x15c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0f0      	beq.n	800a86a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	58024400 	.word	0x58024400
 800a898:	ffff0007 	.word	0xffff0007

0800a89c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8aa:	4b53      	ldr	r3, [pc, #332]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d101      	bne.n	800a8ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e099      	b.n	800a9ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a8ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a4e      	ldr	r2, [pc, #312]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8c6:	f7f6 fc4f 	bl	8001168 <HAL_GetTick>
 800a8ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8cc:	e008      	b.n	800a8e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a8ce:	f7f6 fc4b 	bl	8001168 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e086      	b.n	800a9ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8e0:	4b45      	ldr	r3, [pc, #276]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f0      	bne.n	800a8ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a8ec:	4b42      	ldr	r3, [pc, #264]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	051b      	lsls	r3, r3, #20
 800a8fa:	493f      	ldr	r1, [pc, #252]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	3b01      	subs	r3, #1
 800a906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	3b01      	subs	r3, #1
 800a910:	025b      	lsls	r3, r3, #9
 800a912:	b29b      	uxth	r3, r3
 800a914:	431a      	orrs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	041b      	lsls	r3, r3, #16
 800a91e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a922:	431a      	orrs	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	3b01      	subs	r3, #1
 800a92a:	061b      	lsls	r3, r3, #24
 800a92c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a930:	4931      	ldr	r1, [pc, #196]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a932:	4313      	orrs	r3, r2
 800a934:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a936:	4b30      	ldr	r3, [pc, #192]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	492d      	ldr	r1, [pc, #180]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a944:	4313      	orrs	r3, r2
 800a946:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a948:	4b2b      	ldr	r3, [pc, #172]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	4928      	ldr	r1, [pc, #160]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a956:	4313      	orrs	r3, r2
 800a958:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a95a:	4b27      	ldr	r3, [pc, #156]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	4a26      	ldr	r2, [pc, #152]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a966:	4b24      	ldr	r3, [pc, #144]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a96a:	4b24      	ldr	r3, [pc, #144]	@ (800a9fc <RCCEx_PLL3_Config+0x160>)
 800a96c:	4013      	ands	r3, r2
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	69d2      	ldr	r2, [r2, #28]
 800a972:	00d2      	lsls	r2, r2, #3
 800a974:	4920      	ldr	r1, [pc, #128]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a976:	4313      	orrs	r3, r2
 800a978:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a97a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a98c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a990:	4a19      	ldr	r2, [pc, #100]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a992:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a996:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a998:	e00f      	b.n	800a9ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d106      	bne.n	800a9ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a9a0:	4b15      	ldr	r3, [pc, #84]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a4:	4a14      	ldr	r2, [pc, #80]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9ac:	e005      	b.n	800a9ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a9ae:	4b12      	ldr	r3, [pc, #72]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	4a11      	ldr	r2, [pc, #68]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a9ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9c6:	f7f6 fbcf 	bl	8001168 <HAL_GetTick>
 800a9ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9cc:	e008      	b.n	800a9e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9ce:	f7f6 fbcb 	bl	8001168 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d901      	bls.n	800a9e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e006      	b.n	800a9ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9e0:	4b05      	ldr	r3, [pc, #20]	@ (800a9f8 <RCCEx_PLL3_Config+0x15c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0f0      	beq.n	800a9ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	ffff0007 	.word	0xffff0007

0800aa00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e049      	b.n	800aaa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f841 	bl	800aaae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f000 f9e8 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b083      	sub	sp, #12
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aab6:	bf00      	nop
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
	...

0800aac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d001      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e054      	b.n	800ab86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a26      	ldr	r2, [pc, #152]	@ (800ab94 <HAL_TIM_Base_Start_IT+0xd0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d022      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab06:	d01d      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a22      	ldr	r2, [pc, #136]	@ (800ab98 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d018      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a21      	ldr	r2, [pc, #132]	@ (800ab9c <HAL_TIM_Base_Start_IT+0xd8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d013      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1f      	ldr	r2, [pc, #124]	@ (800aba0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d00e      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1e      	ldr	r2, [pc, #120]	@ (800aba4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d009      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1c      	ldr	r2, [pc, #112]	@ (800aba8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d004      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0x80>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1b      	ldr	r2, [pc, #108]	@ (800abac <HAL_TIM_Base_Start_IT+0xe8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d115      	bne.n	800ab70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	4b19      	ldr	r3, [pc, #100]	@ (800abb0 <HAL_TIM_Base_Start_IT+0xec>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b06      	cmp	r3, #6
 800ab54:	d015      	beq.n	800ab82 <HAL_TIM_Base_Start_IT+0xbe>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab5c:	d011      	beq.n	800ab82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6e:	e008      	b.n	800ab82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	e000      	b.n	800ab84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40010000 	.word	0x40010000
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40010400 	.word	0x40010400
 800aba8:	40001800 	.word	0x40001800
 800abac:	40014000 	.word	0x40014000
 800abb0:	00010007 	.word	0x00010007

0800abb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d020      	beq.n	800ac18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01b      	beq.n	800ac18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f06f 0202 	mvn.w	r2, #2
 800abe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f8e9 	bl	800add6 <HAL_TIM_IC_CaptureCallback>
 800ac04:	e005      	b.n	800ac12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f8db 	bl	800adc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f8ec 	bl	800adea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f003 0304 	and.w	r3, r3, #4
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d020      	beq.n	800ac64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01b      	beq.n	800ac64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f06f 0204 	mvn.w	r2, #4
 800ac34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2202      	movs	r2, #2
 800ac3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f8c3 	bl	800add6 <HAL_TIM_IC_CaptureCallback>
 800ac50:	e005      	b.n	800ac5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f8b5 	bl	800adc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f8c6 	bl	800adea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f003 0308 	and.w	r3, r3, #8
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d020      	beq.n	800acb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01b      	beq.n	800acb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0208 	mvn.w	r2, #8
 800ac80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f89d 	bl	800add6 <HAL_TIM_IC_CaptureCallback>
 800ac9c:	e005      	b.n	800acaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f88f 	bl	800adc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f8a0 	bl	800adea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f003 0310 	and.w	r3, r3, #16
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d020      	beq.n	800acfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f003 0310 	and.w	r3, r3, #16
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01b      	beq.n	800acfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f06f 0210 	mvn.w	r2, #16
 800accc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2208      	movs	r2, #8
 800acd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d003      	beq.n	800acea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f877 	bl	800add6 <HAL_TIM_IC_CaptureCallback>
 800ace8:	e005      	b.n	800acf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f869 	bl	800adc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f87a 	bl	800adea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00c      	beq.n	800ad20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d007      	beq.n	800ad20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f06f 0201 	mvn.w	r2, #1
 800ad18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7f5 fef2 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d104      	bne.n	800ad34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00c      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d007      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f90d 	bl	800af68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f905 	bl	800af7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00c      	beq.n	800ad96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f834 	bl	800adfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f003 0320 	and.w	r3, r3, #32
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00c      	beq.n	800adba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d007      	beq.n	800adba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f06f 0220 	mvn.w	r2, #32
 800adb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f8cd 	bl	800af54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
	...

0800ae14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a43      	ldr	r2, [pc, #268]	@ (800af34 <TIM_Base_SetConfig+0x120>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d013      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae32:	d00f      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a40      	ldr	r2, [pc, #256]	@ (800af38 <TIM_Base_SetConfig+0x124>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00b      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a3f      	ldr	r2, [pc, #252]	@ (800af3c <TIM_Base_SetConfig+0x128>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d007      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a3e      	ldr	r2, [pc, #248]	@ (800af40 <TIM_Base_SetConfig+0x12c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d003      	beq.n	800ae54 <TIM_Base_SetConfig+0x40>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a3d      	ldr	r2, [pc, #244]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d108      	bne.n	800ae66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a32      	ldr	r2, [pc, #200]	@ (800af34 <TIM_Base_SetConfig+0x120>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d01f      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae74:	d01b      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a2f      	ldr	r2, [pc, #188]	@ (800af38 <TIM_Base_SetConfig+0x124>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d017      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a2e      	ldr	r2, [pc, #184]	@ (800af3c <TIM_Base_SetConfig+0x128>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d013      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a2d      	ldr	r2, [pc, #180]	@ (800af40 <TIM_Base_SetConfig+0x12c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d00f      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a2c      	ldr	r2, [pc, #176]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d00b      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2b      	ldr	r2, [pc, #172]	@ (800af48 <TIM_Base_SetConfig+0x134>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d007      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a2a      	ldr	r2, [pc, #168]	@ (800af4c <TIM_Base_SetConfig+0x138>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d003      	beq.n	800aeae <TIM_Base_SetConfig+0x9a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a29      	ldr	r2, [pc, #164]	@ (800af50 <TIM_Base_SetConfig+0x13c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d108      	bne.n	800aec0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aeb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	689a      	ldr	r2, [r3, #8]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a14      	ldr	r2, [pc, #80]	@ (800af34 <TIM_Base_SetConfig+0x120>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00f      	beq.n	800af06 <TIM_Base_SetConfig+0xf2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a16      	ldr	r2, [pc, #88]	@ (800af44 <TIM_Base_SetConfig+0x130>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d00b      	beq.n	800af06 <TIM_Base_SetConfig+0xf2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a15      	ldr	r2, [pc, #84]	@ (800af48 <TIM_Base_SetConfig+0x134>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d007      	beq.n	800af06 <TIM_Base_SetConfig+0xf2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a14      	ldr	r2, [pc, #80]	@ (800af4c <TIM_Base_SetConfig+0x138>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d003      	beq.n	800af06 <TIM_Base_SetConfig+0xf2>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a13      	ldr	r2, [pc, #76]	@ (800af50 <TIM_Base_SetConfig+0x13c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d103      	bne.n	800af0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f043 0204 	orr.w	r2, r3, #4
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	601a      	str	r2, [r3, #0]
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	40010000 	.word	0x40010000
 800af38:	40000400 	.word	0x40000400
 800af3c:	40000800 	.word	0x40000800
 800af40:	40000c00 	.word	0x40000c00
 800af44:	40010400 	.word	0x40010400
 800af48:	40014000 	.word	0x40014000
 800af4c:	40014400 	.word	0x40014400
 800af50:	40014800 	.word	0x40014800

0800af54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af90:	b084      	sub	sp, #16
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	f107 001c 	add.w	r0, r7, #28
 800af9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afa2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d121      	bne.n	800afee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	4b2c      	ldr	r3, [pc, #176]	@ (800b06c <USB_CoreInit+0xdc>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d105      	bne.n	800afe2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 fafa 	bl	800c5dc <USB_CoreReset>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	e01b      	b.n	800b026 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 faee 	bl	800c5dc <USB_CoreReset>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b004:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d106      	bne.n	800b01a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b010:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	639a      	str	r2, [r3, #56]	@ 0x38
 800b018:	e005      	b.n	800b026 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b026:	7fbb      	ldrb	r3, [r7, #30]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d116      	bne.n	800b05a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b03a:	4b0d      	ldr	r3, [pc, #52]	@ (800b070 <USB_CoreInit+0xe0>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f043 0206 	orr.w	r2, r3, #6
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f043 0220 	orr.w	r2, r3, #32
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b066:	b004      	add	sp, #16
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	ffbdffbf 	.word	0xffbdffbf
 800b070:	03ee0000 	.word	0x03ee0000

0800b074 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b074:	b480      	push	{r7}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d165      	bne.n	800b154 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	4a41      	ldr	r2, [pc, #260]	@ (800b190 <USB_SetTurnaroundTime+0x11c>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d906      	bls.n	800b09e <USB_SetTurnaroundTime+0x2a>
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4a40      	ldr	r2, [pc, #256]	@ (800b194 <USB_SetTurnaroundTime+0x120>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d202      	bcs.n	800b09e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b098:	230f      	movs	r3, #15
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e062      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	4a3c      	ldr	r2, [pc, #240]	@ (800b194 <USB_SetTurnaroundTime+0x120>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d306      	bcc.n	800b0b4 <USB_SetTurnaroundTime+0x40>
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	4a3b      	ldr	r2, [pc, #236]	@ (800b198 <USB_SetTurnaroundTime+0x124>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d202      	bcs.n	800b0b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b0ae:	230e      	movs	r3, #14
 800b0b0:	617b      	str	r3, [r7, #20]
 800b0b2:	e057      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4a38      	ldr	r2, [pc, #224]	@ (800b198 <USB_SetTurnaroundTime+0x124>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d306      	bcc.n	800b0ca <USB_SetTurnaroundTime+0x56>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	4a37      	ldr	r2, [pc, #220]	@ (800b19c <USB_SetTurnaroundTime+0x128>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d202      	bcs.n	800b0ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b0c4:	230d      	movs	r3, #13
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	e04c      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	4a33      	ldr	r2, [pc, #204]	@ (800b19c <USB_SetTurnaroundTime+0x128>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d306      	bcc.n	800b0e0 <USB_SetTurnaroundTime+0x6c>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	4a32      	ldr	r2, [pc, #200]	@ (800b1a0 <USB_SetTurnaroundTime+0x12c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d802      	bhi.n	800b0e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b0da:	230c      	movs	r3, #12
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	e041      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4a2f      	ldr	r2, [pc, #188]	@ (800b1a0 <USB_SetTurnaroundTime+0x12c>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d906      	bls.n	800b0f6 <USB_SetTurnaroundTime+0x82>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	4a2e      	ldr	r2, [pc, #184]	@ (800b1a4 <USB_SetTurnaroundTime+0x130>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d802      	bhi.n	800b0f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b0f0:	230b      	movs	r3, #11
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	e036      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a4 <USB_SetTurnaroundTime+0x130>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d906      	bls.n	800b10c <USB_SetTurnaroundTime+0x98>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	4a29      	ldr	r2, [pc, #164]	@ (800b1a8 <USB_SetTurnaroundTime+0x134>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d802      	bhi.n	800b10c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b106:	230a      	movs	r3, #10
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	e02b      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	4a26      	ldr	r2, [pc, #152]	@ (800b1a8 <USB_SetTurnaroundTime+0x134>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d906      	bls.n	800b122 <USB_SetTurnaroundTime+0xae>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4a25      	ldr	r2, [pc, #148]	@ (800b1ac <USB_SetTurnaroundTime+0x138>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d202      	bcs.n	800b122 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b11c:	2309      	movs	r3, #9
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e020      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4a21      	ldr	r2, [pc, #132]	@ (800b1ac <USB_SetTurnaroundTime+0x138>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d306      	bcc.n	800b138 <USB_SetTurnaroundTime+0xc4>
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	4a20      	ldr	r2, [pc, #128]	@ (800b1b0 <USB_SetTurnaroundTime+0x13c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d802      	bhi.n	800b138 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b132:	2308      	movs	r3, #8
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e015      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b0 <USB_SetTurnaroundTime+0x13c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d906      	bls.n	800b14e <USB_SetTurnaroundTime+0xda>
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4a1c      	ldr	r2, [pc, #112]	@ (800b1b4 <USB_SetTurnaroundTime+0x140>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d202      	bcs.n	800b14e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b148:	2307      	movs	r3, #7
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e00a      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b14e:	2306      	movs	r3, #6
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e007      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d102      	bne.n	800b160 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b15a:	2309      	movs	r3, #9
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	e001      	b.n	800b164 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b160:	2309      	movs	r3, #9
 800b162:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	029b      	lsls	r3, r3, #10
 800b178:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b17c:	431a      	orrs	r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	00d8acbf 	.word	0x00d8acbf
 800b194:	00e4e1c0 	.word	0x00e4e1c0
 800b198:	00f42400 	.word	0x00f42400
 800b19c:	01067380 	.word	0x01067380
 800b1a0:	011a499f 	.word	0x011a499f
 800b1a4:	01312cff 	.word	0x01312cff
 800b1a8:	014ca43f 	.word	0x014ca43f
 800b1ac:	016e3600 	.word	0x016e3600
 800b1b0:	01a6ab1f 	.word	0x01a6ab1f
 800b1b4:	01e84800 	.word	0x01e84800

0800b1b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f043 0201 	orr.w	r2, r3, #1
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f023 0201 	bic.w	r2, r3, #1
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d115      	bne.n	800b24a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b22a:	200a      	movs	r0, #10
 800b22c:	f7f5 ffa8 	bl	8001180 <HAL_Delay>
      ms += 10U;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	330a      	adds	r3, #10
 800b234:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f93f 	bl	800c4ba <USB_GetMode>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d01e      	beq.n	800b280 <USB_SetCurrentMode+0x84>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2bc7      	cmp	r3, #199	@ 0xc7
 800b246:	d9f0      	bls.n	800b22a <USB_SetCurrentMode+0x2e>
 800b248:	e01a      	b.n	800b280 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d115      	bne.n	800b27c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b25c:	200a      	movs	r0, #10
 800b25e:	f7f5 ff8f 	bl	8001180 <HAL_Delay>
      ms += 10U;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	330a      	adds	r3, #10
 800b266:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f001 f926 	bl	800c4ba <USB_GetMode>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d005      	beq.n	800b280 <USB_SetCurrentMode+0x84>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2bc7      	cmp	r3, #199	@ 0xc7
 800b278:	d9f0      	bls.n	800b25c <USB_SetCurrentMode+0x60>
 800b27a:	e001      	b.n	800b280 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e005      	b.n	800b28c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2bc8      	cmp	r3, #200	@ 0xc8
 800b284:	d101      	bne.n	800b28a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e000      	b.n	800b28c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b294:	b084      	sub	sp, #16
 800b296:	b580      	push	{r7, lr}
 800b298:	b086      	sub	sp, #24
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b2a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	e009      	b.n	800b2c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	3340      	adds	r3, #64	@ 0x40
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2b0e      	cmp	r3, #14
 800b2cc:	d9f2      	bls.n	800b2b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d11c      	bne.n	800b310 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2e4:	f043 0302 	orr.w	r3, r3, #2
 800b2e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e005      	b.n	800b31c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b314:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b322:	461a      	mov	r2, r3
 800b324:	2300      	movs	r3, #0
 800b326:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b328:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d10d      	bne.n	800b34c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f968 	bl	800b610 <USB_SetDevSpeed>
 800b340:	e008      	b.n	800b354 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b342:	2101      	movs	r1, #1
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f963 	bl	800b610 <USB_SetDevSpeed>
 800b34a:	e003      	b.n	800b354 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b34c:	2103      	movs	r1, #3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f95e 	bl	800b610 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b354:	2110      	movs	r1, #16
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f8fa 	bl	800b550 <USB_FlushTxFifo>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f924 	bl	800b5b4 <USB_FlushRxFifo>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b37c:	461a      	mov	r2, r3
 800b37e:	2300      	movs	r3, #0
 800b380:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b388:	461a      	mov	r2, r3
 800b38a:	2300      	movs	r3, #0
 800b38c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b394:	461a      	mov	r2, r3
 800b396:	2300      	movs	r3, #0
 800b398:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	613b      	str	r3, [r7, #16]
 800b39e:	e043      	b.n	800b428 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3b6:	d118      	bne.n	800b3ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e013      	b.n	800b3fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	e008      	b.n	800b3fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b408:	461a      	mov	r2, r3
 800b40a:	2300      	movs	r3, #0
 800b40c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b41a:	461a      	mov	r2, r3
 800b41c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b420:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3301      	adds	r3, #1
 800b426:	613b      	str	r3, [r7, #16]
 800b428:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b42c:	461a      	mov	r2, r3
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	4293      	cmp	r3, r2
 800b432:	d3b5      	bcc.n	800b3a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b434:	2300      	movs	r3, #0
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	e043      	b.n	800b4c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b44c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b450:	d118      	bne.n	800b484 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b464:	461a      	mov	r2, r3
 800b466:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	e013      	b.n	800b496 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b47a:	461a      	mov	r2, r3
 800b47c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e008      	b.n	800b496 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b490:	461a      	mov	r2, r3
 800b492:	2300      	movs	r3, #0
 800b494:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b4ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d3b5      	bcc.n	800b43a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b4ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	f043 0210 	orr.w	r2, r3, #16
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	699a      	ldr	r2, [r3, #24]
 800b508:	4b0f      	ldr	r3, [pc, #60]	@ (800b548 <USB_DevInit+0x2b4>)
 800b50a:	4313      	orrs	r3, r2
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b510:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	f043 0208 	orr.w	r2, r3, #8
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b524:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d105      	bne.n	800b538 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	4b06      	ldr	r3, [pc, #24]	@ (800b54c <USB_DevInit+0x2b8>)
 800b532:	4313      	orrs	r3, r2
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b544:	b004      	add	sp, #16
 800b546:	4770      	bx	lr
 800b548:	803c3800 	.word	0x803c3800
 800b54c:	40000004 	.word	0x40000004

0800b550 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b56a:	d901      	bls.n	800b570 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e01b      	b.n	800b5a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	daf2      	bge.n	800b55e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	019b      	lsls	r3, r3, #6
 800b580:	f043 0220 	orr.w	r2, r3, #32
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b594:	d901      	bls.n	800b59a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e006      	b.n	800b5a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f003 0320 	and.w	r3, r3, #32
 800b5a2:	2b20      	cmp	r3, #32
 800b5a4:	d0f0      	beq.n	800b588 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5cc:	d901      	bls.n	800b5d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e018      	b.n	800b604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	daf2      	bge.n	800b5c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2210      	movs	r2, #16
 800b5e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5f0:	d901      	bls.n	800b5f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e006      	b.n	800b604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	f003 0310 	and.w	r3, r3, #16
 800b5fe:	2b10      	cmp	r3, #16
 800b600:	d0f0      	beq.n	800b5e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	68f9      	ldr	r1, [r7, #12]
 800b62c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b630:	4313      	orrs	r3, r2
 800b632:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b642:	b480      	push	{r7}
 800b644:	b087      	sub	sp, #28
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f003 0306 	and.w	r3, r3, #6
 800b65a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b662:	2300      	movs	r3, #0
 800b664:	75fb      	strb	r3, [r7, #23]
 800b666:	e00a      	b.n	800b67e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d002      	beq.n	800b674 <USB_GetDevSpeed+0x32>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b06      	cmp	r3, #6
 800b672:	d102      	bne.n	800b67a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b674:	2302      	movs	r3, #2
 800b676:	75fb      	strb	r3, [r7, #23]
 800b678:	e001      	b.n	800b67e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b67a:	230f      	movs	r3, #15
 800b67c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b680:	4618      	mov	r0, r3
 800b682:	371c      	adds	r7, #28
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	785b      	ldrb	r3, [r3, #1]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d139      	bne.n	800b71c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	68f9      	ldr	r1, [r7, #12]
 800b6c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d153      	bne.n	800b788 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	791b      	ldrb	r3, [r3, #4]
 800b6fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	059b      	lsls	r3, r3, #22
 800b702:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b704:	431a      	orrs	r2, r3
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	0159      	lsls	r1, r3, #5
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	440b      	add	r3, r1
 800b70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b712:	4619      	mov	r1, r3
 800b714:	4b20      	ldr	r3, [pc, #128]	@ (800b798 <USB_ActivateEndpoint+0x10c>)
 800b716:	4313      	orrs	r3, r2
 800b718:	600b      	str	r3, [r1, #0]
 800b71a:	e035      	b.n	800b788 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	2101      	movs	r1, #1
 800b72e:	fa01 f303 	lsl.w	r3, r1, r3
 800b732:	041b      	lsls	r3, r3, #16
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b73a:	4313      	orrs	r3, r2
 800b73c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	015a      	lsls	r2, r3, #5
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	4413      	add	r3, r2
 800b746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d119      	bne.n	800b788 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	791b      	ldrb	r3, [r3, #4]
 800b76e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b770:	430b      	orrs	r3, r1
 800b772:	431a      	orrs	r2, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	0159      	lsls	r1, r3, #5
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	440b      	add	r3, r1
 800b77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b780:	4619      	mov	r1, r3
 800b782:	4b05      	ldr	r3, [pc, #20]	@ (800b798 <USB_ActivateEndpoint+0x10c>)
 800b784:	4313      	orrs	r3, r2
 800b786:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	10008000 	.word	0x10008000

0800b79c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	785b      	ldrb	r3, [r3, #1]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d161      	bne.n	800b87c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	015a      	lsls	r2, r3, #5
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7ce:	d11f      	bne.n	800b810 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	0151      	lsls	r1, r2, #5
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	440a      	add	r2, r1
 800b7e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b7ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	0151      	lsls	r1, r2, #5
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	440a      	add	r2, r1
 800b806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b80a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b80e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	f003 030f 	and.w	r3, r3, #15
 800b820:	2101      	movs	r1, #1
 800b822:	fa01 f303 	lsl.w	r3, r1, r3
 800b826:	b29b      	uxth	r3, r3
 800b828:	43db      	mvns	r3, r3
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b830:	4013      	ands	r3, r2
 800b832:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b83a:	69da      	ldr	r2, [r3, #28]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	f003 030f 	and.w	r3, r3, #15
 800b844:	2101      	movs	r1, #1
 800b846:	fa01 f303 	lsl.w	r3, r1, r3
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	43db      	mvns	r3, r3
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b854:	4013      	ands	r3, r2
 800b856:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	0159      	lsls	r1, r3, #5
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	440b      	add	r3, r1
 800b86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b872:	4619      	mov	r1, r3
 800b874:	4b35      	ldr	r3, [pc, #212]	@ (800b94c <USB_DeactivateEndpoint+0x1b0>)
 800b876:	4013      	ands	r3, r2
 800b878:	600b      	str	r3, [r1, #0]
 800b87a:	e060      	b.n	800b93e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b88e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b892:	d11f      	bne.n	800b8d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	0151      	lsls	r1, r2, #5
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	015a      	lsls	r2, r3, #5
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	0151      	lsls	r1, r2, #5
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	440a      	add	r2, r1
 800b8ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 030f 	and.w	r3, r3, #15
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ea:	041b      	lsls	r3, r3, #16
 800b8ec:	43db      	mvns	r3, r3
 800b8ee:	68f9      	ldr	r1, [r7, #12]
 800b8f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f003 030f 	and.w	r3, r3, #15
 800b908:	2101      	movs	r1, #1
 800b90a:	fa01 f303 	lsl.w	r3, r1, r3
 800b90e:	041b      	lsls	r3, r3, #16
 800b910:	43db      	mvns	r3, r3
 800b912:	68f9      	ldr	r1, [r7, #12]
 800b914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b918:	4013      	ands	r3, r2
 800b91a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	0159      	lsls	r1, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	440b      	add	r3, r1
 800b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b936:	4619      	mov	r1, r3
 800b938:	4b05      	ldr	r3, [pc, #20]	@ (800b950 <USB_DeactivateEndpoint+0x1b4>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	ec337800 	.word	0xec337800
 800b950:	eff37800 	.word	0xeff37800

0800b954 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08a      	sub	sp, #40	@ 0x28
 800b958:	af02      	add	r7, sp, #8
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	2b01      	cmp	r3, #1
 800b972:	f040 8185 	bne.w	800bc80 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d132      	bne.n	800b9e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b98a:	691a      	ldr	r2, [r3, #16]
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	0159      	lsls	r1, r3, #5
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	440b      	add	r3, r1
 800b994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b998:	4619      	mov	r1, r3
 800b99a:	4ba7      	ldr	r3, [pc, #668]	@ (800bc38 <USB_EPStartXfer+0x2e4>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	0151      	lsls	r1, r2, #5
 800b9b2:	69fa      	ldr	r2, [r7, #28]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9cc:	691a      	ldr	r2, [r3, #16]
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	0159      	lsls	r1, r3, #5
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	440b      	add	r3, r1
 800b9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4b97      	ldr	r3, [pc, #604]	@ (800bc3c <USB_EPStartXfer+0x2e8>)
 800b9de:	4013      	ands	r3, r2
 800b9e0:	610b      	str	r3, [r1, #16]
 800b9e2:	e097      	b.n	800bb14 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f0:	691a      	ldr	r2, [r3, #16]
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	0159      	lsls	r1, r3, #5
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	440b      	add	r3, r1
 800b9fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4b8e      	ldr	r3, [pc, #568]	@ (800bc3c <USB_EPStartXfer+0x2e8>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba12:	691a      	ldr	r2, [r3, #16]
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	0159      	lsls	r1, r3, #5
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	440b      	add	r3, r1
 800ba1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba20:	4619      	mov	r1, r3
 800ba22:	4b85      	ldr	r3, [pc, #532]	@ (800bc38 <USB_EPStartXfer+0x2e4>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d11a      	bne.n	800ba64 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	691a      	ldr	r2, [r3, #16]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d903      	bls.n	800ba42 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	689a      	ldr	r2, [r3, #8]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	015a      	lsls	r2, r3, #5
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4413      	add	r3, r2
 800ba4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	0151      	lsls	r1, r2, #5
 800ba54:	69fa      	ldr	r2, [r7, #28]
 800ba56:	440a      	add	r2, r1
 800ba58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba60:	6113      	str	r3, [r2, #16]
 800ba62:	e044      	b.n	800baee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	691a      	ldr	r2, [r3, #16]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	1e5a      	subs	r2, r3, #1
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba78:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba86:	691a      	ldr	r2, [r3, #16]
 800ba88:	8afb      	ldrh	r3, [r7, #22]
 800ba8a:	04d9      	lsls	r1, r3, #19
 800ba8c:	4b6c      	ldr	r3, [pc, #432]	@ (800bc40 <USB_EPStartXfer+0x2ec>)
 800ba8e:	400b      	ands	r3, r1
 800ba90:	69b9      	ldr	r1, [r7, #24]
 800ba92:	0148      	lsls	r0, r1, #5
 800ba94:	69f9      	ldr	r1, [r7, #28]
 800ba96:	4401      	add	r1, r0
 800ba98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	791b      	ldrb	r3, [r3, #4]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d122      	bne.n	800baee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bac2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bac6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bad4:	691a      	ldr	r2, [r3, #16]
 800bad6:	8afb      	ldrh	r3, [r7, #22]
 800bad8:	075b      	lsls	r3, r3, #29
 800bada:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800bade:	69b9      	ldr	r1, [r7, #24]
 800bae0:	0148      	lsls	r0, r1, #5
 800bae2:	69f9      	ldr	r1, [r7, #28]
 800bae4:	4401      	add	r1, r0
 800bae6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800baea:	4313      	orrs	r3, r2
 800baec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafa:	691a      	ldr	r2, [r3, #16]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb04:	69b9      	ldr	r1, [r7, #24]
 800bb06:	0148      	lsls	r0, r1, #5
 800bb08:	69f9      	ldr	r1, [r7, #28]
 800bb0a:	4401      	add	r1, r0
 800bb0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bb10:	4313      	orrs	r3, r2
 800bb12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d14b      	bne.n	800bbb2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d009      	beq.n	800bb36 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb2e:	461a      	mov	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	791b      	ldrb	r3, [r3, #4]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d128      	bne.n	800bb90 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d110      	bne.n	800bb70 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	015a      	lsls	r2, r3, #5
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	4413      	add	r3, r2
 800bb56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	0151      	lsls	r1, r2, #5
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	440a      	add	r2, r1
 800bb64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	e00f      	b.n	800bb90 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	0151      	lsls	r1, r2, #5
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	440a      	add	r2, r1
 800bb86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb8e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	015a      	lsls	r2, r3, #5
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	0151      	lsls	r1, r2, #5
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	440a      	add	r2, r1
 800bba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbaa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	e169      	b.n	800be86 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	69fa      	ldr	r2, [r7, #28]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbcc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bbd0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	791b      	ldrb	r3, [r3, #4]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d015      	beq.n	800bc06 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 8151 	beq.w	800be86 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f003 030f 	and.w	r3, r3, #15
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfa:	69f9      	ldr	r1, [r7, #28]
 800bbfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc00:	4313      	orrs	r3, r2
 800bc02:	634b      	str	r3, [r1, #52]	@ 0x34
 800bc04:	e13f      	b.n	800be86 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d116      	bne.n	800bc44 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	015a      	lsls	r2, r3, #5
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	0151      	lsls	r1, r2, #5
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	440a      	add	r2, r1
 800bc2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bc34:	6013      	str	r3, [r2, #0]
 800bc36:	e015      	b.n	800bc64 <USB_EPStartXfer+0x310>
 800bc38:	e007ffff 	.word	0xe007ffff
 800bc3c:	fff80000 	.word	0xfff80000
 800bc40:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	69ba      	ldr	r2, [r7, #24]
 800bc54:	0151      	lsls	r1, r2, #5
 800bc56:	69fa      	ldr	r2, [r7, #28]
 800bc58:	440a      	add	r2, r1
 800bc5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc62:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	68d9      	ldr	r1, [r3, #12]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	781a      	ldrb	r2, [r3, #0]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	b298      	uxth	r0, r3
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	4603      	mov	r3, r0
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 f9b9 	bl	800bff0 <USB_WritePacket>
 800bc7e:	e102      	b.n	800be86 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc8c:	691a      	ldr	r2, [r3, #16]
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	0159      	lsls	r1, r3, #5
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	440b      	add	r3, r1
 800bc96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4b7c      	ldr	r3, [pc, #496]	@ (800be90 <USB_EPStartXfer+0x53c>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcae:	691a      	ldr	r2, [r3, #16]
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	0159      	lsls	r1, r3, #5
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4b75      	ldr	r3, [pc, #468]	@ (800be94 <USB_EPStartXfer+0x540>)
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d12f      	bne.n	800bd2a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcee:	691a      	ldr	r2, [r3, #16]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcf8:	69b9      	ldr	r1, [r7, #24]
 800bcfa:	0148      	lsls	r0, r1, #5
 800bcfc:	69f9      	ldr	r1, [r7, #28]
 800bcfe:	4401      	add	r1, r0
 800bd00:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd04:	4313      	orrs	r3, r2
 800bd06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	015a      	lsls	r2, r3, #5
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	4413      	add	r3, r2
 800bd10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	0151      	lsls	r1, r2, #5
 800bd1a:	69fa      	ldr	r2, [r7, #28]
 800bd1c:	440a      	add	r2, r1
 800bd1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd26:	6113      	str	r3, [r2, #16]
 800bd28:	e05f      	b.n	800bdea <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d123      	bne.n	800bd7a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd3e:	691a      	ldr	r2, [r3, #16]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd48:	69b9      	ldr	r1, [r7, #24]
 800bd4a:	0148      	lsls	r0, r1, #5
 800bd4c:	69f9      	ldr	r1, [r7, #28]
 800bd4e:	4401      	add	r1, r0
 800bd50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd54:	4313      	orrs	r3, r2
 800bd56:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	0151      	lsls	r1, r2, #5
 800bd6a:	69fa      	ldr	r2, [r7, #28]
 800bd6c:	440a      	add	r2, r1
 800bd6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd76:	6113      	str	r3, [r2, #16]
 800bd78:	e037      	b.n	800bdea <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	691a      	ldr	r2, [r3, #16]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	4413      	add	r3, r2
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd8e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	8afa      	ldrh	r2, [r7, #22]
 800bd96:	fb03 f202 	mul.w	r2, r3, r2
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	8afb      	ldrh	r3, [r7, #22]
 800bdae:	04d9      	lsls	r1, r3, #19
 800bdb0:	4b39      	ldr	r3, [pc, #228]	@ (800be98 <USB_EPStartXfer+0x544>)
 800bdb2:	400b      	ands	r3, r1
 800bdb4:	69b9      	ldr	r1, [r7, #24]
 800bdb6:	0148      	lsls	r0, r1, #5
 800bdb8:	69f9      	ldr	r1, [r7, #28]
 800bdba:	4401      	add	r1, r0
 800bdbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdda:	69b9      	ldr	r1, [r7, #24]
 800bddc:	0148      	lsls	r0, r1, #5
 800bdde:	69f9      	ldr	r1, [r7, #28]
 800bde0:	4401      	add	r1, r0
 800bde2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bde6:	4313      	orrs	r3, r2
 800bde8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10d      	bne.n	800be0c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d009      	beq.n	800be0c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	68d9      	ldr	r1, [r3, #12]
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be08:	460a      	mov	r2, r1
 800be0a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	791b      	ldrb	r3, [r3, #4]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d128      	bne.n	800be66 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be20:	2b00      	cmp	r3, #0
 800be22:	d110      	bne.n	800be46 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	0151      	lsls	r1, r2, #5
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	440a      	add	r2, r1
 800be3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	e00f      	b.n	800be66 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	015a      	lsls	r2, r3, #5
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	4413      	add	r3, r2
 800be4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	0151      	lsls	r1, r2, #5
 800be58:	69fa      	ldr	r2, [r7, #28]
 800be5a:	440a      	add	r2, r1
 800be5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be64:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	015a      	lsls	r2, r3, #5
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	4413      	add	r3, r2
 800be6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	0151      	lsls	r1, r2, #5
 800be78:	69fa      	ldr	r2, [r7, #28]
 800be7a:	440a      	add	r2, r1
 800be7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800be84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	fff80000 	.word	0xfff80000
 800be94:	e007ffff 	.word	0xe007ffff
 800be98:	1ff80000 	.word	0x1ff80000

0800be9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	785b      	ldrb	r3, [r3, #1]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d14a      	bne.n	800bf50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bed2:	f040 8086 	bne.w	800bfe2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	7812      	ldrb	r2, [r2, #0]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bef4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bef8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	7812      	ldrb	r2, [r2, #0]
 800bf0e:	0151      	lsls	r1, r2, #5
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	440a      	add	r2, r1
 800bf14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3301      	adds	r3, #1
 800bf22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d902      	bls.n	800bf34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	75fb      	strb	r3, [r7, #23]
          break;
 800bf32:	e056      	b.n	800bfe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	015a      	lsls	r2, r3, #5
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf4c:	d0e7      	beq.n	800bf1e <USB_EPStopXfer+0x82>
 800bf4e:	e048      	b.n	800bfe2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	015a      	lsls	r2, r3, #5
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf68:	d13b      	bne.n	800bfe2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	7812      	ldrb	r2, [r2, #0]
 800bfa2:	0151      	lsls	r1, r2, #5
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	440a      	add	r2, r1
 800bfa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d902      	bls.n	800bfc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bfc6:	e00c      	b.n	800bfe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bfdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfe0:	d0e7      	beq.n	800bfb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b089      	sub	sp, #36	@ 0x24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	4611      	mov	r1, r2
 800bffc:	461a      	mov	r2, r3
 800bffe:	460b      	mov	r3, r1
 800c000:	71fb      	strb	r3, [r7, #7]
 800c002:	4613      	mov	r3, r2
 800c004:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c00e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	d123      	bne.n	800c05e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c016:	88bb      	ldrh	r3, [r7, #4]
 800c018:	3303      	adds	r3, #3
 800c01a:	089b      	lsrs	r3, r3, #2
 800c01c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c01e:	2300      	movs	r3, #0
 800c020:	61bb      	str	r3, [r7, #24]
 800c022:	e018      	b.n	800c056 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	031a      	lsls	r2, r3, #12
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c030:	461a      	mov	r2, r3
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	3301      	adds	r3, #1
 800c03c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	3301      	adds	r3, #1
 800c042:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	3301      	adds	r3, #1
 800c048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	3301      	adds	r3, #1
 800c04e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	3301      	adds	r3, #1
 800c054:	61bb      	str	r3, [r7, #24]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d3e2      	bcc.n	800c024 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3724      	adds	r7, #36	@ 0x24
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b08b      	sub	sp, #44	@ 0x2c
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	4613      	mov	r3, r2
 800c078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c082:	88fb      	ldrh	r3, [r7, #6]
 800c084:	089b      	lsrs	r3, r3, #2
 800c086:	b29b      	uxth	r3, r3
 800c088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c08a:	88fb      	ldrh	r3, [r7, #6]
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c092:	2300      	movs	r3, #0
 800c094:	623b      	str	r3, [r7, #32]
 800c096:	e014      	b.n	800c0c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	623b      	str	r3, [r7, #32]
 800c0c2:	6a3a      	ldr	r2, [r7, #32]
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d3e6      	bcc.n	800c098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c0ca:	8bfb      	ldrh	r3, [r7, #30]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d01e      	beq.n	800c10e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0da:	461a      	mov	r2, r3
 800c0dc:	f107 0310 	add.w	r3, r7, #16
 800c0e0:	6812      	ldr	r2, [r2, #0]
 800c0e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	701a      	strb	r2, [r3, #0]
      i++;
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	623b      	str	r3, [r7, #32]
      pDest++;
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fe:	3301      	adds	r3, #1
 800c100:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c102:	8bfb      	ldrh	r3, [r7, #30]
 800c104:	3b01      	subs	r3, #1
 800c106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c108:	8bfb      	ldrh	r3, [r7, #30]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1ea      	bne.n	800c0e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c110:	4618      	mov	r0, r3
 800c112:	372c      	adds	r7, #44	@ 0x2c
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d12c      	bne.n	800c192 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	db12      	blt.n	800c170 <USB_EPSetStall+0x54>
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00f      	beq.n	800c170 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	0151      	lsls	r1, r2, #5
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	440a      	add	r2, r1
 800c166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c16a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c16e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	0151      	lsls	r1, r2, #5
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	440a      	add	r2, r1
 800c186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c18a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	e02b      	b.n	800c1ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	db12      	blt.n	800c1ca <USB_EPSetStall+0xae>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00f      	beq.n	800c1ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	015a      	lsls	r2, r3, #5
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	0151      	lsls	r1, r2, #5
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	440a      	add	r2, r1
 800c1c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c1c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	0151      	lsls	r1, r2, #5
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	440a      	add	r2, r1
 800c1e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c1e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d128      	bne.n	800c266 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c22e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c232:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	791b      	ldrb	r3, [r3, #4]
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d003      	beq.n	800c244 <USB_EPClearStall+0x4c>
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	791b      	ldrb	r3, [r3, #4]
 800c240:	2b02      	cmp	r3, #2
 800c242:	d138      	bne.n	800c2b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	015a      	lsls	r2, r3, #5
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	4413      	add	r3, r2
 800c24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	0151      	lsls	r1, r2, #5
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	440a      	add	r2, r1
 800c25a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c25e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	e027      	b.n	800c2b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	015a      	lsls	r2, r3, #5
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	0151      	lsls	r1, r2, #5
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	440a      	add	r2, r1
 800c27c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c280:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c284:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	791b      	ldrb	r3, [r3, #4]
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d003      	beq.n	800c296 <USB_EPClearStall+0x9e>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	791b      	ldrb	r3, [r3, #4]
 800c292:	2b02      	cmp	r3, #2
 800c294:	d10f      	bne.n	800c2b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	0151      	lsls	r1, r2, #5
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c2b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c2e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	011b      	lsls	r3, r3, #4
 800c2f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c2f8:	68f9      	ldr	r1, [r7, #12]
 800c2fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2fe:	4313      	orrs	r3, r2
 800c300:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c33e:	f023 0302 	bic.w	r3, r3, #2
 800c342:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c352:	b480      	push	{r7}
 800c354:	b085      	sub	sp, #20
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	4013      	ands	r3, r2
 800c3dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	0c1b      	lsrs	r3, r3, #16
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c40a:	69db      	ldr	r3, [r3, #28]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	4013      	ands	r3, r2
 800c410:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	b29b      	uxth	r3, r3
}
 800c416:	4618      	mov	r0, r3
 800c418:	3714      	adds	r7, #20
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	015a      	lsls	r2, r3, #5
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	4413      	add	r3, r2
 800c43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	4013      	ands	r3, r2
 800c44e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c450:	68bb      	ldr	r3, [r7, #8]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c45e:	b480      	push	{r7}
 800c460:	b087      	sub	sp, #28
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c480:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	f003 030f 	and.w	r3, r3, #15
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	fa22 f303 	lsr.w	r3, r2, r3
 800c48e:	01db      	lsls	r3, r3, #7
 800c490:	b2db      	uxtb	r3, r3
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	4313      	orrs	r3, r2
 800c496:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4b09      	ldr	r3, [pc, #36]	@ (800c51c <USB_ActivateSetup+0x44>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c50c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	fffff800 	.word	0xfffff800

0800c520 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c520:	b480      	push	{r7}
 800c522:	b087      	sub	sp, #28
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	460b      	mov	r3, r1
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	333c      	adds	r3, #60	@ 0x3c
 800c536:	3304      	adds	r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	4a26      	ldr	r2, [pc, #152]	@ (800c5d8 <USB_EP0_OutStart+0xb8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d90a      	bls.n	800c55a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c554:	d101      	bne.n	800c55a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	e037      	b.n	800c5ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c560:	461a      	mov	r2, r3
 800c562:	2300      	movs	r3, #0
 800c564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c588:	f043 0318 	orr.w	r3, r3, #24
 800c58c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c59c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c5a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d10f      	bne.n	800c5c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c5c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	4f54300a 	.word	0x4f54300a

0800c5dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c5f4:	d901      	bls.n	800c5fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e01b      	b.n	800c632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	daf2      	bge.n	800c5e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	f043 0201 	orr.w	r2, r3, #1
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3301      	adds	r3, #1
 800c616:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c61e:	d901      	bls.n	800c624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c620:	2303      	movs	r3, #3
 800c622:	e006      	b.n	800c632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d0f0      	beq.n	800c612 <USB_CoreReset+0x36>

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
	...

0800c640 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c64c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c650:	f005 fb5c 	bl	8011d0c <USBD_static_malloc>
 800c654:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d109      	bne.n	800c670 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	32b0      	adds	r2, #176	@ 0xb0
 800c666:	2100      	movs	r1, #0
 800c668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c66c:	2302      	movs	r3, #2
 800c66e:	e0d4      	b.n	800c81a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c670:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c674:	2100      	movs	r1, #0
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f006 f9d6 	bl	8012a28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	32b0      	adds	r2, #176	@ 0xb0
 800c686:	68f9      	ldr	r1, [r7, #12]
 800c688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	32b0      	adds	r2, #176	@ 0xb0
 800c696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7c1b      	ldrb	r3, [r3, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d138      	bne.n	800c71a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c6a8:	4b5e      	ldr	r3, [pc, #376]	@ (800c824 <USBD_CDC_Init+0x1e4>)
 800c6aa:	7819      	ldrb	r1, [r3, #0]
 800c6ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f005 fa07 	bl	8011ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c6b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c824 <USBD_CDC_Init+0x1e4>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	f003 020f 	and.w	r2, r3, #15
 800c6c0:	6879      	ldr	r1, [r7, #4]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	440b      	add	r3, r1
 800c6cc:	3324      	adds	r3, #36	@ 0x24
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c6d2:	4b55      	ldr	r3, [pc, #340]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c6d4:	7819      	ldrb	r1, [r3, #0]
 800c6d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6da:	2202      	movs	r2, #2
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f005 f9f2 	bl	8011ac6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c6e2:	4b51      	ldr	r3, [pc, #324]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 020f 	and.w	r2, r3, #15
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	@ (800c82c <USBD_CDC_Init+0x1ec>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f003 020f 	and.w	r2, r3, #15
 800c706:	6879      	ldr	r1, [r7, #4]
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	3326      	adds	r3, #38	@ 0x26
 800c714:	2210      	movs	r2, #16
 800c716:	801a      	strh	r2, [r3, #0]
 800c718:	e035      	b.n	800c786 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c71a:	4b42      	ldr	r3, [pc, #264]	@ (800c824 <USBD_CDC_Init+0x1e4>)
 800c71c:	7819      	ldrb	r1, [r3, #0]
 800c71e:	2340      	movs	r3, #64	@ 0x40
 800c720:	2202      	movs	r2, #2
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f005 f9cf 	bl	8011ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c728:	4b3e      	ldr	r3, [pc, #248]	@ (800c824 <USBD_CDC_Init+0x1e4>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	f003 020f 	and.w	r2, r3, #15
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	3324      	adds	r3, #36	@ 0x24
 800c73e:	2201      	movs	r2, #1
 800c740:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c742:	4b39      	ldr	r3, [pc, #228]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c744:	7819      	ldrb	r1, [r3, #0]
 800c746:	2340      	movs	r3, #64	@ 0x40
 800c748:	2202      	movs	r2, #2
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f005 f9bb 	bl	8011ac6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c750:	4b35      	ldr	r3, [pc, #212]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	f003 020f 	and.w	r2, r3, #15
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c768:	2201      	movs	r2, #1
 800c76a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c76c:	4b2f      	ldr	r3, [pc, #188]	@ (800c82c <USBD_CDC_Init+0x1ec>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	f003 020f 	and.w	r2, r3, #15
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	3326      	adds	r3, #38	@ 0x26
 800c782:	2210      	movs	r2, #16
 800c784:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c786:	4b29      	ldr	r3, [pc, #164]	@ (800c82c <USBD_CDC_Init+0x1ec>)
 800c788:	7819      	ldrb	r1, [r3, #0]
 800c78a:	2308      	movs	r3, #8
 800c78c:	2203      	movs	r2, #3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f005 f999 	bl	8011ac6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c794:	4b25      	ldr	r3, [pc, #148]	@ (800c82c <USBD_CDC_Init+0x1ec>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f003 020f 	and.w	r2, r3, #15
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3324      	adds	r3, #36	@ 0x24
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	33b0      	adds	r3, #176	@ 0xb0
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	e018      	b.n	800c81a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7c1b      	ldrb	r3, [r3, #16]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7f0:	4b0d      	ldr	r3, [pc, #52]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c7f2:	7819      	ldrb	r1, [r3, #0]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c7fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f005 fa50 	bl	8011ca4 <USBD_LL_PrepareReceive>
 800c804:	e008      	b.n	800c818 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c806:	4b08      	ldr	r3, [pc, #32]	@ (800c828 <USBD_CDC_Init+0x1e8>)
 800c808:	7819      	ldrb	r1, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c810:	2340      	movs	r3, #64	@ 0x40
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f005 fa46 	bl	8011ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	24000097 	.word	0x24000097
 800c828:	24000098 	.word	0x24000098
 800c82c:	24000099 	.word	0x24000099

0800c830 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c83c:	4b3a      	ldr	r3, [pc, #232]	@ (800c928 <USBD_CDC_DeInit+0xf8>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f005 f965 	bl	8011b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c848:	4b37      	ldr	r3, [pc, #220]	@ (800c928 <USBD_CDC_DeInit+0xf8>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 020f 	and.w	r2, r3, #15
 800c850:	6879      	ldr	r1, [r7, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	3324      	adds	r3, #36	@ 0x24
 800c85e:	2200      	movs	r2, #0
 800c860:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c862:	4b32      	ldr	r3, [pc, #200]	@ (800c92c <USBD_CDC_DeInit+0xfc>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f005 f952 	bl	8011b12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c86e:	4b2f      	ldr	r3, [pc, #188]	@ (800c92c <USBD_CDC_DeInit+0xfc>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	f003 020f 	and.w	r2, r3, #15
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	4613      	mov	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	440b      	add	r3, r1
 800c882:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c886:	2200      	movs	r2, #0
 800c888:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c88a:	4b29      	ldr	r3, [pc, #164]	@ (800c930 <USBD_CDC_DeInit+0x100>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f005 f93e 	bl	8011b12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c896:	4b26      	ldr	r3, [pc, #152]	@ (800c930 <USBD_CDC_DeInit+0x100>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	f003 020f 	and.w	r2, r3, #15
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	440b      	add	r3, r1
 800c8aa:	3324      	adds	r3, #36	@ 0x24
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c8b0:	4b1f      	ldr	r3, [pc, #124]	@ (800c930 <USBD_CDC_DeInit+0x100>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	f003 020f 	and.w	r2, r3, #15
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	440b      	add	r3, r1
 800c8c4:	3326      	adds	r3, #38	@ 0x26
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	32b0      	adds	r2, #176	@ 0xb0
 800c8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01f      	beq.n	800c91c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	33b0      	adds	r3, #176	@ 0xb0
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	32b0      	adds	r2, #176	@ 0xb0
 800c8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f005 fa12 	bl	8011d28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	32b0      	adds	r2, #176	@ 0xb0
 800c90e:	2100      	movs	r1, #0
 800c910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	24000097 	.word	0x24000097
 800c92c:	24000098 	.word	0x24000098
 800c930:	24000099 	.word	0x24000099

0800c934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b086      	sub	sp, #24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	32b0      	adds	r2, #176	@ 0xb0
 800c948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c94e:	2300      	movs	r3, #0
 800c950:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c960:	2303      	movs	r3, #3
 800c962:	e0bf      	b.n	800cae4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d050      	beq.n	800ca12 <USBD_CDC_Setup+0xde>
 800c970:	2b20      	cmp	r3, #32
 800c972:	f040 80af 	bne.w	800cad4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	88db      	ldrh	r3, [r3, #6]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d03a      	beq.n	800c9f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	b25b      	sxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	da1b      	bge.n	800c9c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	33b0      	adds	r3, #176	@ 0xb0
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c99e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	88d2      	ldrh	r2, [r2, #6]
 800c9a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	88db      	ldrh	r3, [r3, #6]
 800c9aa:	2b07      	cmp	r3, #7
 800c9ac:	bf28      	it	cs
 800c9ae:	2307      	movcs	r3, #7
 800c9b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	89fa      	ldrh	r2, [r7, #14]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f001 fdbd 	bl	800e538 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c9be:	e090      	b.n	800cae2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	785a      	ldrb	r2, [r3, #1]
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	88db      	ldrh	r3, [r3, #6]
 800c9ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800c9d0:	d803      	bhi.n	800c9da <USBD_CDC_Setup+0xa6>
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	88db      	ldrh	r3, [r3, #6]
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	e000      	b.n	800c9dc <USBD_CDC_Setup+0xa8>
 800c9da:	2240      	movs	r2, #64	@ 0x40
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c9e2:	6939      	ldr	r1, [r7, #16]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 fdcf 	bl	800e590 <USBD_CtlPrepareRx>
      break;
 800c9f2:	e076      	b.n	800cae2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	33b0      	adds	r3, #176	@ 0xb0
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	7850      	ldrb	r0, [r2, #1]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	4798      	blx	r3
      break;
 800ca10:	e067      	b.n	800cae2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	785b      	ldrb	r3, [r3, #1]
 800ca16:	2b0b      	cmp	r3, #11
 800ca18:	d851      	bhi.n	800cabe <USBD_CDC_Setup+0x18a>
 800ca1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca20 <USBD_CDC_Setup+0xec>)
 800ca1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca20:	0800ca51 	.word	0x0800ca51
 800ca24:	0800cacd 	.word	0x0800cacd
 800ca28:	0800cabf 	.word	0x0800cabf
 800ca2c:	0800cabf 	.word	0x0800cabf
 800ca30:	0800cabf 	.word	0x0800cabf
 800ca34:	0800cabf 	.word	0x0800cabf
 800ca38:	0800cabf 	.word	0x0800cabf
 800ca3c:	0800cabf 	.word	0x0800cabf
 800ca40:	0800cabf 	.word	0x0800cabf
 800ca44:	0800cabf 	.word	0x0800cabf
 800ca48:	0800ca7b 	.word	0x0800ca7b
 800ca4c:	0800caa5 	.word	0x0800caa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d107      	bne.n	800ca6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca5c:	f107 030a 	add.w	r3, r7, #10
 800ca60:	2202      	movs	r2, #2
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 fd67 	bl	800e538 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca6a:	e032      	b.n	800cad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 fce5 	bl	800e43e <USBD_CtlError>
            ret = USBD_FAIL;
 800ca74:	2303      	movs	r3, #3
 800ca76:	75fb      	strb	r3, [r7, #23]
          break;
 800ca78:	e02b      	b.n	800cad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d107      	bne.n	800ca96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca86:	f107 030d 	add.w	r3, r7, #13
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 fd52 	bl	800e538 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca94:	e01d      	b.n	800cad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 fcd0 	bl	800e43e <USBD_CtlError>
            ret = USBD_FAIL;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	75fb      	strb	r3, [r7, #23]
          break;
 800caa2:	e016      	b.n	800cad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b03      	cmp	r3, #3
 800caae:	d00f      	beq.n	800cad0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f001 fcc3 	bl	800e43e <USBD_CtlError>
            ret = USBD_FAIL;
 800cab8:	2303      	movs	r3, #3
 800caba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cabc:	e008      	b.n	800cad0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f001 fcbc 	bl	800e43e <USBD_CtlError>
          ret = USBD_FAIL;
 800cac6:	2303      	movs	r3, #3
 800cac8:	75fb      	strb	r3, [r7, #23]
          break;
 800caca:	e002      	b.n	800cad2 <USBD_CDC_Setup+0x19e>
          break;
 800cacc:	bf00      	nop
 800cace:	e008      	b.n	800cae2 <USBD_CDC_Setup+0x1ae>
          break;
 800cad0:	bf00      	nop
      }
      break;
 800cad2:	e006      	b.n	800cae2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f001 fcb1 	bl	800e43e <USBD_CtlError>
      ret = USBD_FAIL;
 800cadc:	2303      	movs	r3, #3
 800cade:	75fb      	strb	r3, [r7, #23]
      break;
 800cae0:	bf00      	nop
  }

  return (uint8_t)ret;
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	460b      	mov	r3, r1
 800caf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cafe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	32b0      	adds	r2, #176	@ 0xb0
 800cb0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e065      	b.n	800cbe2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	32b0      	adds	r2, #176	@ 0xb0
 800cb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cb26:	78fb      	ldrb	r3, [r7, #3]
 800cb28:	f003 020f 	and.w	r2, r3, #15
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	440b      	add	r3, r1
 800cb38:	3318      	adds	r3, #24
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d02f      	beq.n	800cba0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cb40:	78fb      	ldrb	r3, [r7, #3]
 800cb42:	f003 020f 	and.w	r2, r3, #15
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	440b      	add	r3, r1
 800cb52:	3318      	adds	r3, #24
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	f003 010f 	and.w	r1, r3, #15
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	440b      	add	r3, r1
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4403      	add	r3, r0
 800cb68:	331c      	adds	r3, #28
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb70:	fb01 f303 	mul.w	r3, r1, r3
 800cb74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d112      	bne.n	800cba0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	f003 020f 	and.w	r2, r3, #15
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4613      	mov	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3318      	adds	r3, #24
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb92:	78f9      	ldrb	r1, [r7, #3]
 800cb94:	2300      	movs	r3, #0
 800cb96:	2200      	movs	r2, #0
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f005 f862 	bl	8011c62 <USBD_LL_Transmit>
 800cb9e:	e01f      	b.n	800cbe0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	33b0      	adds	r3, #176	@ 0xb0
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d010      	beq.n	800cbe0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	33b0      	adds	r3, #176	@ 0xb0
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cbdc:	78fa      	ldrb	r2, [r7, #3]
 800cbde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b084      	sub	sp, #16
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	32b0      	adds	r2, #176	@ 0xb0
 800cc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	32b0      	adds	r2, #176	@ 0xb0
 800cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e01a      	b.n	800cc52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc1c:	78fb      	ldrb	r3, [r7, #3]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f005 f860 	bl	8011ce6 <USBD_LL_GetRxDataSize>
 800cc26:	4602      	mov	r2, r0
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	33b0      	adds	r3, #176	@ 0xb0
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	32b0      	adds	r2, #176	@ 0xb0
 800cc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d101      	bne.n	800cc7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	e024      	b.n	800ccc6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	33b0      	adds	r3, #176	@ 0xb0
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d019      	beq.n	800ccc4 <USBD_CDC_EP0_RxReady+0x6a>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc96:	2bff      	cmp	r3, #255	@ 0xff
 800cc98:	d014      	beq.n	800ccc4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	33b0      	adds	r3, #176	@ 0xb0
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ccb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ccba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	22ff      	movs	r2, #255	@ 0xff
 800ccc0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ccd8:	2182      	movs	r1, #130	@ 0x82
 800ccda:	4818      	ldr	r0, [pc, #96]	@ (800cd3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ccdc:	f000 fd4f 	bl	800d77e <USBD_GetEpDesc>
 800cce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cce2:	2101      	movs	r1, #1
 800cce4:	4815      	ldr	r0, [pc, #84]	@ (800cd3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cce6:	f000 fd4a 	bl	800d77e <USBD_GetEpDesc>
 800ccea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ccec:	2181      	movs	r1, #129	@ 0x81
 800ccee:	4813      	ldr	r0, [pc, #76]	@ (800cd3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ccf0:	f000 fd45 	bl	800d77e <USBD_GetEpDesc>
 800ccf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	2210      	movs	r2, #16
 800cd00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d006      	beq.n	800cd16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd10:	711a      	strb	r2, [r3, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d006      	beq.n	800cd2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd24:	711a      	strb	r2, [r3, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2243      	movs	r2, #67	@ 0x43
 800cd2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cd30:	4b02      	ldr	r3, [pc, #8]	@ (800cd3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	24000054 	.word	0x24000054

0800cd40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd48:	2182      	movs	r1, #130	@ 0x82
 800cd4a:	4818      	ldr	r0, [pc, #96]	@ (800cdac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cd4c:	f000 fd17 	bl	800d77e <USBD_GetEpDesc>
 800cd50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd52:	2101      	movs	r1, #1
 800cd54:	4815      	ldr	r0, [pc, #84]	@ (800cdac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cd56:	f000 fd12 	bl	800d77e <USBD_GetEpDesc>
 800cd5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd5c:	2181      	movs	r1, #129	@ 0x81
 800cd5e:	4813      	ldr	r0, [pc, #76]	@ (800cdac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cd60:	f000 fd0d 	bl	800d77e <USBD_GetEpDesc>
 800cd64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2210      	movs	r2, #16
 800cd70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d006      	beq.n	800cd86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	711a      	strb	r2, [r3, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f042 0202 	orr.w	r2, r2, #2
 800cd84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	711a      	strb	r2, [r3, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f042 0202 	orr.w	r2, r2, #2
 800cd98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2243      	movs	r2, #67	@ 0x43
 800cd9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	@ (800cdac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	24000054 	.word	0x24000054

0800cdb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cdb8:	2182      	movs	r1, #130	@ 0x82
 800cdba:	4818      	ldr	r0, [pc, #96]	@ (800ce1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cdbc:	f000 fcdf 	bl	800d77e <USBD_GetEpDesc>
 800cdc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4815      	ldr	r0, [pc, #84]	@ (800ce1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cdc6:	f000 fcda 	bl	800d77e <USBD_GetEpDesc>
 800cdca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cdcc:	2181      	movs	r1, #129	@ 0x81
 800cdce:	4813      	ldr	r0, [pc, #76]	@ (800ce1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cdd0:	f000 fcd5 	bl	800d77e <USBD_GetEpDesc>
 800cdd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2210      	movs	r2, #16
 800cde0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d006      	beq.n	800cdf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cdf0:	711a      	strb	r2, [r3, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d006      	beq.n	800ce0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce04:	711a      	strb	r2, [r3, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2243      	movs	r2, #67	@ 0x43
 800ce0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce10:	4b02      	ldr	r3, [pc, #8]	@ (800ce1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	24000054 	.word	0x24000054

0800ce20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	220a      	movs	r2, #10
 800ce2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ce2e:	4b03      	ldr	r3, [pc, #12]	@ (800ce3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	24000010 	.word	0x24000010

0800ce40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e009      	b.n	800ce68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	33b0      	adds	r3, #176	@ 0xb0
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	32b0      	adds	r2, #176	@ 0xb0
 800ce8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ce96:	2303      	movs	r3, #3
 800ce98:	e008      	b.n	800ceac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	371c      	adds	r7, #28
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	32b0      	adds	r2, #176	@ 0xb0
 800cecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e004      	b.n	800cee6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	32b0      	adds	r2, #176	@ 0xb0
 800cf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e025      	b.n	800cf66 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d11f      	bne.n	800cf64 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cf2c:	4b10      	ldr	r3, [pc, #64]	@ (800cf70 <USBD_CDC_TransmitPacket+0x7c>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	f003 020f 	and.w	r2, r3, #15
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4403      	add	r3, r0
 800cf46:	3318      	adds	r3, #24
 800cf48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cf4a:	4b09      	ldr	r3, [pc, #36]	@ (800cf70 <USBD_CDC_TransmitPacket+0x7c>)
 800cf4c:	7819      	ldrb	r1, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f004 fe81 	bl	8011c62 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	24000097 	.word	0x24000097

0800cf74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	32b0      	adds	r2, #176	@ 0xb0
 800cf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	32b0      	adds	r2, #176	@ 0xb0
 800cf96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e018      	b.n	800cfd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	7c1b      	ldrb	r3, [r3, #16]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10a      	bne.n	800cfc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cfdc <USBD_CDC_ReceivePacket+0x68>)
 800cfac:	7819      	ldrb	r1, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f004 fe73 	bl	8011ca4 <USBD_LL_PrepareReceive>
 800cfbe:	e008      	b.n	800cfd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cfc0:	4b06      	ldr	r3, [pc, #24]	@ (800cfdc <USBD_CDC_ReceivePacket+0x68>)
 800cfc2:	7819      	ldrb	r1, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfca:	2340      	movs	r3, #64	@ 0x40
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f004 fe69 	bl	8011ca4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	24000098 	.word	0x24000098

0800cfe0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	4613      	mov	r3, r2
 800cfec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cff4:	2303      	movs	r3, #3
 800cff6:	e01f      	b.n	800d038 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d003      	beq.n	800d01e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	79fa      	ldrb	r2, [r7, #7]
 800d02a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f004 fcdf 	bl	80119f0 <USBD_LL_Init>
 800d032:	4603      	mov	r3, r0
 800d034:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d036:	7dfb      	ldrb	r3, [r7, #23]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d101      	bne.n	800d058 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d054:	2303      	movs	r3, #3
 800d056:	e025      	b.n	800d0a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	32ae      	adds	r2, #174	@ 0xae
 800d06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00f      	beq.n	800d094 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	@ 0xae
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d084:	f107 020e 	add.w	r2, r7, #14
 800d088:	4610      	mov	r0, r2
 800d08a:	4798      	blx	r3
 800d08c:	4602      	mov	r2, r0
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f004 fceb 	bl	8011a90 <USBD_LL_Start>
 800d0ba:	4603      	mov	r3, r0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d0cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d009      	beq.n	800d108 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	78fa      	ldrb	r2, [r7, #3]
 800d0fe:	4611      	mov	r1, r2
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	4798      	blx	r3
 800d104:	4603      	mov	r3, r0
 800d106:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d108:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	78fa      	ldrb	r2, [r7, #3]
 800d12c:	4611      	mov	r1, r2
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f001 f936 	bl	800e3ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d16c:	461a      	mov	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d17a:	f003 031f 	and.w	r3, r3, #31
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d01a      	beq.n	800d1b8 <USBD_LL_SetupStage+0x72>
 800d182:	2b02      	cmp	r3, #2
 800d184:	d822      	bhi.n	800d1cc <USBD_LL_SetupStage+0x86>
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <USBD_LL_SetupStage+0x4a>
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d00a      	beq.n	800d1a4 <USBD_LL_SetupStage+0x5e>
 800d18e:	e01d      	b.n	800d1cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fb63 	bl	800d864 <USBD_StdDevReq>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a2:	e020      	b.n	800d1e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fbcb 	bl	800d948 <USBD_StdItfReq>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1b6:	e016      	b.n	800d1e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fc2d 	bl	800da20 <USBD_StdEPReq>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ca:	e00c      	b.n	800d1e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d1d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f004 fcb8 	bl	8011b50 <USBD_LL_StallEP>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e4:	bf00      	nop
  }

  return ret;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d16e      	bne.n	800d2e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d20e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d216:	2b03      	cmp	r3, #3
 800d218:	f040 8098 	bne.w	800d34c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	429a      	cmp	r2, r3
 800d226:	d913      	bls.n	800d250 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	1ad2      	subs	r2, r2, r3
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	68da      	ldr	r2, [r3, #12]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	4293      	cmp	r3, r2
 800d240:	bf28      	it	cs
 800d242:	4613      	movcs	r3, r2
 800d244:	461a      	mov	r2, r3
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f001 f9be 	bl	800e5ca <USBD_CtlContinueRx>
 800d24e:	e07d      	b.n	800d34c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d256:	f003 031f 	and.w	r3, r3, #31
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d014      	beq.n	800d288 <USBD_LL_DataOutStage+0x98>
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d81d      	bhi.n	800d29e <USBD_LL_DataOutStage+0xae>
 800d262:	2b00      	cmp	r3, #0
 800d264:	d002      	beq.n	800d26c <USBD_LL_DataOutStage+0x7c>
 800d266:	2b01      	cmp	r3, #1
 800d268:	d003      	beq.n	800d272 <USBD_LL_DataOutStage+0x82>
 800d26a:	e018      	b.n	800d29e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d26c:	2300      	movs	r3, #0
 800d26e:	75bb      	strb	r3, [r7, #22]
            break;
 800d270:	e018      	b.n	800d2a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	4619      	mov	r1, r3
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f000 fa64 	bl	800d74a <USBD_CoreFindIF>
 800d282:	4603      	mov	r3, r0
 800d284:	75bb      	strb	r3, [r7, #22]
            break;
 800d286:	e00d      	b.n	800d2a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	4619      	mov	r1, r3
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 fa66 	bl	800d764 <USBD_CoreFindEP>
 800d298:	4603      	mov	r3, r0
 800d29a:	75bb      	strb	r3, [r7, #22]
            break;
 800d29c:	e002      	b.n	800d2a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	75bb      	strb	r3, [r7, #22]
            break;
 800d2a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d2a4:	7dbb      	ldrb	r3, [r7, #22]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d119      	bne.n	800d2de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b03      	cmp	r3, #3
 800d2b4:	d113      	bne.n	800d2de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d2b6:	7dba      	ldrb	r2, [r7, #22]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	32ae      	adds	r2, #174	@ 0xae
 800d2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00b      	beq.n	800d2de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d2c6:	7dba      	ldrb	r2, [r7, #22]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d2ce:	7dba      	ldrb	r2, [r7, #22]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	32ae      	adds	r2, #174	@ 0xae
 800d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f001 f984 	bl	800e5ec <USBD_CtlSendStatus>
 800d2e4:	e032      	b.n	800d34c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d2e6:	7afb      	ldrb	r3, [r7, #11]
 800d2e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 fa37 	bl	800d764 <USBD_CoreFindEP>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2fa:	7dbb      	ldrb	r3, [r7, #22]
 800d2fc:	2bff      	cmp	r3, #255	@ 0xff
 800d2fe:	d025      	beq.n	800d34c <USBD_LL_DataOutStage+0x15c>
 800d300:	7dbb      	ldrb	r3, [r7, #22]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d122      	bne.n	800d34c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d117      	bne.n	800d342 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d312:	7dba      	ldrb	r2, [r7, #22]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	32ae      	adds	r2, #174	@ 0xae
 800d318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00f      	beq.n	800d342 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d322:	7dba      	ldrb	r2, [r7, #22]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d32a:	7dba      	ldrb	r2, [r7, #22]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	32ae      	adds	r2, #174	@ 0xae
 800d330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	7afa      	ldrb	r2, [r7, #11]
 800d338:	4611      	mov	r1, r2
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	4798      	blx	r3
 800d33e:	4603      	mov	r3, r0
 800d340:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d348:	7dfb      	ldrb	r3, [r7, #23]
 800d34a:	e000      	b.n	800d34e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	460b      	mov	r3, r1
 800d360:	607a      	str	r2, [r7, #4]
 800d362:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d364:	7afb      	ldrb	r3, [r7, #11]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d16f      	bne.n	800d44a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3314      	adds	r3, #20
 800d36e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d376:	2b02      	cmp	r3, #2
 800d378:	d15a      	bne.n	800d430 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	689a      	ldr	r2, [r3, #8]
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	429a      	cmp	r2, r3
 800d384:	d914      	bls.n	800d3b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	1ad2      	subs	r2, r2, r3
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	461a      	mov	r2, r3
 800d39a:	6879      	ldr	r1, [r7, #4]
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f001 f8e6 	bl	800e56e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2100      	movs	r1, #0
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f004 fc7b 	bl	8011ca4 <USBD_LL_PrepareReceive>
 800d3ae:	e03f      	b.n	800d430 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	68da      	ldr	r2, [r3, #12]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d11c      	bne.n	800d3f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d316      	bcc.n	800d3f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d20f      	bcs.n	800d3f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2100      	movs	r1, #0
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f001 f8c7 	bl	800e56e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f004 fc58 	bl	8011ca4 <USBD_LL_PrepareReceive>
 800d3f4:	e01c      	b.n	800d430 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d10f      	bne.n	800d422 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d009      	beq.n	800d422 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d422:	2180      	movs	r1, #128	@ 0x80
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f004 fb93 	bl	8011b50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f001 f8f1 	bl	800e612 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d03a      	beq.n	800d4b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7ff fe42 	bl	800d0c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d448:	e032      	b.n	800d4b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d44a:	7afb      	ldrb	r3, [r7, #11]
 800d44c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d450:	b2db      	uxtb	r3, r3
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f985 	bl	800d764 <USBD_CoreFindEP>
 800d45a:	4603      	mov	r3, r0
 800d45c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	2bff      	cmp	r3, #255	@ 0xff
 800d462:	d025      	beq.n	800d4b0 <USBD_LL_DataInStage+0x15a>
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d122      	bne.n	800d4b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b03      	cmp	r3, #3
 800d474:	d11c      	bne.n	800d4b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d476:	7dfa      	ldrb	r2, [r7, #23]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	32ae      	adds	r2, #174	@ 0xae
 800d47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d014      	beq.n	800d4b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d486:	7dfa      	ldrb	r2, [r7, #23]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d48e:	7dfa      	ldrb	r2, [r7, #23]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	32ae      	adds	r2, #174	@ 0xae
 800d494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	7afa      	ldrb	r2, [r7, #11]
 800d49c:	4611      	mov	r1, r2
 800d49e:	68f8      	ldr	r0, [r7, #12]
 800d4a0:	4798      	blx	r3
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d4a6:	7dbb      	ldrb	r3, [r7, #22]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d4ac:	7dbb      	ldrb	r3, [r7, #22]
 800d4ae:	e000      	b.n	800d4b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d014      	beq.n	800d520 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00e      	beq.n	800d520 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	6852      	ldr	r2, [r2, #4]
 800d50e:	b2d2      	uxtb	r2, r2
 800d510:	4611      	mov	r1, r2
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	4798      	blx	r3
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d51c:	2303      	movs	r3, #3
 800d51e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	2200      	movs	r2, #0
 800d524:	2100      	movs	r1, #0
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f004 facd 	bl	8011ac6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2240      	movs	r2, #64	@ 0x40
 800d538:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d53c:	2340      	movs	r3, #64	@ 0x40
 800d53e:	2200      	movs	r2, #0
 800d540:	2180      	movs	r1, #128	@ 0x80
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f004 fabf 	bl	8011ac6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2240      	movs	r2, #64	@ 0x40
 800d552:	621a      	str	r2, [r3, #32]

  return ret;
 800d554:	7bfb      	ldrb	r3, [r7, #15]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d55e:	b480      	push	{r7}
 800d560:	b083      	sub	sp, #12
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	460b      	mov	r3, r1
 800d568:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	78fa      	ldrb	r2, [r7, #3]
 800d56e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d57e:	b480      	push	{r7}
 800d580:	b083      	sub	sp, #12
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b04      	cmp	r3, #4
 800d590:	d006      	beq.n	800d5a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2204      	movs	r2, #4
 800d5a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d106      	bne.n	800d5d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	d110      	bne.n	800d61c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d005      	beq.n	800d61c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b082      	sub	sp, #8
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	460b      	mov	r3, r1
 800d630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	32ae      	adds	r2, #174	@ 0xae
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d644:	2303      	movs	r3, #3
 800d646:	e01c      	b.n	800d682 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b03      	cmp	r3, #3
 800d652:	d115      	bne.n	800d680 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	32ae      	adds	r2, #174	@ 0xae
 800d65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d662:	6a1b      	ldr	r3, [r3, #32]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	32ae      	adds	r2, #174	@ 0xae
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	78fa      	ldrb	r2, [r7, #3]
 800d67a:	4611      	mov	r1, r2
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	32ae      	adds	r2, #174	@ 0xae
 800d6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e01c      	b.n	800d6e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b03      	cmp	r3, #3
 800d6b6:	d115      	bne.n	800d6e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	32ae      	adds	r2, #174	@ 0xae
 800d6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00b      	beq.n	800d6e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	32ae      	adds	r2, #174	@ 0xae
 800d6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6dc:	78fa      	ldrb	r2, [r7, #3]
 800d6de:	4611      	mov	r1, r2
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00e      	beq.n	800d740 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	6852      	ldr	r2, [r2, #4]
 800d72e:	b2d2      	uxtb	r2, r2
 800d730:	4611      	mov	r1, r2
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	4798      	blx	r3
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d73c:	2303      	movs	r3, #3
 800d73e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	460b      	mov	r3, r1
 800d754:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d756:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d770:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d772:	4618      	mov	r0, r3
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b086      	sub	sp, #24
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	460b      	mov	r3, r1
 800d788:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d792:	2300      	movs	r3, #0
 800d794:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	7812      	ldrb	r2, [r2, #0]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d91f      	bls.n	800d7e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d7aa:	e013      	b.n	800d7d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d7ac:	f107 030a 	add.w	r3, r7, #10
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6978      	ldr	r0, [r7, #20]
 800d7b4:	f000 f81b 	bl	800d7ee <USBD_GetNextDesc>
 800d7b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	785b      	ldrb	r3, [r3, #1]
 800d7be:	2b05      	cmp	r3, #5
 800d7c0:	d108      	bne.n	800d7d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	789b      	ldrb	r3, [r3, #2]
 800d7ca:	78fa      	ldrb	r2, [r7, #3]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d008      	beq.n	800d7e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	885b      	ldrh	r3, [r3, #2]
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	897b      	ldrh	r3, [r7, #10]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d8e5      	bhi.n	800d7ac <USBD_GetEpDesc+0x2e>
 800d7e0:	e000      	b.n	800d7e4 <USBD_GetEpDesc+0x66>
          break;
 800d7e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d7e4:	693b      	ldr	r3, [r7, #16]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d7ee:	b480      	push	{r7}
 800d7f0:	b085      	sub	sp, #20
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	881b      	ldrh	r3, [r3, #0]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	7812      	ldrb	r2, [r2, #0]
 800d804:	4413      	add	r3, r2
 800d806:	b29a      	uxth	r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4413      	add	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d818:	68fb      	ldr	r3, [r7, #12]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d826:	b480      	push	{r7}
 800d828:	b087      	sub	sp, #28
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	3301      	adds	r3, #1
 800d83c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d844:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d848:	021b      	lsls	r3, r3, #8
 800d84a:	b21a      	sxth	r2, r3
 800d84c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d850:	4313      	orrs	r3, r2
 800d852:	b21b      	sxth	r3, r3
 800d854:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d856:	89fb      	ldrh	r3, [r7, #14]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	371c      	adds	r7, #28
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d87a:	2b40      	cmp	r3, #64	@ 0x40
 800d87c:	d005      	beq.n	800d88a <USBD_StdDevReq+0x26>
 800d87e:	2b40      	cmp	r3, #64	@ 0x40
 800d880:	d857      	bhi.n	800d932 <USBD_StdDevReq+0xce>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00f      	beq.n	800d8a6 <USBD_StdDevReq+0x42>
 800d886:	2b20      	cmp	r3, #32
 800d888:	d153      	bne.n	800d932 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	32ae      	adds	r2, #174	@ 0xae
 800d894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	4798      	blx	r3
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a4:	e04a      	b.n	800d93c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	785b      	ldrb	r3, [r3, #1]
 800d8aa:	2b09      	cmp	r3, #9
 800d8ac:	d83b      	bhi.n	800d926 <USBD_StdDevReq+0xc2>
 800d8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b4 <USBD_StdDevReq+0x50>)
 800d8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b4:	0800d909 	.word	0x0800d909
 800d8b8:	0800d91d 	.word	0x0800d91d
 800d8bc:	0800d927 	.word	0x0800d927
 800d8c0:	0800d913 	.word	0x0800d913
 800d8c4:	0800d927 	.word	0x0800d927
 800d8c8:	0800d8e7 	.word	0x0800d8e7
 800d8cc:	0800d8dd 	.word	0x0800d8dd
 800d8d0:	0800d927 	.word	0x0800d927
 800d8d4:	0800d8ff 	.word	0x0800d8ff
 800d8d8:	0800d8f1 	.word	0x0800d8f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fa3c 	bl	800dd5c <USBD_GetDescriptor>
          break;
 800d8e4:	e024      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d8e6:	6839      	ldr	r1, [r7, #0]
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 fbcb 	bl	800e084 <USBD_SetAddress>
          break;
 800d8ee:	e01f      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fc0a 	bl	800e10c <USBD_SetConfig>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d8fc:	e018      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fcad 	bl	800e260 <USBD_GetConfig>
          break;
 800d906:	e013      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fcde 	bl	800e2cc <USBD_GetStatus>
          break;
 800d910:	e00e      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fd0d 	bl	800e334 <USBD_SetFeature>
          break;
 800d91a:	e009      	b.n	800d930 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fd31 	bl	800e386 <USBD_ClrFeature>
          break;
 800d924:	e004      	b.n	800d930 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fd88 	bl	800e43e <USBD_CtlError>
          break;
 800d92e:	bf00      	nop
      }
      break;
 800d930:	e004      	b.n	800d93c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fd82 	bl	800e43e <USBD_CtlError>
      break;
 800d93a:	bf00      	nop
  }

  return ret;
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop

0800d948 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d95e:	2b40      	cmp	r3, #64	@ 0x40
 800d960:	d005      	beq.n	800d96e <USBD_StdItfReq+0x26>
 800d962:	2b40      	cmp	r3, #64	@ 0x40
 800d964:	d852      	bhi.n	800da0c <USBD_StdItfReq+0xc4>
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <USBD_StdItfReq+0x26>
 800d96a:	2b20      	cmp	r3, #32
 800d96c:	d14e      	bne.n	800da0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d974:	b2db      	uxtb	r3, r3
 800d976:	3b01      	subs	r3, #1
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d840      	bhi.n	800d9fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	889b      	ldrh	r3, [r3, #4]
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b01      	cmp	r3, #1
 800d984:	d836      	bhi.n	800d9f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	889b      	ldrh	r3, [r3, #4]
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7ff fedb 	bl	800d74a <USBD_CoreFindIF>
 800d994:	4603      	mov	r3, r0
 800d996:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d998:	7bbb      	ldrb	r3, [r7, #14]
 800d99a:	2bff      	cmp	r3, #255	@ 0xff
 800d99c:	d01d      	beq.n	800d9da <USBD_StdItfReq+0x92>
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d11a      	bne.n	800d9da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d9a4:	7bba      	ldrb	r2, [r7, #14]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	32ae      	adds	r2, #174	@ 0xae
 800d9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00f      	beq.n	800d9d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d9b4:	7bba      	ldrb	r2, [r7, #14]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d9bc:	7bba      	ldrb	r2, [r7, #14]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	32ae      	adds	r2, #174	@ 0xae
 800d9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	4798      	blx	r3
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d9d2:	e004      	b.n	800d9de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d9d8:	e001      	b.n	800d9de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d9da:	2303      	movs	r3, #3
 800d9dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	88db      	ldrh	r3, [r3, #6]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d110      	bne.n	800da08 <USBD_StdItfReq+0xc0>
 800d9e6:	7bfb      	ldrb	r3, [r7, #15]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10d      	bne.n	800da08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fdfd 	bl	800e5ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d9f2:	e009      	b.n	800da08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d9f4:	6839      	ldr	r1, [r7, #0]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fd21 	bl	800e43e <USBD_CtlError>
          break;
 800d9fc:	e004      	b.n	800da08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d9fe:	6839      	ldr	r1, [r7, #0]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fd1c 	bl	800e43e <USBD_CtlError>
          break;
 800da06:	e000      	b.n	800da0a <USBD_StdItfReq+0xc2>
          break;
 800da08:	bf00      	nop
      }
      break;
 800da0a:	e004      	b.n	800da16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 fd15 	bl	800e43e <USBD_CtlError>
      break;
 800da14:	bf00      	nop
  }

  return ret;
 800da16:	7bfb      	ldrb	r3, [r7, #15]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	889b      	ldrh	r3, [r3, #4]
 800da32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da3c:	2b40      	cmp	r3, #64	@ 0x40
 800da3e:	d007      	beq.n	800da50 <USBD_StdEPReq+0x30>
 800da40:	2b40      	cmp	r3, #64	@ 0x40
 800da42:	f200 817f 	bhi.w	800dd44 <USBD_StdEPReq+0x324>
 800da46:	2b00      	cmp	r3, #0
 800da48:	d02a      	beq.n	800daa0 <USBD_StdEPReq+0x80>
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	f040 817a 	bne.w	800dd44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	4619      	mov	r1, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7ff fe85 	bl	800d764 <USBD_CoreFindEP>
 800da5a:	4603      	mov	r3, r0
 800da5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da5e:	7b7b      	ldrb	r3, [r7, #13]
 800da60:	2bff      	cmp	r3, #255	@ 0xff
 800da62:	f000 8174 	beq.w	800dd4e <USBD_StdEPReq+0x32e>
 800da66:	7b7b      	ldrb	r3, [r7, #13]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f040 8170 	bne.w	800dd4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800da6e:	7b7a      	ldrb	r2, [r7, #13]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800da76:	7b7a      	ldrb	r2, [r7, #13]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	32ae      	adds	r2, #174	@ 0xae
 800da7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 8163 	beq.w	800dd4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800da88:	7b7a      	ldrb	r2, [r7, #13]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	32ae      	adds	r2, #174	@ 0xae
 800da8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	4798      	blx	r3
 800da9a:	4603      	mov	r3, r0
 800da9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800da9e:	e156      	b.n	800dd4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d008      	beq.n	800daba <USBD_StdEPReq+0x9a>
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	f300 8145 	bgt.w	800dd38 <USBD_StdEPReq+0x318>
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 809b 	beq.w	800dbea <USBD_StdEPReq+0x1ca>
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d03c      	beq.n	800db32 <USBD_StdEPReq+0x112>
 800dab8:	e13e      	b.n	800dd38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d002      	beq.n	800dacc <USBD_StdEPReq+0xac>
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d016      	beq.n	800daf8 <USBD_StdEPReq+0xd8>
 800daca:	e02c      	b.n	800db26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00d      	beq.n	800daee <USBD_StdEPReq+0xce>
 800dad2:	7bbb      	ldrb	r3, [r7, #14]
 800dad4:	2b80      	cmp	r3, #128	@ 0x80
 800dad6:	d00a      	beq.n	800daee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f004 f837 	bl	8011b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dae2:	2180      	movs	r1, #128	@ 0x80
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f004 f833 	bl	8011b50 <USBD_LL_StallEP>
 800daea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800daec:	e020      	b.n	800db30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fca4 	bl	800e43e <USBD_CtlError>
              break;
 800daf6:	e01b      	b.n	800db30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	885b      	ldrh	r3, [r3, #2]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10e      	bne.n	800db1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800db00:	7bbb      	ldrb	r3, [r7, #14]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00b      	beq.n	800db1e <USBD_StdEPReq+0xfe>
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	2b80      	cmp	r3, #128	@ 0x80
 800db0a:	d008      	beq.n	800db1e <USBD_StdEPReq+0xfe>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	88db      	ldrh	r3, [r3, #6]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d104      	bne.n	800db1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800db14:	7bbb      	ldrb	r3, [r7, #14]
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f004 f819 	bl	8011b50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fd64 	bl	800e5ec <USBD_CtlSendStatus>

              break;
 800db24:	e004      	b.n	800db30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fc88 	bl	800e43e <USBD_CtlError>
              break;
 800db2e:	bf00      	nop
          }
          break;
 800db30:	e107      	b.n	800dd42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d002      	beq.n	800db44 <USBD_StdEPReq+0x124>
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d016      	beq.n	800db70 <USBD_StdEPReq+0x150>
 800db42:	e04b      	b.n	800dbdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db44:	7bbb      	ldrb	r3, [r7, #14]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00d      	beq.n	800db66 <USBD_StdEPReq+0x146>
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
 800db4c:	2b80      	cmp	r3, #128	@ 0x80
 800db4e:	d00a      	beq.n	800db66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f003 fffb 	bl	8011b50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db5a:	2180      	movs	r1, #128	@ 0x80
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f003 fff7 	bl	8011b50 <USBD_LL_StallEP>
 800db62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db64:	e040      	b.n	800dbe8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800db66:	6839      	ldr	r1, [r7, #0]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fc68 	bl	800e43e <USBD_CtlError>
              break;
 800db6e:	e03b      	b.n	800dbe8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	885b      	ldrh	r3, [r3, #2]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d136      	bne.n	800dbe6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db78:	7bbb      	ldrb	r3, [r7, #14]
 800db7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d004      	beq.n	800db8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f004 f801 	bl	8011b8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 fd2d 	bl	800e5ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800db92:	7bbb      	ldrb	r3, [r7, #14]
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7ff fde4 	bl	800d764 <USBD_CoreFindEP>
 800db9c:	4603      	mov	r3, r0
 800db9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dba0:	7b7b      	ldrb	r3, [r7, #13]
 800dba2:	2bff      	cmp	r3, #255	@ 0xff
 800dba4:	d01f      	beq.n	800dbe6 <USBD_StdEPReq+0x1c6>
 800dba6:	7b7b      	ldrb	r3, [r7, #13]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d11c      	bne.n	800dbe6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dbac:	7b7a      	ldrb	r2, [r7, #13]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dbb4:	7b7a      	ldrb	r2, [r7, #13]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	32ae      	adds	r2, #174	@ 0xae
 800dbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d010      	beq.n	800dbe6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dbc4:	7b7a      	ldrb	r2, [r7, #13]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	32ae      	adds	r2, #174	@ 0xae
 800dbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	4798      	blx	r3
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dbda:	e004      	b.n	800dbe6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fc2d 	bl	800e43e <USBD_CtlError>
              break;
 800dbe4:	e000      	b.n	800dbe8 <USBD_StdEPReq+0x1c8>
              break;
 800dbe6:	bf00      	nop
          }
          break;
 800dbe8:	e0ab      	b.n	800dd42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d002      	beq.n	800dbfc <USBD_StdEPReq+0x1dc>
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d032      	beq.n	800dc60 <USBD_StdEPReq+0x240>
 800dbfa:	e097      	b.n	800dd2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d007      	beq.n	800dc12 <USBD_StdEPReq+0x1f2>
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b80      	cmp	r3, #128	@ 0x80
 800dc06:	d004      	beq.n	800dc12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fc17 	bl	800e43e <USBD_CtlError>
                break;
 800dc10:	e091      	b.n	800dd36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da0b      	bge.n	800dc32 <USBD_StdEPReq+0x212>
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	3310      	adds	r3, #16
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	3304      	adds	r3, #4
 800dc30:	e00b      	b.n	800dc4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc32:	7bbb      	ldrb	r3, [r7, #14]
 800dc34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	4413      	add	r3, r2
 800dc48:	3304      	adds	r3, #4
 800dc4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2202      	movs	r2, #2
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fc6d 	bl	800e538 <USBD_CtlSendData>
              break;
 800dc5e:	e06a      	b.n	800dd36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dc60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	da11      	bge.n	800dc8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	f003 020f 	and.w	r2, r3, #15
 800dc6e:	6879      	ldr	r1, [r7, #4]
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	440b      	add	r3, r1
 800dc7a:	3324      	adds	r3, #36	@ 0x24
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d117      	bne.n	800dcb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fbda 	bl	800e43e <USBD_CtlError>
                  break;
 800dc8a:	e054      	b.n	800dd36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	f003 020f 	and.w	r2, r3, #15
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	4613      	mov	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	440b      	add	r3, r1
 800dc9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dca2:	881b      	ldrh	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fbc7 	bl	800e43e <USBD_CtlError>
                  break;
 800dcb0:	e041      	b.n	800dd36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	da0b      	bge.n	800dcd2 <USBD_StdEPReq+0x2b2>
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
 800dcbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4413      	add	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	3310      	adds	r3, #16
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	4413      	add	r3, r2
 800dcce:	3304      	adds	r3, #4
 800dcd0:	e00b      	b.n	800dcea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcd8:	4613      	mov	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	009b      	lsls	r3, r3, #2
 800dce0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	4413      	add	r3, r2
 800dce8:	3304      	adds	r3, #4
 800dcea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dcec:	7bbb      	ldrb	r3, [r7, #14]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <USBD_StdEPReq+0x2d8>
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b80      	cmp	r3, #128	@ 0x80
 800dcf6:	d103      	bne.n	800dd00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	e00e      	b.n	800dd1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f003 ff61 	bl	8011bcc <USBD_LL_IsStallEP>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d003      	beq.n	800dd18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2201      	movs	r2, #1
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	e002      	b.n	800dd1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2202      	movs	r2, #2
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fc07 	bl	800e538 <USBD_CtlSendData>
              break;
 800dd2a:	e004      	b.n	800dd36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fb85 	bl	800e43e <USBD_CtlError>
              break;
 800dd34:	bf00      	nop
          }
          break;
 800dd36:	e004      	b.n	800dd42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fb7f 	bl	800e43e <USBD_CtlError>
          break;
 800dd40:	bf00      	nop
      }
      break;
 800dd42:	e005      	b.n	800dd50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fb79 	bl	800e43e <USBD_CtlError>
      break;
 800dd4c:	e000      	b.n	800dd50 <USBD_StdEPReq+0x330>
      break;
 800dd4e:	bf00      	nop
  }

  return ret;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	885b      	ldrh	r3, [r3, #2]
 800dd76:	0a1b      	lsrs	r3, r3, #8
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	2b0e      	cmp	r3, #14
 800dd7e:	f200 8152 	bhi.w	800e026 <USBD_GetDescriptor+0x2ca>
 800dd82:	a201      	add	r2, pc, #4	@ (adr r2, 800dd88 <USBD_GetDescriptor+0x2c>)
 800dd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd88:	0800ddf9 	.word	0x0800ddf9
 800dd8c:	0800de11 	.word	0x0800de11
 800dd90:	0800de51 	.word	0x0800de51
 800dd94:	0800e027 	.word	0x0800e027
 800dd98:	0800e027 	.word	0x0800e027
 800dd9c:	0800dfc7 	.word	0x0800dfc7
 800dda0:	0800dff3 	.word	0x0800dff3
 800dda4:	0800e027 	.word	0x0800e027
 800dda8:	0800e027 	.word	0x0800e027
 800ddac:	0800e027 	.word	0x0800e027
 800ddb0:	0800e027 	.word	0x0800e027
 800ddb4:	0800e027 	.word	0x0800e027
 800ddb8:	0800e027 	.word	0x0800e027
 800ddbc:	0800e027 	.word	0x0800e027
 800ddc0:	0800ddc5 	.word	0x0800ddc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00b      	beq.n	800dde8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddd6:	69db      	ldr	r3, [r3, #28]
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	7c12      	ldrb	r2, [r2, #16]
 800dddc:	f107 0108 	add.w	r1, r7, #8
 800dde0:	4610      	mov	r0, r2
 800dde2:	4798      	blx	r3
 800dde4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dde6:	e126      	b.n	800e036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fb27 	bl	800e43e <USBD_CtlError>
        err++;
 800ddf0:	7afb      	ldrb	r3, [r7, #11]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	72fb      	strb	r3, [r7, #11]
      break;
 800ddf6:	e11e      	b.n	800e036 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	7c12      	ldrb	r2, [r2, #16]
 800de04:	f107 0108 	add.w	r1, r7, #8
 800de08:	4610      	mov	r0, r2
 800de0a:	4798      	blx	r3
 800de0c:	60f8      	str	r0, [r7, #12]
      break;
 800de0e:	e112      	b.n	800e036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	7c1b      	ldrb	r3, [r3, #16]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10d      	bne.n	800de34 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de20:	f107 0208 	add.w	r2, r7, #8
 800de24:	4610      	mov	r0, r2
 800de26:	4798      	blx	r3
 800de28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3301      	adds	r3, #1
 800de2e:	2202      	movs	r2, #2
 800de30:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800de32:	e100      	b.n	800e036 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	f107 0208 	add.w	r2, r7, #8
 800de40:	4610      	mov	r0, r2
 800de42:	4798      	blx	r3
 800de44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3301      	adds	r3, #1
 800de4a:	2202      	movs	r2, #2
 800de4c:	701a      	strb	r2, [r3, #0]
      break;
 800de4e:	e0f2      	b.n	800e036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	885b      	ldrh	r3, [r3, #2]
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b05      	cmp	r3, #5
 800de58:	f200 80ac 	bhi.w	800dfb4 <USBD_GetDescriptor+0x258>
 800de5c:	a201      	add	r2, pc, #4	@ (adr r2, 800de64 <USBD_GetDescriptor+0x108>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800de7d 	.word	0x0800de7d
 800de68:	0800deb1 	.word	0x0800deb1
 800de6c:	0800dee5 	.word	0x0800dee5
 800de70:	0800df19 	.word	0x0800df19
 800de74:	0800df4d 	.word	0x0800df4d
 800de78:	0800df81 	.word	0x0800df81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	7c12      	ldrb	r2, [r2, #16]
 800de94:	f107 0108 	add.w	r1, r7, #8
 800de98:	4610      	mov	r0, r2
 800de9a:	4798      	blx	r3
 800de9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de9e:	e091      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 facb 	bl	800e43e <USBD_CtlError>
            err++;
 800dea8:	7afb      	ldrb	r3, [r7, #11]
 800deaa:	3301      	adds	r3, #1
 800deac:	72fb      	strb	r3, [r7, #11]
          break;
 800deae:	e089      	b.n	800dfc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00b      	beq.n	800ded4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	7c12      	ldrb	r2, [r2, #16]
 800dec8:	f107 0108 	add.w	r1, r7, #8
 800decc:	4610      	mov	r0, r2
 800dece:	4798      	blx	r3
 800ded0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ded2:	e077      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fab1 	bl	800e43e <USBD_CtlError>
            err++;
 800dedc:	7afb      	ldrb	r3, [r7, #11]
 800dede:	3301      	adds	r3, #1
 800dee0:	72fb      	strb	r3, [r7, #11]
          break;
 800dee2:	e06f      	b.n	800dfc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00b      	beq.n	800df08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	7c12      	ldrb	r2, [r2, #16]
 800defc:	f107 0108 	add.w	r1, r7, #8
 800df00:	4610      	mov	r0, r2
 800df02:	4798      	blx	r3
 800df04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df06:	e05d      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 fa97 	bl	800e43e <USBD_CtlError>
            err++;
 800df10:	7afb      	ldrb	r3, [r7, #11]
 800df12:	3301      	adds	r3, #1
 800df14:	72fb      	strb	r3, [r7, #11]
          break;
 800df16:	e055      	b.n	800dfc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00b      	beq.n	800df3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	7c12      	ldrb	r2, [r2, #16]
 800df30:	f107 0108 	add.w	r1, r7, #8
 800df34:	4610      	mov	r0, r2
 800df36:	4798      	blx	r3
 800df38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df3a:	e043      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 fa7d 	bl	800e43e <USBD_CtlError>
            err++;
 800df44:	7afb      	ldrb	r3, [r7, #11]
 800df46:	3301      	adds	r3, #1
 800df48:	72fb      	strb	r3, [r7, #11]
          break;
 800df4a:	e03b      	b.n	800dfc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00b      	beq.n	800df70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	7c12      	ldrb	r2, [r2, #16]
 800df64:	f107 0108 	add.w	r1, r7, #8
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
 800df6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df6e:	e029      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fa63 	bl	800e43e <USBD_CtlError>
            err++;
 800df78:	7afb      	ldrb	r3, [r7, #11]
 800df7a:	3301      	adds	r3, #1
 800df7c:	72fb      	strb	r3, [r7, #11]
          break;
 800df7e:	e021      	b.n	800dfc4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	7c12      	ldrb	r2, [r2, #16]
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
 800dfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfa2:	e00f      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fa49 	bl	800e43e <USBD_CtlError>
            err++;
 800dfac:	7afb      	ldrb	r3, [r7, #11]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfb2:	e007      	b.n	800dfc4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fa41 	bl	800e43e <USBD_CtlError>
          err++;
 800dfbc:	7afb      	ldrb	r3, [r7, #11]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dfc2:	bf00      	nop
      }
      break;
 800dfc4:	e037      	b.n	800e036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	7c1b      	ldrb	r3, [r3, #16]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d109      	bne.n	800dfe2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfd6:	f107 0208 	add.w	r2, r7, #8
 800dfda:	4610      	mov	r0, r2
 800dfdc:	4798      	blx	r3
 800dfde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfe0:	e029      	b.n	800e036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dfe2:	6839      	ldr	r1, [r7, #0]
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f000 fa2a 	bl	800e43e <USBD_CtlError>
        err++;
 800dfea:	7afb      	ldrb	r3, [r7, #11]
 800dfec:	3301      	adds	r3, #1
 800dfee:	72fb      	strb	r3, [r7, #11]
      break;
 800dff0:	e021      	b.n	800e036 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	7c1b      	ldrb	r3, [r3, #16]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10d      	bne.n	800e016 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	f107 0208 	add.w	r2, r7, #8
 800e006:	4610      	mov	r0, r2
 800e008:	4798      	blx	r3
 800e00a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3301      	adds	r3, #1
 800e010:	2207      	movs	r2, #7
 800e012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e014:	e00f      	b.n	800e036 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fa10 	bl	800e43e <USBD_CtlError>
        err++;
 800e01e:	7afb      	ldrb	r3, [r7, #11]
 800e020:	3301      	adds	r3, #1
 800e022:	72fb      	strb	r3, [r7, #11]
      break;
 800e024:	e007      	b.n	800e036 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fa08 	bl	800e43e <USBD_CtlError>
      err++;
 800e02e:	7afb      	ldrb	r3, [r7, #11]
 800e030:	3301      	adds	r3, #1
 800e032:	72fb      	strb	r3, [r7, #11]
      break;
 800e034:	bf00      	nop
  }

  if (err != 0U)
 800e036:	7afb      	ldrb	r3, [r7, #11]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11e      	bne.n	800e07a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	88db      	ldrh	r3, [r3, #6]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d016      	beq.n	800e072 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e044:	893b      	ldrh	r3, [r7, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00e      	beq.n	800e068 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	88da      	ldrh	r2, [r3, #6]
 800e04e:	893b      	ldrh	r3, [r7, #8]
 800e050:	4293      	cmp	r3, r2
 800e052:	bf28      	it	cs
 800e054:	4613      	movcs	r3, r2
 800e056:	b29b      	uxth	r3, r3
 800e058:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e05a:	893b      	ldrh	r3, [r7, #8]
 800e05c:	461a      	mov	r2, r3
 800e05e:	68f9      	ldr	r1, [r7, #12]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 fa69 	bl	800e538 <USBD_CtlSendData>
 800e066:	e009      	b.n	800e07c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f9e7 	bl	800e43e <USBD_CtlError>
 800e070:	e004      	b.n	800e07c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 faba 	bl	800e5ec <USBD_CtlSendStatus>
 800e078:	e000      	b.n	800e07c <USBD_GetDescriptor+0x320>
    return;
 800e07a:	bf00      	nop
  }
}
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop

0800e084 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	889b      	ldrh	r3, [r3, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d131      	bne.n	800e0fa <USBD_SetAddress+0x76>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	88db      	ldrh	r3, [r3, #6]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d12d      	bne.n	800e0fa <USBD_SetAddress+0x76>
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	885b      	ldrh	r3, [r3, #2]
 800e0a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e0a4:	d829      	bhi.n	800e0fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	885b      	ldrh	r3, [r3, #2]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d104      	bne.n	800e0c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f9bc 	bl	800e43e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c6:	e01d      	b.n	800e104 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7bfa      	ldrb	r2, [r7, #15]
 800e0cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f003 fda5 	bl	8011c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fa86 	bl	800e5ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d004      	beq.n	800e0f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ee:	e009      	b.n	800e104 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0f8:	e004      	b.n	800e104 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 f99e 	bl	800e43e <USBD_CtlError>
  }
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e116:	2300      	movs	r3, #0
 800e118:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	885b      	ldrh	r3, [r3, #2]
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	4b4e      	ldr	r3, [pc, #312]	@ (800e25c <USBD_SetConfig+0x150>)
 800e122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e124:	4b4d      	ldr	r3, [pc, #308]	@ (800e25c <USBD_SetConfig+0x150>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d905      	bls.n	800e138 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f985 	bl	800e43e <USBD_CtlError>
    return USBD_FAIL;
 800e134:	2303      	movs	r3, #3
 800e136:	e08c      	b.n	800e252 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b02      	cmp	r3, #2
 800e142:	d002      	beq.n	800e14a <USBD_SetConfig+0x3e>
 800e144:	2b03      	cmp	r3, #3
 800e146:	d029      	beq.n	800e19c <USBD_SetConfig+0x90>
 800e148:	e075      	b.n	800e236 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e14a:	4b44      	ldr	r3, [pc, #272]	@ (800e25c <USBD_SetConfig+0x150>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d020      	beq.n	800e194 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e152:	4b42      	ldr	r3, [pc, #264]	@ (800e25c <USBD_SetConfig+0x150>)
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	461a      	mov	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e15c:	4b3f      	ldr	r3, [pc, #252]	@ (800e25c <USBD_SetConfig+0x150>)
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7fe ffb9 	bl	800d0da <USBD_SetClassConfig>
 800e168:	4603      	mov	r3, r0
 800e16a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e16c:	7bfb      	ldrb	r3, [r7, #15]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d008      	beq.n	800e184 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f962 	bl	800e43e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2202      	movs	r2, #2
 800e17e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e182:	e065      	b.n	800e250 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fa31 	bl	800e5ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2203      	movs	r2, #3
 800e18e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e192:	e05d      	b.n	800e250 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fa29 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e19a:	e059      	b.n	800e250 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e19c:	4b2f      	ldr	r3, [pc, #188]	@ (800e25c <USBD_SetConfig+0x150>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d112      	bne.n	800e1ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2202      	movs	r2, #2
 800e1a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e1ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e25c <USBD_SetConfig+0x150>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e1b6:	4b29      	ldr	r3, [pc, #164]	@ (800e25c <USBD_SetConfig+0x150>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7fe ffa8 	bl	800d112 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 fa12 	bl	800e5ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e1c8:	e042      	b.n	800e250 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e1ca:	4b24      	ldr	r3, [pc, #144]	@ (800e25c <USBD_SetConfig+0x150>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d02a      	beq.n	800e22e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7fe ff96 	bl	800d112 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e1e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e25c <USBD_SetConfig+0x150>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e25c <USBD_SetConfig+0x150>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7fe ff6f 	bl	800d0da <USBD_SetClassConfig>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00f      	beq.n	800e226 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f918 	bl	800e43e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	b2db      	uxtb	r3, r3
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fe ff7b 	bl	800d112 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e224:	e014      	b.n	800e250 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f9e0 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e22c:	e010      	b.n	800e250 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f9dc 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e234:	e00c      	b.n	800e250 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f900 	bl	800e43e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e23e:	4b07      	ldr	r3, [pc, #28]	@ (800e25c <USBD_SetConfig+0x150>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	4619      	mov	r1, r3
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7fe ff64 	bl	800d112 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e24a:	2303      	movs	r3, #3
 800e24c:	73fb      	strb	r3, [r7, #15]
      break;
 800e24e:	bf00      	nop
  }

  return ret;
 800e250:	7bfb      	ldrb	r3, [r7, #15]
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	2400035c 	.word	0x2400035c

0800e260 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	88db      	ldrh	r3, [r3, #6]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d004      	beq.n	800e27c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f8e2 	bl	800e43e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e27a:	e023      	b.n	800e2c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e282:	b2db      	uxtb	r3, r3
 800e284:	2b02      	cmp	r3, #2
 800e286:	dc02      	bgt.n	800e28e <USBD_GetConfig+0x2e>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dc03      	bgt.n	800e294 <USBD_GetConfig+0x34>
 800e28c:	e015      	b.n	800e2ba <USBD_GetConfig+0x5a>
 800e28e:	2b03      	cmp	r3, #3
 800e290:	d00b      	beq.n	800e2aa <USBD_GetConfig+0x4a>
 800e292:	e012      	b.n	800e2ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	3308      	adds	r3, #8
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f948 	bl	800e538 <USBD_CtlSendData>
        break;
 800e2a8:	e00c      	b.n	800e2c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f940 	bl	800e538 <USBD_CtlSendData>
        break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f8be 	bl	800e43e <USBD_CtlError>
        break;
 800e2c2:	bf00      	nop
}
 800e2c4:	bf00      	nop
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d81e      	bhi.n	800e322 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	88db      	ldrh	r3, [r3, #6]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d004      	beq.n	800e2f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f8a5 	bl	800e43e <USBD_CtlError>
        break;
 800e2f4:	e01a      	b.n	800e32c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e302:	2b00      	cmp	r3, #0
 800e304:	d005      	beq.n	800e312 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	f043 0202 	orr.w	r2, r3, #2
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	330c      	adds	r3, #12
 800e316:	2202      	movs	r2, #2
 800e318:	4619      	mov	r1, r3
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f90c 	bl	800e538 <USBD_CtlSendData>
      break;
 800e320:	e004      	b.n	800e32c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f88a 	bl	800e43e <USBD_CtlError>
      break;
 800e32a:	bf00      	nop
  }
}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	885b      	ldrh	r3, [r3, #2]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d107      	bne.n	800e356 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2201      	movs	r2, #1
 800e34a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f94c 	bl	800e5ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e354:	e013      	b.n	800e37e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	885b      	ldrh	r3, [r3, #2]
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d10b      	bne.n	800e376 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	889b      	ldrh	r3, [r3, #4]
 800e362:	0a1b      	lsrs	r3, r3, #8
 800e364:	b29b      	uxth	r3, r3
 800e366:	b2da      	uxtb	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f93c 	bl	800e5ec <USBD_CtlSendStatus>
}
 800e374:	e003      	b.n	800e37e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e376:	6839      	ldr	r1, [r7, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f860 	bl	800e43e <USBD_CtlError>
}
 800e37e:	bf00      	nop
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b082      	sub	sp, #8
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e396:	b2db      	uxtb	r3, r3
 800e398:	3b01      	subs	r3, #1
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d80b      	bhi.n	800e3b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	885b      	ldrh	r3, [r3, #2]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d10c      	bne.n	800e3c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f91c 	bl	800e5ec <USBD_CtlSendStatus>
      }
      break;
 800e3b4:	e004      	b.n	800e3c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f840 	bl	800e43e <USBD_CtlError>
      break;
 800e3be:	e000      	b.n	800e3c2 <USBD_ClrFeature+0x3c>
      break;
 800e3c0:	bf00      	nop
  }
}
 800e3c2:	bf00      	nop
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b084      	sub	sp, #16
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	781a      	ldrb	r2, [r3, #0]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7ff fa16 	bl	800d826 <SWAPBYTE>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	3301      	adds	r3, #1
 800e406:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3301      	adds	r3, #1
 800e40c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff fa09 	bl	800d826 <SWAPBYTE>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	3301      	adds	r3, #1
 800e420:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3301      	adds	r3, #1
 800e426:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff f9fc 	bl	800d826 <SWAPBYTE>
 800e42e:	4603      	mov	r3, r0
 800e430:	461a      	mov	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	80da      	strh	r2, [r3, #6]
}
 800e436:	bf00      	nop
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b082      	sub	sp, #8
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e448:	2180      	movs	r1, #128	@ 0x80
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f003 fb80 	bl	8011b50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e450:	2100      	movs	r1, #0
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f003 fb7c 	bl	8011b50 <USBD_LL_StallEP>
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e46c:	2300      	movs	r3, #0
 800e46e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d042      	beq.n	800e4fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f000 f842 	bl	800e504 <USBD_GetLen>
 800e480:	4603      	mov	r3, r0
 800e482:	3301      	adds	r3, #1
 800e484:	005b      	lsls	r3, r3, #1
 800e486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e48a:	d808      	bhi.n	800e49e <USBD_GetString+0x3e>
 800e48c:	6938      	ldr	r0, [r7, #16]
 800e48e:	f000 f839 	bl	800e504 <USBD_GetLen>
 800e492:	4603      	mov	r3, r0
 800e494:	3301      	adds	r3, #1
 800e496:	b29b      	uxth	r3, r3
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	e001      	b.n	800e4a2 <USBD_GetString+0x42>
 800e49e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e4a6:	7dfb      	ldrb	r3, [r7, #23]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	7812      	ldrb	r2, [r2, #0]
 800e4b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	4413      	add	r3, r2
 800e4be:	2203      	movs	r2, #3
 800e4c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e4c8:	e013      	b.n	800e4f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e4ca:	7dfb      	ldrb	r3, [r7, #23]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	693a      	ldr	r2, [r7, #16]
 800e4d2:	7812      	ldrb	r2, [r2, #0]
 800e4d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	613b      	str	r3, [r7, #16]
    idx++;
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1e7      	bne.n	800e4ca <USBD_GetString+0x6a>
 800e4fa:	e000      	b.n	800e4fe <USBD_GetString+0x9e>
    return;
 800e4fc:	bf00      	nop
  }
}
 800e4fe:	3718      	adds	r7, #24
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e504:	b480      	push	{r7}
 800e506:	b085      	sub	sp, #20
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e50c:	2300      	movs	r3, #0
 800e50e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e514:	e005      	b.n	800e522 <USBD_GetLen+0x1e>
  {
    len++;
 800e516:	7bfb      	ldrb	r3, [r7, #15]
 800e518:	3301      	adds	r3, #1
 800e51a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3301      	adds	r3, #1
 800e520:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1f5      	bne.n	800e516 <USBD_GetLen+0x12>
  }

  return len;
 800e52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2202      	movs	r2, #2
 800e548:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	2100      	movs	r1, #0
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	f003 fb7f 	bl	8011c62 <USBD_LL_Transmit>

  return USBD_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b084      	sub	sp, #16
 800e572:	af00      	add	r7, sp, #0
 800e574:	60f8      	str	r0, [r7, #12]
 800e576:	60b9      	str	r1, [r7, #8]
 800e578:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	2100      	movs	r1, #0
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f003 fb6e 	bl	8011c62 <USBD_LL_Transmit>

  return USBD_OK;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2203      	movs	r2, #3
 800e5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f003 fb72 	bl	8011ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	60f8      	str	r0, [r7, #12]
 800e5d2:	60b9      	str	r1, [r7, #8]
 800e5d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	2100      	movs	r1, #0
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f003 fb61 	bl	8011ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2204      	movs	r2, #4
 800e5f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	2200      	movs	r2, #0
 800e600:	2100      	movs	r1, #0
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f003 fb2d 	bl	8011c62 <USBD_LL_Transmit>

  return USBD_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b082      	sub	sp, #8
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2205      	movs	r2, #5
 800e61e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e622:	2300      	movs	r3, #0
 800e624:	2200      	movs	r2, #0
 800e626:	2100      	movs	r1, #0
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f003 fb3b 	bl	8011ca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <__NVIC_SetPriority>:
{
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	6039      	str	r1, [r7, #0]
 800e642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	db0a      	blt.n	800e662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	490c      	ldr	r1, [pc, #48]	@ (800e684 <__NVIC_SetPriority+0x4c>)
 800e652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e656:	0112      	lsls	r2, r2, #4
 800e658:	b2d2      	uxtb	r2, r2
 800e65a:	440b      	add	r3, r1
 800e65c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e660:	e00a      	b.n	800e678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	b2da      	uxtb	r2, r3
 800e666:	4908      	ldr	r1, [pc, #32]	@ (800e688 <__NVIC_SetPriority+0x50>)
 800e668:	88fb      	ldrh	r3, [r7, #6]
 800e66a:	f003 030f 	and.w	r3, r3, #15
 800e66e:	3b04      	subs	r3, #4
 800e670:	0112      	lsls	r2, r2, #4
 800e672:	b2d2      	uxtb	r2, r2
 800e674:	440b      	add	r3, r1
 800e676:	761a      	strb	r2, [r3, #24]
}
 800e678:	bf00      	nop
 800e67a:	370c      	adds	r7, #12
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	e000e100 	.word	0xe000e100
 800e688:	e000ed00 	.word	0xe000ed00

0800e68c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e690:	4b05      	ldr	r3, [pc, #20]	@ (800e6a8 <SysTick_Handler+0x1c>)
 800e692:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e694:	f001 fd46 	bl	8010124 <xTaskGetSchedulerState>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d001      	beq.n	800e6a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e69e:	f002 fb3b 	bl	8010d18 <xPortSysTickHandler>
  }
}
 800e6a2:	bf00      	nop
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	e000e010 	.word	0xe000e010

0800e6ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	f06f 0004 	mvn.w	r0, #4
 800e6b6:	f7ff ffbf 	bl	800e638 <__NVIC_SetPriority>
#endif
}
 800e6ba:	bf00      	nop
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6c6:	f3ef 8305 	mrs	r3, IPSR
 800e6ca:	603b      	str	r3, [r7, #0]
  return(result);
 800e6cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e6d2:	f06f 0305 	mvn.w	r3, #5
 800e6d6:	607b      	str	r3, [r7, #4]
 800e6d8:	e00c      	b.n	800e6f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e6da:	4b0a      	ldr	r3, [pc, #40]	@ (800e704 <osKernelInitialize+0x44>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d105      	bne.n	800e6ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e6e2:	4b08      	ldr	r3, [pc, #32]	@ (800e704 <osKernelInitialize+0x44>)
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	607b      	str	r3, [r7, #4]
 800e6ec:	e002      	b.n	800e6f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e6f4:	687b      	ldr	r3, [r7, #4]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
 800e702:	bf00      	nop
 800e704:	24000360 	.word	0x24000360

0800e708 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e70e:	f3ef 8305 	mrs	r3, IPSR
 800e712:	603b      	str	r3, [r7, #0]
  return(result);
 800e714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e71a:	f06f 0305 	mvn.w	r3, #5
 800e71e:	607b      	str	r3, [r7, #4]
 800e720:	e010      	b.n	800e744 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e722:	4b0b      	ldr	r3, [pc, #44]	@ (800e750 <osKernelStart+0x48>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d109      	bne.n	800e73e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e72a:	f7ff ffbf 	bl	800e6ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e72e:	4b08      	ldr	r3, [pc, #32]	@ (800e750 <osKernelStart+0x48>)
 800e730:	2202      	movs	r2, #2
 800e732:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e734:	f001 f892 	bl	800f85c <vTaskStartScheduler>
      stat = osOK;
 800e738:	2300      	movs	r3, #0
 800e73a:	607b      	str	r3, [r7, #4]
 800e73c:	e002      	b.n	800e744 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e73e:	f04f 33ff 	mov.w	r3, #4294967295
 800e742:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e744:	687b      	ldr	r3, [r7, #4]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	24000360 	.word	0x24000360

0800e754 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e754:	b580      	push	{r7, lr}
 800e756:	b08e      	sub	sp, #56	@ 0x38
 800e758:	af04      	add	r7, sp, #16
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e760:	2300      	movs	r3, #0
 800e762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e764:	f3ef 8305 	mrs	r3, IPSR
 800e768:	617b      	str	r3, [r7, #20]
  return(result);
 800e76a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d17e      	bne.n	800e86e <osThreadNew+0x11a>
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d07b      	beq.n	800e86e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e776:	2380      	movs	r3, #128	@ 0x80
 800e778:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e77a:	2318      	movs	r3, #24
 800e77c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e782:	f04f 33ff 	mov.w	r3, #4294967295
 800e786:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d045      	beq.n	800e81a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <osThreadNew+0x48>
        name = attr->name;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	699b      	ldr	r3, [r3, #24]
 800e7a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d008      	beq.n	800e7c2 <osThreadNew+0x6e>
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	2b38      	cmp	r3, #56	@ 0x38
 800e7b4:	d805      	bhi.n	800e7c2 <osThreadNew+0x6e>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	f003 0301 	and.w	r3, r3, #1
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d001      	beq.n	800e7c6 <osThreadNew+0x72>
        return (NULL);
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	e054      	b.n	800e870 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	089b      	lsrs	r3, r3, #2
 800e7d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00e      	beq.n	800e7fc <osThreadNew+0xa8>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	2ba7      	cmp	r3, #167	@ 0xa7
 800e7e4:	d90a      	bls.n	800e7fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d006      	beq.n	800e7fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <osThreadNew+0xa8>
        mem = 1;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	61bb      	str	r3, [r7, #24]
 800e7fa:	e010      	b.n	800e81e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10c      	bne.n	800e81e <osThreadNew+0xca>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d108      	bne.n	800e81e <osThreadNew+0xca>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d104      	bne.n	800e81e <osThreadNew+0xca>
          mem = 0;
 800e814:	2300      	movs	r3, #0
 800e816:	61bb      	str	r3, [r7, #24]
 800e818:	e001      	b.n	800e81e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d110      	bne.n	800e846 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e82c:	9202      	str	r2, [sp, #8]
 800e82e:	9301      	str	r3, [sp, #4]
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	6a3a      	ldr	r2, [r7, #32]
 800e838:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f000 fe1a 	bl	800f474 <xTaskCreateStatic>
 800e840:	4603      	mov	r3, r0
 800e842:	613b      	str	r3, [r7, #16]
 800e844:	e013      	b.n	800e86e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d110      	bne.n	800e86e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	b29a      	uxth	r2, r3
 800e850:	f107 0310 	add.w	r3, r7, #16
 800e854:	9301      	str	r3, [sp, #4]
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 fe68 	bl	800f534 <xTaskCreate>
 800e864:	4603      	mov	r3, r0
 800e866:	2b01      	cmp	r3, #1
 800e868:	d001      	beq.n	800e86e <osThreadNew+0x11a>
            hTask = NULL;
 800e86a:	2300      	movs	r3, #0
 800e86c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e86e:	693b      	ldr	r3, [r7, #16]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3728      	adds	r7, #40	@ 0x28
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e880:	f3ef 8305 	mrs	r3, IPSR
 800e884:	60bb      	str	r3, [r7, #8]
  return(result);
 800e886:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <osDelay+0x1c>
    stat = osErrorISR;
 800e88c:	f06f 0305 	mvn.w	r3, #5
 800e890:	60fb      	str	r3, [r7, #12]
 800e892:	e007      	b.n	800e8a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e894:	2300      	movs	r3, #0
 800e896:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 ffa6 	bl	800f7f0 <vTaskDelay>
    }
  }

  return (stat);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
	...

0800e8b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	4a07      	ldr	r2, [pc, #28]	@ (800e8dc <vApplicationGetIdleTaskMemory+0x2c>)
 800e8c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	4a06      	ldr	r2, [pc, #24]	@ (800e8e0 <vApplicationGetIdleTaskMemory+0x30>)
 800e8c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2280      	movs	r2, #128	@ 0x80
 800e8cc:	601a      	str	r2, [r3, #0]
}
 800e8ce:	bf00      	nop
 800e8d0:	3714      	adds	r7, #20
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	24000364 	.word	0x24000364
 800e8e0:	2400040c 	.word	0x2400040c

0800e8e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4a07      	ldr	r2, [pc, #28]	@ (800e910 <vApplicationGetTimerTaskMemory+0x2c>)
 800e8f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	4a06      	ldr	r2, [pc, #24]	@ (800e914 <vApplicationGetTimerTaskMemory+0x30>)
 800e8fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	2400060c 	.word	0x2400060c
 800e914:	240006b4 	.word	0x240006b4

0800e918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f103 0208 	add.w	r2, r3, #8
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f04f 32ff 	mov.w	r2, #4294967295
 800e930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f103 0208 	add.w	r2, r3, #8
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f103 0208 	add.w	r2, r3, #8
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e972:	b480      	push	{r7}
 800e974:	b085      	sub	sp, #20
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689a      	ldr	r2, [r3, #8]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	1c5a      	adds	r2, r3, #1
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	601a      	str	r2, [r3, #0]
}
 800e9ae:	bf00      	nop
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b085      	sub	sp, #20
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d0:	d103      	bne.n	800e9da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	60fb      	str	r3, [r7, #12]
 800e9d8:	e00c      	b.n	800e9f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3308      	adds	r3, #8
 800e9de:	60fb      	str	r3, [r7, #12]
 800e9e0:	e002      	b.n	800e9e8 <vListInsert+0x2e>
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d2f6      	bcs.n	800e9e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	601a      	str	r2, [r3, #0]
}
 800ea20:	bf00      	nop
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	6892      	ldr	r2, [r2, #8]
 800ea42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	6852      	ldr	r2, [r2, #4]
 800ea4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d103      	bne.n	800ea60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	1e5a      	subs	r2, r3, #1
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10b      	bne.n	800eaac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ea94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eaa6:	bf00      	nop
 800eaa8:	bf00      	nop
 800eaaa:	e7fd      	b.n	800eaa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eaac:	f002 f8a4 	bl	8010bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eab8:	68f9      	ldr	r1, [r7, #12]
 800eaba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800eabc:	fb01 f303 	mul.w	r3, r1, r3
 800eac0:	441a      	add	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eadc:	3b01      	subs	r3, #1
 800eade:	68f9      	ldr	r1, [r7, #12]
 800eae0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800eae2:	fb01 f303 	mul.w	r3, r1, r3
 800eae6:	441a      	add	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	22ff      	movs	r2, #255	@ 0xff
 800eaf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	22ff      	movs	r2, #255	@ 0xff
 800eaf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d114      	bne.n	800eb2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d01a      	beq.n	800eb40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3310      	adds	r3, #16
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 f942 	bl	800fd98 <xTaskRemoveFromEventList>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d012      	beq.n	800eb40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb50 <xQueueGenericReset+0xd0>)
 800eb1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	e009      	b.n	800eb40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3310      	adds	r3, #16
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff fef1 	bl	800e918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3324      	adds	r3, #36	@ 0x24
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff feec 	bl	800e918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb40:	f002 f88c 	bl	8010c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb44:	2301      	movs	r3, #1
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	e000ed04 	.word	0xe000ed04

0800eb54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b08e      	sub	sp, #56	@ 0x38
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
 800eb60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10b      	bne.n	800eb80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eb7a:	bf00      	nop
 800eb7c:	bf00      	nop
 800eb7e:	e7fd      	b.n	800eb7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eb98:	bf00      	nop
 800eb9a:	bf00      	nop
 800eb9c:	e7fd      	b.n	800eb9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <xQueueGenericCreateStatic+0x56>
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <xQueueGenericCreateStatic+0x5a>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e000      	b.n	800ebb0 <xQueueGenericCreateStatic+0x5c>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10b      	bne.n	800ebcc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	623b      	str	r3, [r7, #32]
}
 800ebc6:	bf00      	nop
 800ebc8:	bf00      	nop
 800ebca:	e7fd      	b.n	800ebc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d102      	bne.n	800ebd8 <xQueueGenericCreateStatic+0x84>
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <xQueueGenericCreateStatic+0x88>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e000      	b.n	800ebde <xQueueGenericCreateStatic+0x8a>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d10b      	bne.n	800ebfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	61fb      	str	r3, [r7, #28]
}
 800ebf4:	bf00      	nop
 800ebf6:	bf00      	nop
 800ebf8:	e7fd      	b.n	800ebf6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebfa:	2350      	movs	r3, #80	@ 0x50
 800ebfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b50      	cmp	r3, #80	@ 0x50
 800ec02:	d00b      	beq.n	800ec1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	61bb      	str	r3, [r7, #24]
}
 800ec16:	bf00      	nop
 800ec18:	bf00      	nop
 800ec1a:	e7fd      	b.n	800ec18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ec22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00d      	beq.n	800ec44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f000 f805 	bl	800ec4e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3730      	adds	r7, #48	@ 0x30
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	607a      	str	r2, [r7, #4]
 800ec5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d103      	bne.n	800ec6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	69ba      	ldr	r2, [r7, #24]
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e002      	b.n	800ec70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec7c:	2101      	movs	r1, #1
 800ec7e:	69b8      	ldr	r0, [r7, #24]
 800ec80:	f7ff fefe 	bl	800ea80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	78fa      	ldrb	r2, [r7, #3]
 800ec88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec8c:	bf00      	nop
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b08e      	sub	sp, #56	@ 0x38
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eca2:	2300      	movs	r3, #0
 800eca4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10b      	bne.n	800ecc8 <xQueueGenericSend+0x34>
	__asm volatile
 800ecb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ecc2:	bf00      	nop
 800ecc4:	bf00      	nop
 800ecc6:	e7fd      	b.n	800ecc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d103      	bne.n	800ecd6 <xQueueGenericSend+0x42>
 800ecce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <xQueueGenericSend+0x46>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e000      	b.n	800ecdc <xQueueGenericSend+0x48>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <xQueueGenericSend+0x64>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ecf2:	bf00      	nop
 800ecf4:	bf00      	nop
 800ecf6:	e7fd      	b.n	800ecf4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	d103      	bne.n	800ed06 <xQueueGenericSend+0x72>
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d101      	bne.n	800ed0a <xQueueGenericSend+0x76>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e000      	b.n	800ed0c <xQueueGenericSend+0x78>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10b      	bne.n	800ed28 <xQueueGenericSend+0x94>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	623b      	str	r3, [r7, #32]
}
 800ed22:	bf00      	nop
 800ed24:	bf00      	nop
 800ed26:	e7fd      	b.n	800ed24 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed28:	f001 f9fc 	bl	8010124 <xTaskGetSchedulerState>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d102      	bne.n	800ed38 <xQueueGenericSend+0xa4>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d101      	bne.n	800ed3c <xQueueGenericSend+0xa8>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e000      	b.n	800ed3e <xQueueGenericSend+0xaa>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10b      	bne.n	800ed5a <xQueueGenericSend+0xc6>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	61fb      	str	r3, [r7, #28]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed5a:	f001 ff4d 	bl	8010bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d302      	bcc.n	800ed70 <xQueueGenericSend+0xdc>
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	d129      	bne.n	800edc4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed70:	683a      	ldr	r2, [r7, #0]
 800ed72:	68b9      	ldr	r1, [r7, #8]
 800ed74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed76:	f000 fa0f 	bl	800f198 <prvCopyDataToQueue>
 800ed7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d010      	beq.n	800eda6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed86:	3324      	adds	r3, #36	@ 0x24
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f001 f805 	bl	800fd98 <xTaskRemoveFromEventList>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d013      	beq.n	800edbc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed94:	4b3f      	ldr	r3, [pc, #252]	@ (800ee94 <xQueueGenericSend+0x200>)
 800ed96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	e00a      	b.n	800edbc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d007      	beq.n	800edbc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800edac:	4b39      	ldr	r3, [pc, #228]	@ (800ee94 <xQueueGenericSend+0x200>)
 800edae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800edbc:	f001 ff4e 	bl	8010c5c <vPortExitCritical>
				return pdPASS;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e063      	b.n	800ee8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d103      	bne.n	800edd2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800edca:	f001 ff47 	bl	8010c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	e05c      	b.n	800ee8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800edd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d106      	bne.n	800ede6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edd8:	f107 0314 	add.w	r3, r7, #20
 800eddc:	4618      	mov	r0, r3
 800edde:	f001 f83f 	bl	800fe60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ede2:	2301      	movs	r3, #1
 800ede4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ede6:	f001 ff39 	bl	8010c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800edea:	f000 fda7 	bl	800f93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800edee:	f001 ff03 	bl	8010bf8 <vPortEnterCritical>
 800edf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800edf8:	b25b      	sxtb	r3, r3
 800edfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfe:	d103      	bne.n	800ee08 <xQueueGenericSend+0x174>
 800ee00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee0e:	b25b      	sxtb	r3, r3
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d103      	bne.n	800ee1e <xQueueGenericSend+0x18a>
 800ee16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee1e:	f001 ff1d 	bl	8010c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee22:	1d3a      	adds	r2, r7, #4
 800ee24:	f107 0314 	add.w	r3, r7, #20
 800ee28:	4611      	mov	r1, r2
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f001 f82e 	bl	800fe8c <xTaskCheckForTimeOut>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d124      	bne.n	800ee80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee38:	f000 faa6 	bl	800f388 <prvIsQueueFull>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d018      	beq.n	800ee74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee44:	3310      	adds	r3, #16
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	4611      	mov	r1, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f000 ff52 	bl	800fcf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ee50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee52:	f000 fa31 	bl	800f2b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ee56:	f000 fd7f 	bl	800f958 <xTaskResumeAll>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f47f af7c 	bne.w	800ed5a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ee62:	4b0c      	ldr	r3, [pc, #48]	@ (800ee94 <xQueueGenericSend+0x200>)
 800ee64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	e772      	b.n	800ed5a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ee74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee76:	f000 fa1f 	bl	800f2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee7a:	f000 fd6d 	bl	800f958 <xTaskResumeAll>
 800ee7e:	e76c      	b.n	800ed5a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ee80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee82:	f000 fa19 	bl	800f2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee86:	f000 fd67 	bl	800f958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3738      	adds	r7, #56	@ 0x38
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	e000ed04 	.word	0xe000ed04

0800ee98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b090      	sub	sp, #64	@ 0x40
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eec2:	bf00      	nop
 800eec4:	bf00      	nop
 800eec6:	e7fd      	b.n	800eec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d103      	bne.n	800eed6 <xQueueGenericSendFromISR+0x3e>
 800eece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <xQueueGenericSendFromISR+0x42>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <xQueueGenericSendFromISR+0x44>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10b      	bne.n	800eef8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eef2:	bf00      	nop
 800eef4:	bf00      	nop
 800eef6:	e7fd      	b.n	800eef4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d103      	bne.n	800ef06 <xQueueGenericSendFromISR+0x6e>
 800eefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d101      	bne.n	800ef0a <xQueueGenericSendFromISR+0x72>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e000      	b.n	800ef0c <xQueueGenericSendFromISR+0x74>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10b      	bne.n	800ef28 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	623b      	str	r3, [r7, #32]
}
 800ef22:	bf00      	nop
 800ef24:	bf00      	nop
 800ef26:	e7fd      	b.n	800ef24 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef28:	f001 ff46 	bl	8010db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef2c:	f3ef 8211 	mrs	r2, BASEPRI
 800ef30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	61fa      	str	r2, [r7, #28]
 800ef42:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ef44:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef46:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d302      	bcc.n	800ef5a <xQueueGenericSendFromISR+0xc2>
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d12f      	bne.n	800efba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	68b9      	ldr	r1, [r7, #8]
 800ef6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef70:	f000 f912 	bl	800f198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef74:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ef78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7c:	d112      	bne.n	800efa4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d016      	beq.n	800efb4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef88:	3324      	adds	r3, #36	@ 0x24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 ff04 	bl	800fd98 <xTaskRemoveFromEventList>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00e      	beq.n	800efb4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00b      	beq.n	800efb4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	e007      	b.n	800efb4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800efa8:	3301      	adds	r3, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	b25a      	sxtb	r2, r3
 800efae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800efb4:	2301      	movs	r3, #1
 800efb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800efb8:	e001      	b.n	800efbe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800efba:	2300      	movs	r3, #0
 800efbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800efc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800efca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3740      	adds	r7, #64	@ 0x40
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08c      	sub	sp, #48	@ 0x30
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800efe0:	2300      	movs	r3, #0
 800efe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10b      	bne.n	800f006 <xQueueReceive+0x32>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	623b      	str	r3, [r7, #32]
}
 800f000:	bf00      	nop
 800f002:	bf00      	nop
 800f004:	e7fd      	b.n	800f002 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d103      	bne.n	800f014 <xQueueReceive+0x40>
 800f00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <xQueueReceive+0x44>
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <xQueueReceive+0x46>
 800f018:	2300      	movs	r3, #0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10b      	bne.n	800f036 <xQueueReceive+0x62>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	61fb      	str	r3, [r7, #28]
}
 800f030:	bf00      	nop
 800f032:	bf00      	nop
 800f034:	e7fd      	b.n	800f032 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f036:	f001 f875 	bl	8010124 <xTaskGetSchedulerState>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <xQueueReceive+0x72>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d101      	bne.n	800f04a <xQueueReceive+0x76>
 800f046:	2301      	movs	r3, #1
 800f048:	e000      	b.n	800f04c <xQueueReceive+0x78>
 800f04a:	2300      	movs	r3, #0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10b      	bne.n	800f068 <xQueueReceive+0x94>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	61bb      	str	r3, [r7, #24]
}
 800f062:	bf00      	nop
 800f064:	bf00      	nop
 800f066:	e7fd      	b.n	800f064 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f068:	f001 fdc6 	bl	8010bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f070:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	d01f      	beq.n	800f0b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f078:	68b9      	ldr	r1, [r7, #8]
 800f07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f07c:	f000 f8f6 	bl	800f26c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	1e5a      	subs	r2, r3, #1
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00f      	beq.n	800f0b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	3310      	adds	r3, #16
 800f094:	4618      	mov	r0, r3
 800f096:	f000 fe7f 	bl	800fd98 <xTaskRemoveFromEventList>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d007      	beq.n	800f0b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0a0:	4b3c      	ldr	r3, [pc, #240]	@ (800f194 <xQueueReceive+0x1c0>)
 800f0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0a6:	601a      	str	r2, [r3, #0]
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0b0:	f001 fdd4 	bl	8010c5c <vPortExitCritical>
				return pdPASS;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e069      	b.n	800f18c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d103      	bne.n	800f0c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0be:	f001 fdcd 	bl	8010c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e062      	b.n	800f18c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d106      	bne.n	800f0da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0cc:	f107 0310 	add.w	r3, r7, #16
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 fec5 	bl	800fe60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0da:	f001 fdbf 	bl	8010c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0de:	f000 fc2d 	bl	800f93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0e2:	f001 fd89 	bl	8010bf8 <vPortEnterCritical>
 800f0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0ec:	b25b      	sxtb	r3, r3
 800f0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f2:	d103      	bne.n	800f0fc <xQueueReceive+0x128>
 800f0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f102:	b25b      	sxtb	r3, r3
 800f104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f108:	d103      	bne.n	800f112 <xQueueReceive+0x13e>
 800f10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f112:	f001 fda3 	bl	8010c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f116:	1d3a      	adds	r2, r7, #4
 800f118:	f107 0310 	add.w	r3, r7, #16
 800f11c:	4611      	mov	r1, r2
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 feb4 	bl	800fe8c <xTaskCheckForTimeOut>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d123      	bne.n	800f172 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f12a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f12c:	f000 f916 	bl	800f35c <prvIsQueueEmpty>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d017      	beq.n	800f166 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f138:	3324      	adds	r3, #36	@ 0x24
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 fdd8 	bl	800fcf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f146:	f000 f8b7 	bl	800f2b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f14a:	f000 fc05 	bl	800f958 <xTaskResumeAll>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d189      	bne.n	800f068 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f154:	4b0f      	ldr	r3, [pc, #60]	@ (800f194 <xQueueReceive+0x1c0>)
 800f156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	e780      	b.n	800f068 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f168:	f000 f8a6 	bl	800f2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f16c:	f000 fbf4 	bl	800f958 <xTaskResumeAll>
 800f170:	e77a      	b.n	800f068 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f174:	f000 f8a0 	bl	800f2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f178:	f000 fbee 	bl	800f958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f17c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f17e:	f000 f8ed 	bl	800f35c <prvIsQueueEmpty>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	f43f af6f 	beq.w	800f068 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f18a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3730      	adds	r7, #48	@ 0x30
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	e000ed04 	.word	0xe000ed04

0800f198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10d      	bne.n	800f1d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d14d      	bne.n	800f25a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 ffcc 	bl	8010160 <xTaskPriorityDisinherit>
 800f1c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	609a      	str	r2, [r3, #8]
 800f1d0:	e043      	b.n	800f25a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d119      	bne.n	800f20c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6858      	ldr	r0, [r3, #4]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	68b9      	ldr	r1, [r7, #8]
 800f1e4:	f003 fcb2 	bl	8012b4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d32b      	bcc.n	800f25a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	605a      	str	r2, [r3, #4]
 800f20a:	e026      	b.n	800f25a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68d8      	ldr	r0, [r3, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f214:	461a      	mov	r2, r3
 800f216:	68b9      	ldr	r1, [r7, #8]
 800f218:	f003 fc98 	bl	8012b4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	68da      	ldr	r2, [r3, #12]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f224:	425b      	negs	r3, r3
 800f226:	441a      	add	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68da      	ldr	r2, [r3, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d207      	bcs.n	800f248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	689a      	ldr	r2, [r3, #8]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f240:	425b      	negs	r3, r3
 800f242:	441a      	add	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d105      	bne.n	800f25a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3b01      	subs	r3, #1
 800f258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f262:	697b      	ldr	r3, [r7, #20]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d018      	beq.n	800f2b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68da      	ldr	r2, [r3, #12]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f286:	441a      	add	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	429a      	cmp	r2, r3
 800f296:	d303      	bcc.n	800f2a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	68d9      	ldr	r1, [r3, #12]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	6838      	ldr	r0, [r7, #0]
 800f2ac:	f003 fc4e 	bl	8012b4c <memcpy>
	}
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f2c0:	f001 fc9a 	bl	8010bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f2ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2cc:	e011      	b.n	800f2f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d012      	beq.n	800f2fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	3324      	adds	r3, #36	@ 0x24
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fd5c 	bl	800fd98 <xTaskRemoveFromEventList>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f2e6:	f000 fe35 	bl	800ff54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	dce9      	bgt.n	800f2ce <prvUnlockQueue+0x16>
 800f2fa:	e000      	b.n	800f2fe <prvUnlockQueue+0x46>
					break;
 800f2fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	22ff      	movs	r2, #255	@ 0xff
 800f302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f306:	f001 fca9 	bl	8010c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f30a:	f001 fc75 	bl	8010bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f316:	e011      	b.n	800f33c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d012      	beq.n	800f346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3310      	adds	r3, #16
 800f324:	4618      	mov	r0, r3
 800f326:	f000 fd37 	bl	800fd98 <xTaskRemoveFromEventList>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f330:	f000 fe10 	bl	800ff54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	3b01      	subs	r3, #1
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f33c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f340:	2b00      	cmp	r3, #0
 800f342:	dce9      	bgt.n	800f318 <prvUnlockQueue+0x60>
 800f344:	e000      	b.n	800f348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	22ff      	movs	r2, #255	@ 0xff
 800f34c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f350:	f001 fc84 	bl	8010c5c <vPortExitCritical>
}
 800f354:	bf00      	nop
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f364:	f001 fc48 	bl	8010bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d102      	bne.n	800f376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e001      	b.n	800f37a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f376:	2300      	movs	r3, #0
 800f378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f37a:	f001 fc6f 	bl	8010c5c <vPortExitCritical>

	return xReturn;
 800f37e:	68fb      	ldr	r3, [r7, #12]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f390:	f001 fc32 	bl	8010bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d102      	bne.n	800f3a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e001      	b.n	800f3aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3aa:	f001 fc57 	bl	8010c5c <vPortExitCritical>

	return xReturn;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	e014      	b.n	800f3f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3c8:	4a0f      	ldr	r2, [pc, #60]	@ (800f408 <vQueueAddToRegistry+0x50>)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10b      	bne.n	800f3ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f3d4:	490c      	ldr	r1, [pc, #48]	@ (800f408 <vQueueAddToRegistry+0x50>)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3de:	4a0a      	ldr	r2, [pc, #40]	@ (800f408 <vQueueAddToRegistry+0x50>)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	4413      	add	r3, r2
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f3ea:	e006      	b.n	800f3fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2b07      	cmp	r3, #7
 800f3f6:	d9e7      	bls.n	800f3c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3f8:	bf00      	nop
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	24000ab4 	.word	0x24000ab4

0800f40c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f41c:	f001 fbec 	bl	8010bf8 <vPortEnterCritical>
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f426:	b25b      	sxtb	r3, r3
 800f428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42c:	d103      	bne.n	800f436 <vQueueWaitForMessageRestricted+0x2a>
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f43c:	b25b      	sxtb	r3, r3
 800f43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f442:	d103      	bne.n	800f44c <vQueueWaitForMessageRestricted+0x40>
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	2200      	movs	r2, #0
 800f448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f44c:	f001 fc06 	bl	8010c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	3324      	adds	r3, #36	@ 0x24
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	68b9      	ldr	r1, [r7, #8]
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fc6d 	bl	800fd40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f466:	6978      	ldr	r0, [r7, #20]
 800f468:	f7ff ff26 	bl	800f2b8 <prvUnlockQueue>
	}
 800f46c:	bf00      	nop
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08e      	sub	sp, #56	@ 0x38
 800f478:	af04      	add	r7, sp, #16
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10b      	bne.n	800f4a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	623b      	str	r3, [r7, #32]
}
 800f49a:	bf00      	nop
 800f49c:	bf00      	nop
 800f49e:	e7fd      	b.n	800f49c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10b      	bne.n	800f4be <xTaskCreateStatic+0x4a>
	__asm volatile
 800f4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4aa:	f383 8811 	msr	BASEPRI, r3
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	f3bf 8f4f 	dsb	sy
 800f4b6:	61fb      	str	r3, [r7, #28]
}
 800f4b8:	bf00      	nop
 800f4ba:	bf00      	nop
 800f4bc:	e7fd      	b.n	800f4ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4be:	23a8      	movs	r3, #168	@ 0xa8
 800f4c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	2ba8      	cmp	r3, #168	@ 0xa8
 800f4c6:	d00b      	beq.n	800f4e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	61bb      	str	r3, [r7, #24]
}
 800f4da:	bf00      	nop
 800f4dc:	bf00      	nop
 800f4de:	e7fd      	b.n	800f4dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d01e      	beq.n	800f526 <xTaskCreateStatic+0xb2>
 800f4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d01b      	beq.n	800f526 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f500:	2300      	movs	r3, #0
 800f502:	9303      	str	r3, [sp, #12]
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	9302      	str	r3, [sp, #8]
 800f508:	f107 0314 	add.w	r3, r7, #20
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f000 f851 	bl	800f5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f51e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f520:	f000 f8f6 	bl	800f710 <prvAddNewTaskToReadyList>
 800f524:	e001      	b.n	800f52a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f526:	2300      	movs	r3, #0
 800f528:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f52a:	697b      	ldr	r3, [r7, #20]
	}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3728      	adds	r7, #40	@ 0x28
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08c      	sub	sp, #48	@ 0x30
 800f538:	af04      	add	r7, sp, #16
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	603b      	str	r3, [r7, #0]
 800f540:	4613      	mov	r3, r2
 800f542:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f544:	88fb      	ldrh	r3, [r7, #6]
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4618      	mov	r0, r3
 800f54a:	f001 fc77 	bl	8010e3c <pvPortMalloc>
 800f54e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00e      	beq.n	800f574 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f556:	20a8      	movs	r0, #168	@ 0xa8
 800f558:	f001 fc70 	bl	8010e3c <pvPortMalloc>
 800f55c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d003      	beq.n	800f56c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	631a      	str	r2, [r3, #48]	@ 0x30
 800f56a:	e005      	b.n	800f578 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f56c:	6978      	ldr	r0, [r7, #20]
 800f56e:	f001 fd33 	bl	8010fd8 <vPortFree>
 800f572:	e001      	b.n	800f578 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f574:	2300      	movs	r3, #0
 800f576:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d017      	beq.n	800f5ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	2200      	movs	r2, #0
 800f582:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f586:	88fa      	ldrh	r2, [r7, #6]
 800f588:	2300      	movs	r3, #0
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	9302      	str	r3, [sp, #8]
 800f590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	68b9      	ldr	r1, [r7, #8]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 f80f 	bl	800f5c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5a2:	69f8      	ldr	r0, [r7, #28]
 800f5a4:	f000 f8b4 	bl	800f710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	e002      	b.n	800f5b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5b4:	69bb      	ldr	r3, [r7, #24]
	}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3720      	adds	r7, #32
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
 800f5cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	21a5      	movs	r1, #165	@ 0xa5
 800f5da:	f003 fa25 	bl	8012a28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f5e8:	440b      	add	r3, r1
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4413      	add	r3, r2
 800f5ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	f023 0307 	bic.w	r3, r3, #7
 800f5f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	f003 0307 	and.w	r3, r3, #7
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00b      	beq.n	800f61a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	617b      	str	r3, [r7, #20]
}
 800f614:	bf00      	nop
 800f616:	bf00      	nop
 800f618:	e7fd      	b.n	800f616 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d01f      	beq.n	800f660 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f620:	2300      	movs	r3, #0
 800f622:	61fb      	str	r3, [r7, #28]
 800f624:	e012      	b.n	800f64c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	4413      	add	r3, r2
 800f62c:	7819      	ldrb	r1, [r3, #0]
 800f62e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	4413      	add	r3, r2
 800f634:	3334      	adds	r3, #52	@ 0x34
 800f636:	460a      	mov	r2, r1
 800f638:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	4413      	add	r3, r2
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d006      	beq.n	800f654 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	3301      	adds	r3, #1
 800f64a:	61fb      	str	r3, [r7, #28]
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	2b0f      	cmp	r3, #15
 800f650:	d9e9      	bls.n	800f626 <prvInitialiseNewTask+0x66>
 800f652:	e000      	b.n	800f656 <prvInitialiseNewTask+0x96>
			{
				break;
 800f654:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f65e:	e003      	b.n	800f668 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f662:	2200      	movs	r2, #0
 800f664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f66a:	2b37      	cmp	r3, #55	@ 0x37
 800f66c:	d901      	bls.n	800f672 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f66e:	2337      	movs	r3, #55	@ 0x37
 800f670:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f676:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f67a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f67c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f680:	2200      	movs	r2, #0
 800f682:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f686:	3304      	adds	r3, #4
 800f688:	4618      	mov	r0, r3
 800f68a:	f7ff f965 	bl	800e958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f690:	3318      	adds	r3, #24
 800f692:	4618      	mov	r0, r3
 800f694:	f7ff f960 	bl	800e958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f69c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	3354      	adds	r3, #84	@ 0x54
 800f6c2:	224c      	movs	r2, #76	@ 0x4c
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f003 f9ae 	bl	8012a28 <memset>
 800f6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ce:	4a0d      	ldr	r2, [pc, #52]	@ (800f704 <prvInitialiseNewTask+0x144>)
 800f6d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800f708 <prvInitialiseNewTask+0x148>)
 800f6d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6da:	4a0c      	ldr	r2, [pc, #48]	@ (800f70c <prvInitialiseNewTask+0x14c>)
 800f6dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	68f9      	ldr	r1, [r7, #12]
 800f6e2:	69b8      	ldr	r0, [r7, #24]
 800f6e4:	f001 f95a 	bl	801099c <pxPortInitialiseStack>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d002      	beq.n	800f6fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6fa:	bf00      	nop
 800f6fc:	3720      	adds	r7, #32
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	24007b48 	.word	0x24007b48
 800f708:	24007bb0 	.word	0x24007bb0
 800f70c:	24007c18 	.word	0x24007c18

0800f710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f718:	f001 fa6e 	bl	8010bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f71c:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d4 <prvAddNewTaskToReadyList+0xc4>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	3301      	adds	r3, #1
 800f722:	4a2c      	ldr	r2, [pc, #176]	@ (800f7d4 <prvAddNewTaskToReadyList+0xc4>)
 800f724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f726:	4b2c      	ldr	r3, [pc, #176]	@ (800f7d8 <prvAddNewTaskToReadyList+0xc8>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d109      	bne.n	800f742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f72e:	4a2a      	ldr	r2, [pc, #168]	@ (800f7d8 <prvAddNewTaskToReadyList+0xc8>)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f734:	4b27      	ldr	r3, [pc, #156]	@ (800f7d4 <prvAddNewTaskToReadyList+0xc4>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d110      	bne.n	800f75e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f73c:	f000 fc2e 	bl	800ff9c <prvInitialiseTaskLists>
 800f740:	e00d      	b.n	800f75e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f742:	4b26      	ldr	r3, [pc, #152]	@ (800f7dc <prvAddNewTaskToReadyList+0xcc>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d109      	bne.n	800f75e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f74a:	4b23      	ldr	r3, [pc, #140]	@ (800f7d8 <prvAddNewTaskToReadyList+0xc8>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f754:	429a      	cmp	r2, r3
 800f756:	d802      	bhi.n	800f75e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f758:	4a1f      	ldr	r2, [pc, #124]	@ (800f7d8 <prvAddNewTaskToReadyList+0xc8>)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f75e:	4b20      	ldr	r3, [pc, #128]	@ (800f7e0 <prvAddNewTaskToReadyList+0xd0>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	3301      	adds	r3, #1
 800f764:	4a1e      	ldr	r2, [pc, #120]	@ (800f7e0 <prvAddNewTaskToReadyList+0xd0>)
 800f766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f768:	4b1d      	ldr	r3, [pc, #116]	@ (800f7e0 <prvAddNewTaskToReadyList+0xd0>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f774:	4b1b      	ldr	r3, [pc, #108]	@ (800f7e4 <prvAddNewTaskToReadyList+0xd4>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d903      	bls.n	800f784 <prvAddNewTaskToReadyList+0x74>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f780:	4a18      	ldr	r2, [pc, #96]	@ (800f7e4 <prvAddNewTaskToReadyList+0xd4>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f788:	4613      	mov	r3, r2
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	4413      	add	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4a15      	ldr	r2, [pc, #84]	@ (800f7e8 <prvAddNewTaskToReadyList+0xd8>)
 800f792:	441a      	add	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	3304      	adds	r3, #4
 800f798:	4619      	mov	r1, r3
 800f79a:	4610      	mov	r0, r2
 800f79c:	f7ff f8e9 	bl	800e972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f7a0:	f001 fa5c 	bl	8010c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800f7dc <prvAddNewTaskToReadyList+0xcc>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00e      	beq.n	800f7ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d8 <prvAddNewTaskToReadyList+0xc8>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d207      	bcs.n	800f7ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f7ec <prvAddNewTaskToReadyList+0xdc>)
 800f7bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	24000fc8 	.word	0x24000fc8
 800f7d8:	24000af4 	.word	0x24000af4
 800f7dc:	24000fd4 	.word	0x24000fd4
 800f7e0:	24000fe4 	.word	0x24000fe4
 800f7e4:	24000fd0 	.word	0x24000fd0
 800f7e8:	24000af8 	.word	0x24000af8
 800f7ec:	e000ed04 	.word	0xe000ed04

0800f7f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d018      	beq.n	800f834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f802:	4b14      	ldr	r3, [pc, #80]	@ (800f854 <vTaskDelay+0x64>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00b      	beq.n	800f822 <vTaskDelay+0x32>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
 800f81a:	60bb      	str	r3, [r7, #8]
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	e7fd      	b.n	800f81e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f822:	f000 f88b 	bl	800f93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f826:	2100      	movs	r1, #0
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fd09 	bl	8010240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f82e:	f000 f893 	bl	800f958 <xTaskResumeAll>
 800f832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d107      	bne.n	800f84a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f83a:	4b07      	ldr	r3, [pc, #28]	@ (800f858 <vTaskDelay+0x68>)
 800f83c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f84a:	bf00      	nop
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	24000ff0 	.word	0x24000ff0
 800f858:	e000ed04 	.word	0xe000ed04

0800f85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08a      	sub	sp, #40	@ 0x28
 800f860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f866:	2300      	movs	r3, #0
 800f868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f86a:	463a      	mov	r2, r7
 800f86c:	1d39      	adds	r1, r7, #4
 800f86e:	f107 0308 	add.w	r3, r7, #8
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff f81c 	bl	800e8b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	9202      	str	r2, [sp, #8]
 800f880:	9301      	str	r3, [sp, #4]
 800f882:	2300      	movs	r3, #0
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	2300      	movs	r3, #0
 800f888:	460a      	mov	r2, r1
 800f88a:	4924      	ldr	r1, [pc, #144]	@ (800f91c <vTaskStartScheduler+0xc0>)
 800f88c:	4824      	ldr	r0, [pc, #144]	@ (800f920 <vTaskStartScheduler+0xc4>)
 800f88e:	f7ff fdf1 	bl	800f474 <xTaskCreateStatic>
 800f892:	4603      	mov	r3, r0
 800f894:	4a23      	ldr	r2, [pc, #140]	@ (800f924 <vTaskStartScheduler+0xc8>)
 800f896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f898:	4b22      	ldr	r3, [pc, #136]	@ (800f924 <vTaskStartScheduler+0xc8>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	617b      	str	r3, [r7, #20]
 800f8a4:	e001      	b.n	800f8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d102      	bne.n	800f8b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f8b0:	f000 fd1a 	bl	80102e8 <xTimerCreateTimerTask>
 800f8b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d11b      	bne.n	800f8f4 <vTaskStartScheduler+0x98>
	__asm volatile
 800f8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c0:	f383 8811 	msr	BASEPRI, r3
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	f3bf 8f4f 	dsb	sy
 800f8cc:	613b      	str	r3, [r7, #16]
}
 800f8ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8d0:	4b15      	ldr	r3, [pc, #84]	@ (800f928 <vTaskStartScheduler+0xcc>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3354      	adds	r3, #84	@ 0x54
 800f8d6:	4a15      	ldr	r2, [pc, #84]	@ (800f92c <vTaskStartScheduler+0xd0>)
 800f8d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8da:	4b15      	ldr	r3, [pc, #84]	@ (800f930 <vTaskStartScheduler+0xd4>)
 800f8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8e2:	4b14      	ldr	r3, [pc, #80]	@ (800f934 <vTaskStartScheduler+0xd8>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8e8:	4b13      	ldr	r3, [pc, #76]	@ (800f938 <vTaskStartScheduler+0xdc>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8ee:	f001 f8df 	bl	8010ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8f2:	e00f      	b.n	800f914 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fa:	d10b      	bne.n	800f914 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	60fb      	str	r3, [r7, #12]
}
 800f90e:	bf00      	nop
 800f910:	bf00      	nop
 800f912:	e7fd      	b.n	800f910 <vTaskStartScheduler+0xb4>
}
 800f914:	bf00      	nop
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	08013c44 	.word	0x08013c44
 800f920:	0800ff6d 	.word	0x0800ff6d
 800f924:	24000fec 	.word	0x24000fec
 800f928:	24000af4 	.word	0x24000af4
 800f92c:	24000114 	.word	0x24000114
 800f930:	24000fe8 	.word	0x24000fe8
 800f934:	24000fd4 	.word	0x24000fd4
 800f938:	24000fcc 	.word	0x24000fcc

0800f93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f93c:	b480      	push	{r7}
 800f93e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f940:	4b04      	ldr	r3, [pc, #16]	@ (800f954 <vTaskSuspendAll+0x18>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	3301      	adds	r3, #1
 800f946:	4a03      	ldr	r2, [pc, #12]	@ (800f954 <vTaskSuspendAll+0x18>)
 800f948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f94a:	bf00      	nop
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr
 800f954:	24000ff0 	.word	0x24000ff0

0800f958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f962:	2300      	movs	r3, #0
 800f964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f966:	4b42      	ldr	r3, [pc, #264]	@ (800fa70 <xTaskResumeAll+0x118>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10b      	bne.n	800f986 <xTaskResumeAll+0x2e>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	603b      	str	r3, [r7, #0]
}
 800f980:	bf00      	nop
 800f982:	bf00      	nop
 800f984:	e7fd      	b.n	800f982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f986:	f001 f937 	bl	8010bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f98a:	4b39      	ldr	r3, [pc, #228]	@ (800fa70 <xTaskResumeAll+0x118>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3b01      	subs	r3, #1
 800f990:	4a37      	ldr	r2, [pc, #220]	@ (800fa70 <xTaskResumeAll+0x118>)
 800f992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f994:	4b36      	ldr	r3, [pc, #216]	@ (800fa70 <xTaskResumeAll+0x118>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d162      	bne.n	800fa62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f99c:	4b35      	ldr	r3, [pc, #212]	@ (800fa74 <xTaskResumeAll+0x11c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d05e      	beq.n	800fa62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9a4:	e02f      	b.n	800fa06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9a6:	4b34      	ldr	r3, [pc, #208]	@ (800fa78 <xTaskResumeAll+0x120>)
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3318      	adds	r3, #24
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7ff f83a 	bl	800ea2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff f835 	bl	800ea2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800fa7c <xTaskResumeAll+0x124>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d903      	bls.n	800f9d6 <xTaskResumeAll+0x7e>
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d2:	4a2a      	ldr	r2, [pc, #168]	@ (800fa7c <xTaskResumeAll+0x124>)
 800f9d4:	6013      	str	r3, [r2, #0]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9da:	4613      	mov	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4a27      	ldr	r2, [pc, #156]	@ (800fa80 <xTaskResumeAll+0x128>)
 800f9e4:	441a      	add	r2, r3
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f7fe ffc0 	bl	800e972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9f6:	4b23      	ldr	r3, [pc, #140]	@ (800fa84 <xTaskResumeAll+0x12c>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d302      	bcc.n	800fa06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fa00:	4b21      	ldr	r3, [pc, #132]	@ (800fa88 <xTaskResumeAll+0x130>)
 800fa02:	2201      	movs	r2, #1
 800fa04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa06:	4b1c      	ldr	r3, [pc, #112]	@ (800fa78 <xTaskResumeAll+0x120>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1cb      	bne.n	800f9a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa14:	f000 fb66 	bl	80100e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa18:	4b1c      	ldr	r3, [pc, #112]	@ (800fa8c <xTaskResumeAll+0x134>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d010      	beq.n	800fa46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa24:	f000 f846 	bl	800fab4 <xTaskIncrementTick>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d002      	beq.n	800fa34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fa2e:	4b16      	ldr	r3, [pc, #88]	@ (800fa88 <xTaskResumeAll+0x130>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	3b01      	subs	r3, #1
 800fa38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1f1      	bne.n	800fa24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fa40:	4b12      	ldr	r3, [pc, #72]	@ (800fa8c <xTaskResumeAll+0x134>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa46:	4b10      	ldr	r3, [pc, #64]	@ (800fa88 <xTaskResumeAll+0x130>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d009      	beq.n	800fa62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa52:	4b0f      	ldr	r3, [pc, #60]	@ (800fa90 <xTaskResumeAll+0x138>)
 800fa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa62:	f001 f8fb 	bl	8010c5c <vPortExitCritical>

	return xAlreadyYielded;
 800fa66:	68bb      	ldr	r3, [r7, #8]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	24000ff0 	.word	0x24000ff0
 800fa74:	24000fc8 	.word	0x24000fc8
 800fa78:	24000f88 	.word	0x24000f88
 800fa7c:	24000fd0 	.word	0x24000fd0
 800fa80:	24000af8 	.word	0x24000af8
 800fa84:	24000af4 	.word	0x24000af4
 800fa88:	24000fdc 	.word	0x24000fdc
 800fa8c:	24000fd8 	.word	0x24000fd8
 800fa90:	e000ed04 	.word	0xe000ed04

0800fa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa9a:	4b05      	ldr	r3, [pc, #20]	@ (800fab0 <xTaskGetTickCount+0x1c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800faa0:	687b      	ldr	r3, [r7, #4]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	24000fcc 	.word	0x24000fcc

0800fab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b086      	sub	sp, #24
 800fab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800faba:	2300      	movs	r3, #0
 800fabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fabe:	4b4f      	ldr	r3, [pc, #316]	@ (800fbfc <xTaskIncrementTick+0x148>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f040 8090 	bne.w	800fbe8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fac8:	4b4d      	ldr	r3, [pc, #308]	@ (800fc00 <xTaskIncrementTick+0x14c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3301      	adds	r3, #1
 800face:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fad0:	4a4b      	ldr	r2, [pc, #300]	@ (800fc00 <xTaskIncrementTick+0x14c>)
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d121      	bne.n	800fb20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fadc:	4b49      	ldr	r3, [pc, #292]	@ (800fc04 <xTaskIncrementTick+0x150>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00b      	beq.n	800fafe <xTaskIncrementTick+0x4a>
	__asm volatile
 800fae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faea:	f383 8811 	msr	BASEPRI, r3
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	603b      	str	r3, [r7, #0]
}
 800faf8:	bf00      	nop
 800fafa:	bf00      	nop
 800fafc:	e7fd      	b.n	800fafa <xTaskIncrementTick+0x46>
 800fafe:	4b41      	ldr	r3, [pc, #260]	@ (800fc04 <xTaskIncrementTick+0x150>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	60fb      	str	r3, [r7, #12]
 800fb04:	4b40      	ldr	r3, [pc, #256]	@ (800fc08 <xTaskIncrementTick+0x154>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a3e      	ldr	r2, [pc, #248]	@ (800fc04 <xTaskIncrementTick+0x150>)
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	4a3e      	ldr	r2, [pc, #248]	@ (800fc08 <xTaskIncrementTick+0x154>)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	4b3e      	ldr	r3, [pc, #248]	@ (800fc0c <xTaskIncrementTick+0x158>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3301      	adds	r3, #1
 800fb18:	4a3c      	ldr	r2, [pc, #240]	@ (800fc0c <xTaskIncrementTick+0x158>)
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	f000 fae2 	bl	80100e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb20:	4b3b      	ldr	r3, [pc, #236]	@ (800fc10 <xTaskIncrementTick+0x15c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d349      	bcc.n	800fbbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb2a:	4b36      	ldr	r3, [pc, #216]	@ (800fc04 <xTaskIncrementTick+0x150>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d104      	bne.n	800fb3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb34:	4b36      	ldr	r3, [pc, #216]	@ (800fc10 <xTaskIncrementTick+0x15c>)
 800fb36:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3a:	601a      	str	r2, [r3, #0]
					break;
 800fb3c:	e03f      	b.n	800fbbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb3e:	4b31      	ldr	r3, [pc, #196]	@ (800fc04 <xTaskIncrementTick+0x150>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb4e:	693a      	ldr	r2, [r7, #16]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d203      	bcs.n	800fb5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb56:	4a2e      	ldr	r2, [pc, #184]	@ (800fc10 <xTaskIncrementTick+0x15c>)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb5c:	e02f      	b.n	800fbbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	3304      	adds	r3, #4
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe ff62 	bl	800ea2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d004      	beq.n	800fb7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	3318      	adds	r3, #24
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe ff59 	bl	800ea2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb7e:	4b25      	ldr	r3, [pc, #148]	@ (800fc14 <xTaskIncrementTick+0x160>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d903      	bls.n	800fb8e <xTaskIncrementTick+0xda>
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8a:	4a22      	ldr	r2, [pc, #136]	@ (800fc14 <xTaskIncrementTick+0x160>)
 800fb8c:	6013      	str	r3, [r2, #0]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb92:	4613      	mov	r3, r2
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	4413      	add	r3, r2
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4a1f      	ldr	r2, [pc, #124]	@ (800fc18 <xTaskIncrementTick+0x164>)
 800fb9c:	441a      	add	r2, r3
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	3304      	adds	r3, #4
 800fba2:	4619      	mov	r1, r3
 800fba4:	4610      	mov	r0, r2
 800fba6:	f7fe fee4 	bl	800e972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbae:	4b1b      	ldr	r3, [pc, #108]	@ (800fc1c <xTaskIncrementTick+0x168>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d3b8      	bcc.n	800fb2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbbc:	e7b5      	b.n	800fb2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbbe:	4b17      	ldr	r3, [pc, #92]	@ (800fc1c <xTaskIncrementTick+0x168>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbc4:	4914      	ldr	r1, [pc, #80]	@ (800fc18 <xTaskIncrementTick+0x164>)
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d901      	bls.n	800fbda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fbda:	4b11      	ldr	r3, [pc, #68]	@ (800fc20 <xTaskIncrementTick+0x16c>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d007      	beq.n	800fbf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	617b      	str	r3, [r7, #20]
 800fbe6:	e004      	b.n	800fbf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800fc24 <xTaskIncrementTick+0x170>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3301      	adds	r3, #1
 800fbee:	4a0d      	ldr	r2, [pc, #52]	@ (800fc24 <xTaskIncrementTick+0x170>)
 800fbf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fbf2:	697b      	ldr	r3, [r7, #20]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	24000ff0 	.word	0x24000ff0
 800fc00:	24000fcc 	.word	0x24000fcc
 800fc04:	24000f80 	.word	0x24000f80
 800fc08:	24000f84 	.word	0x24000f84
 800fc0c:	24000fe0 	.word	0x24000fe0
 800fc10:	24000fe8 	.word	0x24000fe8
 800fc14:	24000fd0 	.word	0x24000fd0
 800fc18:	24000af8 	.word	0x24000af8
 800fc1c:	24000af4 	.word	0x24000af4
 800fc20:	24000fdc 	.word	0x24000fdc
 800fc24:	24000fd8 	.word	0x24000fd8

0800fc28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc2e:	4b2b      	ldr	r3, [pc, #172]	@ (800fcdc <vTaskSwitchContext+0xb4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d003      	beq.n	800fc3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc36:	4b2a      	ldr	r3, [pc, #168]	@ (800fce0 <vTaskSwitchContext+0xb8>)
 800fc38:	2201      	movs	r2, #1
 800fc3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc3c:	e047      	b.n	800fcce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fc3e:	4b28      	ldr	r3, [pc, #160]	@ (800fce0 <vTaskSwitchContext+0xb8>)
 800fc40:	2200      	movs	r2, #0
 800fc42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc44:	4b27      	ldr	r3, [pc, #156]	@ (800fce4 <vTaskSwitchContext+0xbc>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	60fb      	str	r3, [r7, #12]
 800fc4a:	e011      	b.n	800fc70 <vTaskSwitchContext+0x48>
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d10b      	bne.n	800fc6a <vTaskSwitchContext+0x42>
	__asm volatile
 800fc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc56:	f383 8811 	msr	BASEPRI, r3
 800fc5a:	f3bf 8f6f 	isb	sy
 800fc5e:	f3bf 8f4f 	dsb	sy
 800fc62:	607b      	str	r3, [r7, #4]
}
 800fc64:	bf00      	nop
 800fc66:	bf00      	nop
 800fc68:	e7fd      	b.n	800fc66 <vTaskSwitchContext+0x3e>
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	60fb      	str	r3, [r7, #12]
 800fc70:	491d      	ldr	r1, [pc, #116]	@ (800fce8 <vTaskSwitchContext+0xc0>)
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	4613      	mov	r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	440b      	add	r3, r1
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0e3      	beq.n	800fc4c <vTaskSwitchContext+0x24>
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	4613      	mov	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	4413      	add	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	4a16      	ldr	r2, [pc, #88]	@ (800fce8 <vTaskSwitchContext+0xc0>)
 800fc90:	4413      	add	r3, r2
 800fc92:	60bb      	str	r3, [r7, #8]
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	685a      	ldr	r2, [r3, #4]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	605a      	str	r2, [r3, #4]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	3308      	adds	r3, #8
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d104      	bne.n	800fcb4 <vTaskSwitchContext+0x8c>
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	605a      	str	r2, [r3, #4]
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	4a0c      	ldr	r2, [pc, #48]	@ (800fcec <vTaskSwitchContext+0xc4>)
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	4a09      	ldr	r2, [pc, #36]	@ (800fce4 <vTaskSwitchContext+0xbc>)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcc4:	4b09      	ldr	r3, [pc, #36]	@ (800fcec <vTaskSwitchContext+0xc4>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3354      	adds	r3, #84	@ 0x54
 800fcca:	4a09      	ldr	r2, [pc, #36]	@ (800fcf0 <vTaskSwitchContext+0xc8>)
 800fccc:	6013      	str	r3, [r2, #0]
}
 800fcce:	bf00      	nop
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	24000ff0 	.word	0x24000ff0
 800fce0:	24000fdc 	.word	0x24000fdc
 800fce4:	24000fd0 	.word	0x24000fd0
 800fce8:	24000af8 	.word	0x24000af8
 800fcec:	24000af4 	.word	0x24000af4
 800fcf0:	24000114 	.word	0x24000114

0800fcf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d10b      	bne.n	800fd1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	60fb      	str	r3, [r7, #12]
}
 800fd16:	bf00      	nop
 800fd18:	bf00      	nop
 800fd1a:	e7fd      	b.n	800fd18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd1c:	4b07      	ldr	r3, [pc, #28]	@ (800fd3c <vTaskPlaceOnEventList+0x48>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3318      	adds	r3, #24
 800fd22:	4619      	mov	r1, r3
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7fe fe48 	bl	800e9ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd2a:	2101      	movs	r1, #1
 800fd2c:	6838      	ldr	r0, [r7, #0]
 800fd2e:	f000 fa87 	bl	8010240 <prvAddCurrentTaskToDelayedList>
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	24000af4 	.word	0x24000af4

0800fd40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d10b      	bne.n	800fd6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	617b      	str	r3, [r7, #20]
}
 800fd64:	bf00      	nop
 800fd66:	bf00      	nop
 800fd68:	e7fd      	b.n	800fd66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd94 <vTaskPlaceOnEventListRestricted+0x54>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3318      	adds	r3, #24
 800fd70:	4619      	mov	r1, r3
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7fe fdfd 	bl	800e972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800fd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	68b8      	ldr	r0, [r7, #8]
 800fd88:	f000 fa5a 	bl	8010240 <prvAddCurrentTaskToDelayedList>
	}
 800fd8c:	bf00      	nop
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	24000af4 	.word	0x24000af4

0800fd98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10b      	bne.n	800fdc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	60fb      	str	r3, [r7, #12]
}
 800fdc0:	bf00      	nop
 800fdc2:	bf00      	nop
 800fdc4:	e7fd      	b.n	800fdc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	3318      	adds	r3, #24
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe fe2e 	bl	800ea2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdd0:	4b1d      	ldr	r3, [pc, #116]	@ (800fe48 <xTaskRemoveFromEventList+0xb0>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d11d      	bne.n	800fe14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	3304      	adds	r3, #4
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fe25 	bl	800ea2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fde6:	4b19      	ldr	r3, [pc, #100]	@ (800fe4c <xTaskRemoveFromEventList+0xb4>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d903      	bls.n	800fdf6 <xTaskRemoveFromEventList+0x5e>
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf2:	4a16      	ldr	r2, [pc, #88]	@ (800fe4c <xTaskRemoveFromEventList+0xb4>)
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	4a13      	ldr	r2, [pc, #76]	@ (800fe50 <xTaskRemoveFromEventList+0xb8>)
 800fe04:	441a      	add	r2, r3
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	3304      	adds	r3, #4
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	f7fe fdb0 	bl	800e972 <vListInsertEnd>
 800fe12:	e005      	b.n	800fe20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	3318      	adds	r3, #24
 800fe18:	4619      	mov	r1, r3
 800fe1a:	480e      	ldr	r0, [pc, #56]	@ (800fe54 <xTaskRemoveFromEventList+0xbc>)
 800fe1c:	f7fe fda9 	bl	800e972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe24:	4b0c      	ldr	r3, [pc, #48]	@ (800fe58 <xTaskRemoveFromEventList+0xc0>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d905      	bls.n	800fe3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe32:	4b0a      	ldr	r3, [pc, #40]	@ (800fe5c <xTaskRemoveFromEventList+0xc4>)
 800fe34:	2201      	movs	r2, #1
 800fe36:	601a      	str	r2, [r3, #0]
 800fe38:	e001      	b.n	800fe3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe3e:	697b      	ldr	r3, [r7, #20]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3718      	adds	r7, #24
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	24000ff0 	.word	0x24000ff0
 800fe4c:	24000fd0 	.word	0x24000fd0
 800fe50:	24000af8 	.word	0x24000af8
 800fe54:	24000f88 	.word	0x24000f88
 800fe58:	24000af4 	.word	0x24000af4
 800fe5c:	24000fdc 	.word	0x24000fdc

0800fe60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe68:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <vTaskInternalSetTimeOutState+0x24>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe70:	4b05      	ldr	r3, [pc, #20]	@ (800fe88 <vTaskInternalSetTimeOutState+0x28>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	605a      	str	r2, [r3, #4]
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	24000fe0 	.word	0x24000fe0
 800fe88:	24000fcc 	.word	0x24000fcc

0800fe8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10b      	bne.n	800feb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fe9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea0:	f383 8811 	msr	BASEPRI, r3
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	f3bf 8f4f 	dsb	sy
 800feac:	613b      	str	r3, [r7, #16]
}
 800feae:	bf00      	nop
 800feb0:	bf00      	nop
 800feb2:	e7fd      	b.n	800feb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10b      	bne.n	800fed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	60fb      	str	r3, [r7, #12]
}
 800fecc:	bf00      	nop
 800fece:	bf00      	nop
 800fed0:	e7fd      	b.n	800fece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fed2:	f000 fe91 	bl	8010bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fed6:	4b1d      	ldr	r3, [pc, #116]	@ (800ff4c <xTaskCheckForTimeOut+0xc0>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feee:	d102      	bne.n	800fef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fef0:	2300      	movs	r3, #0
 800fef2:	61fb      	str	r3, [r7, #28]
 800fef4:	e023      	b.n	800ff3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	4b15      	ldr	r3, [pc, #84]	@ (800ff50 <xTaskCheckForTimeOut+0xc4>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d007      	beq.n	800ff12 <xTaskCheckForTimeOut+0x86>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	69ba      	ldr	r2, [r7, #24]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d302      	bcc.n	800ff12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	e015      	b.n	800ff3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	697a      	ldr	r2, [r7, #20]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d20b      	bcs.n	800ff34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	1ad2      	subs	r2, r2, r3
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7ff ff99 	bl	800fe60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	61fb      	str	r3, [r7, #28]
 800ff32:	e004      	b.n	800ff3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2200      	movs	r2, #0
 800ff38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff3e:	f000 fe8d 	bl	8010c5c <vPortExitCritical>

	return xReturn;
 800ff42:	69fb      	ldr	r3, [r7, #28]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3720      	adds	r7, #32
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	24000fcc 	.word	0x24000fcc
 800ff50:	24000fe0 	.word	0x24000fe0

0800ff54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff54:	b480      	push	{r7}
 800ff56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff58:	4b03      	ldr	r3, [pc, #12]	@ (800ff68 <vTaskMissedYield+0x14>)
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	601a      	str	r2, [r3, #0]
}
 800ff5e:	bf00      	nop
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	24000fdc 	.word	0x24000fdc

0800ff6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff74:	f000 f852 	bl	801001c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff78:	4b06      	ldr	r3, [pc, #24]	@ (800ff94 <prvIdleTask+0x28>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d9f9      	bls.n	800ff74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff80:	4b05      	ldr	r3, [pc, #20]	@ (800ff98 <prvIdleTask+0x2c>)
 800ff82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff86:	601a      	str	r2, [r3, #0]
 800ff88:	f3bf 8f4f 	dsb	sy
 800ff8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff90:	e7f0      	b.n	800ff74 <prvIdleTask+0x8>
 800ff92:	bf00      	nop
 800ff94:	24000af8 	.word	0x24000af8
 800ff98:	e000ed04 	.word	0xe000ed04

0800ff9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	607b      	str	r3, [r7, #4]
 800ffa6:	e00c      	b.n	800ffc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4a12      	ldr	r2, [pc, #72]	@ (800fffc <prvInitialiseTaskLists+0x60>)
 800ffb4:	4413      	add	r3, r2
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fcae 	bl	800e918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	607b      	str	r3, [r7, #4]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b37      	cmp	r3, #55	@ 0x37
 800ffc6:	d9ef      	bls.n	800ffa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffc8:	480d      	ldr	r0, [pc, #52]	@ (8010000 <prvInitialiseTaskLists+0x64>)
 800ffca:	f7fe fca5 	bl	800e918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffce:	480d      	ldr	r0, [pc, #52]	@ (8010004 <prvInitialiseTaskLists+0x68>)
 800ffd0:	f7fe fca2 	bl	800e918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffd4:	480c      	ldr	r0, [pc, #48]	@ (8010008 <prvInitialiseTaskLists+0x6c>)
 800ffd6:	f7fe fc9f 	bl	800e918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffda:	480c      	ldr	r0, [pc, #48]	@ (801000c <prvInitialiseTaskLists+0x70>)
 800ffdc:	f7fe fc9c 	bl	800e918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffe0:	480b      	ldr	r0, [pc, #44]	@ (8010010 <prvInitialiseTaskLists+0x74>)
 800ffe2:	f7fe fc99 	bl	800e918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffe6:	4b0b      	ldr	r3, [pc, #44]	@ (8010014 <prvInitialiseTaskLists+0x78>)
 800ffe8:	4a05      	ldr	r2, [pc, #20]	@ (8010000 <prvInitialiseTaskLists+0x64>)
 800ffea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffec:	4b0a      	ldr	r3, [pc, #40]	@ (8010018 <prvInitialiseTaskLists+0x7c>)
 800ffee:	4a05      	ldr	r2, [pc, #20]	@ (8010004 <prvInitialiseTaskLists+0x68>)
 800fff0:	601a      	str	r2, [r3, #0]
}
 800fff2:	bf00      	nop
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	24000af8 	.word	0x24000af8
 8010000:	24000f58 	.word	0x24000f58
 8010004:	24000f6c 	.word	0x24000f6c
 8010008:	24000f88 	.word	0x24000f88
 801000c:	24000f9c 	.word	0x24000f9c
 8010010:	24000fb4 	.word	0x24000fb4
 8010014:	24000f80 	.word	0x24000f80
 8010018:	24000f84 	.word	0x24000f84

0801001c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010022:	e019      	b.n	8010058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010024:	f000 fde8 	bl	8010bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010028:	4b10      	ldr	r3, [pc, #64]	@ (801006c <prvCheckTasksWaitingTermination+0x50>)
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	3304      	adds	r3, #4
 8010034:	4618      	mov	r0, r3
 8010036:	f7fe fcf9 	bl	800ea2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801003a:	4b0d      	ldr	r3, [pc, #52]	@ (8010070 <prvCheckTasksWaitingTermination+0x54>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3b01      	subs	r3, #1
 8010040:	4a0b      	ldr	r2, [pc, #44]	@ (8010070 <prvCheckTasksWaitingTermination+0x54>)
 8010042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010044:	4b0b      	ldr	r3, [pc, #44]	@ (8010074 <prvCheckTasksWaitingTermination+0x58>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	3b01      	subs	r3, #1
 801004a:	4a0a      	ldr	r2, [pc, #40]	@ (8010074 <prvCheckTasksWaitingTermination+0x58>)
 801004c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801004e:	f000 fe05 	bl	8010c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f810 	bl	8010078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010058:	4b06      	ldr	r3, [pc, #24]	@ (8010074 <prvCheckTasksWaitingTermination+0x58>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1e1      	bne.n	8010024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010060:	bf00      	nop
 8010062:	bf00      	nop
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	24000f9c 	.word	0x24000f9c
 8010070:	24000fc8 	.word	0x24000fc8
 8010074:	24000fb0 	.word	0x24000fb0

08010078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	3354      	adds	r3, #84	@ 0x54
 8010084:	4618      	mov	r0, r3
 8010086:	f002 fcd7 	bl	8012a38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010090:	2b00      	cmp	r3, #0
 8010092:	d108      	bne.n	80100a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010098:	4618      	mov	r0, r3
 801009a:	f000 ff9d 	bl	8010fd8 <vPortFree>
				vPortFree( pxTCB );
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 ff9a 	bl	8010fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80100a4:	e019      	b.n	80100da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d103      	bne.n	80100b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 ff91 	bl	8010fd8 <vPortFree>
	}
 80100b6:	e010      	b.n	80100da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d00b      	beq.n	80100da <prvDeleteTCB+0x62>
	__asm volatile
 80100c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	60fb      	str	r3, [r7, #12]
}
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop
 80100d8:	e7fd      	b.n	80100d6 <prvDeleteTCB+0x5e>
	}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
	...

080100e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100ea:	4b0c      	ldr	r3, [pc, #48]	@ (801011c <prvResetNextTaskUnblockTime+0x38>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d104      	bne.n	80100fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010120 <prvResetNextTaskUnblockTime+0x3c>)
 80100f6:	f04f 32ff 	mov.w	r2, #4294967295
 80100fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100fc:	e008      	b.n	8010110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100fe:	4b07      	ldr	r3, [pc, #28]	@ (801011c <prvResetNextTaskUnblockTime+0x38>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	4a04      	ldr	r2, [pc, #16]	@ (8010120 <prvResetNextTaskUnblockTime+0x3c>)
 801010e:	6013      	str	r3, [r2, #0]
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	24000f80 	.word	0x24000f80
 8010120:	24000fe8 	.word	0x24000fe8

08010124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801012a:	4b0b      	ldr	r3, [pc, #44]	@ (8010158 <xTaskGetSchedulerState+0x34>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d102      	bne.n	8010138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010132:	2301      	movs	r3, #1
 8010134:	607b      	str	r3, [r7, #4]
 8010136:	e008      	b.n	801014a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010138:	4b08      	ldr	r3, [pc, #32]	@ (801015c <xTaskGetSchedulerState+0x38>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d102      	bne.n	8010146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010140:	2302      	movs	r3, #2
 8010142:	607b      	str	r3, [r7, #4]
 8010144:	e001      	b.n	801014a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010146:	2300      	movs	r3, #0
 8010148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801014a:	687b      	ldr	r3, [r7, #4]
	}
 801014c:	4618      	mov	r0, r3
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	24000fd4 	.word	0x24000fd4
 801015c:	24000ff0 	.word	0x24000ff0

08010160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801016c:	2300      	movs	r3, #0
 801016e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d058      	beq.n	8010228 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010176:	4b2f      	ldr	r3, [pc, #188]	@ (8010234 <xTaskPriorityDisinherit+0xd4>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	429a      	cmp	r2, r3
 801017e:	d00b      	beq.n	8010198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	60fb      	str	r3, [r7, #12]
}
 8010192:	bf00      	nop
 8010194:	bf00      	nop
 8010196:	e7fd      	b.n	8010194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10b      	bne.n	80101b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	60bb      	str	r3, [r7, #8]
}
 80101b2:	bf00      	nop
 80101b4:	bf00      	nop
 80101b6:	e7fd      	b.n	80101b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101bc:	1e5a      	subs	r2, r3, #1
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d02c      	beq.n	8010228 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d128      	bne.n	8010228 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	3304      	adds	r3, #4
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fc26 	bl	800ea2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101f8:	4b0f      	ldr	r3, [pc, #60]	@ (8010238 <xTaskPriorityDisinherit+0xd8>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d903      	bls.n	8010208 <xTaskPriorityDisinherit+0xa8>
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010204:	4a0c      	ldr	r2, [pc, #48]	@ (8010238 <xTaskPriorityDisinherit+0xd8>)
 8010206:	6013      	str	r3, [r2, #0]
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801020c:	4613      	mov	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	4a09      	ldr	r2, [pc, #36]	@ (801023c <xTaskPriorityDisinherit+0xdc>)
 8010216:	441a      	add	r2, r3
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	3304      	adds	r3, #4
 801021c:	4619      	mov	r1, r3
 801021e:	4610      	mov	r0, r2
 8010220:	f7fe fba7 	bl	800e972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010224:	2301      	movs	r3, #1
 8010226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010228:	697b      	ldr	r3, [r7, #20]
	}
 801022a:	4618      	mov	r0, r3
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	24000af4 	.word	0x24000af4
 8010238:	24000fd0 	.word	0x24000fd0
 801023c:	24000af8 	.word	0x24000af8

08010240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801024a:	4b21      	ldr	r3, [pc, #132]	@ (80102d0 <prvAddCurrentTaskToDelayedList+0x90>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010250:	4b20      	ldr	r3, [pc, #128]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	3304      	adds	r3, #4
 8010256:	4618      	mov	r0, r3
 8010258:	f7fe fbe8 	bl	800ea2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010262:	d10a      	bne.n	801027a <prvAddCurrentTaskToDelayedList+0x3a>
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d007      	beq.n	801027a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801026a:	4b1a      	ldr	r3, [pc, #104]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3304      	adds	r3, #4
 8010270:	4619      	mov	r1, r3
 8010272:	4819      	ldr	r0, [pc, #100]	@ (80102d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010274:	f7fe fb7d 	bl	800e972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010278:	e026      	b.n	80102c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801027a:	68fa      	ldr	r2, [r7, #12]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4413      	add	r3, r2
 8010280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010282:	4b14      	ldr	r3, [pc, #80]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	429a      	cmp	r2, r3
 8010290:	d209      	bcs.n	80102a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010292:	4b12      	ldr	r3, [pc, #72]	@ (80102dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	4b0f      	ldr	r3, [pc, #60]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	3304      	adds	r3, #4
 801029c:	4619      	mov	r1, r3
 801029e:	4610      	mov	r0, r2
 80102a0:	f7fe fb8b 	bl	800e9ba <vListInsert>
}
 80102a4:	e010      	b.n	80102c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102a6:	4b0e      	ldr	r3, [pc, #56]	@ (80102e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	4b0a      	ldr	r3, [pc, #40]	@ (80102d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	3304      	adds	r3, #4
 80102b0:	4619      	mov	r1, r3
 80102b2:	4610      	mov	r0, r2
 80102b4:	f7fe fb81 	bl	800e9ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102b8:	4b0a      	ldr	r3, [pc, #40]	@ (80102e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d202      	bcs.n	80102c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102c2:	4a08      	ldr	r2, [pc, #32]	@ (80102e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	6013      	str	r3, [r2, #0]
}
 80102c8:	bf00      	nop
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	24000fcc 	.word	0x24000fcc
 80102d4:	24000af4 	.word	0x24000af4
 80102d8:	24000fb4 	.word	0x24000fb4
 80102dc:	24000f84 	.word	0x24000f84
 80102e0:	24000f80 	.word	0x24000f80
 80102e4:	24000fe8 	.word	0x24000fe8

080102e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08a      	sub	sp, #40	@ 0x28
 80102ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102f2:	f000 fb13 	bl	801091c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102f6:	4b1d      	ldr	r3, [pc, #116]	@ (801036c <xTimerCreateTimerTask+0x84>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d021      	beq.n	8010342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010306:	1d3a      	adds	r2, r7, #4
 8010308:	f107 0108 	add.w	r1, r7, #8
 801030c:	f107 030c 	add.w	r3, r7, #12
 8010310:	4618      	mov	r0, r3
 8010312:	f7fe fae7 	bl	800e8e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010316:	6879      	ldr	r1, [r7, #4]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	9202      	str	r2, [sp, #8]
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	2302      	movs	r3, #2
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	2300      	movs	r3, #0
 8010326:	460a      	mov	r2, r1
 8010328:	4911      	ldr	r1, [pc, #68]	@ (8010370 <xTimerCreateTimerTask+0x88>)
 801032a:	4812      	ldr	r0, [pc, #72]	@ (8010374 <xTimerCreateTimerTask+0x8c>)
 801032c:	f7ff f8a2 	bl	800f474 <xTaskCreateStatic>
 8010330:	4603      	mov	r3, r0
 8010332:	4a11      	ldr	r2, [pc, #68]	@ (8010378 <xTimerCreateTimerTask+0x90>)
 8010334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010336:	4b10      	ldr	r3, [pc, #64]	@ (8010378 <xTimerCreateTimerTask+0x90>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801033e:	2301      	movs	r3, #1
 8010340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10b      	bne.n	8010360 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	613b      	str	r3, [r7, #16]
}
 801035a:	bf00      	nop
 801035c:	bf00      	nop
 801035e:	e7fd      	b.n	801035c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010360:	697b      	ldr	r3, [r7, #20]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	24001024 	.word	0x24001024
 8010370:	08013c4c 	.word	0x08013c4c
 8010374:	080104b5 	.word	0x080104b5
 8010378:	24001028 	.word	0x24001028

0801037c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b08a      	sub	sp, #40	@ 0x28
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801038a:	2300      	movs	r3, #0
 801038c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10b      	bne.n	80103ac <xTimerGenericCommand+0x30>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	623b      	str	r3, [r7, #32]
}
 80103a6:	bf00      	nop
 80103a8:	bf00      	nop
 80103aa:	e7fd      	b.n	80103a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80103ac:	4b19      	ldr	r3, [pc, #100]	@ (8010414 <xTimerGenericCommand+0x98>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d02a      	beq.n	801040a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b05      	cmp	r3, #5
 80103c4:	dc18      	bgt.n	80103f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103c6:	f7ff fead 	bl	8010124 <xTaskGetSchedulerState>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d109      	bne.n	80103e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103d0:	4b10      	ldr	r3, [pc, #64]	@ (8010414 <xTimerGenericCommand+0x98>)
 80103d2:	6818      	ldr	r0, [r3, #0]
 80103d4:	f107 0110 	add.w	r1, r7, #16
 80103d8:	2300      	movs	r3, #0
 80103da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103dc:	f7fe fc5a 	bl	800ec94 <xQueueGenericSend>
 80103e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80103e2:	e012      	b.n	801040a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010414 <xTimerGenericCommand+0x98>)
 80103e6:	6818      	ldr	r0, [r3, #0]
 80103e8:	f107 0110 	add.w	r1, r7, #16
 80103ec:	2300      	movs	r3, #0
 80103ee:	2200      	movs	r2, #0
 80103f0:	f7fe fc50 	bl	800ec94 <xQueueGenericSend>
 80103f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80103f6:	e008      	b.n	801040a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103f8:	4b06      	ldr	r3, [pc, #24]	@ (8010414 <xTimerGenericCommand+0x98>)
 80103fa:	6818      	ldr	r0, [r3, #0]
 80103fc:	f107 0110 	add.w	r1, r7, #16
 8010400:	2300      	movs	r3, #0
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	f7fe fd48 	bl	800ee98 <xQueueGenericSendFromISR>
 8010408:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801040a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801040c:	4618      	mov	r0, r3
 801040e:	3728      	adds	r7, #40	@ 0x28
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	24001024 	.word	0x24001024

08010418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af02      	add	r7, sp, #8
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010422:	4b23      	ldr	r3, [pc, #140]	@ (80104b0 <prvProcessExpiredTimer+0x98>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	3304      	adds	r3, #4
 8010430:	4618      	mov	r0, r3
 8010432:	f7fe fafb 	bl	800ea2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801043c:	f003 0304 	and.w	r3, r3, #4
 8010440:	2b00      	cmp	r3, #0
 8010442:	d023      	beq.n	801048c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	699a      	ldr	r2, [r3, #24]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	18d1      	adds	r1, r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	6978      	ldr	r0, [r7, #20]
 8010452:	f000 f8d5 	bl	8010600 <prvInsertTimerInActiveList>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d020      	beq.n	801049e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801045c:	2300      	movs	r3, #0
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	2300      	movs	r3, #0
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	2100      	movs	r1, #0
 8010466:	6978      	ldr	r0, [r7, #20]
 8010468:	f7ff ff88 	bl	801037c <xTimerGenericCommand>
 801046c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d114      	bne.n	801049e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	60fb      	str	r3, [r7, #12]
}
 8010486:	bf00      	nop
 8010488:	bf00      	nop
 801048a:	e7fd      	b.n	8010488 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010492:	f023 0301 	bic.w	r3, r3, #1
 8010496:	b2da      	uxtb	r2, r3
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	6978      	ldr	r0, [r7, #20]
 80104a4:	4798      	blx	r3
}
 80104a6:	bf00      	nop
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	2400101c 	.word	0x2400101c

080104b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104bc:	f107 0308 	add.w	r3, r7, #8
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 f859 	bl	8010578 <prvGetNextExpireTime>
 80104c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	4619      	mov	r1, r3
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f000 f805 	bl	80104dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104d2:	f000 f8d7 	bl	8010684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104d6:	bf00      	nop
 80104d8:	e7f0      	b.n	80104bc <prvTimerTask+0x8>
	...

080104dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104e6:	f7ff fa29 	bl	800f93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104ea:	f107 0308 	add.w	r3, r7, #8
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 f866 	bl	80105c0 <prvSampleTimeNow>
 80104f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d130      	bne.n	801055e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10a      	bne.n	8010518 <prvProcessTimerOrBlockTask+0x3c>
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	429a      	cmp	r2, r3
 8010508:	d806      	bhi.n	8010518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801050a:	f7ff fa25 	bl	800f958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801050e:	68f9      	ldr	r1, [r7, #12]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff ff81 	bl	8010418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010516:	e024      	b.n	8010562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d008      	beq.n	8010530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801051e:	4b13      	ldr	r3, [pc, #76]	@ (801056c <prvProcessTimerOrBlockTask+0x90>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d101      	bne.n	801052c <prvProcessTimerOrBlockTask+0x50>
 8010528:	2301      	movs	r3, #1
 801052a:	e000      	b.n	801052e <prvProcessTimerOrBlockTask+0x52>
 801052c:	2300      	movs	r3, #0
 801052e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010530:	4b0f      	ldr	r3, [pc, #60]	@ (8010570 <prvProcessTimerOrBlockTask+0x94>)
 8010532:	6818      	ldr	r0, [r3, #0]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	4619      	mov	r1, r3
 801053e:	f7fe ff65 	bl	800f40c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010542:	f7ff fa09 	bl	800f958 <xTaskResumeAll>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10a      	bne.n	8010562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801054c:	4b09      	ldr	r3, [pc, #36]	@ (8010574 <prvProcessTimerOrBlockTask+0x98>)
 801054e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010552:	601a      	str	r2, [r3, #0]
 8010554:	f3bf 8f4f 	dsb	sy
 8010558:	f3bf 8f6f 	isb	sy
}
 801055c:	e001      	b.n	8010562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801055e:	f7ff f9fb 	bl	800f958 <xTaskResumeAll>
}
 8010562:	bf00      	nop
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	24001020 	.word	0x24001020
 8010570:	24001024 	.word	0x24001024
 8010574:	e000ed04 	.word	0xe000ed04

08010578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010580:	4b0e      	ldr	r3, [pc, #56]	@ (80105bc <prvGetNextExpireTime+0x44>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d101      	bne.n	801058e <prvGetNextExpireTime+0x16>
 801058a:	2201      	movs	r2, #1
 801058c:	e000      	b.n	8010590 <prvGetNextExpireTime+0x18>
 801058e:	2200      	movs	r2, #0
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d105      	bne.n	80105a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801059c:	4b07      	ldr	r3, [pc, #28]	@ (80105bc <prvGetNextExpireTime+0x44>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	60fb      	str	r3, [r7, #12]
 80105a6:	e001      	b.n	80105ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80105a8:	2300      	movs	r3, #0
 80105aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80105ac:	68fb      	ldr	r3, [r7, #12]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3714      	adds	r7, #20
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	2400101c 	.word	0x2400101c

080105c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105c8:	f7ff fa64 	bl	800fa94 <xTaskGetTickCount>
 80105cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105ce:	4b0b      	ldr	r3, [pc, #44]	@ (80105fc <prvSampleTimeNow+0x3c>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d205      	bcs.n	80105e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105d8:	f000 f93a 	bl	8010850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	e002      	b.n	80105ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105ea:	4a04      	ldr	r2, [pc, #16]	@ (80105fc <prvSampleTimeNow+0x3c>)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105f0:	68fb      	ldr	r3, [r7, #12]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	2400102c 	.word	0x2400102c

08010600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801060e:	2300      	movs	r3, #0
 8010610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801061e:	68ba      	ldr	r2, [r7, #8]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d812      	bhi.n	801064c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	1ad2      	subs	r2, r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	699b      	ldr	r3, [r3, #24]
 8010630:	429a      	cmp	r2, r3
 8010632:	d302      	bcc.n	801063a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e01b      	b.n	8010672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801063a:	4b10      	ldr	r3, [pc, #64]	@ (801067c <prvInsertTimerInActiveList+0x7c>)
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	3304      	adds	r3, #4
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f7fe f9b8 	bl	800e9ba <vListInsert>
 801064a:	e012      	b.n	8010672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	429a      	cmp	r2, r3
 8010652:	d206      	bcs.n	8010662 <prvInsertTimerInActiveList+0x62>
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	429a      	cmp	r2, r3
 801065a:	d302      	bcc.n	8010662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801065c:	2301      	movs	r3, #1
 801065e:	617b      	str	r3, [r7, #20]
 8010660:	e007      	b.n	8010672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010662:	4b07      	ldr	r3, [pc, #28]	@ (8010680 <prvInsertTimerInActiveList+0x80>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	3304      	adds	r3, #4
 801066a:	4619      	mov	r1, r3
 801066c:	4610      	mov	r0, r2
 801066e:	f7fe f9a4 	bl	800e9ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010672:	697b      	ldr	r3, [r7, #20]
}
 8010674:	4618      	mov	r0, r3
 8010676:	3718      	adds	r7, #24
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	24001020 	.word	0x24001020
 8010680:	2400101c 	.word	0x2400101c

08010684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b08e      	sub	sp, #56	@ 0x38
 8010688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801068a:	e0ce      	b.n	801082a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	da19      	bge.n	80106c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010692:	1d3b      	adds	r3, r7, #4
 8010694:	3304      	adds	r3, #4
 8010696:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10b      	bne.n	80106b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	61fb      	str	r3, [r7, #28]
}
 80106b0:	bf00      	nop
 80106b2:	bf00      	nop
 80106b4:	e7fd      	b.n	80106b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80106b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106bc:	6850      	ldr	r0, [r2, #4]
 80106be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106c0:	6892      	ldr	r2, [r2, #8]
 80106c2:	4611      	mov	r1, r2
 80106c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f2c0 80ae 	blt.w	801082a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d4:	695b      	ldr	r3, [r3, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d004      	beq.n	80106e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106dc:	3304      	adds	r3, #4
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fe f9a4 	bl	800ea2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106e4:	463b      	mov	r3, r7
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7ff ff6a 	bl	80105c0 <prvSampleTimeNow>
 80106ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b09      	cmp	r3, #9
 80106f2:	f200 8097 	bhi.w	8010824 <prvProcessReceivedCommands+0x1a0>
 80106f6:	a201      	add	r2, pc, #4	@ (adr r2, 80106fc <prvProcessReceivedCommands+0x78>)
 80106f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106fc:	08010725 	.word	0x08010725
 8010700:	08010725 	.word	0x08010725
 8010704:	08010725 	.word	0x08010725
 8010708:	0801079b 	.word	0x0801079b
 801070c:	080107af 	.word	0x080107af
 8010710:	080107fb 	.word	0x080107fb
 8010714:	08010725 	.word	0x08010725
 8010718:	08010725 	.word	0x08010725
 801071c:	0801079b 	.word	0x0801079b
 8010720:	080107af 	.word	0x080107af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801072a:	f043 0301 	orr.w	r3, r3, #1
 801072e:	b2da      	uxtb	r2, r3
 8010730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073a:	699b      	ldr	r3, [r3, #24]
 801073c:	18d1      	adds	r1, r2, r3
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010744:	f7ff ff5c 	bl	8010600 <prvInsertTimerInActiveList>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	d06c      	beq.n	8010828 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801074e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010750:	6a1b      	ldr	r3, [r3, #32]
 8010752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801075c:	f003 0304 	and.w	r3, r3, #4
 8010760:	2b00      	cmp	r3, #0
 8010762:	d061      	beq.n	8010828 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010768:	699b      	ldr	r3, [r3, #24]
 801076a:	441a      	add	r2, r3
 801076c:	2300      	movs	r3, #0
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	2300      	movs	r3, #0
 8010772:	2100      	movs	r1, #0
 8010774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010776:	f7ff fe01 	bl	801037c <xTimerGenericCommand>
 801077a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801077c:	6a3b      	ldr	r3, [r7, #32]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d152      	bne.n	8010828 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	61bb      	str	r3, [r7, #24]
}
 8010794:	bf00      	nop
 8010796:	bf00      	nop
 8010798:	e7fd      	b.n	8010796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801079a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107a0:	f023 0301 	bic.w	r3, r3, #1
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80107ac:	e03d      	b.n	801082a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107b4:	f043 0301 	orr.w	r3, r3, #1
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c8:	699b      	ldr	r3, [r3, #24]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d10b      	bne.n	80107e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	617b      	str	r3, [r7, #20]
}
 80107e0:	bf00      	nop
 80107e2:	bf00      	nop
 80107e4:	e7fd      	b.n	80107e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e8:	699a      	ldr	r2, [r3, #24]
 80107ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ec:	18d1      	adds	r1, r2, r3
 80107ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107f4:	f7ff ff04 	bl	8010600 <prvInsertTimerInActiveList>
					break;
 80107f8:	e017      	b.n	801082a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010800:	f003 0302 	and.w	r3, r3, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	d103      	bne.n	8010810 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801080a:	f000 fbe5 	bl	8010fd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801080e:	e00c      	b.n	801082a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010816:	f023 0301 	bic.w	r3, r3, #1
 801081a:	b2da      	uxtb	r2, r3
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010822:	e002      	b.n	801082a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010824:	bf00      	nop
 8010826:	e000      	b.n	801082a <prvProcessReceivedCommands+0x1a6>
					break;
 8010828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801082a:	4b08      	ldr	r3, [pc, #32]	@ (801084c <prvProcessReceivedCommands+0x1c8>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	1d39      	adds	r1, r7, #4
 8010830:	2200      	movs	r2, #0
 8010832:	4618      	mov	r0, r3
 8010834:	f7fe fbce 	bl	800efd4 <xQueueReceive>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	f47f af26 	bne.w	801068c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010840:	bf00      	nop
 8010842:	bf00      	nop
 8010844:	3730      	adds	r7, #48	@ 0x30
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	24001024 	.word	0x24001024

08010850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b088      	sub	sp, #32
 8010854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010856:	e049      	b.n	80108ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010858:	4b2e      	ldr	r3, [pc, #184]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010862:	4b2c      	ldr	r3, [pc, #176]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3304      	adds	r3, #4
 8010870:	4618      	mov	r0, r3
 8010872:	f7fe f8db 	bl	800ea2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010884:	f003 0304 	and.w	r3, r3, #4
 8010888:	2b00      	cmp	r3, #0
 801088a:	d02f      	beq.n	80108ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	699b      	ldr	r3, [r3, #24]
 8010890:	693a      	ldr	r2, [r7, #16]
 8010892:	4413      	add	r3, r2
 8010894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	429a      	cmp	r2, r3
 801089c:	d90e      	bls.n	80108bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80108aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	3304      	adds	r3, #4
 80108b2:	4619      	mov	r1, r3
 80108b4:	4610      	mov	r0, r2
 80108b6:	f7fe f880 	bl	800e9ba <vListInsert>
 80108ba:	e017      	b.n	80108ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108bc:	2300      	movs	r3, #0
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	2300      	movs	r3, #0
 80108c2:	693a      	ldr	r2, [r7, #16]
 80108c4:	2100      	movs	r1, #0
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f7ff fd58 	bl	801037c <xTimerGenericCommand>
 80108cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d10b      	bne.n	80108ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80108d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	603b      	str	r3, [r7, #0]
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	e7fd      	b.n	80108e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108ec:	4b09      	ldr	r3, [pc, #36]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1b0      	bne.n	8010858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108f6:	4b07      	ldr	r3, [pc, #28]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108fc:	4b06      	ldr	r3, [pc, #24]	@ (8010918 <prvSwitchTimerLists+0xc8>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a04      	ldr	r2, [pc, #16]	@ (8010914 <prvSwitchTimerLists+0xc4>)
 8010902:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010904:	4a04      	ldr	r2, [pc, #16]	@ (8010918 <prvSwitchTimerLists+0xc8>)
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	6013      	str	r3, [r2, #0]
}
 801090a:	bf00      	nop
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	2400101c 	.word	0x2400101c
 8010918:	24001020 	.word	0x24001020

0801091c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010922:	f000 f969 	bl	8010bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010926:	4b15      	ldr	r3, [pc, #84]	@ (801097c <prvCheckForValidListAndQueue+0x60>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d120      	bne.n	8010970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801092e:	4814      	ldr	r0, [pc, #80]	@ (8010980 <prvCheckForValidListAndQueue+0x64>)
 8010930:	f7fd fff2 	bl	800e918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010934:	4813      	ldr	r0, [pc, #76]	@ (8010984 <prvCheckForValidListAndQueue+0x68>)
 8010936:	f7fd ffef 	bl	800e918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801093a:	4b13      	ldr	r3, [pc, #76]	@ (8010988 <prvCheckForValidListAndQueue+0x6c>)
 801093c:	4a10      	ldr	r2, [pc, #64]	@ (8010980 <prvCheckForValidListAndQueue+0x64>)
 801093e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010940:	4b12      	ldr	r3, [pc, #72]	@ (801098c <prvCheckForValidListAndQueue+0x70>)
 8010942:	4a10      	ldr	r2, [pc, #64]	@ (8010984 <prvCheckForValidListAndQueue+0x68>)
 8010944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010946:	2300      	movs	r3, #0
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	4b11      	ldr	r3, [pc, #68]	@ (8010990 <prvCheckForValidListAndQueue+0x74>)
 801094c:	4a11      	ldr	r2, [pc, #68]	@ (8010994 <prvCheckForValidListAndQueue+0x78>)
 801094e:	2110      	movs	r1, #16
 8010950:	200a      	movs	r0, #10
 8010952:	f7fe f8ff 	bl	800eb54 <xQueueGenericCreateStatic>
 8010956:	4603      	mov	r3, r0
 8010958:	4a08      	ldr	r2, [pc, #32]	@ (801097c <prvCheckForValidListAndQueue+0x60>)
 801095a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801095c:	4b07      	ldr	r3, [pc, #28]	@ (801097c <prvCheckForValidListAndQueue+0x60>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d005      	beq.n	8010970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010964:	4b05      	ldr	r3, [pc, #20]	@ (801097c <prvCheckForValidListAndQueue+0x60>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	490b      	ldr	r1, [pc, #44]	@ (8010998 <prvCheckForValidListAndQueue+0x7c>)
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe fd24 	bl	800f3b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010970:	f000 f974 	bl	8010c5c <vPortExitCritical>
}
 8010974:	bf00      	nop
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	24001024 	.word	0x24001024
 8010980:	24000ff4 	.word	0x24000ff4
 8010984:	24001008 	.word	0x24001008
 8010988:	2400101c 	.word	0x2400101c
 801098c:	24001020 	.word	0x24001020
 8010990:	240010d0 	.word	0x240010d0
 8010994:	24001030 	.word	0x24001030
 8010998:	08013c54 	.word	0x08013c54

0801099c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	3b04      	subs	r3, #4
 80109ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80109b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3b04      	subs	r3, #4
 80109ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	f023 0201 	bic.w	r2, r3, #1
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3b04      	subs	r3, #4
 80109ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80109cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010a00 <pxPortInitialiseStack+0x64>)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3b14      	subs	r3, #20
 80109d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3b04      	subs	r3, #4
 80109e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f06f 0202 	mvn.w	r2, #2
 80109ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	3b20      	subs	r3, #32
 80109f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109f2:	68fb      	ldr	r3, [r7, #12]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	08010a05 	.word	0x08010a05

08010a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010a04:	b480      	push	{r7}
 8010a06:	b085      	sub	sp, #20
 8010a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a0e:	4b13      	ldr	r3, [pc, #76]	@ (8010a5c <prvTaskExitError+0x58>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a16:	d00b      	beq.n	8010a30 <prvTaskExitError+0x2c>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	60fb      	str	r3, [r7, #12]
}
 8010a2a:	bf00      	nop
 8010a2c:	bf00      	nop
 8010a2e:	e7fd      	b.n	8010a2c <prvTaskExitError+0x28>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a34:	f383 8811 	msr	BASEPRI, r3
 8010a38:	f3bf 8f6f 	isb	sy
 8010a3c:	f3bf 8f4f 	dsb	sy
 8010a40:	60bb      	str	r3, [r7, #8]
}
 8010a42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a44:	bf00      	nop
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d0fc      	beq.n	8010a46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a4c:	bf00      	nop
 8010a4e:	bf00      	nop
 8010a50:	3714      	adds	r7, #20
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	2400009c 	.word	0x2400009c

08010a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a60:	4b07      	ldr	r3, [pc, #28]	@ (8010a80 <pxCurrentTCBConst2>)
 8010a62:	6819      	ldr	r1, [r3, #0]
 8010a64:	6808      	ldr	r0, [r1, #0]
 8010a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6a:	f380 8809 	msr	PSP, r0
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f04f 0000 	mov.w	r0, #0
 8010a76:	f380 8811 	msr	BASEPRI, r0
 8010a7a:	4770      	bx	lr
 8010a7c:	f3af 8000 	nop.w

08010a80 <pxCurrentTCBConst2>:
 8010a80:	24000af4 	.word	0x24000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a84:	bf00      	nop
 8010a86:	bf00      	nop

08010a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a88:	4808      	ldr	r0, [pc, #32]	@ (8010aac <prvPortStartFirstTask+0x24>)
 8010a8a:	6800      	ldr	r0, [r0, #0]
 8010a8c:	6800      	ldr	r0, [r0, #0]
 8010a8e:	f380 8808 	msr	MSP, r0
 8010a92:	f04f 0000 	mov.w	r0, #0
 8010a96:	f380 8814 	msr	CONTROL, r0
 8010a9a:	b662      	cpsie	i
 8010a9c:	b661      	cpsie	f
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	df00      	svc	0
 8010aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010aaa:	bf00      	nop
 8010aac:	e000ed08 	.word	0xe000ed08

08010ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ab6:	4b47      	ldr	r3, [pc, #284]	@ (8010bd4 <xPortStartScheduler+0x124>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4a47      	ldr	r2, [pc, #284]	@ (8010bd8 <xPortStartScheduler+0x128>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d10b      	bne.n	8010ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8010ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac4:	f383 8811 	msr	BASEPRI, r3
 8010ac8:	f3bf 8f6f 	isb	sy
 8010acc:	f3bf 8f4f 	dsb	sy
 8010ad0:	60fb      	str	r3, [r7, #12]
}
 8010ad2:	bf00      	nop
 8010ad4:	bf00      	nop
 8010ad6:	e7fd      	b.n	8010ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8010bd4 <xPortStartScheduler+0x124>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a3f      	ldr	r2, [pc, #252]	@ (8010bdc <xPortStartScheduler+0x12c>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d10b      	bne.n	8010afa <xPortStartScheduler+0x4a>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	613b      	str	r3, [r7, #16]
}
 8010af4:	bf00      	nop
 8010af6:	bf00      	nop
 8010af8:	e7fd      	b.n	8010af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010afa:	4b39      	ldr	r3, [pc, #228]	@ (8010be0 <xPortStartScheduler+0x130>)
 8010afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	22ff      	movs	r2, #255	@ 0xff
 8010b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	4b31      	ldr	r3, [pc, #196]	@ (8010be4 <xPortStartScheduler+0x134>)
 8010b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010b22:	4b31      	ldr	r3, [pc, #196]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b24:	2207      	movs	r2, #7
 8010b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b28:	e009      	b.n	8010b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	4a2d      	ldr	r2, [pc, #180]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010b34:	78fb      	ldrb	r3, [r7, #3]
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b3e:	78fb      	ldrb	r3, [r7, #3]
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b46:	2b80      	cmp	r3, #128	@ 0x80
 8010b48:	d0ef      	beq.n	8010b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b4a:	4b27      	ldr	r3, [pc, #156]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f1c3 0307 	rsb	r3, r3, #7
 8010b52:	2b04      	cmp	r3, #4
 8010b54:	d00b      	beq.n	8010b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8010b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b5a:	f383 8811 	msr	BASEPRI, r3
 8010b5e:	f3bf 8f6f 	isb	sy
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	60bb      	str	r3, [r7, #8]
}
 8010b68:	bf00      	nop
 8010b6a:	bf00      	nop
 8010b6c:	e7fd      	b.n	8010b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	021b      	lsls	r3, r3, #8
 8010b74:	4a1c      	ldr	r2, [pc, #112]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b78:	4b1b      	ldr	r3, [pc, #108]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010b80:	4a19      	ldr	r2, [pc, #100]	@ (8010be8 <xPortStartScheduler+0x138>)
 8010b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	b2da      	uxtb	r2, r3
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b8c:	4b17      	ldr	r3, [pc, #92]	@ (8010bec <xPortStartScheduler+0x13c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a16      	ldr	r2, [pc, #88]	@ (8010bec <xPortStartScheduler+0x13c>)
 8010b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b98:	4b14      	ldr	r3, [pc, #80]	@ (8010bec <xPortStartScheduler+0x13c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4a13      	ldr	r2, [pc, #76]	@ (8010bec <xPortStartScheduler+0x13c>)
 8010b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ba4:	f000 f8da 	bl	8010d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ba8:	4b11      	ldr	r3, [pc, #68]	@ (8010bf0 <xPortStartScheduler+0x140>)
 8010baa:	2200      	movs	r2, #0
 8010bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010bae:	f000 f8f9 	bl	8010da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010bb2:	4b10      	ldr	r3, [pc, #64]	@ (8010bf4 <xPortStartScheduler+0x144>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8010bf4 <xPortStartScheduler+0x144>)
 8010bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010bbe:	f7ff ff63 	bl	8010a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010bc2:	f7ff f831 	bl	800fc28 <vTaskSwitchContext>
	prvTaskExitError();
 8010bc6:	f7ff ff1d 	bl	8010a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010bca:	2300      	movs	r3, #0
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3718      	adds	r7, #24
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	e000ed00 	.word	0xe000ed00
 8010bd8:	410fc271 	.word	0x410fc271
 8010bdc:	410fc270 	.word	0x410fc270
 8010be0:	e000e400 	.word	0xe000e400
 8010be4:	24001120 	.word	0x24001120
 8010be8:	24001124 	.word	0x24001124
 8010bec:	e000ed20 	.word	0xe000ed20
 8010bf0:	2400009c 	.word	0x2400009c
 8010bf4:	e000ef34 	.word	0xe000ef34

08010bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	607b      	str	r3, [r7, #4]
}
 8010c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010c12:	4b10      	ldr	r3, [pc, #64]	@ (8010c54 <vPortEnterCritical+0x5c>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3301      	adds	r3, #1
 8010c18:	4a0e      	ldr	r2, [pc, #56]	@ (8010c54 <vPortEnterCritical+0x5c>)
 8010c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8010c54 <vPortEnterCritical+0x5c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d110      	bne.n	8010c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010c24:	4b0c      	ldr	r3, [pc, #48]	@ (8010c58 <vPortEnterCritical+0x60>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	603b      	str	r3, [r7, #0]
}
 8010c40:	bf00      	nop
 8010c42:	bf00      	nop
 8010c44:	e7fd      	b.n	8010c42 <vPortEnterCritical+0x4a>
	}
}
 8010c46:	bf00      	nop
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	2400009c 	.word	0x2400009c
 8010c58:	e000ed04 	.word	0xe000ed04

08010c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c62:	4b12      	ldr	r3, [pc, #72]	@ (8010cac <vPortExitCritical+0x50>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d10b      	bne.n	8010c82 <vPortExitCritical+0x26>
	__asm volatile
 8010c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c6e:	f383 8811 	msr	BASEPRI, r3
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	607b      	str	r3, [r7, #4]
}
 8010c7c:	bf00      	nop
 8010c7e:	bf00      	nop
 8010c80:	e7fd      	b.n	8010c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c82:	4b0a      	ldr	r3, [pc, #40]	@ (8010cac <vPortExitCritical+0x50>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	4a08      	ldr	r2, [pc, #32]	@ (8010cac <vPortExitCritical+0x50>)
 8010c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c8c:	4b07      	ldr	r3, [pc, #28]	@ (8010cac <vPortExitCritical+0x50>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d105      	bne.n	8010ca0 <vPortExitCritical+0x44>
 8010c94:	2300      	movs	r3, #0
 8010c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	f383 8811 	msr	BASEPRI, r3
}
 8010c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010ca0:	bf00      	nop
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr
 8010cac:	2400009c 	.word	0x2400009c

08010cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010cb0:	f3ef 8009 	mrs	r0, PSP
 8010cb4:	f3bf 8f6f 	isb	sy
 8010cb8:	4b15      	ldr	r3, [pc, #84]	@ (8010d10 <pxCurrentTCBConst>)
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	f01e 0f10 	tst.w	lr, #16
 8010cc0:	bf08      	it	eq
 8010cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cca:	6010      	str	r0, [r2, #0]
 8010ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010cd4:	f380 8811 	msr	BASEPRI, r0
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f7fe ffa2 	bl	800fc28 <vTaskSwitchContext>
 8010ce4:	f04f 0000 	mov.w	r0, #0
 8010ce8:	f380 8811 	msr	BASEPRI, r0
 8010cec:	bc09      	pop	{r0, r3}
 8010cee:	6819      	ldr	r1, [r3, #0]
 8010cf0:	6808      	ldr	r0, [r1, #0]
 8010cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf6:	f01e 0f10 	tst.w	lr, #16
 8010cfa:	bf08      	it	eq
 8010cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010d00:	f380 8809 	msr	PSP, r0
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	f3af 8000 	nop.w

08010d10 <pxCurrentTCBConst>:
 8010d10:	24000af4 	.word	0x24000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010d14:	bf00      	nop
 8010d16:	bf00      	nop

08010d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	607b      	str	r3, [r7, #4]
}
 8010d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d32:	f7fe febf 	bl	800fab4 <xTaskIncrementTick>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d3c:	4b06      	ldr	r3, [pc, #24]	@ (8010d58 <xPortSysTickHandler+0x40>)
 8010d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	2300      	movs	r3, #0
 8010d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	f383 8811 	msr	BASEPRI, r3
}
 8010d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	e000ed04 	.word	0xe000ed04

08010d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d60:	4b0b      	ldr	r3, [pc, #44]	@ (8010d90 <vPortSetupTimerInterrupt+0x34>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d66:	4b0b      	ldr	r3, [pc, #44]	@ (8010d94 <vPortSetupTimerInterrupt+0x38>)
 8010d68:	2200      	movs	r2, #0
 8010d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d98 <vPortSetupTimerInterrupt+0x3c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a0a      	ldr	r2, [pc, #40]	@ (8010d9c <vPortSetupTimerInterrupt+0x40>)
 8010d72:	fba2 2303 	umull	r2, r3, r2, r3
 8010d76:	099b      	lsrs	r3, r3, #6
 8010d78:	4a09      	ldr	r2, [pc, #36]	@ (8010da0 <vPortSetupTimerInterrupt+0x44>)
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d7e:	4b04      	ldr	r3, [pc, #16]	@ (8010d90 <vPortSetupTimerInterrupt+0x34>)
 8010d80:	2207      	movs	r2, #7
 8010d82:	601a      	str	r2, [r3, #0]
}
 8010d84:	bf00      	nop
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	e000e010 	.word	0xe000e010
 8010d94:	e000e018 	.word	0xe000e018
 8010d98:	24000000 	.word	0x24000000
 8010d9c:	10624dd3 	.word	0x10624dd3
 8010da0:	e000e014 	.word	0xe000e014

08010da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010db4 <vPortEnableVFP+0x10>
 8010da8:	6801      	ldr	r1, [r0, #0]
 8010daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010dae:	6001      	str	r1, [r0, #0]
 8010db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010db2:	bf00      	nop
 8010db4:	e000ed88 	.word	0xe000ed88

08010db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010dbe:	f3ef 8305 	mrs	r3, IPSR
 8010dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b0f      	cmp	r3, #15
 8010dc8:	d915      	bls.n	8010df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010dca:	4a18      	ldr	r2, [pc, #96]	@ (8010e2c <vPortValidateInterruptPriority+0x74>)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4413      	add	r3, r2
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010dd4:	4b16      	ldr	r3, [pc, #88]	@ (8010e30 <vPortValidateInterruptPriority+0x78>)
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	7afa      	ldrb	r2, [r7, #11]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d20b      	bcs.n	8010df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	607b      	str	r3, [r7, #4]
}
 8010df0:	bf00      	nop
 8010df2:	bf00      	nop
 8010df4:	e7fd      	b.n	8010df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010df6:	4b0f      	ldr	r3, [pc, #60]	@ (8010e34 <vPortValidateInterruptPriority+0x7c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8010e38 <vPortValidateInterruptPriority+0x80>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d90b      	bls.n	8010e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	603b      	str	r3, [r7, #0]
}
 8010e18:	bf00      	nop
 8010e1a:	bf00      	nop
 8010e1c:	e7fd      	b.n	8010e1a <vPortValidateInterruptPriority+0x62>
	}
 8010e1e:	bf00      	nop
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	e000e3f0 	.word	0xe000e3f0
 8010e30:	24001120 	.word	0x24001120
 8010e34:	e000ed0c 	.word	0xe000ed0c
 8010e38:	24001124 	.word	0x24001124

08010e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b08a      	sub	sp, #40	@ 0x28
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e44:	2300      	movs	r3, #0
 8010e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e48:	f7fe fd78 	bl	800f93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8010fc0 <pvPortMalloc+0x184>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d101      	bne.n	8010e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e54:	f000 f924 	bl	80110a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e58:	4b5a      	ldr	r3, [pc, #360]	@ (8010fc4 <pvPortMalloc+0x188>)
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4013      	ands	r3, r2
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f040 8095 	bne.w	8010f90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d01e      	beq.n	8010eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010e6c:	2208      	movs	r2, #8
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4413      	add	r3, r2
 8010e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f003 0307 	and.w	r3, r3, #7
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d015      	beq.n	8010eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f023 0307 	bic.w	r3, r3, #7
 8010e84:	3308      	adds	r3, #8
 8010e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f003 0307 	and.w	r3, r3, #7
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00b      	beq.n	8010eaa <pvPortMalloc+0x6e>
	__asm volatile
 8010e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	617b      	str	r3, [r7, #20]
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop
 8010ea8:	e7fd      	b.n	8010ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d06f      	beq.n	8010f90 <pvPortMalloc+0x154>
 8010eb0:	4b45      	ldr	r3, [pc, #276]	@ (8010fc8 <pvPortMalloc+0x18c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d86a      	bhi.n	8010f90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010eba:	4b44      	ldr	r3, [pc, #272]	@ (8010fcc <pvPortMalloc+0x190>)
 8010ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010ebe:	4b43      	ldr	r3, [pc, #268]	@ (8010fcc <pvPortMalloc+0x190>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ec4:	e004      	b.n	8010ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d903      	bls.n	8010ee2 <pvPortMalloc+0xa6>
 8010eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1f1      	bne.n	8010ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ee2:	4b37      	ldr	r3, [pc, #220]	@ (8010fc0 <pvPortMalloc+0x184>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d051      	beq.n	8010f90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010eec:	6a3b      	ldr	r3, [r7, #32]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2208      	movs	r2, #8
 8010ef2:	4413      	add	r3, r2
 8010ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	6a3b      	ldr	r3, [r7, #32]
 8010efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f00:	685a      	ldr	r2, [r3, #4]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	1ad2      	subs	r2, r2, r3
 8010f06:	2308      	movs	r3, #8
 8010f08:	005b      	lsls	r3, r3, #1
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d920      	bls.n	8010f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4413      	add	r3, r2
 8010f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	f003 0307 	and.w	r3, r3, #7
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00b      	beq.n	8010f38 <pvPortMalloc+0xfc>
	__asm volatile
 8010f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f24:	f383 8811 	msr	BASEPRI, r3
 8010f28:	f3bf 8f6f 	isb	sy
 8010f2c:	f3bf 8f4f 	dsb	sy
 8010f30:	613b      	str	r3, [r7, #16]
}
 8010f32:	bf00      	nop
 8010f34:	bf00      	nop
 8010f36:	e7fd      	b.n	8010f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f3a:	685a      	ldr	r2, [r3, #4]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	1ad2      	subs	r2, r2, r3
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f4a:	69b8      	ldr	r0, [r7, #24]
 8010f4c:	f000 f90a 	bl	8011164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f50:	4b1d      	ldr	r3, [pc, #116]	@ (8010fc8 <pvPortMalloc+0x18c>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8010fc8 <pvPortMalloc+0x18c>)
 8010f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8010fc8 <pvPortMalloc+0x18c>)
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	4b1b      	ldr	r3, [pc, #108]	@ (8010fd0 <pvPortMalloc+0x194>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d203      	bcs.n	8010f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f6a:	4b17      	ldr	r3, [pc, #92]	@ (8010fc8 <pvPortMalloc+0x18c>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a18      	ldr	r2, [pc, #96]	@ (8010fd0 <pvPortMalloc+0x194>)
 8010f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f74:	685a      	ldr	r2, [r3, #4]
 8010f76:	4b13      	ldr	r3, [pc, #76]	@ (8010fc4 <pvPortMalloc+0x188>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	431a      	orrs	r2, r3
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f86:	4b13      	ldr	r3, [pc, #76]	@ (8010fd4 <pvPortMalloc+0x198>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	4a11      	ldr	r2, [pc, #68]	@ (8010fd4 <pvPortMalloc+0x198>)
 8010f8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f90:	f7fe fce2 	bl	800f958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	f003 0307 	and.w	r3, r3, #7
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00b      	beq.n	8010fb6 <pvPortMalloc+0x17a>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	60fb      	str	r3, [r7, #12]
}
 8010fb0:	bf00      	nop
 8010fb2:	bf00      	nop
 8010fb4:	e7fd      	b.n	8010fb2 <pvPortMalloc+0x176>
	return pvReturn;
 8010fb6:	69fb      	ldr	r3, [r7, #28]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3728      	adds	r7, #40	@ 0x28
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	24004d30 	.word	0x24004d30
 8010fc4:	24004d44 	.word	0x24004d44
 8010fc8:	24004d34 	.word	0x24004d34
 8010fcc:	24004d28 	.word	0x24004d28
 8010fd0:	24004d38 	.word	0x24004d38
 8010fd4:	24004d3c 	.word	0x24004d3c

08010fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d04f      	beq.n	801108a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fea:	2308      	movs	r3, #8
 8010fec:	425b      	negs	r3, r3
 8010fee:	697a      	ldr	r2, [r7, #20]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	4b25      	ldr	r3, [pc, #148]	@ (8011094 <vPortFree+0xbc>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4013      	ands	r3, r2
 8011002:	2b00      	cmp	r3, #0
 8011004:	d10b      	bne.n	801101e <vPortFree+0x46>
	__asm volatile
 8011006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801100a:	f383 8811 	msr	BASEPRI, r3
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f3bf 8f4f 	dsb	sy
 8011016:	60fb      	str	r3, [r7, #12]
}
 8011018:	bf00      	nop
 801101a:	bf00      	nop
 801101c:	e7fd      	b.n	801101a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00b      	beq.n	801103e <vPortFree+0x66>
	__asm volatile
 8011026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801102a:	f383 8811 	msr	BASEPRI, r3
 801102e:	f3bf 8f6f 	isb	sy
 8011032:	f3bf 8f4f 	dsb	sy
 8011036:	60bb      	str	r3, [r7, #8]
}
 8011038:	bf00      	nop
 801103a:	bf00      	nop
 801103c:	e7fd      	b.n	801103a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	685a      	ldr	r2, [r3, #4]
 8011042:	4b14      	ldr	r3, [pc, #80]	@ (8011094 <vPortFree+0xbc>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4013      	ands	r3, r2
 8011048:	2b00      	cmp	r3, #0
 801104a:	d01e      	beq.n	801108a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d11a      	bne.n	801108a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	685a      	ldr	r2, [r3, #4]
 8011058:	4b0e      	ldr	r3, [pc, #56]	@ (8011094 <vPortFree+0xbc>)
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	43db      	mvns	r3, r3
 801105e:	401a      	ands	r2, r3
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011064:	f7fe fc6a 	bl	800f93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	4b0a      	ldr	r3, [pc, #40]	@ (8011098 <vPortFree+0xc0>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4413      	add	r3, r2
 8011072:	4a09      	ldr	r2, [pc, #36]	@ (8011098 <vPortFree+0xc0>)
 8011074:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011076:	6938      	ldr	r0, [r7, #16]
 8011078:	f000 f874 	bl	8011164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801107c:	4b07      	ldr	r3, [pc, #28]	@ (801109c <vPortFree+0xc4>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3301      	adds	r3, #1
 8011082:	4a06      	ldr	r2, [pc, #24]	@ (801109c <vPortFree+0xc4>)
 8011084:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011086:	f7fe fc67 	bl	800f958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801108a:	bf00      	nop
 801108c:	3718      	adds	r7, #24
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	24004d44 	.word	0x24004d44
 8011098:	24004d34 	.word	0x24004d34
 801109c:	24004d40 	.word	0x24004d40

080110a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80110a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80110aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80110ac:	4b27      	ldr	r3, [pc, #156]	@ (801114c <prvHeapInit+0xac>)
 80110ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f003 0307 	and.w	r3, r3, #7
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00c      	beq.n	80110d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	3307      	adds	r3, #7
 80110be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f023 0307 	bic.w	r3, r3, #7
 80110c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	4a1f      	ldr	r2, [pc, #124]	@ (801114c <prvHeapInit+0xac>)
 80110d0:	4413      	add	r3, r2
 80110d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80110d8:	4a1d      	ldr	r2, [pc, #116]	@ (8011150 <prvHeapInit+0xb0>)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110de:	4b1c      	ldr	r3, [pc, #112]	@ (8011150 <prvHeapInit+0xb0>)
 80110e0:	2200      	movs	r2, #0
 80110e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	4413      	add	r3, r2
 80110ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110ec:	2208      	movs	r2, #8
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	1a9b      	subs	r3, r3, r2
 80110f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f023 0307 	bic.w	r3, r3, #7
 80110fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4a15      	ldr	r2, [pc, #84]	@ (8011154 <prvHeapInit+0xb4>)
 8011100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011102:	4b14      	ldr	r3, [pc, #80]	@ (8011154 <prvHeapInit+0xb4>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2200      	movs	r2, #0
 8011108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801110a:	4b12      	ldr	r3, [pc, #72]	@ (8011154 <prvHeapInit+0xb4>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2200      	movs	r2, #0
 8011110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	1ad2      	subs	r2, r2, r3
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011120:	4b0c      	ldr	r3, [pc, #48]	@ (8011154 <prvHeapInit+0xb4>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	4a0a      	ldr	r2, [pc, #40]	@ (8011158 <prvHeapInit+0xb8>)
 801112e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	4a09      	ldr	r2, [pc, #36]	@ (801115c <prvHeapInit+0xbc>)
 8011136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011138:	4b09      	ldr	r3, [pc, #36]	@ (8011160 <prvHeapInit+0xc0>)
 801113a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801113e:	601a      	str	r2, [r3, #0]
}
 8011140:	bf00      	nop
 8011142:	3714      	adds	r7, #20
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	24001128 	.word	0x24001128
 8011150:	24004d28 	.word	0x24004d28
 8011154:	24004d30 	.word	0x24004d30
 8011158:	24004d38 	.word	0x24004d38
 801115c:	24004d34 	.word	0x24004d34
 8011160:	24004d44 	.word	0x24004d44

08011164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011164:	b480      	push	{r7}
 8011166:	b085      	sub	sp, #20
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801116c:	4b28      	ldr	r3, [pc, #160]	@ (8011210 <prvInsertBlockIntoFreeList+0xac>)
 801116e:	60fb      	str	r3, [r7, #12]
 8011170:	e002      	b.n	8011178 <prvInsertBlockIntoFreeList+0x14>
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	60fb      	str	r3, [r7, #12]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	429a      	cmp	r2, r3
 8011180:	d8f7      	bhi.n	8011172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	68ba      	ldr	r2, [r7, #8]
 801118c:	4413      	add	r3, r2
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	429a      	cmp	r2, r3
 8011192:	d108      	bne.n	80111a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	685a      	ldr	r2, [r3, #4]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	441a      	add	r2, r3
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	441a      	add	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d118      	bne.n	80111ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	4b15      	ldr	r3, [pc, #84]	@ (8011214 <prvInsertBlockIntoFreeList+0xb0>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d00d      	beq.n	80111e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685a      	ldr	r2, [r3, #4]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	441a      	add	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	e008      	b.n	80111f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011214 <prvInsertBlockIntoFreeList+0xb0>)
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	e003      	b.n	80111f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d002      	beq.n	8011202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	24004d28 	.word	0x24004d28
 8011214:	24004d30 	.word	0x24004d30

08011218 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801121c:	2200      	movs	r2, #0
 801121e:	4913      	ldr	r1, [pc, #76]	@ (801126c <MX_USB_DEVICE_Init+0x54>)
 8011220:	4813      	ldr	r0, [pc, #76]	@ (8011270 <MX_USB_DEVICE_Init+0x58>)
 8011222:	f7fb fedd 	bl	800cfe0 <USBD_Init>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801122c:	f7ef fc7c 	bl	8000b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011230:	4910      	ldr	r1, [pc, #64]	@ (8011274 <MX_USB_DEVICE_Init+0x5c>)
 8011232:	480f      	ldr	r0, [pc, #60]	@ (8011270 <MX_USB_DEVICE_Init+0x58>)
 8011234:	f7fb ff04 	bl	800d040 <USBD_RegisterClass>
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801123e:	f7ef fc73 	bl	8000b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011242:	490d      	ldr	r1, [pc, #52]	@ (8011278 <MX_USB_DEVICE_Init+0x60>)
 8011244:	480a      	ldr	r0, [pc, #40]	@ (8011270 <MX_USB_DEVICE_Init+0x58>)
 8011246:	f7fb fdfb 	bl	800ce40 <USBD_CDC_RegisterInterface>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d001      	beq.n	8011254 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011250:	f7ef fc6a 	bl	8000b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011254:	4806      	ldr	r0, [pc, #24]	@ (8011270 <MX_USB_DEVICE_Init+0x58>)
 8011256:	f7fb ff29 	bl	800d0ac <USBD_Start>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011260:	f7ef fc62 	bl	8000b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011264:	f7f5 fddc 	bl	8006e20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011268:	bf00      	nop
 801126a:	bd80      	pop	{r7, pc}
 801126c:	240000bc 	.word	0x240000bc
 8011270:	24004d48 	.word	0x24004d48
 8011274:	2400001c 	.word	0x2400001c
 8011278:	240000a8 	.word	0x240000a8

0801127c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011280:	2200      	movs	r2, #0
 8011282:	4905      	ldr	r1, [pc, #20]	@ (8011298 <CDC_Init_FS+0x1c>)
 8011284:	4805      	ldr	r0, [pc, #20]	@ (801129c <CDC_Init_FS+0x20>)
 8011286:	f7fb fdf5 	bl	800ce74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801128a:	4905      	ldr	r1, [pc, #20]	@ (80112a0 <CDC_Init_FS+0x24>)
 801128c:	4803      	ldr	r0, [pc, #12]	@ (801129c <CDC_Init_FS+0x20>)
 801128e:	f7fb fe13 	bl	800ceb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011292:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011294:	4618      	mov	r0, r3
 8011296:	bd80      	pop	{r7, pc}
 8011298:	24005824 	.word	0x24005824
 801129c:	24004d48 	.word	0x24004d48
 80112a0:	24005024 	.word	0x24005024

080112a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80112a4:	b480      	push	{r7}
 80112a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80112a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	6039      	str	r1, [r7, #0]
 80112be:	71fb      	strb	r3, [r7, #7]
 80112c0:	4613      	mov	r3, r2
 80112c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80112c4:	79fb      	ldrb	r3, [r7, #7]
 80112c6:	2b23      	cmp	r3, #35	@ 0x23
 80112c8:	f200 8098 	bhi.w	80113fc <CDC_Control_FS+0x148>
 80112cc:	a201      	add	r2, pc, #4	@ (adr r2, 80112d4 <CDC_Control_FS+0x20>)
 80112ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d2:	bf00      	nop
 80112d4:	080113fd 	.word	0x080113fd
 80112d8:	080113fd 	.word	0x080113fd
 80112dc:	080113fd 	.word	0x080113fd
 80112e0:	080113fd 	.word	0x080113fd
 80112e4:	080113fd 	.word	0x080113fd
 80112e8:	080113fd 	.word	0x080113fd
 80112ec:	080113fd 	.word	0x080113fd
 80112f0:	080113fd 	.word	0x080113fd
 80112f4:	080113fd 	.word	0x080113fd
 80112f8:	080113fd 	.word	0x080113fd
 80112fc:	080113fd 	.word	0x080113fd
 8011300:	080113fd 	.word	0x080113fd
 8011304:	080113fd 	.word	0x080113fd
 8011308:	080113fd 	.word	0x080113fd
 801130c:	080113fd 	.word	0x080113fd
 8011310:	080113fd 	.word	0x080113fd
 8011314:	080113fd 	.word	0x080113fd
 8011318:	080113fd 	.word	0x080113fd
 801131c:	080113fd 	.word	0x080113fd
 8011320:	080113fd 	.word	0x080113fd
 8011324:	080113fd 	.word	0x080113fd
 8011328:	080113fd 	.word	0x080113fd
 801132c:	080113fd 	.word	0x080113fd
 8011330:	080113fd 	.word	0x080113fd
 8011334:	080113fd 	.word	0x080113fd
 8011338:	080113fd 	.word	0x080113fd
 801133c:	080113fd 	.word	0x080113fd
 8011340:	080113fd 	.word	0x080113fd
 8011344:	080113fd 	.word	0x080113fd
 8011348:	080113fd 	.word	0x080113fd
 801134c:	080113fd 	.word	0x080113fd
 8011350:	080113fd 	.word	0x080113fd
 8011354:	08011365 	.word	0x08011365
 8011358:	080113a9 	.word	0x080113a9
 801135c:	080113fd 	.word	0x080113fd
 8011360:	080113fd 	.word	0x080113fd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	461a      	mov	r2, r3
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	3301      	adds	r3, #1
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	021b      	lsls	r3, r3, #8
 8011372:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	3302      	adds	r3, #2
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801137c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	3303      	adds	r3, #3
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	061b      	lsls	r3, r3, #24
 8011386:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8011388:	461a      	mov	r2, r3
 801138a:	4b20      	ldr	r3, [pc, #128]	@ (801140c <CDC_Control_FS+0x158>)
 801138c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	791a      	ldrb	r2, [r3, #4]
 8011392:	4b1e      	ldr	r3, [pc, #120]	@ (801140c <CDC_Control_FS+0x158>)
 8011394:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	795a      	ldrb	r2, [r3, #5]
 801139a:	4b1c      	ldr	r3, [pc, #112]	@ (801140c <CDC_Control_FS+0x158>)
 801139c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	799a      	ldrb	r2, [r3, #6]
 80113a2:	4b1a      	ldr	r3, [pc, #104]	@ (801140c <CDC_Control_FS+0x158>)
 80113a4:	719a      	strb	r2, [r3, #6]

    break;
 80113a6:	e02a      	b.n	80113fe <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80113a8:	4b18      	ldr	r3, [pc, #96]	@ (801140c <CDC_Control_FS+0x158>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	b2da      	uxtb	r2, r3
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80113b2:	4b16      	ldr	r3, [pc, #88]	@ (801140c <CDC_Control_FS+0x158>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	0a1a      	lsrs	r2, r3, #8
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	3301      	adds	r3, #1
 80113bc:	b2d2      	uxtb	r2, r2
 80113be:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80113c0:	4b12      	ldr	r3, [pc, #72]	@ (801140c <CDC_Control_FS+0x158>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	0c1a      	lsrs	r2, r3, #16
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	3302      	adds	r3, #2
 80113ca:	b2d2      	uxtb	r2, r2
 80113cc:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80113ce:	4b0f      	ldr	r3, [pc, #60]	@ (801140c <CDC_Control_FS+0x158>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	0e1a      	lsrs	r2, r3, #24
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	3303      	adds	r3, #3
 80113d8:	b2d2      	uxtb	r2, r2
 80113da:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	3304      	adds	r3, #4
 80113e0:	4a0a      	ldr	r2, [pc, #40]	@ (801140c <CDC_Control_FS+0x158>)
 80113e2:	7912      	ldrb	r2, [r2, #4]
 80113e4:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	3305      	adds	r3, #5
 80113ea:	4a08      	ldr	r2, [pc, #32]	@ (801140c <CDC_Control_FS+0x158>)
 80113ec:	7952      	ldrb	r2, [r2, #5]
 80113ee:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	3306      	adds	r3, #6
 80113f4:	4a05      	ldr	r2, [pc, #20]	@ (801140c <CDC_Control_FS+0x158>)
 80113f6:	7992      	ldrb	r2, [r2, #6]
 80113f8:	701a      	strb	r2, [r3, #0]

    break;
 80113fa:	e000      	b.n	80113fe <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80113fc:	bf00      	nop
  }

  return (USBD_OK);
 80113fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011400:	4618      	mov	r0, r3
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr
 801140c:	240000a0 	.word	0x240000a0

08011410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801141a:	6879      	ldr	r1, [r7, #4]
 801141c:	480d      	ldr	r0, [pc, #52]	@ (8011454 <CDC_Receive_FS+0x44>)
 801141e:	f7fb fd4b 	bl	800ceb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011422:	480c      	ldr	r0, [pc, #48]	@ (8011454 <CDC_Receive_FS+0x44>)
 8011424:	f7fb fda6 	bl	800cf74 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00d      	beq.n	801144a <CDC_Receive_FS+0x3a>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00a      	beq.n	801144a <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 801143a:	89fb      	ldrh	r3, [r7, #14]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d004      	beq.n	801144a <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 8011440:	89fb      	ldrh	r3, [r7, #14]
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f001 f9d9 	bl	80127fc <USB_Receive>
	  }
  }
  return (USBD_OK);
 801144a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801144c:	4618      	mov	r0, r3
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	24004d48 	.word	0x24004d48

08011458 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011464:	2300      	movs	r3, #0
 8011466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011468:	4b0d      	ldr	r3, [pc, #52]	@ (80114a0 <CDC_Transmit_FS+0x48>)
 801146a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801146e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011476:	2b00      	cmp	r3, #0
 8011478:	d001      	beq.n	801147e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801147a:	2301      	movs	r3, #1
 801147c:	e00b      	b.n	8011496 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801147e:	887b      	ldrh	r3, [r7, #2]
 8011480:	461a      	mov	r2, r3
 8011482:	6879      	ldr	r1, [r7, #4]
 8011484:	4806      	ldr	r0, [pc, #24]	@ (80114a0 <CDC_Transmit_FS+0x48>)
 8011486:	f7fb fcf5 	bl	800ce74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801148a:	4805      	ldr	r0, [pc, #20]	@ (80114a0 <CDC_Transmit_FS+0x48>)
 801148c:	f7fb fd32 	bl	800cef4 <USBD_CDC_TransmitPacket>
 8011490:	4603      	mov	r3, r0
 8011492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011494:	7bfb      	ldrb	r3, [r7, #15]
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	24004d48 	.word	0x24004d48

080114a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b087      	sub	sp, #28
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	4613      	mov	r3, r2
 80114b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80114b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	371c      	adds	r7, #28
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 80114d2:	887b      	ldrh	r3, [r7, #2]
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7ff ffbe 	bl	8011458 <CDC_Transmit_FS>
 80114dc:	4603      	mov	r3, r0
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
	...

080114e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	4603      	mov	r3, r0
 80114f0:	6039      	str	r1, [r7, #0]
 80114f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	2212      	movs	r2, #18
 80114f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80114fa:	4b03      	ldr	r3, [pc, #12]	@ (8011508 <USBD_FS_DeviceDescriptor+0x20>)
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr
 8011508:	240000dc 	.word	0x240000dc

0801150c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	6039      	str	r1, [r7, #0]
 8011516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2204      	movs	r2, #4
 801151c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801151e:	4b03      	ldr	r3, [pc, #12]	@ (801152c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011520:	4618      	mov	r0, r3
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	240000f0 	.word	0x240000f0

08011530 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	4603      	mov	r3, r0
 8011538:	6039      	str	r1, [r7, #0]
 801153a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801153c:	79fb      	ldrb	r3, [r7, #7]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d105      	bne.n	801154e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011542:	683a      	ldr	r2, [r7, #0]
 8011544:	4907      	ldr	r1, [pc, #28]	@ (8011564 <USBD_FS_ProductStrDescriptor+0x34>)
 8011546:	4808      	ldr	r0, [pc, #32]	@ (8011568 <USBD_FS_ProductStrDescriptor+0x38>)
 8011548:	f7fc ff8a 	bl	800e460 <USBD_GetString>
 801154c:	e004      	b.n	8011558 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801154e:	683a      	ldr	r2, [r7, #0]
 8011550:	4904      	ldr	r1, [pc, #16]	@ (8011564 <USBD_FS_ProductStrDescriptor+0x34>)
 8011552:	4805      	ldr	r0, [pc, #20]	@ (8011568 <USBD_FS_ProductStrDescriptor+0x38>)
 8011554:	f7fc ff84 	bl	800e460 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011558:	4b02      	ldr	r3, [pc, #8]	@ (8011564 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801155a:	4618      	mov	r0, r3
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	24006024 	.word	0x24006024
 8011568:	08013c5c 	.word	0x08013c5c

0801156c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	4603      	mov	r3, r0
 8011574:	6039      	str	r1, [r7, #0]
 8011576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011578:	683a      	ldr	r2, [r7, #0]
 801157a:	4904      	ldr	r1, [pc, #16]	@ (801158c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801157c:	4804      	ldr	r0, [pc, #16]	@ (8011590 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801157e:	f7fc ff6f 	bl	800e460 <USBD_GetString>
  return USBD_StrDesc;
 8011582:	4b02      	ldr	r3, [pc, #8]	@ (801158c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011584:	4618      	mov	r0, r3
 8011586:	3708      	adds	r7, #8
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	24006024 	.word	0x24006024
 8011590:	08013c74 	.word	0x08013c74

08011594 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	6039      	str	r1, [r7, #0]
 801159e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	221a      	movs	r2, #26
 80115a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115a6:	f000 f843 	bl	8011630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115aa:	4b02      	ldr	r3, [pc, #8]	@ (80115b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	240000f4 	.word	0x240000f4

080115b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	4603      	mov	r3, r0
 80115c0:	6039      	str	r1, [r7, #0]
 80115c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d105      	bne.n	80115d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	4907      	ldr	r1, [pc, #28]	@ (80115ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80115ce:	4808      	ldr	r0, [pc, #32]	@ (80115f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115d0:	f7fc ff46 	bl	800e460 <USBD_GetString>
 80115d4:	e004      	b.n	80115e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115d6:	683a      	ldr	r2, [r7, #0]
 80115d8:	4904      	ldr	r1, [pc, #16]	@ (80115ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80115da:	4805      	ldr	r0, [pc, #20]	@ (80115f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115dc:	f7fc ff40 	bl	800e460 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115e0:	4b02      	ldr	r3, [pc, #8]	@ (80115ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	24006024 	.word	0x24006024
 80115f0:	08013c88 	.word	0x08013c88

080115f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	4603      	mov	r3, r0
 80115fc:	6039      	str	r1, [r7, #0]
 80115fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011600:	79fb      	ldrb	r3, [r7, #7]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d105      	bne.n	8011612 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011606:	683a      	ldr	r2, [r7, #0]
 8011608:	4907      	ldr	r1, [pc, #28]	@ (8011628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801160a:	4808      	ldr	r0, [pc, #32]	@ (801162c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801160c:	f7fc ff28 	bl	800e460 <USBD_GetString>
 8011610:	e004      	b.n	801161c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011612:	683a      	ldr	r2, [r7, #0]
 8011614:	4904      	ldr	r1, [pc, #16]	@ (8011628 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011616:	4805      	ldr	r0, [pc, #20]	@ (801162c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011618:	f7fc ff22 	bl	800e460 <USBD_GetString>
  }
  return USBD_StrDesc;
 801161c:	4b02      	ldr	r3, [pc, #8]	@ (8011628 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801161e:	4618      	mov	r0, r3
 8011620:	3708      	adds	r7, #8
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	24006024 	.word	0x24006024
 801162c:	08013c94 	.word	0x08013c94

08011630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011636:	4b0f      	ldr	r3, [pc, #60]	@ (8011674 <Get_SerialNum+0x44>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801163c:	4b0e      	ldr	r3, [pc, #56]	@ (8011678 <Get_SerialNum+0x48>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011642:	4b0e      	ldr	r3, [pc, #56]	@ (801167c <Get_SerialNum+0x4c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4413      	add	r3, r2
 801164e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d009      	beq.n	801166a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011656:	2208      	movs	r2, #8
 8011658:	4909      	ldr	r1, [pc, #36]	@ (8011680 <Get_SerialNum+0x50>)
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f000 f814 	bl	8011688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011660:	2204      	movs	r2, #4
 8011662:	4908      	ldr	r1, [pc, #32]	@ (8011684 <Get_SerialNum+0x54>)
 8011664:	68b8      	ldr	r0, [r7, #8]
 8011666:	f000 f80f 	bl	8011688 <IntToUnicode>
  }
}
 801166a:	bf00      	nop
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	1ff1e800 	.word	0x1ff1e800
 8011678:	1ff1e804 	.word	0x1ff1e804
 801167c:	1ff1e808 	.word	0x1ff1e808
 8011680:	240000f6 	.word	0x240000f6
 8011684:	24000106 	.word	0x24000106

08011688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011688:	b480      	push	{r7}
 801168a:	b087      	sub	sp, #28
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	4613      	mov	r3, r2
 8011694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011696:	2300      	movs	r3, #0
 8011698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801169a:	2300      	movs	r3, #0
 801169c:	75fb      	strb	r3, [r7, #23]
 801169e:	e027      	b.n	80116f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	0f1b      	lsrs	r3, r3, #28
 80116a4:	2b09      	cmp	r3, #9
 80116a6:	d80b      	bhi.n	80116c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	0f1b      	lsrs	r3, r3, #28
 80116ac:	b2da      	uxtb	r2, r3
 80116ae:	7dfb      	ldrb	r3, [r7, #23]
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	4619      	mov	r1, r3
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	440b      	add	r3, r1
 80116b8:	3230      	adds	r2, #48	@ 0x30
 80116ba:	b2d2      	uxtb	r2, r2
 80116bc:	701a      	strb	r2, [r3, #0]
 80116be:	e00a      	b.n	80116d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	0f1b      	lsrs	r3, r3, #28
 80116c4:	b2da      	uxtb	r2, r3
 80116c6:	7dfb      	ldrb	r3, [r7, #23]
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	4619      	mov	r1, r3
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	440b      	add	r3, r1
 80116d0:	3237      	adds	r2, #55	@ 0x37
 80116d2:	b2d2      	uxtb	r2, r2
 80116d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	011b      	lsls	r3, r3, #4
 80116da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116dc:	7dfb      	ldrb	r3, [r7, #23]
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	3301      	adds	r3, #1
 80116e2:	68ba      	ldr	r2, [r7, #8]
 80116e4:	4413      	add	r3, r2
 80116e6:	2200      	movs	r2, #0
 80116e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
 80116ec:	3301      	adds	r3, #1
 80116ee:	75fb      	strb	r3, [r7, #23]
 80116f0:	7dfa      	ldrb	r2, [r7, #23]
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d3d3      	bcc.n	80116a0 <IntToUnicode+0x18>
  }
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	371c      	adds	r7, #28
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr
	...

08011708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b0ba      	sub	sp, #232	@ 0xe8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	605a      	str	r2, [r3, #4]
 801171a:	609a      	str	r2, [r3, #8]
 801171c:	60da      	str	r2, [r3, #12]
 801171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011720:	f107 0310 	add.w	r3, r7, #16
 8011724:	22c0      	movs	r2, #192	@ 0xc0
 8011726:	2100      	movs	r1, #0
 8011728:	4618      	mov	r0, r3
 801172a:	f001 f97d 	bl	8012a28 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4a33      	ldr	r2, [pc, #204]	@ (8011800 <HAL_PCD_MspInit+0xf8>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d15f      	bne.n	80117f8 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011738:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801173c:	f04f 0300 	mov.w	r3, #0
 8011740:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8011744:	2319      	movs	r3, #25
 8011746:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8011748:	23c0      	movs	r3, #192	@ 0xc0
 801174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801174c:	2302      	movs	r3, #2
 801174e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8011750:	2304      	movs	r3, #4
 8011752:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8011754:	2302      	movs	r3, #2
 8011756:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8011758:	2300      	movs	r3, #0
 801175a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801175c:	2300      	movs	r3, #0
 801175e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8011760:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011768:	f107 0310 	add.w	r3, r7, #16
 801176c:	4618      	mov	r0, r3
 801176e:	f7f6 fc49 	bl	8008004 <HAL_RCCEx_PeriphCLKConfig>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 8011778:	f7ef f9d6 	bl	8000b28 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801177c:	f7f5 fb50 	bl	8006e20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011780:	4b20      	ldr	r3, [pc, #128]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 8011782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011786:	4a1f      	ldr	r2, [pc, #124]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 8011788:	f043 0301 	orr.w	r3, r3, #1
 801178c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011790:	4b1c      	ldr	r3, [pc, #112]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 8011792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011796:	f003 0301 	and.w	r3, r3, #1
 801179a:	60fb      	str	r3, [r7, #12]
 801179c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801179e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80117a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117a6:	2302      	movs	r3, #2
 80117a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117ac:	2300      	movs	r3, #0
 80117ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117b2:	2300      	movs	r3, #0
 80117b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80117b8:	230a      	movs	r3, #10
 80117ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117c2:	4619      	mov	r1, r3
 80117c4:	4810      	ldr	r0, [pc, #64]	@ (8011808 <HAL_PCD_MspInit+0x100>)
 80117c6:	f7f3 fd53 	bl	8005270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117ca:	4b0e      	ldr	r3, [pc, #56]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 80117cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117d0:	4a0c      	ldr	r2, [pc, #48]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 80117d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80117d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80117da:	4b0a      	ldr	r3, [pc, #40]	@ (8011804 <HAL_PCD_MspInit+0xfc>)
 80117dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80117e4:	60bb      	str	r3, [r7, #8]
 80117e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80117e8:	2200      	movs	r2, #0
 80117ea:	2105      	movs	r1, #5
 80117ec:	2065      	movs	r0, #101	@ 0x65
 80117ee:	f7f1 f921 	bl	8002a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117f2:	2065      	movs	r0, #101	@ 0x65
 80117f4:	f7f1 f938 	bl	8002a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117f8:	bf00      	nop
 80117fa:	37e8      	adds	r7, #232	@ 0xe8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	40080000 	.word	0x40080000
 8011804:	58024400 	.word	0x58024400
 8011808:	58020000 	.word	0x58020000

0801180c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7fb fc8f 	bl	800d146 <USBD_LL_SetupStage>
}
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	460b      	mov	r3, r1
 801183a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	6879      	ldr	r1, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	4413      	add	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	440b      	add	r3, r1
 8011850:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	78fb      	ldrb	r3, [r7, #3]
 8011858:	4619      	mov	r1, r3
 801185a:	f7fb fcc9 	bl	800d1f0 <USBD_LL_DataOutStage>
}
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011878:	78fa      	ldrb	r2, [r7, #3]
 801187a:	6879      	ldr	r1, [r7, #4]
 801187c:	4613      	mov	r3, r2
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	4413      	add	r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	440b      	add	r3, r1
 8011886:	3320      	adds	r3, #32
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	78fb      	ldrb	r3, [r7, #3]
 801188c:	4619      	mov	r1, r3
 801188e:	f7fb fd62 	bl	800d356 <USBD_LL_DataInStage>
}
 8011892:	bf00      	nop
 8011894:	3708      	adds	r7, #8
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801189a:	b580      	push	{r7, lr}
 801189c:	b082      	sub	sp, #8
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fb fe9c 	bl	800d5e6 <USBD_LL_SOF>
}
 80118ae:	bf00      	nop
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b084      	sub	sp, #16
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118be:	2301      	movs	r3, #1
 80118c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	79db      	ldrb	r3, [r3, #7]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80118ca:	2300      	movs	r3, #0
 80118cc:	73fb      	strb	r3, [r7, #15]
 80118ce:	e008      	b.n	80118e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	79db      	ldrb	r3, [r3, #7]
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	d102      	bne.n	80118de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80118d8:	2301      	movs	r3, #1
 80118da:	73fb      	strb	r3, [r7, #15]
 80118dc:	e001      	b.n	80118e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80118de:	f7ef f923 	bl	8000b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118e8:	7bfa      	ldrb	r2, [r7, #15]
 80118ea:	4611      	mov	r1, r2
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fb fe36 	bl	800d55e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fb fdde 	bl	800d4ba <USBD_LL_Reset>
}
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011916:	4618      	mov	r0, r3
 8011918:	f7fb fe31 	bl	800d57e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	6812      	ldr	r2, [r2, #0]
 801192a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801192e:	f043 0301 	orr.w	r3, r3, #1
 8011932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7adb      	ldrb	r3, [r3, #11]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d005      	beq.n	8011948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801193c:	4b04      	ldr	r3, [pc, #16]	@ (8011950 <HAL_PCD_SuspendCallback+0x48>)
 801193e:	691b      	ldr	r3, [r3, #16]
 8011940:	4a03      	ldr	r2, [pc, #12]	@ (8011950 <HAL_PCD_SuspendCallback+0x48>)
 8011942:	f043 0306 	orr.w	r3, r3, #6
 8011946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011948:	bf00      	nop
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	e000ed00 	.word	0xe000ed00

08011954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011962:	4618      	mov	r0, r3
 8011964:	f7fb fe27 	bl	800d5b6 <USBD_LL_Resume>
}
 8011968:	bf00      	nop
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011982:	78fa      	ldrb	r2, [r7, #3]
 8011984:	4611      	mov	r1, r2
 8011986:	4618      	mov	r0, r3
 8011988:	f7fb fe7f 	bl	800d68a <USBD_LL_IsoOUTIncomplete>
}
 801198c:	bf00      	nop
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	460b      	mov	r3, r1
 801199e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119a6:	78fa      	ldrb	r2, [r7, #3]
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fb fe3b 	bl	800d626 <USBD_LL_IsoINIncomplete>
}
 80119b0:	bf00      	nop
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fb fe91 	bl	800d6ee <USBD_LL_DevConnected>
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fb fe8e 	bl	800d704 <USBD_LL_DevDisconnected>
}
 80119e8:	bf00      	nop
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d13e      	bne.n	8011a7e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a00:	4a21      	ldr	r2, [pc, #132]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a10:	4b1d      	ldr	r3, [pc, #116]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a12:	4a1e      	ldr	r2, [pc, #120]	@ (8011a8c <USBD_LL_Init+0x9c>)
 8011a14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011a16:	4b1c      	ldr	r3, [pc, #112]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a18:	2209      	movs	r2, #9
 8011a1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a1e:	2202      	movs	r2, #2
 8011a20:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a22:	4b19      	ldr	r3, [pc, #100]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a24:	2200      	movs	r2, #0
 8011a26:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a28:	4b17      	ldr	r3, [pc, #92]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a2e:	4b16      	ldr	r3, [pc, #88]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a30:	2200      	movs	r2, #0
 8011a32:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a34:	4b14      	ldr	r3, [pc, #80]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a36:	2200      	movs	r2, #0
 8011a38:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a3a:	4b13      	ldr	r3, [pc, #76]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011a40:	4b11      	ldr	r3, [pc, #68]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011a46:	4b10      	ldr	r3, [pc, #64]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a52:	480d      	ldr	r0, [pc, #52]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a54:	f7f3 ff09 	bl	800586a <HAL_PCD_Init>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011a5e:	f7ef f863 	bl	8000b28 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a62:	2180      	movs	r1, #128	@ 0x80
 8011a64:	4808      	ldr	r0, [pc, #32]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a66:	f7f5 f960 	bl	8006d2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a6a:	2240      	movs	r2, #64	@ 0x40
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	4806      	ldr	r0, [pc, #24]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a70:	f7f5 f914 	bl	8006c9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a74:	2280      	movs	r2, #128	@ 0x80
 8011a76:	2101      	movs	r1, #1
 8011a78:	4803      	ldr	r0, [pc, #12]	@ (8011a88 <USBD_LL_Init+0x98>)
 8011a7a:	f7f5 f90f 	bl	8006c9c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011a7e:	2300      	movs	r3, #0
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	24006224 	.word	0x24006224
 8011a8c:	40080000 	.word	0x40080000

08011a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7f3 ffeb 	bl	8005a82 <HAL_PCD_Start>
 8011aac:	4603      	mov	r3, r0
 8011aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ab0:	7bfb      	ldrb	r3, [r7, #15]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f000 f942 	bl	8011d3c <USBD_Get_USB_Status>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011ac6:	b580      	push	{r7, lr}
 8011ac8:	b084      	sub	sp, #16
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	4608      	mov	r0, r1
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	70fb      	strb	r3, [r7, #3]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	70bb      	strb	r3, [r7, #2]
 8011adc:	4613      	mov	r3, r2
 8011ade:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011aee:	78bb      	ldrb	r3, [r7, #2]
 8011af0:	883a      	ldrh	r2, [r7, #0]
 8011af2:	78f9      	ldrb	r1, [r7, #3]
 8011af4:	f7f4 fcec 	bl	80064d0 <HAL_PCD_EP_Open>
 8011af8:	4603      	mov	r3, r0
 8011afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f000 f91c 	bl	8011d3c <USBD_Get_USB_Status>
 8011b04:	4603      	mov	r3, r0
 8011b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b084      	sub	sp, #16
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b22:	2300      	movs	r3, #0
 8011b24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b2c:	78fa      	ldrb	r2, [r7, #3]
 8011b2e:	4611      	mov	r1, r2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7f4 fd37 	bl	80065a4 <HAL_PCD_EP_Close>
 8011b36:	4603      	mov	r3, r0
 8011b38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b3a:	7bfb      	ldrb	r3, [r7, #15]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 f8fd 	bl	8011d3c <USBD_Get_USB_Status>
 8011b42:	4603      	mov	r3, r0
 8011b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	460b      	mov	r3, r1
 8011b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b60:	2300      	movs	r3, #0
 8011b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b6a:	78fa      	ldrb	r2, [r7, #3]
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7f4 fdef 	bl	8006752 <HAL_PCD_EP_SetStall>
 8011b74:	4603      	mov	r3, r0
 8011b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 f8de 	bl	8011d3c <USBD_Get_USB_Status>
 8011b80:	4603      	mov	r3, r0
 8011b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b084      	sub	sp, #16
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	460b      	mov	r3, r1
 8011b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ba8:	78fa      	ldrb	r2, [r7, #3]
 8011baa:	4611      	mov	r1, r2
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f4 fe33 	bl	8006818 <HAL_PCD_EP_ClrStall>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb6:	7bfb      	ldrb	r3, [r7, #15]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f8bf 	bl	8011d3c <USBD_Get_USB_Status>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3710      	adds	r7, #16
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	da0b      	bge.n	8011c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011be8:	78fb      	ldrb	r3, [r7, #3]
 8011bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011bee:	68f9      	ldr	r1, [r7, #12]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	00db      	lsls	r3, r3, #3
 8011bf4:	4413      	add	r3, r2
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	440b      	add	r3, r1
 8011bfa:	3316      	adds	r3, #22
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	e00b      	b.n	8011c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c00:	78fb      	ldrb	r3, [r7, #3]
 8011c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c06:	68f9      	ldr	r1, [r7, #12]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	00db      	lsls	r3, r3, #3
 8011c0c:	4413      	add	r3, r2
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	440b      	add	r3, r1
 8011c12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3714      	adds	r7, #20
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c30:	2300      	movs	r3, #0
 8011c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c3e:	78fa      	ldrb	r2, [r7, #3]
 8011c40:	4611      	mov	r1, r2
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7f4 fc20 	bl	8006488 <HAL_PCD_SetAddress>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c4c:	7bfb      	ldrb	r3, [r7, #15]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f000 f874 	bl	8011d3c <USBD_Get_USB_Status>
 8011c54:	4603      	mov	r3, r0
 8011c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b086      	sub	sp, #24
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	60f8      	str	r0, [r7, #12]
 8011c6a:	607a      	str	r2, [r7, #4]
 8011c6c:	603b      	str	r3, [r7, #0]
 8011c6e:	460b      	mov	r3, r1
 8011c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c76:	2300      	movs	r3, #0
 8011c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c80:	7af9      	ldrb	r1, [r7, #11]
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	f7f4 fd2a 	bl	80066de <HAL_PCD_EP_Transmit>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 f853 	bl	8011d3c <USBD_Get_USB_Status>
 8011c96:	4603      	mov	r3, r0
 8011c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3718      	adds	r7, #24
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b086      	sub	sp, #24
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	607a      	str	r2, [r7, #4]
 8011cae:	603b      	str	r3, [r7, #0]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011cc2:	7af9      	ldrb	r1, [r7, #11]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	f7f4 fcb6 	bl	8006638 <HAL_PCD_EP_Receive>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd0:	7dfb      	ldrb	r3, [r7, #23]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 f832 	bl	8011d3c <USBD_Get_USB_Status>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b082      	sub	sp, #8
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	460b      	mov	r3, r1
 8011cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7f4 fcd6 	bl	80066ae <HAL_PCD_EP_GetRxCount>
 8011d02:	4603      	mov	r3, r0
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d14:	4b03      	ldr	r3, [pc, #12]	@ (8011d24 <USBD_static_malloc+0x18>)
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	24006708 	.word	0x24006708

08011d28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	4603      	mov	r3, r0
 8011d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d4a:	79fb      	ldrb	r3, [r7, #7]
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	d817      	bhi.n	8011d80 <USBD_Get_USB_Status+0x44>
 8011d50:	a201      	add	r2, pc, #4	@ (adr r2, 8011d58 <USBD_Get_USB_Status+0x1c>)
 8011d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d56:	bf00      	nop
 8011d58:	08011d69 	.word	0x08011d69
 8011d5c:	08011d6f 	.word	0x08011d6f
 8011d60:	08011d75 	.word	0x08011d75
 8011d64:	08011d7b 	.word	0x08011d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d6c:	e00b      	b.n	8011d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d6e:	2303      	movs	r3, #3
 8011d70:	73fb      	strb	r3, [r7, #15]
    break;
 8011d72:	e008      	b.n	8011d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d74:	2301      	movs	r3, #1
 8011d76:	73fb      	strb	r3, [r7, #15]
    break;
 8011d78:	e005      	b.n	8011d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d7a:	2303      	movs	r3, #3
 8011d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d7e:	e002      	b.n	8011d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d80:	2303      	movs	r3, #3
 8011d82:	73fb      	strb	r3, [r7, #15]
    break;
 8011d84:	bf00      	nop
  }
  return usb_status;
 8011d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 8011d94:	b5b0      	push	{r4, r5, r7, lr}
 8011d96:	b088      	sub	sp, #32
 8011d98:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 8011d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e94 <do_dump+0x100>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8011e98 <do_dump+0x104>)
 8011da0:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 8011da2:	4b3c      	ldr	r3, [pc, #240]	@ (8011e94 <do_dump+0x100>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f023 030f 	bic.w	r3, r3, #15
 8011daa:	4619      	mov	r1, r3
 8011dac:	483b      	ldr	r0, [pc, #236]	@ (8011e9c <do_dump+0x108>)
 8011dae:	f000 fcb1 	bl	8012714 <DebugPrint>
	strcpy(ascii_result,"................");
 8011db2:	1d3b      	adds	r3, r7, #4
 8011db4:	4a3a      	ldr	r2, [pc, #232]	@ (8011ea0 <do_dump+0x10c>)
 8011db6:	461c      	mov	r4, r3
 8011db8:	4615      	mov	r5, r2
 8011dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	61fb      	str	r3, [r7, #28]
 8011dc6:	e005      	b.n	8011dd4 <do_dump+0x40>
 8011dc8:	4836      	ldr	r0, [pc, #216]	@ (8011ea4 <do_dump+0x110>)
 8011dca:	f000 fc89 	bl	80126e0 <DebugSend>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	61fb      	str	r3, [r7, #28]
 8011dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8011e94 <do_dump+0x100>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f003 020f 	and.w	r2, r3, #15
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d8f2      	bhi.n	8011dc8 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 8011de2:	e049      	b.n	8011e78 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 8011de4:	4b2b      	ldr	r3, [pc, #172]	@ (8011e94 <do_dump+0x100>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	492a      	ldr	r1, [pc, #168]	@ (8011e94 <do_dump+0x100>)
 8011dec:	600a      	str	r2, [r1, #0]
 8011dee:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 8011df6:	7dfb      	ldrb	r3, [r7, #23]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	482b      	ldr	r0, [pc, #172]	@ (8011ea8 <do_dump+0x114>)
 8011dfc:	f000 fc8a 	bl	8012714 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 8011e00:	7dfb      	ldrb	r3, [r7, #23]
 8011e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e06:	3301      	adds	r3, #1
 8011e08:	4a28      	ldr	r2, [pc, #160]	@ (8011eac <do_dump+0x118>)
 8011e0a:	4413      	add	r3, r2
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	f003 0320 	and.w	r3, r3, #32
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d104      	bne.n	8011e20 <do_dump+0x8c>
 8011e16:	1d3a      	adds	r2, r7, #4
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	7dfa      	ldrb	r2, [r7, #23]
 8011e1e:	701a      	strb	r2, [r3, #0]
		i1++;
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	3301      	adds	r3, #1
 8011e24:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 8011e26:	4b1b      	ldr	r3, [pc, #108]	@ (8011e94 <do_dump+0x100>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	f003 030f 	and.w	r3, r3, #15
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d122      	bne.n	8011e78 <do_dump+0xe4>
		{
			DebugSend("  ");
 8011e32:	481f      	ldr	r0, [pc, #124]	@ (8011eb0 <do_dump+0x11c>)
 8011e34:	f000 fc54 	bl	80126e0 <DebugSend>
			DebugSend(ascii_result);
 8011e38:	1d3b      	adds	r3, r7, #4
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f000 fc50 	bl	80126e0 <DebugSend>
			i1 = 0;
 8011e40:	2300      	movs	r3, #0
 8011e42:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 8011e44:	1d3b      	adds	r3, r7, #4
 8011e46:	4a16      	ldr	r2, [pc, #88]	@ (8011ea0 <do_dump+0x10c>)
 8011e48:	461c      	mov	r4, r3
 8011e4a:	4615      	mov	r5, r2
 8011e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 8011e54:	4b0f      	ldr	r3, [pc, #60]	@ (8011e94 <do_dump+0x100>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d014      	beq.n	8011e86 <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011e94 <do_dump+0x100>)
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	4b14      	ldr	r3, [pc, #80]	@ (8011eb4 <do_dump+0x120>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d807      	bhi.n	8011e78 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 8011e68:	4b0a      	ldr	r3, [pc, #40]	@ (8011e94 <do_dump+0x100>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f023 030f 	bic.w	r3, r3, #15
 8011e70:	4619      	mov	r1, r3
 8011e72:	480a      	ldr	r0, [pc, #40]	@ (8011e9c <do_dump+0x108>)
 8011e74:	f000 fc4e 	bl	8012714 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 8011e78:	4b06      	ldr	r3, [pc, #24]	@ (8011e94 <do_dump+0x100>)
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb4 <do_dump+0x120>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d9af      	bls.n	8011de4 <do_dump+0x50>
 8011e84:	e000      	b.n	8011e88 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 8011e86:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 8011e88:	4b02      	ldr	r3, [pc, #8]	@ (8011e94 <do_dump+0x100>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3720      	adds	r7, #32
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bdb0      	pop	{r4, r5, r7, pc}
 8011e94:	24006928 	.word	0x24006928
 8011e98:	2400692c 	.word	0x2400692c
 8011e9c:	08013ca4 	.word	0x08013ca4
 8011ea0:	08013cb0 	.word	0x08013cb0
 8011ea4:	08013cc4 	.word	0x08013cc4
 8011ea8:	08013cc8 	.word	0x08013cc8
 8011eac:	08013ee8 	.word	0x08013ee8
 8011eb0:	08013cd0 	.word	0x08013cd0
 8011eb4:	24006930 	.word	0x24006930

08011eb8 <debug_parse>:


void debug_parse(char *cmd_line)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b08e      	sub	sp, #56	@ 0x38
 8011ebc:	af02      	add	r7, sp, #8
 8011ebe:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 8011ec0:	e002      	b.n	8011ec8 <debug_parse+0x10>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	607b      	str	r3, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	2b20      	cmp	r3, #32
 8011ece:	d0f8      	beq.n	8011ec2 <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	1c5a      	adds	r2, r3, #1
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011edc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	4aac      	ldr	r2, [pc, #688]	@ (8012194 <debug_parse+0x2dc>)
 8011ee4:	4413      	add	r3, r2
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	f003 0303 	and.w	r3, r3, #3
 8011eec:	2b02      	cmp	r3, #2
 8011eee:	d103      	bne.n	8011ef8 <debug_parse+0x40>
 8011ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ef4:	3b20      	subs	r3, #32
 8011ef6:	e001      	b.n	8011efc <debug_parse+0x44>
 8011ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011efc:	3b3f      	subs	r3, #63	@ 0x3f
 8011efe:	2b1b      	cmp	r3, #27
 8011f00:	f200 82dc 	bhi.w	80124bc <debug_parse+0x604>
 8011f04:	a201      	add	r2, pc, #4	@ (adr r2, 8011f0c <debug_parse+0x54>)
 8011f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f0a:	bf00      	nop
 8011f0c:	08011f7d 	.word	0x08011f7d
 8011f10:	080124bd 	.word	0x080124bd
 8011f14:	08011f89 	.word	0x08011f89
 8011f18:	0801249b 	.word	0x0801249b
 8011f1c:	0801249b 	.word	0x0801249b
 8011f20:	08011f99 	.word	0x08011f99
 8011f24:	08011ff9 	.word	0x08011ff9
 8011f28:	0801201d 	.word	0x0801201d
 8011f2c:	0801249b 	.word	0x0801249b
 8011f30:	0801249b 	.word	0x0801249b
 8011f34:	08012049 	.word	0x08012049
 8011f38:	0801208f 	.word	0x0801208f
 8011f3c:	0801249b 	.word	0x0801249b
 8011f40:	080120c9 	.word	0x080120c9
 8011f44:	0801210d 	.word	0x0801210d
 8011f48:	08012161 	.word	0x08012161
 8011f4c:	080121e5 	.word	0x080121e5
 8011f50:	08012239 	.word	0x08012239
 8011f54:	0801249b 	.word	0x0801249b
 8011f58:	0801249b 	.word	0x0801249b
 8011f5c:	0801249b 	.word	0x0801249b
 8011f60:	08012249 	.word	0x08012249
 8011f64:	0801228b 	.word	0x0801228b
 8011f68:	08012319 	.word	0x08012319
 8011f6c:	08012369 	.word	0x08012369
 8011f70:	08012401 	.word	0x08012401
 8011f74:	08012411 	.word	0x08012411
 8011f78:	08012475 	.word	0x08012475
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 8011f7c:	4a86      	ldr	r2, [pc, #536]	@ (8012198 <debug_parse+0x2e0>)
 8011f7e:	4987      	ldr	r1, [pc, #540]	@ (801219c <debug_parse+0x2e4>)
 8011f80:	4887      	ldr	r0, [pc, #540]	@ (80121a0 <debug_parse+0x2e8>)
 8011f82:	f000 fbc7 	bl	8012714 <DebugPrint>
		break;
 8011f86:	e299      	b.n	80124bc <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 8011f88:	f7ee fb2a 	bl	80005e0 <CalcTemperature>
 8011f8c:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 8011f8e:	6a39      	ldr	r1, [r7, #32]
 8011f90:	4884      	ldr	r0, [pc, #528]	@ (80121a4 <debug_parse+0x2ec>)
 8011f92:	f000 fbbf 	bl	8012714 <DebugPrint>
	}
		break;
 8011f96:	e291      	b.n	80124bc <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f107 010c 	add.w	r1, r7, #12
 8011fa2:	2210      	movs	r2, #16
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f000 fce7 	bl	8012978 <strtoul>
 8011faa:	4603      	mov	r3, r0
 8011fac:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d019      	beq.n	8011fe8 <debug_parse+0x130>
			_debug_dump_beg = temp2;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80121a8 <debug_parse+0x2f0>)
 8011fb8:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f107 010c 	add.w	r1, r7, #12
 8011fc0:	2210      	movs	r2, #16
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f000 fcd8 	bl	8012978 <strtoul>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 8011fcc:	697a      	ldr	r2, [r7, #20]
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d903      	bls.n	8011fdc <debug_parse+0x124>
				_debug_dump_end = temp3;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	4a75      	ldr	r2, [pc, #468]	@ (80121ac <debug_parse+0x2f4>)
 8011fd8:	6013      	str	r3, [r2, #0]
 8011fda:	e00a      	b.n	8011ff2 <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 8011fdc:	4b72      	ldr	r3, [pc, #456]	@ (80121a8 <debug_parse+0x2f0>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	337f      	adds	r3, #127	@ 0x7f
 8011fe2:	4a72      	ldr	r2, [pc, #456]	@ (80121ac <debug_parse+0x2f4>)
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	e004      	b.n	8011ff2 <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 8011fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80121a8 <debug_parse+0x2f0>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	337f      	adds	r3, #127	@ 0x7f
 8011fee:	4a6f      	ldr	r2, [pc, #444]	@ (80121ac <debug_parse+0x2f4>)
 8011ff0:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 8011ff2:	f7ff fecf 	bl	8011d94 <do_dump>
		break;
 8011ff6:	e261      	b.n	80124bc <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 8011ffe:	f107 031c 	add.w	r3, r7, #28
 8012002:	461a      	mov	r2, r3
 8012004:	496a      	ldr	r1, [pc, #424]	@ (80121b0 <debug_parse+0x2f8>)
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fcc0 	bl	801298c <siscanf>
 801200c:	4603      	mov	r3, r0
 801200e:	2b01      	cmp	r3, #1
 8012010:	f040 8245 	bne.w	801249e <debug_parse+0x5e6>
			tempbyte = temp1;
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 801201a:	e240      	b.n	801249e <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 801201c:	f107 0114 	add.w	r1, r7, #20
 8012020:	f107 0218 	add.w	r2, r7, #24
 8012024:	f107 0310 	add.w	r3, r7, #16
 8012028:	9300      	str	r3, [sp, #0]
 801202a:	460b      	mov	r3, r1
 801202c:	4961      	ldr	r1, [pc, #388]	@ (80121b4 <debug_parse+0x2fc>)
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fcac 	bl	801298c <siscanf>
 8012034:	6278      	str	r0, [r7, #36]	@ 0x24
		switch (params) {
 8012036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012038:	2b03      	cmp	r3, #3
 801203a:	d003      	beq.n	8012044 <debug_parse+0x18c>
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 801203c:	485e      	ldr	r0, [pc, #376]	@ (80121b8 <debug_parse+0x300>)
 801203e:	f000 fb4f 	bl	80126e0 <DebugSend>
			}
			break;
 8012042:	e000      	b.n	8012046 <debug_parse+0x18e>
			break;
 8012044:	bf00      	nop
		}
		break;
 8012046:	e239      	b.n	80124bc <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 8012048:	f107 031c 	add.w	r3, r7, #28
 801204c:	461a      	mov	r2, r3
 801204e:	4958      	ldr	r1, [pc, #352]	@ (80121b0 <debug_parse+0x2f8>)
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 fc9b 	bl	801298c <siscanf>
 8012056:	4603      	mov	r3, r0
 8012058:	2b01      	cmp	r3, #1
 801205a:	f040 8222 	bne.w	80124a2 <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	461a      	mov	r2, r3
 8012062:	4b56      	ldr	r3, [pc, #344]	@ (80121bc <debug_parse+0x304>)
 8012064:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 8012066:	4b55      	ldr	r3, [pc, #340]	@ (80121bc <debug_parse+0x304>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 8012070:	4b52      	ldr	r3, [pc, #328]	@ (80121bc <debug_parse+0x304>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4619      	mov	r1, r3
 8012076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801207a:	461a      	mov	r2, r3
 801207c:	4850      	ldr	r0, [pc, #320]	@ (80121c0 <debug_parse+0x308>)
 801207e:	f000 fb49 	bl	8012714 <DebugPrint>
			debug_port += sizeof(tempbyte);
 8012082:	4b4e      	ldr	r3, [pc, #312]	@ (80121bc <debug_parse+0x304>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	3301      	adds	r3, #1
 8012088:	4a4c      	ldr	r2, [pc, #304]	@ (80121bc <debug_parse+0x304>)
 801208a:	6013      	str	r3, [r2, #0]
		}
		break;
 801208c:	e209      	b.n	80124a2 <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 801208e:	f107 031c 	add.w	r3, r7, #28
 8012092:	461a      	mov	r2, r3
 8012094:	4946      	ldr	r1, [pc, #280]	@ (80121b0 <debug_parse+0x2f8>)
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 fc78 	bl	801298c <siscanf>
 801209c:	4603      	mov	r3, r0
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d105      	bne.n	80120ae <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 80120a2:	69fb      	ldr	r3, [r7, #28]
 80120a4:	f023 0301 	bic.w	r3, r3, #1
 80120a8:	461a      	mov	r2, r3
 80120aa:	4b44      	ldr	r3, [pc, #272]	@ (80121bc <debug_parse+0x304>)
 80120ac:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 80120ae:	4b43      	ldr	r3, [pc, #268]	@ (80121bc <debug_parse+0x304>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 80120b6:	4b41      	ldr	r3, [pc, #260]	@ (80121bc <debug_parse+0x304>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4619      	mov	r1, r3
 80120bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80120be:	461a      	mov	r2, r3
 80120c0:	4840      	ldr	r0, [pc, #256]	@ (80121c4 <debug_parse+0x30c>)
 80120c2:	f000 fb27 	bl	8012714 <DebugPrint>
		break;
 80120c6:	e1f9      	b.n	80124bc <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 80120c8:	f7f5 fd84 	bl	8007bd4 <HAL_RCC_GetSysClockFreq>
 80120cc:	4603      	mov	r3, r0
 80120ce:	4a3e      	ldr	r2, [pc, #248]	@ (80121c8 <debug_parse+0x310>)
 80120d0:	fba2 2303 	umull	r2, r3, r2, r3
 80120d4:	0c9b      	lsrs	r3, r3, #18
 80120d6:	4619      	mov	r1, r3
 80120d8:	483c      	ldr	r0, [pc, #240]	@ (80121cc <debug_parse+0x314>)
 80120da:	f000 fb1b 	bl	8012714 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 80120de:	f7f5 fef3 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 80120e2:	4603      	mov	r3, r0
 80120e4:	4a38      	ldr	r2, [pc, #224]	@ (80121c8 <debug_parse+0x310>)
 80120e6:	fba2 2303 	umull	r2, r3, r2, r3
 80120ea:	0c9b      	lsrs	r3, r3, #18
 80120ec:	4619      	mov	r1, r3
 80120ee:	4838      	ldr	r0, [pc, #224]	@ (80121d0 <debug_parse+0x318>)
 80120f0:	f000 fb10 	bl	8012714 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 80120f4:	f7f5 ff18 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 80120f8:	4603      	mov	r3, r0
 80120fa:	4a33      	ldr	r2, [pc, #204]	@ (80121c8 <debug_parse+0x310>)
 80120fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012100:	0c9b      	lsrs	r3, r3, #18
 8012102:	4619      	mov	r1, r3
 8012104:	4833      	ldr	r0, [pc, #204]	@ (80121d4 <debug_parse+0x31c>)
 8012106:	f000 fb05 	bl	8012714 <DebugPrint>
		break;
 801210a:	e1d7      	b.n	80124bc <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 801210c:	f107 0318 	add.w	r3, r7, #24
 8012110:	f107 021c 	add.w	r2, r7, #28
 8012114:	4930      	ldr	r1, [pc, #192]	@ (80121d8 <debug_parse+0x320>)
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f000 fc38 	bl	801298c <siscanf>
 801211c:	4603      	mov	r3, r0
 801211e:	2b02      	cmp	r3, #2
 8012120:	d117      	bne.n	8012152 <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	f023 0303 	bic.w	r3, r3, #3
 8012128:	461a      	mov	r2, r3
 801212a:	4b24      	ldr	r3, [pc, #144]	@ (80121bc <debug_parse+0x304>)
 801212c:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 801212e:	4b23      	ldr	r3, [pc, #140]	@ (80121bc <debug_parse+0x304>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4619      	mov	r1, r3
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	461a      	mov	r2, r3
 8012138:	4828      	ldr	r0, [pc, #160]	@ (80121dc <debug_parse+0x324>)
 801213a:	f000 faeb 	bl	8012714 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 801213e:	4b1f      	ldr	r3, [pc, #124]	@ (80121bc <debug_parse+0x304>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	69ba      	ldr	r2, [r7, #24]
 8012144:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 8012146:	4b1d      	ldr	r3, [pc, #116]	@ (80121bc <debug_parse+0x304>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3304      	adds	r3, #4
 801214c:	4a1b      	ldr	r2, [pc, #108]	@ (80121bc <debug_parse+0x304>)
 801214e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 8012150:	e1b4      	b.n	80124bc <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 8012152:	4819      	ldr	r0, [pc, #100]	@ (80121b8 <debug_parse+0x300>)
 8012154:	f000 fac4 	bl	80126e0 <DebugSend>
		break;
 8012158:	e1b0      	b.n	80124bc <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	3301      	adds	r3, #1
 801215e:	607b      	str	r3, [r7, #4]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b20      	cmp	r3, #32
 8012166:	d103      	bne.n	8012170 <debug_parse+0x2b8>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d1f4      	bne.n	801215a <debug_parse+0x2a2>
		DebugSend("\r\n");
 8012170:	481b      	ldr	r0, [pc, #108]	@ (80121e0 <debug_parse+0x328>)
 8012172:	f000 fab5 	bl	80126e0 <DebugSend>
		while (*cmd_line!=0) {
 8012176:	e007      	b.n	8012188 <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	4618      	mov	r0, r3
 801217e:	f000 fa6d 	bl	801265c <DebugPutChar>
			cmd_line++;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	3301      	adds	r3, #1
 8012186:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1f3      	bne.n	8012178 <debug_parse+0x2c0>
		}
		break;
 8012190:	e194      	b.n	80124bc <debug_parse+0x604>
 8012192:	bf00      	nop
 8012194:	08013ee8 	.word	0x08013ee8
 8012198:	08013cd4 	.word	0x08013cd4
 801219c:	08013ce0 	.word	0x08013ce0
 80121a0:	08013cec 	.word	0x08013cec
 80121a4:	08013d0c 	.word	0x08013d0c
 80121a8:	24006928 	.word	0x24006928
 80121ac:	24006930 	.word	0x24006930
 80121b0:	08013d20 	.word	0x08013d20
 80121b4:	08013d24 	.word	0x08013d24
 80121b8:	08013d30 	.word	0x08013d30
 80121bc:	24000110 	.word	0x24000110
 80121c0:	08013d38 	.word	0x08013d38
 80121c4:	08013d48 	.word	0x08013d48
 80121c8:	431bde83 	.word	0x431bde83
 80121cc:	08013d58 	.word	0x08013d58
 80121d0:	08013d80 	.word	0x08013d80
 80121d4:	08013da4 	.word	0x08013da4
 80121d8:	08013dc8 	.word	0x08013dc8
 80121dc:	08013dd0 	.word	0x08013dd0
 80121e0:	08013de0 	.word	0x08013de0
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 80121e4:	f107 0318 	add.w	r3, r7, #24
 80121e8:	f107 021c 	add.w	r2, r7, #28
 80121ec:	49b5      	ldr	r1, [pc, #724]	@ (80124c4 <debug_parse+0x60c>)
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 fbcc 	bl	801298c <siscanf>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d11a      	bne.n	8012230 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	461a      	mov	r2, r3
 80121fe:	4bb2      	ldr	r3, [pc, #712]	@ (80124c8 <debug_parse+0x610>)
 8012200:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 8012202:	69bb      	ldr	r3, [r7, #24]
 8012204:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 8012208:	4baf      	ldr	r3, [pc, #700]	@ (80124c8 <debug_parse+0x610>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4619      	mov	r1, r3
 801220e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012212:	461a      	mov	r2, r3
 8012214:	48ad      	ldr	r0, [pc, #692]	@ (80124cc <debug_parse+0x614>)
 8012216:	f000 fa7d 	bl	8012714 <DebugPrint>
			*debug_port = tempbyte;
 801221a:	4bab      	ldr	r3, [pc, #684]	@ (80124c8 <debug_parse+0x610>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8012222:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 8012224:	4ba8      	ldr	r3, [pc, #672]	@ (80124c8 <debug_parse+0x610>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	3301      	adds	r3, #1
 801222a:	4aa7      	ldr	r2, [pc, #668]	@ (80124c8 <debug_parse+0x610>)
 801222c:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 801222e:	e145      	b.n	80124bc <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 8012230:	48a7      	ldr	r0, [pc, #668]	@ (80124d0 <debug_parse+0x618>)
 8012232:	f000 fa55 	bl	80126e0 <DebugSend>
		break;
 8012236:	e141      	b.n	80124bc <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8012238:	f107 031c 	add.w	r3, r7, #28
 801223c:	461a      	mov	r2, r3
 801223e:	49a5      	ldr	r1, [pc, #660]	@ (80124d4 <debug_parse+0x61c>)
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 fba3 	bl	801298c <siscanf>
		{
		}
		else
		{
		}
		break;
 8012246:	e139      	b.n	80124bc <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8012248:	f107 031c 	add.w	r3, r7, #28
 801224c:	461a      	mov	r2, r3
 801224e:	49a1      	ldr	r1, [pc, #644]	@ (80124d4 <debug_parse+0x61c>)
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 fb9b 	bl	801298c <siscanf>
 8012256:	4603      	mov	r3, r0
 8012258:	2b01      	cmp	r3, #1
 801225a:	f000 8124 	beq.w	80124a6 <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 801225e:	4b9e      	ldr	r3, [pc, #632]	@ (80124d8 <debug_parse+0x620>)
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	bf0c      	ite	eq
 8012266:	2301      	moveq	r3, #1
 8012268:	2300      	movne	r3, #0
 801226a:	b2db      	uxtb	r3, r3
 801226c:	461a      	mov	r2, r3
 801226e:	4b9a      	ldr	r3, [pc, #616]	@ (80124d8 <debug_parse+0x620>)
 8012270:	701a      	strb	r2, [r3, #0]
			if (bTest)
 8012272:	4b99      	ldr	r3, [pc, #612]	@ (80124d8 <debug_parse+0x620>)
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d003      	beq.n	8012282 <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 801227a:	4898      	ldr	r0, [pc, #608]	@ (80124dc <debug_parse+0x624>)
 801227c:	f000 fa30 	bl	80126e0 <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 8012280:	e111      	b.n	80124a6 <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 8012282:	4897      	ldr	r0, [pc, #604]	@ (80124e0 <debug_parse+0x628>)
 8012284:	f000 fa2c 	bl	80126e0 <DebugSend>
		break;
 8012288:	e10d      	b.n	80124a6 <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 801228a:	f107 0318 	add.w	r3, r7, #24
 801228e:	f107 021c 	add.w	r2, r7, #28
 8012292:	4994      	ldr	r1, [pc, #592]	@ (80124e4 <debug_parse+0x62c>)
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 fb79 	bl	801298c <siscanf>
 801229a:	4603      	mov	r3, r0
 801229c:	2b02      	cmp	r3, #2
 801229e:	f000 8104 	beq.w	80124aa <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 80122a2:	f107 031c 	add.w	r3, r7, #28
 80122a6:	461a      	mov	r2, r3
 80122a8:	498a      	ldr	r1, [pc, #552]	@ (80124d4 <debug_parse+0x61c>)
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 fb6e 	bl	801298c <siscanf>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	f040 80f9 	bne.w	80124aa <debug_parse+0x5f2>
		{
			switch (temp1){
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	2b12      	cmp	r3, #18
 80122bc:	f200 80f5 	bhi.w	80124aa <debug_parse+0x5f2>
 80122c0:	a201      	add	r2, pc, #4	@ (adr r2, 80122c8 <debug_parse+0x410>)
 80122c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122c6:	bf00      	nop
 80122c8:	08012315 	.word	0x08012315
 80122cc:	08012315 	.word	0x08012315
 80122d0:	08012315 	.word	0x08012315
 80122d4:	08012315 	.word	0x08012315
 80122d8:	08012315 	.word	0x08012315
 80122dc:	08012315 	.word	0x08012315
 80122e0:	08012315 	.word	0x08012315
 80122e4:	08012315 	.word	0x08012315
 80122e8:	08012315 	.word	0x08012315
 80122ec:	08012315 	.word	0x08012315
 80122f0:	08012315 	.word	0x08012315
 80122f4:	08012315 	.word	0x08012315
 80122f8:	08012315 	.word	0x08012315
 80122fc:	08012315 	.word	0x08012315
 8012300:	08012315 	.word	0x08012315
 8012304:	08012315 	.word	0x08012315
 8012308:	08012315 	.word	0x08012315
 801230c:	08012315 	.word	0x08012315
 8012310:	08012315 	.word	0x08012315
			case 0:
				break;
 8012314:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 8012316:	e0c8      	b.n	80124aa <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8012318:	f107 031c 	add.w	r3, r7, #28
 801231c:	461a      	mov	r2, r3
 801231e:	496d      	ldr	r1, [pc, #436]	@ (80124d4 <debug_parse+0x61c>)
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fb33 	bl	801298c <siscanf>
 8012326:	4603      	mov	r3, r0
 8012328:	2b01      	cmp	r3, #1
 801232a:	f040 80c0 	bne.w	80124ae <debug_parse+0x5f6>
		{
			switch (temp1){
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	2b09      	cmp	r3, #9
 8012332:	f200 80bc 	bhi.w	80124ae <debug_parse+0x5f6>
 8012336:	a201      	add	r2, pc, #4	@ (adr r2, 801233c <debug_parse+0x484>)
 8012338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801233c:	08012365 	.word	0x08012365
 8012340:	08012365 	.word	0x08012365
 8012344:	08012365 	.word	0x08012365
 8012348:	08012365 	.word	0x08012365
 801234c:	08012365 	.word	0x08012365
 8012350:	08012365 	.word	0x08012365
 8012354:	08012365 	.word	0x08012365
 8012358:	08012365 	.word	0x08012365
 801235c:	08012365 	.word	0x08012365
 8012360:	08012365 	.word	0x08012365
			case 0:	//V0
				break;
 8012364:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 8012366:	e0a2      	b.n	80124ae <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 8012368:	f107 0318 	add.w	r3, r7, #24
 801236c:	f107 021c 	add.w	r2, r7, #28
 8012370:	4954      	ldr	r1, [pc, #336]	@ (80124c4 <debug_parse+0x60c>)
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 fb0a 	bl	801298c <siscanf>
 8012378:	4603      	mov	r3, r0
 801237a:	2b02      	cmp	r3, #2
 801237c:	d119      	bne.n	80123b2 <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	f023 0301 	bic.w	r3, r3, #1
 8012384:	461a      	mov	r2, r3
 8012386:	4b50      	ldr	r3, [pc, #320]	@ (80124c8 <debug_parse+0x610>)
 8012388:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 801238e:	4b4e      	ldr	r3, [pc, #312]	@ (80124c8 <debug_parse+0x610>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4619      	mov	r1, r3
 8012394:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012396:	461a      	mov	r2, r3
 8012398:	4853      	ldr	r0, [pc, #332]	@ (80124e8 <debug_parse+0x630>)
 801239a:	f000 f9bb 	bl	8012714 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 801239e:	4b4a      	ldr	r3, [pc, #296]	@ (80124c8 <debug_parse+0x610>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80123a4:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 80123a6:	4b48      	ldr	r3, [pc, #288]	@ (80124c8 <debug_parse+0x610>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	3302      	adds	r3, #2
 80123ac:	4a46      	ldr	r2, [pc, #280]	@ (80124c8 <debug_parse+0x610>)
 80123ae:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 80123b0:	e07f      	b.n	80124b2 <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 80123b2:	f107 031c 	add.w	r3, r7, #28
 80123b6:	461a      	mov	r2, r3
 80123b8:	4946      	ldr	r1, [pc, #280]	@ (80124d4 <debug_parse+0x61c>)
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 fae6 	bl	801298c <siscanf>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d175      	bne.n	80124b2 <debug_parse+0x5fa>
			switch (temp1){
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	2b09      	cmp	r3, #9
 80123ca:	d872      	bhi.n	80124b2 <debug_parse+0x5fa>
 80123cc:	a201      	add	r2, pc, #4	@ (adr r2, 80123d4 <debug_parse+0x51c>)
 80123ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d2:	bf00      	nop
 80123d4:	080123fd 	.word	0x080123fd
 80123d8:	080123fd 	.word	0x080123fd
 80123dc:	080123fd 	.word	0x080123fd
 80123e0:	080123fd 	.word	0x080123fd
 80123e4:	080123fd 	.word	0x080123fd
 80123e8:	080123fd 	.word	0x080123fd
 80123ec:	080123fd 	.word	0x080123fd
 80123f0:	080123fd 	.word	0x080123fd
 80123f4:	080123fd 	.word	0x080123fd
 80123f8:	080123fd 	.word	0x080123fd
			break;
 80123fc:	bf00      	nop
		break;
 80123fe:	e058      	b.n	80124b2 <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8012400:	f107 031c 	add.w	r3, r7, #28
 8012404:	461a      	mov	r2, r3
 8012406:	4933      	ldr	r1, [pc, #204]	@ (80124d4 <debug_parse+0x61c>)
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fabf 	bl	801298c <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 801240e:	e055      	b.n	80124bc <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 8012410:	f107 0318 	add.w	r3, r7, #24
 8012414:	f107 021c 	add.w	r2, r7, #28
 8012418:	4934      	ldr	r1, [pc, #208]	@ (80124ec <debug_parse+0x634>)
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f000 fab6 	bl	801298c <siscanf>
 8012420:	4603      	mov	r3, r0
 8012422:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b0f      	cmp	r3, #15
 8012428:	d845      	bhi.n	80124b6 <debug_parse+0x5fe>
 801242a:	a201      	add	r2, pc, #4	@ (adr r2, 8012430 <debug_parse+0x578>)
 801242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012430:	08012471 	.word	0x08012471
 8012434:	08012471 	.word	0x08012471
 8012438:	08012471 	.word	0x08012471
 801243c:	08012471 	.word	0x08012471
 8012440:	08012471 	.word	0x08012471
 8012444:	08012471 	.word	0x08012471
 8012448:	08012471 	.word	0x08012471
 801244c:	08012471 	.word	0x08012471
 8012450:	08012471 	.word	0x08012471
 8012454:	08012471 	.word	0x08012471
 8012458:	08012471 	.word	0x08012471
 801245c:	08012471 	.word	0x08012471
 8012460:	08012471 	.word	0x08012471
 8012464:	08012471 	.word	0x08012471
 8012468:	08012471 	.word	0x08012471
 801246c:	08012471 	.word	0x08012471
			case 0:	//Y0
				{
				}
				break;
 8012470:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 8012472:	e020      	b.n	80124b6 <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 8012474:	f107 0318 	add.w	r3, r7, #24
 8012478:	f107 021c 	add.w	r2, r7, #28
 801247c:	491c      	ldr	r1, [pc, #112]	@ (80124f0 <debug_parse+0x638>)
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 fa84 	bl	801298c <siscanf>
 8012484:	4603      	mov	r3, r0
 8012486:	2b02      	cmp	r3, #2
 8012488:	d017      	beq.n	80124ba <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 801248a:	f107 031c 	add.w	r3, r7, #28
 801248e:	461a      	mov	r2, r3
 8012490:	4918      	ldr	r1, [pc, #96]	@ (80124f4 <debug_parse+0x63c>)
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 fa7a 	bl	801298c <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 8012498:	e00f      	b.n	80124ba <debug_parse+0x602>
		break;
 801249a:	bf00      	nop
 801249c:	e00e      	b.n	80124bc <debug_parse+0x604>
		break;
 801249e:	bf00      	nop
 80124a0:	e00c      	b.n	80124bc <debug_parse+0x604>
		break;
 80124a2:	bf00      	nop
 80124a4:	e00a      	b.n	80124bc <debug_parse+0x604>
		break;
 80124a6:	bf00      	nop
 80124a8:	e008      	b.n	80124bc <debug_parse+0x604>
		break;
 80124aa:	bf00      	nop
 80124ac:	e006      	b.n	80124bc <debug_parse+0x604>
		break;
 80124ae:	bf00      	nop
 80124b0:	e004      	b.n	80124bc <debug_parse+0x604>
		break;
 80124b2:	bf00      	nop
 80124b4:	e002      	b.n	80124bc <debug_parse+0x604>
		break;
 80124b6:	bf00      	nop
 80124b8:	e000      	b.n	80124bc <debug_parse+0x604>
		break;
 80124ba:	bf00      	nop
	default:
		;
	}
}
 80124bc:	bf00      	nop
 80124be:	3730      	adds	r7, #48	@ 0x30
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	08013de4 	.word	0x08013de4
 80124c8:	24000110 	.word	0x24000110
 80124cc:	08013dec 	.word	0x08013dec
 80124d0:	08013d30 	.word	0x08013d30
 80124d4:	08013dfc 	.word	0x08013dfc
 80124d8:	24006934 	.word	0x24006934
 80124dc:	08013e00 	.word	0x08013e00
 80124e0:	08013e0c 	.word	0x08013e0c
 80124e4:	08013e1c 	.word	0x08013e1c
 80124e8:	08013e24 	.word	0x08013e24
 80124ec:	08013e34 	.word	0x08013e34
 80124f0:	08013e3c 	.word	0x08013e3c
 80124f4:	08013e44 	.word	0x08013e44

080124f8 <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	4603      	mov	r3, r0
 8012500:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	2b0d      	cmp	r3, #13
 8012506:	d003      	beq.n	8012510 <debug_rcv+0x18>
 8012508:	4b21      	ldr	r3, [pc, #132]	@ (8012590 <debug_rcv+0x98>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2bff      	cmp	r3, #255	@ 0xff
 801250e:	d112      	bne.n	8012536 <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 8012510:	4b1f      	ldr	r3, [pc, #124]	@ (8012590 <debug_rcv+0x98>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a1f      	ldr	r2, [pc, #124]	@ (8012594 <debug_rcv+0x9c>)
 8012516:	2100      	movs	r1, #0
 8012518:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 801251a:	4b1d      	ldr	r3, [pc, #116]	@ (8012590 <debug_rcv+0x98>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d002      	beq.n	8012528 <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 8012522:	481c      	ldr	r0, [pc, #112]	@ (8012594 <debug_rcv+0x9c>)
 8012524:	f7ff fcc8 	bl	8011eb8 <debug_parse>
		}
		lineptr = 0;
 8012528:	4b19      	ldr	r3, [pc, #100]	@ (8012590 <debug_rcv+0x98>)
 801252a:	2200      	movs	r2, #0
 801252c:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 801252e:	481a      	ldr	r0, [pc, #104]	@ (8012598 <debug_rcv+0xa0>)
 8012530:	f000 f8d6 	bl	80126e0 <DebugSend>
 8012534:	e027      	b.n	8012586 <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	3301      	adds	r3, #1
 801253a:	4a18      	ldr	r2, [pc, #96]	@ (801259c <debug_rcv+0xa4>)
 801253c:	4413      	add	r3, r2
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	f003 0320 	and.w	r3, r3, #32
 8012544:	2b00      	cmp	r3, #0
 8012546:	d010      	beq.n	801256a <debug_rcv+0x72>
	{
		switch (ch)
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	2b08      	cmp	r3, #8
 801254c:	d11b      	bne.n	8012586 <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 801254e:	4b10      	ldr	r3, [pc, #64]	@ (8012590 <debug_rcv+0x98>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d016      	beq.n	8012584 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	4618      	mov	r0, r3
 801255a:	f000 f87f 	bl	801265c <DebugPutChar>
				lineptr--;
 801255e:	4b0c      	ldr	r3, [pc, #48]	@ (8012590 <debug_rcv+0x98>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	3b01      	subs	r3, #1
 8012564:	4a0a      	ldr	r2, [pc, #40]	@ (8012590 <debug_rcv+0x98>)
 8012566:	6013      	str	r3, [r2, #0]
			}
			break;
 8012568:	e00c      	b.n	8012584 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 801256a:	4b09      	ldr	r3, [pc, #36]	@ (8012590 <debug_rcv+0x98>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	4907      	ldr	r1, [pc, #28]	@ (8012590 <debug_rcv+0x98>)
 8012572:	600a      	str	r2, [r1, #0]
 8012574:	4907      	ldr	r1, [pc, #28]	@ (8012594 <debug_rcv+0x9c>)
 8012576:	79fa      	ldrb	r2, [r7, #7]
 8012578:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 801257a:	79fb      	ldrb	r3, [r7, #7]
 801257c:	4618      	mov	r0, r3
 801257e:	f000 f86d 	bl	801265c <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 8012582:	e000      	b.n	8012586 <debug_rcv+0x8e>
			break;
 8012584:	bf00      	nop
}
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	24007a40 	.word	0x24007a40
 8012594:	24007a44 	.word	0x24007a44
 8012598:	08013e48 	.word	0x08013e48
 801259c:	08013ee8 	.word	0x08013ee8

080125a0 <DebugInit>:
	{
	}
}

void DebugInit(void)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	af00      	add	r7, sp, #0
	DebugPrint("\r\n  Welcome to Debug Console ver STM1.1!");
 80125a4:	4806      	ldr	r0, [pc, #24]	@ (80125c0 <DebugInit+0x20>)
 80125a6:	f000 f8b5 	bl	8012714 <DebugPrint>
	DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 80125aa:	4a06      	ldr	r2, [pc, #24]	@ (80125c4 <DebugInit+0x24>)
 80125ac:	4906      	ldr	r1, [pc, #24]	@ (80125c8 <DebugInit+0x28>)
 80125ae:	4807      	ldr	r0, [pc, #28]	@ (80125cc <DebugInit+0x2c>)
 80125b0:	f000 f8b0 	bl	8012714 <DebugPrint>
	SendDebugPrompt;
 80125b4:	4806      	ldr	r0, [pc, #24]	@ (80125d0 <DebugInit+0x30>)
 80125b6:	f000 f893 	bl	80126e0 <DebugSend>
}
 80125ba:	bf00      	nop
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	08013e50 	.word	0x08013e50
 80125c4:	08013cd4 	.word	0x08013cd4
 80125c8:	08013ce0 	.word	0x08013ce0
 80125cc:	08013cec 	.word	0x08013cec
 80125d0:	08013e48 	.word	0x08013e48

080125d4 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
	if (!InDebug) {
 80125da:	4b1c      	ldr	r3, [pc, #112]	@ (801264c <DebugTask+0x78>)
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d12d      	bne.n	801263e <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 80125e2:	4b1a      	ldr	r3, [pc, #104]	@ (801264c <DebugTask+0x78>)
 80125e4:	2201      	movs	r2, #1
 80125e6:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 80125e8:	4b19      	ldr	r3, [pc, #100]	@ (8012650 <DebugTask+0x7c>)
 80125ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125ee:	4b19      	ldr	r3, [pc, #100]	@ (8012654 <DebugTask+0x80>)
 80125f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d01f      	beq.n	8012638 <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 80125f8:	4b16      	ldr	r3, [pc, #88]	@ (8012654 <DebugTask+0x80>)
 80125fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125fe:	b293      	uxth	r3, r2
 8012600:	3301      	adds	r3, #1
 8012602:	b29b      	uxth	r3, r3
 8012604:	b219      	sxth	r1, r3
 8012606:	4b13      	ldr	r3, [pc, #76]	@ (8012654 <DebugTask+0x80>)
 8012608:	8019      	strh	r1, [r3, #0]
 801260a:	4b13      	ldr	r3, [pc, #76]	@ (8012658 <DebugTask+0x84>)
 801260c:	5c9b      	ldrb	r3, [r3, r2]
 801260e:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 8012610:	4b10      	ldr	r3, [pc, #64]	@ (8012654 <DebugTask+0x80>)
 8012612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012616:	2bff      	cmp	r3, #255	@ 0xff
 8012618:	dd02      	ble.n	8012620 <DebugTask+0x4c>
 801261a:	4b0e      	ldr	r3, [pc, #56]	@ (8012654 <DebugTask+0x80>)
 801261c:	2200      	movs	r2, #0
 801261e:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 8012620:	79fb      	ldrb	r3, [r7, #7]
 8012622:	4618      	mov	r0, r3
 8012624:	f7ff ff68 	bl	80124f8 <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 8012628:	4b09      	ldr	r3, [pc, #36]	@ (8012650 <DebugTask+0x7c>)
 801262a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801262e:	4b09      	ldr	r3, [pc, #36]	@ (8012654 <DebugTask+0x80>)
 8012630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012634:	429a      	cmp	r2, r3
 8012636:	d1df      	bne.n	80125f8 <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 8012638:	4b04      	ldr	r3, [pc, #16]	@ (801264c <DebugTask+0x78>)
 801263a:	2200      	movs	r2, #0
 801263c:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 801263e:	f000 f881 	bl	8012744 <DoDebugSerial>
#endif
}
 8012642:	bf00      	nop
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	24007b44 	.word	0x24007b44
 8012650:	24006a38 	.word	0x24006a38
 8012654:	24006a3a 	.word	0x24006a3a
 8012658:	24006938 	.word	0x24006938

0801265c <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 801265c:	b480      	push	{r7}
 801265e:	b083      	sub	sp, #12
 8012660:	af00      	add	r7, sp, #0
 8012662:	4603      	mov	r3, r0
 8012664:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 8012666:	4b1b      	ldr	r3, [pc, #108]	@ (80126d4 <DebugPutChar+0x78>)
 8012668:	f9b3 2000 	ldrsh.w	r2, [r3]
 801266c:	b293      	uxth	r3, r2
 801266e:	3301      	adds	r3, #1
 8012670:	b29b      	uxth	r3, r3
 8012672:	b219      	sxth	r1, r3
 8012674:	4b17      	ldr	r3, [pc, #92]	@ (80126d4 <DebugPutChar+0x78>)
 8012676:	8019      	strh	r1, [r3, #0]
 8012678:	4611      	mov	r1, r2
 801267a:	4a17      	ldr	r2, [pc, #92]	@ (80126d8 <DebugPutChar+0x7c>)
 801267c:	79fb      	ldrb	r3, [r7, #7]
 801267e:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 8012680:	4b14      	ldr	r3, [pc, #80]	@ (80126d4 <DebugPutChar+0x78>)
 8012682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801268a:	db02      	blt.n	8012692 <DebugPutChar+0x36>
 801268c:	4b11      	ldr	r3, [pc, #68]	@ (80126d4 <DebugPutChar+0x78>)
 801268e:	2200      	movs	r2, #0
 8012690:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 8012692:	4b10      	ldr	r3, [pc, #64]	@ (80126d4 <DebugPutChar+0x78>)
 8012694:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012698:	4b10      	ldr	r3, [pc, #64]	@ (80126dc <DebugPutChar+0x80>)
 801269a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d111      	bne.n	80126c6 <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 80126a2:	4b0e      	ldr	r3, [pc, #56]	@ (80126dc <DebugPutChar+0x80>)
 80126a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	3301      	adds	r3, #1
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	b21a      	sxth	r2, r3
 80126b0:	4b0a      	ldr	r3, [pc, #40]	@ (80126dc <DebugPutChar+0x80>)
 80126b2:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 80126b4:	4b09      	ldr	r3, [pc, #36]	@ (80126dc <DebugPutChar+0x80>)
 80126b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80126be:	db02      	blt.n	80126c6 <DebugPutChar+0x6a>
 80126c0:	4b06      	ldr	r3, [pc, #24]	@ (80126dc <DebugPutChar+0x80>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 80126c6:	bf00      	nop
 80126c8:	370c      	adds	r7, #12
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	2400723c 	.word	0x2400723c
 80126d8:	24006a3c 	.word	0x24006a3c
 80126dc:	2400723e 	.word	0x2400723e

080126e0 <DebugSend>:

void DebugSend(char *message)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
	char ch = *message;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 80126ee:	e009      	b.n	8012704 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7ff ffb2 	bl	801265c <DebugPutChar>
		message++;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3301      	adds	r3, #1
 80126fc:	607b      	str	r3, [r7, #4]
		ch = *message;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 8012704:	7bfb      	ldrb	r3, [r7, #15]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1f2      	bne.n	80126f0 <DebugSend+0x10>
	}
}
 801270a:	bf00      	nop
 801270c:	bf00      	nop
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 8012714:	b40f      	push	{r0, r1, r2, r3}
 8012716:	b580      	push	{r7, lr}
 8012718:	b096      	sub	sp, #88	@ 0x58
 801271a:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 801271c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012720:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 8012722:	1d3b      	adds	r3, r7, #4
 8012724:	683a      	ldr	r2, [r7, #0]
 8012726:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012728:	4618      	mov	r0, r3
 801272a:	f000 f973 	bl	8012a14 <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 801272e:	1d3b      	adds	r3, r7, #4
 8012730:	4618      	mov	r0, r3
 8012732:	f7ff ffd5 	bl	80126e0 <DebugSend>
}
 8012736:	bf00      	nop
 8012738:	3758      	adds	r7, #88	@ 0x58
 801273a:	46bd      	mov	sp, r7
 801273c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012740:	b004      	add	sp, #16
 8012742:	4770      	bx	lr

08012744 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 801274a:	4b28      	ldr	r3, [pc, #160]	@ (80127ec <DoDebugSerial+0xa8>)
 801274c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012750:	4b27      	ldr	r3, [pc, #156]	@ (80127f0 <DoDebugSerial+0xac>)
 8012752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012756:	429a      	cmp	r2, r3
 8012758:	d043      	beq.n	80127e2 <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 801275a:	4b24      	ldr	r3, [pc, #144]	@ (80127ec <DoDebugSerial+0xa8>)
 801275c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012760:	b29a      	uxth	r2, r3
 8012762:	4b23      	ldr	r3, [pc, #140]	@ (80127f0 <DoDebugSerial+0xac>)
 8012764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012768:	b29b      	uxth	r3, r3
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	b29b      	uxth	r3, r3
 801276e:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 8012770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012774:	2b00      	cmp	r3, #0
 8012776:	da04      	bge.n	8012782 <DoDebugSerial+0x3e>
 8012778:	88fb      	ldrh	r3, [r7, #6]
 801277a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801277e:	b29b      	uxth	r3, r3
 8012780:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 8012782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801278a:	dd02      	ble.n	8012792 <DoDebugSerial+0x4e>
 801278c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012790:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8012792:	2300      	movs	r3, #0
 8012794:	80bb      	strh	r3, [r7, #4]
 8012796:	e01a      	b.n	80127ce <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 8012798:	4b15      	ldr	r3, [pc, #84]	@ (80127f0 <DoDebugSerial+0xac>)
 801279a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801279e:	b293      	uxth	r3, r2
 80127a0:	3301      	adds	r3, #1
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	b219      	sxth	r1, r3
 80127a6:	4b12      	ldr	r3, [pc, #72]	@ (80127f0 <DoDebugSerial+0xac>)
 80127a8:	8019      	strh	r1, [r3, #0]
 80127aa:	4611      	mov	r1, r2
 80127ac:	88bb      	ldrh	r3, [r7, #4]
 80127ae:	4a11      	ldr	r2, [pc, #68]	@ (80127f4 <DoDebugSerial+0xb0>)
 80127b0:	5c51      	ldrb	r1, [r2, r1]
 80127b2:	4a11      	ldr	r2, [pc, #68]	@ (80127f8 <DoDebugSerial+0xb4>)
 80127b4:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 80127b6:	4b0e      	ldr	r3, [pc, #56]	@ (80127f0 <DoDebugSerial+0xac>)
 80127b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80127c0:	db02      	blt.n	80127c8 <DoDebugSerial+0x84>
 80127c2:	4b0b      	ldr	r3, [pc, #44]	@ (80127f0 <DoDebugSerial+0xac>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 80127c8:	88bb      	ldrh	r3, [r7, #4]
 80127ca:	3301      	adds	r3, #1
 80127cc:	80bb      	strh	r3, [r7, #4]
 80127ce:	88ba      	ldrh	r2, [r7, #4]
 80127d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	dbdf      	blt.n	8012798 <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 80127d8:	88fb      	ldrh	r3, [r7, #6]
 80127da:	4619      	mov	r1, r3
 80127dc:	4806      	ldr	r0, [pc, #24]	@ (80127f8 <DoDebugSerial+0xb4>)
 80127de:	f7fe fe72 	bl	80114c6 <USB_Transmit>
	}
}
 80127e2:	bf00      	nop
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	2400723c 	.word	0x2400723c
 80127f0:	2400723e 	.word	0x2400723e
 80127f4:	24006a3c 	.word	0x24006a3c
 80127f8:	24007240 	.word	0x24007240

080127fc <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 80127fc:	b480      	push	{r7}
 80127fe:	b085      	sub	sp, #20
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	460b      	mov	r3, r1
 8012806:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 8012808:	2300      	movs	r3, #0
 801280a:	81fb      	strh	r3, [r7, #14]
 801280c:	e033      	b.n	8012876 <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 801280e:	89fb      	ldrh	r3, [r7, #14]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	4413      	add	r3, r2
 8012814:	4a1d      	ldr	r2, [pc, #116]	@ (801288c <USB_Receive+0x90>)
 8012816:	f9b2 1000 	ldrsh.w	r1, [r2]
 801281a:	b28a      	uxth	r2, r1
 801281c:	3201      	adds	r2, #1
 801281e:	b292      	uxth	r2, r2
 8012820:	b210      	sxth	r0, r2
 8012822:	4a1a      	ldr	r2, [pc, #104]	@ (801288c <USB_Receive+0x90>)
 8012824:	8010      	strh	r0, [r2, #0]
 8012826:	460a      	mov	r2, r1
 8012828:	7819      	ldrb	r1, [r3, #0]
 801282a:	4b19      	ldr	r3, [pc, #100]	@ (8012890 <USB_Receive+0x94>)
 801282c:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 801282e:	4b17      	ldr	r3, [pc, #92]	@ (801288c <USB_Receive+0x90>)
 8012830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012834:	2bff      	cmp	r3, #255	@ 0xff
 8012836:	dd02      	ble.n	801283e <USB_Receive+0x42>
 8012838:	4b14      	ldr	r3, [pc, #80]	@ (801288c <USB_Receive+0x90>)
 801283a:	2200      	movs	r2, #0
 801283c:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 801283e:	4b13      	ldr	r3, [pc, #76]	@ (801288c <USB_Receive+0x90>)
 8012840:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012844:	4b13      	ldr	r3, [pc, #76]	@ (8012894 <USB_Receive+0x98>)
 8012846:	f9b3 3000 	ldrsh.w	r3, [r3]
 801284a:	429a      	cmp	r2, r3
 801284c:	d110      	bne.n	8012870 <USB_Receive+0x74>
			dbg_rx_tail++;
 801284e:	4b11      	ldr	r3, [pc, #68]	@ (8012894 <USB_Receive+0x98>)
 8012850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012854:	b29b      	uxth	r3, r3
 8012856:	3301      	adds	r3, #1
 8012858:	b29b      	uxth	r3, r3
 801285a:	b21a      	sxth	r2, r3
 801285c:	4b0d      	ldr	r3, [pc, #52]	@ (8012894 <USB_Receive+0x98>)
 801285e:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 8012860:	4b0c      	ldr	r3, [pc, #48]	@ (8012894 <USB_Receive+0x98>)
 8012862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012866:	2bff      	cmp	r3, #255	@ 0xff
 8012868:	dd02      	ble.n	8012870 <USB_Receive+0x74>
 801286a:	4b0a      	ldr	r3, [pc, #40]	@ (8012894 <USB_Receive+0x98>)
 801286c:	2200      	movs	r2, #0
 801286e:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 8012870:	89fb      	ldrh	r3, [r7, #14]
 8012872:	3301      	adds	r3, #1
 8012874:	81fb      	strh	r3, [r7, #14]
 8012876:	89fa      	ldrh	r2, [r7, #14]
 8012878:	887b      	ldrh	r3, [r7, #2]
 801287a:	429a      	cmp	r2, r3
 801287c:	d3c7      	bcc.n	801280e <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	3714      	adds	r7, #20
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr
 801288c:	24006a38 	.word	0x24006a38
 8012890:	24006938 	.word	0x24006938
 8012894:	24006a3a 	.word	0x24006a3a

08012898 <_strtoul_l.isra.0>:
 8012898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801289c:	4e34      	ldr	r6, [pc, #208]	@ (8012970 <_strtoul_l.isra.0+0xd8>)
 801289e:	4686      	mov	lr, r0
 80128a0:	460d      	mov	r5, r1
 80128a2:	4628      	mov	r0, r5
 80128a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128a8:	5d37      	ldrb	r7, [r6, r4]
 80128aa:	f017 0708 	ands.w	r7, r7, #8
 80128ae:	d1f8      	bne.n	80128a2 <_strtoul_l.isra.0+0xa>
 80128b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80128b2:	d110      	bne.n	80128d6 <_strtoul_l.isra.0+0x3e>
 80128b4:	782c      	ldrb	r4, [r5, #0]
 80128b6:	2701      	movs	r7, #1
 80128b8:	1c85      	adds	r5, r0, #2
 80128ba:	f033 0010 	bics.w	r0, r3, #16
 80128be:	d115      	bne.n	80128ec <_strtoul_l.isra.0+0x54>
 80128c0:	2c30      	cmp	r4, #48	@ 0x30
 80128c2:	d10d      	bne.n	80128e0 <_strtoul_l.isra.0+0x48>
 80128c4:	7828      	ldrb	r0, [r5, #0]
 80128c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80128ca:	2858      	cmp	r0, #88	@ 0x58
 80128cc:	d108      	bne.n	80128e0 <_strtoul_l.isra.0+0x48>
 80128ce:	786c      	ldrb	r4, [r5, #1]
 80128d0:	3502      	adds	r5, #2
 80128d2:	2310      	movs	r3, #16
 80128d4:	e00a      	b.n	80128ec <_strtoul_l.isra.0+0x54>
 80128d6:	2c2b      	cmp	r4, #43	@ 0x2b
 80128d8:	bf04      	itt	eq
 80128da:	782c      	ldrbeq	r4, [r5, #0]
 80128dc:	1c85      	addeq	r5, r0, #2
 80128de:	e7ec      	b.n	80128ba <_strtoul_l.isra.0+0x22>
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1f6      	bne.n	80128d2 <_strtoul_l.isra.0+0x3a>
 80128e4:	2c30      	cmp	r4, #48	@ 0x30
 80128e6:	bf14      	ite	ne
 80128e8:	230a      	movne	r3, #10
 80128ea:	2308      	moveq	r3, #8
 80128ec:	f04f 38ff 	mov.w	r8, #4294967295
 80128f0:	2600      	movs	r6, #0
 80128f2:	fbb8 f8f3 	udiv	r8, r8, r3
 80128f6:	fb03 f908 	mul.w	r9, r3, r8
 80128fa:	ea6f 0909 	mvn.w	r9, r9
 80128fe:	4630      	mov	r0, r6
 8012900:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012904:	f1bc 0f09 	cmp.w	ip, #9
 8012908:	d810      	bhi.n	801292c <_strtoul_l.isra.0+0x94>
 801290a:	4664      	mov	r4, ip
 801290c:	42a3      	cmp	r3, r4
 801290e:	dd1e      	ble.n	801294e <_strtoul_l.isra.0+0xb6>
 8012910:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012914:	d007      	beq.n	8012926 <_strtoul_l.isra.0+0x8e>
 8012916:	4580      	cmp	r8, r0
 8012918:	d316      	bcc.n	8012948 <_strtoul_l.isra.0+0xb0>
 801291a:	d101      	bne.n	8012920 <_strtoul_l.isra.0+0x88>
 801291c:	45a1      	cmp	r9, r4
 801291e:	db13      	blt.n	8012948 <_strtoul_l.isra.0+0xb0>
 8012920:	fb00 4003 	mla	r0, r0, r3, r4
 8012924:	2601      	movs	r6, #1
 8012926:	f815 4b01 	ldrb.w	r4, [r5], #1
 801292a:	e7e9      	b.n	8012900 <_strtoul_l.isra.0+0x68>
 801292c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012930:	f1bc 0f19 	cmp.w	ip, #25
 8012934:	d801      	bhi.n	801293a <_strtoul_l.isra.0+0xa2>
 8012936:	3c37      	subs	r4, #55	@ 0x37
 8012938:	e7e8      	b.n	801290c <_strtoul_l.isra.0+0x74>
 801293a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801293e:	f1bc 0f19 	cmp.w	ip, #25
 8012942:	d804      	bhi.n	801294e <_strtoul_l.isra.0+0xb6>
 8012944:	3c57      	subs	r4, #87	@ 0x57
 8012946:	e7e1      	b.n	801290c <_strtoul_l.isra.0+0x74>
 8012948:	f04f 36ff 	mov.w	r6, #4294967295
 801294c:	e7eb      	b.n	8012926 <_strtoul_l.isra.0+0x8e>
 801294e:	1c73      	adds	r3, r6, #1
 8012950:	d106      	bne.n	8012960 <_strtoul_l.isra.0+0xc8>
 8012952:	2322      	movs	r3, #34	@ 0x22
 8012954:	f8ce 3000 	str.w	r3, [lr]
 8012958:	4630      	mov	r0, r6
 801295a:	b932      	cbnz	r2, 801296a <_strtoul_l.isra.0+0xd2>
 801295c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012960:	b107      	cbz	r7, 8012964 <_strtoul_l.isra.0+0xcc>
 8012962:	4240      	negs	r0, r0
 8012964:	2a00      	cmp	r2, #0
 8012966:	d0f9      	beq.n	801295c <_strtoul_l.isra.0+0xc4>
 8012968:	b106      	cbz	r6, 801296c <_strtoul_l.isra.0+0xd4>
 801296a:	1e69      	subs	r1, r5, #1
 801296c:	6011      	str	r1, [r2, #0]
 801296e:	e7f5      	b.n	801295c <_strtoul_l.isra.0+0xc4>
 8012970:	08013ee9 	.word	0x08013ee9

08012974 <_strtoul_r>:
 8012974:	f7ff bf90 	b.w	8012898 <_strtoul_l.isra.0>

08012978 <strtoul>:
 8012978:	4613      	mov	r3, r2
 801297a:	460a      	mov	r2, r1
 801297c:	4601      	mov	r1, r0
 801297e:	4802      	ldr	r0, [pc, #8]	@ (8012988 <strtoul+0x10>)
 8012980:	6800      	ldr	r0, [r0, #0]
 8012982:	f7ff bf89 	b.w	8012898 <_strtoul_l.isra.0>
 8012986:	bf00      	nop
 8012988:	24000114 	.word	0x24000114

0801298c <siscanf>:
 801298c:	b40e      	push	{r1, r2, r3}
 801298e:	b570      	push	{r4, r5, r6, lr}
 8012990:	b09d      	sub	sp, #116	@ 0x74
 8012992:	ac21      	add	r4, sp, #132	@ 0x84
 8012994:	2500      	movs	r5, #0
 8012996:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801299a:	f854 6b04 	ldr.w	r6, [r4], #4
 801299e:	f8ad 2014 	strh.w	r2, [sp, #20]
 80129a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80129a4:	9002      	str	r0, [sp, #8]
 80129a6:	9006      	str	r0, [sp, #24]
 80129a8:	f7ed fc9a 	bl	80002e0 <strlen>
 80129ac:	4b0b      	ldr	r3, [pc, #44]	@ (80129dc <siscanf+0x50>)
 80129ae:	9003      	str	r0, [sp, #12]
 80129b0:	9007      	str	r0, [sp, #28]
 80129b2:	480b      	ldr	r0, [pc, #44]	@ (80129e0 <siscanf+0x54>)
 80129b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80129ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80129be:	4632      	mov	r2, r6
 80129c0:	4623      	mov	r3, r4
 80129c2:	a902      	add	r1, sp, #8
 80129c4:	6800      	ldr	r0, [r0, #0]
 80129c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80129c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80129ca:	9401      	str	r4, [sp, #4]
 80129cc:	f000 fb76 	bl	80130bc <__ssvfiscanf_r>
 80129d0:	b01d      	add	sp, #116	@ 0x74
 80129d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129d6:	b003      	add	sp, #12
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	080129e5 	.word	0x080129e5
 80129e0:	24000114 	.word	0x24000114

080129e4 <__seofread>:
 80129e4:	2000      	movs	r0, #0
 80129e6:	4770      	bx	lr

080129e8 <_vsiprintf_r>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	b09a      	sub	sp, #104	@ 0x68
 80129ec:	2400      	movs	r4, #0
 80129ee:	9100      	str	r1, [sp, #0]
 80129f0:	9104      	str	r1, [sp, #16]
 80129f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129f6:	9105      	str	r1, [sp, #20]
 80129f8:	9102      	str	r1, [sp, #8]
 80129fa:	4905      	ldr	r1, [pc, #20]	@ (8012a10 <_vsiprintf_r+0x28>)
 80129fc:	9103      	str	r1, [sp, #12]
 80129fe:	4669      	mov	r1, sp
 8012a00:	9419      	str	r4, [sp, #100]	@ 0x64
 8012a02:	f000 fa05 	bl	8012e10 <_svfiprintf_r>
 8012a06:	9b00      	ldr	r3, [sp, #0]
 8012a08:	701c      	strb	r4, [r3, #0]
 8012a0a:	b01a      	add	sp, #104	@ 0x68
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	bf00      	nop
 8012a10:	ffff0208 	.word	0xffff0208

08012a14 <vsiprintf>:
 8012a14:	4613      	mov	r3, r2
 8012a16:	460a      	mov	r2, r1
 8012a18:	4601      	mov	r1, r0
 8012a1a:	4802      	ldr	r0, [pc, #8]	@ (8012a24 <vsiprintf+0x10>)
 8012a1c:	6800      	ldr	r0, [r0, #0]
 8012a1e:	f7ff bfe3 	b.w	80129e8 <_vsiprintf_r>
 8012a22:	bf00      	nop
 8012a24:	24000114 	.word	0x24000114

08012a28 <memset>:
 8012a28:	4402      	add	r2, r0
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d100      	bne.n	8012a32 <memset+0xa>
 8012a30:	4770      	bx	lr
 8012a32:	f803 1b01 	strb.w	r1, [r3], #1
 8012a36:	e7f9      	b.n	8012a2c <memset+0x4>

08012a38 <_reclaim_reent>:
 8012a38:	4b2d      	ldr	r3, [pc, #180]	@ (8012af0 <_reclaim_reent+0xb8>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4283      	cmp	r3, r0
 8012a3e:	b570      	push	{r4, r5, r6, lr}
 8012a40:	4604      	mov	r4, r0
 8012a42:	d053      	beq.n	8012aec <_reclaim_reent+0xb4>
 8012a44:	69c3      	ldr	r3, [r0, #28]
 8012a46:	b31b      	cbz	r3, 8012a90 <_reclaim_reent+0x58>
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	b163      	cbz	r3, 8012a66 <_reclaim_reent+0x2e>
 8012a4c:	2500      	movs	r5, #0
 8012a4e:	69e3      	ldr	r3, [r4, #28]
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	5959      	ldr	r1, [r3, r5]
 8012a54:	b9b1      	cbnz	r1, 8012a84 <_reclaim_reent+0x4c>
 8012a56:	3504      	adds	r5, #4
 8012a58:	2d80      	cmp	r5, #128	@ 0x80
 8012a5a:	d1f8      	bne.n	8012a4e <_reclaim_reent+0x16>
 8012a5c:	69e3      	ldr	r3, [r4, #28]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	68d9      	ldr	r1, [r3, #12]
 8012a62:	f000 f881 	bl	8012b68 <_free_r>
 8012a66:	69e3      	ldr	r3, [r4, #28]
 8012a68:	6819      	ldr	r1, [r3, #0]
 8012a6a:	b111      	cbz	r1, 8012a72 <_reclaim_reent+0x3a>
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	f000 f87b 	bl	8012b68 <_free_r>
 8012a72:	69e3      	ldr	r3, [r4, #28]
 8012a74:	689d      	ldr	r5, [r3, #8]
 8012a76:	b15d      	cbz	r5, 8012a90 <_reclaim_reent+0x58>
 8012a78:	4629      	mov	r1, r5
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	682d      	ldr	r5, [r5, #0]
 8012a7e:	f000 f873 	bl	8012b68 <_free_r>
 8012a82:	e7f8      	b.n	8012a76 <_reclaim_reent+0x3e>
 8012a84:	680e      	ldr	r6, [r1, #0]
 8012a86:	4620      	mov	r0, r4
 8012a88:	f000 f86e 	bl	8012b68 <_free_r>
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	e7e1      	b.n	8012a54 <_reclaim_reent+0x1c>
 8012a90:	6961      	ldr	r1, [r4, #20]
 8012a92:	b111      	cbz	r1, 8012a9a <_reclaim_reent+0x62>
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 f867 	bl	8012b68 <_free_r>
 8012a9a:	69e1      	ldr	r1, [r4, #28]
 8012a9c:	b111      	cbz	r1, 8012aa4 <_reclaim_reent+0x6c>
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f000 f862 	bl	8012b68 <_free_r>
 8012aa4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012aa6:	b111      	cbz	r1, 8012aae <_reclaim_reent+0x76>
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f000 f85d 	bl	8012b68 <_free_r>
 8012aae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ab0:	b111      	cbz	r1, 8012ab8 <_reclaim_reent+0x80>
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 f858 	bl	8012b68 <_free_r>
 8012ab8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012aba:	b111      	cbz	r1, 8012ac2 <_reclaim_reent+0x8a>
 8012abc:	4620      	mov	r0, r4
 8012abe:	f000 f853 	bl	8012b68 <_free_r>
 8012ac2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012ac4:	b111      	cbz	r1, 8012acc <_reclaim_reent+0x94>
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 f84e 	bl	8012b68 <_free_r>
 8012acc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012ace:	b111      	cbz	r1, 8012ad6 <_reclaim_reent+0x9e>
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	f000 f849 	bl	8012b68 <_free_r>
 8012ad6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012ad8:	b111      	cbz	r1, 8012ae0 <_reclaim_reent+0xa8>
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 f844 	bl	8012b68 <_free_r>
 8012ae0:	6a23      	ldr	r3, [r4, #32]
 8012ae2:	b11b      	cbz	r3, 8012aec <_reclaim_reent+0xb4>
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012aea:	4718      	bx	r3
 8012aec:	bd70      	pop	{r4, r5, r6, pc}
 8012aee:	bf00      	nop
 8012af0:	24000114 	.word	0x24000114

08012af4 <__errno>:
 8012af4:	4b01      	ldr	r3, [pc, #4]	@ (8012afc <__errno+0x8>)
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	24000114 	.word	0x24000114

08012b00 <__libc_init_array>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	4d0d      	ldr	r5, [pc, #52]	@ (8012b38 <__libc_init_array+0x38>)
 8012b04:	4c0d      	ldr	r4, [pc, #52]	@ (8012b3c <__libc_init_array+0x3c>)
 8012b06:	1b64      	subs	r4, r4, r5
 8012b08:	10a4      	asrs	r4, r4, #2
 8012b0a:	2600      	movs	r6, #0
 8012b0c:	42a6      	cmp	r6, r4
 8012b0e:	d109      	bne.n	8012b24 <__libc_init_array+0x24>
 8012b10:	4d0b      	ldr	r5, [pc, #44]	@ (8012b40 <__libc_init_array+0x40>)
 8012b12:	4c0c      	ldr	r4, [pc, #48]	@ (8012b44 <__libc_init_array+0x44>)
 8012b14:	f001 f872 	bl	8013bfc <_init>
 8012b18:	1b64      	subs	r4, r4, r5
 8012b1a:	10a4      	asrs	r4, r4, #2
 8012b1c:	2600      	movs	r6, #0
 8012b1e:	42a6      	cmp	r6, r4
 8012b20:	d105      	bne.n	8012b2e <__libc_init_array+0x2e>
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b28:	4798      	blx	r3
 8012b2a:	3601      	adds	r6, #1
 8012b2c:	e7ee      	b.n	8012b0c <__libc_init_array+0xc>
 8012b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b32:	4798      	blx	r3
 8012b34:	3601      	adds	r6, #1
 8012b36:	e7f2      	b.n	8012b1e <__libc_init_array+0x1e>
 8012b38:	08014040 	.word	0x08014040
 8012b3c:	08014040 	.word	0x08014040
 8012b40:	08014040 	.word	0x08014040
 8012b44:	08014044 	.word	0x08014044

08012b48 <__retarget_lock_acquire_recursive>:
 8012b48:	4770      	bx	lr

08012b4a <__retarget_lock_release_recursive>:
 8012b4a:	4770      	bx	lr

08012b4c <memcpy>:
 8012b4c:	440a      	add	r2, r1
 8012b4e:	4291      	cmp	r1, r2
 8012b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b54:	d100      	bne.n	8012b58 <memcpy+0xc>
 8012b56:	4770      	bx	lr
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b62:	4291      	cmp	r1, r2
 8012b64:	d1f9      	bne.n	8012b5a <memcpy+0xe>
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <_free_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	2900      	cmp	r1, #0
 8012b6e:	d041      	beq.n	8012bf4 <_free_r+0x8c>
 8012b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b74:	1f0c      	subs	r4, r1, #4
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bfb8      	it	lt
 8012b7a:	18e4      	addlt	r4, r4, r3
 8012b7c:	f000 f8e0 	bl	8012d40 <__malloc_lock>
 8012b80:	4a1d      	ldr	r2, [pc, #116]	@ (8012bf8 <_free_r+0x90>)
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	b933      	cbnz	r3, 8012b94 <_free_r+0x2c>
 8012b86:	6063      	str	r3, [r4, #4]
 8012b88:	6014      	str	r4, [r2, #0]
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b90:	f000 b8dc 	b.w	8012d4c <__malloc_unlock>
 8012b94:	42a3      	cmp	r3, r4
 8012b96:	d908      	bls.n	8012baa <_free_r+0x42>
 8012b98:	6820      	ldr	r0, [r4, #0]
 8012b9a:	1821      	adds	r1, r4, r0
 8012b9c:	428b      	cmp	r3, r1
 8012b9e:	bf01      	itttt	eq
 8012ba0:	6819      	ldreq	r1, [r3, #0]
 8012ba2:	685b      	ldreq	r3, [r3, #4]
 8012ba4:	1809      	addeq	r1, r1, r0
 8012ba6:	6021      	streq	r1, [r4, #0]
 8012ba8:	e7ed      	b.n	8012b86 <_free_r+0x1e>
 8012baa:	461a      	mov	r2, r3
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	b10b      	cbz	r3, 8012bb4 <_free_r+0x4c>
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	d9fa      	bls.n	8012baa <_free_r+0x42>
 8012bb4:	6811      	ldr	r1, [r2, #0]
 8012bb6:	1850      	adds	r0, r2, r1
 8012bb8:	42a0      	cmp	r0, r4
 8012bba:	d10b      	bne.n	8012bd4 <_free_r+0x6c>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	4401      	add	r1, r0
 8012bc0:	1850      	adds	r0, r2, r1
 8012bc2:	4283      	cmp	r3, r0
 8012bc4:	6011      	str	r1, [r2, #0]
 8012bc6:	d1e0      	bne.n	8012b8a <_free_r+0x22>
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	6053      	str	r3, [r2, #4]
 8012bce:	4408      	add	r0, r1
 8012bd0:	6010      	str	r0, [r2, #0]
 8012bd2:	e7da      	b.n	8012b8a <_free_r+0x22>
 8012bd4:	d902      	bls.n	8012bdc <_free_r+0x74>
 8012bd6:	230c      	movs	r3, #12
 8012bd8:	602b      	str	r3, [r5, #0]
 8012bda:	e7d6      	b.n	8012b8a <_free_r+0x22>
 8012bdc:	6820      	ldr	r0, [r4, #0]
 8012bde:	1821      	adds	r1, r4, r0
 8012be0:	428b      	cmp	r3, r1
 8012be2:	bf04      	itt	eq
 8012be4:	6819      	ldreq	r1, [r3, #0]
 8012be6:	685b      	ldreq	r3, [r3, #4]
 8012be8:	6063      	str	r3, [r4, #4]
 8012bea:	bf04      	itt	eq
 8012bec:	1809      	addeq	r1, r1, r0
 8012bee:	6021      	streq	r1, [r4, #0]
 8012bf0:	6054      	str	r4, [r2, #4]
 8012bf2:	e7ca      	b.n	8012b8a <_free_r+0x22>
 8012bf4:	bd38      	pop	{r3, r4, r5, pc}
 8012bf6:	bf00      	nop
 8012bf8:	24007c8c 	.word	0x24007c8c

08012bfc <sbrk_aligned>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8012c3c <sbrk_aligned+0x40>)
 8012c00:	460c      	mov	r4, r1
 8012c02:	6831      	ldr	r1, [r6, #0]
 8012c04:	4605      	mov	r5, r0
 8012c06:	b911      	cbnz	r1, 8012c0e <sbrk_aligned+0x12>
 8012c08:	f000 ff36 	bl	8013a78 <_sbrk_r>
 8012c0c:	6030      	str	r0, [r6, #0]
 8012c0e:	4621      	mov	r1, r4
 8012c10:	4628      	mov	r0, r5
 8012c12:	f000 ff31 	bl	8013a78 <_sbrk_r>
 8012c16:	1c43      	adds	r3, r0, #1
 8012c18:	d103      	bne.n	8012c22 <sbrk_aligned+0x26>
 8012c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8012c1e:	4620      	mov	r0, r4
 8012c20:	bd70      	pop	{r4, r5, r6, pc}
 8012c22:	1cc4      	adds	r4, r0, #3
 8012c24:	f024 0403 	bic.w	r4, r4, #3
 8012c28:	42a0      	cmp	r0, r4
 8012c2a:	d0f8      	beq.n	8012c1e <sbrk_aligned+0x22>
 8012c2c:	1a21      	subs	r1, r4, r0
 8012c2e:	4628      	mov	r0, r5
 8012c30:	f000 ff22 	bl	8013a78 <_sbrk_r>
 8012c34:	3001      	adds	r0, #1
 8012c36:	d1f2      	bne.n	8012c1e <sbrk_aligned+0x22>
 8012c38:	e7ef      	b.n	8012c1a <sbrk_aligned+0x1e>
 8012c3a:	bf00      	nop
 8012c3c:	24007c88 	.word	0x24007c88

08012c40 <_malloc_r>:
 8012c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c44:	1ccd      	adds	r5, r1, #3
 8012c46:	f025 0503 	bic.w	r5, r5, #3
 8012c4a:	3508      	adds	r5, #8
 8012c4c:	2d0c      	cmp	r5, #12
 8012c4e:	bf38      	it	cc
 8012c50:	250c      	movcc	r5, #12
 8012c52:	2d00      	cmp	r5, #0
 8012c54:	4606      	mov	r6, r0
 8012c56:	db01      	blt.n	8012c5c <_malloc_r+0x1c>
 8012c58:	42a9      	cmp	r1, r5
 8012c5a:	d904      	bls.n	8012c66 <_malloc_r+0x26>
 8012c5c:	230c      	movs	r3, #12
 8012c5e:	6033      	str	r3, [r6, #0]
 8012c60:	2000      	movs	r0, #0
 8012c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d3c <_malloc_r+0xfc>
 8012c6a:	f000 f869 	bl	8012d40 <__malloc_lock>
 8012c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c72:	461c      	mov	r4, r3
 8012c74:	bb44      	cbnz	r4, 8012cc8 <_malloc_r+0x88>
 8012c76:	4629      	mov	r1, r5
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f7ff ffbf 	bl	8012bfc <sbrk_aligned>
 8012c7e:	1c43      	adds	r3, r0, #1
 8012c80:	4604      	mov	r4, r0
 8012c82:	d158      	bne.n	8012d36 <_malloc_r+0xf6>
 8012c84:	f8d8 4000 	ldr.w	r4, [r8]
 8012c88:	4627      	mov	r7, r4
 8012c8a:	2f00      	cmp	r7, #0
 8012c8c:	d143      	bne.n	8012d16 <_malloc_r+0xd6>
 8012c8e:	2c00      	cmp	r4, #0
 8012c90:	d04b      	beq.n	8012d2a <_malloc_r+0xea>
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	4639      	mov	r1, r7
 8012c96:	4630      	mov	r0, r6
 8012c98:	eb04 0903 	add.w	r9, r4, r3
 8012c9c:	f000 feec 	bl	8013a78 <_sbrk_r>
 8012ca0:	4581      	cmp	r9, r0
 8012ca2:	d142      	bne.n	8012d2a <_malloc_r+0xea>
 8012ca4:	6821      	ldr	r1, [r4, #0]
 8012ca6:	1a6d      	subs	r5, r5, r1
 8012ca8:	4629      	mov	r1, r5
 8012caa:	4630      	mov	r0, r6
 8012cac:	f7ff ffa6 	bl	8012bfc <sbrk_aligned>
 8012cb0:	3001      	adds	r0, #1
 8012cb2:	d03a      	beq.n	8012d2a <_malloc_r+0xea>
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	442b      	add	r3, r5
 8012cb8:	6023      	str	r3, [r4, #0]
 8012cba:	f8d8 3000 	ldr.w	r3, [r8]
 8012cbe:	685a      	ldr	r2, [r3, #4]
 8012cc0:	bb62      	cbnz	r2, 8012d1c <_malloc_r+0xdc>
 8012cc2:	f8c8 7000 	str.w	r7, [r8]
 8012cc6:	e00f      	b.n	8012ce8 <_malloc_r+0xa8>
 8012cc8:	6822      	ldr	r2, [r4, #0]
 8012cca:	1b52      	subs	r2, r2, r5
 8012ccc:	d420      	bmi.n	8012d10 <_malloc_r+0xd0>
 8012cce:	2a0b      	cmp	r2, #11
 8012cd0:	d917      	bls.n	8012d02 <_malloc_r+0xc2>
 8012cd2:	1961      	adds	r1, r4, r5
 8012cd4:	42a3      	cmp	r3, r4
 8012cd6:	6025      	str	r5, [r4, #0]
 8012cd8:	bf18      	it	ne
 8012cda:	6059      	strne	r1, [r3, #4]
 8012cdc:	6863      	ldr	r3, [r4, #4]
 8012cde:	bf08      	it	eq
 8012ce0:	f8c8 1000 	streq.w	r1, [r8]
 8012ce4:	5162      	str	r2, [r4, r5]
 8012ce6:	604b      	str	r3, [r1, #4]
 8012ce8:	4630      	mov	r0, r6
 8012cea:	f000 f82f 	bl	8012d4c <__malloc_unlock>
 8012cee:	f104 000b 	add.w	r0, r4, #11
 8012cf2:	1d23      	adds	r3, r4, #4
 8012cf4:	f020 0007 	bic.w	r0, r0, #7
 8012cf8:	1ac2      	subs	r2, r0, r3
 8012cfa:	bf1c      	itt	ne
 8012cfc:	1a1b      	subne	r3, r3, r0
 8012cfe:	50a3      	strne	r3, [r4, r2]
 8012d00:	e7af      	b.n	8012c62 <_malloc_r+0x22>
 8012d02:	6862      	ldr	r2, [r4, #4]
 8012d04:	42a3      	cmp	r3, r4
 8012d06:	bf0c      	ite	eq
 8012d08:	f8c8 2000 	streq.w	r2, [r8]
 8012d0c:	605a      	strne	r2, [r3, #4]
 8012d0e:	e7eb      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d10:	4623      	mov	r3, r4
 8012d12:	6864      	ldr	r4, [r4, #4]
 8012d14:	e7ae      	b.n	8012c74 <_malloc_r+0x34>
 8012d16:	463c      	mov	r4, r7
 8012d18:	687f      	ldr	r7, [r7, #4]
 8012d1a:	e7b6      	b.n	8012c8a <_malloc_r+0x4a>
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	42a3      	cmp	r3, r4
 8012d22:	d1fb      	bne.n	8012d1c <_malloc_r+0xdc>
 8012d24:	2300      	movs	r3, #0
 8012d26:	6053      	str	r3, [r2, #4]
 8012d28:	e7de      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d2a:	230c      	movs	r3, #12
 8012d2c:	6033      	str	r3, [r6, #0]
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f000 f80c 	bl	8012d4c <__malloc_unlock>
 8012d34:	e794      	b.n	8012c60 <_malloc_r+0x20>
 8012d36:	6005      	str	r5, [r0, #0]
 8012d38:	e7d6      	b.n	8012ce8 <_malloc_r+0xa8>
 8012d3a:	bf00      	nop
 8012d3c:	24007c8c 	.word	0x24007c8c

08012d40 <__malloc_lock>:
 8012d40:	4801      	ldr	r0, [pc, #4]	@ (8012d48 <__malloc_lock+0x8>)
 8012d42:	f7ff bf01 	b.w	8012b48 <__retarget_lock_acquire_recursive>
 8012d46:	bf00      	nop
 8012d48:	24007c84 	.word	0x24007c84

08012d4c <__malloc_unlock>:
 8012d4c:	4801      	ldr	r0, [pc, #4]	@ (8012d54 <__malloc_unlock+0x8>)
 8012d4e:	f7ff befc 	b.w	8012b4a <__retarget_lock_release_recursive>
 8012d52:	bf00      	nop
 8012d54:	24007c84 	.word	0x24007c84

08012d58 <__ssputs_r>:
 8012d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d5c:	688e      	ldr	r6, [r1, #8]
 8012d5e:	461f      	mov	r7, r3
 8012d60:	42be      	cmp	r6, r7
 8012d62:	680b      	ldr	r3, [r1, #0]
 8012d64:	4682      	mov	sl, r0
 8012d66:	460c      	mov	r4, r1
 8012d68:	4690      	mov	r8, r2
 8012d6a:	d82d      	bhi.n	8012dc8 <__ssputs_r+0x70>
 8012d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d74:	d026      	beq.n	8012dc4 <__ssputs_r+0x6c>
 8012d76:	6965      	ldr	r5, [r4, #20]
 8012d78:	6909      	ldr	r1, [r1, #16]
 8012d7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d7e:	eba3 0901 	sub.w	r9, r3, r1
 8012d82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d86:	1c7b      	adds	r3, r7, #1
 8012d88:	444b      	add	r3, r9
 8012d8a:	106d      	asrs	r5, r5, #1
 8012d8c:	429d      	cmp	r5, r3
 8012d8e:	bf38      	it	cc
 8012d90:	461d      	movcc	r5, r3
 8012d92:	0553      	lsls	r3, r2, #21
 8012d94:	d527      	bpl.n	8012de6 <__ssputs_r+0x8e>
 8012d96:	4629      	mov	r1, r5
 8012d98:	f7ff ff52 	bl	8012c40 <_malloc_r>
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	b360      	cbz	r0, 8012dfa <__ssputs_r+0xa2>
 8012da0:	6921      	ldr	r1, [r4, #16]
 8012da2:	464a      	mov	r2, r9
 8012da4:	f7ff fed2 	bl	8012b4c <memcpy>
 8012da8:	89a3      	ldrh	r3, [r4, #12]
 8012daa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	6126      	str	r6, [r4, #16]
 8012db6:	6165      	str	r5, [r4, #20]
 8012db8:	444e      	add	r6, r9
 8012dba:	eba5 0509 	sub.w	r5, r5, r9
 8012dbe:	6026      	str	r6, [r4, #0]
 8012dc0:	60a5      	str	r5, [r4, #8]
 8012dc2:	463e      	mov	r6, r7
 8012dc4:	42be      	cmp	r6, r7
 8012dc6:	d900      	bls.n	8012dca <__ssputs_r+0x72>
 8012dc8:	463e      	mov	r6, r7
 8012dca:	6820      	ldr	r0, [r4, #0]
 8012dcc:	4632      	mov	r2, r6
 8012dce:	4641      	mov	r1, r8
 8012dd0:	f000 fe37 	bl	8013a42 <memmove>
 8012dd4:	68a3      	ldr	r3, [r4, #8]
 8012dd6:	1b9b      	subs	r3, r3, r6
 8012dd8:	60a3      	str	r3, [r4, #8]
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	4433      	add	r3, r6
 8012dde:	6023      	str	r3, [r4, #0]
 8012de0:	2000      	movs	r0, #0
 8012de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012de6:	462a      	mov	r2, r5
 8012de8:	f000 fe56 	bl	8013a98 <_realloc_r>
 8012dec:	4606      	mov	r6, r0
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d1e0      	bne.n	8012db4 <__ssputs_r+0x5c>
 8012df2:	6921      	ldr	r1, [r4, #16]
 8012df4:	4650      	mov	r0, sl
 8012df6:	f7ff feb7 	bl	8012b68 <_free_r>
 8012dfa:	230c      	movs	r3, #12
 8012dfc:	f8ca 3000 	str.w	r3, [sl]
 8012e00:	89a3      	ldrh	r3, [r4, #12]
 8012e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	f04f 30ff 	mov.w	r0, #4294967295
 8012e0c:	e7e9      	b.n	8012de2 <__ssputs_r+0x8a>
	...

08012e10 <_svfiprintf_r>:
 8012e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e14:	4698      	mov	r8, r3
 8012e16:	898b      	ldrh	r3, [r1, #12]
 8012e18:	061b      	lsls	r3, r3, #24
 8012e1a:	b09d      	sub	sp, #116	@ 0x74
 8012e1c:	4607      	mov	r7, r0
 8012e1e:	460d      	mov	r5, r1
 8012e20:	4614      	mov	r4, r2
 8012e22:	d510      	bpl.n	8012e46 <_svfiprintf_r+0x36>
 8012e24:	690b      	ldr	r3, [r1, #16]
 8012e26:	b973      	cbnz	r3, 8012e46 <_svfiprintf_r+0x36>
 8012e28:	2140      	movs	r1, #64	@ 0x40
 8012e2a:	f7ff ff09 	bl	8012c40 <_malloc_r>
 8012e2e:	6028      	str	r0, [r5, #0]
 8012e30:	6128      	str	r0, [r5, #16]
 8012e32:	b930      	cbnz	r0, 8012e42 <_svfiprintf_r+0x32>
 8012e34:	230c      	movs	r3, #12
 8012e36:	603b      	str	r3, [r7, #0]
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3c:	b01d      	add	sp, #116	@ 0x74
 8012e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e42:	2340      	movs	r3, #64	@ 0x40
 8012e44:	616b      	str	r3, [r5, #20]
 8012e46:	2300      	movs	r3, #0
 8012e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e4a:	2320      	movs	r3, #32
 8012e4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e54:	2330      	movs	r3, #48	@ 0x30
 8012e56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012ff4 <_svfiprintf_r+0x1e4>
 8012e5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e5e:	f04f 0901 	mov.w	r9, #1
 8012e62:	4623      	mov	r3, r4
 8012e64:	469a      	mov	sl, r3
 8012e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e6a:	b10a      	cbz	r2, 8012e70 <_svfiprintf_r+0x60>
 8012e6c:	2a25      	cmp	r2, #37	@ 0x25
 8012e6e:	d1f9      	bne.n	8012e64 <_svfiprintf_r+0x54>
 8012e70:	ebba 0b04 	subs.w	fp, sl, r4
 8012e74:	d00b      	beq.n	8012e8e <_svfiprintf_r+0x7e>
 8012e76:	465b      	mov	r3, fp
 8012e78:	4622      	mov	r2, r4
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f7ff ff6b 	bl	8012d58 <__ssputs_r>
 8012e82:	3001      	adds	r0, #1
 8012e84:	f000 80a7 	beq.w	8012fd6 <_svfiprintf_r+0x1c6>
 8012e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e8a:	445a      	add	r2, fp
 8012e8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f000 809f 	beq.w	8012fd6 <_svfiprintf_r+0x1c6>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ea2:	f10a 0a01 	add.w	sl, sl, #1
 8012ea6:	9304      	str	r3, [sp, #16]
 8012ea8:	9307      	str	r3, [sp, #28]
 8012eaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012eae:	931a      	str	r3, [sp, #104]	@ 0x68
 8012eb0:	4654      	mov	r4, sl
 8012eb2:	2205      	movs	r2, #5
 8012eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eb8:	484e      	ldr	r0, [pc, #312]	@ (8012ff4 <_svfiprintf_r+0x1e4>)
 8012eba:	f7ed fa19 	bl	80002f0 <memchr>
 8012ebe:	9a04      	ldr	r2, [sp, #16]
 8012ec0:	b9d8      	cbnz	r0, 8012efa <_svfiprintf_r+0xea>
 8012ec2:	06d0      	lsls	r0, r2, #27
 8012ec4:	bf44      	itt	mi
 8012ec6:	2320      	movmi	r3, #32
 8012ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ecc:	0711      	lsls	r1, r2, #28
 8012ece:	bf44      	itt	mi
 8012ed0:	232b      	movmi	r3, #43	@ 0x2b
 8012ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8012eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8012edc:	d015      	beq.n	8012f0a <_svfiprintf_r+0xfa>
 8012ede:	9a07      	ldr	r2, [sp, #28]
 8012ee0:	4654      	mov	r4, sl
 8012ee2:	2000      	movs	r0, #0
 8012ee4:	f04f 0c0a 	mov.w	ip, #10
 8012ee8:	4621      	mov	r1, r4
 8012eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012eee:	3b30      	subs	r3, #48	@ 0x30
 8012ef0:	2b09      	cmp	r3, #9
 8012ef2:	d94b      	bls.n	8012f8c <_svfiprintf_r+0x17c>
 8012ef4:	b1b0      	cbz	r0, 8012f24 <_svfiprintf_r+0x114>
 8012ef6:	9207      	str	r2, [sp, #28]
 8012ef8:	e014      	b.n	8012f24 <_svfiprintf_r+0x114>
 8012efa:	eba0 0308 	sub.w	r3, r0, r8
 8012efe:	fa09 f303 	lsl.w	r3, r9, r3
 8012f02:	4313      	orrs	r3, r2
 8012f04:	9304      	str	r3, [sp, #16]
 8012f06:	46a2      	mov	sl, r4
 8012f08:	e7d2      	b.n	8012eb0 <_svfiprintf_r+0xa0>
 8012f0a:	9b03      	ldr	r3, [sp, #12]
 8012f0c:	1d19      	adds	r1, r3, #4
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	9103      	str	r1, [sp, #12]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	bfbb      	ittet	lt
 8012f16:	425b      	neglt	r3, r3
 8012f18:	f042 0202 	orrlt.w	r2, r2, #2
 8012f1c:	9307      	strge	r3, [sp, #28]
 8012f1e:	9307      	strlt	r3, [sp, #28]
 8012f20:	bfb8      	it	lt
 8012f22:	9204      	strlt	r2, [sp, #16]
 8012f24:	7823      	ldrb	r3, [r4, #0]
 8012f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f28:	d10a      	bne.n	8012f40 <_svfiprintf_r+0x130>
 8012f2a:	7863      	ldrb	r3, [r4, #1]
 8012f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f2e:	d132      	bne.n	8012f96 <_svfiprintf_r+0x186>
 8012f30:	9b03      	ldr	r3, [sp, #12]
 8012f32:	1d1a      	adds	r2, r3, #4
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	9203      	str	r2, [sp, #12]
 8012f38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f3c:	3402      	adds	r4, #2
 8012f3e:	9305      	str	r3, [sp, #20]
 8012f40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013004 <_svfiprintf_r+0x1f4>
 8012f44:	7821      	ldrb	r1, [r4, #0]
 8012f46:	2203      	movs	r2, #3
 8012f48:	4650      	mov	r0, sl
 8012f4a:	f7ed f9d1 	bl	80002f0 <memchr>
 8012f4e:	b138      	cbz	r0, 8012f60 <_svfiprintf_r+0x150>
 8012f50:	9b04      	ldr	r3, [sp, #16]
 8012f52:	eba0 000a 	sub.w	r0, r0, sl
 8012f56:	2240      	movs	r2, #64	@ 0x40
 8012f58:	4082      	lsls	r2, r0
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	3401      	adds	r4, #1
 8012f5e:	9304      	str	r3, [sp, #16]
 8012f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f64:	4824      	ldr	r0, [pc, #144]	@ (8012ff8 <_svfiprintf_r+0x1e8>)
 8012f66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f6a:	2206      	movs	r2, #6
 8012f6c:	f7ed f9c0 	bl	80002f0 <memchr>
 8012f70:	2800      	cmp	r0, #0
 8012f72:	d036      	beq.n	8012fe2 <_svfiprintf_r+0x1d2>
 8012f74:	4b21      	ldr	r3, [pc, #132]	@ (8012ffc <_svfiprintf_r+0x1ec>)
 8012f76:	bb1b      	cbnz	r3, 8012fc0 <_svfiprintf_r+0x1b0>
 8012f78:	9b03      	ldr	r3, [sp, #12]
 8012f7a:	3307      	adds	r3, #7
 8012f7c:	f023 0307 	bic.w	r3, r3, #7
 8012f80:	3308      	adds	r3, #8
 8012f82:	9303      	str	r3, [sp, #12]
 8012f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f86:	4433      	add	r3, r6
 8012f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f8a:	e76a      	b.n	8012e62 <_svfiprintf_r+0x52>
 8012f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f90:	460c      	mov	r4, r1
 8012f92:	2001      	movs	r0, #1
 8012f94:	e7a8      	b.n	8012ee8 <_svfiprintf_r+0xd8>
 8012f96:	2300      	movs	r3, #0
 8012f98:	3401      	adds	r4, #1
 8012f9a:	9305      	str	r3, [sp, #20]
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	f04f 0c0a 	mov.w	ip, #10
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fa8:	3a30      	subs	r2, #48	@ 0x30
 8012faa:	2a09      	cmp	r2, #9
 8012fac:	d903      	bls.n	8012fb6 <_svfiprintf_r+0x1a6>
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d0c6      	beq.n	8012f40 <_svfiprintf_r+0x130>
 8012fb2:	9105      	str	r1, [sp, #20]
 8012fb4:	e7c4      	b.n	8012f40 <_svfiprintf_r+0x130>
 8012fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fba:	4604      	mov	r4, r0
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e7f0      	b.n	8012fa2 <_svfiprintf_r+0x192>
 8012fc0:	ab03      	add	r3, sp, #12
 8012fc2:	9300      	str	r3, [sp, #0]
 8012fc4:	462a      	mov	r2, r5
 8012fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8013000 <_svfiprintf_r+0x1f0>)
 8012fc8:	a904      	add	r1, sp, #16
 8012fca:	4638      	mov	r0, r7
 8012fcc:	f3af 8000 	nop.w
 8012fd0:	1c42      	adds	r2, r0, #1
 8012fd2:	4606      	mov	r6, r0
 8012fd4:	d1d6      	bne.n	8012f84 <_svfiprintf_r+0x174>
 8012fd6:	89ab      	ldrh	r3, [r5, #12]
 8012fd8:	065b      	lsls	r3, r3, #25
 8012fda:	f53f af2d 	bmi.w	8012e38 <_svfiprintf_r+0x28>
 8012fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fe0:	e72c      	b.n	8012e3c <_svfiprintf_r+0x2c>
 8012fe2:	ab03      	add	r3, sp, #12
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	462a      	mov	r2, r5
 8012fe8:	4b05      	ldr	r3, [pc, #20]	@ (8013000 <_svfiprintf_r+0x1f0>)
 8012fea:	a904      	add	r1, sp, #16
 8012fec:	4638      	mov	r0, r7
 8012fee:	f000 fa49 	bl	8013484 <_printf_i>
 8012ff2:	e7ed      	b.n	8012fd0 <_svfiprintf_r+0x1c0>
 8012ff4:	08013fe9 	.word	0x08013fe9
 8012ff8:	08013ff3 	.word	0x08013ff3
 8012ffc:	00000000 	.word	0x00000000
 8013000:	08012d59 	.word	0x08012d59
 8013004:	08013fef 	.word	0x08013fef

08013008 <_sungetc_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	1c4b      	adds	r3, r1, #1
 801300c:	4614      	mov	r4, r2
 801300e:	d103      	bne.n	8013018 <_sungetc_r+0x10>
 8013010:	f04f 35ff 	mov.w	r5, #4294967295
 8013014:	4628      	mov	r0, r5
 8013016:	bd38      	pop	{r3, r4, r5, pc}
 8013018:	8993      	ldrh	r3, [r2, #12]
 801301a:	f023 0320 	bic.w	r3, r3, #32
 801301e:	8193      	strh	r3, [r2, #12]
 8013020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013022:	6852      	ldr	r2, [r2, #4]
 8013024:	b2cd      	uxtb	r5, r1
 8013026:	b18b      	cbz	r3, 801304c <_sungetc_r+0x44>
 8013028:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801302a:	4293      	cmp	r3, r2
 801302c:	dd08      	ble.n	8013040 <_sungetc_r+0x38>
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	1e5a      	subs	r2, r3, #1
 8013032:	6022      	str	r2, [r4, #0]
 8013034:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013038:	6863      	ldr	r3, [r4, #4]
 801303a:	3301      	adds	r3, #1
 801303c:	6063      	str	r3, [r4, #4]
 801303e:	e7e9      	b.n	8013014 <_sungetc_r+0xc>
 8013040:	4621      	mov	r1, r4
 8013042:	f000 fcc4 	bl	80139ce <__submore>
 8013046:	2800      	cmp	r0, #0
 8013048:	d0f1      	beq.n	801302e <_sungetc_r+0x26>
 801304a:	e7e1      	b.n	8013010 <_sungetc_r+0x8>
 801304c:	6921      	ldr	r1, [r4, #16]
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	b151      	cbz	r1, 8013068 <_sungetc_r+0x60>
 8013052:	4299      	cmp	r1, r3
 8013054:	d208      	bcs.n	8013068 <_sungetc_r+0x60>
 8013056:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801305a:	42a9      	cmp	r1, r5
 801305c:	d104      	bne.n	8013068 <_sungetc_r+0x60>
 801305e:	3b01      	subs	r3, #1
 8013060:	3201      	adds	r2, #1
 8013062:	6023      	str	r3, [r4, #0]
 8013064:	6062      	str	r2, [r4, #4]
 8013066:	e7d5      	b.n	8013014 <_sungetc_r+0xc>
 8013068:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801306c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013070:	6363      	str	r3, [r4, #52]	@ 0x34
 8013072:	2303      	movs	r3, #3
 8013074:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013076:	4623      	mov	r3, r4
 8013078:	f803 5f46 	strb.w	r5, [r3, #70]!
 801307c:	6023      	str	r3, [r4, #0]
 801307e:	2301      	movs	r3, #1
 8013080:	e7dc      	b.n	801303c <_sungetc_r+0x34>

08013082 <__ssrefill_r>:
 8013082:	b510      	push	{r4, lr}
 8013084:	460c      	mov	r4, r1
 8013086:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013088:	b169      	cbz	r1, 80130a6 <__ssrefill_r+0x24>
 801308a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801308e:	4299      	cmp	r1, r3
 8013090:	d001      	beq.n	8013096 <__ssrefill_r+0x14>
 8013092:	f7ff fd69 	bl	8012b68 <_free_r>
 8013096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	2000      	movs	r0, #0
 801309c:	6360      	str	r0, [r4, #52]	@ 0x34
 801309e:	b113      	cbz	r3, 80130a6 <__ssrefill_r+0x24>
 80130a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80130a2:	6023      	str	r3, [r4, #0]
 80130a4:	bd10      	pop	{r4, pc}
 80130a6:	6923      	ldr	r3, [r4, #16]
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	2300      	movs	r3, #0
 80130ac:	6063      	str	r3, [r4, #4]
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	f043 0320 	orr.w	r3, r3, #32
 80130b4:	81a3      	strh	r3, [r4, #12]
 80130b6:	f04f 30ff 	mov.w	r0, #4294967295
 80130ba:	e7f3      	b.n	80130a4 <__ssrefill_r+0x22>

080130bc <__ssvfiscanf_r>:
 80130bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c0:	460c      	mov	r4, r1
 80130c2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80130c6:	2100      	movs	r1, #0
 80130c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80130cc:	49a6      	ldr	r1, [pc, #664]	@ (8013368 <__ssvfiscanf_r+0x2ac>)
 80130ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80130d0:	f10d 0804 	add.w	r8, sp, #4
 80130d4:	49a5      	ldr	r1, [pc, #660]	@ (801336c <__ssvfiscanf_r+0x2b0>)
 80130d6:	4fa6      	ldr	r7, [pc, #664]	@ (8013370 <__ssvfiscanf_r+0x2b4>)
 80130d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80130dc:	4606      	mov	r6, r0
 80130de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	f892 9000 	ldrb.w	r9, [r2]
 80130e6:	f1b9 0f00 	cmp.w	r9, #0
 80130ea:	f000 8158 	beq.w	801339e <__ssvfiscanf_r+0x2e2>
 80130ee:	f817 3009 	ldrb.w	r3, [r7, r9]
 80130f2:	f013 0308 	ands.w	r3, r3, #8
 80130f6:	f102 0501 	add.w	r5, r2, #1
 80130fa:	d019      	beq.n	8013130 <__ssvfiscanf_r+0x74>
 80130fc:	6863      	ldr	r3, [r4, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	dd0f      	ble.n	8013122 <__ssvfiscanf_r+0x66>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	781a      	ldrb	r2, [r3, #0]
 8013106:	5cba      	ldrb	r2, [r7, r2]
 8013108:	0712      	lsls	r2, r2, #28
 801310a:	d401      	bmi.n	8013110 <__ssvfiscanf_r+0x54>
 801310c:	462a      	mov	r2, r5
 801310e:	e7e8      	b.n	80130e2 <__ssvfiscanf_r+0x26>
 8013110:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013112:	3201      	adds	r2, #1
 8013114:	9245      	str	r2, [sp, #276]	@ 0x114
 8013116:	6862      	ldr	r2, [r4, #4]
 8013118:	3301      	adds	r3, #1
 801311a:	3a01      	subs	r2, #1
 801311c:	6062      	str	r2, [r4, #4]
 801311e:	6023      	str	r3, [r4, #0]
 8013120:	e7ec      	b.n	80130fc <__ssvfiscanf_r+0x40>
 8013122:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013124:	4621      	mov	r1, r4
 8013126:	4630      	mov	r0, r6
 8013128:	4798      	blx	r3
 801312a:	2800      	cmp	r0, #0
 801312c:	d0e9      	beq.n	8013102 <__ssvfiscanf_r+0x46>
 801312e:	e7ed      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013130:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8013134:	f040 8085 	bne.w	8013242 <__ssvfiscanf_r+0x186>
 8013138:	9341      	str	r3, [sp, #260]	@ 0x104
 801313a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801313c:	7853      	ldrb	r3, [r2, #1]
 801313e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013140:	bf02      	ittt	eq
 8013142:	2310      	moveq	r3, #16
 8013144:	1c95      	addeq	r5, r2, #2
 8013146:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013148:	220a      	movs	r2, #10
 801314a:	46aa      	mov	sl, r5
 801314c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013150:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8013154:	2b09      	cmp	r3, #9
 8013156:	d91e      	bls.n	8013196 <__ssvfiscanf_r+0xda>
 8013158:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8013374 <__ssvfiscanf_r+0x2b8>
 801315c:	2203      	movs	r2, #3
 801315e:	4658      	mov	r0, fp
 8013160:	f7ed f8c6 	bl	80002f0 <memchr>
 8013164:	b138      	cbz	r0, 8013176 <__ssvfiscanf_r+0xba>
 8013166:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013168:	eba0 000b 	sub.w	r0, r0, fp
 801316c:	2301      	movs	r3, #1
 801316e:	4083      	lsls	r3, r0
 8013170:	4313      	orrs	r3, r2
 8013172:	9341      	str	r3, [sp, #260]	@ 0x104
 8013174:	4655      	mov	r5, sl
 8013176:	f815 3b01 	ldrb.w	r3, [r5], #1
 801317a:	2b78      	cmp	r3, #120	@ 0x78
 801317c:	d806      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 801317e:	2b57      	cmp	r3, #87	@ 0x57
 8013180:	d810      	bhi.n	80131a4 <__ssvfiscanf_r+0xe8>
 8013182:	2b25      	cmp	r3, #37	@ 0x25
 8013184:	d05d      	beq.n	8013242 <__ssvfiscanf_r+0x186>
 8013186:	d857      	bhi.n	8013238 <__ssvfiscanf_r+0x17c>
 8013188:	2b00      	cmp	r3, #0
 801318a:	d075      	beq.n	8013278 <__ssvfiscanf_r+0x1bc>
 801318c:	2303      	movs	r3, #3
 801318e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013190:	230a      	movs	r3, #10
 8013192:	9342      	str	r3, [sp, #264]	@ 0x108
 8013194:	e088      	b.n	80132a8 <__ssvfiscanf_r+0x1ec>
 8013196:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013198:	fb02 1103 	mla	r1, r2, r3, r1
 801319c:	3930      	subs	r1, #48	@ 0x30
 801319e:	9143      	str	r1, [sp, #268]	@ 0x10c
 80131a0:	4655      	mov	r5, sl
 80131a2:	e7d2      	b.n	801314a <__ssvfiscanf_r+0x8e>
 80131a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80131a8:	2a20      	cmp	r2, #32
 80131aa:	d8ef      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 80131ac:	a101      	add	r1, pc, #4	@ (adr r1, 80131b4 <__ssvfiscanf_r+0xf8>)
 80131ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80131b2:	bf00      	nop
 80131b4:	08013287 	.word	0x08013287
 80131b8:	0801318d 	.word	0x0801318d
 80131bc:	0801318d 	.word	0x0801318d
 80131c0:	080132e1 	.word	0x080132e1
 80131c4:	0801318d 	.word	0x0801318d
 80131c8:	0801318d 	.word	0x0801318d
 80131cc:	0801318d 	.word	0x0801318d
 80131d0:	0801318d 	.word	0x0801318d
 80131d4:	0801318d 	.word	0x0801318d
 80131d8:	0801318d 	.word	0x0801318d
 80131dc:	0801318d 	.word	0x0801318d
 80131e0:	080132f7 	.word	0x080132f7
 80131e4:	080132dd 	.word	0x080132dd
 80131e8:	0801323f 	.word	0x0801323f
 80131ec:	0801323f 	.word	0x0801323f
 80131f0:	0801323f 	.word	0x0801323f
 80131f4:	0801318d 	.word	0x0801318d
 80131f8:	08013299 	.word	0x08013299
 80131fc:	0801318d 	.word	0x0801318d
 8013200:	0801318d 	.word	0x0801318d
 8013204:	0801318d 	.word	0x0801318d
 8013208:	0801318d 	.word	0x0801318d
 801320c:	08013307 	.word	0x08013307
 8013210:	080132a1 	.word	0x080132a1
 8013214:	0801327f 	.word	0x0801327f
 8013218:	0801318d 	.word	0x0801318d
 801321c:	0801318d 	.word	0x0801318d
 8013220:	08013303 	.word	0x08013303
 8013224:	0801318d 	.word	0x0801318d
 8013228:	080132dd 	.word	0x080132dd
 801322c:	0801318d 	.word	0x0801318d
 8013230:	0801318d 	.word	0x0801318d
 8013234:	08013287 	.word	0x08013287
 8013238:	3b45      	subs	r3, #69	@ 0x45
 801323a:	2b02      	cmp	r3, #2
 801323c:	d8a6      	bhi.n	801318c <__ssvfiscanf_r+0xd0>
 801323e:	2305      	movs	r3, #5
 8013240:	e031      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013242:	6863      	ldr	r3, [r4, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	dd0d      	ble.n	8013264 <__ssvfiscanf_r+0x1a8>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	781a      	ldrb	r2, [r3, #0]
 801324c:	454a      	cmp	r2, r9
 801324e:	f040 80a6 	bne.w	801339e <__ssvfiscanf_r+0x2e2>
 8013252:	3301      	adds	r3, #1
 8013254:	6862      	ldr	r2, [r4, #4]
 8013256:	6023      	str	r3, [r4, #0]
 8013258:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801325a:	3a01      	subs	r2, #1
 801325c:	3301      	adds	r3, #1
 801325e:	6062      	str	r2, [r4, #4]
 8013260:	9345      	str	r3, [sp, #276]	@ 0x114
 8013262:	e753      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013264:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013266:	4621      	mov	r1, r4
 8013268:	4630      	mov	r0, r6
 801326a:	4798      	blx	r3
 801326c:	2800      	cmp	r0, #0
 801326e:	d0eb      	beq.n	8013248 <__ssvfiscanf_r+0x18c>
 8013270:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013272:	2800      	cmp	r0, #0
 8013274:	f040 808b 	bne.w	801338e <__ssvfiscanf_r+0x2d2>
 8013278:	f04f 30ff 	mov.w	r0, #4294967295
 801327c:	e08b      	b.n	8013396 <__ssvfiscanf_r+0x2da>
 801327e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013280:	f042 0220 	orr.w	r2, r2, #32
 8013284:	9241      	str	r2, [sp, #260]	@ 0x104
 8013286:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801328c:	9241      	str	r2, [sp, #260]	@ 0x104
 801328e:	2210      	movs	r2, #16
 8013290:	2b6e      	cmp	r3, #110	@ 0x6e
 8013292:	9242      	str	r2, [sp, #264]	@ 0x108
 8013294:	d902      	bls.n	801329c <__ssvfiscanf_r+0x1e0>
 8013296:	e005      	b.n	80132a4 <__ssvfiscanf_r+0x1e8>
 8013298:	2300      	movs	r3, #0
 801329a:	9342      	str	r3, [sp, #264]	@ 0x108
 801329c:	2303      	movs	r3, #3
 801329e:	e002      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 80132a0:	2308      	movs	r3, #8
 80132a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80132a4:	2304      	movs	r3, #4
 80132a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80132a8:	6863      	ldr	r3, [r4, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dd39      	ble.n	8013322 <__ssvfiscanf_r+0x266>
 80132ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132b0:	0659      	lsls	r1, r3, #25
 80132b2:	d404      	bmi.n	80132be <__ssvfiscanf_r+0x202>
 80132b4:	6823      	ldr	r3, [r4, #0]
 80132b6:	781a      	ldrb	r2, [r3, #0]
 80132b8:	5cba      	ldrb	r2, [r7, r2]
 80132ba:	0712      	lsls	r2, r2, #28
 80132bc:	d438      	bmi.n	8013330 <__ssvfiscanf_r+0x274>
 80132be:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	dc47      	bgt.n	8013354 <__ssvfiscanf_r+0x298>
 80132c4:	466b      	mov	r3, sp
 80132c6:	4622      	mov	r2, r4
 80132c8:	a941      	add	r1, sp, #260	@ 0x104
 80132ca:	4630      	mov	r0, r6
 80132cc:	f000 f9f8 	bl	80136c0 <_scanf_chars>
 80132d0:	2801      	cmp	r0, #1
 80132d2:	d064      	beq.n	801339e <__ssvfiscanf_r+0x2e2>
 80132d4:	2802      	cmp	r0, #2
 80132d6:	f47f af19 	bne.w	801310c <__ssvfiscanf_r+0x50>
 80132da:	e7c9      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 80132dc:	220a      	movs	r2, #10
 80132de:	e7d7      	b.n	8013290 <__ssvfiscanf_r+0x1d4>
 80132e0:	4629      	mov	r1, r5
 80132e2:	4640      	mov	r0, r8
 80132e4:	f000 fb3a 	bl	801395c <__sccl>
 80132e8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80132f0:	4605      	mov	r5, r0
 80132f2:	2301      	movs	r3, #1
 80132f4:	e7d7      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 80132f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80132f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132fc:	9341      	str	r3, [sp, #260]	@ 0x104
 80132fe:	2300      	movs	r3, #0
 8013300:	e7d1      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013302:	2302      	movs	r3, #2
 8013304:	e7cf      	b.n	80132a6 <__ssvfiscanf_r+0x1ea>
 8013306:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013308:	06c3      	lsls	r3, r0, #27
 801330a:	f53f aeff 	bmi.w	801310c <__ssvfiscanf_r+0x50>
 801330e:	9b00      	ldr	r3, [sp, #0]
 8013310:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013312:	1d19      	adds	r1, r3, #4
 8013314:	9100      	str	r1, [sp, #0]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	07c0      	lsls	r0, r0, #31
 801331a:	bf4c      	ite	mi
 801331c:	801a      	strhmi	r2, [r3, #0]
 801331e:	601a      	strpl	r2, [r3, #0]
 8013320:	e6f4      	b.n	801310c <__ssvfiscanf_r+0x50>
 8013322:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013324:	4621      	mov	r1, r4
 8013326:	4630      	mov	r0, r6
 8013328:	4798      	blx	r3
 801332a:	2800      	cmp	r0, #0
 801332c:	d0bf      	beq.n	80132ae <__ssvfiscanf_r+0x1f2>
 801332e:	e79f      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 8013330:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013332:	3201      	adds	r2, #1
 8013334:	9245      	str	r2, [sp, #276]	@ 0x114
 8013336:	6862      	ldr	r2, [r4, #4]
 8013338:	3a01      	subs	r2, #1
 801333a:	2a00      	cmp	r2, #0
 801333c:	6062      	str	r2, [r4, #4]
 801333e:	dd02      	ble.n	8013346 <__ssvfiscanf_r+0x28a>
 8013340:	3301      	adds	r3, #1
 8013342:	6023      	str	r3, [r4, #0]
 8013344:	e7b6      	b.n	80132b4 <__ssvfiscanf_r+0x1f8>
 8013346:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013348:	4621      	mov	r1, r4
 801334a:	4630      	mov	r0, r6
 801334c:	4798      	blx	r3
 801334e:	2800      	cmp	r0, #0
 8013350:	d0b0      	beq.n	80132b4 <__ssvfiscanf_r+0x1f8>
 8013352:	e78d      	b.n	8013270 <__ssvfiscanf_r+0x1b4>
 8013354:	2b04      	cmp	r3, #4
 8013356:	dc0f      	bgt.n	8013378 <__ssvfiscanf_r+0x2bc>
 8013358:	466b      	mov	r3, sp
 801335a:	4622      	mov	r2, r4
 801335c:	a941      	add	r1, sp, #260	@ 0x104
 801335e:	4630      	mov	r0, r6
 8013360:	f000 fa08 	bl	8013774 <_scanf_i>
 8013364:	e7b4      	b.n	80132d0 <__ssvfiscanf_r+0x214>
 8013366:	bf00      	nop
 8013368:	08013009 	.word	0x08013009
 801336c:	08013083 	.word	0x08013083
 8013370:	08013ee9 	.word	0x08013ee9
 8013374:	08013fef 	.word	0x08013fef
 8013378:	4b0a      	ldr	r3, [pc, #40]	@ (80133a4 <__ssvfiscanf_r+0x2e8>)
 801337a:	2b00      	cmp	r3, #0
 801337c:	f43f aec6 	beq.w	801310c <__ssvfiscanf_r+0x50>
 8013380:	466b      	mov	r3, sp
 8013382:	4622      	mov	r2, r4
 8013384:	a941      	add	r1, sp, #260	@ 0x104
 8013386:	4630      	mov	r0, r6
 8013388:	f3af 8000 	nop.w
 801338c:	e7a0      	b.n	80132d0 <__ssvfiscanf_r+0x214>
 801338e:	89a3      	ldrh	r3, [r4, #12]
 8013390:	065b      	lsls	r3, r3, #25
 8013392:	f53f af71 	bmi.w	8013278 <__ssvfiscanf_r+0x1bc>
 8013396:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80133a0:	e7f9      	b.n	8013396 <__ssvfiscanf_r+0x2da>
 80133a2:	bf00      	nop
 80133a4:	00000000 	.word	0x00000000

080133a8 <_printf_common>:
 80133a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ac:	4616      	mov	r6, r2
 80133ae:	4698      	mov	r8, r3
 80133b0:	688a      	ldr	r2, [r1, #8]
 80133b2:	690b      	ldr	r3, [r1, #16]
 80133b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133b8:	4293      	cmp	r3, r2
 80133ba:	bfb8      	it	lt
 80133bc:	4613      	movlt	r3, r2
 80133be:	6033      	str	r3, [r6, #0]
 80133c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80133c4:	4607      	mov	r7, r0
 80133c6:	460c      	mov	r4, r1
 80133c8:	b10a      	cbz	r2, 80133ce <_printf_common+0x26>
 80133ca:	3301      	adds	r3, #1
 80133cc:	6033      	str	r3, [r6, #0]
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	0699      	lsls	r1, r3, #26
 80133d2:	bf42      	ittt	mi
 80133d4:	6833      	ldrmi	r3, [r6, #0]
 80133d6:	3302      	addmi	r3, #2
 80133d8:	6033      	strmi	r3, [r6, #0]
 80133da:	6825      	ldr	r5, [r4, #0]
 80133dc:	f015 0506 	ands.w	r5, r5, #6
 80133e0:	d106      	bne.n	80133f0 <_printf_common+0x48>
 80133e2:	f104 0a19 	add.w	sl, r4, #25
 80133e6:	68e3      	ldr	r3, [r4, #12]
 80133e8:	6832      	ldr	r2, [r6, #0]
 80133ea:	1a9b      	subs	r3, r3, r2
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	dc26      	bgt.n	801343e <_printf_common+0x96>
 80133f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80133f4:	6822      	ldr	r2, [r4, #0]
 80133f6:	3b00      	subs	r3, #0
 80133f8:	bf18      	it	ne
 80133fa:	2301      	movne	r3, #1
 80133fc:	0692      	lsls	r2, r2, #26
 80133fe:	d42b      	bmi.n	8013458 <_printf_common+0xb0>
 8013400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013404:	4641      	mov	r1, r8
 8013406:	4638      	mov	r0, r7
 8013408:	47c8      	blx	r9
 801340a:	3001      	adds	r0, #1
 801340c:	d01e      	beq.n	801344c <_printf_common+0xa4>
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	6922      	ldr	r2, [r4, #16]
 8013412:	f003 0306 	and.w	r3, r3, #6
 8013416:	2b04      	cmp	r3, #4
 8013418:	bf02      	ittt	eq
 801341a:	68e5      	ldreq	r5, [r4, #12]
 801341c:	6833      	ldreq	r3, [r6, #0]
 801341e:	1aed      	subeq	r5, r5, r3
 8013420:	68a3      	ldr	r3, [r4, #8]
 8013422:	bf0c      	ite	eq
 8013424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013428:	2500      	movne	r5, #0
 801342a:	4293      	cmp	r3, r2
 801342c:	bfc4      	itt	gt
 801342e:	1a9b      	subgt	r3, r3, r2
 8013430:	18ed      	addgt	r5, r5, r3
 8013432:	2600      	movs	r6, #0
 8013434:	341a      	adds	r4, #26
 8013436:	42b5      	cmp	r5, r6
 8013438:	d11a      	bne.n	8013470 <_printf_common+0xc8>
 801343a:	2000      	movs	r0, #0
 801343c:	e008      	b.n	8013450 <_printf_common+0xa8>
 801343e:	2301      	movs	r3, #1
 8013440:	4652      	mov	r2, sl
 8013442:	4641      	mov	r1, r8
 8013444:	4638      	mov	r0, r7
 8013446:	47c8      	blx	r9
 8013448:	3001      	adds	r0, #1
 801344a:	d103      	bne.n	8013454 <_printf_common+0xac>
 801344c:	f04f 30ff 	mov.w	r0, #4294967295
 8013450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013454:	3501      	adds	r5, #1
 8013456:	e7c6      	b.n	80133e6 <_printf_common+0x3e>
 8013458:	18e1      	adds	r1, r4, r3
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	2030      	movs	r0, #48	@ 0x30
 801345e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013462:	4422      	add	r2, r4
 8013464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801346c:	3302      	adds	r3, #2
 801346e:	e7c7      	b.n	8013400 <_printf_common+0x58>
 8013470:	2301      	movs	r3, #1
 8013472:	4622      	mov	r2, r4
 8013474:	4641      	mov	r1, r8
 8013476:	4638      	mov	r0, r7
 8013478:	47c8      	blx	r9
 801347a:	3001      	adds	r0, #1
 801347c:	d0e6      	beq.n	801344c <_printf_common+0xa4>
 801347e:	3601      	adds	r6, #1
 8013480:	e7d9      	b.n	8013436 <_printf_common+0x8e>
	...

08013484 <_printf_i>:
 8013484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013488:	7e0f      	ldrb	r7, [r1, #24]
 801348a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801348c:	2f78      	cmp	r7, #120	@ 0x78
 801348e:	4691      	mov	r9, r2
 8013490:	4680      	mov	r8, r0
 8013492:	460c      	mov	r4, r1
 8013494:	469a      	mov	sl, r3
 8013496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801349a:	d807      	bhi.n	80134ac <_printf_i+0x28>
 801349c:	2f62      	cmp	r7, #98	@ 0x62
 801349e:	d80a      	bhi.n	80134b6 <_printf_i+0x32>
 80134a0:	2f00      	cmp	r7, #0
 80134a2:	f000 80d1 	beq.w	8013648 <_printf_i+0x1c4>
 80134a6:	2f58      	cmp	r7, #88	@ 0x58
 80134a8:	f000 80b8 	beq.w	801361c <_printf_i+0x198>
 80134ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80134b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80134b4:	e03a      	b.n	801352c <_printf_i+0xa8>
 80134b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80134ba:	2b15      	cmp	r3, #21
 80134bc:	d8f6      	bhi.n	80134ac <_printf_i+0x28>
 80134be:	a101      	add	r1, pc, #4	@ (adr r1, 80134c4 <_printf_i+0x40>)
 80134c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134c4:	0801351d 	.word	0x0801351d
 80134c8:	08013531 	.word	0x08013531
 80134cc:	080134ad 	.word	0x080134ad
 80134d0:	080134ad 	.word	0x080134ad
 80134d4:	080134ad 	.word	0x080134ad
 80134d8:	080134ad 	.word	0x080134ad
 80134dc:	08013531 	.word	0x08013531
 80134e0:	080134ad 	.word	0x080134ad
 80134e4:	080134ad 	.word	0x080134ad
 80134e8:	080134ad 	.word	0x080134ad
 80134ec:	080134ad 	.word	0x080134ad
 80134f0:	0801362f 	.word	0x0801362f
 80134f4:	0801355b 	.word	0x0801355b
 80134f8:	080135e9 	.word	0x080135e9
 80134fc:	080134ad 	.word	0x080134ad
 8013500:	080134ad 	.word	0x080134ad
 8013504:	08013651 	.word	0x08013651
 8013508:	080134ad 	.word	0x080134ad
 801350c:	0801355b 	.word	0x0801355b
 8013510:	080134ad 	.word	0x080134ad
 8013514:	080134ad 	.word	0x080134ad
 8013518:	080135f1 	.word	0x080135f1
 801351c:	6833      	ldr	r3, [r6, #0]
 801351e:	1d1a      	adds	r2, r3, #4
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	6032      	str	r2, [r6, #0]
 8013524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801352c:	2301      	movs	r3, #1
 801352e:	e09c      	b.n	801366a <_printf_i+0x1e6>
 8013530:	6833      	ldr	r3, [r6, #0]
 8013532:	6820      	ldr	r0, [r4, #0]
 8013534:	1d19      	adds	r1, r3, #4
 8013536:	6031      	str	r1, [r6, #0]
 8013538:	0606      	lsls	r6, r0, #24
 801353a:	d501      	bpl.n	8013540 <_printf_i+0xbc>
 801353c:	681d      	ldr	r5, [r3, #0]
 801353e:	e003      	b.n	8013548 <_printf_i+0xc4>
 8013540:	0645      	lsls	r5, r0, #25
 8013542:	d5fb      	bpl.n	801353c <_printf_i+0xb8>
 8013544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013548:	2d00      	cmp	r5, #0
 801354a:	da03      	bge.n	8013554 <_printf_i+0xd0>
 801354c:	232d      	movs	r3, #45	@ 0x2d
 801354e:	426d      	negs	r5, r5
 8013550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013554:	4858      	ldr	r0, [pc, #352]	@ (80136b8 <_printf_i+0x234>)
 8013556:	230a      	movs	r3, #10
 8013558:	e011      	b.n	801357e <_printf_i+0xfa>
 801355a:	6821      	ldr	r1, [r4, #0]
 801355c:	6833      	ldr	r3, [r6, #0]
 801355e:	0608      	lsls	r0, r1, #24
 8013560:	f853 5b04 	ldr.w	r5, [r3], #4
 8013564:	d402      	bmi.n	801356c <_printf_i+0xe8>
 8013566:	0649      	lsls	r1, r1, #25
 8013568:	bf48      	it	mi
 801356a:	b2ad      	uxthmi	r5, r5
 801356c:	2f6f      	cmp	r7, #111	@ 0x6f
 801356e:	4852      	ldr	r0, [pc, #328]	@ (80136b8 <_printf_i+0x234>)
 8013570:	6033      	str	r3, [r6, #0]
 8013572:	bf14      	ite	ne
 8013574:	230a      	movne	r3, #10
 8013576:	2308      	moveq	r3, #8
 8013578:	2100      	movs	r1, #0
 801357a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801357e:	6866      	ldr	r6, [r4, #4]
 8013580:	60a6      	str	r6, [r4, #8]
 8013582:	2e00      	cmp	r6, #0
 8013584:	db05      	blt.n	8013592 <_printf_i+0x10e>
 8013586:	6821      	ldr	r1, [r4, #0]
 8013588:	432e      	orrs	r6, r5
 801358a:	f021 0104 	bic.w	r1, r1, #4
 801358e:	6021      	str	r1, [r4, #0]
 8013590:	d04b      	beq.n	801362a <_printf_i+0x1a6>
 8013592:	4616      	mov	r6, r2
 8013594:	fbb5 f1f3 	udiv	r1, r5, r3
 8013598:	fb03 5711 	mls	r7, r3, r1, r5
 801359c:	5dc7      	ldrb	r7, [r0, r7]
 801359e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135a2:	462f      	mov	r7, r5
 80135a4:	42bb      	cmp	r3, r7
 80135a6:	460d      	mov	r5, r1
 80135a8:	d9f4      	bls.n	8013594 <_printf_i+0x110>
 80135aa:	2b08      	cmp	r3, #8
 80135ac:	d10b      	bne.n	80135c6 <_printf_i+0x142>
 80135ae:	6823      	ldr	r3, [r4, #0]
 80135b0:	07df      	lsls	r7, r3, #31
 80135b2:	d508      	bpl.n	80135c6 <_printf_i+0x142>
 80135b4:	6923      	ldr	r3, [r4, #16]
 80135b6:	6861      	ldr	r1, [r4, #4]
 80135b8:	4299      	cmp	r1, r3
 80135ba:	bfde      	ittt	le
 80135bc:	2330      	movle	r3, #48	@ 0x30
 80135be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135c6:	1b92      	subs	r2, r2, r6
 80135c8:	6122      	str	r2, [r4, #16]
 80135ca:	f8cd a000 	str.w	sl, [sp]
 80135ce:	464b      	mov	r3, r9
 80135d0:	aa03      	add	r2, sp, #12
 80135d2:	4621      	mov	r1, r4
 80135d4:	4640      	mov	r0, r8
 80135d6:	f7ff fee7 	bl	80133a8 <_printf_common>
 80135da:	3001      	adds	r0, #1
 80135dc:	d14a      	bne.n	8013674 <_printf_i+0x1f0>
 80135de:	f04f 30ff 	mov.w	r0, #4294967295
 80135e2:	b004      	add	sp, #16
 80135e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	f043 0320 	orr.w	r3, r3, #32
 80135ee:	6023      	str	r3, [r4, #0]
 80135f0:	4832      	ldr	r0, [pc, #200]	@ (80136bc <_printf_i+0x238>)
 80135f2:	2778      	movs	r7, #120	@ 0x78
 80135f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	6831      	ldr	r1, [r6, #0]
 80135fc:	061f      	lsls	r7, r3, #24
 80135fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8013602:	d402      	bmi.n	801360a <_printf_i+0x186>
 8013604:	065f      	lsls	r7, r3, #25
 8013606:	bf48      	it	mi
 8013608:	b2ad      	uxthmi	r5, r5
 801360a:	6031      	str	r1, [r6, #0]
 801360c:	07d9      	lsls	r1, r3, #31
 801360e:	bf44      	itt	mi
 8013610:	f043 0320 	orrmi.w	r3, r3, #32
 8013614:	6023      	strmi	r3, [r4, #0]
 8013616:	b11d      	cbz	r5, 8013620 <_printf_i+0x19c>
 8013618:	2310      	movs	r3, #16
 801361a:	e7ad      	b.n	8013578 <_printf_i+0xf4>
 801361c:	4826      	ldr	r0, [pc, #152]	@ (80136b8 <_printf_i+0x234>)
 801361e:	e7e9      	b.n	80135f4 <_printf_i+0x170>
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	f023 0320 	bic.w	r3, r3, #32
 8013626:	6023      	str	r3, [r4, #0]
 8013628:	e7f6      	b.n	8013618 <_printf_i+0x194>
 801362a:	4616      	mov	r6, r2
 801362c:	e7bd      	b.n	80135aa <_printf_i+0x126>
 801362e:	6833      	ldr	r3, [r6, #0]
 8013630:	6825      	ldr	r5, [r4, #0]
 8013632:	6961      	ldr	r1, [r4, #20]
 8013634:	1d18      	adds	r0, r3, #4
 8013636:	6030      	str	r0, [r6, #0]
 8013638:	062e      	lsls	r6, r5, #24
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	d501      	bpl.n	8013642 <_printf_i+0x1be>
 801363e:	6019      	str	r1, [r3, #0]
 8013640:	e002      	b.n	8013648 <_printf_i+0x1c4>
 8013642:	0668      	lsls	r0, r5, #25
 8013644:	d5fb      	bpl.n	801363e <_printf_i+0x1ba>
 8013646:	8019      	strh	r1, [r3, #0]
 8013648:	2300      	movs	r3, #0
 801364a:	6123      	str	r3, [r4, #16]
 801364c:	4616      	mov	r6, r2
 801364e:	e7bc      	b.n	80135ca <_printf_i+0x146>
 8013650:	6833      	ldr	r3, [r6, #0]
 8013652:	1d1a      	adds	r2, r3, #4
 8013654:	6032      	str	r2, [r6, #0]
 8013656:	681e      	ldr	r6, [r3, #0]
 8013658:	6862      	ldr	r2, [r4, #4]
 801365a:	2100      	movs	r1, #0
 801365c:	4630      	mov	r0, r6
 801365e:	f7ec fe47 	bl	80002f0 <memchr>
 8013662:	b108      	cbz	r0, 8013668 <_printf_i+0x1e4>
 8013664:	1b80      	subs	r0, r0, r6
 8013666:	6060      	str	r0, [r4, #4]
 8013668:	6863      	ldr	r3, [r4, #4]
 801366a:	6123      	str	r3, [r4, #16]
 801366c:	2300      	movs	r3, #0
 801366e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013672:	e7aa      	b.n	80135ca <_printf_i+0x146>
 8013674:	6923      	ldr	r3, [r4, #16]
 8013676:	4632      	mov	r2, r6
 8013678:	4649      	mov	r1, r9
 801367a:	4640      	mov	r0, r8
 801367c:	47d0      	blx	sl
 801367e:	3001      	adds	r0, #1
 8013680:	d0ad      	beq.n	80135de <_printf_i+0x15a>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	079b      	lsls	r3, r3, #30
 8013686:	d413      	bmi.n	80136b0 <_printf_i+0x22c>
 8013688:	68e0      	ldr	r0, [r4, #12]
 801368a:	9b03      	ldr	r3, [sp, #12]
 801368c:	4298      	cmp	r0, r3
 801368e:	bfb8      	it	lt
 8013690:	4618      	movlt	r0, r3
 8013692:	e7a6      	b.n	80135e2 <_printf_i+0x15e>
 8013694:	2301      	movs	r3, #1
 8013696:	4632      	mov	r2, r6
 8013698:	4649      	mov	r1, r9
 801369a:	4640      	mov	r0, r8
 801369c:	47d0      	blx	sl
 801369e:	3001      	adds	r0, #1
 80136a0:	d09d      	beq.n	80135de <_printf_i+0x15a>
 80136a2:	3501      	adds	r5, #1
 80136a4:	68e3      	ldr	r3, [r4, #12]
 80136a6:	9903      	ldr	r1, [sp, #12]
 80136a8:	1a5b      	subs	r3, r3, r1
 80136aa:	42ab      	cmp	r3, r5
 80136ac:	dcf2      	bgt.n	8013694 <_printf_i+0x210>
 80136ae:	e7eb      	b.n	8013688 <_printf_i+0x204>
 80136b0:	2500      	movs	r5, #0
 80136b2:	f104 0619 	add.w	r6, r4, #25
 80136b6:	e7f5      	b.n	80136a4 <_printf_i+0x220>
 80136b8:	08013ffa 	.word	0x08013ffa
 80136bc:	0801400b 	.word	0x0801400b

080136c0 <_scanf_chars>:
 80136c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c4:	4615      	mov	r5, r2
 80136c6:	688a      	ldr	r2, [r1, #8]
 80136c8:	4680      	mov	r8, r0
 80136ca:	460c      	mov	r4, r1
 80136cc:	b932      	cbnz	r2, 80136dc <_scanf_chars+0x1c>
 80136ce:	698a      	ldr	r2, [r1, #24]
 80136d0:	2a00      	cmp	r2, #0
 80136d2:	bf14      	ite	ne
 80136d4:	f04f 32ff 	movne.w	r2, #4294967295
 80136d8:	2201      	moveq	r2, #1
 80136da:	608a      	str	r2, [r1, #8]
 80136dc:	6822      	ldr	r2, [r4, #0]
 80136de:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013770 <_scanf_chars+0xb0>
 80136e2:	06d1      	lsls	r1, r2, #27
 80136e4:	bf5f      	itttt	pl
 80136e6:	681a      	ldrpl	r2, [r3, #0]
 80136e8:	1d11      	addpl	r1, r2, #4
 80136ea:	6019      	strpl	r1, [r3, #0]
 80136ec:	6816      	ldrpl	r6, [r2, #0]
 80136ee:	2700      	movs	r7, #0
 80136f0:	69a0      	ldr	r0, [r4, #24]
 80136f2:	b188      	cbz	r0, 8013718 <_scanf_chars+0x58>
 80136f4:	2801      	cmp	r0, #1
 80136f6:	d107      	bne.n	8013708 <_scanf_chars+0x48>
 80136f8:	682b      	ldr	r3, [r5, #0]
 80136fa:	781a      	ldrb	r2, [r3, #0]
 80136fc:	6963      	ldr	r3, [r4, #20]
 80136fe:	5c9b      	ldrb	r3, [r3, r2]
 8013700:	b953      	cbnz	r3, 8013718 <_scanf_chars+0x58>
 8013702:	2f00      	cmp	r7, #0
 8013704:	d031      	beq.n	801376a <_scanf_chars+0xaa>
 8013706:	e022      	b.n	801374e <_scanf_chars+0x8e>
 8013708:	2802      	cmp	r0, #2
 801370a:	d120      	bne.n	801374e <_scanf_chars+0x8e>
 801370c:	682b      	ldr	r3, [r5, #0]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013714:	071b      	lsls	r3, r3, #28
 8013716:	d41a      	bmi.n	801374e <_scanf_chars+0x8e>
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	06da      	lsls	r2, r3, #27
 801371c:	bf5e      	ittt	pl
 801371e:	682b      	ldrpl	r3, [r5, #0]
 8013720:	781b      	ldrbpl	r3, [r3, #0]
 8013722:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013726:	682a      	ldr	r2, [r5, #0]
 8013728:	686b      	ldr	r3, [r5, #4]
 801372a:	3201      	adds	r2, #1
 801372c:	602a      	str	r2, [r5, #0]
 801372e:	68a2      	ldr	r2, [r4, #8]
 8013730:	3b01      	subs	r3, #1
 8013732:	3a01      	subs	r2, #1
 8013734:	606b      	str	r3, [r5, #4]
 8013736:	3701      	adds	r7, #1
 8013738:	60a2      	str	r2, [r4, #8]
 801373a:	b142      	cbz	r2, 801374e <_scanf_chars+0x8e>
 801373c:	2b00      	cmp	r3, #0
 801373e:	dcd7      	bgt.n	80136f0 <_scanf_chars+0x30>
 8013740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013744:	4629      	mov	r1, r5
 8013746:	4640      	mov	r0, r8
 8013748:	4798      	blx	r3
 801374a:	2800      	cmp	r0, #0
 801374c:	d0d0      	beq.n	80136f0 <_scanf_chars+0x30>
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	f013 0310 	ands.w	r3, r3, #16
 8013754:	d105      	bne.n	8013762 <_scanf_chars+0xa2>
 8013756:	68e2      	ldr	r2, [r4, #12]
 8013758:	3201      	adds	r2, #1
 801375a:	60e2      	str	r2, [r4, #12]
 801375c:	69a2      	ldr	r2, [r4, #24]
 801375e:	b102      	cbz	r2, 8013762 <_scanf_chars+0xa2>
 8013760:	7033      	strb	r3, [r6, #0]
 8013762:	6923      	ldr	r3, [r4, #16]
 8013764:	443b      	add	r3, r7
 8013766:	6123      	str	r3, [r4, #16]
 8013768:	2000      	movs	r0, #0
 801376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376e:	bf00      	nop
 8013770:	08013ee9 	.word	0x08013ee9

08013774 <_scanf_i>:
 8013774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013778:	4698      	mov	r8, r3
 801377a:	4b74      	ldr	r3, [pc, #464]	@ (801394c <_scanf_i+0x1d8>)
 801377c:	460c      	mov	r4, r1
 801377e:	4682      	mov	sl, r0
 8013780:	4616      	mov	r6, r2
 8013782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013786:	b087      	sub	sp, #28
 8013788:	ab03      	add	r3, sp, #12
 801378a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801378e:	4b70      	ldr	r3, [pc, #448]	@ (8013950 <_scanf_i+0x1dc>)
 8013790:	69a1      	ldr	r1, [r4, #24]
 8013792:	4a70      	ldr	r2, [pc, #448]	@ (8013954 <_scanf_i+0x1e0>)
 8013794:	2903      	cmp	r1, #3
 8013796:	bf08      	it	eq
 8013798:	461a      	moveq	r2, r3
 801379a:	68a3      	ldr	r3, [r4, #8]
 801379c:	9201      	str	r2, [sp, #4]
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80137a4:	bf88      	it	hi
 80137a6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80137aa:	4627      	mov	r7, r4
 80137ac:	bf82      	ittt	hi
 80137ae:	eb03 0905 	addhi.w	r9, r3, r5
 80137b2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80137b6:	60a3      	strhi	r3, [r4, #8]
 80137b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80137bc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80137c0:	bf98      	it	ls
 80137c2:	f04f 0900 	movls.w	r9, #0
 80137c6:	6023      	str	r3, [r4, #0]
 80137c8:	463d      	mov	r5, r7
 80137ca:	f04f 0b00 	mov.w	fp, #0
 80137ce:	6831      	ldr	r1, [r6, #0]
 80137d0:	ab03      	add	r3, sp, #12
 80137d2:	7809      	ldrb	r1, [r1, #0]
 80137d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80137d8:	2202      	movs	r2, #2
 80137da:	f7ec fd89 	bl	80002f0 <memchr>
 80137de:	b328      	cbz	r0, 801382c <_scanf_i+0xb8>
 80137e0:	f1bb 0f01 	cmp.w	fp, #1
 80137e4:	d159      	bne.n	801389a <_scanf_i+0x126>
 80137e6:	6862      	ldr	r2, [r4, #4]
 80137e8:	b92a      	cbnz	r2, 80137f6 <_scanf_i+0x82>
 80137ea:	6822      	ldr	r2, [r4, #0]
 80137ec:	2108      	movs	r1, #8
 80137ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80137f2:	6061      	str	r1, [r4, #4]
 80137f4:	6022      	str	r2, [r4, #0]
 80137f6:	6822      	ldr	r2, [r4, #0]
 80137f8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80137fc:	6022      	str	r2, [r4, #0]
 80137fe:	68a2      	ldr	r2, [r4, #8]
 8013800:	1e51      	subs	r1, r2, #1
 8013802:	60a1      	str	r1, [r4, #8]
 8013804:	b192      	cbz	r2, 801382c <_scanf_i+0xb8>
 8013806:	6832      	ldr	r2, [r6, #0]
 8013808:	1c51      	adds	r1, r2, #1
 801380a:	6031      	str	r1, [r6, #0]
 801380c:	7812      	ldrb	r2, [r2, #0]
 801380e:	f805 2b01 	strb.w	r2, [r5], #1
 8013812:	6872      	ldr	r2, [r6, #4]
 8013814:	3a01      	subs	r2, #1
 8013816:	2a00      	cmp	r2, #0
 8013818:	6072      	str	r2, [r6, #4]
 801381a:	dc07      	bgt.n	801382c <_scanf_i+0xb8>
 801381c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013820:	4631      	mov	r1, r6
 8013822:	4650      	mov	r0, sl
 8013824:	4790      	blx	r2
 8013826:	2800      	cmp	r0, #0
 8013828:	f040 8085 	bne.w	8013936 <_scanf_i+0x1c2>
 801382c:	f10b 0b01 	add.w	fp, fp, #1
 8013830:	f1bb 0f03 	cmp.w	fp, #3
 8013834:	d1cb      	bne.n	80137ce <_scanf_i+0x5a>
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	b90b      	cbnz	r3, 801383e <_scanf_i+0xca>
 801383a:	230a      	movs	r3, #10
 801383c:	6063      	str	r3, [r4, #4]
 801383e:	6863      	ldr	r3, [r4, #4]
 8013840:	4945      	ldr	r1, [pc, #276]	@ (8013958 <_scanf_i+0x1e4>)
 8013842:	6960      	ldr	r0, [r4, #20]
 8013844:	1ac9      	subs	r1, r1, r3
 8013846:	f000 f889 	bl	801395c <__sccl>
 801384a:	f04f 0b00 	mov.w	fp, #0
 801384e:	68a3      	ldr	r3, [r4, #8]
 8013850:	6822      	ldr	r2, [r4, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d03d      	beq.n	80138d2 <_scanf_i+0x15e>
 8013856:	6831      	ldr	r1, [r6, #0]
 8013858:	6960      	ldr	r0, [r4, #20]
 801385a:	f891 c000 	ldrb.w	ip, [r1]
 801385e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013862:	2800      	cmp	r0, #0
 8013864:	d035      	beq.n	80138d2 <_scanf_i+0x15e>
 8013866:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801386a:	d124      	bne.n	80138b6 <_scanf_i+0x142>
 801386c:	0510      	lsls	r0, r2, #20
 801386e:	d522      	bpl.n	80138b6 <_scanf_i+0x142>
 8013870:	f10b 0b01 	add.w	fp, fp, #1
 8013874:	f1b9 0f00 	cmp.w	r9, #0
 8013878:	d003      	beq.n	8013882 <_scanf_i+0x10e>
 801387a:	3301      	adds	r3, #1
 801387c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013880:	60a3      	str	r3, [r4, #8]
 8013882:	6873      	ldr	r3, [r6, #4]
 8013884:	3b01      	subs	r3, #1
 8013886:	2b00      	cmp	r3, #0
 8013888:	6073      	str	r3, [r6, #4]
 801388a:	dd1b      	ble.n	80138c4 <_scanf_i+0x150>
 801388c:	6833      	ldr	r3, [r6, #0]
 801388e:	3301      	adds	r3, #1
 8013890:	6033      	str	r3, [r6, #0]
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	3b01      	subs	r3, #1
 8013896:	60a3      	str	r3, [r4, #8]
 8013898:	e7d9      	b.n	801384e <_scanf_i+0xda>
 801389a:	f1bb 0f02 	cmp.w	fp, #2
 801389e:	d1ae      	bne.n	80137fe <_scanf_i+0x8a>
 80138a0:	6822      	ldr	r2, [r4, #0]
 80138a2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80138a6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80138aa:	d1c4      	bne.n	8013836 <_scanf_i+0xc2>
 80138ac:	2110      	movs	r1, #16
 80138ae:	6061      	str	r1, [r4, #4]
 80138b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80138b4:	e7a2      	b.n	80137fc <_scanf_i+0x88>
 80138b6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80138ba:	6022      	str	r2, [r4, #0]
 80138bc:	780b      	ldrb	r3, [r1, #0]
 80138be:	f805 3b01 	strb.w	r3, [r5], #1
 80138c2:	e7de      	b.n	8013882 <_scanf_i+0x10e>
 80138c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80138c8:	4631      	mov	r1, r6
 80138ca:	4650      	mov	r0, sl
 80138cc:	4798      	blx	r3
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d0df      	beq.n	8013892 <_scanf_i+0x11e>
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	05d9      	lsls	r1, r3, #23
 80138d6:	d50d      	bpl.n	80138f4 <_scanf_i+0x180>
 80138d8:	42bd      	cmp	r5, r7
 80138da:	d909      	bls.n	80138f0 <_scanf_i+0x17c>
 80138dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80138e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80138e4:	4632      	mov	r2, r6
 80138e6:	4650      	mov	r0, sl
 80138e8:	4798      	blx	r3
 80138ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80138ee:	464d      	mov	r5, r9
 80138f0:	42bd      	cmp	r5, r7
 80138f2:	d028      	beq.n	8013946 <_scanf_i+0x1d2>
 80138f4:	6822      	ldr	r2, [r4, #0]
 80138f6:	f012 0210 	ands.w	r2, r2, #16
 80138fa:	d113      	bne.n	8013924 <_scanf_i+0x1b0>
 80138fc:	702a      	strb	r2, [r5, #0]
 80138fe:	6863      	ldr	r3, [r4, #4]
 8013900:	9e01      	ldr	r6, [sp, #4]
 8013902:	4639      	mov	r1, r7
 8013904:	4650      	mov	r0, sl
 8013906:	47b0      	blx	r6
 8013908:	f8d8 3000 	ldr.w	r3, [r8]
 801390c:	6821      	ldr	r1, [r4, #0]
 801390e:	1d1a      	adds	r2, r3, #4
 8013910:	f8c8 2000 	str.w	r2, [r8]
 8013914:	f011 0f20 	tst.w	r1, #32
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	d00f      	beq.n	801393c <_scanf_i+0x1c8>
 801391c:	6018      	str	r0, [r3, #0]
 801391e:	68e3      	ldr	r3, [r4, #12]
 8013920:	3301      	adds	r3, #1
 8013922:	60e3      	str	r3, [r4, #12]
 8013924:	6923      	ldr	r3, [r4, #16]
 8013926:	1bed      	subs	r5, r5, r7
 8013928:	445d      	add	r5, fp
 801392a:	442b      	add	r3, r5
 801392c:	6123      	str	r3, [r4, #16]
 801392e:	2000      	movs	r0, #0
 8013930:	b007      	add	sp, #28
 8013932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013936:	f04f 0b00 	mov.w	fp, #0
 801393a:	e7ca      	b.n	80138d2 <_scanf_i+0x15e>
 801393c:	07ca      	lsls	r2, r1, #31
 801393e:	bf4c      	ite	mi
 8013940:	8018      	strhmi	r0, [r3, #0]
 8013942:	6018      	strpl	r0, [r3, #0]
 8013944:	e7eb      	b.n	801391e <_scanf_i+0x1aa>
 8013946:	2001      	movs	r0, #1
 8013948:	e7f2      	b.n	8013930 <_scanf_i+0x1bc>
 801394a:	bf00      	nop
 801394c:	08013e7c 	.word	0x08013e7c
 8013950:	08013be9 	.word	0x08013be9
 8013954:	08012975 	.word	0x08012975
 8013958:	0801402c 	.word	0x0801402c

0801395c <__sccl>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	780b      	ldrb	r3, [r1, #0]
 8013960:	4604      	mov	r4, r0
 8013962:	2b5e      	cmp	r3, #94	@ 0x5e
 8013964:	bf0b      	itete	eq
 8013966:	784b      	ldrbeq	r3, [r1, #1]
 8013968:	1c4a      	addne	r2, r1, #1
 801396a:	1c8a      	addeq	r2, r1, #2
 801396c:	2100      	movne	r1, #0
 801396e:	bf08      	it	eq
 8013970:	2101      	moveq	r1, #1
 8013972:	3801      	subs	r0, #1
 8013974:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013978:	f800 1f01 	strb.w	r1, [r0, #1]!
 801397c:	42a8      	cmp	r0, r5
 801397e:	d1fb      	bne.n	8013978 <__sccl+0x1c>
 8013980:	b90b      	cbnz	r3, 8013986 <__sccl+0x2a>
 8013982:	1e50      	subs	r0, r2, #1
 8013984:	bd70      	pop	{r4, r5, r6, pc}
 8013986:	f081 0101 	eor.w	r1, r1, #1
 801398a:	54e1      	strb	r1, [r4, r3]
 801398c:	4610      	mov	r0, r2
 801398e:	4602      	mov	r2, r0
 8013990:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013994:	2d2d      	cmp	r5, #45	@ 0x2d
 8013996:	d005      	beq.n	80139a4 <__sccl+0x48>
 8013998:	2d5d      	cmp	r5, #93	@ 0x5d
 801399a:	d016      	beq.n	80139ca <__sccl+0x6e>
 801399c:	2d00      	cmp	r5, #0
 801399e:	d0f1      	beq.n	8013984 <__sccl+0x28>
 80139a0:	462b      	mov	r3, r5
 80139a2:	e7f2      	b.n	801398a <__sccl+0x2e>
 80139a4:	7846      	ldrb	r6, [r0, #1]
 80139a6:	2e5d      	cmp	r6, #93	@ 0x5d
 80139a8:	d0fa      	beq.n	80139a0 <__sccl+0x44>
 80139aa:	42b3      	cmp	r3, r6
 80139ac:	dcf8      	bgt.n	80139a0 <__sccl+0x44>
 80139ae:	3002      	adds	r0, #2
 80139b0:	461a      	mov	r2, r3
 80139b2:	3201      	adds	r2, #1
 80139b4:	4296      	cmp	r6, r2
 80139b6:	54a1      	strb	r1, [r4, r2]
 80139b8:	dcfb      	bgt.n	80139b2 <__sccl+0x56>
 80139ba:	1af2      	subs	r2, r6, r3
 80139bc:	3a01      	subs	r2, #1
 80139be:	1c5d      	adds	r5, r3, #1
 80139c0:	42b3      	cmp	r3, r6
 80139c2:	bfa8      	it	ge
 80139c4:	2200      	movge	r2, #0
 80139c6:	18ab      	adds	r3, r5, r2
 80139c8:	e7e1      	b.n	801398e <__sccl+0x32>
 80139ca:	4610      	mov	r0, r2
 80139cc:	e7da      	b.n	8013984 <__sccl+0x28>

080139ce <__submore>:
 80139ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d2:	460c      	mov	r4, r1
 80139d4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80139d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139da:	4299      	cmp	r1, r3
 80139dc:	d11d      	bne.n	8013a1a <__submore+0x4c>
 80139de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80139e2:	f7ff f92d 	bl	8012c40 <_malloc_r>
 80139e6:	b918      	cbnz	r0, 80139f0 <__submore+0x22>
 80139e8:	f04f 30ff 	mov.w	r0, #4294967295
 80139ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80139f6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80139fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80139fc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013a00:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013a04:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013a08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a0c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013a10:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013a14:	6020      	str	r0, [r4, #0]
 8013a16:	2000      	movs	r0, #0
 8013a18:	e7e8      	b.n	80139ec <__submore+0x1e>
 8013a1a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013a1c:	0077      	lsls	r7, r6, #1
 8013a1e:	463a      	mov	r2, r7
 8013a20:	f000 f83a 	bl	8013a98 <_realloc_r>
 8013a24:	4605      	mov	r5, r0
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d0de      	beq.n	80139e8 <__submore+0x1a>
 8013a2a:	eb00 0806 	add.w	r8, r0, r6
 8013a2e:	4601      	mov	r1, r0
 8013a30:	4632      	mov	r2, r6
 8013a32:	4640      	mov	r0, r8
 8013a34:	f7ff f88a 	bl	8012b4c <memcpy>
 8013a38:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013a3c:	f8c4 8000 	str.w	r8, [r4]
 8013a40:	e7e9      	b.n	8013a16 <__submore+0x48>

08013a42 <memmove>:
 8013a42:	4288      	cmp	r0, r1
 8013a44:	b510      	push	{r4, lr}
 8013a46:	eb01 0402 	add.w	r4, r1, r2
 8013a4a:	d902      	bls.n	8013a52 <memmove+0x10>
 8013a4c:	4284      	cmp	r4, r0
 8013a4e:	4623      	mov	r3, r4
 8013a50:	d807      	bhi.n	8013a62 <memmove+0x20>
 8013a52:	1e43      	subs	r3, r0, #1
 8013a54:	42a1      	cmp	r1, r4
 8013a56:	d008      	beq.n	8013a6a <memmove+0x28>
 8013a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a60:	e7f8      	b.n	8013a54 <memmove+0x12>
 8013a62:	4402      	add	r2, r0
 8013a64:	4601      	mov	r1, r0
 8013a66:	428a      	cmp	r2, r1
 8013a68:	d100      	bne.n	8013a6c <memmove+0x2a>
 8013a6a:	bd10      	pop	{r4, pc}
 8013a6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a74:	e7f7      	b.n	8013a66 <memmove+0x24>
	...

08013a78 <_sbrk_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	@ (8013a94 <_sbrk_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7ed fa06 	bl	8000e94 <_sbrk>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_sbrk_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_sbrk_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	24007c80 	.word	0x24007c80

08013a98 <_realloc_r>:
 8013a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9c:	4607      	mov	r7, r0
 8013a9e:	4614      	mov	r4, r2
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	b921      	cbnz	r1, 8013aae <_realloc_r+0x16>
 8013aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	f7ff b8c9 	b.w	8012c40 <_malloc_r>
 8013aae:	b92a      	cbnz	r2, 8013abc <_realloc_r+0x24>
 8013ab0:	f7ff f85a 	bl	8012b68 <_free_r>
 8013ab4:	4625      	mov	r5, r4
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013abc:	f000 f896 	bl	8013bec <_malloc_usable_size_r>
 8013ac0:	4284      	cmp	r4, r0
 8013ac2:	4606      	mov	r6, r0
 8013ac4:	d802      	bhi.n	8013acc <_realloc_r+0x34>
 8013ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013aca:	d8f4      	bhi.n	8013ab6 <_realloc_r+0x1e>
 8013acc:	4621      	mov	r1, r4
 8013ace:	4638      	mov	r0, r7
 8013ad0:	f7ff f8b6 	bl	8012c40 <_malloc_r>
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	b908      	cbnz	r0, 8013adc <_realloc_r+0x44>
 8013ad8:	4645      	mov	r5, r8
 8013ada:	e7ec      	b.n	8013ab6 <_realloc_r+0x1e>
 8013adc:	42b4      	cmp	r4, r6
 8013ade:	4622      	mov	r2, r4
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	bf28      	it	cs
 8013ae4:	4632      	movcs	r2, r6
 8013ae6:	f7ff f831 	bl	8012b4c <memcpy>
 8013aea:	4629      	mov	r1, r5
 8013aec:	4638      	mov	r0, r7
 8013aee:	f7ff f83b 	bl	8012b68 <_free_r>
 8013af2:	e7f1      	b.n	8013ad8 <_realloc_r+0x40>

08013af4 <_strtol_l.isra.0>:
 8013af4:	2b24      	cmp	r3, #36	@ 0x24
 8013af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013afa:	4686      	mov	lr, r0
 8013afc:	4690      	mov	r8, r2
 8013afe:	d801      	bhi.n	8013b04 <_strtol_l.isra.0+0x10>
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d106      	bne.n	8013b12 <_strtol_l.isra.0+0x1e>
 8013b04:	f7fe fff6 	bl	8012af4 <__errno>
 8013b08:	2316      	movs	r3, #22
 8013b0a:	6003      	str	r3, [r0, #0]
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b12:	4834      	ldr	r0, [pc, #208]	@ (8013be4 <_strtol_l.isra.0+0xf0>)
 8013b14:	460d      	mov	r5, r1
 8013b16:	462a      	mov	r2, r5
 8013b18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b1c:	5d06      	ldrb	r6, [r0, r4]
 8013b1e:	f016 0608 	ands.w	r6, r6, #8
 8013b22:	d1f8      	bne.n	8013b16 <_strtol_l.isra.0+0x22>
 8013b24:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b26:	d110      	bne.n	8013b4a <_strtol_l.isra.0+0x56>
 8013b28:	782c      	ldrb	r4, [r5, #0]
 8013b2a:	2601      	movs	r6, #1
 8013b2c:	1c95      	adds	r5, r2, #2
 8013b2e:	f033 0210 	bics.w	r2, r3, #16
 8013b32:	d115      	bne.n	8013b60 <_strtol_l.isra.0+0x6c>
 8013b34:	2c30      	cmp	r4, #48	@ 0x30
 8013b36:	d10d      	bne.n	8013b54 <_strtol_l.isra.0+0x60>
 8013b38:	782a      	ldrb	r2, [r5, #0]
 8013b3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b3e:	2a58      	cmp	r2, #88	@ 0x58
 8013b40:	d108      	bne.n	8013b54 <_strtol_l.isra.0+0x60>
 8013b42:	786c      	ldrb	r4, [r5, #1]
 8013b44:	3502      	adds	r5, #2
 8013b46:	2310      	movs	r3, #16
 8013b48:	e00a      	b.n	8013b60 <_strtol_l.isra.0+0x6c>
 8013b4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8013b4c:	bf04      	itt	eq
 8013b4e:	782c      	ldrbeq	r4, [r5, #0]
 8013b50:	1c95      	addeq	r5, r2, #2
 8013b52:	e7ec      	b.n	8013b2e <_strtol_l.isra.0+0x3a>
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d1f6      	bne.n	8013b46 <_strtol_l.isra.0+0x52>
 8013b58:	2c30      	cmp	r4, #48	@ 0x30
 8013b5a:	bf14      	ite	ne
 8013b5c:	230a      	movne	r3, #10
 8013b5e:	2308      	moveq	r3, #8
 8013b60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013b64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b68:	2200      	movs	r2, #0
 8013b6a:	fbbc f9f3 	udiv	r9, ip, r3
 8013b6e:	4610      	mov	r0, r2
 8013b70:	fb03 ca19 	mls	sl, r3, r9, ip
 8013b74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013b78:	2f09      	cmp	r7, #9
 8013b7a:	d80f      	bhi.n	8013b9c <_strtol_l.isra.0+0xa8>
 8013b7c:	463c      	mov	r4, r7
 8013b7e:	42a3      	cmp	r3, r4
 8013b80:	dd1b      	ble.n	8013bba <_strtol_l.isra.0+0xc6>
 8013b82:	1c57      	adds	r7, r2, #1
 8013b84:	d007      	beq.n	8013b96 <_strtol_l.isra.0+0xa2>
 8013b86:	4581      	cmp	r9, r0
 8013b88:	d314      	bcc.n	8013bb4 <_strtol_l.isra.0+0xc0>
 8013b8a:	d101      	bne.n	8013b90 <_strtol_l.isra.0+0x9c>
 8013b8c:	45a2      	cmp	sl, r4
 8013b8e:	db11      	blt.n	8013bb4 <_strtol_l.isra.0+0xc0>
 8013b90:	fb00 4003 	mla	r0, r0, r3, r4
 8013b94:	2201      	movs	r2, #1
 8013b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b9a:	e7eb      	b.n	8013b74 <_strtol_l.isra.0+0x80>
 8013b9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013ba0:	2f19      	cmp	r7, #25
 8013ba2:	d801      	bhi.n	8013ba8 <_strtol_l.isra.0+0xb4>
 8013ba4:	3c37      	subs	r4, #55	@ 0x37
 8013ba6:	e7ea      	b.n	8013b7e <_strtol_l.isra.0+0x8a>
 8013ba8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013bac:	2f19      	cmp	r7, #25
 8013bae:	d804      	bhi.n	8013bba <_strtol_l.isra.0+0xc6>
 8013bb0:	3c57      	subs	r4, #87	@ 0x57
 8013bb2:	e7e4      	b.n	8013b7e <_strtol_l.isra.0+0x8a>
 8013bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb8:	e7ed      	b.n	8013b96 <_strtol_l.isra.0+0xa2>
 8013bba:	1c53      	adds	r3, r2, #1
 8013bbc:	d108      	bne.n	8013bd0 <_strtol_l.isra.0+0xdc>
 8013bbe:	2322      	movs	r3, #34	@ 0x22
 8013bc0:	f8ce 3000 	str.w	r3, [lr]
 8013bc4:	4660      	mov	r0, ip
 8013bc6:	f1b8 0f00 	cmp.w	r8, #0
 8013bca:	d0a0      	beq.n	8013b0e <_strtol_l.isra.0+0x1a>
 8013bcc:	1e69      	subs	r1, r5, #1
 8013bce:	e006      	b.n	8013bde <_strtol_l.isra.0+0xea>
 8013bd0:	b106      	cbz	r6, 8013bd4 <_strtol_l.isra.0+0xe0>
 8013bd2:	4240      	negs	r0, r0
 8013bd4:	f1b8 0f00 	cmp.w	r8, #0
 8013bd8:	d099      	beq.n	8013b0e <_strtol_l.isra.0+0x1a>
 8013bda:	2a00      	cmp	r2, #0
 8013bdc:	d1f6      	bne.n	8013bcc <_strtol_l.isra.0+0xd8>
 8013bde:	f8c8 1000 	str.w	r1, [r8]
 8013be2:	e794      	b.n	8013b0e <_strtol_l.isra.0+0x1a>
 8013be4:	08013ee9 	.word	0x08013ee9

08013be8 <_strtol_r>:
 8013be8:	f7ff bf84 	b.w	8013af4 <_strtol_l.isra.0>

08013bec <_malloc_usable_size_r>:
 8013bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bf0:	1f18      	subs	r0, r3, #4
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	bfbc      	itt	lt
 8013bf6:	580b      	ldrlt	r3, [r1, r0]
 8013bf8:	18c0      	addlt	r0, r0, r3
 8013bfa:	4770      	bx	lr

08013bfc <_init>:
 8013bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bfe:	bf00      	nop
 8013c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c02:	bc08      	pop	{r3}
 8013c04:	469e      	mov	lr, r3
 8013c06:	4770      	bx	lr

08013c08 <_fini>:
 8013c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0a:	bf00      	nop
 8013c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c0e:	bc08      	pop	{r3}
 8013c10:	469e      	mov	lr, r3
 8013c12:	4770      	bx	lr
