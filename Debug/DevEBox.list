
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001223c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080124dc  080124dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080128e0  080128e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080128e8  080128e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080128ec  080128ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  080128f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000317c  24000160  08012a50  00014160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240032dc  08012a50  000142dc  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000400  38000000  38000000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00015400  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027c3e  00000000  00000000  0001542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005428  00000000  00000000  0003d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001cc8  00000000  00000000  00042498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001622  00000000  00000000  00044160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003eb80  00000000  00000000  00045782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b17b  00000000  00000000  00084302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f73b  00000000  00000000  000af47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022ebb8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000081e8  00000000  00000000  0022ebfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00236de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080124c4 	.word	0x080124c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	080124c4 	.word	0x080124c4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <MX_ADC3_Init+0xd4>)
 80006d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_ADC3_Init+0xd0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000700:	2200      	movs	r2, #0
 8000702:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_ADC3_Init+0xd0>)
 800070c:	2200      	movs	r2, #0
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000712:	2201      	movs	r2, #1
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC3_Init+0xd0>)
 800072e:	2201      	movs	r2, #1
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000732:	4816      	ldr	r0, [pc, #88]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000734:	f001 f9ba 	bl	8001aac <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800073e:	f000 fafd 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC3_Init+0xd8>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800074a:	2307      	movs	r3, #7
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000754:	2304      	movs	r3, #4
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000766:	f001 fc73 	bl	8002050 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000770:	f000 fae4 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_ADC3_Init+0xdc>)
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 8000778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800077c:	69f9      	ldr	r1, [r7, #28]
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <MX_ADC3_Init+0xd0>)
 8000780:	f001 fb36 	bl	8001df0 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2400017c 	.word	0x2400017c
 8000790:	58026000 	.word	0x58026000
 8000794:	cb840000 	.word	0xcb840000
 8000798:	38000000 	.word	0x38000000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b4      	sub	sp, #208	@ 0xd0
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	22c0      	movs	r2, #192	@ 0xc0
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f010 fdfd 	bl	80113ac <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a33      	ldr	r2, [pc, #204]	@ (8000884 <HAL_ADC_MspInit+0xe8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d15e      	bne.n	800087a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80007c8:	2319      	movs	r3, #25
 80007ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80007cc:	23c0      	movs	r3, #192	@ 0xc0
 80007ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fd46 	bl	8008284 <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80007fe:	f000 fa9d 	bl	8000d3c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	4a1f      	ldr	r2, [pc, #124]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 800080a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_ADC_MspInit+0xec>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <HAL_ADC_MspInit+0xf4>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000828:	2211      	movs	r2, #17
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800083a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800084a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800085e:	480b      	ldr	r0, [pc, #44]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000860:	f002 fb84 	bl	8002f6c <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 800086a:	f000 fa67 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000872:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000874:	4a05      	ldr	r2, [pc, #20]	@ (800088c <HAL_ADC_MspInit+0xf0>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800087a:	bf00      	nop
 800087c:	37d0      	adds	r7, #208	@ 0xd0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58026000 	.word	0x58026000
 8000888:	58024400 	.word	0x58024400
 800088c:	240001e0 	.word	0x240001e0
 8000890:	58025408 	.word	0x58025408

08000894 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <HAL_ADC_ConvCpltCallback+0x34>)
 800089e:	f001 fb6b 	bl	8001f78 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008ae:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n conversion_count = %d", conversion_count);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008ba:	f010 fbcb 	bl	8011054 <DebugPrint>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2400017c 	.word	0x2400017c
 80008cc:	24000258 	.word	0x24000258
 80008d0:	080124dc 	.word	0x080124dc

080008d4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008de:	f001 fb4b 	bl	8001f78 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_ADC_ErrorCallback+0x3c>)
 80008ee:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <HAL_ADC_ErrorCallback+0x40>)
 80008f8:	f010 fbac 	bl	8011054 <DebugPrint>
	hadc3.State = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_ADC_ErrorCallback+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2400017c 	.word	0x2400017c
 8000910:	24000258 	.word	0x24000258
 8000914:	080124f8 	.word	0x080124f8

08000918 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <CalcTemperature+0xe4>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d05c      	beq.n	80009e2 <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8000928:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <CalcTemperature+0xe8>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d030      	beq.n	8000996 <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000934:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <CalcTemperature+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
}
 8000940:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <CalcTemperature+0xe8>)
 8000944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000948:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	0b5b      	lsrs	r3, r3, #13
 800094e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000952:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800095c:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	015a      	lsls	r2, r3, #5
 8000962:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000966:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800096c:	4924      	ldr	r1, [pc, #144]	@ (8000a00 <CalcTemperature+0xe8>)
 800096e:	4313      	orrs	r3, r2
 8000970:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ef      	bne.n	800095e <CalcTemperature+0x46>
    } while(sets-- != 0U);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e5      	bne.n	8000954 <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000994:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	e010      	b.n	80009c2 <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 80009a0:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <CalcTemperature+0xec>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a8:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	4413      	add	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <CalcTemperature+0xec>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2100      	movs	r1, #0
 80009b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	ddeb      	ble.n	80009a0 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <CalcTemperature+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <CalcTemperature+0xec>)
 80009d0:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d6:	6939      	ldr	r1, [r7, #16]
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <CalcTemperature+0xf0>)
 80009da:	f001 fa09 	bl	8001df0 <HAL_ADC_Start_DMA>

		return total_adc;
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	e008      	b.n	80009f4 <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <CalcTemperature+0xec>)
 80009e4:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80009e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ea:	6979      	ldr	r1, [r7, #20]
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <CalcTemperature+0xf0>)
 80009ee:	f001 f9ff 	bl	8001df0 <HAL_ADC_Start_DMA>
	}

	return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	24000258 	.word	0x24000258
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	38000000 	.word	0x38000000
 8000a08:	2400017c 	.word	0x2400017c

08000a0c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a0b      	ldr	r2, [pc, #44]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_BDMA_Init+0x3c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2081      	movs	r0, #129	@ 0x81
 8000a36:	f002 f9f9 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000a3a:	2081      	movs	r0, #129	@ 0x81
 8000a3c:	f002 fa10 	bl	8002e60 <HAL_NVIC_EnableIRQ>

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400

08000a4c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	4a31      	ldr	r2, [pc, #196]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	4a2a      	ldr	r2, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_GPIO_Init+0xe4>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_GPIO_Init+0xe8>)
 8000afe:	f004 ffdb 	bl	8005ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <MX_GPIO_Init+0xe8>)
 8000b1a:	f004 fe1d 	bl	8005758 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000b24:	f000 fd42 	bl	80015ac <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020000 	.word	0x58020000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b3e:	f000 f8bd 	bl	8000cbc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fca7 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f83f 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f7ff ff7f 	bl	8000a4c <MX_GPIO_Init>
  MX_BDMA_Init();
 8000b4e:	f7ff ff5d 	bl	8000a0c <MX_BDMA_Init>
  MX_QUADSPI_Init();
 8000b52:	f000 f8f9 	bl	8000d48 <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8000b56:	f7ff fdb1 	bl	80006bc <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000b5a:	f00f f817 	bl	800fb8c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000b5e:	f000 fba1 	bl	80012a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2102      	movs	r1, #2
 8000b66:	4815      	ldr	r0, [pc, #84]	@ (8000bbc <main+0x84>)
 8000b68:	f004 ffa6 	bl	8005ab8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	@ 0x64
 8000b6e:	f000 fced 	bl	800154c <HAL_Delay>
		DebugTask();
 8000b72:	f010 f9cf 	bl	8010f14 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <main+0x84>)
 8000b7c:	f004 ff9c 	bl	8005ab8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b80:	2064      	movs	r0, #100	@ 0x64
 8000b82:	f000 fce3 	bl	800154c <HAL_Delay>
		DebugTask();
 8000b86:	f010 f9c5 	bl	8010f14 <DebugTask>
		uint32_t ADC_val = CalcTemperature();
 8000b8a:	f7ff fec5 	bl	8000918 <CalcTemperature>
 8000b8e:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ADC_val>0)
 8000b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0e5      	beq.n	8000b62 <main+0x2a>
		{
			char buffer[32];
			sprintf(buffer, "\r\n ADC_val = %10ld", ADC_val);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b9a:	4909      	ldr	r1, [pc, #36]	@ (8000bc0 <main+0x88>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f010 fb95 	bl	80112cc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 100);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fb9b 	bl	80002e0 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	1d39      	adds	r1, r7, #4
 8000bb0:	2364      	movs	r3, #100	@ 0x64
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <main+0x8c>)
 8000bb4:	f00a fb7c 	bl	800b2b0 <HAL_UART_Transmit>
	while (1) {
 8000bb8:	e7d3      	b.n	8000b62 <main+0x2a>
 8000bba:	bf00      	nop
 8000bbc:	58020000 	.word	0x58020000
 8000bc0:	08012510 	.word	0x08012510
 8000bc4:	240002f8 	.word	0x240002f8

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09c      	sub	sp, #112	@ 0x70
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd2:	224c      	movs	r2, #76	@ 0x4c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f010 fbe8 	bl	80113ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f010 fbe2 	bl	80113ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f006 fa1f 	bl	800702c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <SystemClock_Config+0xec>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <SystemClock_Config+0xec>)
 8000bf8:	f023 0301 	bic.w	r3, r3, #1
 8000bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <SystemClock_Config+0xec>)
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <SystemClock_Config+0xf0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb8 <SystemClock_Config+0xf0>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <SystemClock_Config+0xf0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c20:	bf00      	nop
 8000c22:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <SystemClock_Config+0xf0>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c2e:	d1f8      	bne.n	8000c22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c30:	2301      	movs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c42:	2305      	movs	r3, #5
 8000c44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c46:	23a0      	movs	r3, #160	@ 0xa0
 8000c48:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c56:	2308      	movs	r3, #8
 8000c58:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 fae4 	bl	8007234 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c72:	f000 f863 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	233f      	movs	r3, #63	@ 0x3f
 8000c78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c82:	2308      	movs	r3, #8
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c86:	2340      	movs	r3, #64	@ 0x40
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c94:	2340      	movs	r3, #64	@ 0x40
 8000c96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 ff23 	bl	8007ae8 <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ca8:	f000 f848 	bl	8000d3c <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3770      	adds	r7, #112	@ 0x70
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58000400 	.word	0x58000400
 8000cb8:	58024800 	.word	0x58024800

08000cbc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cce:	f002 f8d5 	bl	8002e7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000cda:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000cde:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cec:	2303      	movs	r3, #3
 8000cee:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d00:	463b      	mov	r3, r7
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 f8f2 	bl	8002eec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f002 f8cf 	bl	8002eac <HAL_MPU_Enable>

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d2a:	f000 fbef 	bl	800150c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010000 	.word	0x40010000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	@ (8000d9c <MX_QUADSPI_Init+0x54>)
 8000d50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d66:	2216      	movs	r2, #22
 8000d68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_QUADSPI_Init+0x50>)
 8000d84:	f006 f99c 	bl	80070c0 <HAL_QSPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f7ff ffd5 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400025c 	.word	0x2400025c
 8000d9c:	52005000 	.word	0x52005000

08000da0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0bc      	sub	sp, #240	@ 0xf0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	22c0      	movs	r2, #192	@ 0xc0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f010 faf3 	bl	80113ac <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a55      	ldr	r2, [pc, #340]	@ (8000f20 <HAL_QSPI_MspInit+0x180>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	f040 80a3 	bne.w	8000f18 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f007 fa4c 	bl	8008284 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000df2:	f7ff ffa3 	bl	8000d3c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000df6:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000df8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dfc:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e06:	4b47      	ldr	r3, [pc, #284]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a42      	ldr	r2, [pc, #264]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b3f      	ldr	r3, [pc, #252]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b3c      	ldr	r3, [pc, #240]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a3a      	ldr	r2, [pc, #232]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b38      	ldr	r3, [pc, #224]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a33      	ldr	r2, [pc, #204]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <HAL_QSPI_MspInit+0x184>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e86:	2309      	movs	r3, #9
 8000e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e90:	4619      	mov	r1, r3
 8000e92:	4825      	ldr	r0, [pc, #148]	@ (8000f28 <HAL_QSPI_MspInit+0x188>)
 8000e94:	f004 fc60 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481b      	ldr	r0, [pc, #108]	@ (8000f2c <HAL_QSPI_MspInit+0x18c>)
 8000ebe:	f004 fc4b 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000ec2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000edc:	2309      	movs	r3, #9
 8000ede:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <HAL_QSPI_MspInit+0x190>)
 8000eea:	f004 fc35 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eee:	2340      	movs	r3, #64	@ 0x40
 8000ef0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f06:	230a      	movs	r3, #10
 8000f08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	@ (8000f2c <HAL_QSPI_MspInit+0x18c>)
 8000f14:	f004 fc20 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f18:	bf00      	nop
 8000f1a:	37f0      	adds	r7, #240	@ 0xf0
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	52005000 	.word	0x52005000
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	58020c00 	.word	0x58020c00

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_MspInit+0x30>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_MspInit+0x30>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_MspInit+0x30>)
 8000f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	58024400 	.word	0x58024400

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	@ 0x38
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d844      	bhi.n	8001000 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f001 ff56 	bl	8002e2c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f80:	2019      	movs	r0, #25
 8000f82:	f001 ff6d 	bl	8002e60 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000f86:	4a24      	ldr	r2, [pc, #144]	@ (8001018 <HAL_InitTick+0xb0>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_InitTick+0xb4>)
 8000f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f92:	4a22      	ldr	r2, [pc, #136]	@ (800101c <HAL_InitTick+0xb4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <HAL_InitTick+0xb4>)
 8000f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 f923 	bl	8008200 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fba:	f007 f90b 	bl	80081d4 <HAL_RCC_GetPCLK2Freq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc6:	4a16      	ldr	r2, [pc, #88]	@ (8001020 <HAL_InitTick+0xb8>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_InitTick+0xbc>)
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HAL_InitTick+0xc0>)
 8000fd6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0xbc>)
 8000fda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_InitTick+0xbc>)
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fe4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_InitTick+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_InitTick+0xbc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <HAL_InitTick+0xbc>)
 8000ff4:	f009 fe44 	bl	800ac80 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <HAL_InitTick+0xa6>
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e005      	b.n	8001010 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001004:	4807      	ldr	r0, [pc, #28]	@ (8001024 <HAL_InitTick+0xbc>)
 8001006:	f009 fe9d 	bl	800ad44 <HAL_TIM_Base_Start_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3738      	adds	r7, #56	@ 0x38
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000008 	.word	0x24000008
 800101c:	58024400 	.word	0x58024400
 8001020:	431bde83 	.word	0x431bde83
 8001024:	240002a8 	.word	0x240002a8
 8001028:	40010000 	.word	0x40010000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <NMI_Handler+0x4>

08001034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <MemManage_Handler+0x4>

08001044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <UsageFault_Handler+0x4>

08001054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <TIM1_UP_IRQHandler+0x10>)
 8001092:	f009 fecf 	bl	800ae34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240002a8 	.word	0x240002a8

080010a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <OTG_FS_IRQHandler+0x10>)
 80010a6:	f004 fe61 	bl	8005d6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	24001870 	.word	0x24001870

080010b4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <BDMA_Channel0_IRQHandler+0x10>)
 80010ba:	f003 f83b 	bl	8004134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	240001e0 	.word	0x240001e0

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f010 f960 	bl	80113bc <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24080000 	.word	0x24080000
 8001128:	00000400 	.word	0x00000400
 800112c:	240002f4 	.word	0x240002f4
 8001130:	240032e0 	.word	0x240032e0

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001138:	4b43      	ldr	r3, [pc, #268]	@ (8001248 <SystemInit+0x114>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a42      	ldr	r2, [pc, #264]	@ (8001248 <SystemInit+0x114>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <SystemInit+0x118>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	2b06      	cmp	r3, #6
 8001152:	d807      	bhi.n	8001164 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <SystemInit+0x118>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 030f 	bic.w	r3, r3, #15
 800115c:	4a3b      	ldr	r2, [pc, #236]	@ (800124c <SystemInit+0x118>)
 800115e:	f043 0307 	orr.w	r3, r3, #7
 8001162:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001164:	4b3a      	ldr	r3, [pc, #232]	@ (8001250 <SystemInit+0x11c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a39      	ldr	r2, [pc, #228]	@ (8001250 <SystemInit+0x11c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001170:	4b37      	ldr	r3, [pc, #220]	@ (8001250 <SystemInit+0x11c>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <SystemInit+0x11c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4935      	ldr	r1, [pc, #212]	@ (8001250 <SystemInit+0x11c>)
 800117c:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <SystemInit+0x120>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001182:	4b32      	ldr	r3, [pc, #200]	@ (800124c <SystemInit+0x118>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118e:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <SystemInit+0x118>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 030f 	bic.w	r3, r3, #15
 8001196:	4a2d      	ldr	r2, [pc, #180]	@ (800124c <SystemInit+0x118>)
 8001198:	f043 0307 	orr.w	r3, r3, #7
 800119c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <SystemInit+0x11c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <SystemInit+0x11c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011aa:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <SystemInit+0x11c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <SystemInit+0x11c>)
 80011b2:	4a29      	ldr	r2, [pc, #164]	@ (8001258 <SystemInit+0x124>)
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <SystemInit+0x11c>)
 80011b8:	4a28      	ldr	r2, [pc, #160]	@ (800125c <SystemInit+0x128>)
 80011ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <SystemInit+0x11c>)
 80011be:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <SystemInit+0x12c>)
 80011c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <SystemInit+0x11c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <SystemInit+0x11c>)
 80011ca:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <SystemInit+0x12c>)
 80011cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <SystemInit+0x11c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <SystemInit+0x11c>)
 80011d6:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <SystemInit+0x12c>)
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <SystemInit+0x11c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <SystemInit+0x11c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <SystemInit+0x11c>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <SystemInit+0x11c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <SystemInit+0x130>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <SystemInit+0x134>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011fe:	d202      	bcs.n	8001206 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001200:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <SystemInit+0x138>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <SystemInit+0x11c>)
 8001208:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800120c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d113      	bne.n	800123c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <SystemInit+0x11c>)
 8001216:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <SystemInit+0x11c>)
 800121c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001220:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <SystemInit+0x13c>)
 8001226:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800122a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <SystemInit+0x11c>)
 800122e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001232:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <SystemInit+0x11c>)
 8001234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001238:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	52002000 	.word	0x52002000
 8001250:	58024400 	.word	0x58024400
 8001254:	eaf6ed7f 	.word	0xeaf6ed7f
 8001258:	02020200 	.word	0x02020200
 800125c:	01ff0000 	.word	0x01ff0000
 8001260:	01010280 	.word	0x01010280
 8001264:	5c001000 	.word	0x5c001000
 8001268:	ffff0000 	.word	0xffff0000
 800126c:	51008108 	.word	0x51008108
 8001270:	52004000 	.word	0x52004000

08001274 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <ExitRun0Mode+0x2c>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <ExitRun0Mode+0x2c>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001284:	bf00      	nop
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ExitRun0Mode+0x2c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f9      	beq.n	8001286 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	58024800 	.word	0x58024800

080012a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <MX_USART1_UART_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ee:	f009 ff8f 	bl	800b210 <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012f8:	f7ff fd20 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001300:	f00b f825 	bl	800c34e <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800130a:	f7ff fd17 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001312:	f00b f85a 	bl	800c3ca <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800131c:	f7ff fd0e 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001322:	f00a ffdb 	bl	800c2dc <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800132c:	f7ff fd06 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240002f8 	.word	0x240002f8
 8001338:	40011000 	.word	0x40011000

0800133c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ba      	sub	sp, #232	@ 0xe8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	22c0      	movs	r2, #192	@ 0xc0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f010 f825 	bl	80113ac <memset>
  if(uartHandle->Instance==USART1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a32      	ldr	r2, [pc, #200]	@ (8001430 <HAL_UART_MspInit+0xf4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d15c      	bne.n	8001426 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800136c:	f04f 0201 	mov.w	r2, #1
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4618      	mov	r0, r3
 8001384:	f006 ff7e 	bl	8008284 <HAL_RCCEx_PeriphCLKConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800138e:	f7ff fcd5 	bl	8000d3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001392:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 8001394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001398:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 80013a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <HAL_UART_MspInit+0xf8>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013e8:	2304      	movs	r3, #4
 80013ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	@ (8001438 <HAL_UART_MspInit+0xfc>)
 80013f6:	f004 f9af 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001414:	2304      	movs	r3, #4
 8001416:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <HAL_UART_MspInit+0xfc>)
 8001422:	f004 f999 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	37e8      	adds	r7, #232	@ 0xe8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40011000 	.word	0x40011000
 8001434:	58024400 	.word	0x58024400
 8001438:	58020400 	.word	0x58020400

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001478 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001440:	f7ff ff18 	bl	8001274 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff fe76 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f00f ffab 	bl	80113c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fb61 	bl	8000b38 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001484:	080128f0 	.word	0x080128f0
  ldr r2, =_sbss
 8001488:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 800148c:	240032dc 	.word	0x240032dc

08001490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC3_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f001 fcbb 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a0:	f006 fcd8 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	@ (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	200f      	movs	r0, #15
 80014e0:	f7ff fd42 	bl	8000f68 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fd21 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	08012750 	.word	0x08012750
 8001504:	24000004 	.word	0x24000004
 8001508:	24000000 	.word	0x24000000

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2400000c 	.word	0x2400000c
 8001530:	2400038c 	.word	0x2400038c

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2400038c 	.word	0x2400038c

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2400000c 	.word	0x2400000c

08001594 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetREVID+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0c1b      	lsrs	r3, r3, #16
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	5c001000 	.word	0x5c001000

080015ac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	4904      	ldr	r1, [pc, #16]	@ (80015d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58000400 	.word	0x58000400

080015d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <LL_ADC_SetChannelPreselection+0x24>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	0e9b      	lsrs	r3, r3, #26
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2201      	movs	r2, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	e015      	b.n	8001690 <LL_ADC_SetChannelPreselection+0x50>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800167a:	2320      	movs	r3, #32
 800167c:	e003      	b.n	8001686 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2201      	movs	r2, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	69d2      	ldr	r2, [r2, #28]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b087      	sub	sp, #28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3360      	adds	r3, #96	@ 0x60
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	431a      	orrs	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	611a      	str	r2, [r3, #16]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3360      	adds	r3, #96	@ 0x60
 8001728:	461a      	mov	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
  }
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3330      	adds	r3, #48	@ 0x30
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	4413      	add	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	211f      	movs	r1, #31
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0e9b      	lsrs	r3, r3, #26
 80017ac:	f003 011f 	and.w	r1, r3, #31
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	431a      	orrs	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3314      	adds	r3, #20
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	0e5b      	lsrs	r3, r3, #25
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	0d1b      	lsrs	r3, r3, #20
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2107      	movs	r1, #7
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	0d1b      	lsrs	r3, r3, #20
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0318 	and.w	r3, r3, #24
 800186a:	4908      	ldr	r1, [pc, #32]	@ (800188c <LL_ADC_SetChannelSingleDiff+0x44>)
 800186c:	40d9      	lsrs	r1, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	400b      	ands	r3, r1
 8001872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001876:	431a      	orrs	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	000fffff 	.word	0x000fffff

08001890 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 031f 	and.w	r3, r3, #31
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6093      	str	r3, [r2, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	5fffffc0 	.word	0x5fffffc0

080018d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e4:	d101      	bne.n	80018ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <LL_ADC_EnableInternalRegulator+0x24>)
 8001906:	4013      	ands	r3, r2
 8001908:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	6fffffc0 	.word	0x6fffffc0

08001920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <LL_ADC_Enable+0x24>)
 8001956:	4013      	ands	r3, r2
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	7fffffc0 	.word	0x7fffffc0

08001970 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <LL_ADC_Disable+0x24>)
 800197e:	4013      	ands	r3, r2
 8001980:	f043 0202 	orr.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	7fffffc0 	.word	0x7fffffc0

08001998 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <LL_ADC_IsEnabled+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_ADC_IsEnabled+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d101      	bne.n	80019d6 <LL_ADC_IsDisableOngoing+0x18>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_ADC_IsDisableOngoing+0x1a>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <LL_ADC_REG_StartConversion+0x24>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	7fffffc0 	.word	0x7fffffc0

08001a0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <LL_ADC_REG_StopConversion+0x24>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	7fffffc0 	.word	0x7fffffc0

08001a34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <LL_ADC_INJ_StopConversion+0x24>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	7fffffc0 	.word	0x7fffffc0

08001a84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e18f      	b.n	8001de6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe fe61 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff feef 	bl	80018d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fed5 	bl	80018ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff0a 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d114      	bne.n	8001b3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff feee 	bl	80018f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b1c:	4b87      	ldr	r3, [pc, #540]	@ (8001d3c <HAL_ADC_Init+0x290>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	4a87      	ldr	r2, [pc, #540]	@ (8001d40 <HAL_ADC_Init+0x294>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff feed 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10d      	bne.n	8001b68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b50:	f043 0210 	orr.w	r2, r3, #16
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff61 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001b72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 8129 	bne.w	8001dd4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 8125 	bne.w	8001dd4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fefa 	bl	8001998 <LL_ADC_IsEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d136      	bne.n	8001c18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a65      	ldr	r2, [pc, #404]	@ (8001d44 <HAL_ADC_Init+0x298>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_Init+0x112>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a63      	ldr	r2, [pc, #396]	@ (8001d48 <HAL_ADC_Init+0x29c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10e      	bne.n	8001bdc <HAL_ADC_Init+0x130>
 8001bbe:	4861      	ldr	r0, [pc, #388]	@ (8001d44 <HAL_ADC_Init+0x298>)
 8001bc0:	f7ff feea 	bl	8001998 <LL_ADC_IsEnabled>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	4860      	ldr	r0, [pc, #384]	@ (8001d48 <HAL_ADC_Init+0x29c>)
 8001bc8:	f7ff fee6 	bl	8001998 <LL_ADC_IsEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4323      	orrs	r3, r4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e008      	b.n	8001bee <HAL_ADC_Init+0x142>
 8001bdc:	485b      	ldr	r0, [pc, #364]	@ (8001d4c <HAL_ADC_Init+0x2a0>)
 8001bde:	f7ff fedb 	bl	8001998 <LL_ADC_IsEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a53      	ldr	r2, [pc, #332]	@ (8001d44 <HAL_ADC_Init+0x298>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_Init+0x15a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a51      	ldr	r2, [pc, #324]	@ (8001d48 <HAL_ADC_Init+0x29c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x15e>
 8001c06:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_ADC_Init+0x2a4>)
 8001c08:	e000      	b.n	8001c0c <HAL_ADC_Init+0x160>
 8001c0a:	4a52      	ldr	r2, [pc, #328]	@ (8001d54 <HAL_ADC_Init+0x2a8>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f7ff fce0 	bl	80015d8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c18:	f7ff fcbc 	bl	8001594 <HAL_GetREVID>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d914      	bls.n	8001c50 <HAL_ADC_Init+0x1a4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d110      	bne.n	8001c50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7d5b      	ldrb	r3, [r3, #21]
 8001c32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7f1b      	ldrb	r3, [r3, #28]
 8001c44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c48:	f043 030c 	orr.w	r3, r3, #12
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	e00d      	b.n	8001c6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7d5b      	ldrb	r3, [r3, #21]
 8001c54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7f1b      	ldrb	r3, [r3, #28]
 8001c66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	045b      	lsls	r3, r3, #17
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d58 <HAL_ADC_Init+0x2ac>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	69b9      	ldr	r1, [r7, #24]
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff febc 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001cbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fede 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 8001cc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d15f      	bne.n	8001d90 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d15c      	bne.n	8001d90 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7d1b      	ldrb	r3, [r3, #20]
 8001cda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_ADC_Init+0x2b0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d130      	bne.n	8001d64 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_ADC_Init+0x2b4>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d16:	3a01      	subs	r2, #1
 8001d18:	0411      	lsls	r1, r2, #16
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	e01c      	b.n	8001d74 <HAL_ADC_Init+0x2c8>
 8001d3a:	bf00      	nop
 8001d3c:	24000000 	.word	0x24000000
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40022100 	.word	0x40022100
 8001d4c:	58026000 	.word	0x58026000
 8001d50:	40022300 	.word	0x40022300
 8001d54:	58026300 	.word	0x58026300
 8001d58:	fff0c003 	.word	0xfff0c003
 8001d5c:	ffffbffc 	.word	0xffffbffc
 8001d60:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fe8a 	bl	8002aa4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10c      	bne.n	8001db2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f023 010f 	bic.w	r1, r3, #15
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db0:	e007      	b.n	8001dc2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020f 	bic.w	r2, r2, #15
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f023 0303 	bic.w	r3, r3, #3
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	f043 0210 	orr.w	r2, r3, #16
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop

08001df0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a55      	ldr	r2, [pc, #340]	@ (8001f58 <HAL_ADC_Start_DMA+0x168>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_ADC_Start_DMA+0x20>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_ADC_Start_DMA+0x16c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x24>
 8001e10:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_ADC_Start_DMA+0x170>)
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_Start_DMA+0x26>
 8001e14:	4b53      	ldr	r3, [pc, #332]	@ (8001f64 <HAL_ADC_Start_DMA+0x174>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fd3a 	bl	8001890 <LL_ADC_GetMultimode>
 8001e1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe06 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 808c 	bne.w	8001f48 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x4e>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e087      	b.n	8001f4e <HAL_ADC_Start_DMA+0x15e>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d002      	beq.n	8001e58 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d170      	bne.n	8001f3a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fca5 	bl	80027a8 <ADC_Enable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d163      	bne.n	8001f30 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <HAL_ADC_Start_DMA+0x178>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a37      	ldr	r2, [pc, #220]	@ (8001f5c <HAL_ADC_Start_DMA+0x16c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_Start_DMA+0x98>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_Start_DMA+0x9a>
 8001e88:	4b33      	ldr	r3, [pc, #204]	@ (8001f58 <HAL_ADC_Start_DMA+0x168>)
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d002      	beq.n	8001e98 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f023 0206 	bic.w	r2, r3, #6
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <HAL_ADC_Start_DMA+0x17c>)
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	4a27      	ldr	r2, [pc, #156]	@ (8001f70 <HAL_ADC_Start_DMA+0x180>)
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	4a26      	ldr	r2, [pc, #152]	@ (8001f74 <HAL_ADC_Start_DMA+0x184>)
 8001eda:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	221c      	movs	r2, #28
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0210 	orr.w	r2, r2, #16
 8001efa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff fc60 	bl	80017cc <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3340      	adds	r3, #64	@ 0x40
 8001f16:	4619      	mov	r1, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f001 fb82 	bl	8003624 <HAL_DMA_Start_IT>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fd5b 	bl	80019e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f2e:	e00d      	b.n	8001f4c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001f38:	e008      	b.n	8001f4c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f46:	e001      	b.n	8001f4c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40022100 	.word	0x40022100
 8001f60:	40022300 	.word	0x40022300
 8001f64:	58026300 	.word	0x58026300
 8001f68:	fffff0fe 	.word	0xfffff0fe
 8001f6c:	0800297b 	.word	0x0800297b
 8001f70:	08002a53 	.word	0x08002a53
 8001f74:	08002a6f 	.word	0x08002a6f

08001f78 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Stop_DMA+0x16>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e04f      	b.n	800202e <HAL_ADC_Stop_DMA+0xb6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f96:	2103      	movs	r1, #3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb49 	bl	8002630 <ADC_ConversionStop>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d13d      	bne.n	8002024 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0203 	bic.w	r2, r2, #3
 8001fb6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fd94 	bl	8003af8 <HAL_DMA_Abort>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0210 	bic.w	r2, r2, #16
 8001ff4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fc5d 	bl	80028bc <ADC_Disable>
 8002002:	4603      	mov	r3, r0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e002      	b.n	800200e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fc57 	bl	80028bc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d107      	bne.n	8002024 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_ADC_Stop_DMA+0xc0>)
 800201a:	4013      	ands	r3, r2
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	ffffeefe 	.word	0xffffeefe

0800203c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08d      	sub	sp, #52	@ 0x34
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a65      	ldr	r2, [pc, #404]	@ (8002200 <HAL_ADC_ConfigChannel+0x1b0>)
 800206a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_ADC_ConfigChannel+0x2a>
 8002076:	2302      	movs	r3, #2
 8002078:	e2c7      	b.n	800260a <HAL_ADC_ConfigChannel+0x5ba>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fcd4 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 82ac 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db2c      	blt.n	80020f6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d108      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x6a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2201      	movs	r2, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	e016      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x98>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	613b      	str	r3, [r7, #16]
  return result;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e003      	b.n	80020de <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2201      	movs	r2, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	69d1      	ldr	r1, [r2, #28]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff fb36 	bl	8001774 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc91 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8002112:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fcb3 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 800211e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80b8 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80b4 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	461a      	mov	r2, r3
 800213e:	f7ff fb58 	bl	80017f2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_ADC_ConfigChannel+0x1b4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800214a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800214e:	d10b      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x118>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	e01d      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x154>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10b      	bne.n	800218e <HAL_ADC_ConfigChannel+0x13e>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	e00a      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x154>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d02c      	beq.n	8002208 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f7ff fa73 	bl	80016a6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7e5b      	ldrb	r3, [r3, #25]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x186>
 80021d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x188>
 80021d6:	2300      	movs	r3, #0
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fa9d 	bl	8001718 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7e1b      	ldrb	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1a4>
 80021ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021f2:	e000      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1a6>
 80021f4:	2300      	movs	r3, #0
 80021f6:	461a      	mov	r2, r3
 80021f8:	f7ff fa75 	bl	80016e6 <LL_ADC_SetDataRightShift>
 80021fc:	e04c      	b.n	8002298 <HAL_ADC_ConfigChannel+0x248>
 80021fe:	bf00      	nop
 8002200:	47ff0000 	.word	0x47ff0000
 8002204:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800222a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800224e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	069b      	lsls	r3, r3, #26
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002272:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800227a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	429a      	cmp	r2, r3
 8002286:	d107      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002296:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb7b 	bl	8001998 <LL_ADC_IsEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81aa 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fac6 	bl	8001848 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a87      	ldr	r2, [pc, #540]	@ (80024e0 <HAL_ADC_ConfigChannel+0x490>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f040 809a 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4984      	ldr	r1, [pc, #528]	@ (80024e4 <HAL_ADC_ConfigChannel+0x494>)
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d147      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x316>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4983      	ldr	r1, [pc, #524]	@ (80024e8 <HAL_ADC_ConfigChannel+0x498>)
 80022dc:	428b      	cmp	r3, r1
 80022de:	d040      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x312>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4981      	ldr	r1, [pc, #516]	@ (80024ec <HAL_ADC_ConfigChannel+0x49c>)
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d039      	beq.n	800235e <HAL_ADC_ConfigChannel+0x30e>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4980      	ldr	r1, [pc, #512]	@ (80024f0 <HAL_ADC_ConfigChannel+0x4a0>)
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d032      	beq.n	800235a <HAL_ADC_ConfigChannel+0x30a>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	497e      	ldr	r1, [pc, #504]	@ (80024f4 <HAL_ADC_ConfigChannel+0x4a4>)
 80022fa:	428b      	cmp	r3, r1
 80022fc:	d02b      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x306>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	497d      	ldr	r1, [pc, #500]	@ (80024f8 <HAL_ADC_ConfigChannel+0x4a8>)
 8002304:	428b      	cmp	r3, r1
 8002306:	d024      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x302>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	497b      	ldr	r1, [pc, #492]	@ (80024fc <HAL_ADC_ConfigChannel+0x4ac>)
 800230e:	428b      	cmp	r3, r1
 8002310:	d01d      	beq.n	800234e <HAL_ADC_ConfigChannel+0x2fe>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	497a      	ldr	r1, [pc, #488]	@ (8002500 <HAL_ADC_ConfigChannel+0x4b0>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d016      	beq.n	800234a <HAL_ADC_ConfigChannel+0x2fa>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4978      	ldr	r1, [pc, #480]	@ (8002504 <HAL_ADC_ConfigChannel+0x4b4>)
 8002322:	428b      	cmp	r3, r1
 8002324:	d00f      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x2f6>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4977      	ldr	r1, [pc, #476]	@ (8002508 <HAL_ADC_ConfigChannel+0x4b8>)
 800232c:	428b      	cmp	r3, r1
 800232e:	d008      	beq.n	8002342 <HAL_ADC_ConfigChannel+0x2f2>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4975      	ldr	r1, [pc, #468]	@ (800250c <HAL_ADC_ConfigChannel+0x4bc>)
 8002336:	428b      	cmp	r3, r1
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x2ee>
 800233a:	4b75      	ldr	r3, [pc, #468]	@ (8002510 <HAL_ADC_ConfigChannel+0x4c0>)
 800233c:	e05a      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 800233e:	2300      	movs	r3, #0
 8002340:	e058      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002342:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <HAL_ADC_ConfigChannel+0x4c4>)
 8002344:	e056      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002346:	4b74      	ldr	r3, [pc, #464]	@ (8002518 <HAL_ADC_ConfigChannel+0x4c8>)
 8002348:	e054      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 800234a:	4b6e      	ldr	r3, [pc, #440]	@ (8002504 <HAL_ADC_ConfigChannel+0x4b4>)
 800234c:	e052      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 800234e:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_ADC_ConfigChannel+0x4b0>)
 8002350:	e050      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002352:	4b72      	ldr	r3, [pc, #456]	@ (800251c <HAL_ADC_ConfigChannel+0x4cc>)
 8002354:	e04e      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002356:	4b72      	ldr	r3, [pc, #456]	@ (8002520 <HAL_ADC_ConfigChannel+0x4d0>)
 8002358:	e04c      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 800235a:	4b72      	ldr	r3, [pc, #456]	@ (8002524 <HAL_ADC_ConfigChannel+0x4d4>)
 800235c:	e04a      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 800235e:	4b72      	ldr	r3, [pc, #456]	@ (8002528 <HAL_ADC_ConfigChannel+0x4d8>)
 8002360:	e048      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002362:	2301      	movs	r3, #1
 8002364:	e046      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4970      	ldr	r1, [pc, #448]	@ (800252c <HAL_ADC_ConfigChannel+0x4dc>)
 800236c:	428b      	cmp	r3, r1
 800236e:	d140      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x3a2>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	495c      	ldr	r1, [pc, #368]	@ (80024e8 <HAL_ADC_ConfigChannel+0x498>)
 8002376:	428b      	cmp	r3, r1
 8002378:	d039      	beq.n	80023ee <HAL_ADC_ConfigChannel+0x39e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	495b      	ldr	r1, [pc, #364]	@ (80024ec <HAL_ADC_ConfigChannel+0x49c>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d032      	beq.n	80023ea <HAL_ADC_ConfigChannel+0x39a>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4959      	ldr	r1, [pc, #356]	@ (80024f0 <HAL_ADC_ConfigChannel+0x4a0>)
 800238a:	428b      	cmp	r3, r1
 800238c:	d02b      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x396>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4958      	ldr	r1, [pc, #352]	@ (80024f4 <HAL_ADC_ConfigChannel+0x4a4>)
 8002394:	428b      	cmp	r3, r1
 8002396:	d024      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x392>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4956      	ldr	r1, [pc, #344]	@ (80024f8 <HAL_ADC_ConfigChannel+0x4a8>)
 800239e:	428b      	cmp	r3, r1
 80023a0:	d01d      	beq.n	80023de <HAL_ADC_ConfigChannel+0x38e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4955      	ldr	r1, [pc, #340]	@ (80024fc <HAL_ADC_ConfigChannel+0x4ac>)
 80023a8:	428b      	cmp	r3, r1
 80023aa:	d016      	beq.n	80023da <HAL_ADC_ConfigChannel+0x38a>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4953      	ldr	r1, [pc, #332]	@ (8002500 <HAL_ADC_ConfigChannel+0x4b0>)
 80023b2:	428b      	cmp	r3, r1
 80023b4:	d00f      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x386>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4952      	ldr	r1, [pc, #328]	@ (8002504 <HAL_ADC_ConfigChannel+0x4b4>)
 80023bc:	428b      	cmp	r3, r1
 80023be:	d008      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x382>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4951      	ldr	r1, [pc, #324]	@ (800250c <HAL_ADC_ConfigChannel+0x4bc>)
 80023c6:	428b      	cmp	r3, r1
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x37e>
 80023ca:	4b51      	ldr	r3, [pc, #324]	@ (8002510 <HAL_ADC_ConfigChannel+0x4c0>)
 80023cc:	e012      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e010      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023d2:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <HAL_ADC_ConfigChannel+0x4c8>)
 80023d4:	e00e      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002504 <HAL_ADC_ConfigChannel+0x4b4>)
 80023d8:	e00c      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <HAL_ADC_ConfigChannel+0x4b0>)
 80023dc:	e00a      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023de:	4b4f      	ldr	r3, [pc, #316]	@ (800251c <HAL_ADC_ConfigChannel+0x4cc>)
 80023e0:	e008      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002520 <HAL_ADC_ConfigChannel+0x4d0>)
 80023e4:	e006      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <HAL_ADC_ConfigChannel+0x4d4>)
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <HAL_ADC_ConfigChannel+0x4d8>)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x3a4>
 80023f2:	2300      	movs	r3, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f7ff f922 	bl	8001640 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f280 80fc 	bge.w	80025fe <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a36      	ldr	r2, [pc, #216]	@ (80024e4 <HAL_ADC_ConfigChannel+0x494>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_ADC_ConfigChannel+0x3ca>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a45      	ldr	r2, [pc, #276]	@ (800252c <HAL_ADC_ConfigChannel+0x4dc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x3ce>
 800241a:	4b45      	ldr	r3, [pc, #276]	@ (8002530 <HAL_ADC_ConfigChannel+0x4e0>)
 800241c:	e000      	b.n	8002420 <HAL_ADC_ConfigChannel+0x3d0>
 800241e:	4b45      	ldr	r3, [pc, #276]	@ (8002534 <HAL_ADC_ConfigChannel+0x4e4>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f8ff 	bl	8001624 <LL_ADC_GetCommonPathInternalCh>
 8002426:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2d      	ldr	r2, [pc, #180]	@ (80024e4 <HAL_ADC_ConfigChannel+0x494>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_ADC_ConfigChannel+0x3ec>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3d      	ldr	r2, [pc, #244]	@ (800252c <HAL_ADC_ConfigChannel+0x4dc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d10e      	bne.n	800245a <HAL_ADC_ConfigChannel+0x40a>
 800243c:	4829      	ldr	r0, [pc, #164]	@ (80024e4 <HAL_ADC_ConfigChannel+0x494>)
 800243e:	f7ff faab 	bl	8001998 <LL_ADC_IsEnabled>
 8002442:	4604      	mov	r4, r0
 8002444:	4839      	ldr	r0, [pc, #228]	@ (800252c <HAL_ADC_ConfigChannel+0x4dc>)
 8002446:	f7ff faa7 	bl	8001998 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	4323      	orrs	r3, r4
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	e008      	b.n	800246c <HAL_ADC_ConfigChannel+0x41c>
 800245a:	4837      	ldr	r0, [pc, #220]	@ (8002538 <HAL_ADC_ConfigChannel+0x4e8>)
 800245c:	f7ff fa9c 	bl	8001998 <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80b3 	beq.w	80025d8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a31      	ldr	r2, [pc, #196]	@ (800253c <HAL_ADC_ConfigChannel+0x4ec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d165      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x4f8>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d160      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <HAL_ADC_ConfigChannel+0x4e8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	f040 80b6 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a13      	ldr	r2, [pc, #76]	@ (80024e4 <HAL_ADC_ConfigChannel+0x494>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x456>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a22      	ldr	r2, [pc, #136]	@ (800252c <HAL_ADC_ConfigChannel+0x4dc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x45a>
 80024a6:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <HAL_ADC_ConfigChannel+0x4e0>)
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x45c>
 80024aa:	4a22      	ldr	r2, [pc, #136]	@ (8002534 <HAL_ADC_ConfigChannel+0x4e4>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7ff f8a2 	bl	80015fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_ADC_ConfigChannel+0x4f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	099b      	lsrs	r3, r3, #6
 80024c0:	4a20      	ldr	r2, [pc, #128]	@ (8002544 <HAL_ADC_ConfigChannel+0x4f4>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	3301      	adds	r3, #1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80024ce:	e002      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024dc:	e08f      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
 80024de:	bf00      	nop
 80024e0:	47ff0000 	.word	0x47ff0000
 80024e4:	40022000 	.word	0x40022000
 80024e8:	04300002 	.word	0x04300002
 80024ec:	08600004 	.word	0x08600004
 80024f0:	0c900008 	.word	0x0c900008
 80024f4:	10c00010 	.word	0x10c00010
 80024f8:	14f00020 	.word	0x14f00020
 80024fc:	2a000400 	.word	0x2a000400
 8002500:	2e300800 	.word	0x2e300800
 8002504:	32601000 	.word	0x32601000
 8002508:	43210000 	.word	0x43210000
 800250c:	4b840000 	.word	0x4b840000
 8002510:	4fb80000 	.word	0x4fb80000
 8002514:	47520000 	.word	0x47520000
 8002518:	36902000 	.word	0x36902000
 800251c:	25b00200 	.word	0x25b00200
 8002520:	21800100 	.word	0x21800100
 8002524:	1d500080 	.word	0x1d500080
 8002528:	19200040 	.word	0x19200040
 800252c:	40022100 	.word	0x40022100
 8002530:	40022300 	.word	0x40022300
 8002534:	58026300 	.word	0x58026300
 8002538:	58026000 	.word	0x58026000
 800253c:	cb840000 	.word	0xcb840000
 8002540:	24000000 	.word	0x24000000
 8002544:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a31      	ldr	r2, [pc, #196]	@ (8002614 <HAL_ADC_ConfigChannel+0x5c4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11e      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x540>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d119      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2d      	ldr	r2, [pc, #180]	@ (8002618 <HAL_ADC_ConfigChannel+0x5c8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d14b      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2c      	ldr	r2, [pc, #176]	@ (800261c <HAL_ADC_ConfigChannel+0x5cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_ConfigChannel+0x52a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2a      	ldr	r2, [pc, #168]	@ (8002620 <HAL_ADC_ConfigChannel+0x5d0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x52e>
 800257a:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <HAL_ADC_ConfigChannel+0x5d4>)
 800257c:	e000      	b.n	8002580 <HAL_ADC_ConfigChannel+0x530>
 800257e:	4a2a      	ldr	r2, [pc, #168]	@ (8002628 <HAL_ADC_ConfigChannel+0x5d8>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7ff f838 	bl	80015fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800258e:	e036      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a25      	ldr	r2, [pc, #148]	@ (800262c <HAL_ADC_ConfigChannel+0x5dc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d131      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12c      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_ADC_ConfigChannel+0x5c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d127      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1a      	ldr	r2, [pc, #104]	@ (800261c <HAL_ADC_ConfigChannel+0x5cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d004      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x572>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <HAL_ADC_ConfigChannel+0x5d0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x576>
 80025c2:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_ADC_ConfigChannel+0x5d4>)
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x578>
 80025c6:	4a18      	ldr	r2, [pc, #96]	@ (8002628 <HAL_ADC_ConfigChannel+0x5d8>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7ff f814 	bl	80015fe <LL_ADC_SetCommonPathInternalCh>
 80025d6:	e012      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025ea:	e008      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800260a:	4618      	mov	r0, r3
 800260c:	3734      	adds	r7, #52	@ 0x34
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	c7520000 	.word	0xc7520000
 8002618:	58026000 	.word	0x58026000
 800261c:	40022000 	.word	0x40022000
 8002620:	40022100 	.word	0x40022100
 8002624:	40022300 	.word	0x40022300
 8002628:	58026300 	.word	0x58026300
 800262c:	cfb80000 	.word	0xcfb80000

08002630 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f9f4 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 800264c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa16 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 8002658:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8098 	beq.w	8002798 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d02a      	beq.n	80026cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7d5b      	ldrb	r3, [r3, #21]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d126      	bne.n	80026cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7d1b      	ldrb	r3, [r3, #20]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d122      	bne.n	80026cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002686:	2301      	movs	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800268a:	e014      	b.n	80026b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4a45      	ldr	r2, [pc, #276]	@ (80027a4 <ADC_ConversionStop+0x174>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d90d      	bls.n	80026b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f043 0210 	orr.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e074      	b.n	800279a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c0:	2b40      	cmp	r3, #64	@ 0x40
 80026c2:	d1e3      	bne.n	800268c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2240      	movs	r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d014      	beq.n	80026fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f9ac 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f969 	bl	80019be <LL_ADC_IsDisableOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f988 	bl	8001a0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d014      	beq.n	800272c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f9bc 	bl	8001a84 <LL_ADC_INJ_IsConversionOngoing>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f951 	bl	80019be <LL_ADC_IsDisableOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f998 	bl	8001a5c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d005      	beq.n	800273e <ADC_ConversionStop+0x10e>
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d105      	bne.n	8002744 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002738:	230c      	movs	r3, #12
 800273a:	617b      	str	r3, [r7, #20]
        break;
 800273c:	e005      	b.n	800274a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800273e:	2308      	movs	r3, #8
 8002740:	617b      	str	r3, [r7, #20]
        break;
 8002742:	e002      	b.n	800274a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002744:	2304      	movs	r3, #4
 8002746:	617b      	str	r3, [r7, #20]
        break;
 8002748:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800274a:	f7fe fef3 	bl	8001534 <HAL_GetTick>
 800274e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002750:	e01b      	b.n	800278a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002752:	f7fe feef 	bl	8001534 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b05      	cmp	r3, #5
 800275e:	d914      	bls.n	800278a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e007      	b.n	800279a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1dc      	bne.n	8002752 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	000cdbff 	.word	0x000cdbff

080027a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f8ef 	bl	8001998 <LL_ADC_IsEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d16e      	bne.n	800289e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b38      	ldr	r3, [pc, #224]	@ (80028a8 <ADC_Enable+0x100>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f043 0210 	orr.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e05a      	b.n	80028a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8aa 	bl	8001948 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fe9e 	bl	8001534 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2b      	ldr	r2, [pc, #172]	@ (80028ac <ADC_Enable+0x104>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <ADC_Enable+0x66>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a29      	ldr	r2, [pc, #164]	@ (80028b0 <ADC_Enable+0x108>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <ADC_Enable+0x6a>
 800280e:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <ADC_Enable+0x10c>)
 8002810:	e000      	b.n	8002814 <ADC_Enable+0x6c>
 8002812:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <ADC_Enable+0x110>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f83b 	bl	8001890 <LL_ADC_GetMultimode>
 800281a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a23      	ldr	r2, [pc, #140]	@ (80028b0 <ADC_Enable+0x108>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d002      	beq.n	800282c <ADC_Enable+0x84>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e000      	b.n	800282e <ADC_Enable+0x86>
 800282c:	4b1f      	ldr	r3, [pc, #124]	@ (80028ac <ADC_Enable+0x104>)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4293      	cmp	r3, r2
 8002834:	d02c      	beq.n	8002890 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d130      	bne.n	800289e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800283c:	e028      	b.n	8002890 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f8a8 	bl	8001998 <LL_ADC_IsEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f878 	bl	8001948 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002858:	f7fe fe6c 	bl	8001534 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d914      	bls.n	8002890 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d00d      	beq.n	8002890 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	f043 0210 	orr.w	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e007      	b.n	80028a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d1cf      	bne.n	800283e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	8000003f 	.word	0x8000003f
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022100 	.word	0x40022100
 80028b4:	40022300 	.word	0x40022300
 80028b8:	58026300 	.word	0x58026300

080028bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f878 	bl	80019be <LL_ADC_IsDisableOngoing>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f85f 	bl	8001998 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d047      	beq.n	8002970 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d144      	bne.n	8002970 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030d 	and.w	r3, r3, #13
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10c      	bne.n	800290e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f839 	bl	8001970 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2203      	movs	r2, #3
 8002904:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002906:	f7fe fe15 	bl	8001534 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290c:	e029      	b.n	8002962 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e023      	b.n	8002972 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292a:	f7fe fe03 	bl	8001534 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d914      	bls.n	8002962 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e007      	b.n	8002972 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1dc      	bne.n	800292a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d14b      	bne.n	8002a2c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d021      	beq.n	80029f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fecb 	bl	800174e <LL_ADC_REG_IsTriggerSourceSWStart>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d032      	beq.n	8002a24 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d12b      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11f      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80029f0:	e018      	b.n	8002a24 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7fd ff35 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a2a:	e00e      	b.n	8002a4a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7fd ff4b 	bl	80008d4 <HAL_ADC_ErrorCallback>
}
 8002a3e:	e004      	b.n	8002a4a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff faeb 	bl	800203c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7fd ff1d 	bl	80008d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7a      	ldr	r2, [pc, #488]	@ (8002c9c <ADC_ConfigureBoostMode+0x1f8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <ADC_ConfigureBoostMode+0x1c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a79      	ldr	r2, [pc, #484]	@ (8002ca0 <ADC_ConfigureBoostMode+0x1fc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d109      	bne.n	8002ad4 <ADC_ConfigureBoostMode+0x30>
 8002ac0:	4b78      	ldr	r3, [pc, #480]	@ (8002ca4 <ADC_ConfigureBoostMode+0x200>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e008      	b.n	8002ae6 <ADC_ConfigureBoostMode+0x42>
 8002ad4:	4b74      	ldr	r3, [pc, #464]	@ (8002ca8 <ADC_ConfigureBoostMode+0x204>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01c      	beq.n	8002b24 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aea:	f005 fb2d 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8002aee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002af8:	d010      	beq.n	8002b1c <ADC_ConfigureBoostMode+0x78>
 8002afa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002afe:	d873      	bhi.n	8002be8 <ADC_ConfigureBoostMode+0x144>
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d002      	beq.n	8002b0c <ADC_ConfigureBoostMode+0x68>
 8002b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b0a:	d16d      	bne.n	8002be8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	60fb      	str	r3, [r7, #12]
        break;
 8002b1a:	e068      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	60fb      	str	r3, [r7, #12]
        break;
 8002b22:	e064      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b24:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	f006 fdb4 	bl	8009698 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b3a:	d051      	beq.n	8002be0 <ADC_ConfigureBoostMode+0x13c>
 8002b3c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b40:	d854      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b42:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b46:	d047      	beq.n	8002bd8 <ADC_ConfigureBoostMode+0x134>
 8002b48:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b4c:	d84e      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b4e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b52:	d03d      	beq.n	8002bd0 <ADC_ConfigureBoostMode+0x12c>
 8002b54:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b58:	d848      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b5e:	d033      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0x124>
 8002b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b64:	d842      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b66:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b6a:	d029      	beq.n	8002bc0 <ADC_ConfigureBoostMode+0x11c>
 8002b6c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002b70:	d83c      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b72:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b76:	d01a      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b78:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002b7c:	d836      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b7e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b82:	d014      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b84:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002b88:	d830      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8e:	d00e      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b94:	d82a      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b9a:	d008      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002b9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ba0:	d824      	bhi.n	8002bec <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ba6:	d002      	beq.n	8002bae <ADC_ConfigureBoostMode+0x10a>
 8002ba8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002bac:	d11e      	bne.n	8002bec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
        break;
 8002bbe:	e016      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
        break;
 8002bc6:	e012      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	60fb      	str	r3, [r7, #12]
        break;
 8002bce:	e00e      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	60fb      	str	r3, [r7, #12]
        break;
 8002bd6:	e00a      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
        break;
 8002bde:	e006      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	60fb      	str	r3, [r7, #12]
        break;
 8002be6:	e002      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
        break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002bec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002bee:	f7fe fcd1 	bl	8001594 <HAL_GetREVID>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d815      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <ADC_ConfigureBoostMode+0x208>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d908      	bls.n	8002c16 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c14:	e03e      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	e035      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <ADC_ConfigureBoostMode+0x20c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d808      	bhi.n	8002c48 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	e025      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb4 <ADC_ConfigureBoostMode+0x210>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d80a      	bhi.n	8002c66 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	e016      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <ADC_ConfigureBoostMode+0x214>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d80a      	bhi.n	8002c84 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	e007      	b.n	8002c94 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022100 	.word	0x40022100
 8002ca4:	40022300 	.word	0x40022300
 8002ca8:	58026300 	.word	0x58026300
 8002cac:	01312d00 	.word	0x01312d00
 8002cb0:	005f5e10 	.word	0x005f5e10
 8002cb4:	00bebc20 	.word	0x00bebc20
 8002cb8:	017d7840 	.word	0x017d7840

08002cbc <__NVIC_SetPriorityGrouping>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	05fa0000 	.word	0x05fa0000

08002d04 <__NVIC_GetPriorityGrouping>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff4c 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3a:	f7ff ff63 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f7ff ffb3 	bl	8002db0 <NVIC_EncodePriority>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff82 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff56 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002e80:	f3bf 8f5f 	dmb	sy
}
 8002e84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <HAL_MPU_Disable+0x28>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	4a06      	ldr	r2, [pc, #24]	@ (8002ea4 <HAL_MPU_Disable+0x28>)
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e90:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_MPU_Disable+0x2c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	e000ed90 	.word	0xe000ed90

08002eac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <HAL_MPU_Enable+0x38>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_MPU_Enable+0x3c>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_MPU_Enable+0x3c>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002eca:	f3bf 8f4f 	dsb	sy
}
 8002ece:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ed0:	f3bf 8f6f 	isb	sy
}
 8002ed4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed90 	.word	0xe000ed90
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	785a      	ldrb	r2, [r3, #1]
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <HAL_MPU_ConfigRegion+0x7c>)
 8002efa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002efc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <HAL_MPU_ConfigRegion+0x7c>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4a19      	ldr	r2, [pc, #100]	@ (8002f68 <HAL_MPU_ConfigRegion+0x7c>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002f08:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <HAL_MPU_ConfigRegion+0x7c>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7b1b      	ldrb	r3, [r3, #12]
 8002f14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7adb      	ldrb	r3, [r3, #11]
 8002f1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7a9b      	ldrb	r3, [r3, #10]
 8002f22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7b5b      	ldrb	r3, [r3, #13]
 8002f2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7b9b      	ldrb	r3, [r3, #14]
 8002f32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7bdb      	ldrb	r3, [r3, #15]
 8002f3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7a5b      	ldrb	r3, [r3, #9]
 8002f42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7a1b      	ldrb	r3, [r3, #8]
 8002f4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f58:	6113      	str	r3, [r2, #16]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed90 	.word	0xe000ed90

08002f6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7fe fade 	bl	8001534 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e316      	b.n	80035b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a66      	ldr	r2, [pc, #408]	@ (8003124 <HAL_DMA_Init+0x1b8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d04a      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a65      	ldr	r2, [pc, #404]	@ (8003128 <HAL_DMA_Init+0x1bc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d045      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_DMA_Init+0x1c0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d040      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a62      	ldr	r2, [pc, #392]	@ (8003130 <HAL_DMA_Init+0x1c4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d03b      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a60      	ldr	r2, [pc, #384]	@ (8003134 <HAL_DMA_Init+0x1c8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d036      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5f      	ldr	r2, [pc, #380]	@ (8003138 <HAL_DMA_Init+0x1cc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d031      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	@ (800313c <HAL_DMA_Init+0x1d0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d02c      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5c      	ldr	r2, [pc, #368]	@ (8003140 <HAL_DMA_Init+0x1d4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d027      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_DMA_Init+0x1d8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d022      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a59      	ldr	r2, [pc, #356]	@ (8003148 <HAL_DMA_Init+0x1dc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d01d      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a57      	ldr	r2, [pc, #348]	@ (800314c <HAL_DMA_Init+0x1e0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d018      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a56      	ldr	r2, [pc, #344]	@ (8003150 <HAL_DMA_Init+0x1e4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a54      	ldr	r2, [pc, #336]	@ (8003154 <HAL_DMA_Init+0x1e8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a53      	ldr	r2, [pc, #332]	@ (8003158 <HAL_DMA_Init+0x1ec>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a51      	ldr	r2, [pc, #324]	@ (800315c <HAL_DMA_Init+0x1f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_DMA_Init+0xb8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a50      	ldr	r2, [pc, #320]	@ (8003160 <HAL_DMA_Init+0x1f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Init+0xbc>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_DMA_Init+0xbe>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 813b 	beq.w	80032a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a37      	ldr	r2, [pc, #220]	@ (8003124 <HAL_DMA_Init+0x1b8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04a      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a36      	ldr	r2, [pc, #216]	@ (8003128 <HAL_DMA_Init+0x1bc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d045      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a34      	ldr	r2, [pc, #208]	@ (800312c <HAL_DMA_Init+0x1c0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d040      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <HAL_DMA_Init+0x1c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d03b      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <HAL_DMA_Init+0x1c8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d036      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_DMA_Init+0x1cc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d031      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_DMA_Init+0x1d0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02c      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_DMA_Init+0x1d4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d027      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_DMA_Init+0x1d8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d022      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <HAL_DMA_Init+0x1dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d01d      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_DMA_Init+0x1e0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d018      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_DMA_Init+0x1e4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <HAL_DMA_Init+0x1e8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00e      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <HAL_DMA_Init+0x1ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d009      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_DMA_Init+0x1f0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_DMA_Init+0x174>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_DMA_Init+0x1f4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d108      	bne.n	80030f2 <HAL_DMA_Init+0x186>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_DMA_Init+0x196>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003102:	e02f      	b.n	8003164 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003104:	f7fe fa16 	bl	8001534 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b05      	cmp	r3, #5
 8003110:	d928      	bls.n	8003164 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2203      	movs	r2, #3
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e246      	b.n	80035b2 <HAL_DMA_Init+0x646>
 8003124:	40020010 	.word	0x40020010
 8003128:	40020028 	.word	0x40020028
 800312c:	40020040 	.word	0x40020040
 8003130:	40020058 	.word	0x40020058
 8003134:	40020070 	.word	0x40020070
 8003138:	40020088 	.word	0x40020088
 800313c:	400200a0 	.word	0x400200a0
 8003140:	400200b8 	.word	0x400200b8
 8003144:	40020410 	.word	0x40020410
 8003148:	40020428 	.word	0x40020428
 800314c:	40020440 	.word	0x40020440
 8003150:	40020458 	.word	0x40020458
 8003154:	40020470 	.word	0x40020470
 8003158:	40020488 	.word	0x40020488
 800315c:	400204a0 	.word	0x400204a0
 8003160:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1c8      	bne.n	8003104 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4b83      	ldr	r3, [pc, #524]	@ (800338c <HAL_DMA_Init+0x420>)
 800317e:	4013      	ands	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800318a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003196:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d107      	bne.n	80031c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	4313      	orrs	r3, r2
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80031c8:	4b71      	ldr	r3, [pc, #452]	@ (8003390 <HAL_DMA_Init+0x424>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b71      	ldr	r3, [pc, #452]	@ (8003394 <HAL_DMA_Init+0x428>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d4:	d328      	bcc.n	8003228 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b28      	cmp	r3, #40	@ 0x28
 80031dc:	d903      	bls.n	80031e6 <HAL_DMA_Init+0x27a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80031e4:	d917      	bls.n	8003216 <HAL_DMA_Init+0x2aa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80031ec:	d903      	bls.n	80031f6 <HAL_DMA_Init+0x28a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b42      	cmp	r3, #66	@ 0x42
 80031f4:	d90f      	bls.n	8003216 <HAL_DMA_Init+0x2aa>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b46      	cmp	r3, #70	@ 0x46
 80031fc:	d903      	bls.n	8003206 <HAL_DMA_Init+0x29a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b48      	cmp	r3, #72	@ 0x48
 8003204:	d907      	bls.n	8003216 <HAL_DMA_Init+0x2aa>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b4e      	cmp	r3, #78	@ 0x4e
 800320c:	d905      	bls.n	800321a <HAL_DMA_Init+0x2ae>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b52      	cmp	r3, #82	@ 0x52
 8003214:	d801      	bhi.n	800321a <HAL_DMA_Init+0x2ae>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_DMA_Init+0x2b0>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003226:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	2b04      	cmp	r3, #4
 8003250:	d117      	bne.n	8003282 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f002 f8ed 	bl	8005444 <DMA_CheckFifoParam>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2240      	movs	r2, #64	@ 0x40
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e197      	b.n	80035b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f002 f828 	bl	80052e0 <DMA_CalcBaseAndBitshift>
 8003290:	4603      	mov	r3, r0
 8003292:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	223f      	movs	r2, #63	@ 0x3f
 800329e:	409a      	lsls	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	e0cd      	b.n	8003442 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003398 <HAL_DMA_Init+0x42c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a39      	ldr	r2, [pc, #228]	@ (800339c <HAL_DMA_Init+0x430>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a38      	ldr	r2, [pc, #224]	@ (80033a0 <HAL_DMA_Init+0x434>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a36      	ldr	r2, [pc, #216]	@ (80033a4 <HAL_DMA_Init+0x438>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a35      	ldr	r2, [pc, #212]	@ (80033a8 <HAL_DMA_Init+0x43c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	@ (80033ac <HAL_DMA_Init+0x440>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <HAL_DMA_Init+0x444>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_DMA_Init+0x38a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a30      	ldr	r2, [pc, #192]	@ (80033b4 <HAL_DMA_Init+0x448>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_DMA_Init+0x38e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_DMA_Init+0x390>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a24      	ldr	r2, [pc, #144]	@ (8003398 <HAL_DMA_Init+0x42c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d021      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <HAL_DMA_Init+0x430>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01c      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <HAL_DMA_Init+0x434>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d017      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_DMA_Init+0x438>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d012      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_DMA_Init+0x43c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00d      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_DMA_Init+0x440>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d008      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_DMA_Init+0x444>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <HAL_DMA_Init+0x3e4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <HAL_DMA_Init+0x448>)
 800334e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <HAL_DMA_Init+0x44c>)
 800336c:	4013      	ands	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	d021      	beq.n	80033bc <HAL_DMA_Init+0x450>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b80      	cmp	r3, #128	@ 0x80
 800337e:	d102      	bne.n	8003386 <HAL_DMA_Init+0x41a>
 8003380:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003384:	e01b      	b.n	80033be <HAL_DMA_Init+0x452>
 8003386:	2300      	movs	r3, #0
 8003388:	e019      	b.n	80033be <HAL_DMA_Init+0x452>
 800338a:	bf00      	nop
 800338c:	fe10803f 	.word	0xfe10803f
 8003390:	5c001000 	.word	0x5c001000
 8003394:	ffff0000 	.word	0xffff0000
 8003398:	58025408 	.word	0x58025408
 800339c:	5802541c 	.word	0x5802541c
 80033a0:	58025430 	.word	0x58025430
 80033a4:	58025444 	.word	0x58025444
 80033a8:	58025458 	.word	0x58025458
 80033ac:	5802546c 	.word	0x5802546c
 80033b0:	58025480 	.word	0x58025480
 80033b4:	58025494 	.word	0x58025494
 80033b8:	fffe000f 	.word	0xfffe000f
 80033bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4b6e      	ldr	r3, [pc, #440]	@ (80035bc <HAL_DMA_Init+0x650>)
 8003404:	4413      	add	r3, r2
 8003406:	4a6e      	ldr	r2, [pc, #440]	@ (80035c0 <HAL_DMA_Init+0x654>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	009a      	lsls	r2, r3, #2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f001 ff63 	bl	80052e0 <DMA_CalcBaseAndBitshift>
 800341a:	4603      	mov	r3, r0
 800341c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2201      	movs	r2, #1
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e008      	b.n	8003442 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0b7      	b.n	80035b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5f      	ldr	r2, [pc, #380]	@ (80035c4 <HAL_DMA_Init+0x658>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d072      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	@ (80035c8 <HAL_DMA_Init+0x65c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d06d      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5c      	ldr	r2, [pc, #368]	@ (80035cc <HAL_DMA_Init+0x660>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d068      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5a      	ldr	r2, [pc, #360]	@ (80035d0 <HAL_DMA_Init+0x664>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d063      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a59      	ldr	r2, [pc, #356]	@ (80035d4 <HAL_DMA_Init+0x668>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d05e      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a57      	ldr	r2, [pc, #348]	@ (80035d8 <HAL_DMA_Init+0x66c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d059      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_DMA_Init+0x670>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d054      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a54      	ldr	r2, [pc, #336]	@ (80035e0 <HAL_DMA_Init+0x674>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04f      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a53      	ldr	r2, [pc, #332]	@ (80035e4 <HAL_DMA_Init+0x678>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a51      	ldr	r2, [pc, #324]	@ (80035e8 <HAL_DMA_Init+0x67c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a50      	ldr	r2, [pc, #320]	@ (80035ec <HAL_DMA_Init+0x680>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	@ (80035f0 <HAL_DMA_Init+0x684>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a4d      	ldr	r2, [pc, #308]	@ (80035f4 <HAL_DMA_Init+0x688>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	@ (80035f8 <HAL_DMA_Init+0x68c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4a      	ldr	r2, [pc, #296]	@ (80035fc <HAL_DMA_Init+0x690>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_DMA_Init+0x694>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a47      	ldr	r2, [pc, #284]	@ (8003604 <HAL_DMA_Init+0x698>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <HAL_DMA_Init+0x69c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a44      	ldr	r2, [pc, #272]	@ (800360c <HAL_DMA_Init+0x6a0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a42      	ldr	r2, [pc, #264]	@ (8003610 <HAL_DMA_Init+0x6a4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a41      	ldr	r2, [pc, #260]	@ (8003614 <HAL_DMA_Init+0x6a8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a3f      	ldr	r2, [pc, #252]	@ (8003618 <HAL_DMA_Init+0x6ac>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3e      	ldr	r2, [pc, #248]	@ (800361c <HAL_DMA_Init+0x6b0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Init+0x5c6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a3c      	ldr	r2, [pc, #240]	@ (8003620 <HAL_DMA_Init+0x6b4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_DMA_Init+0x5ca>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_DMA_Init+0x5cc>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d032      	beq.n	80035a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f001 fffd 	bl	800553c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b80      	cmp	r3, #128	@ 0x80
 8003548:	d102      	bne.n	8003550 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003564:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_DMA_Init+0x624>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d80c      	bhi.n	8003590 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f002 f87a 	bl	8005670 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	e008      	b.n	80035a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	a7fdabf8 	.word	0xa7fdabf8
 80035c0:	cccccccd 	.word	0xcccccccd
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	58025408 	.word	0x58025408
 8003608:	5802541c 	.word	0x5802541c
 800360c:	58025430 	.word	0x58025430
 8003610:	58025444 	.word	0x58025444
 8003614:	58025458 	.word	0x58025458
 8003618:	5802546c 	.word	0x5802546c
 800361c:	58025480 	.word	0x58025480
 8003620:	58025494 	.word	0x58025494

08003624 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e226      	b.n	8003a8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_DMA_Start_IT+0x2a>
 800364a:	2302      	movs	r3, #2
 800364c:	e21f      	b.n	8003a8e <HAL_DMA_Start_IT+0x46a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	f040 820a 	bne.w	8003a78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a68      	ldr	r2, [pc, #416]	@ (8003818 <HAL_DMA_Start_IT+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a66      	ldr	r2, [pc, #408]	@ (800381c <HAL_DMA_Start_IT+0x1f8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a65      	ldr	r2, [pc, #404]	@ (8003820 <HAL_DMA_Start_IT+0x1fc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a63      	ldr	r2, [pc, #396]	@ (8003824 <HAL_DMA_Start_IT+0x200>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a62      	ldr	r2, [pc, #392]	@ (8003828 <HAL_DMA_Start_IT+0x204>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a60      	ldr	r2, [pc, #384]	@ (800382c <HAL_DMA_Start_IT+0x208>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003830 <HAL_DMA_Start_IT+0x20c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003834 <HAL_DMA_Start_IT+0x210>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003838 <HAL_DMA_Start_IT+0x214>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5a      	ldr	r2, [pc, #360]	@ (800383c <HAL_DMA_Start_IT+0x218>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a59      	ldr	r2, [pc, #356]	@ (8003840 <HAL_DMA_Start_IT+0x21c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a57      	ldr	r2, [pc, #348]	@ (8003844 <HAL_DMA_Start_IT+0x220>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a56      	ldr	r2, [pc, #344]	@ (8003848 <HAL_DMA_Start_IT+0x224>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a54      	ldr	r2, [pc, #336]	@ (800384c <HAL_DMA_Start_IT+0x228>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <HAL_DMA_Start_IT+0x22c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_Start_IT+0xee>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a51      	ldr	r2, [pc, #324]	@ (8003854 <HAL_DMA_Start_IT+0x230>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <HAL_DMA_Start_IT+0x100>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e007      	b.n	8003734 <HAL_DMA_Start_IT+0x110>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f001 fc24 	bl	8004f88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a34      	ldr	r2, [pc, #208]	@ (8003818 <HAL_DMA_Start_IT+0x1f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d04a      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a33      	ldr	r2, [pc, #204]	@ (800381c <HAL_DMA_Start_IT+0x1f8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d045      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a31      	ldr	r2, [pc, #196]	@ (8003820 <HAL_DMA_Start_IT+0x1fc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d040      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a30      	ldr	r2, [pc, #192]	@ (8003824 <HAL_DMA_Start_IT+0x200>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d03b      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <HAL_DMA_Start_IT+0x204>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d036      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <HAL_DMA_Start_IT+0x208>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d031      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_DMA_Start_IT+0x20c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02c      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <HAL_DMA_Start_IT+0x210>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d027      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <HAL_DMA_Start_IT+0x214>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a27      	ldr	r2, [pc, #156]	@ (800383c <HAL_DMA_Start_IT+0x218>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01d      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <HAL_DMA_Start_IT+0x21c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <HAL_DMA_Start_IT+0x220>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a22      	ldr	r2, [pc, #136]	@ (8003848 <HAL_DMA_Start_IT+0x224>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a21      	ldr	r2, [pc, #132]	@ (800384c <HAL_DMA_Start_IT+0x228>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_DMA_Start_IT+0x22c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_DMA_Start_IT+0x1bc>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_DMA_Start_IT+0x230>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_Start_IT+0x1c0>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_Start_IT+0x1c2>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d036      	beq.n	8003858 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 021e 	bic.w	r2, r3, #30
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0216 	orr.w	r2, r2, #22
 80037fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03e      	beq.n	8003884 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e035      	b.n	8003884 <HAL_DMA_Start_IT+0x260>
 8003818:	40020010 	.word	0x40020010
 800381c:	40020028 	.word	0x40020028
 8003820:	40020040 	.word	0x40020040
 8003824:	40020058 	.word	0x40020058
 8003828:	40020070 	.word	0x40020070
 800382c:	40020088 	.word	0x40020088
 8003830:	400200a0 	.word	0x400200a0
 8003834:	400200b8 	.word	0x400200b8
 8003838:	40020410 	.word	0x40020410
 800383c:	40020428 	.word	0x40020428
 8003840:	40020440 	.word	0x40020440
 8003844:	40020458 	.word	0x40020458
 8003848:	40020470 	.word	0x40020470
 800384c:	40020488 	.word	0x40020488
 8003850:	400204a0 	.word	0x400204a0
 8003854:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020e 	bic.w	r2, r3, #14
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 020a 	orr.w	r2, r2, #10
 800386a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0204 	orr.w	r2, r2, #4
 8003882:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a83      	ldr	r2, [pc, #524]	@ (8003a98 <HAL_DMA_Start_IT+0x474>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d072      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a82      	ldr	r2, [pc, #520]	@ (8003a9c <HAL_DMA_Start_IT+0x478>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d06d      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a80      	ldr	r2, [pc, #512]	@ (8003aa0 <HAL_DMA_Start_IT+0x47c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d068      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa4 <HAL_DMA_Start_IT+0x480>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d063      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a7d      	ldr	r2, [pc, #500]	@ (8003aa8 <HAL_DMA_Start_IT+0x484>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d05e      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7c      	ldr	r2, [pc, #496]	@ (8003aac <HAL_DMA_Start_IT+0x488>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d059      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ab0 <HAL_DMA_Start_IT+0x48c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d054      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a79      	ldr	r2, [pc, #484]	@ (8003ab4 <HAL_DMA_Start_IT+0x490>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04f      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a77      	ldr	r2, [pc, #476]	@ (8003ab8 <HAL_DMA_Start_IT+0x494>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a76      	ldr	r2, [pc, #472]	@ (8003abc <HAL_DMA_Start_IT+0x498>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a74      	ldr	r2, [pc, #464]	@ (8003ac0 <HAL_DMA_Start_IT+0x49c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a73      	ldr	r2, [pc, #460]	@ (8003ac4 <HAL_DMA_Start_IT+0x4a0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a71      	ldr	r2, [pc, #452]	@ (8003ac8 <HAL_DMA_Start_IT+0x4a4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a70      	ldr	r2, [pc, #448]	@ (8003acc <HAL_DMA_Start_IT+0x4a8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad0 <HAL_DMA_Start_IT+0x4ac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ad4 <HAL_DMA_Start_IT+0x4b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6b      	ldr	r2, [pc, #428]	@ (8003ad8 <HAL_DMA_Start_IT+0x4b4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6a      	ldr	r2, [pc, #424]	@ (8003adc <HAL_DMA_Start_IT+0x4b8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a68      	ldr	r2, [pc, #416]	@ (8003ae0 <HAL_DMA_Start_IT+0x4bc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a67      	ldr	r2, [pc, #412]	@ (8003ae4 <HAL_DMA_Start_IT+0x4c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_DMA_Start_IT+0x4c4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a64      	ldr	r2, [pc, #400]	@ (8003aec <HAL_DMA_Start_IT+0x4c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_DMA_Start_IT+0x4cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_Start_IT+0x350>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a61      	ldr	r2, [pc, #388]	@ (8003af4 <HAL_DMA_Start_IT+0x4d0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_DMA_Start_IT+0x354>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_DMA_Start_IT+0x356>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a37      	ldr	r2, [pc, #220]	@ (8003a98 <HAL_DMA_Start_IT+0x474>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d04a      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a36      	ldr	r2, [pc, #216]	@ (8003a9c <HAL_DMA_Start_IT+0x478>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d045      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a34      	ldr	r2, [pc, #208]	@ (8003aa0 <HAL_DMA_Start_IT+0x47c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d040      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a33      	ldr	r2, [pc, #204]	@ (8003aa4 <HAL_DMA_Start_IT+0x480>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d03b      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <HAL_DMA_Start_IT+0x484>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d036      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a30      	ldr	r2, [pc, #192]	@ (8003aac <HAL_DMA_Start_IT+0x488>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d031      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab0 <HAL_DMA_Start_IT+0x48c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02c      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab4 <HAL_DMA_Start_IT+0x490>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d027      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab8 <HAL_DMA_Start_IT+0x494>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d022      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <HAL_DMA_Start_IT+0x498>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d01d      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <HAL_DMA_Start_IT+0x49c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <HAL_DMA_Start_IT+0x4a0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a25      	ldr	r2, [pc, #148]	@ (8003ac8 <HAL_DMA_Start_IT+0x4a4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a24      	ldr	r2, [pc, #144]	@ (8003acc <HAL_DMA_Start_IT+0x4a8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <HAL_DMA_Start_IT+0x4ac>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_DMA_Start_IT+0x430>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ad4 <HAL_DMA_Start_IT+0x4b0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d108      	bne.n	8003a66 <HAL_DMA_Start_IT+0x442>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e012      	b.n	8003a8c <HAL_DMA_Start_IT+0x468>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e009      	b.n	8003a8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494

08003af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7fd fd18 	bl	8001534 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e2dc      	b.n	80040ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d008      	beq.n	8003b2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2280      	movs	r2, #128	@ 0x80
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e2cd      	b.n	80040ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a76      	ldr	r2, [pc, #472]	@ (8003d0c <HAL_DMA_Abort+0x214>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04a      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a74      	ldr	r2, [pc, #464]	@ (8003d10 <HAL_DMA_Abort+0x218>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d045      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a73      	ldr	r2, [pc, #460]	@ (8003d14 <HAL_DMA_Abort+0x21c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d040      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a71      	ldr	r2, [pc, #452]	@ (8003d18 <HAL_DMA_Abort+0x220>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d03b      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a70      	ldr	r2, [pc, #448]	@ (8003d1c <HAL_DMA_Abort+0x224>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d036      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6e      	ldr	r2, [pc, #440]	@ (8003d20 <HAL_DMA_Abort+0x228>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d031      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d24 <HAL_DMA_Abort+0x22c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d02c      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6b      	ldr	r2, [pc, #428]	@ (8003d28 <HAL_DMA_Abort+0x230>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6a      	ldr	r2, [pc, #424]	@ (8003d2c <HAL_DMA_Abort+0x234>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a68      	ldr	r2, [pc, #416]	@ (8003d30 <HAL_DMA_Abort+0x238>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a67      	ldr	r2, [pc, #412]	@ (8003d34 <HAL_DMA_Abort+0x23c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a65      	ldr	r2, [pc, #404]	@ (8003d38 <HAL_DMA_Abort+0x240>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a64      	ldr	r2, [pc, #400]	@ (8003d3c <HAL_DMA_Abort+0x244>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a62      	ldr	r2, [pc, #392]	@ (8003d40 <HAL_DMA_Abort+0x248>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a61      	ldr	r2, [pc, #388]	@ (8003d44 <HAL_DMA_Abort+0x24c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_DMA_Abort+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003d48 <HAL_DMA_Abort+0x250>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_DMA_Abort+0xda>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMA_Abort+0xdc>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 021e 	bic.w	r2, r2, #30
 8003be6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e00a      	b.n	8003c16 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 020e 	bic.w	r2, r2, #14
 8003c0e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d0c <HAL_DMA_Abort+0x214>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d072      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3a      	ldr	r2, [pc, #232]	@ (8003d10 <HAL_DMA_Abort+0x218>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d06d      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a39      	ldr	r2, [pc, #228]	@ (8003d14 <HAL_DMA_Abort+0x21c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d068      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a37      	ldr	r2, [pc, #220]	@ (8003d18 <HAL_DMA_Abort+0x220>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d063      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a36      	ldr	r2, [pc, #216]	@ (8003d1c <HAL_DMA_Abort+0x224>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d05e      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a34      	ldr	r2, [pc, #208]	@ (8003d20 <HAL_DMA_Abort+0x228>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d059      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a33      	ldr	r2, [pc, #204]	@ (8003d24 <HAL_DMA_Abort+0x22c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d054      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a31      	ldr	r2, [pc, #196]	@ (8003d28 <HAL_DMA_Abort+0x230>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04f      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a30      	ldr	r2, [pc, #192]	@ (8003d2c <HAL_DMA_Abort+0x234>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <HAL_DMA_Abort+0x238>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d34 <HAL_DMA_Abort+0x23c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2b      	ldr	r2, [pc, #172]	@ (8003d38 <HAL_DMA_Abort+0x240>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2a      	ldr	r2, [pc, #168]	@ (8003d3c <HAL_DMA_Abort+0x244>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a28      	ldr	r2, [pc, #160]	@ (8003d40 <HAL_DMA_Abort+0x248>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a27      	ldr	r2, [pc, #156]	@ (8003d44 <HAL_DMA_Abort+0x24c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a25      	ldr	r2, [pc, #148]	@ (8003d48 <HAL_DMA_Abort+0x250>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a24      	ldr	r2, [pc, #144]	@ (8003d4c <HAL_DMA_Abort+0x254>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a22      	ldr	r2, [pc, #136]	@ (8003d50 <HAL_DMA_Abort+0x258>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a21      	ldr	r2, [pc, #132]	@ (8003d54 <HAL_DMA_Abort+0x25c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_DMA_Abort+0x260>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_DMA_Abort+0x264>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_DMA_Abort+0x268>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_DMA_Abort+0x26c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_Abort+0x20e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_DMA_Abort+0x270>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d132      	bne.n	8003d6c <HAL_DMA_Abort+0x274>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e031      	b.n	8003d6e <HAL_DMA_Abort+0x276>
 8003d0a:	bf00      	nop
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	58025408 	.word	0x58025408
 8003d50:	5802541c 	.word	0x5802541c
 8003d54:	58025430 	.word	0x58025430
 8003d58:	58025444 	.word	0x58025444
 8003d5c:	58025458 	.word	0x58025458
 8003d60:	5802546c 	.word	0x5802546c
 8003d64:	58025480 	.word	0x58025480
 8003d68:	58025494 	.word	0x58025494
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6d      	ldr	r2, [pc, #436]	@ (8003f3c <HAL_DMA_Abort+0x444>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	@ (8003f40 <HAL_DMA_Abort+0x448>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003f44 <HAL_DMA_Abort+0x44c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	@ (8003f48 <HAL_DMA_Abort+0x450>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <HAL_DMA_Abort+0x454>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a65      	ldr	r2, [pc, #404]	@ (8003f50 <HAL_DMA_Abort+0x458>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a64      	ldr	r2, [pc, #400]	@ (8003f54 <HAL_DMA_Abort+0x45c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a62      	ldr	r2, [pc, #392]	@ (8003f58 <HAL_DMA_Abort+0x460>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a61      	ldr	r2, [pc, #388]	@ (8003f5c <HAL_DMA_Abort+0x464>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f60 <HAL_DMA_Abort+0x468>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a5e      	ldr	r2, [pc, #376]	@ (8003f64 <HAL_DMA_Abort+0x46c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f68 <HAL_DMA_Abort+0x470>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8003f6c <HAL_DMA_Abort+0x474>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a59      	ldr	r2, [pc, #356]	@ (8003f70 <HAL_DMA_Abort+0x478>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a58      	ldr	r2, [pc, #352]	@ (8003f74 <HAL_DMA_Abort+0x47c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_Abort+0x32a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a56      	ldr	r2, [pc, #344]	@ (8003f78 <HAL_DMA_Abort+0x480>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <HAL_DMA_Abort+0x33c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e007      	b.n	8003e44 <HAL_DMA_Abort+0x34c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e44:	e013      	b.n	8003e6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e46:	f7fd fb75 	bl	8001534 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d90c      	bls.n	8003e6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e12d      	b.n	80040ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f3c <HAL_DMA_Abort+0x444>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d04a      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	@ (8003f40 <HAL_DMA_Abort+0x448>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d045      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_DMA_Abort+0x44c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d040      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <HAL_DMA_Abort+0x450>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d03b      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	@ (8003f4c <HAL_DMA_Abort+0x454>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d036      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <HAL_DMA_Abort+0x458>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	@ (8003f54 <HAL_DMA_Abort+0x45c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d02c      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	@ (8003f58 <HAL_DMA_Abort+0x460>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d027      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a23      	ldr	r2, [pc, #140]	@ (8003f5c <HAL_DMA_Abort+0x464>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <HAL_DMA_Abort+0x468>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01d      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	@ (8003f64 <HAL_DMA_Abort+0x46c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <HAL_DMA_Abort+0x470>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f6c <HAL_DMA_Abort+0x474>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_DMA_Abort+0x478>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f74 <HAL_DMA_Abort+0x47c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_DMA_Abort+0x422>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <HAL_DMA_Abort+0x480>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_Abort+0x426>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_DMA_Abort+0x428>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02b      	beq.n	8003f7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	223f      	movs	r2, #63	@ 0x3f
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	e02a      	b.n	8003f92 <HAL_DMA_Abort+0x49a>
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a4f      	ldr	r2, [pc, #316]	@ (80040d4 <HAL_DMA_Abort+0x5dc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d072      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80040d8 <HAL_DMA_Abort+0x5e0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d06d      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4c      	ldr	r2, [pc, #304]	@ (80040dc <HAL_DMA_Abort+0x5e4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d068      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80040e0 <HAL_DMA_Abort+0x5e8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d063      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a49      	ldr	r2, [pc, #292]	@ (80040e4 <HAL_DMA_Abort+0x5ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d05e      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <HAL_DMA_Abort+0x5f0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d059      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a46      	ldr	r2, [pc, #280]	@ (80040ec <HAL_DMA_Abort+0x5f4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d054      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a44      	ldr	r2, [pc, #272]	@ (80040f0 <HAL_DMA_Abort+0x5f8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d04f      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a43      	ldr	r2, [pc, #268]	@ (80040f4 <HAL_DMA_Abort+0x5fc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d04a      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a41      	ldr	r2, [pc, #260]	@ (80040f8 <HAL_DMA_Abort+0x600>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d045      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a40      	ldr	r2, [pc, #256]	@ (80040fc <HAL_DMA_Abort+0x604>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d040      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a3e      	ldr	r2, [pc, #248]	@ (8004100 <HAL_DMA_Abort+0x608>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d03b      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a3d      	ldr	r2, [pc, #244]	@ (8004104 <HAL_DMA_Abort+0x60c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d036      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3b      	ldr	r2, [pc, #236]	@ (8004108 <HAL_DMA_Abort+0x610>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3a      	ldr	r2, [pc, #232]	@ (800410c <HAL_DMA_Abort+0x614>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d02c      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a38      	ldr	r2, [pc, #224]	@ (8004110 <HAL_DMA_Abort+0x618>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d027      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a37      	ldr	r2, [pc, #220]	@ (8004114 <HAL_DMA_Abort+0x61c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <HAL_DMA_Abort+0x620>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a34      	ldr	r2, [pc, #208]	@ (800411c <HAL_DMA_Abort+0x624>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a32      	ldr	r2, [pc, #200]	@ (8004120 <HAL_DMA_Abort+0x628>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a31      	ldr	r2, [pc, #196]	@ (8004124 <HAL_DMA_Abort+0x62c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <HAL_DMA_Abort+0x630>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2e      	ldr	r2, [pc, #184]	@ (800412c <HAL_DMA_Abort+0x634>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_Abort+0x58a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <HAL_DMA_Abort+0x638>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_DMA_Abort+0x58e>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_DMA_Abort+0x590>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004094:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8
 8004114:	58025408 	.word	0x58025408
 8004118:	5802541c 	.word	0x5802541c
 800411c:	58025430 	.word	0x58025430
 8004120:	58025444 	.word	0x58025444
 8004124:	58025458 	.word	0x58025458
 8004128:	5802546c 	.word	0x5802546c
 800412c:	58025480 	.word	0x58025480
 8004130:	58025494 	.word	0x58025494

08004134 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004140:	4b67      	ldr	r3, [pc, #412]	@ (80042e0 <HAL_DMA_IRQHandler+0x1ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a67      	ldr	r2, [pc, #412]	@ (80042e4 <HAL_DMA_IRQHandler+0x1b0>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	0a9b      	lsrs	r3, r3, #10
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004158:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5f      	ldr	r2, [pc, #380]	@ (80042e8 <HAL_DMA_IRQHandler+0x1b4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5d      	ldr	r2, [pc, #372]	@ (80042ec <HAL_DMA_IRQHandler+0x1b8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5c      	ldr	r2, [pc, #368]	@ (80042f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5a      	ldr	r2, [pc, #360]	@ (80042f4 <HAL_DMA_IRQHandler+0x1c0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a59      	ldr	r2, [pc, #356]	@ (80042f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a57      	ldr	r2, [pc, #348]	@ (80042fc <HAL_DMA_IRQHandler+0x1c8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_DMA_IRQHandler+0x1cc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a54      	ldr	r2, [pc, #336]	@ (8004304 <HAL_DMA_IRQHandler+0x1d0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a53      	ldr	r2, [pc, #332]	@ (8004308 <HAL_DMA_IRQHandler+0x1d4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a51      	ldr	r2, [pc, #324]	@ (800430c <HAL_DMA_IRQHandler+0x1d8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <HAL_DMA_IRQHandler+0x1dc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004314 <HAL_DMA_IRQHandler+0x1e0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004318 <HAL_DMA_IRQHandler+0x1e4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a4b      	ldr	r2, [pc, #300]	@ (800431c <HAL_DMA_IRQHandler+0x1e8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004320 <HAL_DMA_IRQHandler+0x1ec>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_IRQHandler+0xd2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a48      	ldr	r2, [pc, #288]	@ (8004324 <HAL_DMA_IRQHandler+0x1f0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_DMA_IRQHandler+0xd6>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_DMA_IRQHandler+0xd8>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 842b 	beq.w	8004a68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2208      	movs	r2, #8
 800421c:	409a      	lsls	r2, r3
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a2 	beq.w	800436c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2e      	ldr	r2, [pc, #184]	@ (80042e8 <HAL_DMA_IRQHandler+0x1b4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d04a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <HAL_DMA_IRQHandler+0x1b8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d045      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2b      	ldr	r2, [pc, #172]	@ (80042f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d040      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_DMA_IRQHandler+0x1c0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d03b      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a27      	ldr	r2, [pc, #156]	@ (80042fc <HAL_DMA_IRQHandler+0x1c8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d031      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a25      	ldr	r2, [pc, #148]	@ (8004300 <HAL_DMA_IRQHandler+0x1cc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d02c      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <HAL_DMA_IRQHandler+0x1d0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <HAL_DMA_IRQHandler+0x1d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HAL_DMA_IRQHandler+0x1d8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d01d      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <HAL_DMA_IRQHandler+0x1dc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d018      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_DMA_IRQHandler+0x1e0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <HAL_DMA_IRQHandler+0x1e4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00e      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1b      	ldr	r2, [pc, #108]	@ (800431c <HAL_DMA_IRQHandler+0x1e8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a19      	ldr	r2, [pc, #100]	@ (8004320 <HAL_DMA_IRQHandler+0x1ec>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x194>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_DMA_IRQHandler+0x1f0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d12f      	bne.n	8004328 <HAL_DMA_IRQHandler+0x1f4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e02e      	b.n	800433c <HAL_DMA_IRQHandler+0x208>
 80042de:	bf00      	nop
 80042e0:	24000000 	.word	0x24000000
 80042e4:	1b4e81b5 	.word	0x1b4e81b5
 80042e8:	40020010 	.word	0x40020010
 80042ec:	40020028 	.word	0x40020028
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020058 	.word	0x40020058
 80042f8:	40020070 	.word	0x40020070
 80042fc:	40020088 	.word	0x40020088
 8004300:	400200a0 	.word	0x400200a0
 8004304:	400200b8 	.word	0x400200b8
 8004308:	40020410 	.word	0x40020410
 800430c:	40020428 	.word	0x40020428
 8004310:	40020440 	.word	0x40020440
 8004314:	40020458 	.word	0x40020458
 8004318:	40020470 	.word	0x40020470
 800431c:	40020488 	.word	0x40020488
 8004320:	400204a0 	.word	0x400204a0
 8004324:	400204b8 	.word	0x400204b8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2208      	movs	r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d06e      	beq.n	8004460 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a69      	ldr	r2, [pc, #420]	@ (800452c <HAL_DMA_IRQHandler+0x3f8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04a      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a67      	ldr	r2, [pc, #412]	@ (8004530 <HAL_DMA_IRQHandler+0x3fc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d045      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a66      	ldr	r2, [pc, #408]	@ (8004534 <HAL_DMA_IRQHandler+0x400>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a64      	ldr	r2, [pc, #400]	@ (8004538 <HAL_DMA_IRQHandler+0x404>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d03b      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a63      	ldr	r2, [pc, #396]	@ (800453c <HAL_DMA_IRQHandler+0x408>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d036      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a61      	ldr	r2, [pc, #388]	@ (8004540 <HAL_DMA_IRQHandler+0x40c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a60      	ldr	r2, [pc, #384]	@ (8004544 <HAL_DMA_IRQHandler+0x410>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004548 <HAL_DMA_IRQHandler+0x414>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5d      	ldr	r2, [pc, #372]	@ (800454c <HAL_DMA_IRQHandler+0x418>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004550 <HAL_DMA_IRQHandler+0x41c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01d      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004554 <HAL_DMA_IRQHandler+0x420>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a58      	ldr	r2, [pc, #352]	@ (8004558 <HAL_DMA_IRQHandler+0x424>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a57      	ldr	r2, [pc, #348]	@ (800455c <HAL_DMA_IRQHandler+0x428>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a55      	ldr	r2, [pc, #340]	@ (8004560 <HAL_DMA_IRQHandler+0x42c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a54      	ldr	r2, [pc, #336]	@ (8004564 <HAL_DMA_IRQHandler+0x430>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_DMA_IRQHandler+0x2ee>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a52      	ldr	r2, [pc, #328]	@ (8004568 <HAL_DMA_IRQHandler+0x434>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10a      	bne.n	8004438 <HAL_DMA_IRQHandler+0x304>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e003      	b.n	8004440 <HAL_DMA_IRQHandler+0x30c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004458:	f043 0202 	orr.w	r2, r3, #2
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2204      	movs	r2, #4
 800446a:	409a      	lsls	r2, r3
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 808f 	beq.w	8004594 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <HAL_DMA_IRQHandler+0x3f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d04a      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2a      	ldr	r2, [pc, #168]	@ (8004530 <HAL_DMA_IRQHandler+0x3fc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d045      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a29      	ldr	r2, [pc, #164]	@ (8004534 <HAL_DMA_IRQHandler+0x400>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d040      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a27      	ldr	r2, [pc, #156]	@ (8004538 <HAL_DMA_IRQHandler+0x404>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d03b      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_DMA_IRQHandler+0x408>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d036      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a24      	ldr	r2, [pc, #144]	@ (8004540 <HAL_DMA_IRQHandler+0x40c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d031      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a23      	ldr	r2, [pc, #140]	@ (8004544 <HAL_DMA_IRQHandler+0x410>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d02c      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <HAL_DMA_IRQHandler+0x414>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d027      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a20      	ldr	r2, [pc, #128]	@ (800454c <HAL_DMA_IRQHandler+0x418>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <HAL_DMA_IRQHandler+0x41c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01d      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_DMA_IRQHandler+0x420>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_DMA_IRQHandler+0x424>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <HAL_DMA_IRQHandler+0x428>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_DMA_IRQHandler+0x42c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <HAL_DMA_IRQHandler+0x430>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_DMA_IRQHandler+0x3e2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <HAL_DMA_IRQHandler+0x434>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d12a      	bne.n	800456c <HAL_DMA_IRQHandler+0x438>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e023      	b.n	8004574 <HAL_DMA_IRQHandler+0x440>
 800452c:	40020010 	.word	0x40020010
 8004530:	40020028 	.word	0x40020028
 8004534:	40020040 	.word	0x40020040
 8004538:	40020058 	.word	0x40020058
 800453c:	40020070 	.word	0x40020070
 8004540:	40020088 	.word	0x40020088
 8004544:	400200a0 	.word	0x400200a0
 8004548:	400200b8 	.word	0x400200b8
 800454c:	40020410 	.word	0x40020410
 8004550:	40020428 	.word	0x40020428
 8004554:	40020440 	.word	0x40020440
 8004558:	40020458 	.word	0x40020458
 800455c:	40020470 	.word	0x40020470
 8004560:	40020488 	.word	0x40020488
 8004564:	400204a0 	.word	0x400204a0
 8004568:	400204b8 	.word	0x400204b8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2204      	movs	r2, #4
 8004582:	409a      	lsls	r2, r3
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2210      	movs	r2, #16
 800459e:	409a      	lsls	r2, r3
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a6 	beq.w	80046f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a85      	ldr	r2, [pc, #532]	@ (80047c4 <HAL_DMA_IRQHandler+0x690>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d04a      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a83      	ldr	r2, [pc, #524]	@ (80047c8 <HAL_DMA_IRQHandler+0x694>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d045      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a82      	ldr	r2, [pc, #520]	@ (80047cc <HAL_DMA_IRQHandler+0x698>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d040      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a80      	ldr	r2, [pc, #512]	@ (80047d0 <HAL_DMA_IRQHandler+0x69c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d03b      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7f      	ldr	r2, [pc, #508]	@ (80047d4 <HAL_DMA_IRQHandler+0x6a0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d036      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7d      	ldr	r2, [pc, #500]	@ (80047d8 <HAL_DMA_IRQHandler+0x6a4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d031      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7c      	ldr	r2, [pc, #496]	@ (80047dc <HAL_DMA_IRQHandler+0x6a8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d02c      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7a      	ldr	r2, [pc, #488]	@ (80047e0 <HAL_DMA_IRQHandler+0x6ac>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d027      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a79      	ldr	r2, [pc, #484]	@ (80047e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d022      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <HAL_DMA_IRQHandler+0x6b4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01d      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a76      	ldr	r2, [pc, #472]	@ (80047ec <HAL_DMA_IRQHandler+0x6b8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a74      	ldr	r2, [pc, #464]	@ (80047f0 <HAL_DMA_IRQHandler+0x6bc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a73      	ldr	r2, [pc, #460]	@ (80047f4 <HAL_DMA_IRQHandler+0x6c0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a71      	ldr	r2, [pc, #452]	@ (80047f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a70      	ldr	r2, [pc, #448]	@ (80047fc <HAL_DMA_IRQHandler+0x6c8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_DMA_IRQHandler+0x516>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6e      	ldr	r2, [pc, #440]	@ (8004800 <HAL_DMA_IRQHandler+0x6cc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10a      	bne.n	8004660 <HAL_DMA_IRQHandler+0x52c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e009      	b.n	8004674 <HAL_DMA_IRQHandler+0x540>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03e      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2210      	movs	r2, #16
 8004682:	409a      	lsls	r2, r3
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d024      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
 80046b4:	e01f      	b.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01b      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
 80046c6:	e016      	b.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0208 	bic.w	r2, r2, #8
 80046e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	2220      	movs	r2, #32
 8004700:	409a      	lsls	r2, r3
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8110 	beq.w	800492c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2c      	ldr	r2, [pc, #176]	@ (80047c4 <HAL_DMA_IRQHandler+0x690>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04a      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <HAL_DMA_IRQHandler+0x694>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d045      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <HAL_DMA_IRQHandler+0x698>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d040      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_DMA_IRQHandler+0x69c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d03b      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a26      	ldr	r2, [pc, #152]	@ (80047d4 <HAL_DMA_IRQHandler+0x6a0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d036      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a25      	ldr	r2, [pc, #148]	@ (80047d8 <HAL_DMA_IRQHandler+0x6a4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d031      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <HAL_DMA_IRQHandler+0x6a8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02c      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_DMA_IRQHandler+0x6ac>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d027      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a20      	ldr	r2, [pc, #128]	@ (80047e4 <HAL_DMA_IRQHandler+0x6b0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <HAL_DMA_IRQHandler+0x6b4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d01d      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <HAL_DMA_IRQHandler+0x6b8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <HAL_DMA_IRQHandler+0x6bc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1a      	ldr	r2, [pc, #104]	@ (80047f4 <HAL_DMA_IRQHandler+0x6c0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a19      	ldr	r2, [pc, #100]	@ (80047f8 <HAL_DMA_IRQHandler+0x6c4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a17      	ldr	r2, [pc, #92]	@ (80047fc <HAL_DMA_IRQHandler+0x6c8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_DMA_IRQHandler+0x678>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <HAL_DMA_IRQHandler+0x6cc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d12b      	bne.n	8004804 <HAL_DMA_IRQHandler+0x6d0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e02a      	b.n	8004818 <HAL_DMA_IRQHandler+0x6e4>
 80047c2:	bf00      	nop
 80047c4:	40020010 	.word	0x40020010
 80047c8:	40020028 	.word	0x40020028
 80047cc:	40020040 	.word	0x40020040
 80047d0:	40020058 	.word	0x40020058
 80047d4:	40020070 	.word	0x40020070
 80047d8:	40020088 	.word	0x40020088
 80047dc:	400200a0 	.word	0x400200a0
 80047e0:	400200b8 	.word	0x400200b8
 80047e4:	40020410 	.word	0x40020410
 80047e8:	40020428 	.word	0x40020428
 80047ec:	40020440 	.word	0x40020440
 80047f0:	40020458 	.word	0x40020458
 80047f4:	40020470 	.word	0x40020470
 80047f8:	40020488 	.word	0x40020488
 80047fc:	400204a0 	.word	0x400204a0
 8004800:	400204b8 	.word	0x400204b8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8087 	beq.w	800492c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2220      	movs	r2, #32
 8004828:	409a      	lsls	r2, r3
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b04      	cmp	r3, #4
 8004838:	d139      	bne.n	80048ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0216 	bic.w	r2, r2, #22
 8004848:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004858:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_DMA_IRQHandler+0x736>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	223f      	movs	r2, #63	@ 0x3f
 8004884:	409a      	lsls	r2, r3
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 834a 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
          }
          return;
 80048ac:	e344      	b.n	8004f38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02c      	beq.n	800492c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e027      	b.n	800492c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
 80048ec:	e01e      	b.n	800492c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0210 	bic.w	r2, r2, #16
 800490a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8306 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8088 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2204      	movs	r2, #4
 8004948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7a      	ldr	r2, [pc, #488]	@ (8004b3c <HAL_DMA_IRQHandler+0xa08>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d04a      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a79      	ldr	r2, [pc, #484]	@ (8004b40 <HAL_DMA_IRQHandler+0xa0c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d045      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a77      	ldr	r2, [pc, #476]	@ (8004b44 <HAL_DMA_IRQHandler+0xa10>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d040      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a76      	ldr	r2, [pc, #472]	@ (8004b48 <HAL_DMA_IRQHandler+0xa14>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d03b      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a74      	ldr	r2, [pc, #464]	@ (8004b4c <HAL_DMA_IRQHandler+0xa18>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d036      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a73      	ldr	r2, [pc, #460]	@ (8004b50 <HAL_DMA_IRQHandler+0xa1c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d031      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a71      	ldr	r2, [pc, #452]	@ (8004b54 <HAL_DMA_IRQHandler+0xa20>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02c      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a70      	ldr	r2, [pc, #448]	@ (8004b58 <HAL_DMA_IRQHandler+0xa24>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d027      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6e      	ldr	r2, [pc, #440]	@ (8004b5c <HAL_DMA_IRQHandler+0xa28>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004b60 <HAL_DMA_IRQHandler+0xa2c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d01d      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004b64 <HAL_DMA_IRQHandler+0xa30>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a6a      	ldr	r2, [pc, #424]	@ (8004b68 <HAL_DMA_IRQHandler+0xa34>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a68      	ldr	r2, [pc, #416]	@ (8004b6c <HAL_DMA_IRQHandler+0xa38>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a67      	ldr	r2, [pc, #412]	@ (8004b70 <HAL_DMA_IRQHandler+0xa3c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a65      	ldr	r2, [pc, #404]	@ (8004b74 <HAL_DMA_IRQHandler+0xa40>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_DMA_IRQHandler+0x8b8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a64      	ldr	r2, [pc, #400]	@ (8004b78 <HAL_DMA_IRQHandler+0xa44>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <HAL_DMA_IRQHandler+0x8ca>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <HAL_DMA_IRQHandler+0x8da>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d307      	bcc.n	8004a2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f2      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x8da>
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004a42:	e003      	b.n	8004a4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8272 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
 8004a66:	e26c      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a43      	ldr	r2, [pc, #268]	@ (8004b7c <HAL_DMA_IRQHandler+0xa48>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a42      	ldr	r2, [pc, #264]	@ (8004b80 <HAL_DMA_IRQHandler+0xa4c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a40      	ldr	r2, [pc, #256]	@ (8004b84 <HAL_DMA_IRQHandler+0xa50>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b88 <HAL_DMA_IRQHandler+0xa54>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3d      	ldr	r2, [pc, #244]	@ (8004b8c <HAL_DMA_IRQHandler+0xa58>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b90 <HAL_DMA_IRQHandler+0xa5c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8004b94 <HAL_DMA_IRQHandler+0xa60>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x984>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a39      	ldr	r2, [pc, #228]	@ (8004b98 <HAL_DMA_IRQHandler+0xa64>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_DMA_IRQHandler+0x988>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <HAL_DMA_IRQHandler+0x98a>
 8004abc:	2300      	movs	r3, #0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 823f 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80cd 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xb48>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80c7 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2204      	movs	r2, #4
 8004af8:	409a      	lsls	r2, r3
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d049      	beq.n	8004b9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8210 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b24:	e20a      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8206 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b38:	e200      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe08>
 8004b3a:	bf00      	nop
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
 8004b7c:	58025408 	.word	0x58025408
 8004b80:	5802541c 	.word	0x5802541c
 8004b84:	58025430 	.word	0x58025430
 8004b88:	58025444 	.word	0x58025444
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	5802546c 	.word	0x5802546c
 8004b94:	58025480 	.word	0x58025480
 8004b98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7f      	ldr	r2, [pc, #508]	@ (8004da8 <HAL_DMA_IRQHandler+0xc74>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d04a      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	@ (8004dac <HAL_DMA_IRQHandler+0xc78>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d045      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004db0 <HAL_DMA_IRQHandler+0xc7c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d040      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004db4 <HAL_DMA_IRQHandler+0xc80>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03b      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a79      	ldr	r2, [pc, #484]	@ (8004db8 <HAL_DMA_IRQHandler+0xc84>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d036      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a77      	ldr	r2, [pc, #476]	@ (8004dbc <HAL_DMA_IRQHandler+0xc88>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d031      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a76      	ldr	r2, [pc, #472]	@ (8004dc0 <HAL_DMA_IRQHandler+0xc8c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02c      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	@ (8004dc4 <HAL_DMA_IRQHandler+0xc90>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d027      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	@ (8004dc8 <HAL_DMA_IRQHandler+0xc94>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a71      	ldr	r2, [pc, #452]	@ (8004dcc <HAL_DMA_IRQHandler+0xc98>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	@ (8004dd0 <HAL_DMA_IRQHandler+0xc9c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd4 <HAL_DMA_IRQHandler+0xca0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd8 <HAL_DMA_IRQHandler+0xca4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ddc <HAL_DMA_IRQHandler+0xca8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6a      	ldr	r2, [pc, #424]	@ (8004de0 <HAL_DMA_IRQHandler+0xcac>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb12>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a68      	ldr	r2, [pc, #416]	@ (8004de4 <HAL_DMA_IRQHandler+0xcb0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <HAL_DMA_IRQHandler+0xb24>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0208 	bic.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e007      	b.n	8004c68 <HAL_DMA_IRQHandler+0xb34>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0204 	bic.w	r2, r2, #4
 8004c66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8165 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c7a:	e15f      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2202      	movs	r2, #2
 8004c86:	409a      	lsls	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80c5 	beq.w	8004e1c <HAL_DMA_IRQHandler+0xce8>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80bf 	beq.w	8004e1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d018      	beq.n	8004cea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 813a 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	e134      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8130 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	e12a      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8089 	bne.w	8004e08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8004da8 <HAL_DMA_IRQHandler+0xc74>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	@ (8004dac <HAL_DMA_IRQHandler+0xc78>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a28      	ldr	r2, [pc, #160]	@ (8004db0 <HAL_DMA_IRQHandler+0xc7c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <HAL_DMA_IRQHandler+0xc80>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a25      	ldr	r2, [pc, #148]	@ (8004db8 <HAL_DMA_IRQHandler+0xc84>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a23      	ldr	r2, [pc, #140]	@ (8004dbc <HAL_DMA_IRQHandler+0xc88>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <HAL_DMA_IRQHandler+0xc8c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a20      	ldr	r2, [pc, #128]	@ (8004dc4 <HAL_DMA_IRQHandler+0xc90>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc8 <HAL_DMA_IRQHandler+0xc94>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1d      	ldr	r2, [pc, #116]	@ (8004dcc <HAL_DMA_IRQHandler+0xc98>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd0 <HAL_DMA_IRQHandler+0xc9c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_DMA_IRQHandler+0xca0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <HAL_DMA_IRQHandler+0xca4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	@ (8004ddc <HAL_DMA_IRQHandler+0xca8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	@ (8004de0 <HAL_DMA_IRQHandler+0xcac>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xc62>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a14      	ldr	r2, [pc, #80]	@ (8004de4 <HAL_DMA_IRQHandler+0xcb0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d128      	bne.n	8004de8 <HAL_DMA_IRQHandler+0xcb4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0214 	bic.w	r2, r2, #20
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e027      	b.n	8004df8 <HAL_DMA_IRQHandler+0xcc4>
 8004da8:	40020010 	.word	0x40020010
 8004dac:	40020028 	.word	0x40020028
 8004db0:	40020040 	.word	0x40020040
 8004db4:	40020058 	.word	0x40020058
 8004db8:	40020070 	.word	0x40020070
 8004dbc:	40020088 	.word	0x40020088
 8004dc0:	400200a0 	.word	0x400200a0
 8004dc4:	400200b8 	.word	0x400200b8
 8004dc8:	40020410 	.word	0x40020410
 8004dcc:	40020428 	.word	0x40020428
 8004dd0:	40020440 	.word	0x40020440
 8004dd4:	40020458 	.word	0x40020458
 8004dd8:	40020470 	.word	0x40020470
 8004ddc:	40020488 	.word	0x40020488
 8004de0:	400204a0 	.word	0x400204a0
 8004de4:	400204b8 	.word	0x400204b8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 020a 	bic.w	r2, r2, #10
 8004df6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8097 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e1a:	e091      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2208      	movs	r2, #8
 8004e26:	409a      	lsls	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8088 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe0e>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8082 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a41      	ldr	r2, [pc, #260]	@ (8004f48 <HAL_DMA_IRQHandler+0xe14>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f4c <HAL_DMA_IRQHandler+0xe18>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3e      	ldr	r2, [pc, #248]	@ (8004f50 <HAL_DMA_IRQHandler+0xe1c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3c      	ldr	r2, [pc, #240]	@ (8004f54 <HAL_DMA_IRQHandler+0xe20>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f58 <HAL_DMA_IRQHandler+0xe24>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a39      	ldr	r2, [pc, #228]	@ (8004f5c <HAL_DMA_IRQHandler+0xe28>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a38      	ldr	r2, [pc, #224]	@ (8004f60 <HAL_DMA_IRQHandler+0xe2c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a36      	ldr	r2, [pc, #216]	@ (8004f64 <HAL_DMA_IRQHandler+0xe30>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a35      	ldr	r2, [pc, #212]	@ (8004f68 <HAL_DMA_IRQHandler+0xe34>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a33      	ldr	r2, [pc, #204]	@ (8004f6c <HAL_DMA_IRQHandler+0xe38>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a32      	ldr	r2, [pc, #200]	@ (8004f70 <HAL_DMA_IRQHandler+0xe3c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a30      	ldr	r2, [pc, #192]	@ (8004f74 <HAL_DMA_IRQHandler+0xe40>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	@ (8004f78 <HAL_DMA_IRQHandler+0xe44>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <HAL_DMA_IRQHandler+0xe48>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	@ (8004f80 <HAL_DMA_IRQHandler+0xe4c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_IRQHandler+0xdaa>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f84 <HAL_DMA_IRQHandler+0xe50>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <HAL_DMA_IRQHandler+0xdbc>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 021c 	bic.w	r2, r2, #28
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <HAL_DMA_IRQHandler+0xdcc>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 020e 	bic.w	r2, r2, #14
 8004efe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
 8004f36:	e004      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f42:	3728      	adds	r7, #40	@ 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8

08004f88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7f      	ldr	r2, [pc, #508]	@ (80051a4 <DMA_SetConfig+0x21c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d072      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7d      	ldr	r2, [pc, #500]	@ (80051a8 <DMA_SetConfig+0x220>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d06d      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7c      	ldr	r2, [pc, #496]	@ (80051ac <DMA_SetConfig+0x224>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d068      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80051b0 <DMA_SetConfig+0x228>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d063      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a79      	ldr	r2, [pc, #484]	@ (80051b4 <DMA_SetConfig+0x22c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d05e      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a77      	ldr	r2, [pc, #476]	@ (80051b8 <DMA_SetConfig+0x230>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d059      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a76      	ldr	r2, [pc, #472]	@ (80051bc <DMA_SetConfig+0x234>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d054      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a74      	ldr	r2, [pc, #464]	@ (80051c0 <DMA_SetConfig+0x238>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d04f      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a73      	ldr	r2, [pc, #460]	@ (80051c4 <DMA_SetConfig+0x23c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d04a      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a71      	ldr	r2, [pc, #452]	@ (80051c8 <DMA_SetConfig+0x240>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d045      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a70      	ldr	r2, [pc, #448]	@ (80051cc <DMA_SetConfig+0x244>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d040      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6e      	ldr	r2, [pc, #440]	@ (80051d0 <DMA_SetConfig+0x248>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d03b      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6d      	ldr	r2, [pc, #436]	@ (80051d4 <DMA_SetConfig+0x24c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d036      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	@ (80051d8 <DMA_SetConfig+0x250>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d031      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6a      	ldr	r2, [pc, #424]	@ (80051dc <DMA_SetConfig+0x254>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d02c      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a68      	ldr	r2, [pc, #416]	@ (80051e0 <DMA_SetConfig+0x258>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d027      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a67      	ldr	r2, [pc, #412]	@ (80051e4 <DMA_SetConfig+0x25c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a65      	ldr	r2, [pc, #404]	@ (80051e8 <DMA_SetConfig+0x260>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01d      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a64      	ldr	r2, [pc, #400]	@ (80051ec <DMA_SetConfig+0x264>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a62      	ldr	r2, [pc, #392]	@ (80051f0 <DMA_SetConfig+0x268>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a61      	ldr	r2, [pc, #388]	@ (80051f4 <DMA_SetConfig+0x26c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5f      	ldr	r2, [pc, #380]	@ (80051f8 <DMA_SetConfig+0x270>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5e      	ldr	r2, [pc, #376]	@ (80051fc <DMA_SetConfig+0x274>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5c      	ldr	r2, [pc, #368]	@ (8005200 <DMA_SetConfig+0x278>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <DMA_SetConfig+0x10e>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <DMA_SetConfig+0x110>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a39      	ldr	r2, [pc, #228]	@ (80051a4 <DMA_SetConfig+0x21c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04a      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a38      	ldr	r2, [pc, #224]	@ (80051a8 <DMA_SetConfig+0x220>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d045      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a36      	ldr	r2, [pc, #216]	@ (80051ac <DMA_SetConfig+0x224>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d040      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a35      	ldr	r2, [pc, #212]	@ (80051b0 <DMA_SetConfig+0x228>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d03b      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a33      	ldr	r2, [pc, #204]	@ (80051b4 <DMA_SetConfig+0x22c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d036      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a32      	ldr	r2, [pc, #200]	@ (80051b8 <DMA_SetConfig+0x230>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d031      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a30      	ldr	r2, [pc, #192]	@ (80051bc <DMA_SetConfig+0x234>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02c      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2f      	ldr	r2, [pc, #188]	@ (80051c0 <DMA_SetConfig+0x238>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d027      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <DMA_SetConfig+0x23c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d022      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <DMA_SetConfig+0x240>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01d      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2a      	ldr	r2, [pc, #168]	@ (80051cc <DMA_SetConfig+0x244>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a29      	ldr	r2, [pc, #164]	@ (80051d0 <DMA_SetConfig+0x248>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a27      	ldr	r2, [pc, #156]	@ (80051d4 <DMA_SetConfig+0x24c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a26      	ldr	r2, [pc, #152]	@ (80051d8 <DMA_SetConfig+0x250>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a24      	ldr	r2, [pc, #144]	@ (80051dc <DMA_SetConfig+0x254>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a23      	ldr	r2, [pc, #140]	@ (80051e0 <DMA_SetConfig+0x258>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <DMA_SetConfig+0x1d4>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <DMA_SetConfig+0x1d6>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d059      	beq.n	8005216 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	223f      	movs	r2, #63	@ 0x3f
 800516c:	409a      	lsls	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005180:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b40      	cmp	r3, #64	@ 0x40
 8005190:	d138      	bne.n	8005204 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051a2:	e086      	b.n	80052b2 <DMA_SetConfig+0x32a>
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
 80051e4:	58025408 	.word	0x58025408
 80051e8:	5802541c 	.word	0x5802541c
 80051ec:	58025430 	.word	0x58025430
 80051f0:	58025444 	.word	0x58025444
 80051f4:	58025458 	.word	0x58025458
 80051f8:	5802546c 	.word	0x5802546c
 80051fc:	58025480 	.word	0x58025480
 8005200:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
}
 8005214:	e04d      	b.n	80052b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a29      	ldr	r2, [pc, #164]	@ (80052c0 <DMA_SetConfig+0x338>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <DMA_SetConfig+0x2de>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a27      	ldr	r2, [pc, #156]	@ (80052c4 <DMA_SetConfig+0x33c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01d      	beq.n	8005266 <DMA_SetConfig+0x2de>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a26      	ldr	r2, [pc, #152]	@ (80052c8 <DMA_SetConfig+0x340>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <DMA_SetConfig+0x2de>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a24      	ldr	r2, [pc, #144]	@ (80052cc <DMA_SetConfig+0x344>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <DMA_SetConfig+0x2de>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <DMA_SetConfig+0x348>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <DMA_SetConfig+0x2de>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a21      	ldr	r2, [pc, #132]	@ (80052d4 <DMA_SetConfig+0x34c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <DMA_SetConfig+0x2de>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a20      	ldr	r2, [pc, #128]	@ (80052d8 <DMA_SetConfig+0x350>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <DMA_SetConfig+0x2de>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <DMA_SetConfig+0x354>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <DMA_SetConfig+0x2e2>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <DMA_SetConfig+0x2e4>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2201      	movs	r2, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b40      	cmp	r3, #64	@ 0x40
 800528e:	d108      	bne.n	80052a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	60da      	str	r2, [r3, #12]
}
 80052a0:	e007      	b.n	80052b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	60da      	str	r2, [r3, #12]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	58025408 	.word	0x58025408
 80052c4:	5802541c 	.word	0x5802541c
 80052c8:	58025430 	.word	0x58025430
 80052cc:	58025444 	.word	0x58025444
 80052d0:	58025458 	.word	0x58025458
 80052d4:	5802546c 	.word	0x5802546c
 80052d8:	58025480 	.word	0x58025480
 80052dc:	58025494 	.word	0x58025494

080052e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a42      	ldr	r2, [pc, #264]	@ (80053f8 <DMA_CalcBaseAndBitshift+0x118>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04a      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a41      	ldr	r2, [pc, #260]	@ (80053fc <DMA_CalcBaseAndBitshift+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d045      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3f      	ldr	r2, [pc, #252]	@ (8005400 <DMA_CalcBaseAndBitshift+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d040      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3e      	ldr	r2, [pc, #248]	@ (8005404 <DMA_CalcBaseAndBitshift+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d03b      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3c      	ldr	r2, [pc, #240]	@ (8005408 <DMA_CalcBaseAndBitshift+0x128>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d036      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3b      	ldr	r2, [pc, #236]	@ (800540c <DMA_CalcBaseAndBitshift+0x12c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d031      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a39      	ldr	r2, [pc, #228]	@ (8005410 <DMA_CalcBaseAndBitshift+0x130>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02c      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a38      	ldr	r2, [pc, #224]	@ (8005414 <DMA_CalcBaseAndBitshift+0x134>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d027      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a36      	ldr	r2, [pc, #216]	@ (8005418 <DMA_CalcBaseAndBitshift+0x138>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a35      	ldr	r2, [pc, #212]	@ (800541c <DMA_CalcBaseAndBitshift+0x13c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a33      	ldr	r2, [pc, #204]	@ (8005420 <DMA_CalcBaseAndBitshift+0x140>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a32      	ldr	r2, [pc, #200]	@ (8005424 <DMA_CalcBaseAndBitshift+0x144>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <DMA_CalcBaseAndBitshift+0x148>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2f      	ldr	r2, [pc, #188]	@ (800542c <DMA_CalcBaseAndBitshift+0x14c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2d      	ldr	r2, [pc, #180]	@ (8005430 <DMA_CalcBaseAndBitshift+0x150>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <DMA_CalcBaseAndBitshift+0xa8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2c      	ldr	r2, [pc, #176]	@ (8005434 <DMA_CalcBaseAndBitshift+0x154>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <DMA_CalcBaseAndBitshift+0xac>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <DMA_CalcBaseAndBitshift+0xae>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d024      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	3b10      	subs	r3, #16
 800539a:	4a27      	ldr	r2, [pc, #156]	@ (8005438 <DMA_CalcBaseAndBitshift+0x158>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	4a24      	ldr	r2, [pc, #144]	@ (800543c <DMA_CalcBaseAndBitshift+0x15c>)
 80053ac:	5cd3      	ldrb	r3, [r2, r3]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d908      	bls.n	80053cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005440 <DMA_CalcBaseAndBitshift+0x160>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80053ca:	e00d      	b.n	80053e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <DMA_CalcBaseAndBitshift+0x160>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053da:	e005      	b.n	80053e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40020010 	.word	0x40020010
 80053fc:	40020028 	.word	0x40020028
 8005400:	40020040 	.word	0x40020040
 8005404:	40020058 	.word	0x40020058
 8005408:	40020070 	.word	0x40020070
 800540c:	40020088 	.word	0x40020088
 8005410:	400200a0 	.word	0x400200a0
 8005414:	400200b8 	.word	0x400200b8
 8005418:	40020410 	.word	0x40020410
 800541c:	40020428 	.word	0x40020428
 8005420:	40020440 	.word	0x40020440
 8005424:	40020458 	.word	0x40020458
 8005428:	40020470 	.word	0x40020470
 800542c:	40020488 	.word	0x40020488
 8005430:	400204a0 	.word	0x400204a0
 8005434:	400204b8 	.word	0x400204b8
 8005438:	aaaaaaab 	.word	0xaaaaaaab
 800543c:	08012760 	.word	0x08012760
 8005440:	fffffc00 	.word	0xfffffc00

08005444 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d120      	bne.n	800549a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	2b03      	cmp	r3, #3
 800545e:	d858      	bhi.n	8005512 <DMA_CheckFifoParam+0xce>
 8005460:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <DMA_CheckFifoParam+0x24>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	08005479 	.word	0x08005479
 800546c:	0800548b 	.word	0x0800548b
 8005470:	08005479 	.word	0x08005479
 8005474:	08005513 	.word	0x08005513
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d048      	beq.n	8005516 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005488:	e045      	b.n	8005516 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005492:	d142      	bne.n	800551a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005498:	e03f      	b.n	800551a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a2:	d123      	bne.n	80054ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d838      	bhi.n	800551e <DMA_CheckFifoParam+0xda>
 80054ac:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <DMA_CheckFifoParam+0x70>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054cb 	.word	0x080054cb
 80054bc:	080054c5 	.word	0x080054c5
 80054c0:	080054dd 	.word	0x080054dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
        break;
 80054c8:	e030      	b.n	800552c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d025      	beq.n	8005522 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054da:	e022      	b.n	8005522 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054e4:	d11f      	bne.n	8005526 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ea:	e01c      	b.n	8005526 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d902      	bls.n	80054fa <DMA_CheckFifoParam+0xb6>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d003      	beq.n	8005500 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80054f8:	e018      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
        break;
 80054fe:	e015      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00e      	beq.n	800552a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
    break;
 8005510:	e00b      	b.n	800552a <DMA_CheckFifoParam+0xe6>
        break;
 8005512:	bf00      	nop
 8005514:	e00a      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        break;
 8005516:	bf00      	nop
 8005518:	e008      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        break;
 800551a:	bf00      	nop
 800551c:	e006      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        break;
 800551e:	bf00      	nop
 8005520:	e004      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        break;
 8005522:	bf00      	nop
 8005524:	e002      	b.n	800552c <DMA_CheckFifoParam+0xe8>
        break;
 8005526:	bf00      	nop
 8005528:	e000      	b.n	800552c <DMA_CheckFifoParam+0xe8>
    break;
 800552a:	bf00      	nop
    }
  }

  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop

0800553c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a38      	ldr	r2, [pc, #224]	@ (8005630 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a36      	ldr	r2, [pc, #216]	@ (8005634 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a35      	ldr	r2, [pc, #212]	@ (8005638 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a33      	ldr	r2, [pc, #204]	@ (800563c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a32      	ldr	r2, [pc, #200]	@ (8005640 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a30      	ldr	r2, [pc, #192]	@ (8005644 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2f      	ldr	r2, [pc, #188]	@ (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2d      	ldr	r2, [pc, #180]	@ (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	3b08      	subs	r3, #8
 80055ac:	4a28      	ldr	r2, [pc, #160]	@ (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4b26      	ldr	r3, [pc, #152]	@ (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a24      	ldr	r2, [pc, #144]	@ (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80055c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2201      	movs	r2, #1
 80055d2:	409a      	lsls	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80055d8:	e024      	b.n	8005624 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	3b10      	subs	r3, #16
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d806      	bhi.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d902      	bls.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3308      	adds	r3, #8
 8005600:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a16      	ldr	r2, [pc, #88]	@ (800566c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005614:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	2201      	movs	r2, #1
 800561e:	409a      	lsls	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	58025408 	.word	0x58025408
 8005634:	5802541c 	.word	0x5802541c
 8005638:	58025430 	.word	0x58025430
 800563c:	58025444 	.word	0x58025444
 8005640:	58025458 	.word	0x58025458
 8005644:	5802546c 	.word	0x5802546c
 8005648:	58025480 	.word	0x58025480
 800564c:	58025494 	.word	0x58025494
 8005650:	cccccccd 	.word	0xcccccccd
 8005654:	16009600 	.word	0x16009600
 8005658:	58025880 	.word	0x58025880
 800565c:	aaaaaaab 	.word	0xaaaaaaab
 8005660:	400204b8 	.word	0x400204b8
 8005664:	4002040f 	.word	0x4002040f
 8005668:	10008200 	.word	0x10008200
 800566c:	40020880 	.word	0x40020880

08005670 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04a      	beq.n	800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d847      	bhi.n	800571c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a25      	ldr	r2, [pc, #148]	@ (8005728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a24      	ldr	r2, [pc, #144]	@ (800572c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01d      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a22      	ldr	r2, [pc, #136]	@ (8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a21      	ldr	r2, [pc, #132]	@ (8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1e      	ldr	r2, [pc, #120]	@ (800573c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a15      	ldr	r2, [pc, #84]	@ (800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80056f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80056fa:	e009      	b.n	8005710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4b14      	ldr	r3, [pc, #80]	@ (8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	461a      	mov	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800570e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b01      	subs	r3, #1
 8005714:	2201      	movs	r2, #1
 8005716:	409a      	lsls	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	58025408 	.word	0x58025408
 800572c:	5802541c 	.word	0x5802541c
 8005730:	58025430 	.word	0x58025430
 8005734:	58025444 	.word	0x58025444
 8005738:	58025458 	.word	0x58025458
 800573c:	5802546c 	.word	0x5802546c
 8005740:	58025480 	.word	0x58025480
 8005744:	58025494 	.word	0x58025494
 8005748:	1600963f 	.word	0x1600963f
 800574c:	58025940 	.word	0x58025940
 8005750:	1000823f 	.word	0x1000823f
 8005754:	40020940 	.word	0x40020940

08005758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	@ 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005766:	4b89      	ldr	r3, [pc, #548]	@ (800598c <HAL_GPIO_Init+0x234>)
 8005768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800576a:	e194      	b.n	8005a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	2101      	movs	r1, #1
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8186 	beq.w	8005a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d005      	beq.n	800579c <HAL_GPIO_Init+0x44>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d130      	bne.n	80057fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	2203      	movs	r2, #3
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057d2:	2201      	movs	r2, #1
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0201 	and.w	r2, r3, #1
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d017      	beq.n	800583a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	2203      	movs	r2, #3
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4013      	ands	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d123      	bne.n	800588e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	08da      	lsrs	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3208      	adds	r2, #8
 800584e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	220f      	movs	r2, #15
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	08da      	lsrs	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3208      	adds	r2, #8
 8005888:	69b9      	ldr	r1, [r7, #24]
 800588a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	2203      	movs	r2, #3
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 0203 	and.w	r2, r3, #3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80e0 	beq.w	8005a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <HAL_GPIO_Init+0x238>)
 80058d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005990 <HAL_GPIO_Init+0x238>)
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80058e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005990 <HAL_GPIO_Init+0x238>)
 80058e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ee:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <HAL_GPIO_Init+0x23c>)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	089b      	lsrs	r3, r3, #2
 80058f4:	3302      	adds	r3, #2
 80058f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	220f      	movs	r2, #15
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <HAL_GPIO_Init+0x240>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d052      	beq.n	80059c0 <HAL_GPIO_Init+0x268>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1f      	ldr	r2, [pc, #124]	@ (800599c <HAL_GPIO_Init+0x244>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d031      	beq.n	8005986 <HAL_GPIO_Init+0x22e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1e      	ldr	r2, [pc, #120]	@ (80059a0 <HAL_GPIO_Init+0x248>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02b      	beq.n	8005982 <HAL_GPIO_Init+0x22a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <HAL_GPIO_Init+0x24c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d025      	beq.n	800597e <HAL_GPIO_Init+0x226>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_GPIO_Init+0x250>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01f      	beq.n	800597a <HAL_GPIO_Init+0x222>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_GPIO_Init+0x254>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d019      	beq.n	8005976 <HAL_GPIO_Init+0x21e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <HAL_GPIO_Init+0x258>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_GPIO_Init+0x21a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <HAL_GPIO_Init+0x25c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00d      	beq.n	800596e <HAL_GPIO_Init+0x216>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_GPIO_Init+0x260>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <HAL_GPIO_Init+0x212>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <HAL_GPIO_Init+0x264>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d101      	bne.n	8005966 <HAL_GPIO_Init+0x20e>
 8005962:	2309      	movs	r3, #9
 8005964:	e02d      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 8005966:	230a      	movs	r3, #10
 8005968:	e02b      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 800596a:	2308      	movs	r3, #8
 800596c:	e029      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 800596e:	2307      	movs	r3, #7
 8005970:	e027      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 8005972:	2306      	movs	r3, #6
 8005974:	e025      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 8005976:	2305      	movs	r3, #5
 8005978:	e023      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 800597a:	2304      	movs	r3, #4
 800597c:	e021      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 800597e:	2303      	movs	r3, #3
 8005980:	e01f      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 8005982:	2302      	movs	r3, #2
 8005984:	e01d      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 8005986:	2301      	movs	r3, #1
 8005988:	e01b      	b.n	80059c2 <HAL_GPIO_Init+0x26a>
 800598a:	bf00      	nop
 800598c:	58000080 	.word	0x58000080
 8005990:	58024400 	.word	0x58024400
 8005994:	58000400 	.word	0x58000400
 8005998:	58020000 	.word	0x58020000
 800599c:	58020400 	.word	0x58020400
 80059a0:	58020800 	.word	0x58020800
 80059a4:	58020c00 	.word	0x58020c00
 80059a8:	58021000 	.word	0x58021000
 80059ac:	58021400 	.word	0x58021400
 80059b0:	58021800 	.word	0x58021800
 80059b4:	58021c00 	.word	0x58021c00
 80059b8:	58022000 	.word	0x58022000
 80059bc:	58022400 	.word	0x58022400
 80059c0:	2300      	movs	r3, #0
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	f002 0203 	and.w	r2, r2, #3
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	4093      	lsls	r3, r2
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d2:	4938      	ldr	r1, [pc, #224]	@ (8005ab4 <HAL_GPIO_Init+0x35c>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	3302      	adds	r3, #2
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f ae63 	bne.w	800576c <HAL_GPIO_Init+0x14>
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	3724      	adds	r7, #36	@ 0x24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	58000400 	.word	0x58000400

08005ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ac8:	787b      	ldrb	r3, [r7, #1]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ad4:	e003      	b.n	8005ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ad6:	887b      	ldrh	r3, [r7, #2]
 8005ad8:	041a      	lsls	r2, r3, #16
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	619a      	str	r2, [r3, #24]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0fe      	b.n	8005cfa <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f00a fab3 	bl	801007c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f006 fe03 	bl	800c72e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7c1a      	ldrb	r2, [r3, #16]
 8005b30:	f88d 2000 	strb.w	r2, [sp]
 8005b34:	3304      	adds	r3, #4
 8005b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b38:	f006 fcd4 	bl	800c4e4 <USB_CoreInit>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0d5      	b.n	8005cfa <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f006 fdfb 	bl	800c750 <USB_SetCurrentMode>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0c6      	b.n	8005cfa <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e04a      	b.n	8005c08 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	3315      	adds	r3, #21
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3314      	adds	r3, #20
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b9a:	7bfa      	ldrb	r2, [r7, #15]
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	b298      	uxth	r0, r3
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	332e      	adds	r3, #46	@ 0x2e
 8005bae:	4602      	mov	r2, r0
 8005bb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bb2:	7bfa      	ldrb	r2, [r7, #15]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	331c      	adds	r3, #28
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bda:	7bfa      	ldrb	r2, [r7, #15]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3320      	adds	r3, #32
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bee:	7bfa      	ldrb	r2, [r7, #15]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3324      	adds	r3, #36	@ 0x24
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	3301      	adds	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3af      	bcc.n	8005b72 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
 8005c16:	e044      	b.n	8005ca2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c5a:	7bfa      	ldrb	r2, [r7, #15]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c70:	7bfa      	ldrb	r2, [r7, #15]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	791b      	ldrb	r3, [r3, #4]
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3b5      	bcc.n	8005c18 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7c1a      	ldrb	r2, [r3, #16]
 8005cb4:	f88d 2000 	strb.w	r2, [sp]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cbc:	f006 fd94 	bl	800c7e8 <USB_DevInit>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e013      	b.n	8005cfa <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7b1b      	ldrb	r3, [r3, #12]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 f96f 	bl	8006fcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f007 fdd7 	bl	800d8a6 <USB_DevDisconnect>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_PCD_Start+0x1c>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e022      	b.n	8005d64 <HAL_PCD_Start+0x62>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d105      	bne.n	8005d46 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 fcde 	bl	800c70c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f007 fd85 	bl	800d864 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b08d      	sub	sp, #52	@ 0x34
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f007 fe43 	bl	800da0e <USB_GetMode>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 84b9 	bne.w	8006702 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f007 fda7 	bl	800d8e8 <USB_ReadInterrupts>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 84af 	beq.w	8006700 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f007 fd94 	bl	800d8e8 <USB_ReadInterrupts>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d107      	bne.n	8005dda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f002 0202 	and.w	r2, r2, #2
 8005dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f007 fd82 	bl	800d8e8 <USB_ReadInterrupts>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d161      	bne.n	8005eb2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0210 	bic.w	r2, r2, #16
 8005dfc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e28:	d124      	bne.n	8005e74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d035      	beq.n	8005ea2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6a38      	ldr	r0, [r7, #32]
 8005e4a:	f007 fbb9 	bl	800d5c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e5a:	441a      	add	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	695a      	ldr	r2, [r3, #20]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e6c:	441a      	add	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	615a      	str	r2, [r3, #20]
 8005e72:	e016      	b.n	8005ea2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005e7a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e7e:	d110      	bne.n	8005ea2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e86:	2208      	movs	r2, #8
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6a38      	ldr	r0, [r7, #32]
 8005e8c:	f007 fb98 	bl	800d5c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e9c:	441a      	add	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0210 	orr.w	r2, r2, #16
 8005eb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f007 fd16 	bl	800d8e8 <USB_ReadInterrupts>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ec2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ec6:	f040 80a7 	bne.w	8006018 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f007 fd1b 	bl	800d90e <USB_ReadDevAllOutEpInterrupt>
 8005ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005eda:	e099      	b.n	8006010 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 808e 	beq.w	8006004 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f007 fd3f 	bl	800d976 <USB_ReadDevOutEPInterrupt>
 8005ef8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	2301      	movs	r3, #1
 8005f14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fed1 	bl	8006cc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00c      	beq.n	8005f42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f34:	461a      	mov	r2, r3
 8005f36:	2308      	movs	r3, #8
 8005f38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 ffa7 	bl	8006e90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d030      	beq.n	8005fca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f70:	2b80      	cmp	r3, #128	@ 0x80
 8005f72:	d109      	bne.n	8005f88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d108      	bne.n	8005fb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f00a f996 	bl	80102e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006002:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	f47f af62 	bne.w	8005edc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f007 fc63 	bl	800d8e8 <USB_ReadInterrupts>
 8006022:	4603      	mov	r3, r0
 8006024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800602c:	f040 80db 	bne.w	80061e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f007 fc84 	bl	800d942 <USB_ReadDevAllInEpInterrupt>
 800603a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006040:	e0cd      	b.n	80061de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80c2 	beq.w	80061d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f007 fcaa 	bl	800d9b2 <USB_ReadDevInEPInterrupt>
 800605e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d057      	beq.n	800611a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	2201      	movs	r2, #1
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	43db      	mvns	r3, r3
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800608a:	4013      	ands	r3, r2
 800608c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609a:	461a      	mov	r2, r3
 800609c:	2301      	movs	r3, #1
 800609e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	799b      	ldrb	r3, [r3, #6]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d132      	bne.n	800610e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	3320      	adds	r3, #32
 80060b8:	6819      	ldr	r1, [r3, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060be:	4613      	mov	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4403      	add	r3, r0
 80060c8:	331c      	adds	r3, #28
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4419      	add	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4403      	add	r3, r0
 80060dc:	3320      	adds	r3, #32
 80060de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d113      	bne.n	800610e <HAL_PCD_IRQHandler+0x3a2>
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3324      	adds	r3, #36	@ 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006106:	461a      	mov	r2, r3
 8006108:	2101      	movs	r1, #1
 800610a:	f007 fcb3 	bl	800da74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f00a f860 	bl	80101da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	461a      	mov	r2, r3
 8006132:	2308      	movs	r3, #8
 8006134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614c:	461a      	mov	r2, r3
 800614e:	2310      	movs	r3, #16
 8006150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006168:	461a      	mov	r2, r3
 800616a:	2340      	movs	r3, #64	@ 0x40
 800616c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d023      	beq.n	80061c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006178:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800617a:	6a38      	ldr	r0, [r7, #32]
 800617c:	f006 fc92 	bl	800caa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	3310      	adds	r3, #16
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
 8006192:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d108      	bne.n	80061ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f00a f8ad 	bl	8010308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	461a      	mov	r2, r3
 80061bc:	2302      	movs	r3, #2
 80061be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80061ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fcea 	bl	8006ba6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	3301      	adds	r3, #1
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f47f af2e 	bne.w	8006042 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f007 fb7c 	bl	800d8e8 <USB_ReadInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061fa:	d122      	bne.n	8006242 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006216:	2b01      	cmp	r3, #1
 8006218:	d108      	bne.n	800622c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006222:	2100      	movs	r1, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fef5 	bl	8007014 <HAL_PCDEx_LPM_Callback>
 800622a:	e002      	b.n	8006232 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f00a f84b 	bl	80102c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f007 fb4e 	bl	800d8e8 <USB_ReadInterrupts>
 800624c:	4603      	mov	r3, r0
 800624e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006256:	d112      	bne.n	800627e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f00a f807 	bl	801027c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800627c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f007 fb30 	bl	800d8e8 <USB_ReadInterrupts>
 8006288:	4603      	mov	r3, r0
 800628a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800628e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006292:	d121      	bne.n	80062d8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80062a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d111      	bne.n	80062d2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062bc:	089b      	lsrs	r3, r3, #2
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fea2 	bl	8007014 <HAL_PCDEx_LPM_Callback>
 80062d0:	e002      	b.n	80062d8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f009 ffd2 	bl	801027c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f007 fb03 	bl	800d8e8 <USB_ReadInterrupts>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ec:	f040 80b7 	bne.w	800645e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2110      	movs	r1, #16
 800630a:	4618      	mov	r0, r3
 800630c:	f006 fbca 	bl	800caa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006314:	e046      	b.n	80063a4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	461a      	mov	r2, r3
 8006324:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006328:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800632a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006344:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006348:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006356:	461a      	mov	r2, r3
 8006358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800635c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006378:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800637c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006398:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800639c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	3301      	adds	r3, #1
 80063a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d3b2      	bcc.n	8006316 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063be:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80063c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7bdb      	ldrb	r3, [r3, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d016      	beq.n	80063fa <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063dc:	f043 030b 	orr.w	r3, r3, #11
 80063e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f2:	f043 030b 	orr.w	r3, r3, #11
 80063f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80063f8:	e015      	b.n	8006426 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006408:	4619      	mov	r1, r3
 800640a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800640e:	4313      	orrs	r3, r2
 8006410:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006420:	f043 030b 	orr.w	r3, r3, #11
 8006424:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006434:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006438:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006448:	461a      	mov	r2, r3
 800644a:	f007 fb13 	bl	800da74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695a      	ldr	r2, [r3, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800645c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f007 fa40 	bl	800d8e8 <USB_ReadInterrupts>
 8006468:	4603      	mov	r3, r0
 800646a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800646e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006472:	d123      	bne.n	80064bc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f007 fad7 	bl	800da2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f006 fb87 	bl	800cb96 <USB_GetDevSpeed>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681c      	ldr	r4, [r3, #0]
 8006494:	f001 fe58 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8006498:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800649e:	461a      	mov	r2, r3
 80064a0:	4620      	mov	r0, r4
 80064a2:	f006 f891 	bl	800c5c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f009 febf 	bl	801022a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80064ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f007 fa11 	bl	800d8e8 <USB_ReadInterrupts>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d10a      	bne.n	80064e6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f009 fe9c 	bl	801020e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f002 0208 	and.w	r2, r2, #8
 80064e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f007 f9fc 	bl	800d8e8 <USB_ReadInterrupts>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f6:	2b80      	cmp	r3, #128	@ 0x80
 80064f8:	d123      	bne.n	8006542 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006506:	2301      	movs	r3, #1
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
 800650a:	e014      	b.n	8006536 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	b2db      	uxtb	r3, r3
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb0a 	bl	8006b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	3301      	adds	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	461a      	mov	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	4293      	cmp	r3, r2
 8006540:	d3e4      	bcc.n	800650c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f007 f9ce 	bl	800d8e8 <USB_ReadInterrupts>
 800654c:	4603      	mov	r3, r0
 800654e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006556:	d13c      	bne.n	80065d2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006558:	2301      	movs	r3, #1
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
 800655c:	e02b      	b.n	80065b6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	3318      	adds	r3, #24
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d115      	bne.n	80065b0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006584:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	da12      	bge.n	80065b0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658e:	4613      	mov	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	3317      	adds	r3, #23
 800659a:	2201      	movs	r2, #1
 800659c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faca 	bl	8006b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	791b      	ldrb	r3, [r3, #4]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	4293      	cmp	r3, r2
 80065c0:	d3cd      	bcc.n	800655e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80065d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f007 f986 	bl	800d8e8 <USB_ReadInterrupts>
 80065dc:	4603      	mov	r3, r0
 80065de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065e6:	d156      	bne.n	8006696 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065e8:	2301      	movs	r3, #1
 80065ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ec:	e045      	b.n	800667a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d12e      	bne.n	8006674 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006616:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006618:	2b00      	cmp	r3, #0
 800661a:	da2b      	bge.n	8006674 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	0c1a      	lsrs	r2, r3, #16
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006626:	4053      	eors	r3, r2
 8006628:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800662c:	2b00      	cmp	r3, #0
 800662e:	d121      	bne.n	8006674 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800666c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006670:	6053      	str	r3, [r2, #4]
            break;
 8006672:	e008      	b.n	8006686 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	3301      	adds	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	461a      	mov	r2, r3
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	4293      	cmp	r3, r2
 8006684:	d3b3      	bcc.n	80065ee <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695a      	ldr	r2, [r3, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f007 f924 	bl	800d8e8 <USB_ReadInterrupts>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d10a      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f009 fe3d 	bl	801032c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f007 f90e 	bl	800d8e8 <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d115      	bne.n	8006702 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f009 fe2d 	bl	8010348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e000      	b.n	8006702 <HAL_PCD_IRQHandler+0x996>
      return;
 8006700:	bf00      	nop
    }
  }
}
 8006702:	3734      	adds	r7, #52	@ 0x34
 8006704:	46bd      	mov	sp, r7
 8006706:	bd90      	pop	{r4, r7, pc}

08006708 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_PCD_SetAddress+0x1a>
 800671e:	2302      	movs	r3, #2
 8006720:	e012      	b.n	8006748 <HAL_PCD_SetAddress+0x40>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f007 f86d 	bl	800d818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	4603      	mov	r3, r0
 8006760:	70fb      	strb	r3, [r7, #3]
 8006762:	460b      	mov	r3, r1
 8006764:	803b      	strh	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800676e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006772:	2b00      	cmp	r3, #0
 8006774:	da0f      	bge.n	8006796 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	f003 020f 	and.w	r2, r3, #15
 800677c:	4613      	mov	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	3310      	adds	r3, #16
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	3304      	adds	r3, #4
 800678c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	705a      	strb	r2, [r3, #1]
 8006794:	e00f      	b.n	80067b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	f003 020f 	and.w	r2, r3, #15
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	3304      	adds	r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80067c2:	883b      	ldrh	r3, [r7, #0]
 80067c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	78ba      	ldrb	r2, [r7, #2]
 80067d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067e4:	78bb      	ldrb	r3, [r7, #2]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d102      	bne.n	80067f0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_PCD_EP_Open+0xae>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e00e      	b.n	800681c <HAL_PCD_EP_Open+0xcc>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	4618      	mov	r0, r3
 800680e:	f006 f9e7 	bl	800cbe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800681a:	7afb      	ldrb	r3, [r7, #11]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006834:	2b00      	cmp	r3, #0
 8006836:	da0f      	bge.n	8006858 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	4613      	mov	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	3310      	adds	r3, #16
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4413      	add	r3, r2
 800684c:	3304      	adds	r3, #4
 800684e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	705a      	strb	r2, [r3, #1]
 8006856:	e00f      	b.n	8006878 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	f003 020f 	and.w	r2, r3, #15
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_PCD_EP_Close+0x6e>
 800688e:	2302      	movs	r3, #2
 8006890:	e00e      	b.n	80068b0 <HAL_PCD_EP_Close+0x8c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f006 fa25 	bl	800ccf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	460b      	mov	r3, r1
 80068c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	f003 020f 	and.w	r2, r3, #15
 80068ce:	4613      	mov	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	3304      	adds	r3, #4
 80068e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2200      	movs	r2, #0
 80068f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	b2da      	uxtb	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	799b      	ldrb	r3, [r3, #6]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d102      	bne.n	8006914 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	799b      	ldrb	r3, [r3, #6]
 800691c:	461a      	mov	r2, r3
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	f006 fac2 	bl	800cea8 <USB_EPStartXfer>

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006950:	681b      	ldr	r3, [r3, #0]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
 800696a:	460b      	mov	r3, r1
 800696c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	f003 020f 	and.w	r2, r3, #15
 8006974:	4613      	mov	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	3310      	adds	r3, #16
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	3304      	adds	r3, #4
 8006984:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2201      	movs	r2, #1
 800699c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	799b      	ldrb	r3, [r3, #6]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d102      	bne.n	80069b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	799b      	ldrb	r3, [r3, #6]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	f006 fa70 	bl	800cea8 <USB_EPStartXfer>

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7912      	ldrb	r2, [r2, #4]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e04f      	b.n	8006a90 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	da0f      	bge.n	8006a18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	f003 020f 	and.w	r2, r3, #15
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	3310      	adds	r3, #16
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	705a      	strb	r2, [r3, #1]
 8006a16:	e00d      	b.n	8006a34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_PCD_EP_SetStall+0x82>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e01d      	b.n	8006a90 <HAL_PCD_EP_SetStall+0xbe>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f006 fe04 	bl	800d670 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7999      	ldrb	r1, [r3, #6]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a80:	461a      	mov	r2, r3
 8006a82:	f006 fff7 	bl	800da74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	7912      	ldrb	r2, [r2, #4]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e042      	b.n	8006b3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da0f      	bge.n	8006ade <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	3310      	adds	r3, #16
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	705a      	strb	r2, [r3, #1]
 8006adc:	e00f      	b.n	8006afe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	f003 020f 	and.w	r2, r3, #15
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_PCD_EP_ClrStall+0x86>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e00e      	b.n	8006b3c <HAL_PCD_EP_ClrStall+0xa4>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f006 fe0d 	bl	800d74c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da0c      	bge.n	8006b72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	f003 020f 	and.w	r2, r3, #15
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	3310      	adds	r3, #16
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e00c      	b.n	8006b8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f006 fc2c 	bl	800d3f0 <USB_EPStopXfer>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b08a      	sub	sp, #40	@ 0x28
 8006baa:	af02      	add	r7, sp, #8
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	3304      	adds	r3, #4
 8006bcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d901      	bls.n	8006bde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e06b      	b.n	8006cb6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d902      	bls.n	8006bfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3303      	adds	r3, #3
 8006bfe:	089b      	lsrs	r3, r3, #2
 8006c00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c02:	e02a      	b.n	8006c5a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d902      	bls.n	8006c20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	3303      	adds	r3, #3
 8006c24:	089b      	lsrs	r3, r3, #2
 8006c26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68d9      	ldr	r1, [r3, #12]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6978      	ldr	r0, [r7, #20]
 8006c3e:	f006 fc81 	bl	800d544 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	441a      	add	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d809      	bhi.n	8006c84 <PCD_WriteEmptyTxFifo+0xde>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d203      	bcs.n	8006c84 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1bf      	bne.n	8006c04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d811      	bhi.n	8006cb4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	2201      	movs	r2, #1
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	6939      	ldr	r1, [r7, #16]
 8006cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	333c      	adds	r3, #60	@ 0x3c
 8006cd8:	3304      	adds	r3, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	799b      	ldrb	r3, [r3, #6]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d17b      	bne.n	8006dee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4a61      	ldr	r2, [pc, #388]	@ (8006e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	f240 80b9 	bls.w	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80b3 	beq.w	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d22:	461a      	mov	r2, r3
 8006d24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d28:	6093      	str	r3, [r2, #8]
 8006d2a:	e0a7      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	461a      	mov	r2, r3
 8006d44:	2320      	movs	r3, #32
 8006d46:	6093      	str	r3, [r2, #8]
 8006d48:	e098      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8093 	bne.w	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4a4b      	ldr	r2, [pc, #300]	@ (8006e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d90f      	bls.n	8006d7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7a:	6093      	str	r3, [r2, #8]
 8006d7c:	e07e      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1a      	ldr	r2, [r3, #32]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	0159      	lsls	r1, r3, #5
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	440b      	add	r3, r1
 8006da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d114      	bne.n	8006de0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2101      	movs	r1, #1
 8006dcc:	f006 fe52 	bl	800da74 <USB_EP0_OutStart>
 8006dd0:	e006      	b.n	8006de0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	441a      	add	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f009 f9dc 	bl	80101a4 <HAL_PCD_DataOutStageCallback>
 8006dec:	e046      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4a26      	ldr	r2, [pc, #152]	@ (8006e8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d124      	bne.n	8006e40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e12:	6093      	str	r3, [r2, #8]
 8006e14:	e032      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2320      	movs	r3, #32
 8006e30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f009 f9b3 	bl	80101a4 <HAL_PCD_DataOutStageCallback>
 8006e3e:	e01d      	b.n	8006e7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d114      	bne.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d108      	bne.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f006 fe02 	bl	800da74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f009 f994 	bl	80101a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	4f54300a 	.word	0x4f54300a
 8006e8c:	4f54310a 	.word	0x4f54310a

08006e90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	333c      	adds	r3, #60	@ 0x3c
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d90e      	bls.n	8006ee4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d009      	beq.n	8006ee4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006edc:	461a      	mov	r2, r3
 8006ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f009 f94b 	bl	8010180 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d90c      	bls.n	8006f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	799b      	ldrb	r3, [r3, #6]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d108      	bne.n	8006f0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f04:	461a      	mov	r2, r3
 8006f06:	2101      	movs	r1, #1
 8006f08:	f006 fdb4 	bl	800da74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	4f54300a 	.word	0x4f54300a

08006f1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f3a:	883b      	ldrh	r3, [r7, #0]
 8006f3c:	0419      	lsls	r1, r3, #16
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f48:	e028      	b.n	8006f9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	0c1b      	lsrs	r3, r3, #16
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	4413      	add	r3, r2
 8006f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e00d      	b.n	8006f7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3340      	adds	r3, #64	@ 0x40
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	3301      	adds	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
 8006f7a:	7bfa      	ldrb	r2, [r7, #15]
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3ec      	bcc.n	8006f5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f84:	883b      	ldrh	r3, [r7, #0]
 8006f86:	0418      	lsls	r0, r3, #16
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6819      	ldr	r1, [r3, #0]
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	4302      	orrs	r2, r0
 8006f94:	3340      	adds	r3, #64	@ 0x40
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ffa:	4b05      	ldr	r3, [pc, #20]	@ (8007010 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	10000003 	.word	0x10000003

08007014 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007034:	4b19      	ldr	r3, [pc, #100]	@ (800709c <HAL_PWREx_ConfigSupply+0x70>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b04      	cmp	r3, #4
 800703e:	d00a      	beq.n	8007056 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007040:	4b16      	ldr	r3, [pc, #88]	@ (800709c <HAL_PWREx_ConfigSupply+0x70>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	d001      	beq.n	8007052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e01f      	b.n	8007092 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e01d      	b.n	8007092 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007056:	4b11      	ldr	r3, [pc, #68]	@ (800709c <HAL_PWREx_ConfigSupply+0x70>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f023 0207 	bic.w	r2, r3, #7
 800705e:	490f      	ldr	r1, [pc, #60]	@ (800709c <HAL_PWREx_ConfigSupply+0x70>)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4313      	orrs	r3, r2
 8007064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007066:	f7fa fa65 	bl	8001534 <HAL_GetTick>
 800706a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800706c:	e009      	b.n	8007082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800706e:	f7fa fa61 	bl	8001534 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800707c:	d901      	bls.n	8007082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e007      	b.n	8007092 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007082:	4b06      	ldr	r3, [pc, #24]	@ (800709c <HAL_PWREx_ConfigSupply+0x70>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800708a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708e:	d1ee      	bne.n	800706e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	58024800 	.word	0x58024800

080070a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4a04      	ldr	r2, [pc, #16]	@ (80070bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80070aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070ae:	60d3      	str	r3, [r2, #12]
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	58024800 	.word	0x58024800

080070c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80070c8:	f7fa fa34 	bl	8001534 <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e05f      	b.n	8007198 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d107      	bne.n	80070f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7f9 fe5b 	bl	8000da0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80070ea:	f241 3188 	movw	r1, #5000	@ 0x1388
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f85a 	bl	80071a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	3b01      	subs	r3, #1
 8007104:	021a      	lsls	r2, r3, #8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	2120      	movs	r1, #32
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f852 	bl	80071c4 <QSPI_WaitFlagStateUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d135      	bne.n	8007196 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <HAL_QSPI_Init+0xe0>)
 8007132:	4013      	ands	r3, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6852      	ldr	r2, [r2, #4]
 8007138:	0611      	lsls	r1, r2, #24
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68d2      	ldr	r2, [r2, #12]
 800713e:	4311      	orrs	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	69d2      	ldr	r2, [r2, #28]
 8007144:	4311      	orrs	r1, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6a12      	ldr	r2, [r2, #32]
 800714a:	4311      	orrs	r1, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	430b      	orrs	r3, r1
 8007152:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4b12      	ldr	r3, [pc, #72]	@ (80071a4 <HAL_QSPI_Init+0xe4>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6912      	ldr	r2, [r2, #16]
 8007162:	0411      	lsls	r1, r2, #16
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6952      	ldr	r2, [r2, #20]
 8007168:	4311      	orrs	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6992      	ldr	r2, [r2, #24]
 800716e:	4311      	orrs	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	430b      	orrs	r3, r1
 8007176:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007196:	7afb      	ldrb	r3, [r7, #11]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	00ffff2f 	.word	0x00ffff2f
 80071a4:	ffe0f8fe 	.word	0xffe0f8fe

080071a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80071d4:	e01a      	b.n	800720c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d016      	beq.n	800720c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071de:	f7fa f9a9 	bl	8001534 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2204      	movs	r2, #4
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e00e      	b.n	800722a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	2b00      	cmp	r3, #0
 8007218:	bf14      	ite	ne
 800721a:	2301      	movne	r3, #1
 800721c:	2300      	moveq	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	429a      	cmp	r2, r3
 8007226:	d1d6      	bne.n	80071d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	@ 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f000 bc48 	b.w	8007ad8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8088 	beq.w	8007366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007256:	4b99      	ldr	r3, [pc, #612]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800725e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007260:	4b96      	ldr	r3, [pc, #600]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	2b10      	cmp	r3, #16
 800726a:	d007      	beq.n	800727c <HAL_RCC_OscConfig+0x48>
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	2b18      	cmp	r3, #24
 8007270:	d111      	bne.n	8007296 <HAL_RCC_OscConfig+0x62>
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d10c      	bne.n	8007296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800727c:	4b8f      	ldr	r3, [pc, #572]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d06d      	beq.n	8007364 <HAL_RCC_OscConfig+0x130>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d169      	bne.n	8007364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f000 bc21 	b.w	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800729e:	d106      	bne.n	80072ae <HAL_RCC_OscConfig+0x7a>
 80072a0:	4b86      	ldr	r3, [pc, #536]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a85      	ldr	r2, [pc, #532]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	e02e      	b.n	800730c <HAL_RCC_OscConfig+0xd8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCC_OscConfig+0x9c>
 80072b6:	4b81      	ldr	r3, [pc, #516]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a80      	ldr	r2, [pc, #512]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	4b7e      	ldr	r3, [pc, #504]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a7d      	ldr	r2, [pc, #500]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e01d      	b.n	800730c <HAL_RCC_OscConfig+0xd8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072d8:	d10c      	bne.n	80072f4 <HAL_RCC_OscConfig+0xc0>
 80072da:	4b78      	ldr	r3, [pc, #480]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a77      	ldr	r2, [pc, #476]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	4b75      	ldr	r3, [pc, #468]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a74      	ldr	r2, [pc, #464]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e00b      	b.n	800730c <HAL_RCC_OscConfig+0xd8>
 80072f4:	4b71      	ldr	r3, [pc, #452]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a70      	ldr	r2, [pc, #448]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80072fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	4b6e      	ldr	r3, [pc, #440]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6d      	ldr	r2, [pc, #436]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800730a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d013      	beq.n	800733c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fa f90e 	bl	8001534 <HAL_GetTick>
 8007318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800731c:	f7fa f90a 	bl	8001534 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b64      	cmp	r3, #100	@ 0x64
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e3d4      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800732e:	4b63      	ldr	r3, [pc, #396]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f0      	beq.n	800731c <HAL_RCC_OscConfig+0xe8>
 800733a:	e014      	b.n	8007366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fa f8fa 	bl	8001534 <HAL_GetTick>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007344:	f7fa f8f6 	bl	8001534 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b64      	cmp	r3, #100	@ 0x64
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e3c0      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007356:	4b59      	ldr	r3, [pc, #356]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x110>
 8007362:	e000      	b.n	8007366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80ca 	beq.w	8007508 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007374:	4b51      	ldr	r3, [pc, #324]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800737c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800737e:	4b4f      	ldr	r3, [pc, #316]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <HAL_RCC_OscConfig+0x166>
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	2b18      	cmp	r3, #24
 800738e:	d156      	bne.n	800743e <HAL_RCC_OscConfig+0x20a>
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d151      	bne.n	800743e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800739a:	4b48      	ldr	r3, [pc, #288]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_RCC_OscConfig+0x17e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e392      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073b2:	4b42      	ldr	r3, [pc, #264]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 0219 	bic.w	r2, r3, #25
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	493f      	ldr	r1, [pc, #252]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fa f8b6 	bl	8001534 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073cc:	f7fa f8b2 	bl	8001534 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e37c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073de:	4b37      	ldr	r3, [pc, #220]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ea:	f7fa f8d3 	bl	8001594 <HAL_GetREVID>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d817      	bhi.n	8007428 <HAL_RCC_OscConfig+0x1f4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b40      	cmp	r3, #64	@ 0x40
 80073fe:	d108      	bne.n	8007412 <HAL_RCC_OscConfig+0x1de>
 8007400:	4b2e      	ldr	r3, [pc, #184]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007408:	4a2c      	ldr	r2, [pc, #176]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 800740a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800740e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007410:	e07a      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007412:	4b2a      	ldr	r3, [pc, #168]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	031b      	lsls	r3, r3, #12
 8007420:	4926      	ldr	r1, [pc, #152]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007422:	4313      	orrs	r3, r2
 8007424:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007426:	e06f      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007428:	4b24      	ldr	r3, [pc, #144]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	061b      	lsls	r3, r3, #24
 8007436:	4921      	ldr	r1, [pc, #132]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007438:	4313      	orrs	r3, r2
 800743a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800743c:	e064      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d047      	beq.n	80074d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007446:	4b1d      	ldr	r3, [pc, #116]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 0219 	bic.w	r2, r3, #25
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	491a      	ldr	r1, [pc, #104]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007454:	4313      	orrs	r3, r2
 8007456:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fa f86c 	bl	8001534 <HAL_GetTick>
 800745c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007460:	f7fa f868 	bl	8001534 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e332      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f0      	beq.n	8007460 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747e:	f7fa f889 	bl	8001594 <HAL_GetREVID>
 8007482:	4603      	mov	r3, r0
 8007484:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007488:	4293      	cmp	r3, r2
 800748a:	d819      	bhi.n	80074c0 <HAL_RCC_OscConfig+0x28c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b40      	cmp	r3, #64	@ 0x40
 8007492:	d108      	bne.n	80074a6 <HAL_RCC_OscConfig+0x272>
 8007494:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800749c:	4a07      	ldr	r2, [pc, #28]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 800749e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a2:	6053      	str	r3, [r2, #4]
 80074a4:	e030      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	031b      	lsls	r3, r3, #12
 80074b4:	4901      	ldr	r1, [pc, #4]	@ (80074bc <HAL_RCC_OscConfig+0x288>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	604b      	str	r3, [r1, #4]
 80074ba:	e025      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
 80074bc:	58024400 	.word	0x58024400
 80074c0:	4b9a      	ldr	r3, [pc, #616]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	061b      	lsls	r3, r3, #24
 80074ce:	4997      	ldr	r1, [pc, #604]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]
 80074d4:	e018      	b.n	8007508 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074d6:	4b95      	ldr	r3, [pc, #596]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a94      	ldr	r2, [pc, #592]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80074dc:	f023 0301 	bic.w	r3, r3, #1
 80074e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e2:	f7fa f827 	bl	8001534 <HAL_GetTick>
 80074e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ea:	f7fa f823 	bl	8001534 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e2ed      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074fc:	4b8b      	ldr	r3, [pc, #556]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f0      	bne.n	80074ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80a9 	beq.w	8007668 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007516:	4b85      	ldr	r3, [pc, #532]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800751e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007520:	4b82      	ldr	r3, [pc, #520]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d007      	beq.n	800753c <HAL_RCC_OscConfig+0x308>
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b18      	cmp	r3, #24
 8007530:	d13a      	bne.n	80075a8 <HAL_RCC_OscConfig+0x374>
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d135      	bne.n	80075a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800753c:	4b7b      	ldr	r3, [pc, #492]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_OscConfig+0x320>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	2b80      	cmp	r3, #128	@ 0x80
 800754e:	d001      	beq.n	8007554 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e2c1      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007554:	f7fa f81e 	bl	8001594 <HAL_GetREVID>
 8007558:	4603      	mov	r3, r0
 800755a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800755e:	4293      	cmp	r3, r2
 8007560:	d817      	bhi.n	8007592 <HAL_RCC_OscConfig+0x35e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	2b20      	cmp	r3, #32
 8007568:	d108      	bne.n	800757c <HAL_RCC_OscConfig+0x348>
 800756a:	4b70      	ldr	r3, [pc, #448]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007572:	4a6e      	ldr	r2, [pc, #440]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007574:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007578:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800757a:	e075      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800757c:	4b6b      	ldr	r3, [pc, #428]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	069b      	lsls	r3, r3, #26
 800758a:	4968      	ldr	r1, [pc, #416]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800758c:	4313      	orrs	r3, r2
 800758e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007590:	e06a      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007592:	4b66      	ldr	r3, [pc, #408]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	061b      	lsls	r3, r3, #24
 80075a0:	4962      	ldr	r1, [pc, #392]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075a6:	e05f      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d042      	beq.n	8007636 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80075b0:	4b5e      	ldr	r3, [pc, #376]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5d      	ldr	r2, [pc, #372]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80075b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7f9 ffba 	bl	8001534 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075c4:	f7f9 ffb6 	bl	8001534 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e280      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075d6:	4b55      	ldr	r3, [pc, #340]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f0      	beq.n	80075c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075e2:	f7f9 ffd7 	bl	8001594 <HAL_GetREVID>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d817      	bhi.n	8007620 <HAL_RCC_OscConfig+0x3ec>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d108      	bne.n	800760a <HAL_RCC_OscConfig+0x3d6>
 80075f8:	4b4c      	ldr	r3, [pc, #304]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007600:	4a4a      	ldr	r2, [pc, #296]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007606:	6053      	str	r3, [r2, #4]
 8007608:	e02e      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
 800760a:	4b48      	ldr	r3, [pc, #288]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	069b      	lsls	r3, r3, #26
 8007618:	4944      	ldr	r1, [pc, #272]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
 800761e:	e023      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
 8007620:	4b42      	ldr	r3, [pc, #264]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	061b      	lsls	r3, r3, #24
 800762e:	493f      	ldr	r1, [pc, #252]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007630:	4313      	orrs	r3, r2
 8007632:	60cb      	str	r3, [r1, #12]
 8007634:	e018      	b.n	8007668 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007636:	4b3d      	ldr	r3, [pc, #244]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3c      	ldr	r2, [pc, #240]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800763c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7f9 ff77 	bl	8001534 <HAL_GetTick>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800764a:	f7f9 ff73 	bl	8001534 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e23d      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800765c:	4b33      	ldr	r3, [pc, #204]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f0      	bne.n	800764a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d036      	beq.n	80076e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d019      	beq.n	80076b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800767c:	4b2b      	ldr	r3, [pc, #172]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800767e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007680:	4a2a      	ldr	r2, [pc, #168]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007688:	f7f9 ff54 	bl	8001534 <HAL_GetTick>
 800768c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007690:	f7f9 ff50 	bl	8001534 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e21a      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076a2:	4b22      	ldr	r3, [pc, #136]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f0      	beq.n	8007690 <HAL_RCC_OscConfig+0x45c>
 80076ae:	e018      	b.n	80076e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b0:	4b1e      	ldr	r3, [pc, #120]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b4:	4a1d      	ldr	r2, [pc, #116]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076bc:	f7f9 ff3a 	bl	8001534 <HAL_GetTick>
 80076c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076c4:	f7f9 ff36 	bl	8001534 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e200      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80076d6:	4b15      	ldr	r3, [pc, #84]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f0      	bne.n	80076c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d039      	beq.n	8007762 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01c      	beq.n	8007730 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80076f6:	4b0d      	ldr	r3, [pc, #52]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a0c      	ldr	r2, [pc, #48]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 80076fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007700:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007702:	f7f9 ff17 	bl	8001534 <HAL_GetTick>
 8007706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800770a:	f7f9 ff13 	bl	8001534 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e1dd      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800771c:	4b03      	ldr	r3, [pc, #12]	@ (800772c <HAL_RCC_OscConfig+0x4f8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0f0      	beq.n	800770a <HAL_RCC_OscConfig+0x4d6>
 8007728:	e01b      	b.n	8007762 <HAL_RCC_OscConfig+0x52e>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007730:	4b9b      	ldr	r3, [pc, #620]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a9a      	ldr	r2, [pc, #616]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007736:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800773a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800773c:	f7f9 fefa 	bl	8001534 <HAL_GetTick>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007744:	f7f9 fef6 	bl	8001534 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e1c0      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007756:	4b92      	ldr	r3, [pc, #584]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f0      	bne.n	8007744 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8081 	beq.w	8007872 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007770:	4b8c      	ldr	r3, [pc, #560]	@ (80079a4 <HAL_RCC_OscConfig+0x770>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a8b      	ldr	r2, [pc, #556]	@ (80079a4 <HAL_RCC_OscConfig+0x770>)
 8007776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800777a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800777c:	f7f9 feda 	bl	8001534 <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007784:	f7f9 fed6 	bl	8001534 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b64      	cmp	r3, #100	@ 0x64
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e1a0      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007796:	4b83      	ldr	r3, [pc, #524]	@ (80079a4 <HAL_RCC_OscConfig+0x770>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d106      	bne.n	80077b8 <HAL_RCC_OscConfig+0x584>
 80077aa:	4b7d      	ldr	r3, [pc, #500]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ae:	4a7c      	ldr	r2, [pc, #496]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b6:	e02d      	b.n	8007814 <HAL_RCC_OscConfig+0x5e0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10c      	bne.n	80077da <HAL_RCC_OscConfig+0x5a6>
 80077c0:	4b77      	ldr	r3, [pc, #476]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c4:	4a76      	ldr	r2, [pc, #472]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80077cc:	4b74      	ldr	r3, [pc, #464]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	4a73      	ldr	r2, [pc, #460]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077d2:	f023 0304 	bic.w	r3, r3, #4
 80077d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d8:	e01c      	b.n	8007814 <HAL_RCC_OscConfig+0x5e0>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x5c8>
 80077e2:	4b6f      	ldr	r3, [pc, #444]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e6:	4a6e      	ldr	r2, [pc, #440]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077e8:	f043 0304 	orr.w	r3, r3, #4
 80077ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ee:	4b6c      	ldr	r3, [pc, #432]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f2:	4a6b      	ldr	r2, [pc, #428]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0x5e0>
 80077fc:	4b68      	ldr	r3, [pc, #416]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007800:	4a67      	ldr	r2, [pc, #412]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	6713      	str	r3, [r2, #112]	@ 0x70
 8007808:	4b65      	ldr	r3, [pc, #404]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800780c:	4a64      	ldr	r2, [pc, #400]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800780e:	f023 0304 	bic.w	r3, r3, #4
 8007812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d015      	beq.n	8007848 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781c:	f7f9 fe8a 	bl	8001534 <HAL_GetTick>
 8007820:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007822:	e00a      	b.n	800783a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7f9 fe86 	bl	8001534 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e14e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800783a:	4b59      	ldr	r3, [pc, #356]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0ee      	beq.n	8007824 <HAL_RCC_OscConfig+0x5f0>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7f9 fe74 	bl	8001534 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800784e:	e00a      	b.n	8007866 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7f9 fe70 	bl	8001534 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e138      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007866:	4b4e      	ldr	r3, [pc, #312]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1ee      	bne.n	8007850 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 812d 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800787c:	4b48      	ldr	r3, [pc, #288]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007884:	2b18      	cmp	r3, #24
 8007886:	f000 80bd 	beq.w	8007a04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788e:	2b02      	cmp	r3, #2
 8007890:	f040 809e 	bne.w	80079d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007894:	4b42      	ldr	r3, [pc, #264]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a41      	ldr	r2, [pc, #260]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800789a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800789e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a0:	f7f9 fe48 	bl	8001534 <HAL_GetTick>
 80078a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a8:	f7f9 fe44 	bl	8001534 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e10e      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078c6:	4b36      	ldr	r3, [pc, #216]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80078c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078ca:	4b37      	ldr	r3, [pc, #220]	@ (80079a8 <HAL_RCC_OscConfig+0x774>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80078d6:	0112      	lsls	r2, r2, #4
 80078d8:	430a      	orrs	r2, r1
 80078da:	4931      	ldr	r1, [pc, #196]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	628b      	str	r3, [r1, #40]	@ 0x28
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	3b01      	subs	r3, #1
 80078e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ee:	3b01      	subs	r3, #1
 80078f0:	025b      	lsls	r3, r3, #9
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fa:	3b01      	subs	r3, #1
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007908:	3b01      	subs	r3, #1
 800790a:	061b      	lsls	r3, r3, #24
 800790c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007910:	4923      	ldr	r1, [pc, #140]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007912:	4313      	orrs	r3, r2
 8007914:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007916:	4b22      	ldr	r3, [pc, #136]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	4a21      	ldr	r2, [pc, #132]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007922:	4b1f      	ldr	r3, [pc, #124]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007926:	4b21      	ldr	r3, [pc, #132]	@ (80079ac <HAL_RCC_OscConfig+0x778>)
 8007928:	4013      	ands	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800792e:	00d2      	lsls	r2, r2, #3
 8007930:	491b      	ldr	r1, [pc, #108]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007932:	4313      	orrs	r3, r2
 8007934:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007936:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	f023 020c 	bic.w	r2, r3, #12
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	4917      	ldr	r1, [pc, #92]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007944:	4313      	orrs	r3, r2
 8007946:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007948:	4b15      	ldr	r3, [pc, #84]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	f023 0202 	bic.w	r2, r3, #2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007954:	4912      	ldr	r1, [pc, #72]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007956:	4313      	orrs	r3, r2
 8007958:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800795a:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007966:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	4a0d      	ldr	r2, [pc, #52]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800796c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007972:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	4a0a      	ldr	r2, [pc, #40]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800797c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800797e:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	4a07      	ldr	r2, [pc, #28]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007984:	f043 0301 	orr.w	r3, r3, #1
 8007988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800798a:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a04      	ldr	r2, [pc, #16]	@ (80079a0 <HAL_RCC_OscConfig+0x76c>)
 8007990:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7f9 fdcd 	bl	8001534 <HAL_GetTick>
 800799a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800799c:	e011      	b.n	80079c2 <HAL_RCC_OscConfig+0x78e>
 800799e:	bf00      	nop
 80079a0:	58024400 	.word	0x58024400
 80079a4:	58024800 	.word	0x58024800
 80079a8:	fffffc0c 	.word	0xfffffc0c
 80079ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b0:	f7f9 fdc0 	bl	8001534 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e08a      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079c2:	4b47      	ldr	r3, [pc, #284]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x77c>
 80079ce:	e082      	b.n	8007ad6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d0:	4b43      	ldr	r3, [pc, #268]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a42      	ldr	r2, [pc, #264]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 80079d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079dc:	f7f9 fdaa 	bl	8001534 <HAL_GetTick>
 80079e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e4:	f7f9 fda6 	bl	8001534 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e070      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079f6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x7b0>
 8007a02:	e068      	b.n	8007ad6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a04:	4b36      	ldr	r3, [pc, #216]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a0a:	4b35      	ldr	r3, [pc, #212]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d031      	beq.n	8007a7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f003 0203 	and.w	r2, r3, #3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d12a      	bne.n	8007a7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d122      	bne.n	8007a7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d11a      	bne.n	8007a7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	0a5b      	lsrs	r3, r3, #9
 8007a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d111      	bne.n	8007a7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0c1b      	lsrs	r3, r3, #16
 8007a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d108      	bne.n	8007a7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	0e1b      	lsrs	r3, r3, #24
 8007a6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e02b      	b.n	8007ad8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007a80:	4b17      	ldr	r3, [pc, #92]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a84:	08db      	lsrs	r3, r3, #3
 8007a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d01f      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	4a11      	ldr	r2, [pc, #68]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007aa2:	f7f9 fd47 	bl	8001534 <HAL_GetTick>
 8007aa6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007aa8:	bf00      	nop
 8007aaa:	f7f9 fd43 	bl	8001534 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d0f9      	beq.n	8007aaa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <HAL_RCC_OscConfig+0x8b0>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007ac2:	00d2      	lsls	r2, r2, #3
 8007ac4:	4906      	ldr	r1, [pc, #24]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	4a04      	ldr	r2, [pc, #16]	@ (8007ae0 <HAL_RCC_OscConfig+0x8ac>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3730      	adds	r7, #48	@ 0x30
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	ffff0007 	.word	0xffff0007

08007ae8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e19c      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007afc:	4b8a      	ldr	r3, [pc, #552]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d910      	bls.n	8007b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b0a:	4b87      	ldr	r3, [pc, #540]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f023 020f 	bic.w	r2, r3, #15
 8007b12:	4985      	ldr	r1, [pc, #532]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b1a:	4b83      	ldr	r3, [pc, #524]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d001      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e184      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d010      	beq.n	8007b5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d908      	bls.n	8007b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b48:	4b78      	ldr	r3, [pc, #480]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	4975      	ldr	r1, [pc, #468]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d010      	beq.n	8007b88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695a      	ldr	r2, [r3, #20]
 8007b6a:	4b70      	ldr	r3, [pc, #448]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d908      	bls.n	8007b88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b76:	4b6d      	ldr	r3, [pc, #436]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	496a      	ldr	r1, [pc, #424]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d010      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	4b64      	ldr	r3, [pc, #400]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d908      	bls.n	8007bb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ba4:	4b61      	ldr	r3, [pc, #388]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	495e      	ldr	r1, [pc, #376]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d010      	beq.n	8007be4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69da      	ldr	r2, [r3, #28]
 8007bc6:	4b59      	ldr	r3, [pc, #356]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d908      	bls.n	8007be4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007bd2:	4b56      	ldr	r3, [pc, #344]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	4953      	ldr	r1, [pc, #332]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d010      	beq.n	8007c12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f003 030f 	and.w	r3, r3, #15
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d908      	bls.n	8007c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c00:	4b4a      	ldr	r3, [pc, #296]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f023 020f 	bic.w	r2, r3, #15
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	4947      	ldr	r1, [pc, #284]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d055      	beq.n	8007cca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c1e:	4b43      	ldr	r3, [pc, #268]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	4940      	ldr	r1, [pc, #256]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d107      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c38:	4b3c      	ldr	r3, [pc, #240]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d121      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0f6      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d107      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c50:	4b36      	ldr	r3, [pc, #216]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d115      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0ea      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d107      	bne.n	8007c78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c68:	4b30      	ldr	r3, [pc, #192]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0de      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c78:	4b2c      	ldr	r3, [pc, #176]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0d6      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c88:	4b28      	ldr	r3, [pc, #160]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	f023 0207 	bic.w	r2, r3, #7
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4925      	ldr	r1, [pc, #148]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9a:	f7f9 fc4b 	bl	8001534 <HAL_GetTick>
 8007c9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca0:	e00a      	b.n	8007cb8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca2:	f7f9 fc47 	bl	8001534 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e0be      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d1eb      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d010      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	4b14      	ldr	r3, [pc, #80]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d208      	bcs.n	8007cf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ce6:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f023 020f 	bic.w	r2, r3, #15
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	490e      	ldr	r1, [pc, #56]	@ (8007d2c <HAL_RCC_ClockConfig+0x244>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d214      	bcs.n	8007d30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f023 020f 	bic.w	r2, r3, #15
 8007d0e:	4906      	ldr	r1, [pc, #24]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d16:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <HAL_RCC_ClockConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d005      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e086      	b.n	8007e36 <HAL_RCC_ClockConfig+0x34e>
 8007d28:	52002000 	.word	0x52002000
 8007d2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d010      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	4b3f      	ldr	r3, [pc, #252]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d208      	bcs.n	8007d5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	4939      	ldr	r1, [pc, #228]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d010      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	4b34      	ldr	r3, [pc, #208]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d208      	bcs.n	8007d8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d7a:	4b31      	ldr	r3, [pc, #196]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	492e      	ldr	r1, [pc, #184]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d010      	beq.n	8007dba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	4b28      	ldr	r3, [pc, #160]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d208      	bcs.n	8007dba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007da8:	4b25      	ldr	r3, [pc, #148]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	4922      	ldr	r1, [pc, #136]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d010      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69da      	ldr	r2, [r3, #28]
 8007dca:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d208      	bcs.n	8007de8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	4917      	ldr	r1, [pc, #92]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007de8:	f000 f834 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 8007dec:	4602      	mov	r2, r0
 8007dee:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	4912      	ldr	r1, [pc, #72]	@ (8007e44 <HAL_RCC_ClockConfig+0x35c>)
 8007dfa:	5ccb      	ldrb	r3, [r1, r3]
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e06:	4b0e      	ldr	r3, [pc, #56]	@ (8007e40 <HAL_RCC_ClockConfig+0x358>)
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007e44 <HAL_RCC_ClockConfig+0x35c>)
 8007e10:	5cd3      	ldrb	r3, [r2, r3]
 8007e12:	f003 031f 	and.w	r3, r3, #31
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e48 <HAL_RCC_ClockConfig+0x360>)
 8007e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e20:	4a0a      	ldr	r2, [pc, #40]	@ (8007e4c <HAL_RCC_ClockConfig+0x364>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e26:	4b0a      	ldr	r3, [pc, #40]	@ (8007e50 <HAL_RCC_ClockConfig+0x368>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7f9 f89c 	bl	8000f68 <HAL_InitTick>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
 8007e44:	08012750 	.word	0x08012750
 8007e48:	24000004 	.word	0x24000004
 8007e4c:	24000000 	.word	0x24000000
 8007e50:	24000008 	.word	0x24000008

08007e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b089      	sub	sp, #36	@ 0x24
 8007e58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e5a:	4bb3      	ldr	r3, [pc, #716]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e62:	2b18      	cmp	r3, #24
 8007e64:	f200 8155 	bhi.w	8008112 <HAL_RCC_GetSysClockFreq+0x2be>
 8007e68:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08008113 	.word	0x08008113
 8007e78:	08008113 	.word	0x08008113
 8007e7c:	08008113 	.word	0x08008113
 8007e80:	08008113 	.word	0x08008113
 8007e84:	08008113 	.word	0x08008113
 8007e88:	08008113 	.word	0x08008113
 8007e8c:	08008113 	.word	0x08008113
 8007e90:	08007efb 	.word	0x08007efb
 8007e94:	08008113 	.word	0x08008113
 8007e98:	08008113 	.word	0x08008113
 8007e9c:	08008113 	.word	0x08008113
 8007ea0:	08008113 	.word	0x08008113
 8007ea4:	08008113 	.word	0x08008113
 8007ea8:	08008113 	.word	0x08008113
 8007eac:	08008113 	.word	0x08008113
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08008113 	.word	0x08008113
 8007eb8:	08008113 	.word	0x08008113
 8007ebc:	08008113 	.word	0x08008113
 8007ec0:	08008113 	.word	0x08008113
 8007ec4:	08008113 	.word	0x08008113
 8007ec8:	08008113 	.word	0x08008113
 8007ecc:	08008113 	.word	0x08008113
 8007ed0:	08007f07 	.word	0x08007f07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed4:	4b94      	ldr	r3, [pc, #592]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee0:	4b91      	ldr	r3, [pc, #580]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	08db      	lsrs	r3, r3, #3
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	4a90      	ldr	r2, [pc, #576]	@ (800812c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007ef2:	e111      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ef4:	4b8d      	ldr	r3, [pc, #564]	@ (800812c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef6:	61bb      	str	r3, [r7, #24]
      break;
 8007ef8:	e10e      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007efa:	4b8d      	ldr	r3, [pc, #564]	@ (8008130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007efc:	61bb      	str	r3, [r7, #24]
      break;
 8007efe:	e10b      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f00:	4b8c      	ldr	r3, [pc, #560]	@ (8008134 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f02:	61bb      	str	r3, [r7, #24]
      break;
 8007f04:	e108      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f06:	4b88      	ldr	r3, [pc, #544]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f10:	4b85      	ldr	r3, [pc, #532]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f1c:	4b82      	ldr	r3, [pc, #520]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f26:	4b80      	ldr	r3, [pc, #512]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2a:	08db      	lsrs	r3, r3, #3
 8007f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80e1 	beq.w	800810c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f000 8083 	beq.w	8008058 <HAL_RCC_GetSysClockFreq+0x204>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f200 80a1 	bhi.w	800809c <HAL_RCC_GetSysClockFreq+0x248>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCC_GetSysClockFreq+0x114>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d056      	beq.n	8008014 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f66:	e099      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f68:	4b6f      	ldr	r3, [pc, #444]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02d      	beq.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f74:	4b6c      	ldr	r3, [pc, #432]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800812c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b62      	ldr	r3, [pc, #392]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fb2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007fce:	e087      	b.n	80080e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800813c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b51      	ldr	r3, [pc, #324]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ff6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008012:	e065      	b.n	80080e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008140 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008026:	4b40      	ldr	r3, [pc, #256]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008036:	ed97 6a02 	vldr	s12, [r7, #8]
 800803a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008138 <HAL_RCC_GetSysClockFreq+0x2e4>
 800803e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008056:	e043      	b.n	80080e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008144 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806a:	4b2f      	ldr	r3, [pc, #188]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	ed97 6a02 	vldr	s12, [r7, #8]
 800807e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800809a:	e021      	b.n	80080e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008140 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080be:	ed97 6a02 	vldr	s12, [r7, #8]
 80080c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008138 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80080e0:	4b11      	ldr	r3, [pc, #68]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e4:	0a5b      	lsrs	r3, r3, #9
 80080e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ea:	3301      	adds	r3, #1
 80080ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008104:	ee17 3a90 	vmov	r3, s15
 8008108:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800810a:	e005      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	61bb      	str	r3, [r7, #24]
      break;
 8008110:	e002      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008112:	4b07      	ldr	r3, [pc, #28]	@ (8008130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008114:	61bb      	str	r3, [r7, #24]
      break;
 8008116:	bf00      	nop
  }

  return sysclockfreq;
 8008118:	69bb      	ldr	r3, [r7, #24]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3724      	adds	r7, #36	@ 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	58024400 	.word	0x58024400
 800812c:	03d09000 	.word	0x03d09000
 8008130:	003d0900 	.word	0x003d0900
 8008134:	017d7840 	.word	0x017d7840
 8008138:	46000000 	.word	0x46000000
 800813c:	4c742400 	.word	0x4c742400
 8008140:	4a742400 	.word	0x4a742400
 8008144:	4bbebc20 	.word	0x4bbebc20

08008148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800814e:	f7ff fe81 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 8008152:	4602      	mov	r2, r0
 8008154:	4b10      	ldr	r3, [pc, #64]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x50>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	0a1b      	lsrs	r3, r3, #8
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	490f      	ldr	r1, [pc, #60]	@ (800819c <HAL_RCC_GetHCLKFreq+0x54>)
 8008160:	5ccb      	ldrb	r3, [r1, r3]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	fa22 f303 	lsr.w	r3, r2, r3
 800816a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x50>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	4a09      	ldr	r2, [pc, #36]	@ (800819c <HAL_RCC_GetHCLKFreq+0x54>)
 8008176:	5cd3      	ldrb	r3, [r2, r3]
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008184:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008186:	4a07      	ldr	r2, [pc, #28]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800818e:	681b      	ldr	r3, [r3, #0]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	58024400 	.word	0x58024400
 800819c:	08012750 	.word	0x08012750
 80081a0:	24000004 	.word	0x24000004
 80081a4:	24000000 	.word	0x24000000

080081a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80081ac:	f7ff ffcc 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b06      	ldr	r3, [pc, #24]	@ (80081cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4904      	ldr	r1, [pc, #16]	@ (80081d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58024400 	.word	0x58024400
 80081d0:	08012750 	.word	0x08012750

080081d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081d8:	f7ff ffb6 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	0a1b      	lsrs	r3, r3, #8
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	4904      	ldr	r1, [pc, #16]	@ (80081fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80081ea:	5ccb      	ldrb	r3, [r1, r3]
 80081ec:	f003 031f 	and.w	r3, r3, #31
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	58024400 	.word	0x58024400
 80081fc:	08012750 	.word	0x08012750

08008200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	223f      	movs	r2, #63	@ 0x3f
 800820e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008210:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0207 	and.w	r2, r3, #7
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008228:	4b14      	ldr	r3, [pc, #80]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f003 020f 	and.w	r2, r3, #15
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008234:	4b11      	ldr	r3, [pc, #68]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008240:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008258:	4b08      	ldr	r3, [pc, #32]	@ (800827c <HAL_RCC_GetClockConfig+0x7c>)
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008264:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <HAL_RCC_GetClockConfig+0x80>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 020f 	and.w	r2, r3, #15
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	58024400 	.word	0x58024400
 8008280:	52002000 	.word	0x52002000

08008284 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008288:	b0ca      	sub	sp, #296	@ 0x128
 800828a:	af00      	add	r7, sp, #0
 800828c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008290:	2300      	movs	r3, #0
 8008292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008296:	2300      	movs	r3, #0
 8008298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80082a8:	2500      	movs	r5, #0
 80082aa:	ea54 0305 	orrs.w	r3, r4, r5
 80082ae:	d049      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082ba:	d02f      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80082bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082c0:	d828      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80082c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082c6:	d01a      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80082c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082cc:	d822      	bhi.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80082d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d6:	d007      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082d8:	e01c      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082da:	4bb8      	ldr	r3, [pc, #736]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	4ab7      	ldr	r2, [pc, #732]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082e6:	e01a      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ec:	3308      	adds	r3, #8
 80082ee:	2102      	movs	r1, #2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 fb61 	bl	800a9b8 <RCCEx_PLL2_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082fc:	e00f      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008302:	3328      	adds	r3, #40	@ 0x28
 8008304:	2102      	movs	r1, #2
 8008306:	4618      	mov	r0, r3
 8008308:	f002 fc08 	bl	800ab1c <RCCEx_PLL3_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008312:	e004      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800831a:	e000      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800831c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800831e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008326:	4ba5      	ldr	r3, [pc, #660]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008334:	4aa1      	ldr	r2, [pc, #644]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008336:	430b      	orrs	r3, r1
 8008338:	6513      	str	r3, [r2, #80]	@ 0x50
 800833a:	e003      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008350:	f04f 0900 	mov.w	r9, #0
 8008354:	ea58 0309 	orrs.w	r3, r8, r9
 8008358:	d047      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008360:	2b04      	cmp	r3, #4
 8008362:	d82a      	bhi.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008364:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008381 	.word	0x08008381
 8008370:	0800838f 	.word	0x0800838f
 8008374:	080083a5 	.word	0x080083a5
 8008378:	080083c3 	.word	0x080083c3
 800837c:	080083c3 	.word	0x080083c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008380:	4b8e      	ldr	r3, [pc, #568]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008384:	4a8d      	ldr	r2, [pc, #564]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800838a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800838c:	e01a      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008392:	3308      	adds	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f002 fb0e 	bl	800a9b8 <RCCEx_PLL2_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083a2:	e00f      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a8:	3328      	adds	r3, #40	@ 0x28
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 fbb5 	bl	800ab1c <RCCEx_PLL3_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083b8:	e004      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083c0:	e000      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80083c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083cc:	4b7b      	ldr	r3, [pc, #492]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d0:	f023 0107 	bic.w	r1, r3, #7
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083da:	4a78      	ldr	r2, [pc, #480]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083dc:	430b      	orrs	r3, r1
 80083de:	6513      	str	r3, [r2, #80]	@ 0x50
 80083e0:	e003      	b.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80083ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80083f6:	f04f 0b00 	mov.w	fp, #0
 80083fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80083fe:	d04c      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840a:	d030      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800840c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008410:	d829      	bhi.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008412:	2bc0      	cmp	r3, #192	@ 0xc0
 8008414:	d02d      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008416:	2bc0      	cmp	r3, #192	@ 0xc0
 8008418:	d825      	bhi.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800841a:	2b80      	cmp	r3, #128	@ 0x80
 800841c:	d018      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800841e:	2b80      	cmp	r3, #128	@ 0x80
 8008420:	d821      	bhi.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	d007      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800842a:	e01c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800842c:	4b63      	ldr	r3, [pc, #396]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800842e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008430:	4a62      	ldr	r2, [pc, #392]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008438:	e01c      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843e:	3308      	adds	r3, #8
 8008440:	2100      	movs	r1, #0
 8008442:	4618      	mov	r0, r3
 8008444:	f002 fab8 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800844e:	e011      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008454:	3328      	adds	r3, #40	@ 0x28
 8008456:	2100      	movs	r1, #0
 8008458:	4618      	mov	r0, r3
 800845a:	f002 fb5f 	bl	800ab1c <RCCEx_PLL3_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008464:	e006      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800846c:	e002      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800847c:	4b4f      	ldr	r3, [pc, #316]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800847e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008480:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848a:	4a4c      	ldr	r2, [pc, #304]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800848c:	430b      	orrs	r3, r1
 800848e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008490:	e003      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80084a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80084aa:	2300      	movs	r3, #0
 80084ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80084b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80084b4:	460b      	mov	r3, r1
 80084b6:	4313      	orrs	r3, r2
 80084b8:	d053      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80084c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084c6:	d035      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80084c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084cc:	d82e      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084d2:	d031      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80084d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80084d8:	d828      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084de:	d01a      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80084e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e4:	d822      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80084ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ee:	d007      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80084f0:	e01c      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f2:	4b32      	ldr	r3, [pc, #200]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	4a31      	ldr	r2, [pc, #196]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084fe:	e01c      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	3308      	adds	r3, #8
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f002 fa55 	bl	800a9b8 <RCCEx_PLL2_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008514:	e011      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	3328      	adds	r3, #40	@ 0x28
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f002 fafc 	bl	800ab1c <RCCEx_PLL3_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800852a:	e006      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008532:	e002      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008534:	bf00      	nop
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10b      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008542:	4b1e      	ldr	r3, [pc, #120]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008546:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008552:	4a1a      	ldr	r2, [pc, #104]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008554:	430b      	orrs	r3, r1
 8008556:	6593      	str	r3, [r2, #88]	@ 0x58
 8008558:	e003      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800856e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008572:	2300      	movs	r3, #0
 8008574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008578:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d056      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800858a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800858e:	d038      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008594:	d831      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800859a:	d034      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800859c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085a0:	d82b      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085a6:	d01d      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80085a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ac:	d825      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80085b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085b6:	d00a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80085b8:	e01f      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c0:	4ba2      	ldr	r3, [pc, #648]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	4aa1      	ldr	r2, [pc, #644]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085cc:	e01c      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 f9ee 	bl	800a9b8 <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80085e2:	e011      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e8:	3328      	adds	r3, #40	@ 0x28
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f002 fa95 	bl	800ab1c <RCCEx_PLL3_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085f8:	e006      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008600:	e002      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10b      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008610:	4b8e      	ldr	r3, [pc, #568]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008614:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008620:	4a8a      	ldr	r2, [pc, #552]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008622:	430b      	orrs	r3, r1
 8008624:	6593      	str	r3, [r2, #88]	@ 0x58
 8008626:	e003      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800863c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008646:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800864a:	460b      	mov	r3, r1
 800864c:	4313      	orrs	r3, r2
 800864e:	d03a      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008656:	2b30      	cmp	r3, #48	@ 0x30
 8008658:	d01f      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800865a:	2b30      	cmp	r3, #48	@ 0x30
 800865c:	d819      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800865e:	2b20      	cmp	r3, #32
 8008660:	d00c      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008662:	2b20      	cmp	r3, #32
 8008664:	d815      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d019      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800866a:	2b10      	cmp	r3, #16
 800866c:	d111      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866e:	4b77      	ldr	r3, [pc, #476]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	4a76      	ldr	r2, [pc, #472]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800867a:	e011      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	3308      	adds	r3, #8
 8008682:	2102      	movs	r1, #2
 8008684:	4618      	mov	r0, r3
 8008686:	f002 f997 	bl	800a9b8 <RCCEx_PLL2_Config>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008690:	e006      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008698:	e002      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800869a:	bf00      	nop
 800869c:	e000      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800869e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086a8:	4b68      	ldr	r3, [pc, #416]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b6:	4a65      	ldr	r2, [pc, #404]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086b8:	430b      	orrs	r3, r1
 80086ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086bc:	e003      	b.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80086d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80086d6:	2300      	movs	r3, #0
 80086d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4313      	orrs	r3, r2
 80086e4:	d051      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80086e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086f0:	d035      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80086f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086f6:	d82e      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80086f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086fc:	d031      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80086fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008702:	d828      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008708:	d01a      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800870a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800870e:	d822      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008718:	d007      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800871a:	e01c      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871c:	4b4b      	ldr	r3, [pc, #300]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008720:	4a4a      	ldr	r2, [pc, #296]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008728:	e01c      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872e:	3308      	adds	r3, #8
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f002 f940 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800873e:	e011      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008744:	3328      	adds	r3, #40	@ 0x28
 8008746:	2100      	movs	r1, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f002 f9e7 	bl	800ab1c <RCCEx_PLL3_Config>
 800874e:	4603      	mov	r3, r0
 8008750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008754:	e006      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800875c:	e002      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800875e:	bf00      	nop
 8008760:	e000      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800876c:	4b37      	ldr	r3, [pc, #220]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800876e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008770:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800877a:	4a34      	ldr	r2, [pc, #208]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800877c:	430b      	orrs	r3, r1
 800877e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008780:	e003      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800878a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800879a:	2300      	movs	r3, #0
 800879c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80087a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80087a4:	460b      	mov	r3, r1
 80087a6:	4313      	orrs	r3, r2
 80087a8:	d056      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087b4:	d033      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80087b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087ba:	d82c      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087c0:	d02f      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80087c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087c6:	d826      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087cc:	d02b      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80087ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087d2:	d820      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d8:	d012      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80087da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087de:	d81a      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d022      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80087e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e8:	d115      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ee:	3308      	adds	r3, #8
 80087f0:	2101      	movs	r1, #1
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 f8e0 	bl	800a9b8 <RCCEx_PLL2_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80087fe:	e015      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	3328      	adds	r3, #40	@ 0x28
 8008806:	2101      	movs	r1, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f002 f987 	bl	800ab1c <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008814:	e00a      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800881c:	e006      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800881e:	bf00      	nop
 8008820:	e004      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008822:	bf00      	nop
 8008824:	e002      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800882a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10d      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008838:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008842:	4a02      	ldr	r2, [pc, #8]	@ (800884c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008844:	430b      	orrs	r3, r1
 8008846:	6513      	str	r3, [r2, #80]	@ 0x50
 8008848:	e006      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800884a:	bf00      	nop
 800884c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008868:	2300      	movs	r3, #0
 800886a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800886e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008872:	460b      	mov	r3, r1
 8008874:	4313      	orrs	r3, r2
 8008876:	d055      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008884:	d033      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800888a:	d82c      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008890:	d02f      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008896:	d826      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800889c:	d02b      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800889e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088a2:	d820      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a8:	d012      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80088aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ae:	d81a      	bhi.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d022      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80088b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b8:	d115      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088be:	3308      	adds	r3, #8
 80088c0:	2101      	movs	r1, #1
 80088c2:	4618      	mov	r0, r3
 80088c4:	f002 f878 	bl	800a9b8 <RCCEx_PLL2_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088ce:	e015      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d4:	3328      	adds	r3, #40	@ 0x28
 80088d6:	2101      	movs	r1, #1
 80088d8:	4618      	mov	r0, r3
 80088da:	f002 f91f 	bl	800ab1c <RCCEx_PLL3_Config>
 80088de:	4603      	mov	r3, r0
 80088e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088e4:	e00a      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ec:	e006      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088ee:	bf00      	nop
 80088f0:	e004      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088f2:	bf00      	nop
 80088f4:	e002      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008904:	4ba3      	ldr	r3, [pc, #652]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008908:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008914:	4a9f      	ldr	r2, [pc, #636]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008916:	430b      	orrs	r3, r1
 8008918:	6593      	str	r3, [r2, #88]	@ 0x58
 800891a:	e003      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800893a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	d037      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894e:	d00e      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008954:	d816      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d018      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800895a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800895e:	d111      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008960:	4b8c      	ldr	r3, [pc, #560]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008964:	4a8b      	ldr	r2, [pc, #556]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800896a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800896c:	e00f      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	3308      	adds	r3, #8
 8008974:	2101      	movs	r1, #1
 8008976:	4618      	mov	r0, r3
 8008978:	f002 f81e 	bl	800a9b8 <RCCEx_PLL2_Config>
 800897c:	4603      	mov	r3, r0
 800897e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008982:	e004      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800898a:	e000      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800898c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800898e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008996:	4b7f      	ldr	r3, [pc, #508]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800899a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a4:	4a7b      	ldr	r2, [pc, #492]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a6:	430b      	orrs	r3, r1
 80089a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80089aa:	e003      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80089c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089c4:	2300      	movs	r3, #0
 80089c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80089ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4313      	orrs	r3, r2
 80089d2:	d039      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80089d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d81c      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	08008a21 	.word	0x08008a21
 80089e8:	080089f5 	.word	0x080089f5
 80089ec:	08008a03 	.word	0x08008a03
 80089f0:	08008a21 	.word	0x08008a21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f4:	4b67      	ldr	r3, [pc, #412]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	4a66      	ldr	r2, [pc, #408]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a00:	e00f      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a06:	3308      	adds	r3, #8
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 ffd4 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a16:	e004      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a1e:	e000      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10a      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a2e:	f023 0103 	bic.w	r1, r3, #3
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a38:	4a56      	ldr	r2, [pc, #344]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a3e:	e003      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008a54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008a62:	460b      	mov	r3, r1
 8008a64:	4313      	orrs	r3, r2
 8008a66:	f000 809f 	beq.w	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a76:	f7f8 fd5d 	bl	8001534 <HAL_GetTick>
 8008a7a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a7e:	e00b      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a80:	f7f8 fd58 	bl	8001534 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b64      	cmp	r3, #100	@ 0x64
 8008a8e:	d903      	bls.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a96:	e005      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a98:	4b3f      	ldr	r3, [pc, #252]	@ (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0ed      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d179      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008aac:	4b39      	ldr	r3, [pc, #228]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ab8:	4053      	eors	r3, r2
 8008aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d015      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ac2:	4b34      	ldr	r3, [pc, #208]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad2:	4a30      	ldr	r2, [pc, #192]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ada:	4b2e      	ldr	r3, [pc, #184]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ade:	4a2d      	ldr	r2, [pc, #180]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008aec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008afa:	d118      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afc:	f7f8 fd1a 	bl	8001534 <HAL_GetTick>
 8008b00:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b04:	e00d      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b06:	f7f8 fd15 	bl	8001534 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008b10:	1ad2      	subs	r2, r2, r3
 8008b12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008b20:	e005      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b22:	4b1c      	ldr	r3, [pc, #112]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0eb      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d129      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b46:	d10e      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008b48:	4b12      	ldr	r3, [pc, #72]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b58:	091a      	lsrs	r2, r3, #4
 8008b5a:	4b10      	ldr	r3, [pc, #64]	@ (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6113      	str	r3, [r2, #16]
 8008b64:	e005      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008b66:	4b0b      	ldr	r3, [pc, #44]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008b70:	6113      	str	r3, [r2, #16]
 8008b72:	4b08      	ldr	r3, [pc, #32]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b82:	4a04      	ldr	r2, [pc, #16]	@ (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b88:	e00e      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008b92:	e009      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008b94:	58024400 	.word	0x58024400
 8008b98:	58024800 	.word	0x58024800
 8008b9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f002 0301 	and.w	r3, r2, #1
 8008bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f000 8089 	beq.w	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd0:	2b28      	cmp	r3, #40	@ 0x28
 8008bd2:	d86b      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bda:	bf00      	nop
 8008bdc:	08008cb5 	.word	0x08008cb5
 8008be0:	08008cad 	.word	0x08008cad
 8008be4:	08008cad 	.word	0x08008cad
 8008be8:	08008cad 	.word	0x08008cad
 8008bec:	08008cad 	.word	0x08008cad
 8008bf0:	08008cad 	.word	0x08008cad
 8008bf4:	08008cad 	.word	0x08008cad
 8008bf8:	08008cad 	.word	0x08008cad
 8008bfc:	08008c81 	.word	0x08008c81
 8008c00:	08008cad 	.word	0x08008cad
 8008c04:	08008cad 	.word	0x08008cad
 8008c08:	08008cad 	.word	0x08008cad
 8008c0c:	08008cad 	.word	0x08008cad
 8008c10:	08008cad 	.word	0x08008cad
 8008c14:	08008cad 	.word	0x08008cad
 8008c18:	08008cad 	.word	0x08008cad
 8008c1c:	08008c97 	.word	0x08008c97
 8008c20:	08008cad 	.word	0x08008cad
 8008c24:	08008cad 	.word	0x08008cad
 8008c28:	08008cad 	.word	0x08008cad
 8008c2c:	08008cad 	.word	0x08008cad
 8008c30:	08008cad 	.word	0x08008cad
 8008c34:	08008cad 	.word	0x08008cad
 8008c38:	08008cad 	.word	0x08008cad
 8008c3c:	08008cb5 	.word	0x08008cb5
 8008c40:	08008cad 	.word	0x08008cad
 8008c44:	08008cad 	.word	0x08008cad
 8008c48:	08008cad 	.word	0x08008cad
 8008c4c:	08008cad 	.word	0x08008cad
 8008c50:	08008cad 	.word	0x08008cad
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cad 	.word	0x08008cad
 8008c5c:	08008cb5 	.word	0x08008cb5
 8008c60:	08008cad 	.word	0x08008cad
 8008c64:	08008cad 	.word	0x08008cad
 8008c68:	08008cad 	.word	0x08008cad
 8008c6c:	08008cad 	.word	0x08008cad
 8008c70:	08008cad 	.word	0x08008cad
 8008c74:	08008cad 	.word	0x08008cad
 8008c78:	08008cad 	.word	0x08008cad
 8008c7c:	08008cb5 	.word	0x08008cb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	3308      	adds	r3, #8
 8008c86:	2101      	movs	r1, #1
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 fe95 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008c94:	e00f      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9a:	3328      	adds	r3, #40	@ 0x28
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 ff3c 	bl	800ab1c <RCCEx_PLL3_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008caa:	e004      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cb2:	e000      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cbe:	4bbf      	ldr	r3, [pc, #764]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ccc:	4abb      	ldr	r2, [pc, #748]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008cd2:	e003      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f002 0302 	and.w	r3, r2, #2
 8008ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	d041      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d02:	2b05      	cmp	r3, #5
 8008d04:	d824      	bhi.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d59 	.word	0x08008d59
 8008d10:	08008d25 	.word	0x08008d25
 8008d14:	08008d3b 	.word	0x08008d3b
 8008d18:	08008d59 	.word	0x08008d59
 8008d1c:	08008d59 	.word	0x08008d59
 8008d20:	08008d59 	.word	0x08008d59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d28:	3308      	adds	r3, #8
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fe43 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d38:	e00f      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3e:	3328      	adds	r3, #40	@ 0x28
 8008d40:	2101      	movs	r1, #1
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 feea 	bl	800ab1c <RCCEx_PLL3_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d4e:	e004      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d56:	e000      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d62:	4b96      	ldr	r3, [pc, #600]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d66:	f023 0107 	bic.w	r1, r3, #7
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d70:	4a92      	ldr	r2, [pc, #584]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d76:	e003      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f002 0304 	and.w	r3, r2, #4
 8008d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d90:	2300      	movs	r3, #0
 8008d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	d044      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	d825      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008dac:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008de3 	.word	0x08008de3
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
 8008dc8:	08008e01 	.word	0x08008e01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fdef 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008de0:	e00f      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	3328      	adds	r3, #40	@ 0x28
 8008de8:	2101      	movs	r1, #1
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fe96 	bl	800ab1c <RCCEx_PLL3_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008df6:	e004      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0e:	f023 0107 	bic.w	r1, r3, #7
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e1a:	4a68      	ldr	r2, [pc, #416]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e20:	e003      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f002 0320 	and.w	r3, r2, #32
 8008e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e44:	460b      	mov	r3, r1
 8008e46:	4313      	orrs	r3, r2
 8008e48:	d055      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e56:	d033      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e5c:	d82c      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e62:	d02f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e68:	d826      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e6e:	d02b      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e74:	d820      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e7a:	d012      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e80:	d81a      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d022      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e8a:	d115      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e90:	3308      	adds	r3, #8
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 fd8f 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ea0:	e015      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3328      	adds	r3, #40	@ 0x28
 8008ea8:	2102      	movs	r1, #2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fe36 	bl	800ab1c <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e00a      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ebe:	e006      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ec0:	bf00      	nop
 8008ec2:	e004      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ec4:	bf00      	nop
 8008ec6:	e002      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ed6:	4b39      	ldr	r3, [pc, #228]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee6:	4a35      	ldr	r2, [pc, #212]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eec:	e003      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f06:	2300      	movs	r3, #0
 8008f08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	d058      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f22:	d033      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008f24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f28:	d82c      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2e:	d02f      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f34:	d826      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f3a:	d02b      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f40:	d820      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f46:	d012      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f4c:	d81a      	bhi.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d022      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f56:	d115      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fd29 	bl	800a9b8 <RCCEx_PLL2_Config>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f6c:	e015      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f72:	3328      	adds	r3, #40	@ 0x28
 8008f74:	2102      	movs	r1, #2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 fdd0 	bl	800ab1c <RCCEx_PLL3_Config>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f82:	e00a      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f8a:	e006      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f8c:	bf00      	nop
 8008f8e:	e004      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f90:	bf00      	nop
 8008f92:	e002      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10e      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008fa2:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fb2:	4a02      	ldr	r2, [pc, #8]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008fba:	bf00      	nop
 8008fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d055      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ff0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ff4:	d033      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ff6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ffa:	d82c      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009000:	d02f      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009006:	d826      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009008:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800900c:	d02b      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800900e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009012:	d820      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009018:	d012      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800901a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800901e:	d81a      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d022      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009028:	d115      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902e:	3308      	adds	r3, #8
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f001 fcc0 	bl	800a9b8 <RCCEx_PLL2_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800903e:	e015      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009044:	3328      	adds	r3, #40	@ 0x28
 8009046:	2102      	movs	r1, #2
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fd67 	bl	800ab1c <RCCEx_PLL3_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009054:	e00a      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800905c:	e006      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800905e:	bf00      	nop
 8009060:	e004      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009062:	bf00      	nop
 8009064:	e002      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009066:	bf00      	nop
 8009068:	e000      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800906a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10b      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009074:	4ba1      	ldr	r3, [pc, #644]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009078:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800907c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009084:	4a9d      	ldr	r2, [pc, #628]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009086:	430b      	orrs	r3, r1
 8009088:	6593      	str	r3, [r2, #88]	@ 0x58
 800908a:	e003      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f002 0308 	and.w	r3, r2, #8
 80090a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80090ae:	460b      	mov	r3, r1
 80090b0:	4313      	orrs	r3, r2
 80090b2:	d01e      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80090b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090c0:	d10c      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c6:	3328      	adds	r3, #40	@ 0x28
 80090c8:	2102      	movs	r1, #2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f001 fd26 	bl	800ab1c <RCCEx_PLL3_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80090dc:	4b87      	ldr	r3, [pc, #540]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ec:	4a83      	ldr	r2, [pc, #524]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f002 0310 	and.w	r3, r2, #16
 80090fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009102:	2300      	movs	r3, #0
 8009104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009108:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800910c:	460b      	mov	r3, r1
 800910e:	4313      	orrs	r3, r2
 8009110:	d01e      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800911a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911e:	d10c      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009124:	3328      	adds	r3, #40	@ 0x28
 8009126:	2102      	movs	r1, #2
 8009128:	4618      	mov	r0, r3
 800912a:	f001 fcf7 	bl	800ab1c <RCCEx_PLL3_Config>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800913a:	4b70      	ldr	r3, [pc, #448]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800913c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800914a:	4a6c      	ldr	r2, [pc, #432]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800914c:	430b      	orrs	r3, r1
 800914e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800915c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009160:	2300      	movs	r3, #0
 8009162:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009166:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800916a:	460b      	mov	r3, r1
 800916c:	4313      	orrs	r3, r2
 800916e:	d03e      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800917c:	d022      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800917e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009182:	d81b      	bhi.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800918c:	d00b      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800918e:	e015      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009194:	3308      	adds	r3, #8
 8009196:	2100      	movs	r1, #0
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fc0d 	bl	800a9b8 <RCCEx_PLL2_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091a4:	e00f      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091aa:	3328      	adds	r3, #40	@ 0x28
 80091ac:	2102      	movs	r1, #2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fcb4 	bl	800ab1c <RCCEx_PLL3_Config>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091ba:	e004      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091c2:	e000      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80091c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091ce:	4b4b      	ldr	r3, [pc, #300]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80091d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80091de:	4a47      	ldr	r2, [pc, #284]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80091e4:	e003      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80091fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091fc:	2300      	movs	r3, #0
 80091fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009200:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009204:	460b      	mov	r3, r1
 8009206:	4313      	orrs	r3, r2
 8009208:	d03b      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009212:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009216:	d01f      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800921c:	d818      	bhi.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800921e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009222:	d003      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009224:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009228:	d007      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800922a:	e011      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800922c:	4b33      	ldr	r3, [pc, #204]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	4a32      	ldr	r2, [pc, #200]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009238:	e00f      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	3328      	adds	r3, #40	@ 0x28
 8009240:	2101      	movs	r1, #1
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fc6a 	bl	800ab1c <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800924e:	e004      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009256:	e000      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10b      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009262:	4b26      	ldr	r3, [pc, #152]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009272:	4a22      	ldr	r2, [pc, #136]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009274:	430b      	orrs	r3, r1
 8009276:	6553      	str	r3, [r2, #84]	@ 0x54
 8009278:	e003      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800927e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800928e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009290:	2300      	movs	r3, #0
 8009292:	677b      	str	r3, [r7, #116]	@ 0x74
 8009294:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009298:	460b      	mov	r3, r1
 800929a:	4313      	orrs	r3, r2
 800929c:	d034      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80092a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ac:	d007      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80092ae:	e011      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b0:	4b12      	ldr	r3, [pc, #72]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	4a11      	ldr	r2, [pc, #68]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092bc:	e00e      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c2:	3308      	adds	r3, #8
 80092c4:	2102      	movs	r1, #2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fb76 	bl	800a9b8 <RCCEx_PLL2_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10d      	bne.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80092e4:	4b05      	ldr	r3, [pc, #20]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f2:	4a02      	ldr	r2, [pc, #8]	@ (80092fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092f4:	430b      	orrs	r3, r1
 80092f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092f8:	e006      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80092fa:	bf00      	nop
 80092fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009316:	2300      	movs	r3, #0
 8009318:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800931a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800931e:	460b      	mov	r3, r1
 8009320:	4313      	orrs	r3, r2
 8009322:	d00c      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009328:	3328      	adds	r3, #40	@ 0x28
 800932a:	2102      	movs	r1, #2
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fbf5 	bl	800ab1c <RCCEx_PLL3_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800934a:	663b      	str	r3, [r7, #96]	@ 0x60
 800934c:	2300      	movs	r3, #0
 800934e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009350:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009354:	460b      	mov	r3, r1
 8009356:	4313      	orrs	r3, r2
 8009358:	d038      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009366:	d018      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800936c:	d811      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800936e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009372:	d014      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009378:	d80b      	bhi.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d011      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800937e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009382:	d106      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009384:	4bc3      	ldr	r3, [pc, #780]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	4ac2      	ldr	r2, [pc, #776]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800938a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800938e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009390:	e008      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009398:	e004      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800939a:	bf00      	nop
 800939c:	e002      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800939e:	bf00      	nop
 80093a0:	e000      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093ac:	4bb9      	ldr	r3, [pc, #740]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093bc:	4ab5      	ldr	r2, [pc, #724]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093be:	430b      	orrs	r3, r1
 80093c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80093c2:	e003      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80093d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093da:	2300      	movs	r3, #0
 80093dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80093e2:	460b      	mov	r3, r1
 80093e4:	4313      	orrs	r3, r2
 80093e6:	d009      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093e8:	4baa      	ldr	r3, [pc, #680]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093f6:	4aa7      	ldr	r2, [pc, #668]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093f8:	430b      	orrs	r3, r1
 80093fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80093fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009408:	653b      	str	r3, [r7, #80]	@ 0x50
 800940a:	2300      	movs	r3, #0
 800940c:	657b      	str	r3, [r7, #84]	@ 0x54
 800940e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009412:	460b      	mov	r3, r1
 8009414:	4313      	orrs	r3, r2
 8009416:	d00a      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009418:	4b9e      	ldr	r3, [pc, #632]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009428:	4a9a      	ldr	r2, [pc, #616]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800942a:	430b      	orrs	r3, r1
 800942c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800942e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800943a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943c:	2300      	movs	r3, #0
 800943e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009440:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009444:	460b      	mov	r3, r1
 8009446:	4313      	orrs	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800944a:	4b92      	ldr	r3, [pc, #584]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800944c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800944e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009458:	4a8e      	ldr	r2, [pc, #568]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800945a:	430b      	orrs	r3, r1
 800945c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800945e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800946a:	643b      	str	r3, [r7, #64]	@ 0x40
 800946c:	2300      	movs	r3, #0
 800946e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009470:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009474:	460b      	mov	r3, r1
 8009476:	4313      	orrs	r3, r2
 8009478:	d00e      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800947a:	4b86      	ldr	r3, [pc, #536]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	4a85      	ldr	r2, [pc, #532]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009480:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009484:	6113      	str	r3, [r2, #16]
 8009486:	4b83      	ldr	r3, [pc, #524]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009488:	6919      	ldr	r1, [r3, #16]
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009492:	4a80      	ldr	r2, [pc, #512]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009494:	430b      	orrs	r3, r1
 8009496:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80094a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80094ae:	460b      	mov	r3, r1
 80094b0:	4313      	orrs	r3, r2
 80094b2:	d009      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094b4:	4b77      	ldr	r3, [pc, #476]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c2:	4a74      	ldr	r2, [pc, #464]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094c4:	430b      	orrs	r3, r1
 80094c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80094de:	460b      	mov	r3, r1
 80094e0:	4313      	orrs	r3, r2
 80094e2:	d00a      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094f4:	4a67      	ldr	r2, [pc, #412]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094f6:	430b      	orrs	r3, r1
 80094f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	2100      	movs	r1, #0
 8009504:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800950c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009510:	460b      	mov	r3, r1
 8009512:	4313      	orrs	r3, r2
 8009514:	d011      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	3308      	adds	r3, #8
 800951c:	2100      	movs	r1, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f001 fa4a 	bl	800a9b8 <RCCEx_PLL2_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	2100      	movs	r1, #0
 8009544:	6239      	str	r1, [r7, #32]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
 800954c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009550:	460b      	mov	r3, r1
 8009552:	4313      	orrs	r3, r2
 8009554:	d011      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955a:	3308      	adds	r3, #8
 800955c:	2101      	movs	r1, #1
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fa2a 	bl	800a9b8 <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800956a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	2100      	movs	r1, #0
 8009584:	61b9      	str	r1, [r7, #24]
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009590:	460b      	mov	r3, r1
 8009592:	4313      	orrs	r3, r2
 8009594:	d011      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959a:	3308      	adds	r3, #8
 800959c:	2102      	movs	r1, #2
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fa0a 	bl	800a9b8 <RCCEx_PLL2_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80095aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	2100      	movs	r1, #0
 80095c4:	6139      	str	r1, [r7, #16]
 80095c6:	f003 0308 	and.w	r3, r3, #8
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80095d0:	460b      	mov	r3, r1
 80095d2:	4313      	orrs	r3, r2
 80095d4:	d011      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	3328      	adds	r3, #40	@ 0x28
 80095dc:	2100      	movs	r1, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fa9c 	bl	800ab1c <RCCEx_PLL3_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80095ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	2100      	movs	r1, #0
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	f003 0310 	and.w	r3, r3, #16
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d011      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	3328      	adds	r3, #40	@ 0x28
 800961c:	2101      	movs	r1, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fa7c 	bl	800ab1c <RCCEx_PLL3_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800962a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800963a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	2100      	movs	r1, #0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	607b      	str	r3, [r7, #4]
 800964c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009650:	460b      	mov	r3, r1
 8009652:	4313      	orrs	r3, r2
 8009654:	d011      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	3328      	adds	r3, #40	@ 0x28
 800965c:	2102      	movs	r1, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fa5c 	bl	800ab1c <RCCEx_PLL3_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800966a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800967a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	e000      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
}
 8009688:	4618      	mov	r0, r3
 800968a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800968e:	46bd      	mov	sp, r7
 8009690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009694:	58024400 	.word	0x58024400

08009698 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b090      	sub	sp, #64	@ 0x40
 800969c:	af00      	add	r7, sp, #0
 800969e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80096a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80096aa:	430b      	orrs	r3, r1
 80096ac:	f040 8094 	bne.w	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80096b0:	4b9e      	ldr	r3, [pc, #632]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	2b04      	cmp	r3, #4
 80096be:	f200 8087 	bhi.w	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096dd 	.word	0x080096dd
 80096cc:	08009705 	.word	0x08009705
 80096d0:	0800972d 	.word	0x0800972d
 80096d4:	080097c9 	.word	0x080097c9
 80096d8:	08009755 	.word	0x08009755
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096dc:	4b93      	ldr	r3, [pc, #588]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096e8:	d108      	bne.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 f810 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096f8:	f000 bd45 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009700:	f000 bd41 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009704:	4b89      	ldr	r3, [pc, #548]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800970c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009710:	d108      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009712:	f107 0318 	add.w	r3, r7, #24
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fd54 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009720:	f000 bd31 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009728:	f000 bd2d 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800972c:	4b7f      	ldr	r3, [pc, #508]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009738:	d108      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fe94 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009748:	f000 bd1d 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009750:	f000 bd19 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009754:	4b75      	ldr	r3, [pc, #468]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800975c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975e:	4b73      	ldr	r3, [pc, #460]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b04      	cmp	r3, #4
 8009768:	d10c      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800976a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976c:	2b00      	cmp	r3, #0
 800976e:	d109      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009770:	4b6e      	ldr	r3, [pc, #440]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	08db      	lsrs	r3, r3, #3
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	4a6d      	ldr	r2, [pc, #436]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009782:	e01f      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009784:	4b69      	ldr	r3, [pc, #420]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009790:	d106      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009798:	d102      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800979a:	4b66      	ldr	r3, [pc, #408]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800979c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800979e:	e011      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097a0:	4b62      	ldr	r3, [pc, #392]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097ac:	d106      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80097ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b4:	d102      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097b6:	4b60      	ldr	r3, [pc, #384]	@ (8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097c0:	f000 bce1 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097c4:	f000 bcdf 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097c8:	4b5c      	ldr	r3, [pc, #368]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097cc:	f000 bcdb 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d4:	f000 bcd7 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80097e0:	430b      	orrs	r3, r1
 80097e2:	f040 80ad 	bne.w	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80097e6:	4b51      	ldr	r3, [pc, #324]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097f6:	d056      	beq.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fe:	f200 8090 	bhi.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	2bc0      	cmp	r3, #192	@ 0xc0
 8009806:	f000 8088 	beq.w	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	2bc0      	cmp	r3, #192	@ 0xc0
 800980e:	f200 8088 	bhi.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009814:	2b80      	cmp	r3, #128	@ 0x80
 8009816:	d032      	beq.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981a:	2b80      	cmp	r3, #128	@ 0x80
 800981c:	f200 8081 	bhi.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	2b40      	cmp	r3, #64	@ 0x40
 800982a:	d014      	beq.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800982c:	e079      	b.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800982e:	4b3f      	ldr	r3, [pc, #252]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800983a:	d108      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800983c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009840:	4618      	mov	r0, r3
 8009842:	f000 ff67 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800984a:	f000 bc9c 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009852:	f000 bc98 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009856:	4b35      	ldr	r3, [pc, #212]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800985e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009862:	d108      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009864:	f107 0318 	add.w	r3, r7, #24
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fcab 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009872:	f000 bc88 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987a:	f000 bc84 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800987e:	4b2b      	ldr	r3, [pc, #172]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800988a:	d108      	bne.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fdeb 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800989a:	f000 bc74 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a2:	f000 bc70 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098a6:	4b21      	ldr	r3, [pc, #132]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098b0:	4b1e      	ldr	r3, [pc, #120]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d10c      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80098bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d109      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098c2:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	4a18      	ldr	r2, [pc, #96]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80098ce:	fa22 f303 	lsr.w	r3, r2, r3
 80098d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d4:	e01f      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098d6:	4b15      	ldr	r3, [pc, #84]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098e2:	d106      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098ea:	d102      	bne.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098ec:	4b11      	ldr	r3, [pc, #68]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f0:	e011      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098f2:	4b0e      	ldr	r3, [pc, #56]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fe:	d106      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009906:	d102      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009908:	4b0b      	ldr	r3, [pc, #44]	@ (8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009912:	f000 bc38 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009916:	f000 bc36 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800991a:	4b08      	ldr	r3, [pc, #32]	@ (800993c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800991c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800991e:	f000 bc32 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009926:	f000 bc2e 	b.w	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800992a:	bf00      	nop
 800992c:	58024400 	.word	0x58024400
 8009930:	03d09000 	.word	0x03d09000
 8009934:	003d0900 	.word	0x003d0900
 8009938:	017d7840 	.word	0x017d7840
 800993c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009944:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009948:	430b      	orrs	r3, r1
 800994a:	f040 809c 	bne.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800994e:	4b9e      	ldr	r3, [pc, #632]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009952:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009956:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800995e:	d054      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009966:	f200 808b 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009970:	f000 8083 	beq.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800997a:	f200 8081 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009984:	d02f      	beq.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800998c:	d878      	bhi.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800999a:	d012      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800999c:	e070      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800999e:	4b8a      	ldr	r3, [pc, #552]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099aa:	d107      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 feaf 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ba:	e3e4      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c0:	e3e1      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099c2:	4b81      	ldr	r3, [pc, #516]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ce:	d107      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d0:	f107 0318 	add.w	r3, r7, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fbf5 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099de:	e3d2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e3cf      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099e6:	4b78      	ldr	r3, [pc, #480]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099f2:	d107      	bne.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fd37 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a02:	e3c0      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a08:	e3bd      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a14:	4b6c      	ldr	r3, [pc, #432]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d10c      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d109      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a26:	4b68      	ldr	r3, [pc, #416]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	08db      	lsrs	r3, r3, #3
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	4a66      	ldr	r2, [pc, #408]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a32:	fa22 f303 	lsr.w	r3, r2, r3
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a38:	e01e      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a3a:	4b63      	ldr	r3, [pc, #396]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a46:	d106      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a4e:	d102      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a50:	4b5f      	ldr	r3, [pc, #380]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a54:	e010      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a56:	4b5c      	ldr	r3, [pc, #368]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a62:	d106      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a6a:	d102      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a6c:	4b59      	ldr	r3, [pc, #356]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a70:	e002      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a76:	e386      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a78:	e385      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a7a:	4b57      	ldr	r3, [pc, #348]	@ (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a7e:	e382      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e37f      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	f040 80a7 	bne.w	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009a94:	4b4c      	ldr	r3, [pc, #304]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a98:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009a9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009aa4:	d055      	beq.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009aac:	f200 8096 	bhi.w	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ab6:	f000 8084 	beq.w	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ac0:	f200 808c 	bhi.w	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009aca:	d030      	beq.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ad2:	f200 8083 	bhi.w	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ae2:	d012      	beq.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009ae4:	e07a      	b.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ae6:	4b38      	ldr	r3, [pc, #224]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009af2:	d107      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fe0b 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b02:	e340      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b08:	e33d      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b16:	d107      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b18:	f107 0318 	add.w	r3, r7, #24
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fb51 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b26:	e32e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2c:	e32b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b2e:	4b26      	ldr	r3, [pc, #152]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b3a:	d107      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fc93 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b4a:	e31c      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	e319      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b52:	4b1d      	ldr	r3, [pc, #116]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d10c      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d109      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b6e:	4b16      	ldr	r3, [pc, #88]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	4a14      	ldr	r2, [pc, #80]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b80:	e01e      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b82:	4b11      	ldr	r3, [pc, #68]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8e:	d106      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b96:	d102      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b98:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b9c:	e010      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009baa:	d106      	bne.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bb2:	d102      	bne.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bb4:	4b07      	ldr	r3, [pc, #28]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bbe:	e2e2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bc0:	e2e1      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bc2:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc6:	e2de      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	03d09000 	.word	0x03d09000
 8009bd0:	003d0900 	.word	0x003d0900
 8009bd4:	017d7840 	.word	0x017d7840
 8009bd8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be0:	e2d1      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009bea:	430b      	orrs	r3, r1
 8009bec:	f040 809c 	bne.w	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009bf0:	4b93      	ldr	r3, [pc, #588]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009bf8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c00:	d054      	beq.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c08:	f200 808b 	bhi.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c12:	f000 8083 	beq.w	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c1c:	f200 8081 	bhi.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c26:	d02f      	beq.n	8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c2e:	d878      	bhi.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d004      	beq.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3c:	d012      	beq.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009c3e:	e070      	b.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c40:	4b7f      	ldr	r3, [pc, #508]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c4c:	d107      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fd5e 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c5c:	e293      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c62:	e290      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c64:	4b76      	ldr	r3, [pc, #472]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c70:	d107      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c72:	f107 0318 	add.w	r3, r7, #24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 faa4 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c80:	e281      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c86:	e27e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c88:	4b6d      	ldr	r3, [pc, #436]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c94:	d107      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fbe6 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca4:	e26f      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009caa:	e26c      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cac:	4b64      	ldr	r3, [pc, #400]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cb6:	4b62      	ldr	r3, [pc, #392]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d10c      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d109      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	08db      	lsrs	r3, r3, #3
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cda:	e01e      	b.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cdc:	4b58      	ldr	r3, [pc, #352]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce8:	d106      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cf0:	d102      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cf2:	4b55      	ldr	r3, [pc, #340]	@ (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf6:	e010      	b.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cf8:	4b51      	ldr	r3, [pc, #324]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d04:	d106      	bne.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d0c:	d102      	bne.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d12:	e002      	b.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d18:	e235      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d1a:	e234      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d20:	e231      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d26:	e22e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009d30:	430b      	orrs	r3, r1
 8009d32:	f040 808f 	bne.w	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009d36:	4b42      	ldr	r3, [pc, #264]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d46:	d06b      	beq.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d4e:	d874      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d56:	d056      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d5e:	d86c      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d66:	d03b      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009d6e:	d864      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d76:	d021      	beq.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d7e:	d85c      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d8c:	d004      	beq.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009d8e:	e054      	b.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009d90:	f7fe fa0a 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8009d94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d96:	e1f6      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d98:	4b29      	ldr	r3, [pc, #164]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009da4:	d107      	bne.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da6:	f107 0318 	add.w	r3, r7, #24
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fa0a 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db4:	e1e7      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dba:	e1e4      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dbc:	4b20      	ldr	r3, [pc, #128]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc8:	d107      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fb4c 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dd8:	e1d5      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dde:	e1d2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009de0:	4b17      	ldr	r3, [pc, #92]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d109      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dec:	4b14      	ldr	r3, [pc, #80]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	08db      	lsrs	r3, r3, #3
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	4a13      	ldr	r2, [pc, #76]	@ (8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfe:	e1c2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e04:	e1bf      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e06:	4b0e      	ldr	r3, [pc, #56]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e12:	d102      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e18:	e1b5      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1e:	e1b2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e20:	4b07      	ldr	r3, [pc, #28]	@ (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e2c:	d102      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009e2e:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e32:	e1a8      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e38:	e1a5      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3e:	e1a2      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e40:	58024400 	.word	0x58024400
 8009e44:	03d09000 	.word	0x03d09000
 8009e48:	003d0900 	.word	0x003d0900
 8009e4c:	017d7840 	.word	0x017d7840
 8009e50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	d173      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009e60:	4b9c      	ldr	r3, [pc, #624]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e70:	d02f      	beq.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e78:	d863      	bhi.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e86:	d012      	beq.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009e88:	e05b      	b.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e8a:	4b92      	ldr	r3, [pc, #584]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e96:	d107      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e98:	f107 0318 	add.w	r3, r7, #24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f991 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea6:	e16e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eac:	e16b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009eae:	4b89      	ldr	r3, [pc, #548]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eba:	d107      	bne.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ebc:	f107 030c 	add.w	r3, r7, #12
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fad3 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eca:	e15c      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed0:	e159      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ed2:	4b80      	ldr	r3, [pc, #512]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009eda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009edc:	4b7d      	ldr	r3, [pc, #500]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d10c      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d109      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009eee:	4b79      	ldr	r3, [pc, #484]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	4a77      	ldr	r2, [pc, #476]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009efa:	fa22 f303 	lsr.w	r3, r2, r3
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f00:	e01e      	b.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f02:	4b74      	ldr	r3, [pc, #464]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f0e:	d106      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f16:	d102      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f18:	4b70      	ldr	r3, [pc, #448]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f1c:	e010      	b.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f1e:	4b6d      	ldr	r3, [pc, #436]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f32:	d102      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f34:	4b6a      	ldr	r3, [pc, #424]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f38:	e002      	b.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f3e:	e122      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f40:	e121      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f46:	e11e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009f50:	430b      	orrs	r3, r1
 8009f52:	d133      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009f54:	4b5f      	ldr	r3, [pc, #380]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f6a:	d012      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009f6c:	e023      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f6e:	4b59      	ldr	r3, [pc, #356]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fbc7 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8a:	e0fc      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	e0f9      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f92:	4b50      	ldr	r3, [pc, #320]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fa0:	f107 0318 	add.w	r3, r7, #24
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f90d 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fae:	e0ea      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fb4:	e0e7      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fba:	e0e4      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	f040 808d 	bne.w	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009fca:	4b42      	ldr	r3, [pc, #264]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009fd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fda:	d06b      	beq.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fe2:	d874      	bhi.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fea:	d056      	beq.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff2:	d86c      	bhi.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ffa:	d03b      	beq.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a002:	d864      	bhi.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a00a:	d021      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a012:	d85c      	bhi.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a020:	d004      	beq.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a022:	e054      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a024:	f000 f8b8 	bl	800a198 <HAL_RCCEx_GetD3PCLK1Freq>
 800a028:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a02a:	e0ac      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a02c:	4b29      	ldr	r3, [pc, #164]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a038:	d107      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a03a:	f107 0318 	add.w	r3, r7, #24
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 f8c0 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a048:	e09d      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04e:	e09a      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a050:	4b20      	ldr	r3, [pc, #128]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05c:	d107      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05e:	f107 030c 	add.w	r3, r7, #12
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fa02 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06c:	e08b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a072:	e088      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a074:	4b17      	ldr	r3, [pc, #92]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d109      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a080:	4b14      	ldr	r3, [pc, #80]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	08db      	lsrs	r3, r3, #3
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	4a13      	ldr	r2, [pc, #76]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a08c:	fa22 f303 	lsr.w	r3, r2, r3
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a092:	e078      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	e075      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a09a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0a6:	d102      	bne.n	800a0ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ac:	e06b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b2:	e068      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0b4:	4b07      	ldr	r3, [pc, #28]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0c0:	d102      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a0c2:	4b07      	ldr	r3, [pc, #28]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c6:	e05e      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0cc:	e05b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d2:	e058      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	03d09000 	.word	0x03d09000
 800a0dc:	003d0900 	.word	0x003d0900
 800a0e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a0e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	d148      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a0f0:	4b27      	ldr	r3, [pc, #156]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a100:	d02a      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a108:	d838      	bhi.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a116:	d00d      	beq.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a118:	e030      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a11a:	4b1d      	ldr	r3, [pc, #116]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a126:	d102      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a128:	4b1a      	ldr	r3, [pc, #104]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a12c:	e02b      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a132:	e028      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a134:	4b16      	ldr	r3, [pc, #88]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a13c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a140:	d107      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fae4 	bl	800a714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a150:	e019      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a156:	e016      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a158:	4b0d      	ldr	r3, [pc, #52]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a164:	d107      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a166:	f107 0318 	add.w	r3, r7, #24
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f82a 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a174:	e007      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a17a:	e004      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a180:	e001      	b.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3740      	adds	r7, #64	@ 0x40
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	58024400 	.word	0x58024400
 800a194:	017d7840 	.word	0x017d7840

0800a198 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a19c:	f7fd ffd4 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	4b06      	ldr	r3, [pc, #24]	@ (800a1bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	091b      	lsrs	r3, r3, #4
 800a1a8:	f003 0307 	and.w	r3, r3, #7
 800a1ac:	4904      	ldr	r1, [pc, #16]	@ (800a1c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a1ae:	5ccb      	ldrb	r3, [r1, r3]
 800a1b0:	f003 031f 	and.w	r3, r3, #31
 800a1b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	58024400 	.word	0x58024400
 800a1c0:	08012750 	.word	0x08012750

0800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b089      	sub	sp, #36	@ 0x24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1cc:	4ba1      	ldr	r3, [pc, #644]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d0:	f003 0303 	and.w	r3, r3, #3
 800a1d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a1d6:	4b9f      	ldr	r3, [pc, #636]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1da:	0b1b      	lsrs	r3, r3, #12
 800a1dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a1e2:	4b9c      	ldr	r3, [pc, #624]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e6:	091b      	lsrs	r3, r3, #4
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a1ee:	4b99      	ldr	r3, [pc, #612]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f2:	08db      	lsrs	r3, r3, #3
 800a1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	fb02 f303 	mul.w	r3, r2, r3
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8111 	beq.w	800a434 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b02      	cmp	r3, #2
 800a216:	f000 8083 	beq.w	800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	f200 80a1 	bhi.w	800a364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d056      	beq.n	800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a22e:	e099      	b.n	800a364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a230:	4b88      	ldr	r3, [pc, #544]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d02d      	beq.n	800a298 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23c:	4b85      	ldr	r3, [pc, #532]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	08db      	lsrs	r3, r3, #3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	4a84      	ldr	r2, [pc, #528]	@ (800a458 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
 800a24c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a266:	4b7b      	ldr	r3, [pc, #492]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a45c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a292:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a296:	e087      	b.n	800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a460 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2aa:	4b6a      	ldr	r3, [pc, #424]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a45c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2da:	e065      	b.n	800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	ee07 3a90 	vmov	s15, r3
 800a2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ee:	4b59      	ldr	r3, [pc, #356]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a302:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a45c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a31e:	e043      	b.n	800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a332:	4b48      	ldr	r3, [pc, #288]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a342:	ed97 6a03 	vldr	s12, [r7, #12]
 800a346:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a45c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a362:	e021      	b.n	800a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a376:	4b37      	ldr	r3, [pc, #220]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a45c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a3a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ac:	0a5b      	lsrs	r3, r3, #9
 800a3ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ce:	ee17 2a90 	vmov	r2, s15
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a3d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3da:	0c1b      	lsrs	r3, r3, #16
 800a3dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3e0:	ee07 3a90 	vmov	s15, r3
 800a3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fc:	ee17 2a90 	vmov	r2, s15
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a404:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a408:	0e1b      	lsrs	r3, r3, #24
 800a40a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a41a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a41e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42a:	ee17 2a90 	vmov	r2, s15
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a432:	e008      	b.n	800a446 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	609a      	str	r2, [r3, #8]
}
 800a446:	bf00      	nop
 800a448:	3724      	adds	r7, #36	@ 0x24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	46000000 	.word	0x46000000
 800a460:	4c742400 	.word	0x4c742400
 800a464:	4a742400 	.word	0x4a742400
 800a468:	4bbebc20 	.word	0x4bbebc20

0800a46c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b089      	sub	sp, #36	@ 0x24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a474:	4ba1      	ldr	r3, [pc, #644]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a47e:	4b9f      	ldr	r3, [pc, #636]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a482:	0d1b      	lsrs	r3, r3, #20
 800a484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a488:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a48a:	4b9c      	ldr	r3, [pc, #624]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48e:	0a1b      	lsrs	r3, r3, #8
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a496:	4b99      	ldr	r3, [pc, #612]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a49a:	08db      	lsrs	r3, r3, #3
 800a49c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	fb02 f303 	mul.w	r3, r2, r3
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8111 	beq.w	800a6dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	f000 8083 	beq.w	800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	f200 80a1 	bhi.w	800a60c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d056      	beq.n	800a584 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a4d6:	e099      	b.n	800a60c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4d8:	4b88      	ldr	r3, [pc, #544]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d02d      	beq.n	800a540 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e4:	4b85      	ldr	r3, [pc, #532]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	08db      	lsrs	r3, r3, #3
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	4a84      	ldr	r2, [pc, #528]	@ (800a700 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	ee07 3a90 	vmov	s15, r3
 800a4fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50e:	4b7b      	ldr	r3, [pc, #492]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a522:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a53e:	e087      	b.n	800a650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	ee07 3a90 	vmov	s15, r3
 800a546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a708 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a552:	4b6a      	ldr	r3, [pc, #424]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a562:	ed97 6a03 	vldr	s12, [r7, #12]
 800a566:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a582:	e065      	b.n	800a650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a70c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a596:	4b59      	ldr	r3, [pc, #356]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5c6:	e043      	b.n	800a650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	ee07 3a90 	vmov	s15, r3
 800a5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5da:	4b48      	ldr	r3, [pc, #288]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a60a:	e021      	b.n	800a650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	ee07 3a90 	vmov	s15, r3
 800a612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a616:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a70c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61e:	4b37      	ldr	r3, [pc, #220]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a632:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a64e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a650:	4b2a      	ldr	r3, [pc, #168]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a654:	0a5b      	lsrs	r3, r3, #9
 800a656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a66e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a676:	ee17 2a90 	vmov	r2, s15
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a67e:	4b1f      	ldr	r3, [pc, #124]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a682:	0c1b      	lsrs	r3, r3, #16
 800a684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a688:	ee07 3a90 	vmov	s15, r3
 800a68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a694:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a698:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a4:	ee17 2a90 	vmov	r2, s15
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a6ac:	4b13      	ldr	r3, [pc, #76]	@ (800a6fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b0:	0e1b      	lsrs	r3, r3, #24
 800a6b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d2:	ee17 2a90 	vmov	r2, s15
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a6da:	e008      	b.n	800a6ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	609a      	str	r2, [r3, #8]
}
 800a6ee:	bf00      	nop
 800a6f0:	3724      	adds	r7, #36	@ 0x24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	58024400 	.word	0x58024400
 800a700:	03d09000 	.word	0x03d09000
 800a704:	46000000 	.word	0x46000000
 800a708:	4c742400 	.word	0x4c742400
 800a70c:	4a742400 	.word	0x4a742400
 800a710:	4bbebc20 	.word	0x4bbebc20

0800a714 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a714:	b480      	push	{r7}
 800a716:	b089      	sub	sp, #36	@ 0x24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a71c:	4ba0      	ldr	r3, [pc, #640]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a720:	f003 0303 	and.w	r3, r3, #3
 800a724:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a726:	4b9e      	ldr	r3, [pc, #632]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72a:	091b      	lsrs	r3, r3, #4
 800a72c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a730:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a732:	4b9b      	ldr	r3, [pc, #620]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a73c:	4b98      	ldr	r3, [pc, #608]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a73e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a740:	08db      	lsrs	r3, r3, #3
 800a742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	fb02 f303 	mul.w	r3, r2, r3
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a754:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8111 	beq.w	800a982 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	2b02      	cmp	r3, #2
 800a764:	f000 8083 	beq.w	800a86e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	f200 80a1 	bhi.w	800a8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d056      	beq.n	800a82a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a77c:	e099      	b.n	800a8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a77e:	4b88      	ldr	r3, [pc, #544]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b00      	cmp	r3, #0
 800a788:	d02d      	beq.n	800a7e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a78a:	4b85      	ldr	r3, [pc, #532]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	08db      	lsrs	r3, r3, #3
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	4a83      	ldr	r2, [pc, #524]	@ (800a9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a796:	fa22 f303 	lsr.w	r3, r2, r3
 800a79a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	ee07 3a90 	vmov	s15, r3
 800a7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b4:	4b7a      	ldr	r3, [pc, #488]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7e4:	e087      	b.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f8:	4b69      	ldr	r3, [pc, #420]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a808:	ed97 6a03 	vldr	s12, [r7, #12]
 800a80c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a818:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a828:	e065      	b.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	ee07 3a90 	vmov	s15, r3
 800a830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a834:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83c:	4b58      	ldr	r3, [pc, #352]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a83e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a844:	ee07 3a90 	vmov	s15, r3
 800a848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a850:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a86c:	e043      	b.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a878:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a87c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a880:	4b47      	ldr	r3, [pc, #284]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a888:	ee07 3a90 	vmov	s15, r3
 800a88c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a890:	ed97 6a03 	vldr	s12, [r7, #12]
 800a894:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8b0:	e021      	b.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a9ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c4:	4b36      	ldr	r3, [pc, #216]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8cc:	ee07 3a90 	vmov	s15, r3
 800a8d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a8f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8fa:	0a5b      	lsrs	r3, r3, #9
 800a8fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a90c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a910:	edd7 6a07 	vldr	s13, [r7, #28]
 800a914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91c:	ee17 2a90 	vmov	r2, s15
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a924:	4b1e      	ldr	r3, [pc, #120]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a928:	0c1b      	lsrs	r3, r3, #16
 800a92a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a936:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a93a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94a:	ee17 2a90 	vmov	r2, s15
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a952:	4b13      	ldr	r3, [pc, #76]	@ (800a9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a956:	0e1b      	lsrs	r3, r3, #24
 800a958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a964:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a96c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a978:	ee17 2a90 	vmov	r2, s15
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a980:	e008      	b.n	800a994 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	609a      	str	r2, [r3, #8]
}
 800a994:	bf00      	nop
 800a996:	3724      	adds	r7, #36	@ 0x24
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	58024400 	.word	0x58024400
 800a9a4:	03d09000 	.word	0x03d09000
 800a9a8:	46000000 	.word	0x46000000
 800a9ac:	4c742400 	.word	0x4c742400
 800a9b0:	4a742400 	.word	0x4a742400
 800a9b4:	4bbebc20 	.word	0x4bbebc20

0800a9b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9c6:	4b53      	ldr	r3, [pc, #332]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d101      	bne.n	800a9d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e099      	b.n	800ab0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a9d6:	4b4f      	ldr	r3, [pc, #316]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a4e      	ldr	r2, [pc, #312]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800a9dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9e2:	f7f6 fda7 	bl	8001534 <HAL_GetTick>
 800a9e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9e8:	e008      	b.n	800a9fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9ea:	f7f6 fda3 	bl	8001534 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d901      	bls.n	800a9fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e086      	b.n	800ab0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9fc:	4b45      	ldr	r3, [pc, #276]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1f0      	bne.n	800a9ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa08:	4b42      	ldr	r3, [pc, #264]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	031b      	lsls	r3, r3, #12
 800aa16:	493f      	ldr	r1, [pc, #252]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	025b      	lsls	r3, r3, #9
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	431a      	orrs	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	041b      	lsls	r3, r3, #16
 800aa3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	061b      	lsls	r3, r3, #24
 800aa48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa4c:	4931      	ldr	r1, [pc, #196]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa52:	4b30      	ldr	r3, [pc, #192]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	492d      	ldr	r1, [pc, #180]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa64:	4b2b      	ldr	r3, [pc, #172]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	f023 0220 	bic.w	r2, r3, #32
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	4928      	ldr	r1, [pc, #160]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aa76:	4b27      	ldr	r3, [pc, #156]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7a:	4a26      	ldr	r2, [pc, #152]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa7c:	f023 0310 	bic.w	r3, r3, #16
 800aa80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa82:	4b24      	ldr	r3, [pc, #144]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa86:	4b24      	ldr	r3, [pc, #144]	@ (800ab18 <RCCEx_PLL2_Config+0x160>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	69d2      	ldr	r2, [r2, #28]
 800aa8e:	00d2      	lsls	r2, r2, #3
 800aa90:	4920      	ldr	r1, [pc, #128]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aa96:	4b1f      	ldr	r3, [pc, #124]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aa9c:	f043 0310 	orr.w	r3, r3, #16
 800aaa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aaaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaac:	4a19      	ldr	r2, [pc, #100]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aaae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aab4:	e00f      	b.n	800aad6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d106      	bne.n	800aaca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aabc:	4b15      	ldr	r3, [pc, #84]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac0:	4a14      	ldr	r2, [pc, #80]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aac6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aac8:	e005      	b.n	800aad6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aaca:	4b12      	ldr	r3, [pc, #72]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aace:	4a11      	ldr	r2, [pc, #68]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aad6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a0e      	ldr	r2, [pc, #56]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aadc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aae2:	f7f6 fd27 	bl	8001534 <HAL_GetTick>
 800aae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aae8:	e008      	b.n	800aafc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aaea:	f7f6 fd23 	bl	8001534 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d901      	bls.n	800aafc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e006      	b.n	800ab0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aafc:	4b05      	ldr	r3, [pc, #20]	@ (800ab14 <RCCEx_PLL2_Config+0x15c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0f0      	beq.n	800aaea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	58024400 	.word	0x58024400
 800ab18:	ffff0007 	.word	0xffff0007

0800ab1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab2a:	4b53      	ldr	r3, [pc, #332]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2e:	f003 0303 	and.w	r3, r3, #3
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d101      	bne.n	800ab3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e099      	b.n	800ac6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab3a:	4b4f      	ldr	r3, [pc, #316]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a4e      	ldr	r2, [pc, #312]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab46:	f7f6 fcf5 	bl	8001534 <HAL_GetTick>
 800ab4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab4c:	e008      	b.n	800ab60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab4e:	f7f6 fcf1 	bl	8001534 <HAL_GetTick>
 800ab52:	4602      	mov	r2, r0
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d901      	bls.n	800ab60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e086      	b.n	800ac6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab60:	4b45      	ldr	r3, [pc, #276]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1f0      	bne.n	800ab4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab6c:	4b42      	ldr	r3, [pc, #264]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	493f      	ldr	r1, [pc, #252]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	025b      	lsls	r3, r3, #9
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	041b      	lsls	r3, r3, #16
 800ab9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aba2:	431a      	orrs	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	061b      	lsls	r3, r3, #24
 800abac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800abb0:	4931      	ldr	r1, [pc, #196]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800abb6:	4b30      	ldr	r3, [pc, #192]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	492d      	ldr	r1, [pc, #180]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800abc8:	4b2b      	ldr	r3, [pc, #172]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	4928      	ldr	r1, [pc, #160]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800abda:	4b27      	ldr	r3, [pc, #156]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abde:	4a26      	ldr	r2, [pc, #152]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800abe6:	4b24      	ldr	r3, [pc, #144]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abea:	4b24      	ldr	r3, [pc, #144]	@ (800ac7c <RCCEx_PLL3_Config+0x160>)
 800abec:	4013      	ands	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	69d2      	ldr	r2, [r2, #28]
 800abf2:	00d2      	lsls	r2, r2, #3
 800abf4:	4920      	ldr	r1, [pc, #128]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800abfa:	4b1f      	ldr	r3, [pc, #124]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	4a1e      	ldr	r2, [pc, #120]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac10:	4a19      	ldr	r2, [pc, #100]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ac16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ac18:	e00f      	b.n	800ac3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d106      	bne.n	800ac2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac20:	4b15      	ldr	r3, [pc, #84]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac24:	4a14      	ldr	r2, [pc, #80]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ac2c:	e005      	b.n	800ac3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac2e:	4b12      	ldr	r3, [pc, #72]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac32:	4a11      	ldr	r2, [pc, #68]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a0e      	ldr	r2, [pc, #56]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac46:	f7f6 fc75 	bl	8001534 <HAL_GetTick>
 800ac4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac4c:	e008      	b.n	800ac60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac4e:	f7f6 fc71 	bl	8001534 <HAL_GetTick>
 800ac52:	4602      	mov	r2, r0
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d901      	bls.n	800ac60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e006      	b.n	800ac6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac60:	4b05      	ldr	r3, [pc, #20]	@ (800ac78 <RCCEx_PLL3_Config+0x15c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d0f0      	beq.n	800ac4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	58024400 	.word	0x58024400
 800ac7c:	ffff0007 	.word	0xffff0007

0800ac80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d101      	bne.n	800ac92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e049      	b.n	800ad26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f841 	bl	800ad2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f000 f9e8 	bl	800b094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ad36:	bf00      	nop
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d001      	beq.n	800ad5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e054      	b.n	800ae06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0201 	orr.w	r2, r2, #1
 800ad72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a26      	ldr	r2, [pc, #152]	@ (800ae14 <HAL_TIM_Base_Start_IT+0xd0>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d022      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad86:	d01d      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a22      	ldr	r2, [pc, #136]	@ (800ae18 <HAL_TIM_Base_Start_IT+0xd4>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d018      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a21      	ldr	r2, [pc, #132]	@ (800ae1c <HAL_TIM_Base_Start_IT+0xd8>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a1f      	ldr	r2, [pc, #124]	@ (800ae20 <HAL_TIM_Base_Start_IT+0xdc>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00e      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ae24 <HAL_TIM_Base_Start_IT+0xe0>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d009      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ae28 <HAL_TIM_Base_Start_IT+0xe4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d004      	beq.n	800adc4 <HAL_TIM_Base_Start_IT+0x80>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ae2c <HAL_TIM_Base_Start_IT+0xe8>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d115      	bne.n	800adf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	4b19      	ldr	r3, [pc, #100]	@ (800ae30 <HAL_TIM_Base_Start_IT+0xec>)
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b06      	cmp	r3, #6
 800add4:	d015      	beq.n	800ae02 <HAL_TIM_Base_Start_IT+0xbe>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800addc:	d011      	beq.n	800ae02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0201 	orr.w	r2, r2, #1
 800adec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adee:	e008      	b.n	800ae02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f042 0201 	orr.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	40010000 	.word	0x40010000
 800ae18:	40000400 	.word	0x40000400
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40000c00 	.word	0x40000c00
 800ae24:	40010400 	.word	0x40010400
 800ae28:	40001800 	.word	0x40001800
 800ae2c:	40014000 	.word	0x40014000
 800ae30:	00010007 	.word	0x00010007

0800ae34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f003 0302 	and.w	r3, r3, #2
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d020      	beq.n	800ae98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01b      	beq.n	800ae98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f06f 0202 	mvn.w	r2, #2
 800ae68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f8e9 	bl	800b056 <HAL_TIM_IC_CaptureCallback>
 800ae84:	e005      	b.n	800ae92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f8db 	bl	800b042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 f8ec 	bl	800b06a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d020      	beq.n	800aee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d01b      	beq.n	800aee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f06f 0204 	mvn.w	r2, #4
 800aeb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2202      	movs	r2, #2
 800aeba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f8c3 	bl	800b056 <HAL_TIM_IC_CaptureCallback>
 800aed0:	e005      	b.n	800aede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f8b5 	bl	800b042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f8c6 	bl	800b06a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d020      	beq.n	800af30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f003 0308 	and.w	r3, r3, #8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01b      	beq.n	800af30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0208 	mvn.w	r2, #8
 800af00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2204      	movs	r2, #4
 800af06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f89d 	bl	800b056 <HAL_TIM_IC_CaptureCallback>
 800af1c:	e005      	b.n	800af2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f88f 	bl	800b042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f8a0 	bl	800b06a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0310 	and.w	r3, r3, #16
 800af36:	2b00      	cmp	r3, #0
 800af38:	d020      	beq.n	800af7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f003 0310 	and.w	r3, r3, #16
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01b      	beq.n	800af7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f06f 0210 	mvn.w	r2, #16
 800af4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2208      	movs	r2, #8
 800af52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f877 	bl	800b056 <HAL_TIM_IC_CaptureCallback>
 800af68:	e005      	b.n	800af76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f869 	bl	800b042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f87a 	bl	800b06a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0201 	mvn.w	r2, #1
 800af98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7f5 febc 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00c      	beq.n	800afce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f90d 	bl	800b1e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00c      	beq.n	800aff2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f905 	bl	800b1fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f834 	bl	800b07e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00c      	beq.n	800b03a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d007      	beq.n	800b03a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f06f 0220 	mvn.w	r2, #32
 800b032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f8cd 	bl	800b1d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
	...

0800b094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a43      	ldr	r2, [pc, #268]	@ (800b1b4 <TIM_Base_SetConfig+0x120>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <TIM_Base_SetConfig+0x40>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b2:	d00f      	beq.n	800b0d4 <TIM_Base_SetConfig+0x40>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a40      	ldr	r2, [pc, #256]	@ (800b1b8 <TIM_Base_SetConfig+0x124>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <TIM_Base_SetConfig+0x40>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a3f      	ldr	r2, [pc, #252]	@ (800b1bc <TIM_Base_SetConfig+0x128>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d007      	beq.n	800b0d4 <TIM_Base_SetConfig+0x40>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a3e      	ldr	r2, [pc, #248]	@ (800b1c0 <TIM_Base_SetConfig+0x12c>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d003      	beq.n	800b0d4 <TIM_Base_SetConfig+0x40>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a3d      	ldr	r2, [pc, #244]	@ (800b1c4 <TIM_Base_SetConfig+0x130>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d108      	bne.n	800b0e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a32      	ldr	r2, [pc, #200]	@ (800b1b4 <TIM_Base_SetConfig+0x120>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d01f      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0f4:	d01b      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b1b8 <TIM_Base_SetConfig+0x124>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d017      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a2e      	ldr	r2, [pc, #184]	@ (800b1bc <TIM_Base_SetConfig+0x128>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d013      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a2d      	ldr	r2, [pc, #180]	@ (800b1c0 <TIM_Base_SetConfig+0x12c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00f      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a2c      	ldr	r2, [pc, #176]	@ (800b1c4 <TIM_Base_SetConfig+0x130>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d00b      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a2b      	ldr	r2, [pc, #172]	@ (800b1c8 <TIM_Base_SetConfig+0x134>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d007      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a2a      	ldr	r2, [pc, #168]	@ (800b1cc <TIM_Base_SetConfig+0x138>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d003      	beq.n	800b12e <TIM_Base_SetConfig+0x9a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a29      	ldr	r2, [pc, #164]	@ (800b1d0 <TIM_Base_SetConfig+0x13c>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d108      	bne.n	800b140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a14      	ldr	r2, [pc, #80]	@ (800b1b4 <TIM_Base_SetConfig+0x120>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d00f      	beq.n	800b186 <TIM_Base_SetConfig+0xf2>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a16      	ldr	r2, [pc, #88]	@ (800b1c4 <TIM_Base_SetConfig+0x130>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00b      	beq.n	800b186 <TIM_Base_SetConfig+0xf2>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a15      	ldr	r2, [pc, #84]	@ (800b1c8 <TIM_Base_SetConfig+0x134>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d007      	beq.n	800b186 <TIM_Base_SetConfig+0xf2>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a14      	ldr	r2, [pc, #80]	@ (800b1cc <TIM_Base_SetConfig+0x138>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d003      	beq.n	800b186 <TIM_Base_SetConfig+0xf2>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a13      	ldr	r2, [pc, #76]	@ (800b1d0 <TIM_Base_SetConfig+0x13c>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d103      	bne.n	800b18e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f043 0204 	orr.w	r2, r3, #4
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	601a      	str	r2, [r3, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	40010000 	.word	0x40010000
 800b1b8:	40000400 	.word	0x40000400
 800b1bc:	40000800 	.word	0x40000800
 800b1c0:	40000c00 	.word	0x40000c00
 800b1c4:	40010400 	.word	0x40010400
 800b1c8:	40014000 	.word	0x40014000
 800b1cc:	40014400 	.word	0x40014400
 800b1d0:	40014800 	.word	0x40014800

0800b1d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e042      	b.n	800b2a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7f6 f881 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2224      	movs	r2, #36	@ 0x24
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 0201 	bic.w	r2, r2, #1
 800b250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fe1e 	bl	800be9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f8b3 	bl	800b3cc <UART_SetConfig>
 800b266:	4603      	mov	r3, r0
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e01b      	b.n	800b2a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b27e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b28e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0201 	orr.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fe9d 	bl	800bfe0 <UART_CheckIdleState>
 800b2a6:	4603      	mov	r3, r0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	@ 0x28
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d17b      	bne.n	800b3c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <HAL_UART_Transmit+0x26>
 800b2d0:	88fb      	ldrh	r3, [r7, #6]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e074      	b.n	800b3c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2221      	movs	r2, #33	@ 0x21
 800b2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2ea:	f7f6 f923 	bl	8001534 <HAL_GetTick>
 800b2ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	88fa      	ldrh	r2, [r7, #6]
 800b2f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	88fa      	ldrh	r2, [r7, #6]
 800b2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b308:	d108      	bne.n	800b31c <HAL_UART_Transmit+0x6c>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d104      	bne.n	800b31c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	61bb      	str	r3, [r7, #24]
 800b31a:	e003      	b.n	800b324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b324:	e030      	b.n	800b388 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2200      	movs	r2, #0
 800b32e:	2180      	movs	r1, #128	@ 0x80
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 feff 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d005      	beq.n	800b348 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e03d      	b.n	800b3c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b35c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	3302      	adds	r3, #2
 800b362:	61bb      	str	r3, [r7, #24]
 800b364:	e007      	b.n	800b376 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	3301      	adds	r3, #1
 800b374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	3b01      	subs	r3, #1
 800b380:	b29a      	uxth	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b38e:	b29b      	uxth	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1c8      	bne.n	800b326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2200      	movs	r2, #0
 800b39c:	2140      	movs	r1, #64	@ 0x40
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fec8 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e006      	b.n	800b3c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3720      	adds	r7, #32
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d0:	b092      	sub	sp, #72	@ 0x48
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4bbe      	ldr	r3, [pc, #760]	@ (800b6f4 <UART_SetConfig+0x328>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b404:	430b      	orrs	r3, r1
 800b406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	68da      	ldr	r2, [r3, #12]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4ab3      	ldr	r2, [pc, #716]	@ (800b6f8 <UART_SetConfig+0x32c>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d004      	beq.n	800b438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b434:	4313      	orrs	r3, r2
 800b436:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	4baf      	ldr	r3, [pc, #700]	@ (800b6fc <UART_SetConfig+0x330>)
 800b440:	4013      	ands	r3, r2
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	6812      	ldr	r2, [r2, #0]
 800b446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b448:	430b      	orrs	r3, r1
 800b44a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	f023 010f 	bic.w	r1, r3, #15
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4aa6      	ldr	r2, [pc, #664]	@ (800b700 <UART_SetConfig+0x334>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d177      	bne.n	800b55c <UART_SetConfig+0x190>
 800b46c:	4ba5      	ldr	r3, [pc, #660]	@ (800b704 <UART_SetConfig+0x338>)
 800b46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b474:	2b28      	cmp	r3, #40	@ 0x28
 800b476:	d86d      	bhi.n	800b554 <UART_SetConfig+0x188>
 800b478:	a201      	add	r2, pc, #4	@ (adr r2, 800b480 <UART_SetConfig+0xb4>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b525 	.word	0x0800b525
 800b484:	0800b555 	.word	0x0800b555
 800b488:	0800b555 	.word	0x0800b555
 800b48c:	0800b555 	.word	0x0800b555
 800b490:	0800b555 	.word	0x0800b555
 800b494:	0800b555 	.word	0x0800b555
 800b498:	0800b555 	.word	0x0800b555
 800b49c:	0800b555 	.word	0x0800b555
 800b4a0:	0800b52d 	.word	0x0800b52d
 800b4a4:	0800b555 	.word	0x0800b555
 800b4a8:	0800b555 	.word	0x0800b555
 800b4ac:	0800b555 	.word	0x0800b555
 800b4b0:	0800b555 	.word	0x0800b555
 800b4b4:	0800b555 	.word	0x0800b555
 800b4b8:	0800b555 	.word	0x0800b555
 800b4bc:	0800b555 	.word	0x0800b555
 800b4c0:	0800b535 	.word	0x0800b535
 800b4c4:	0800b555 	.word	0x0800b555
 800b4c8:	0800b555 	.word	0x0800b555
 800b4cc:	0800b555 	.word	0x0800b555
 800b4d0:	0800b555 	.word	0x0800b555
 800b4d4:	0800b555 	.word	0x0800b555
 800b4d8:	0800b555 	.word	0x0800b555
 800b4dc:	0800b555 	.word	0x0800b555
 800b4e0:	0800b53d 	.word	0x0800b53d
 800b4e4:	0800b555 	.word	0x0800b555
 800b4e8:	0800b555 	.word	0x0800b555
 800b4ec:	0800b555 	.word	0x0800b555
 800b4f0:	0800b555 	.word	0x0800b555
 800b4f4:	0800b555 	.word	0x0800b555
 800b4f8:	0800b555 	.word	0x0800b555
 800b4fc:	0800b555 	.word	0x0800b555
 800b500:	0800b545 	.word	0x0800b545
 800b504:	0800b555 	.word	0x0800b555
 800b508:	0800b555 	.word	0x0800b555
 800b50c:	0800b555 	.word	0x0800b555
 800b510:	0800b555 	.word	0x0800b555
 800b514:	0800b555 	.word	0x0800b555
 800b518:	0800b555 	.word	0x0800b555
 800b51c:	0800b555 	.word	0x0800b555
 800b520:	0800b54d 	.word	0x0800b54d
 800b524:	2301      	movs	r3, #1
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b52a:	e222      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b532:	e21e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b53a:	e21a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b542:	e216      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b544:	2320      	movs	r3, #32
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54a:	e212      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b54c:	2340      	movs	r3, #64	@ 0x40
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b552:	e20e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b554:	2380      	movs	r3, #128	@ 0x80
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55a:	e20a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a69      	ldr	r2, [pc, #420]	@ (800b708 <UART_SetConfig+0x33c>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d130      	bne.n	800b5c8 <UART_SetConfig+0x1fc>
 800b566:	4b67      	ldr	r3, [pc, #412]	@ (800b704 <UART_SetConfig+0x338>)
 800b568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d826      	bhi.n	800b5c0 <UART_SetConfig+0x1f4>
 800b572:	a201      	add	r2, pc, #4	@ (adr r2, 800b578 <UART_SetConfig+0x1ac>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b591 	.word	0x0800b591
 800b57c:	0800b599 	.word	0x0800b599
 800b580:	0800b5a1 	.word	0x0800b5a1
 800b584:	0800b5a9 	.word	0x0800b5a9
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b9 	.word	0x0800b5b9
 800b590:	2300      	movs	r3, #0
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b596:	e1ec      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b598:	2304      	movs	r3, #4
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b59e:	e1e8      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5a6:	e1e4      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5a8:	2310      	movs	r3, #16
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ae:	e1e0      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5b0:	2320      	movs	r3, #32
 800b5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b6:	e1dc      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5b8:	2340      	movs	r3, #64	@ 0x40
 800b5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5be:	e1d8      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5c0:	2380      	movs	r3, #128	@ 0x80
 800b5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c6:	e1d4      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a4f      	ldr	r2, [pc, #316]	@ (800b70c <UART_SetConfig+0x340>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d130      	bne.n	800b634 <UART_SetConfig+0x268>
 800b5d2:	4b4c      	ldr	r3, [pc, #304]	@ (800b704 <UART_SetConfig+0x338>)
 800b5d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	d826      	bhi.n	800b62c <UART_SetConfig+0x260>
 800b5de:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e4 <UART_SetConfig+0x218>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b5fd 	.word	0x0800b5fd
 800b5e8:	0800b605 	.word	0x0800b605
 800b5ec:	0800b60d 	.word	0x0800b60d
 800b5f0:	0800b615 	.word	0x0800b615
 800b5f4:	0800b61d 	.word	0x0800b61d
 800b5f8:	0800b625 	.word	0x0800b625
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b602:	e1b6      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b604:	2304      	movs	r3, #4
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b60a:	e1b2      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b60c:	2308      	movs	r3, #8
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b612:	e1ae      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b614:	2310      	movs	r3, #16
 800b616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b61a:	e1aa      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b61c:	2320      	movs	r3, #32
 800b61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b622:	e1a6      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b624:	2340      	movs	r3, #64	@ 0x40
 800b626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b62a:	e1a2      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b62c:	2380      	movs	r3, #128	@ 0x80
 800b62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b632:	e19e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a35      	ldr	r2, [pc, #212]	@ (800b710 <UART_SetConfig+0x344>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d130      	bne.n	800b6a0 <UART_SetConfig+0x2d4>
 800b63e:	4b31      	ldr	r3, [pc, #196]	@ (800b704 <UART_SetConfig+0x338>)
 800b640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b05      	cmp	r3, #5
 800b648:	d826      	bhi.n	800b698 <UART_SetConfig+0x2cc>
 800b64a:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <UART_SetConfig+0x284>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b669 	.word	0x0800b669
 800b654:	0800b671 	.word	0x0800b671
 800b658:	0800b679 	.word	0x0800b679
 800b65c:	0800b681 	.word	0x0800b681
 800b660:	0800b689 	.word	0x0800b689
 800b664:	0800b691 	.word	0x0800b691
 800b668:	2300      	movs	r3, #0
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b66e:	e180      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b670:	2304      	movs	r3, #4
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b676:	e17c      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b678:	2308      	movs	r3, #8
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b67e:	e178      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b680:	2310      	movs	r3, #16
 800b682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b686:	e174      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b688:	2320      	movs	r3, #32
 800b68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b68e:	e170      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b690:	2340      	movs	r3, #64	@ 0x40
 800b692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b696:	e16c      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b698:	2380      	movs	r3, #128	@ 0x80
 800b69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b69e:	e168      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b714 <UART_SetConfig+0x348>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d142      	bne.n	800b730 <UART_SetConfig+0x364>
 800b6aa:	4b16      	ldr	r3, [pc, #88]	@ (800b704 <UART_SetConfig+0x338>)
 800b6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b05      	cmp	r3, #5
 800b6b4:	d838      	bhi.n	800b728 <UART_SetConfig+0x35c>
 800b6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6bc <UART_SetConfig+0x2f0>)
 800b6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6bc:	0800b6d5 	.word	0x0800b6d5
 800b6c0:	0800b6dd 	.word	0x0800b6dd
 800b6c4:	0800b6e5 	.word	0x0800b6e5
 800b6c8:	0800b6ed 	.word	0x0800b6ed
 800b6cc:	0800b719 	.word	0x0800b719
 800b6d0:	0800b721 	.word	0x0800b721
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6da:	e14a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b6dc:	2304      	movs	r3, #4
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e2:	e146      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b6e4:	2308      	movs	r3, #8
 800b6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ea:	e142      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f2:	e13e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b6f4:	cfff69f3 	.word	0xcfff69f3
 800b6f8:	58000c00 	.word	0x58000c00
 800b6fc:	11fff4ff 	.word	0x11fff4ff
 800b700:	40011000 	.word	0x40011000
 800b704:	58024400 	.word	0x58024400
 800b708:	40004400 	.word	0x40004400
 800b70c:	40004800 	.word	0x40004800
 800b710:	40004c00 	.word	0x40004c00
 800b714:	40005000 	.word	0x40005000
 800b718:	2320      	movs	r3, #32
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b71e:	e128      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b720:	2340      	movs	r3, #64	@ 0x40
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b726:	e124      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b728:	2380      	movs	r3, #128	@ 0x80
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b72e:	e120      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4acb      	ldr	r2, [pc, #812]	@ (800ba64 <UART_SetConfig+0x698>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d176      	bne.n	800b828 <UART_SetConfig+0x45c>
 800b73a:	4bcb      	ldr	r3, [pc, #812]	@ (800ba68 <UART_SetConfig+0x69c>)
 800b73c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b73e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b742:	2b28      	cmp	r3, #40	@ 0x28
 800b744:	d86c      	bhi.n	800b820 <UART_SetConfig+0x454>
 800b746:	a201      	add	r2, pc, #4	@ (adr r2, 800b74c <UART_SetConfig+0x380>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b7f1 	.word	0x0800b7f1
 800b750:	0800b821 	.word	0x0800b821
 800b754:	0800b821 	.word	0x0800b821
 800b758:	0800b821 	.word	0x0800b821
 800b75c:	0800b821 	.word	0x0800b821
 800b760:	0800b821 	.word	0x0800b821
 800b764:	0800b821 	.word	0x0800b821
 800b768:	0800b821 	.word	0x0800b821
 800b76c:	0800b7f9 	.word	0x0800b7f9
 800b770:	0800b821 	.word	0x0800b821
 800b774:	0800b821 	.word	0x0800b821
 800b778:	0800b821 	.word	0x0800b821
 800b77c:	0800b821 	.word	0x0800b821
 800b780:	0800b821 	.word	0x0800b821
 800b784:	0800b821 	.word	0x0800b821
 800b788:	0800b821 	.word	0x0800b821
 800b78c:	0800b801 	.word	0x0800b801
 800b790:	0800b821 	.word	0x0800b821
 800b794:	0800b821 	.word	0x0800b821
 800b798:	0800b821 	.word	0x0800b821
 800b79c:	0800b821 	.word	0x0800b821
 800b7a0:	0800b821 	.word	0x0800b821
 800b7a4:	0800b821 	.word	0x0800b821
 800b7a8:	0800b821 	.word	0x0800b821
 800b7ac:	0800b809 	.word	0x0800b809
 800b7b0:	0800b821 	.word	0x0800b821
 800b7b4:	0800b821 	.word	0x0800b821
 800b7b8:	0800b821 	.word	0x0800b821
 800b7bc:	0800b821 	.word	0x0800b821
 800b7c0:	0800b821 	.word	0x0800b821
 800b7c4:	0800b821 	.word	0x0800b821
 800b7c8:	0800b821 	.word	0x0800b821
 800b7cc:	0800b811 	.word	0x0800b811
 800b7d0:	0800b821 	.word	0x0800b821
 800b7d4:	0800b821 	.word	0x0800b821
 800b7d8:	0800b821 	.word	0x0800b821
 800b7dc:	0800b821 	.word	0x0800b821
 800b7e0:	0800b821 	.word	0x0800b821
 800b7e4:	0800b821 	.word	0x0800b821
 800b7e8:	0800b821 	.word	0x0800b821
 800b7ec:	0800b819 	.word	0x0800b819
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f6:	e0bc      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b7f8:	2304      	movs	r3, #4
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fe:	e0b8      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b800:	2308      	movs	r3, #8
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b806:	e0b4      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b808:	2310      	movs	r3, #16
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80e:	e0b0      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b810:	2320      	movs	r3, #32
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b816:	e0ac      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b818:	2340      	movs	r3, #64	@ 0x40
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e0a8      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b820:	2380      	movs	r3, #128	@ 0x80
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e0a4      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a8f      	ldr	r2, [pc, #572]	@ (800ba6c <UART_SetConfig+0x6a0>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d130      	bne.n	800b894 <UART_SetConfig+0x4c8>
 800b832:	4b8d      	ldr	r3, [pc, #564]	@ (800ba68 <UART_SetConfig+0x69c>)
 800b834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b836:	f003 0307 	and.w	r3, r3, #7
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	d826      	bhi.n	800b88c <UART_SetConfig+0x4c0>
 800b83e:	a201      	add	r2, pc, #4	@ (adr r2, 800b844 <UART_SetConfig+0x478>)
 800b840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b844:	0800b85d 	.word	0x0800b85d
 800b848:	0800b865 	.word	0x0800b865
 800b84c:	0800b86d 	.word	0x0800b86d
 800b850:	0800b875 	.word	0x0800b875
 800b854:	0800b87d 	.word	0x0800b87d
 800b858:	0800b885 	.word	0x0800b885
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b862:	e086      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b864:	2304      	movs	r3, #4
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86a:	e082      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b86c:	2308      	movs	r3, #8
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b872:	e07e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b874:	2310      	movs	r3, #16
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87a:	e07a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b87c:	2320      	movs	r3, #32
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b882:	e076      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b884:	2340      	movs	r3, #64	@ 0x40
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e072      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b88c:	2380      	movs	r3, #128	@ 0x80
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e06e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a75      	ldr	r2, [pc, #468]	@ (800ba70 <UART_SetConfig+0x6a4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d130      	bne.n	800b900 <UART_SetConfig+0x534>
 800b89e:	4b72      	ldr	r3, [pc, #456]	@ (800ba68 <UART_SetConfig+0x69c>)
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	2b05      	cmp	r3, #5
 800b8a8:	d826      	bhi.n	800b8f8 <UART_SetConfig+0x52c>
 800b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <UART_SetConfig+0x4e4>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b8c9 	.word	0x0800b8c9
 800b8b4:	0800b8d1 	.word	0x0800b8d1
 800b8b8:	0800b8d9 	.word	0x0800b8d9
 800b8bc:	0800b8e1 	.word	0x0800b8e1
 800b8c0:	0800b8e9 	.word	0x0800b8e9
 800b8c4:	0800b8f1 	.word	0x0800b8f1
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ce:	e050      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8d0:	2304      	movs	r3, #4
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d6:	e04c      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8d8:	2308      	movs	r3, #8
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8de:	e048      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8e0:	2310      	movs	r3, #16
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e6:	e044      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8e8:	2320      	movs	r3, #32
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ee:	e040      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8f0:	2340      	movs	r3, #64	@ 0x40
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e03c      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b8f8:	2380      	movs	r3, #128	@ 0x80
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e038      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a5b      	ldr	r2, [pc, #364]	@ (800ba74 <UART_SetConfig+0x6a8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d130      	bne.n	800b96c <UART_SetConfig+0x5a0>
 800b90a:	4b57      	ldr	r3, [pc, #348]	@ (800ba68 <UART_SetConfig+0x69c>)
 800b90c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b90e:	f003 0307 	and.w	r3, r3, #7
 800b912:	2b05      	cmp	r3, #5
 800b914:	d826      	bhi.n	800b964 <UART_SetConfig+0x598>
 800b916:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <UART_SetConfig+0x550>)
 800b918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91c:	0800b935 	.word	0x0800b935
 800b920:	0800b93d 	.word	0x0800b93d
 800b924:	0800b945 	.word	0x0800b945
 800b928:	0800b94d 	.word	0x0800b94d
 800b92c:	0800b955 	.word	0x0800b955
 800b930:	0800b95d 	.word	0x0800b95d
 800b934:	2302      	movs	r3, #2
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93a:	e01a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b93c:	2304      	movs	r3, #4
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b942:	e016      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b944:	2308      	movs	r3, #8
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94a:	e012      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b94c:	2310      	movs	r3, #16
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b952:	e00e      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b954:	2320      	movs	r3, #32
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b95a:	e00a      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b95c:	2340      	movs	r3, #64	@ 0x40
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e006      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b964:	2380      	movs	r3, #128	@ 0x80
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e002      	b.n	800b972 <UART_SetConfig+0x5a6>
 800b96c:	2380      	movs	r3, #128	@ 0x80
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a3f      	ldr	r2, [pc, #252]	@ (800ba74 <UART_SetConfig+0x6a8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	f040 80f8 	bne.w	800bb6e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b97e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b982:	2b20      	cmp	r3, #32
 800b984:	dc46      	bgt.n	800ba14 <UART_SetConfig+0x648>
 800b986:	2b02      	cmp	r3, #2
 800b988:	f2c0 8082 	blt.w	800ba90 <UART_SetConfig+0x6c4>
 800b98c:	3b02      	subs	r3, #2
 800b98e:	2b1e      	cmp	r3, #30
 800b990:	d87e      	bhi.n	800ba90 <UART_SetConfig+0x6c4>
 800b992:	a201      	add	r2, pc, #4	@ (adr r2, 800b998 <UART_SetConfig+0x5cc>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800ba1b 	.word	0x0800ba1b
 800b99c:	0800ba91 	.word	0x0800ba91
 800b9a0:	0800ba23 	.word	0x0800ba23
 800b9a4:	0800ba91 	.word	0x0800ba91
 800b9a8:	0800ba91 	.word	0x0800ba91
 800b9ac:	0800ba91 	.word	0x0800ba91
 800b9b0:	0800ba33 	.word	0x0800ba33
 800b9b4:	0800ba91 	.word	0x0800ba91
 800b9b8:	0800ba91 	.word	0x0800ba91
 800b9bc:	0800ba91 	.word	0x0800ba91
 800b9c0:	0800ba91 	.word	0x0800ba91
 800b9c4:	0800ba91 	.word	0x0800ba91
 800b9c8:	0800ba91 	.word	0x0800ba91
 800b9cc:	0800ba91 	.word	0x0800ba91
 800b9d0:	0800ba43 	.word	0x0800ba43
 800b9d4:	0800ba91 	.word	0x0800ba91
 800b9d8:	0800ba91 	.word	0x0800ba91
 800b9dc:	0800ba91 	.word	0x0800ba91
 800b9e0:	0800ba91 	.word	0x0800ba91
 800b9e4:	0800ba91 	.word	0x0800ba91
 800b9e8:	0800ba91 	.word	0x0800ba91
 800b9ec:	0800ba91 	.word	0x0800ba91
 800b9f0:	0800ba91 	.word	0x0800ba91
 800b9f4:	0800ba91 	.word	0x0800ba91
 800b9f8:	0800ba91 	.word	0x0800ba91
 800b9fc:	0800ba91 	.word	0x0800ba91
 800ba00:	0800ba91 	.word	0x0800ba91
 800ba04:	0800ba91 	.word	0x0800ba91
 800ba08:	0800ba91 	.word	0x0800ba91
 800ba0c:	0800ba91 	.word	0x0800ba91
 800ba10:	0800ba83 	.word	0x0800ba83
 800ba14:	2b40      	cmp	r3, #64	@ 0x40
 800ba16:	d037      	beq.n	800ba88 <UART_SetConfig+0x6bc>
 800ba18:	e03a      	b.n	800ba90 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ba1a:	f7fe fbbd 	bl	800a198 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba20:	e03c      	b.n	800ba9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe fbcc 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba30:	e034      	b.n	800ba9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba32:	f107 0318 	add.w	r3, r7, #24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fd18 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba40:	e02c      	b.n	800ba9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba42:	4b09      	ldr	r3, [pc, #36]	@ (800ba68 <UART_SetConfig+0x69c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d016      	beq.n	800ba7c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba4e:	4b06      	ldr	r3, [pc, #24]	@ (800ba68 <UART_SetConfig+0x69c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	08db      	lsrs	r3, r3, #3
 800ba54:	f003 0303 	and.w	r3, r3, #3
 800ba58:	4a07      	ldr	r2, [pc, #28]	@ (800ba78 <UART_SetConfig+0x6ac>)
 800ba5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba60:	e01c      	b.n	800ba9c <UART_SetConfig+0x6d0>
 800ba62:	bf00      	nop
 800ba64:	40011400 	.word	0x40011400
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	40007800 	.word	0x40007800
 800ba70:	40007c00 	.word	0x40007c00
 800ba74:	58000c00 	.word	0x58000c00
 800ba78:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba7c:	4b9d      	ldr	r3, [pc, #628]	@ (800bcf4 <UART_SetConfig+0x928>)
 800ba7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba80:	e00c      	b.n	800ba9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba82:	4b9d      	ldr	r3, [pc, #628]	@ (800bcf8 <UART_SetConfig+0x92c>)
 800ba84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba86:	e009      	b.n	800ba9c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba8e:	e005      	b.n	800ba9c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 81de 	beq.w	800be60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa8:	4a94      	ldr	r2, [pc, #592]	@ (800bcfc <UART_SetConfig+0x930>)
 800baaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baae:	461a      	mov	r2, r3
 800bab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bab2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bab6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	4613      	mov	r3, r2
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d305      	bcc.n	800bad4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d903      	bls.n	800badc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bada:	e1c1      	b.n	800be60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800badc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bade:	2200      	movs	r2, #0
 800bae0:	60bb      	str	r3, [r7, #8]
 800bae2:	60fa      	str	r2, [r7, #12]
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae8:	4a84      	ldr	r2, [pc, #528]	@ (800bcfc <UART_SetConfig+0x930>)
 800baea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	2200      	movs	r2, #0
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bafa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bafe:	f7f4 fc47 	bl	8000390 <__aeabi_uldivmod>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4610      	mov	r0, r2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f04f 0200 	mov.w	r2, #0
 800bb0e:	f04f 0300 	mov.w	r3, #0
 800bb12:	020b      	lsls	r3, r1, #8
 800bb14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb18:	0202      	lsls	r2, r0, #8
 800bb1a:	6979      	ldr	r1, [r7, #20]
 800bb1c:	6849      	ldr	r1, [r1, #4]
 800bb1e:	0849      	lsrs	r1, r1, #1
 800bb20:	2000      	movs	r0, #0
 800bb22:	460c      	mov	r4, r1
 800bb24:	4605      	mov	r5, r0
 800bb26:	eb12 0804 	adds.w	r8, r2, r4
 800bb2a:	eb43 0905 	adc.w	r9, r3, r5
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	469a      	mov	sl, r3
 800bb36:	4693      	mov	fp, r2
 800bb38:	4652      	mov	r2, sl
 800bb3a:	465b      	mov	r3, fp
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fc26 	bl	8000390 <__aeabi_uldivmod>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4613      	mov	r3, r2
 800bb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb52:	d308      	bcc.n	800bb66 <UART_SetConfig+0x79a>
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb5a:	d204      	bcs.n	800bb66 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb62:	60da      	str	r2, [r3, #12]
 800bb64:	e17c      	b.n	800be60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb6c:	e178      	b.n	800be60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb76:	f040 80c5 	bne.w	800bd04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bb7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	2b20      	cmp	r3, #32
 800bb80:	dc48      	bgt.n	800bc14 <UART_SetConfig+0x848>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	db7b      	blt.n	800bc7e <UART_SetConfig+0x8b2>
 800bb86:	2b20      	cmp	r3, #32
 800bb88:	d879      	bhi.n	800bc7e <UART_SetConfig+0x8b2>
 800bb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <UART_SetConfig+0x7c4>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bc1b 	.word	0x0800bc1b
 800bb94:	0800bc23 	.word	0x0800bc23
 800bb98:	0800bc7f 	.word	0x0800bc7f
 800bb9c:	0800bc7f 	.word	0x0800bc7f
 800bba0:	0800bc2b 	.word	0x0800bc2b
 800bba4:	0800bc7f 	.word	0x0800bc7f
 800bba8:	0800bc7f 	.word	0x0800bc7f
 800bbac:	0800bc7f 	.word	0x0800bc7f
 800bbb0:	0800bc3b 	.word	0x0800bc3b
 800bbb4:	0800bc7f 	.word	0x0800bc7f
 800bbb8:	0800bc7f 	.word	0x0800bc7f
 800bbbc:	0800bc7f 	.word	0x0800bc7f
 800bbc0:	0800bc7f 	.word	0x0800bc7f
 800bbc4:	0800bc7f 	.word	0x0800bc7f
 800bbc8:	0800bc7f 	.word	0x0800bc7f
 800bbcc:	0800bc7f 	.word	0x0800bc7f
 800bbd0:	0800bc4b 	.word	0x0800bc4b
 800bbd4:	0800bc7f 	.word	0x0800bc7f
 800bbd8:	0800bc7f 	.word	0x0800bc7f
 800bbdc:	0800bc7f 	.word	0x0800bc7f
 800bbe0:	0800bc7f 	.word	0x0800bc7f
 800bbe4:	0800bc7f 	.word	0x0800bc7f
 800bbe8:	0800bc7f 	.word	0x0800bc7f
 800bbec:	0800bc7f 	.word	0x0800bc7f
 800bbf0:	0800bc7f 	.word	0x0800bc7f
 800bbf4:	0800bc7f 	.word	0x0800bc7f
 800bbf8:	0800bc7f 	.word	0x0800bc7f
 800bbfc:	0800bc7f 	.word	0x0800bc7f
 800bc00:	0800bc7f 	.word	0x0800bc7f
 800bc04:	0800bc7f 	.word	0x0800bc7f
 800bc08:	0800bc7f 	.word	0x0800bc7f
 800bc0c:	0800bc7f 	.word	0x0800bc7f
 800bc10:	0800bc71 	.word	0x0800bc71
 800bc14:	2b40      	cmp	r3, #64	@ 0x40
 800bc16:	d02e      	beq.n	800bc76 <UART_SetConfig+0x8aa>
 800bc18:	e031      	b.n	800bc7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc1a:	f7fc fac5 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800bc1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc20:	e033      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc22:	f7fc fad7 	bl	80081d4 <HAL_RCC_GetPCLK2Freq>
 800bc26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc28:	e02f      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fac8 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc38:	e027      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3a:	f107 0318 	add.w	r3, r7, #24
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fc14 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc48:	e01f      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc4a:	4b2d      	ldr	r3, [pc, #180]	@ (800bd00 <UART_SetConfig+0x934>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 0320 	and.w	r3, r3, #32
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d009      	beq.n	800bc6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc56:	4b2a      	ldr	r3, [pc, #168]	@ (800bd00 <UART_SetConfig+0x934>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	08db      	lsrs	r3, r3, #3
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	4a24      	ldr	r2, [pc, #144]	@ (800bcf4 <UART_SetConfig+0x928>)
 800bc62:	fa22 f303 	lsr.w	r3, r2, r3
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc68:	e00f      	b.n	800bc8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc6a:	4b22      	ldr	r3, [pc, #136]	@ (800bcf4 <UART_SetConfig+0x928>)
 800bc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc6e:	e00c      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc70:	4b21      	ldr	r3, [pc, #132]	@ (800bcf8 <UART_SetConfig+0x92c>)
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc74:	e009      	b.n	800bc8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7c:	e005      	b.n	800bc8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 80e7 	beq.w	800be60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc96:	4a19      	ldr	r2, [pc, #100]	@ (800bcfc <UART_SetConfig+0x930>)
 800bc98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bca4:	005a      	lsls	r2, r3, #1
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	085b      	lsrs	r3, r3, #1
 800bcac:	441a      	add	r2, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcba:	2b0f      	cmp	r3, #15
 800bcbc:	d916      	bls.n	800bcec <UART_SetConfig+0x920>
 800bcbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcc4:	d212      	bcs.n	800bcec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f023 030f 	bic.w	r3, r3, #15
 800bcce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd2:	085b      	lsrs	r3, r3, #1
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcde:	4313      	orrs	r3, r2
 800bce0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bce8:	60da      	str	r2, [r3, #12]
 800bcea:	e0b9      	b.n	800be60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcf2:	e0b5      	b.n	800be60 <UART_SetConfig+0xa94>
 800bcf4:	03d09000 	.word	0x03d09000
 800bcf8:	003d0900 	.word	0x003d0900
 800bcfc:	08012768 	.word	0x08012768
 800bd00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd08:	2b20      	cmp	r3, #32
 800bd0a:	dc49      	bgt.n	800bda0 <UART_SetConfig+0x9d4>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	db7c      	blt.n	800be0a <UART_SetConfig+0xa3e>
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d87a      	bhi.n	800be0a <UART_SetConfig+0xa3e>
 800bd14:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <UART_SetConfig+0x950>)
 800bd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1a:	bf00      	nop
 800bd1c:	0800bda7 	.word	0x0800bda7
 800bd20:	0800bdaf 	.word	0x0800bdaf
 800bd24:	0800be0b 	.word	0x0800be0b
 800bd28:	0800be0b 	.word	0x0800be0b
 800bd2c:	0800bdb7 	.word	0x0800bdb7
 800bd30:	0800be0b 	.word	0x0800be0b
 800bd34:	0800be0b 	.word	0x0800be0b
 800bd38:	0800be0b 	.word	0x0800be0b
 800bd3c:	0800bdc7 	.word	0x0800bdc7
 800bd40:	0800be0b 	.word	0x0800be0b
 800bd44:	0800be0b 	.word	0x0800be0b
 800bd48:	0800be0b 	.word	0x0800be0b
 800bd4c:	0800be0b 	.word	0x0800be0b
 800bd50:	0800be0b 	.word	0x0800be0b
 800bd54:	0800be0b 	.word	0x0800be0b
 800bd58:	0800be0b 	.word	0x0800be0b
 800bd5c:	0800bdd7 	.word	0x0800bdd7
 800bd60:	0800be0b 	.word	0x0800be0b
 800bd64:	0800be0b 	.word	0x0800be0b
 800bd68:	0800be0b 	.word	0x0800be0b
 800bd6c:	0800be0b 	.word	0x0800be0b
 800bd70:	0800be0b 	.word	0x0800be0b
 800bd74:	0800be0b 	.word	0x0800be0b
 800bd78:	0800be0b 	.word	0x0800be0b
 800bd7c:	0800be0b 	.word	0x0800be0b
 800bd80:	0800be0b 	.word	0x0800be0b
 800bd84:	0800be0b 	.word	0x0800be0b
 800bd88:	0800be0b 	.word	0x0800be0b
 800bd8c:	0800be0b 	.word	0x0800be0b
 800bd90:	0800be0b 	.word	0x0800be0b
 800bd94:	0800be0b 	.word	0x0800be0b
 800bd98:	0800be0b 	.word	0x0800be0b
 800bd9c:	0800bdfd 	.word	0x0800bdfd
 800bda0:	2b40      	cmp	r3, #64	@ 0x40
 800bda2:	d02e      	beq.n	800be02 <UART_SetConfig+0xa36>
 800bda4:	e031      	b.n	800be0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bda6:	f7fc f9ff 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800bdaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdac:	e033      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdae:	f7fc fa11 	bl	80081d4 <HAL_RCC_GetPCLK2Freq>
 800bdb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bdb4:	e02f      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fa02 	bl	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdc4:	e027      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc6:	f107 0318 	add.w	r3, r7, #24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fb4e 	bl	800a46c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd4:	e01f      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdd6:	4b2d      	ldr	r3, [pc, #180]	@ (800be8c <UART_SetConfig+0xac0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bde2:	4b2a      	ldr	r3, [pc, #168]	@ (800be8c <UART_SetConfig+0xac0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	08db      	lsrs	r3, r3, #3
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	4a28      	ldr	r2, [pc, #160]	@ (800be90 <UART_SetConfig+0xac4>)
 800bdee:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdf4:	e00f      	b.n	800be16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bdf6:	4b26      	ldr	r3, [pc, #152]	@ (800be90 <UART_SetConfig+0xac4>)
 800bdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdfa:	e00c      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdfc:	4b25      	ldr	r3, [pc, #148]	@ (800be94 <UART_SetConfig+0xac8>)
 800bdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be00:	e009      	b.n	800be16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be08:	e005      	b.n	800be16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800be14:	bf00      	nop
    }

    if (pclk != 0U)
 800be16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d021      	beq.n	800be60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be20:	4a1d      	ldr	r2, [pc, #116]	@ (800be98 <UART_SetConfig+0xacc>)
 800be22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be26:	461a      	mov	r2, r3
 800be28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	441a      	add	r2, r3
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be42:	2b0f      	cmp	r3, #15
 800be44:	d909      	bls.n	800be5a <UART_SetConfig+0xa8e>
 800be46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be4c:	d205      	bcs.n	800be5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be50:	b29a      	uxth	r2, r3
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60da      	str	r2, [r3, #12]
 800be58:	e002      	b.n	800be60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2201      	movs	r2, #1
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2200      	movs	r2, #0
 800be74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2200      	movs	r2, #0
 800be7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be80:	4618      	mov	r0, r3
 800be82:	3748      	adds	r7, #72	@ 0x48
 800be84:	46bd      	mov	sp, r7
 800be86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be8a:	bf00      	nop
 800be8c:	58024400 	.word	0x58024400
 800be90:	03d09000 	.word	0x03d09000
 800be94:	003d0900 	.word	0x003d0900
 800be98:	08012768 	.word	0x08012768

0800be9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00a      	beq.n	800bec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00a      	beq.n	800bf0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0e:	f003 0304 	and.w	r3, r3, #4
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf30:	f003 0310 	and.w	r3, r3, #16
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00a      	beq.n	800bf4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00a      	beq.n	800bf70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01a      	beq.n	800bfb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf9a:	d10a      	bne.n	800bfb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	605a      	str	r2, [r3, #4]
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b098      	sub	sp, #96	@ 0x60
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bff0:	f7f5 faa0 	bl	8001534 <HAL_GetTick>
 800bff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0308 	and.w	r3, r3, #8
 800c000:	2b08      	cmp	r3, #8
 800c002:	d12f      	bne.n	800c064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c00c:	2200      	movs	r2, #0
 800c00e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f88e 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d022      	beq.n	800c064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c026:	e853 3f00 	ldrex	r3, [r3]
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c032:	653b      	str	r3, [r7, #80]	@ 0x50
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	461a      	mov	r2, r3
 800c03a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c03c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c03e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c044:	e841 2300 	strex	r3, r2, [r1]
 800c048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1e6      	bne.n	800c01e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2220      	movs	r2, #32
 800c054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	e063      	b.n	800c12c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d149      	bne.n	800c106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07a:	2200      	movs	r2, #0
 800c07c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f857 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d03c      	beq.n	800c106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	623b      	str	r3, [r7, #32]
   return(result);
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e6      	bne.n	800c08c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	e853 3f00 	ldrex	r3, [r3]
 800c0cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0de:	61fa      	str	r2, [r7, #28]
 800c0e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	69b9      	ldr	r1, [r7, #24]
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e5      	bne.n	800c0be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e012      	b.n	800c12c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2220      	movs	r2, #32
 800c10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3758      	adds	r7, #88	@ 0x58
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c144:	e04f      	b.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14c:	d04b      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14e:	f7f5 f9f1 	bl	8001534 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <UART_WaitOnFlagUntilTimeout+0x30>
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d101      	bne.n	800c168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c164:	2303      	movs	r3, #3
 800c166:	e04e      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d037      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b80      	cmp	r3, #128	@ 0x80
 800c17a:	d034      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b40      	cmp	r3, #64	@ 0x40
 800c180:	d031      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f003 0308 	and.w	r3, r3, #8
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d110      	bne.n	800c1b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2208      	movs	r2, #8
 800c196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f839 	bl	800c210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e029      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1c0:	d111      	bne.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f81f 	bl	800c210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e00f      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	69da      	ldr	r2, [r3, #28]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	bf0c      	ite	eq
 800c1f6:	2301      	moveq	r3, #1
 800c1f8:	2300      	movne	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	429a      	cmp	r2, r3
 800c202:	d0a0      	beq.n	800c146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c210:	b480      	push	{r7}
 800c212:	b095      	sub	sp, #84	@ 0x54
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c236:	643b      	str	r3, [r7, #64]	@ 0x40
 800c238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c23c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e6      	bne.n	800c218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3308      	adds	r3, #8
 800c250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c252:	6a3b      	ldr	r3, [r7, #32]
 800c254:	e853 3f00 	ldrex	r3, [r3]
 800c258:	61fb      	str	r3, [r7, #28]
   return(result);
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	4b1e      	ldr	r3, [pc, #120]	@ (800c2d8 <UART_EndRxTransfer+0xc8>)
 800c25e:	4013      	ands	r3, r2
 800c260:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3308      	adds	r3, #8
 800c268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c26a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c26c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c272:	e841 2300 	strex	r3, r2, [r1]
 800c276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e5      	bne.n	800c24a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c282:	2b01      	cmp	r3, #1
 800c284:	d118      	bne.n	800c2b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	60bb      	str	r3, [r7, #8]
   return(result);
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f023 0310 	bic.w	r3, r3, #16
 800c29a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2a4:	61bb      	str	r3, [r7, #24]
 800c2a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6979      	ldr	r1, [r7, #20]
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e6      	bne.n	800c286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2220      	movs	r2, #32
 800c2bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2cc:	bf00      	nop
 800c2ce:	3754      	adds	r7, #84	@ 0x54
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	effffffe 	.word	0xeffffffe

0800c2dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d101      	bne.n	800c2f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	e027      	b.n	800c342 <HAL_UARTEx_DisableFifoMode+0x66>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2224      	movs	r2, #36	@ 0x24
 800c2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f022 0201 	bic.w	r2, r2, #1
 800c318:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c320:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d101      	bne.n	800c366 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c362:	2302      	movs	r3, #2
 800c364:	e02d      	b.n	800c3c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2224      	movs	r2, #36	@ 0x24
 800c372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0201 	bic.w	r2, r2, #1
 800c38c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f850 	bl	800c448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e02d      	b.n	800c43e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2224      	movs	r2, #36	@ 0x24
 800c3ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0201 	bic.w	r2, r2, #1
 800c408:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f812 	bl	800c448 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2220      	movs	r2, #32
 800c430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c454:	2b00      	cmp	r3, #0
 800c456:	d108      	bne.n	800c46a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c468:	e031      	b.n	800c4ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c46a:	2310      	movs	r3, #16
 800c46c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c46e:	2310      	movs	r3, #16
 800c470:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	0e5b      	lsrs	r3, r3, #25
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	0f5b      	lsrs	r3, r3, #29
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	f003 0307 	and.w	r3, r3, #7
 800c490:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	7b3a      	ldrb	r2, [r7, #12]
 800c496:	4911      	ldr	r1, [pc, #68]	@ (800c4dc <UARTEx_SetNbDataToProcess+0x94>)
 800c498:	5c8a      	ldrb	r2, [r1, r2]
 800c49a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c49e:	7b3a      	ldrb	r2, [r7, #12]
 800c4a0:	490f      	ldr	r1, [pc, #60]	@ (800c4e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c4a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	7b7a      	ldrb	r2, [r7, #13]
 800c4b4:	4909      	ldr	r1, [pc, #36]	@ (800c4dc <UARTEx_SetNbDataToProcess+0x94>)
 800c4b6:	5c8a      	ldrb	r2, [r1, r2]
 800c4b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4bc:	7b7a      	ldrb	r2, [r7, #13]
 800c4be:	4908      	ldr	r1, [pc, #32]	@ (800c4e0 <UARTEx_SetNbDataToProcess+0x98>)
 800c4c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	08012780 	.word	0x08012780
 800c4e0:	08012788 	.word	0x08012788

0800c4e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	f107 001c 	add.w	r0, r7, #28
 800c4f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d121      	bne.n	800c542 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68da      	ldr	r2, [r3, #12]
 800c50e:	4b2c      	ldr	r3, [pc, #176]	@ (800c5c0 <USB_CoreInit+0xdc>)
 800c510:	4013      	ands	r3, r2
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c526:	2b01      	cmp	r3, #1
 800c528:	d105      	bne.n	800c536 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f001 fafa 	bl	800db30 <USB_CoreReset>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73fb      	strb	r3, [r7, #15]
 800c540:	e01b      	b.n	800c57a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 faee 	bl	800db30 <USB_CoreReset>
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c56c:	e005      	b.n	800c57a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c57a:	7fbb      	ldrb	r3, [r7, #30]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d116      	bne.n	800c5ae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c584:	b29a      	uxth	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c58e:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c4 <USB_CoreInit+0xe0>)
 800c590:	4313      	orrs	r3, r2
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f043 0206 	orr.w	r2, r3, #6
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f043 0220 	orr.w	r2, r3, #32
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5ba:	b004      	add	sp, #16
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	ffbdffbf 	.word	0xffbdffbf
 800c5c4:	03ee0000 	.word	0x03ee0000

0800c5c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d165      	bne.n	800c6a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	4a41      	ldr	r2, [pc, #260]	@ (800c6e4 <USB_SetTurnaroundTime+0x11c>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d906      	bls.n	800c5f2 <USB_SetTurnaroundTime+0x2a>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4a40      	ldr	r2, [pc, #256]	@ (800c6e8 <USB_SetTurnaroundTime+0x120>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d202      	bcs.n	800c5f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c5ec:	230f      	movs	r3, #15
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e062      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	4a3c      	ldr	r2, [pc, #240]	@ (800c6e8 <USB_SetTurnaroundTime+0x120>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d306      	bcc.n	800c608 <USB_SetTurnaroundTime+0x40>
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4a3b      	ldr	r2, [pc, #236]	@ (800c6ec <USB_SetTurnaroundTime+0x124>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d202      	bcs.n	800c608 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c602:	230e      	movs	r3, #14
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	e057      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	4a38      	ldr	r2, [pc, #224]	@ (800c6ec <USB_SetTurnaroundTime+0x124>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d306      	bcc.n	800c61e <USB_SetTurnaroundTime+0x56>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4a37      	ldr	r2, [pc, #220]	@ (800c6f0 <USB_SetTurnaroundTime+0x128>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d202      	bcs.n	800c61e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c618:	230d      	movs	r3, #13
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	e04c      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4a33      	ldr	r2, [pc, #204]	@ (800c6f0 <USB_SetTurnaroundTime+0x128>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d306      	bcc.n	800c634 <USB_SetTurnaroundTime+0x6c>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4a32      	ldr	r2, [pc, #200]	@ (800c6f4 <USB_SetTurnaroundTime+0x12c>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d802      	bhi.n	800c634 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c62e:	230c      	movs	r3, #12
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	e041      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	4a2f      	ldr	r2, [pc, #188]	@ (800c6f4 <USB_SetTurnaroundTime+0x12c>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d906      	bls.n	800c64a <USB_SetTurnaroundTime+0x82>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	4a2e      	ldr	r2, [pc, #184]	@ (800c6f8 <USB_SetTurnaroundTime+0x130>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d802      	bhi.n	800c64a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c644:	230b      	movs	r3, #11
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	e036      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	4a2a      	ldr	r2, [pc, #168]	@ (800c6f8 <USB_SetTurnaroundTime+0x130>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d906      	bls.n	800c660 <USB_SetTurnaroundTime+0x98>
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4a29      	ldr	r2, [pc, #164]	@ (800c6fc <USB_SetTurnaroundTime+0x134>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d802      	bhi.n	800c660 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c65a:	230a      	movs	r3, #10
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	e02b      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4a26      	ldr	r2, [pc, #152]	@ (800c6fc <USB_SetTurnaroundTime+0x134>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d906      	bls.n	800c676 <USB_SetTurnaroundTime+0xae>
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4a25      	ldr	r2, [pc, #148]	@ (800c700 <USB_SetTurnaroundTime+0x138>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d202      	bcs.n	800c676 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c670:	2309      	movs	r3, #9
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e020      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	4a21      	ldr	r2, [pc, #132]	@ (800c700 <USB_SetTurnaroundTime+0x138>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d306      	bcc.n	800c68c <USB_SetTurnaroundTime+0xc4>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	4a20      	ldr	r2, [pc, #128]	@ (800c704 <USB_SetTurnaroundTime+0x13c>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d802      	bhi.n	800c68c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c686:	2308      	movs	r3, #8
 800c688:	617b      	str	r3, [r7, #20]
 800c68a:	e015      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	4a1d      	ldr	r2, [pc, #116]	@ (800c704 <USB_SetTurnaroundTime+0x13c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d906      	bls.n	800c6a2 <USB_SetTurnaroundTime+0xda>
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	4a1c      	ldr	r2, [pc, #112]	@ (800c708 <USB_SetTurnaroundTime+0x140>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d202      	bcs.n	800c6a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c69c:	2307      	movs	r3, #7
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e00a      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c6a2:	2306      	movs	r3, #6
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	e007      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c6ae:	2309      	movs	r3, #9
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e001      	b.n	800c6b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c6b4:	2309      	movs	r3, #9
 800c6b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68da      	ldr	r2, [r3, #12]
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	029b      	lsls	r3, r3, #10
 800c6cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	00d8acbf 	.word	0x00d8acbf
 800c6e8:	00e4e1c0 	.word	0x00e4e1c0
 800c6ec:	00f42400 	.word	0x00f42400
 800c6f0:	01067380 	.word	0x01067380
 800c6f4:	011a499f 	.word	0x011a499f
 800c6f8:	01312cff 	.word	0x01312cff
 800c6fc:	014ca43f 	.word	0x014ca43f
 800c700:	016e3600 	.word	0x016e3600
 800c704:	01a6ab1f 	.word	0x01a6ab1f
 800c708:	01e84800 	.word	0x01e84800

0800c70c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f043 0201 	orr.w	r2, r3, #1
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f023 0201 	bic.w	r2, r3, #1
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d115      	bne.n	800c79e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c77e:	200a      	movs	r0, #10
 800c780:	f7f4 fee4 	bl	800154c <HAL_Delay>
      ms += 10U;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	330a      	adds	r3, #10
 800c788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 f93f 	bl	800da0e <USB_GetMode>
 800c790:	4603      	mov	r3, r0
 800c792:	2b01      	cmp	r3, #1
 800c794:	d01e      	beq.n	800c7d4 <USB_SetCurrentMode+0x84>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2bc7      	cmp	r3, #199	@ 0xc7
 800c79a:	d9f0      	bls.n	800c77e <USB_SetCurrentMode+0x2e>
 800c79c:	e01a      	b.n	800c7d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c79e:	78fb      	ldrb	r3, [r7, #3]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d115      	bne.n	800c7d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c7b0:	200a      	movs	r0, #10
 800c7b2:	f7f4 fecb 	bl	800154c <HAL_Delay>
      ms += 10U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	330a      	adds	r3, #10
 800c7ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f001 f926 	bl	800da0e <USB_GetMode>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d005      	beq.n	800c7d4 <USB_SetCurrentMode+0x84>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800c7cc:	d9f0      	bls.n	800c7b0 <USB_SetCurrentMode+0x60>
 800c7ce:	e001      	b.n	800c7d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e005      	b.n	800c7e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800c7d8:	d101      	bne.n	800c7de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e000      	b.n	800c7e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b086      	sub	sp, #24
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c7f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c802:	2300      	movs	r3, #0
 800c804:	613b      	str	r3, [r7, #16]
 800c806:	e009      	b.n	800c81c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	3340      	adds	r3, #64	@ 0x40
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	4413      	add	r3, r2
 800c812:	2200      	movs	r2, #0
 800c814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	3301      	adds	r3, #1
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2b0e      	cmp	r3, #14
 800c820:	d9f2      	bls.n	800c808 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c822:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c826:	2b00      	cmp	r3, #0
 800c828:	d11c      	bne.n	800c864 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c838:	f043 0302 	orr.w	r3, r3, #2
 800c83c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c842:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	e005      	b.n	800c870 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c868:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c876:	461a      	mov	r2, r3
 800c878:	2300      	movs	r3, #0
 800c87a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c87c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c880:	2b01      	cmp	r3, #1
 800c882:	d10d      	bne.n	800c8a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d104      	bne.n	800c896 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c88c:	2100      	movs	r1, #0
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f968 	bl	800cb64 <USB_SetDevSpeed>
 800c894:	e008      	b.n	800c8a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c896:	2101      	movs	r1, #1
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f963 	bl	800cb64 <USB_SetDevSpeed>
 800c89e:	e003      	b.n	800c8a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c8a0:	2103      	movs	r1, #3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f95e 	bl	800cb64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c8a8:	2110      	movs	r1, #16
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f8fa 	bl	800caa4 <USB_FlushTxFifo>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f924 	bl	800cb08 <USB_FlushRxFifo>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8dc:	461a      	mov	r2, r3
 800c8de:	2300      	movs	r3, #0
 800c8e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	613b      	str	r3, [r7, #16]
 800c8f2:	e043      	b.n	800c97c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c90a:	d118      	bne.n	800c93e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d10a      	bne.n	800c928 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c91e:	461a      	mov	r2, r3
 800c920:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	e013      	b.n	800c950 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	015a      	lsls	r2, r3, #5
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	4413      	add	r3, r2
 800c930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c934:	461a      	mov	r2, r3
 800c936:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	e008      	b.n	800c950 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	015a      	lsls	r2, r3, #5
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	4413      	add	r3, r2
 800c946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c94a:	461a      	mov	r2, r3
 800c94c:	2300      	movs	r3, #0
 800c94e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c95c:	461a      	mov	r2, r3
 800c95e:	2300      	movs	r3, #0
 800c960:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c96e:	461a      	mov	r2, r3
 800c970:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	3301      	adds	r3, #1
 800c97a:	613b      	str	r3, [r7, #16]
 800c97c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c980:	461a      	mov	r2, r3
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	4293      	cmp	r3, r2
 800c986:	d3b5      	bcc.n	800c8f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c988:	2300      	movs	r3, #0
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	e043      	b.n	800ca16 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9a4:	d118      	bne.n	800c9d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10a      	bne.n	800c9c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	015a      	lsls	r2, r3, #5
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	e013      	b.n	800c9ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	015a      	lsls	r2, r3, #5
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	e008      	b.n	800c9ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca08:	461a      	mov	r2, r3
 800ca0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ca0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	3301      	adds	r3, #1
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d3b5      	bcc.n	800c98e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ca42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ca44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	f043 0210 	orr.w	r2, r3, #16
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	699a      	ldr	r2, [r3, #24]
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca9c <USB_DevInit+0x2b4>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ca64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d005      	beq.n	800ca78 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	f043 0208 	orr.w	r2, r3, #8
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ca78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d105      	bne.n	800ca8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	699a      	ldr	r2, [r3, #24]
 800ca84:	4b06      	ldr	r3, [pc, #24]	@ (800caa0 <USB_DevInit+0x2b8>)
 800ca86:	4313      	orrs	r3, r2
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ca8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca98:	b004      	add	sp, #16
 800ca9a:	4770      	bx	lr
 800ca9c:	803c3800 	.word	0x803c3800
 800caa0:	40000004 	.word	0x40000004

0800caa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3301      	adds	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cabe:	d901      	bls.n	800cac4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e01b      	b.n	800cafc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	daf2      	bge.n	800cab2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cacc:	2300      	movs	r3, #0
 800cace:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	019b      	lsls	r3, r3, #6
 800cad4:	f043 0220 	orr.w	r2, r3, #32
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3301      	adds	r3, #1
 800cae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cae8:	d901      	bls.n	800caee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800caea:	2303      	movs	r3, #3
 800caec:	e006      	b.n	800cafc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	f003 0320 	and.w	r3, r3, #32
 800caf6:	2b20      	cmp	r3, #32
 800caf8:	d0f0      	beq.n	800cadc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3301      	adds	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb20:	d901      	bls.n	800cb26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e018      	b.n	800cb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	daf2      	bge.n	800cb14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2210      	movs	r2, #16
 800cb36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb44:	d901      	bls.n	800cb4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e006      	b.n	800cb58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d0f0      	beq.n	800cb38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	68f9      	ldr	r1, [r7, #12]
 800cb80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cb84:	4313      	orrs	r3, r2
 800cb86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb96:	b480      	push	{r7}
 800cb98:	b087      	sub	sp, #28
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f003 0306 	and.w	r3, r3, #6
 800cbae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d102      	bne.n	800cbbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]
 800cbba:	e00a      	b.n	800cbd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d002      	beq.n	800cbc8 <USB_GetDevSpeed+0x32>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b06      	cmp	r3, #6
 800cbc6:	d102      	bne.n	800cbce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	75fb      	strb	r3, [r7, #23]
 800cbcc:	e001      	b.n	800cbd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cbce:	230f      	movs	r3, #15
 800cbd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	785b      	ldrb	r3, [r3, #1]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d139      	bne.n	800cc70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc02:	69da      	ldr	r2, [r3, #28]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f003 030f 	and.w	r3, r3, #15
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	68f9      	ldr	r1, [r7, #12]
 800cc16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d153      	bne.n	800ccdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	791b      	ldrb	r3, [r3, #4]
 800cc4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	059b      	lsls	r3, r3, #22
 800cc56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	0159      	lsls	r1, r3, #5
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	440b      	add	r3, r1
 800cc62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc66:	4619      	mov	r1, r3
 800cc68:	4b20      	ldr	r3, [pc, #128]	@ (800ccec <USB_ActivateEndpoint+0x10c>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	600b      	str	r3, [r1, #0]
 800cc6e:	e035      	b.n	800ccdc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc76:	69da      	ldr	r2, [r3, #28]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 030f 	and.w	r3, r3, #15
 800cc80:	2101      	movs	r1, #1
 800cc82:	fa01 f303 	lsl.w	r3, r1, r3
 800cc86:	041b      	lsls	r3, r3, #16
 800cc88:	68f9      	ldr	r1, [r7, #12]
 800cc8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d119      	bne.n	800ccdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	015a      	lsls	r2, r3, #5
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	791b      	ldrb	r3, [r3, #4]
 800ccc2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ccc4:	430b      	orrs	r3, r1
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	0159      	lsls	r1, r3, #5
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	440b      	add	r3, r1
 800ccd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4b05      	ldr	r3, [pc, #20]	@ (800ccec <USB_ActivateEndpoint+0x10c>)
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3714      	adds	r7, #20
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	10008000 	.word	0x10008000

0800ccf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	785b      	ldrb	r3, [r3, #1]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d161      	bne.n	800cdd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd22:	d11f      	bne.n	800cd64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cd42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 030f 	and.w	r3, r3, #15
 800cd74:	2101      	movs	r1, #1
 800cd76:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	43db      	mvns	r3, r3
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd84:	4013      	ands	r3, r2
 800cd86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd8e:	69da      	ldr	r2, [r3, #28]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	f003 030f 	and.w	r3, r3, #15
 800cd98:	2101      	movs	r1, #1
 800cd9a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	43db      	mvns	r3, r3
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cda8:	4013      	ands	r3, r2
 800cdaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	0159      	lsls	r1, r3, #5
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	440b      	add	r3, r1
 800cdc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	4b35      	ldr	r3, [pc, #212]	@ (800cea0 <USB_DeactivateEndpoint+0x1b0>)
 800cdca:	4013      	ands	r3, r2
 800cdcc:	600b      	str	r3, [r1, #0]
 800cdce:	e060      	b.n	800ce92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cde2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cde6:	d11f      	bne.n	800ce28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	015a      	lsls	r2, r3, #5
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4413      	add	r3, r2
 800cdf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	0151      	lsls	r1, r2, #5
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	440a      	add	r2, r1
 800cdfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ce06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	015a      	lsls	r2, r3, #5
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4413      	add	r3, r2
 800ce10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	0151      	lsls	r1, r2, #5
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	440a      	add	r2, r1
 800ce1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ce22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	f003 030f 	and.w	r3, r3, #15
 800ce38:	2101      	movs	r1, #1
 800ce3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce3e:	041b      	lsls	r3, r3, #16
 800ce40:	43db      	mvns	r3, r3
 800ce42:	68f9      	ldr	r1, [r7, #12]
 800ce44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce48:	4013      	ands	r3, r2
 800ce4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce52:	69da      	ldr	r2, [r3, #28]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	f003 030f 	and.w	r3, r3, #15
 800ce5c:	2101      	movs	r1, #1
 800ce5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce62:	041b      	lsls	r3, r3, #16
 800ce64:	43db      	mvns	r3, r3
 800ce66:	68f9      	ldr	r1, [r7, #12]
 800ce68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	015a      	lsls	r2, r3, #5
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	0159      	lsls	r1, r3, #5
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	440b      	add	r3, r1
 800ce86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <USB_DeactivateEndpoint+0x1b4>)
 800ce8e:	4013      	ands	r3, r2
 800ce90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	ec337800 	.word	0xec337800
 800cea4:	eff37800 	.word	0xeff37800

0800cea8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08a      	sub	sp, #40	@ 0x28
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	785b      	ldrb	r3, [r3, #1]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	f040 8185 	bne.w	800d1d4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d132      	bne.n	800cf38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	015a      	lsls	r2, r3, #5
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	4413      	add	r3, r2
 800ceda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	0159      	lsls	r1, r3, #5
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	440b      	add	r3, r1
 800cee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceec:	4619      	mov	r1, r3
 800ceee:	4ba7      	ldr	r3, [pc, #668]	@ (800d18c <USB_EPStartXfer+0x2e4>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	69ba      	ldr	r2, [r7, #24]
 800cf04:	0151      	lsls	r1, r2, #5
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	440a      	add	r2, r1
 800cf0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cf12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	015a      	lsls	r2, r3, #5
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf20:	691a      	ldr	r2, [r3, #16]
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	0159      	lsls	r1, r3, #5
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	440b      	add	r3, r1
 800cf2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4b97      	ldr	r3, [pc, #604]	@ (800d190 <USB_EPStartXfer+0x2e8>)
 800cf32:	4013      	ands	r3, r2
 800cf34:	610b      	str	r3, [r1, #16]
 800cf36:	e097      	b.n	800d068 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf44:	691a      	ldr	r2, [r3, #16]
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	0159      	lsls	r1, r3, #5
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	440b      	add	r3, r1
 800cf4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf52:	4619      	mov	r1, r3
 800cf54:	4b8e      	ldr	r3, [pc, #568]	@ (800d190 <USB_EPStartXfer+0x2e8>)
 800cf56:	4013      	ands	r3, r2
 800cf58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	015a      	lsls	r2, r3, #5
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	4413      	add	r3, r2
 800cf62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf66:	691a      	ldr	r2, [r3, #16]
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	0159      	lsls	r1, r3, #5
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	440b      	add	r3, r1
 800cf70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf74:	4619      	mov	r1, r3
 800cf76:	4b85      	ldr	r3, [pc, #532]	@ (800d18c <USB_EPStartXfer+0x2e4>)
 800cf78:	4013      	ands	r3, r2
 800cf7a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d11a      	bne.n	800cfb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	691a      	ldr	r2, [r3, #16]
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d903      	bls.n	800cf96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	689a      	ldr	r2, [r3, #8]
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	0151      	lsls	r1, r2, #5
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	440a      	add	r2, r1
 800cfac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cfb4:	6113      	str	r3, [r2, #16]
 800cfb6:	e044      	b.n	800d042 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	691a      	ldr	r2, [r3, #16]
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	1e5a      	subs	r2, r3, #1
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfcc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfda:	691a      	ldr	r2, [r3, #16]
 800cfdc:	8afb      	ldrh	r3, [r7, #22]
 800cfde:	04d9      	lsls	r1, r3, #19
 800cfe0:	4b6c      	ldr	r3, [pc, #432]	@ (800d194 <USB_EPStartXfer+0x2ec>)
 800cfe2:	400b      	ands	r3, r1
 800cfe4:	69b9      	ldr	r1, [r7, #24]
 800cfe6:	0148      	lsls	r0, r1, #5
 800cfe8:	69f9      	ldr	r1, [r7, #28]
 800cfea:	4401      	add	r1, r0
 800cfec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800cff0:	4313      	orrs	r3, r2
 800cff2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	791b      	ldrb	r3, [r3, #4]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d122      	bne.n	800d042 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	015a      	lsls	r2, r3, #5
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	4413      	add	r3, r2
 800d004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	0151      	lsls	r1, r2, #5
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	440a      	add	r2, r1
 800d012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d016:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d01a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	015a      	lsls	r2, r3, #5
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	4413      	add	r3, r2
 800d024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d028:	691a      	ldr	r2, [r3, #16]
 800d02a:	8afb      	ldrh	r3, [r7, #22]
 800d02c:	075b      	lsls	r3, r3, #29
 800d02e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d032:	69b9      	ldr	r1, [r7, #24]
 800d034:	0148      	lsls	r0, r1, #5
 800d036:	69f9      	ldr	r1, [r7, #28]
 800d038:	4401      	add	r1, r0
 800d03a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d03e:	4313      	orrs	r3, r2
 800d040:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	015a      	lsls	r2, r3, #5
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	4413      	add	r3, r2
 800d04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d04e:	691a      	ldr	r2, [r3, #16]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d058:	69b9      	ldr	r1, [r7, #24]
 800d05a:	0148      	lsls	r0, r1, #5
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	4401      	add	r1, r0
 800d060:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d064:	4313      	orrs	r3, r2
 800d066:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d14b      	bne.n	800d106 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d009      	beq.n	800d08a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	015a      	lsls	r2, r3, #5
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	4413      	add	r3, r2
 800d07e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d082:	461a      	mov	r2, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	69db      	ldr	r3, [r3, #28]
 800d088:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	791b      	ldrb	r3, [r3, #4]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d128      	bne.n	800d0e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d110      	bne.n	800d0c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	015a      	lsls	r2, r3, #5
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	69ba      	ldr	r2, [r7, #24]
 800d0b2:	0151      	lsls	r1, r2, #5
 800d0b4:	69fa      	ldr	r2, [r7, #28]
 800d0b6:	440a      	add	r2, r1
 800d0b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	e00f      	b.n	800d0e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	015a      	lsls	r2, r3, #5
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	69ba      	ldr	r2, [r7, #24]
 800d0d4:	0151      	lsls	r1, r2, #5
 800d0d6:	69fa      	ldr	r2, [r7, #28]
 800d0d8:	440a      	add	r2, r1
 800d0da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	0151      	lsls	r1, r2, #5
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	440a      	add	r2, r1
 800d0fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	e169      	b.n	800d3da <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	69ba      	ldr	r2, [r7, #24]
 800d116:	0151      	lsls	r1, r2, #5
 800d118:	69fa      	ldr	r2, [r7, #28]
 800d11a:	440a      	add	r2, r1
 800d11c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d120:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d124:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	791b      	ldrb	r3, [r3, #4]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d015      	beq.n	800d15a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 8151 	beq.w	800d3da <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d13e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	2101      	movs	r1, #1
 800d14a:	fa01 f303 	lsl.w	r3, r1, r3
 800d14e:	69f9      	ldr	r1, [r7, #28]
 800d150:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d154:	4313      	orrs	r3, r2
 800d156:	634b      	str	r3, [r1, #52]	@ 0x34
 800d158:	e13f      	b.n	800d3da <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d166:	2b00      	cmp	r3, #0
 800d168:	d116      	bne.n	800d198 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	015a      	lsls	r2, r3, #5
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	4413      	add	r3, r2
 800d172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	0151      	lsls	r1, r2, #5
 800d17c:	69fa      	ldr	r2, [r7, #28]
 800d17e:	440a      	add	r2, r1
 800d180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d184:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	e015      	b.n	800d1b8 <USB_EPStartXfer+0x310>
 800d18c:	e007ffff 	.word	0xe007ffff
 800d190:	fff80000 	.word	0xfff80000
 800d194:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	68d9      	ldr	r1, [r3, #12]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	781a      	ldrb	r2, [r3, #0]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	b298      	uxth	r0, r3
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 f9b9 	bl	800d544 <USB_WritePacket>
 800d1d2:	e102      	b.n	800d3da <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e0:	691a      	ldr	r2, [r3, #16]
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	0159      	lsls	r1, r3, #5
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	440b      	add	r3, r1
 800d1ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4b7c      	ldr	r3, [pc, #496]	@ (800d3e4 <USB_EPStartXfer+0x53c>)
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	015a      	lsls	r2, r3, #5
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	0159      	lsls	r1, r3, #5
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	440b      	add	r3, r1
 800d20c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d210:	4619      	mov	r1, r3
 800d212:	4b75      	ldr	r3, [pc, #468]	@ (800d3e8 <USB_EPStartXfer+0x540>)
 800d214:	4013      	ands	r3, r2
 800d216:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d12f      	bne.n	800d27e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	689a      	ldr	r2, [r3, #8]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	689a      	ldr	r2, [r3, #8]
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	015a      	lsls	r2, r3, #5
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	4413      	add	r3, r2
 800d23e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d242:	691a      	ldr	r2, [r3, #16]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	6a1b      	ldr	r3, [r3, #32]
 800d248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d24c:	69b9      	ldr	r1, [r7, #24]
 800d24e:	0148      	lsls	r0, r1, #5
 800d250:	69f9      	ldr	r1, [r7, #28]
 800d252:	4401      	add	r1, r0
 800d254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d258:	4313      	orrs	r3, r2
 800d25a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d276:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d27a:	6113      	str	r3, [r2, #16]
 800d27c:	e05f      	b.n	800d33e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d123      	bne.n	800d2ce <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	015a      	lsls	r2, r3, #5
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	4413      	add	r3, r2
 800d28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d29c:	69b9      	ldr	r1, [r7, #24]
 800d29e:	0148      	lsls	r0, r1, #5
 800d2a0:	69f9      	ldr	r1, [r7, #28]
 800d2a2:	4401      	add	r1, r0
 800d2a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	0151      	lsls	r1, r2, #5
 800d2be:	69fa      	ldr	r2, [r7, #28]
 800d2c0:	440a      	add	r2, r1
 800d2c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d2c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2ca:	6113      	str	r3, [r2, #16]
 800d2cc:	e037      	b.n	800d33e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	691a      	ldr	r2, [r3, #16]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	1e5a      	subs	r2, r3, #1
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	8afa      	ldrh	r2, [r7, #22]
 800d2ea:	fb03 f202 	mul.w	r2, r3, r2
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2fe:	691a      	ldr	r2, [r3, #16]
 800d300:	8afb      	ldrh	r3, [r7, #22]
 800d302:	04d9      	lsls	r1, r3, #19
 800d304:	4b39      	ldr	r3, [pc, #228]	@ (800d3ec <USB_EPStartXfer+0x544>)
 800d306:	400b      	ands	r3, r1
 800d308:	69b9      	ldr	r1, [r7, #24]
 800d30a:	0148      	lsls	r0, r1, #5
 800d30c:	69f9      	ldr	r1, [r7, #28]
 800d30e:	4401      	add	r1, r0
 800d310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d314:	4313      	orrs	r3, r2
 800d316:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d324:	691a      	ldr	r2, [r3, #16]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d32e:	69b9      	ldr	r1, [r7, #24]
 800d330:	0148      	lsls	r0, r1, #5
 800d332:	69f9      	ldr	r1, [r7, #28]
 800d334:	4401      	add	r1, r0
 800d336:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d33a:	4313      	orrs	r3, r2
 800d33c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d10d      	bne.n	800d360 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d009      	beq.n	800d360 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	68d9      	ldr	r1, [r3, #12]
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	015a      	lsls	r2, r3, #5
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	4413      	add	r3, r2
 800d358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d35c:	460a      	mov	r2, r1
 800d35e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	791b      	ldrb	r3, [r3, #4]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d128      	bne.n	800d3ba <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d374:	2b00      	cmp	r3, #0
 800d376:	d110      	bne.n	800d39a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	015a      	lsls	r2, r3, #5
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	4413      	add	r3, r2
 800d380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	0151      	lsls	r1, r2, #5
 800d38a:	69fa      	ldr	r2, [r7, #28]
 800d38c:	440a      	add	r2, r1
 800d38e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d392:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	e00f      	b.n	800d3ba <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	0151      	lsls	r1, r2, #5
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	440a      	add	r2, r1
 800d3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d3b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	0151      	lsls	r1, r2, #5
 800d3cc:	69fa      	ldr	r2, [r7, #28]
 800d3ce:	440a      	add	r2, r1
 800d3d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d3d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3720      	adds	r7, #32
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	fff80000 	.word	0xfff80000
 800d3e8:	e007ffff 	.word	0xe007ffff
 800d3ec:	1ff80000 	.word	0x1ff80000

0800d3f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	785b      	ldrb	r3, [r3, #1]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d14a      	bne.n	800d4a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	015a      	lsls	r2, r3, #5
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	4413      	add	r3, r2
 800d418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d426:	f040 8086 	bne.w	800d536 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	015a      	lsls	r2, r3, #5
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	4413      	add	r3, r2
 800d434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	7812      	ldrb	r2, [r2, #0]
 800d43e:	0151      	lsls	r1, r2, #5
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	440a      	add	r2, r1
 800d444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d448:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d44c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	7812      	ldrb	r2, [r2, #0]
 800d462:	0151      	lsls	r1, r2, #5
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	440a      	add	r2, r1
 800d468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d46c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d470:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d47e:	4293      	cmp	r3, r2
 800d480:	d902      	bls.n	800d488 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	75fb      	strb	r3, [r7, #23]
          break;
 800d486:	e056      	b.n	800d536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	015a      	lsls	r2, r3, #5
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	4413      	add	r3, r2
 800d492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d49c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4a0:	d0e7      	beq.n	800d472 <USB_EPStopXfer+0x82>
 800d4a2:	e048      	b.n	800d536 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	015a      	lsls	r2, r3, #5
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4bc:	d13b      	bne.n	800d536 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	7812      	ldrb	r2, [r2, #0]
 800d4d2:	0151      	lsls	r1, r2, #5
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	440a      	add	r2, r1
 800d4d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d4e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	015a      	lsls	r2, r3, #5
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	7812      	ldrb	r2, [r2, #0]
 800d4f6:	0151      	lsls	r1, r2, #5
 800d4f8:	693a      	ldr	r2, [r7, #16]
 800d4fa:	440a      	add	r2, r1
 800d4fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d500:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d504:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3301      	adds	r3, #1
 800d50a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d512:	4293      	cmp	r3, r2
 800d514:	d902      	bls.n	800d51c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	75fb      	strb	r3, [r7, #23]
          break;
 800d51a:	e00c      	b.n	800d536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	015a      	lsls	r2, r3, #5
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	4413      	add	r3, r2
 800d526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d534:	d0e7      	beq.n	800d506 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d544:	b480      	push	{r7}
 800d546:	b089      	sub	sp, #36	@ 0x24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4611      	mov	r1, r2
 800d550:	461a      	mov	r2, r3
 800d552:	460b      	mov	r3, r1
 800d554:	71fb      	strb	r3, [r7, #7]
 800d556:	4613      	mov	r3, r2
 800d558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d566:	2b00      	cmp	r3, #0
 800d568:	d123      	bne.n	800d5b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d56a:	88bb      	ldrh	r3, [r7, #4]
 800d56c:	3303      	adds	r3, #3
 800d56e:	089b      	lsrs	r3, r3, #2
 800d570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d572:	2300      	movs	r3, #0
 800d574:	61bb      	str	r3, [r7, #24]
 800d576:	e018      	b.n	800d5aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	031a      	lsls	r2, r3, #12
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d584:	461a      	mov	r2, r3
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	3301      	adds	r3, #1
 800d590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	3301      	adds	r3, #1
 800d596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	3301      	adds	r3, #1
 800d59c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	61bb      	str	r3, [r7, #24]
 800d5aa:	69ba      	ldr	r2, [r7, #24]
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d3e2      	bcc.n	800d578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3724      	adds	r7, #36	@ 0x24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b08b      	sub	sp, #44	@ 0x2c
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d5d6:	88fb      	ldrh	r3, [r7, #6]
 800d5d8:	089b      	lsrs	r3, r3, #2
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d5de:	88fb      	ldrh	r3, [r7, #6]
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	623b      	str	r3, [r7, #32]
 800d5ea:	e014      	b.n	800d616 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	3301      	adds	r3, #1
 800d602:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	3301      	adds	r3, #1
 800d608:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	3301      	adds	r3, #1
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	3301      	adds	r3, #1
 800d614:	623b      	str	r3, [r7, #32]
 800d616:	6a3a      	ldr	r2, [r7, #32]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d3e6      	bcc.n	800d5ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d61e:	8bfb      	ldrh	r3, [r7, #30]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01e      	beq.n	800d662 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d62e:	461a      	mov	r2, r3
 800d630:	f107 0310 	add.w	r3, r7, #16
 800d634:	6812      	ldr	r2, [r2, #0]
 800d636:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	fa22 f303 	lsr.w	r3, r2, r3
 800d644:	b2da      	uxtb	r2, r3
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	701a      	strb	r2, [r3, #0]
      i++;
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	3301      	adds	r3, #1
 800d64e:	623b      	str	r3, [r7, #32]
      pDest++;
 800d650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d652:	3301      	adds	r3, #1
 800d654:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d656:	8bfb      	ldrh	r3, [r7, #30]
 800d658:	3b01      	subs	r3, #1
 800d65a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d65c:	8bfb      	ldrh	r3, [r7, #30]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1ea      	bne.n	800d638 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d664:	4618      	mov	r0, r3
 800d666:	372c      	adds	r7, #44	@ 0x2c
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	785b      	ldrb	r3, [r3, #1]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d12c      	bne.n	800d6e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	015a      	lsls	r2, r3, #5
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4413      	add	r3, r2
 800d694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	db12      	blt.n	800d6c4 <USB_EPSetStall+0x54>
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00f      	beq.n	800d6c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	0151      	lsls	r1, r2, #5
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	440a      	add	r2, r1
 800d6ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d6c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	015a      	lsls	r2, r3, #5
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	0151      	lsls	r1, r2, #5
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	440a      	add	r2, r1
 800d6da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	e02b      	b.n	800d73e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	015a      	lsls	r2, r3, #5
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	db12      	blt.n	800d71e <USB_EPSetStall+0xae>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00f      	beq.n	800d71e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	0151      	lsls	r1, r2, #5
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	440a      	add	r2, r1
 800d714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d718:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d71c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	0151      	lsls	r1, r2, #5
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	440a      	add	r2, r1
 800d734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d73c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	785b      	ldrb	r3, [r3, #1]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d128      	bne.n	800d7ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	015a      	lsls	r2, r3, #5
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	4413      	add	r3, r2
 800d770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	0151      	lsls	r1, r2, #5
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	440a      	add	r2, r1
 800d77e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d782:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d786:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	791b      	ldrb	r3, [r3, #4]
 800d78c:	2b03      	cmp	r3, #3
 800d78e:	d003      	beq.n	800d798 <USB_EPClearStall+0x4c>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	791b      	ldrb	r3, [r3, #4]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d138      	bne.n	800d80a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	015a      	lsls	r2, r3, #5
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4413      	add	r3, r2
 800d7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	0151      	lsls	r1, r2, #5
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	440a      	add	r2, r1
 800d7ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	e027      	b.n	800d80a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	015a      	lsls	r2, r3, #5
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	0151      	lsls	r1, r2, #5
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	440a      	add	r2, r1
 800d7d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d7d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	791b      	ldrb	r3, [r3, #4]
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d003      	beq.n	800d7ea <USB_EPClearStall+0x9e>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	791b      	ldrb	r3, [r3, #4]
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d10f      	bne.n	800d80a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	0151      	lsls	r1, r2, #5
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	440a      	add	r2, r1
 800d800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d808:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d836:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d83a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	78fb      	ldrb	r3, [r7, #3]
 800d846:	011b      	lsls	r3, r3, #4
 800d848:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800d84c:	68f9      	ldr	r1, [r7, #12]
 800d84e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d852:	4313      	orrs	r3, r2
 800d854:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d87e:	f023 0303 	bic.w	r3, r3, #3
 800d882:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d892:	f023 0302 	bic.w	r3, r3, #2
 800d896:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b085      	sub	sp, #20
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d8d4:	f043 0302 	orr.w	r3, r3, #2
 800d8d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d900:	68fb      	ldr	r3, [r7, #12]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d90e:	b480      	push	{r7}
 800d910:	b085      	sub	sp, #20
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	4013      	ands	r3, r2
 800d930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	0c1b      	lsrs	r3, r3, #16
}
 800d936:	4618      	mov	r0, r3
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	4013      	ands	r3, r2
 800d964:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	b29b      	uxth	r3, r3
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	460b      	mov	r3, r1
 800d980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d986:	78fb      	ldrb	r3, [r7, #3]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d9d6:	78fb      	ldrb	r3, [r7, #3]
 800d9d8:	f003 030f 	and.w	r3, r3, #15
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e2:	01db      	lsls	r3, r3, #7
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d9ec:	78fb      	ldrb	r3, [r7, #3]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da00:	68bb      	ldr	r3, [r7, #8]
}
 800da02:	4618      	mov	r0, r3
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	f003 0301 	and.w	r3, r3, #1
}
 800da1e:	4618      	mov	r0, r3
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
	...

0800da2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da46:	4619      	mov	r1, r3
 800da48:	4b09      	ldr	r3, [pc, #36]	@ (800da70 <USB_ActivateSetup+0x44>)
 800da4a:	4013      	ands	r3, r2
 800da4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	fffff800 	.word	0xfffff800

0800da74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800da74:	b480      	push	{r7}
 800da76:	b087      	sub	sp, #28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	460b      	mov	r3, r1
 800da7e:	607a      	str	r2, [r7, #4]
 800da80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	333c      	adds	r3, #60	@ 0x3c
 800da8a:	3304      	adds	r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	4a26      	ldr	r2, [pc, #152]	@ (800db2c <USB_EP0_OutStart+0xb8>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d90a      	bls.n	800daae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800daa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daa8:	d101      	bne.n	800daae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	e037      	b.n	800db1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dab4:	461a      	mov	r2, r3
 800dab6:	2300      	movs	r3, #0
 800dab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dadc:	f043 0318 	orr.w	r3, r3, #24
 800dae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800daf0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800daf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800daf6:	7afb      	ldrb	r3, [r7, #11]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d10f      	bne.n	800db1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db02:	461a      	mov	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800db1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db1c:	2300      	movs	r3, #0
}
 800db1e:	4618      	mov	r0, r3
 800db20:	371c      	adds	r7, #28
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	4f54300a 	.word	0x4f54300a

0800db30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3301      	adds	r3, #1
 800db40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db48:	d901      	bls.n	800db4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e01b      	b.n	800db86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	daf2      	bge.n	800db3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	f043 0201 	orr.w	r2, r3, #1
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3301      	adds	r3, #1
 800db6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db72:	d901      	bls.n	800db78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e006      	b.n	800db86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b01      	cmp	r3, #1
 800db82:	d0f0      	beq.n	800db66 <USB_CoreReset+0x36>

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3714      	adds	r7, #20
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
	...

0800db94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dba0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dba4:	f002 fd6c 	bl	8010680 <USBD_static_malloc>
 800dba8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d109      	bne.n	800dbc4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	32b0      	adds	r2, #176	@ 0xb0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	e0d4      	b.n	800dd6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dbc4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dbc8:	2100      	movs	r1, #0
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f003 fbee 	bl	80113ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	32b0      	adds	r2, #176	@ 0xb0
 800dbda:	68f9      	ldr	r1, [r7, #12]
 800dbdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	32b0      	adds	r2, #176	@ 0xb0
 800dbea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	7c1b      	ldrb	r3, [r3, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d138      	bne.n	800dc6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dbfc:	4b5e      	ldr	r3, [pc, #376]	@ (800dd78 <USBD_CDC_Init+0x1e4>)
 800dbfe:	7819      	ldrb	r1, [r3, #0]
 800dc00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc04:	2202      	movs	r2, #2
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f002 fc17 	bl	801043a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc0c:	4b5a      	ldr	r3, [pc, #360]	@ (800dd78 <USBD_CDC_Init+0x1e4>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	f003 020f 	and.w	r2, r3, #15
 800dc14:	6879      	ldr	r1, [r7, #4]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	440b      	add	r3, r1
 800dc20:	3324      	adds	r3, #36	@ 0x24
 800dc22:	2201      	movs	r2, #1
 800dc24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dc26:	4b55      	ldr	r3, [pc, #340]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dc28:	7819      	ldrb	r1, [r3, #0]
 800dc2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc2e:	2202      	movs	r2, #2
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f002 fc02 	bl	801043a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dc36:	4b51      	ldr	r3, [pc, #324]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	f003 020f 	and.w	r2, r3, #15
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	440b      	add	r3, r1
 800dc4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc4e:	2201      	movs	r2, #1
 800dc50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dc52:	4b4b      	ldr	r3, [pc, #300]	@ (800dd80 <USBD_CDC_Init+0x1ec>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	f003 020f 	and.w	r2, r3, #15
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	440b      	add	r3, r1
 800dc66:	3326      	adds	r3, #38	@ 0x26
 800dc68:	2210      	movs	r2, #16
 800dc6a:	801a      	strh	r2, [r3, #0]
 800dc6c:	e035      	b.n	800dcda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dc6e:	4b42      	ldr	r3, [pc, #264]	@ (800dd78 <USBD_CDC_Init+0x1e4>)
 800dc70:	7819      	ldrb	r1, [r3, #0]
 800dc72:	2340      	movs	r3, #64	@ 0x40
 800dc74:	2202      	movs	r2, #2
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f002 fbdf 	bl	801043a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc7c:	4b3e      	ldr	r3, [pc, #248]	@ (800dd78 <USBD_CDC_Init+0x1e4>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f003 020f 	and.w	r2, r3, #15
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	4613      	mov	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	440b      	add	r3, r1
 800dc90:	3324      	adds	r3, #36	@ 0x24
 800dc92:	2201      	movs	r2, #1
 800dc94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dc96:	4b39      	ldr	r3, [pc, #228]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dc98:	7819      	ldrb	r1, [r3, #0]
 800dc9a:	2340      	movs	r3, #64	@ 0x40
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f002 fbcb 	bl	801043a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dca4:	4b35      	ldr	r3, [pc, #212]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	f003 020f 	and.w	r2, r3, #15
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	440b      	add	r3, r1
 800dcb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dcc0:	4b2f      	ldr	r3, [pc, #188]	@ (800dd80 <USBD_CDC_Init+0x1ec>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f003 020f 	and.w	r2, r3, #15
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	440b      	add	r3, r1
 800dcd4:	3326      	adds	r3, #38	@ 0x26
 800dcd6:	2210      	movs	r2, #16
 800dcd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dcda:	4b29      	ldr	r3, [pc, #164]	@ (800dd80 <USBD_CDC_Init+0x1ec>)
 800dcdc:	7819      	ldrb	r1, [r3, #0]
 800dcde:	2308      	movs	r3, #8
 800dce0:	2203      	movs	r2, #3
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f002 fba9 	bl	801043a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dce8:	4b25      	ldr	r3, [pc, #148]	@ (800dd80 <USBD_CDC_Init+0x1ec>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 020f 	and.w	r2, r3, #15
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	3324      	adds	r3, #36	@ 0x24
 800dcfe:	2201      	movs	r2, #1
 800dd00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	33b0      	adds	r3, #176	@ 0xb0
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dd38:	2302      	movs	r3, #2
 800dd3a:	e018      	b.n	800dd6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	7c1b      	ldrb	r3, [r3, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd44:	4b0d      	ldr	r3, [pc, #52]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dd46:	7819      	ldrb	r1, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f002 fc60 	bl	8010618 <USBD_LL_PrepareReceive>
 800dd58:	e008      	b.n	800dd6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd5a:	4b08      	ldr	r3, [pc, #32]	@ (800dd7c <USBD_CDC_Init+0x1e8>)
 800dd5c:	7819      	ldrb	r1, [r3, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd64:	2340      	movs	r3, #64	@ 0x40
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f002 fc56 	bl	8010618 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	24000097 	.word	0x24000097
 800dd7c:	24000098 	.word	0x24000098
 800dd80:	24000099 	.word	0x24000099

0800dd84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dd90:	4b3a      	ldr	r3, [pc, #232]	@ (800de7c <USBD_CDC_DeInit+0xf8>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f002 fb75 	bl	8010486 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dd9c:	4b37      	ldr	r3, [pc, #220]	@ (800de7c <USBD_CDC_DeInit+0xf8>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 020f 	and.w	r2, r3, #15
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	4613      	mov	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	440b      	add	r3, r1
 800ddb0:	3324      	adds	r3, #36	@ 0x24
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ddb6:	4b32      	ldr	r3, [pc, #200]	@ (800de80 <USBD_CDC_DeInit+0xfc>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f002 fb62 	bl	8010486 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ddc2:	4b2f      	ldr	r3, [pc, #188]	@ (800de80 <USBD_CDC_DeInit+0xfc>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f003 020f 	and.w	r2, r3, #15
 800ddca:	6879      	ldr	r1, [r7, #4]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	440b      	add	r3, r1
 800ddd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ddda:	2200      	movs	r2, #0
 800dddc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ddde:	4b29      	ldr	r3, [pc, #164]	@ (800de84 <USBD_CDC_DeInit+0x100>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f002 fb4e 	bl	8010486 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ddea:	4b26      	ldr	r3, [pc, #152]	@ (800de84 <USBD_CDC_DeInit+0x100>)
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 020f 	and.w	r2, r3, #15
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	3324      	adds	r3, #36	@ 0x24
 800de00:	2200      	movs	r2, #0
 800de02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800de04:	4b1f      	ldr	r3, [pc, #124]	@ (800de84 <USBD_CDC_DeInit+0x100>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	f003 020f 	and.w	r2, r3, #15
 800de0c:	6879      	ldr	r1, [r7, #4]
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	440b      	add	r3, r1
 800de18:	3326      	adds	r3, #38	@ 0x26
 800de1a:	2200      	movs	r2, #0
 800de1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	32b0      	adds	r2, #176	@ 0xb0
 800de28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01f      	beq.n	800de70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	33b0      	adds	r3, #176	@ 0xb0
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	32b0      	adds	r2, #176	@ 0xb0
 800de4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de52:	4618      	mov	r0, r3
 800de54:	f002 fc22 	bl	801069c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	32b0      	adds	r2, #176	@ 0xb0
 800de62:	2100      	movs	r1, #0
 800de64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	24000097 	.word	0x24000097
 800de80:	24000098 	.word	0x24000098
 800de84:	24000099 	.word	0x24000099

0800de88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	32b0      	adds	r2, #176	@ 0xb0
 800de9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dea6:	2300      	movs	r3, #0
 800dea8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800deb4:	2303      	movs	r3, #3
 800deb6:	e0bf      	b.n	800e038 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d050      	beq.n	800df66 <USBD_CDC_Setup+0xde>
 800dec4:	2b20      	cmp	r3, #32
 800dec6:	f040 80af 	bne.w	800e028 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	88db      	ldrh	r3, [r3, #6]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d03a      	beq.n	800df48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	b25b      	sxtb	r3, r3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	da1b      	bge.n	800df14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	33b0      	adds	r3, #176	@ 0xb0
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800def2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	88d2      	ldrh	r2, [r2, #6]
 800def8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	88db      	ldrh	r3, [r3, #6]
 800defe:	2b07      	cmp	r3, #7
 800df00:	bf28      	it	cs
 800df02:	2307      	movcs	r3, #7
 800df04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	89fa      	ldrh	r2, [r7, #14]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fdbd 	bl	800fa8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800df12:	e090      	b.n	800e036 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	785a      	ldrb	r2, [r3, #1]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	88db      	ldrh	r3, [r3, #6]
 800df22:	2b3f      	cmp	r3, #63	@ 0x3f
 800df24:	d803      	bhi.n	800df2e <USBD_CDC_Setup+0xa6>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	88db      	ldrh	r3, [r3, #6]
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	e000      	b.n	800df30 <USBD_CDC_Setup+0xa8>
 800df2e:	2240      	movs	r2, #64	@ 0x40
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800df36:	6939      	ldr	r1, [r7, #16]
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800df3e:	461a      	mov	r2, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f001 fdcf 	bl	800fae4 <USBD_CtlPrepareRx>
      break;
 800df46:	e076      	b.n	800e036 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	33b0      	adds	r3, #176	@ 0xb0
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	7850      	ldrb	r0, [r2, #1]
 800df5e:	2200      	movs	r2, #0
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	4798      	blx	r3
      break;
 800df64:	e067      	b.n	800e036 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	2b0b      	cmp	r3, #11
 800df6c:	d851      	bhi.n	800e012 <USBD_CDC_Setup+0x18a>
 800df6e:	a201      	add	r2, pc, #4	@ (adr r2, 800df74 <USBD_CDC_Setup+0xec>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800dfa5 	.word	0x0800dfa5
 800df78:	0800e021 	.word	0x0800e021
 800df7c:	0800e013 	.word	0x0800e013
 800df80:	0800e013 	.word	0x0800e013
 800df84:	0800e013 	.word	0x0800e013
 800df88:	0800e013 	.word	0x0800e013
 800df8c:	0800e013 	.word	0x0800e013
 800df90:	0800e013 	.word	0x0800e013
 800df94:	0800e013 	.word	0x0800e013
 800df98:	0800e013 	.word	0x0800e013
 800df9c:	0800dfcf 	.word	0x0800dfcf
 800dfa0:	0800dff9 	.word	0x0800dff9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b03      	cmp	r3, #3
 800dfae:	d107      	bne.n	800dfc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dfb0:	f107 030a 	add.w	r3, r7, #10
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 fd67 	bl	800fa8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfbe:	e032      	b.n	800e026 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dfc0:	6839      	ldr	r1, [r7, #0]
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f001 fce5 	bl	800f992 <USBD_CtlError>
            ret = USBD_FAIL;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	75fb      	strb	r3, [r7, #23]
          break;
 800dfcc:	e02b      	b.n	800e026 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d107      	bne.n	800dfea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dfda:	f107 030d 	add.w	r3, r7, #13
 800dfde:	2201      	movs	r2, #1
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f001 fd52 	bl	800fa8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfe8:	e01d      	b.n	800e026 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f001 fcd0 	bl	800f992 <USBD_CtlError>
            ret = USBD_FAIL;
 800dff2:	2303      	movs	r3, #3
 800dff4:	75fb      	strb	r3, [r7, #23]
          break;
 800dff6:	e016      	b.n	800e026 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	2b03      	cmp	r3, #3
 800e002:	d00f      	beq.n	800e024 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f001 fcc3 	bl	800f992 <USBD_CtlError>
            ret = USBD_FAIL;
 800e00c:	2303      	movs	r3, #3
 800e00e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e010:	e008      	b.n	800e024 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f001 fcbc 	bl	800f992 <USBD_CtlError>
          ret = USBD_FAIL;
 800e01a:	2303      	movs	r3, #3
 800e01c:	75fb      	strb	r3, [r7, #23]
          break;
 800e01e:	e002      	b.n	800e026 <USBD_CDC_Setup+0x19e>
          break;
 800e020:	bf00      	nop
 800e022:	e008      	b.n	800e036 <USBD_CDC_Setup+0x1ae>
          break;
 800e024:	bf00      	nop
      }
      break;
 800e026:	e006      	b.n	800e036 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f001 fcb1 	bl	800f992 <USBD_CtlError>
      ret = USBD_FAIL;
 800e030:	2303      	movs	r3, #3
 800e032:	75fb      	strb	r3, [r7, #23]
      break;
 800e034:	bf00      	nop
  }

  return (uint8_t)ret;
 800e036:	7dfb      	ldrb	r3, [r7, #23]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	32b0      	adds	r2, #176	@ 0xb0
 800e05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e066:	2303      	movs	r3, #3
 800e068:	e065      	b.n	800e136 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	32b0      	adds	r2, #176	@ 0xb0
 800e074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e078:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e07a:	78fb      	ldrb	r3, [r7, #3]
 800e07c:	f003 020f 	and.w	r2, r3, #15
 800e080:	6879      	ldr	r1, [r7, #4]
 800e082:	4613      	mov	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4413      	add	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	440b      	add	r3, r1
 800e08c:	3318      	adds	r3, #24
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d02f      	beq.n	800e0f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e094:	78fb      	ldrb	r3, [r7, #3]
 800e096:	f003 020f 	and.w	r2, r3, #15
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	4613      	mov	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4413      	add	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	440b      	add	r3, r1
 800e0a6:	3318      	adds	r3, #24
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	78fb      	ldrb	r3, [r7, #3]
 800e0ac:	f003 010f 	and.w	r1, r3, #15
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	440b      	add	r3, r1
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4403      	add	r3, r0
 800e0bc:	331c      	adds	r3, #28
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e0c4:	fb01 f303 	mul.w	r3, r1, r3
 800e0c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d112      	bne.n	800e0f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e0ce:	78fb      	ldrb	r3, [r7, #3]
 800e0d0:	f003 020f 	and.w	r2, r3, #15
 800e0d4:	6879      	ldr	r1, [r7, #4]
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	440b      	add	r3, r1
 800e0e0:	3318      	adds	r3, #24
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e0e6:	78f9      	ldrb	r1, [r7, #3]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f002 fa72 	bl	80105d6 <USBD_LL_Transmit>
 800e0f2:	e01f      	b.n	800e134 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	33b0      	adds	r3, #176	@ 0xb0
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d010      	beq.n	800e134 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	33b0      	adds	r3, #176	@ 0xb0
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4413      	add	r3, r2
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	68ba      	ldr	r2, [r7, #8]
 800e126:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e130:	78fa      	ldrb	r2, [r7, #3]
 800e132:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	460b      	mov	r3, r1
 800e148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	32b0      	adds	r2, #176	@ 0xb0
 800e154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e158:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	32b0      	adds	r2, #176	@ 0xb0
 800e164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e16c:	2303      	movs	r3, #3
 800e16e:	e01a      	b.n	800e1a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f002 fa70 	bl	801065a <USBD_LL_GetRxDataSize>
 800e17a:	4602      	mov	r2, r0
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	33b0      	adds	r3, #176	@ 0xb0
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4413      	add	r3, r2
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	68fa      	ldr	r2, [r7, #12]
 800e196:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	32b0      	adds	r2, #176	@ 0xb0
 800e1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e024      	b.n	800e21a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	33b0      	adds	r3, #176	@ 0xb0
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d019      	beq.n	800e218 <USBD_CDC_EP0_RxReady+0x6a>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e1ea:	2bff      	cmp	r3, #255	@ 0xff
 800e1ec:	d014      	beq.n	800e218 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	33b0      	adds	r3, #176	@ 0xb0
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e206:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e20e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	22ff      	movs	r2, #255	@ 0xff
 800e214:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
	...

0800e224 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e22c:	2182      	movs	r1, #130	@ 0x82
 800e22e:	4818      	ldr	r0, [pc, #96]	@ (800e290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e230:	f000 fd4f 	bl	800ecd2 <USBD_GetEpDesc>
 800e234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e236:	2101      	movs	r1, #1
 800e238:	4815      	ldr	r0, [pc, #84]	@ (800e290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e23a:	f000 fd4a 	bl	800ecd2 <USBD_GetEpDesc>
 800e23e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e240:	2181      	movs	r1, #129	@ 0x81
 800e242:	4813      	ldr	r0, [pc, #76]	@ (800e290 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e244:	f000 fd45 	bl	800ecd2 <USBD_GetEpDesc>
 800e248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	2210      	movs	r2, #16
 800e254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d006      	beq.n	800e26a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	2200      	movs	r2, #0
 800e260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e264:	711a      	strb	r2, [r3, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d006      	beq.n	800e27e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e278:	711a      	strb	r2, [r3, #4]
 800e27a:	2200      	movs	r2, #0
 800e27c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2243      	movs	r2, #67	@ 0x43
 800e282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e284:	4b02      	ldr	r3, [pc, #8]	@ (800e290 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	24000054 	.word	0x24000054

0800e294 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e29c:	2182      	movs	r1, #130	@ 0x82
 800e29e:	4818      	ldr	r0, [pc, #96]	@ (800e300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e2a0:	f000 fd17 	bl	800ecd2 <USBD_GetEpDesc>
 800e2a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	4815      	ldr	r0, [pc, #84]	@ (800e300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e2aa:	f000 fd12 	bl	800ecd2 <USBD_GetEpDesc>
 800e2ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e2b0:	2181      	movs	r1, #129	@ 0x81
 800e2b2:	4813      	ldr	r0, [pc, #76]	@ (800e300 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e2b4:	f000 fd0d 	bl	800ecd2 <USBD_GetEpDesc>
 800e2b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d006      	beq.n	800e2da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	711a      	strb	r2, [r3, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f042 0202 	orr.w	r2, r2, #2
 800e2d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d006      	beq.n	800e2ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	711a      	strb	r2, [r3, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f042 0202 	orr.w	r2, r2, #2
 800e2ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2243      	movs	r2, #67	@ 0x43
 800e2f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e2f4:	4b02      	ldr	r3, [pc, #8]	@ (800e300 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	24000054 	.word	0x24000054

0800e304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e30c:	2182      	movs	r1, #130	@ 0x82
 800e30e:	4818      	ldr	r0, [pc, #96]	@ (800e370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e310:	f000 fcdf 	bl	800ecd2 <USBD_GetEpDesc>
 800e314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e316:	2101      	movs	r1, #1
 800e318:	4815      	ldr	r0, [pc, #84]	@ (800e370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e31a:	f000 fcda 	bl	800ecd2 <USBD_GetEpDesc>
 800e31e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e320:	2181      	movs	r1, #129	@ 0x81
 800e322:	4813      	ldr	r0, [pc, #76]	@ (800e370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e324:	f000 fcd5 	bl	800ecd2 <USBD_GetEpDesc>
 800e328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2210      	movs	r2, #16
 800e334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d006      	beq.n	800e34a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2200      	movs	r2, #0
 800e340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e344:	711a      	strb	r2, [r3, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d006      	beq.n	800e35e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e358:	711a      	strb	r2, [r3, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2243      	movs	r2, #67	@ 0x43
 800e362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e364:	4b02      	ldr	r3, [pc, #8]	@ (800e370 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	24000054 	.word	0x24000054

0800e374 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	220a      	movs	r2, #10
 800e380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e382:	4b03      	ldr	r3, [pc, #12]	@ (800e390 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	24000010 	.word	0x24000010

0800e394 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	e009      	b.n	800e3bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	33b0      	adds	r3, #176	@ 0xb0
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	32b0      	adds	r2, #176	@ 0xb0
 800e3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d101      	bne.n	800e3ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	e008      	b.n	800e400 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	371c      	adds	r7, #28
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	32b0      	adds	r2, #176	@ 0xb0
 800e420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e424:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e004      	b.n	800e43a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
	...

0800e448 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	32b0      	adds	r2, #176	@ 0xb0
 800e45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e45e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e460:	2301      	movs	r3, #1
 800e462:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e025      	b.n	800e4ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e474:	2b00      	cmp	r3, #0
 800e476:	d11f      	bne.n	800e4b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e480:	4b10      	ldr	r3, [pc, #64]	@ (800e4c4 <USBD_CDC_TransmitPacket+0x7c>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	f003 020f 	and.w	r2, r3, #15
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	4613      	mov	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4403      	add	r3, r0
 800e49a:	3318      	adds	r3, #24
 800e49c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e49e:	4b09      	ldr	r3, [pc, #36]	@ (800e4c4 <USBD_CDC_TransmitPacket+0x7c>)
 800e4a0:	7819      	ldrb	r1, [r3, #0]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f002 f891 	bl	80105d6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	24000097 	.word	0x24000097

0800e4c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	32b0      	adds	r2, #176	@ 0xb0
 800e4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	32b0      	adds	r2, #176	@ 0xb0
 800e4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d101      	bne.n	800e4f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e4f2:	2303      	movs	r3, #3
 800e4f4:	e018      	b.n	800e528 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7c1b      	ldrb	r3, [r3, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10a      	bne.n	800e514 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800e530 <USBD_CDC_ReceivePacket+0x68>)
 800e500:	7819      	ldrb	r1, [r3, #0]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f002 f883 	bl	8010618 <USBD_LL_PrepareReceive>
 800e512:	e008      	b.n	800e526 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e514:	4b06      	ldr	r3, [pc, #24]	@ (800e530 <USBD_CDC_ReceivePacket+0x68>)
 800e516:	7819      	ldrb	r1, [r3, #0]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e51e:	2340      	movs	r3, #64	@ 0x40
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f002 f879 	bl	8010618 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	24000098 	.word	0x24000098

0800e534 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	4613      	mov	r3, r2
 800e540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e548:	2303      	movs	r3, #3
 800e54a:	e01f      	b.n	800e58c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	79fa      	ldrb	r2, [r7, #7]
 800e57e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f001 feef 	bl	8010364 <USBD_LL_Init>
 800e586:	4603      	mov	r3, r0
 800e588:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d101      	bne.n	800e5ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	e025      	b.n	800e5f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	32ae      	adds	r2, #174	@ 0xae
 800e5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00f      	beq.n	800e5e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	32ae      	adds	r2, #174	@ 0xae
 800e5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d8:	f107 020e 	add.w	r2, r7, #14
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f001 fefb 	bl	8010404 <USBD_LL_Start>
 800e60e:	4603      	mov	r3, r0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e620:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b084      	sub	sp, #16
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	460b      	mov	r3, r1
 800e638:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e644:	2b00      	cmp	r3, #0
 800e646:	d009      	beq.n	800e65c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	78fa      	ldrb	r2, [r7, #3]
 800e652:	4611      	mov	r1, r2
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	4798      	blx	r3
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	460b      	mov	r3, r1
 800e670:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e672:	2300      	movs	r3, #0
 800e674:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	78fa      	ldrb	r2, [r7, #3]
 800e680:	4611      	mov	r1, r2
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	4798      	blx	r3
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e68c:	2303      	movs	r3, #3
 800e68e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f001 f936 	bl	800f91e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e6ce:	f003 031f 	and.w	r3, r3, #31
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d01a      	beq.n	800e70c <USBD_LL_SetupStage+0x72>
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d822      	bhi.n	800e720 <USBD_LL_SetupStage+0x86>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <USBD_LL_SetupStage+0x4a>
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d00a      	beq.n	800e6f8 <USBD_LL_SetupStage+0x5e>
 800e6e2:	e01d      	b.n	800e720 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fb63 	bl	800edb8 <USBD_StdDevReq>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e6f6:	e020      	b.n	800e73a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6fe:	4619      	mov	r1, r3
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 fbcb 	bl	800ee9c <USBD_StdItfReq>
 800e706:	4603      	mov	r3, r0
 800e708:	73fb      	strb	r3, [r7, #15]
      break;
 800e70a:	e016      	b.n	800e73a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fc2d 	bl	800ef74 <USBD_StdEPReq>
 800e71a:	4603      	mov	r3, r0
 800e71c:	73fb      	strb	r3, [r7, #15]
      break;
 800e71e:	e00c      	b.n	800e73a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e726:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 fec8 	bl	80104c4 <USBD_LL_StallEP>
 800e734:	4603      	mov	r3, r0
 800e736:	73fb      	strb	r3, [r7, #15]
      break;
 800e738:	bf00      	nop
  }

  return ret;
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	460b      	mov	r3, r1
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e756:	7afb      	ldrb	r3, [r7, #11]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d16e      	bne.n	800e83a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e762:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	f040 8098 	bne.w	800e8a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	689a      	ldr	r2, [r3, #8]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d913      	bls.n	800e7a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	4293      	cmp	r3, r2
 800e794:	bf28      	it	cs
 800e796:	4613      	movcs	r3, r2
 800e798:	461a      	mov	r2, r3
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 f9be 	bl	800fb1e <USBD_CtlContinueRx>
 800e7a2:	e07d      	b.n	800e8a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e7aa:	f003 031f 	and.w	r3, r3, #31
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d014      	beq.n	800e7dc <USBD_LL_DataOutStage+0x98>
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d81d      	bhi.n	800e7f2 <USBD_LL_DataOutStage+0xae>
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <USBD_LL_DataOutStage+0x7c>
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d003      	beq.n	800e7c6 <USBD_LL_DataOutStage+0x82>
 800e7be:	e018      	b.n	800e7f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	75bb      	strb	r3, [r7, #22]
            break;
 800e7c4:	e018      	b.n	800e7f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f000 fa64 	bl	800ec9e <USBD_CoreFindIF>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	75bb      	strb	r3, [r7, #22]
            break;
 800e7da:	e00d      	b.n	800e7f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f000 fa66 	bl	800ecb8 <USBD_CoreFindEP>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	75bb      	strb	r3, [r7, #22]
            break;
 800e7f0:	e002      	b.n	800e7f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	75bb      	strb	r3, [r7, #22]
            break;
 800e7f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e7f8:	7dbb      	ldrb	r3, [r7, #22]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d119      	bne.n	800e832 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b03      	cmp	r3, #3
 800e808:	d113      	bne.n	800e832 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e80a:	7dba      	ldrb	r2, [r7, #22]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	32ae      	adds	r2, #174	@ 0xae
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	691b      	ldr	r3, [r3, #16]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00b      	beq.n	800e832 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e81a:	7dba      	ldrb	r2, [r7, #22]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e822:	7dba      	ldrb	r2, [r7, #22]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	32ae      	adds	r2, #174	@ 0xae
 800e828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e82c:	691b      	ldr	r3, [r3, #16]
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f001 f984 	bl	800fb40 <USBD_CtlSendStatus>
 800e838:	e032      	b.n	800e8a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e83a:	7afb      	ldrb	r3, [r7, #11]
 800e83c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e840:	b2db      	uxtb	r3, r3
 800e842:	4619      	mov	r1, r3
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 fa37 	bl	800ecb8 <USBD_CoreFindEP>
 800e84a:	4603      	mov	r3, r0
 800e84c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e84e:	7dbb      	ldrb	r3, [r7, #22]
 800e850:	2bff      	cmp	r3, #255	@ 0xff
 800e852:	d025      	beq.n	800e8a0 <USBD_LL_DataOutStage+0x15c>
 800e854:	7dbb      	ldrb	r3, [r7, #22]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d122      	bne.n	800e8a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b03      	cmp	r3, #3
 800e864:	d117      	bne.n	800e896 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e866:	7dba      	ldrb	r2, [r7, #22]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	32ae      	adds	r2, #174	@ 0xae
 800e86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e870:	699b      	ldr	r3, [r3, #24]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00f      	beq.n	800e896 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e876:	7dba      	ldrb	r2, [r7, #22]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e87e:	7dba      	ldrb	r2, [r7, #22]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	32ae      	adds	r2, #174	@ 0xae
 800e884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	7afa      	ldrb	r2, [r7, #11]
 800e88c:	4611      	mov	r1, r2
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	4798      	blx	r3
 800e892:	4603      	mov	r3, r0
 800e894:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
 800e89e:	e000      	b.n	800e8a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3718      	adds	r7, #24
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b086      	sub	sp, #24
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e8b8:	7afb      	ldrb	r3, [r7, #11]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d16f      	bne.n	800e99e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3314      	adds	r3, #20
 800e8c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d15a      	bne.n	800e984 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	689a      	ldr	r2, [r3, #8]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d914      	bls.n	800e904 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	689a      	ldr	r2, [r3, #8]
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	1ad2      	subs	r2, r2, r3
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	6879      	ldr	r1, [r7, #4]
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f001 f8e6 	bl	800fac2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f001 fe8b 	bl	8010618 <USBD_LL_PrepareReceive>
 800e902:	e03f      	b.n	800e984 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d11c      	bne.n	800e94a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e918:	429a      	cmp	r2, r3
 800e91a:	d316      	bcc.n	800e94a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e926:	429a      	cmp	r2, r3
 800e928:	d20f      	bcs.n	800e94a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e92a:	2200      	movs	r2, #0
 800e92c:	2100      	movs	r1, #0
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f001 f8c7 	bl	800fac2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e93c:	2300      	movs	r3, #0
 800e93e:	2200      	movs	r2, #0
 800e940:	2100      	movs	r1, #0
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f001 fe68 	bl	8010618 <USBD_LL_PrepareReceive>
 800e948:	e01c      	b.n	800e984 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b03      	cmp	r3, #3
 800e954:	d10f      	bne.n	800e976 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d009      	beq.n	800e976 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e976:	2180      	movs	r1, #128	@ 0x80
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f001 fda3 	bl	80104c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f001 f8f1 	bl	800fb66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d03a      	beq.n	800ea04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f7ff fe42 	bl	800e618 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e99c:	e032      	b.n	800ea04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e99e:	7afb      	ldrb	r3, [r7, #11]
 800e9a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 f985 	bl	800ecb8 <USBD_CoreFindEP>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
 800e9b4:	2bff      	cmp	r3, #255	@ 0xff
 800e9b6:	d025      	beq.n	800ea04 <USBD_LL_DataInStage+0x15a>
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d122      	bne.n	800ea04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d11c      	bne.n	800ea04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e9ca:	7dfa      	ldrb	r2, [r7, #23]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	32ae      	adds	r2, #174	@ 0xae
 800e9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d014      	beq.n	800ea04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e9da:	7dfa      	ldrb	r2, [r7, #23]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e9e2:	7dfa      	ldrb	r2, [r7, #23]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	32ae      	adds	r2, #174	@ 0xae
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	7afa      	ldrb	r2, [r7, #11]
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	4798      	blx	r3
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e9fa:	7dbb      	ldrb	r3, [r7, #22]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ea00:	7dbb      	ldrb	r3, [r7, #22]
 800ea02:	e000      	b.n	800ea06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea16:	2300      	movs	r3, #0
 800ea18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d014      	beq.n	800ea74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00e      	beq.n	800ea74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	6852      	ldr	r2, [r2, #4]
 800ea62:	b2d2      	uxtb	r2, r2
 800ea64:	4611      	mov	r1, r2
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ea70:	2303      	movs	r3, #3
 800ea72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea74:	2340      	movs	r3, #64	@ 0x40
 800ea76:	2200      	movs	r2, #0
 800ea78:	2100      	movs	r1, #0
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 fcdd 	bl	801043a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2240      	movs	r2, #64	@ 0x40
 800ea8c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea90:	2340      	movs	r3, #64	@ 0x40
 800ea92:	2200      	movs	r2, #0
 800ea94:	2180      	movs	r1, #128	@ 0x80
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f001 fccf 	bl	801043a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2240      	movs	r2, #64	@ 0x40
 800eaa6:	621a      	str	r2, [r3, #32]

  return ret;
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b083      	sub	sp, #12
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	460b      	mov	r3, r1
 800eabc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	78fa      	ldrb	r2, [r7, #3]
 800eac2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ead2:	b480      	push	{r7}
 800ead4:	b083      	sub	sp, #12
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d006      	beq.n	800eaf4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2204      	movs	r2, #4
 800eaf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b04      	cmp	r3, #4
 800eb1c:	d106      	bne.n	800eb2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d110      	bne.n	800eb70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00b      	beq.n	800eb70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb5e:	69db      	ldr	r3, [r3, #28]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d005      	beq.n	800eb70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb6a:	69db      	ldr	r3, [r3, #28]
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b082      	sub	sp, #8
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	32ae      	adds	r2, #174	@ 0xae
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	e01c      	b.n	800ebd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b03      	cmp	r3, #3
 800eba6:	d115      	bne.n	800ebd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	32ae      	adds	r2, #174	@ 0xae
 800ebb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00b      	beq.n	800ebd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	32ae      	adds	r2, #174	@ 0xae
 800ebc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	78fa      	ldrb	r2, [r7, #3]
 800ebce:	4611      	mov	r1, r2
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b082      	sub	sp, #8
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	32ae      	adds	r2, #174	@ 0xae
 800ebf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e01c      	b.n	800ec3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d115      	bne.n	800ec38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	32ae      	adds	r2, #174	@ 0xae
 800ec16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	32ae      	adds	r2, #174	@ 0xae
 800ec2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec30:	78fa      	ldrb	r2, [r7, #3]
 800ec32:	4611      	mov	r1, r2
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec42:	b480      	push	{r7}
 800ec44:	b083      	sub	sp, #12
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2201      	movs	r2, #1
 800ec68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00e      	beq.n	800ec94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	6852      	ldr	r2, [r2, #4]
 800ec82:	b2d2      	uxtb	r2, r2
 800ec84:	4611      	mov	r1, r2
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	4798      	blx	r3
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ec90:	2303      	movs	r3, #3
 800ec92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ec9e:	b480      	push	{r7}
 800eca0:	b083      	sub	sp, #12
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
 800eca6:	460b      	mov	r3, r1
 800eca8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ecaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ecc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b086      	sub	sp, #24
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	885b      	ldrh	r3, [r3, #2]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	7812      	ldrb	r2, [r2, #0]
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d91f      	bls.n	800ed38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ecfe:	e013      	b.n	800ed28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ed00:	f107 030a 	add.w	r3, r7, #10
 800ed04:	4619      	mov	r1, r3
 800ed06:	6978      	ldr	r0, [r7, #20]
 800ed08:	f000 f81b 	bl	800ed42 <USBD_GetNextDesc>
 800ed0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	2b05      	cmp	r3, #5
 800ed14:	d108      	bne.n	800ed28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	789b      	ldrb	r3, [r3, #2]
 800ed1e:	78fa      	ldrb	r2, [r7, #3]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d008      	beq.n	800ed36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	885b      	ldrh	r3, [r3, #2]
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	897b      	ldrh	r3, [r7, #10]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d8e5      	bhi.n	800ed00 <USBD_GetEpDesc+0x2e>
 800ed34:	e000      	b.n	800ed38 <USBD_GetEpDesc+0x66>
          break;
 800ed36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ed38:	693b      	ldr	r3, [r7, #16]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3718      	adds	r7, #24
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b085      	sub	sp, #20
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	7812      	ldrb	r2, [r2, #0]
 800ed58:	4413      	add	r3, r2
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4413      	add	r3, r2
 800ed6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3714      	adds	r7, #20
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr

0800ed7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ed7a:	b480      	push	{r7}
 800ed7c:	b087      	sub	sp, #28
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ed98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ed9c:	021b      	lsls	r3, r3, #8
 800ed9e:	b21a      	sxth	r2, r3
 800eda0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	b21b      	sxth	r3, r3
 800eda8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800edaa:	89fb      	ldrh	r3, [r7, #14]
}
 800edac:	4618      	mov	r0, r3
 800edae:	371c      	adds	r7, #28
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800edce:	2b40      	cmp	r3, #64	@ 0x40
 800edd0:	d005      	beq.n	800edde <USBD_StdDevReq+0x26>
 800edd2:	2b40      	cmp	r3, #64	@ 0x40
 800edd4:	d857      	bhi.n	800ee86 <USBD_StdDevReq+0xce>
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00f      	beq.n	800edfa <USBD_StdDevReq+0x42>
 800edda:	2b20      	cmp	r3, #32
 800eddc:	d153      	bne.n	800ee86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	32ae      	adds	r2, #174	@ 0xae
 800ede8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	4798      	blx	r3
 800edf4:	4603      	mov	r3, r0
 800edf6:	73fb      	strb	r3, [r7, #15]
      break;
 800edf8:	e04a      	b.n	800ee90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	785b      	ldrb	r3, [r3, #1]
 800edfe:	2b09      	cmp	r3, #9
 800ee00:	d83b      	bhi.n	800ee7a <USBD_StdDevReq+0xc2>
 800ee02:	a201      	add	r2, pc, #4	@ (adr r2, 800ee08 <USBD_StdDevReq+0x50>)
 800ee04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee08:	0800ee5d 	.word	0x0800ee5d
 800ee0c:	0800ee71 	.word	0x0800ee71
 800ee10:	0800ee7b 	.word	0x0800ee7b
 800ee14:	0800ee67 	.word	0x0800ee67
 800ee18:	0800ee7b 	.word	0x0800ee7b
 800ee1c:	0800ee3b 	.word	0x0800ee3b
 800ee20:	0800ee31 	.word	0x0800ee31
 800ee24:	0800ee7b 	.word	0x0800ee7b
 800ee28:	0800ee53 	.word	0x0800ee53
 800ee2c:	0800ee45 	.word	0x0800ee45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ee30:	6839      	ldr	r1, [r7, #0]
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 fa3c 	bl	800f2b0 <USBD_GetDescriptor>
          break;
 800ee38:	e024      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fbcb 	bl	800f5d8 <USBD_SetAddress>
          break;
 800ee42:	e01f      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fc0a 	bl	800f660 <USBD_SetConfig>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]
          break;
 800ee50:	e018      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fcad 	bl	800f7b4 <USBD_GetConfig>
          break;
 800ee5a:	e013      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fcde 	bl	800f820 <USBD_GetStatus>
          break;
 800ee64:	e00e      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fd0d 	bl	800f888 <USBD_SetFeature>
          break;
 800ee6e:	e009      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fd31 	bl	800f8da <USBD_ClrFeature>
          break;
 800ee78:	e004      	b.n	800ee84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ee7a:	6839      	ldr	r1, [r7, #0]
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 fd88 	bl	800f992 <USBD_CtlError>
          break;
 800ee82:	bf00      	nop
      }
      break;
 800ee84:	e004      	b.n	800ee90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fd82 	bl	800f992 <USBD_CtlError>
      break;
 800ee8e:	bf00      	nop
  }

  return ret;
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop

0800ee9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eeb2:	2b40      	cmp	r3, #64	@ 0x40
 800eeb4:	d005      	beq.n	800eec2 <USBD_StdItfReq+0x26>
 800eeb6:	2b40      	cmp	r3, #64	@ 0x40
 800eeb8:	d852      	bhi.n	800ef60 <USBD_StdItfReq+0xc4>
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d001      	beq.n	800eec2 <USBD_StdItfReq+0x26>
 800eebe:	2b20      	cmp	r3, #32
 800eec0:	d14e      	bne.n	800ef60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	3b01      	subs	r3, #1
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d840      	bhi.n	800ef52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	889b      	ldrh	r3, [r3, #4]
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d836      	bhi.n	800ef48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	889b      	ldrh	r3, [r3, #4]
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	4619      	mov	r1, r3
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fedb 	bl	800ec9e <USBD_CoreFindIF>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2bff      	cmp	r3, #255	@ 0xff
 800eef0:	d01d      	beq.n	800ef2e <USBD_StdItfReq+0x92>
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d11a      	bne.n	800ef2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eef8:	7bba      	ldrb	r2, [r7, #14]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	32ae      	adds	r2, #174	@ 0xae
 800eefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00f      	beq.n	800ef28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ef08:	7bba      	ldrb	r2, [r7, #14]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ef10:	7bba      	ldrb	r2, [r7, #14]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	32ae      	adds	r2, #174	@ 0xae
 800ef16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	4798      	blx	r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef26:	e004      	b.n	800ef32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ef28:	2303      	movs	r3, #3
 800ef2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ef2c:	e001      	b.n	800ef32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	88db      	ldrh	r3, [r3, #6]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d110      	bne.n	800ef5c <USBD_StdItfReq+0xc0>
 800ef3a:	7bfb      	ldrb	r3, [r7, #15]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10d      	bne.n	800ef5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fdfd 	bl	800fb40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ef46:	e009      	b.n	800ef5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fd21 	bl	800f992 <USBD_CtlError>
          break;
 800ef50:	e004      	b.n	800ef5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fd1c 	bl	800f992 <USBD_CtlError>
          break;
 800ef5a:	e000      	b.n	800ef5e <USBD_StdItfReq+0xc2>
          break;
 800ef5c:	bf00      	nop
      }
      break;
 800ef5e:	e004      	b.n	800ef6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ef60:	6839      	ldr	r1, [r7, #0]
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 fd15 	bl	800f992 <USBD_CtlError>
      break;
 800ef68:	bf00      	nop
  }

  return ret;
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	889b      	ldrh	r3, [r3, #4]
 800ef86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef90:	2b40      	cmp	r3, #64	@ 0x40
 800ef92:	d007      	beq.n	800efa4 <USBD_StdEPReq+0x30>
 800ef94:	2b40      	cmp	r3, #64	@ 0x40
 800ef96:	f200 817f 	bhi.w	800f298 <USBD_StdEPReq+0x324>
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d02a      	beq.n	800eff4 <USBD_StdEPReq+0x80>
 800ef9e:	2b20      	cmp	r3, #32
 800efa0:	f040 817a 	bne.w	800f298 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	4619      	mov	r1, r3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff fe85 	bl	800ecb8 <USBD_CoreFindEP>
 800efae:	4603      	mov	r3, r0
 800efb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800efb2:	7b7b      	ldrb	r3, [r7, #13]
 800efb4:	2bff      	cmp	r3, #255	@ 0xff
 800efb6:	f000 8174 	beq.w	800f2a2 <USBD_StdEPReq+0x32e>
 800efba:	7b7b      	ldrb	r3, [r7, #13]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f040 8170 	bne.w	800f2a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800efc2:	7b7a      	ldrb	r2, [r7, #13]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800efca:	7b7a      	ldrb	r2, [r7, #13]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	32ae      	adds	r2, #174	@ 0xae
 800efd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 8163 	beq.w	800f2a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800efdc:	7b7a      	ldrb	r2, [r7, #13]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	32ae      	adds	r2, #174	@ 0xae
 800efe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	6839      	ldr	r1, [r7, #0]
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	4798      	blx	r3
 800efee:	4603      	mov	r3, r0
 800eff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eff2:	e156      	b.n	800f2a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	785b      	ldrb	r3, [r3, #1]
 800eff8:	2b03      	cmp	r3, #3
 800effa:	d008      	beq.n	800f00e <USBD_StdEPReq+0x9a>
 800effc:	2b03      	cmp	r3, #3
 800effe:	f300 8145 	bgt.w	800f28c <USBD_StdEPReq+0x318>
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 809b 	beq.w	800f13e <USBD_StdEPReq+0x1ca>
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d03c      	beq.n	800f086 <USBD_StdEPReq+0x112>
 800f00c:	e13e      	b.n	800f28c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b02      	cmp	r3, #2
 800f018:	d002      	beq.n	800f020 <USBD_StdEPReq+0xac>
 800f01a:	2b03      	cmp	r3, #3
 800f01c:	d016      	beq.n	800f04c <USBD_StdEPReq+0xd8>
 800f01e:	e02c      	b.n	800f07a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f020:	7bbb      	ldrb	r3, [r7, #14]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00d      	beq.n	800f042 <USBD_StdEPReq+0xce>
 800f026:	7bbb      	ldrb	r3, [r7, #14]
 800f028:	2b80      	cmp	r3, #128	@ 0x80
 800f02a:	d00a      	beq.n	800f042 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f02c:	7bbb      	ldrb	r3, [r7, #14]
 800f02e:	4619      	mov	r1, r3
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f001 fa47 	bl	80104c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f036:	2180      	movs	r1, #128	@ 0x80
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f001 fa43 	bl	80104c4 <USBD_LL_StallEP>
 800f03e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f040:	e020      	b.n	800f084 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 fca4 	bl	800f992 <USBD_CtlError>
              break;
 800f04a:	e01b      	b.n	800f084 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	885b      	ldrh	r3, [r3, #2]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10e      	bne.n	800f072 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00b      	beq.n	800f072 <USBD_StdEPReq+0xfe>
 800f05a:	7bbb      	ldrb	r3, [r7, #14]
 800f05c:	2b80      	cmp	r3, #128	@ 0x80
 800f05e:	d008      	beq.n	800f072 <USBD_StdEPReq+0xfe>
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	88db      	ldrh	r3, [r3, #6]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d104      	bne.n	800f072 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	4619      	mov	r1, r3
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f001 fa29 	bl	80104c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fd64 	bl	800fb40 <USBD_CtlSendStatus>

              break;
 800f078:	e004      	b.n	800f084 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f07a:	6839      	ldr	r1, [r7, #0]
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fc88 	bl	800f992 <USBD_CtlError>
              break;
 800f082:	bf00      	nop
          }
          break;
 800f084:	e107      	b.n	800f296 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d002      	beq.n	800f098 <USBD_StdEPReq+0x124>
 800f092:	2b03      	cmp	r3, #3
 800f094:	d016      	beq.n	800f0c4 <USBD_StdEPReq+0x150>
 800f096:	e04b      	b.n	800f130 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f098:	7bbb      	ldrb	r3, [r7, #14]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00d      	beq.n	800f0ba <USBD_StdEPReq+0x146>
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	2b80      	cmp	r3, #128	@ 0x80
 800f0a2:	d00a      	beq.n	800f0ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f0a4:	7bbb      	ldrb	r3, [r7, #14]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f001 fa0b 	bl	80104c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0ae:	2180      	movs	r1, #128	@ 0x80
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f001 fa07 	bl	80104c4 <USBD_LL_StallEP>
 800f0b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f0b8:	e040      	b.n	800f13c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 fc68 	bl	800f992 <USBD_CtlError>
              break;
 800f0c2:	e03b      	b.n	800f13c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	885b      	ldrh	r3, [r3, #2]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d136      	bne.n	800f13a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d004      	beq.n	800f0e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f0d6:	7bbb      	ldrb	r3, [r7, #14]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f001 fa11 	bl	8010502 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fd2d 	bl	800fb40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff fde4 	bl	800ecb8 <USBD_CoreFindEP>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0f4:	7b7b      	ldrb	r3, [r7, #13]
 800f0f6:	2bff      	cmp	r3, #255	@ 0xff
 800f0f8:	d01f      	beq.n	800f13a <USBD_StdEPReq+0x1c6>
 800f0fa:	7b7b      	ldrb	r3, [r7, #13]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d11c      	bne.n	800f13a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f100:	7b7a      	ldrb	r2, [r7, #13]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f108:	7b7a      	ldrb	r2, [r7, #13]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	32ae      	adds	r2, #174	@ 0xae
 800f10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d010      	beq.n	800f13a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f118:	7b7a      	ldrb	r2, [r7, #13]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	32ae      	adds	r2, #174	@ 0xae
 800f11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	4798      	blx	r3
 800f12a:	4603      	mov	r3, r0
 800f12c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f12e:	e004      	b.n	800f13a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fc2d 	bl	800f992 <USBD_CtlError>
              break;
 800f138:	e000      	b.n	800f13c <USBD_StdEPReq+0x1c8>
              break;
 800f13a:	bf00      	nop
          }
          break;
 800f13c:	e0ab      	b.n	800f296 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b02      	cmp	r3, #2
 800f148:	d002      	beq.n	800f150 <USBD_StdEPReq+0x1dc>
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	d032      	beq.n	800f1b4 <USBD_StdEPReq+0x240>
 800f14e:	e097      	b.n	800f280 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f150:	7bbb      	ldrb	r3, [r7, #14]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d007      	beq.n	800f166 <USBD_StdEPReq+0x1f2>
 800f156:	7bbb      	ldrb	r3, [r7, #14]
 800f158:	2b80      	cmp	r3, #128	@ 0x80
 800f15a:	d004      	beq.n	800f166 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fc17 	bl	800f992 <USBD_CtlError>
                break;
 800f164:	e091      	b.n	800f28a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	da0b      	bge.n	800f186 <USBD_StdEPReq+0x212>
 800f16e:	7bbb      	ldrb	r3, [r7, #14]
 800f170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f174:	4613      	mov	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4413      	add	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	3310      	adds	r3, #16
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	4413      	add	r3, r2
 800f182:	3304      	adds	r3, #4
 800f184:	e00b      	b.n	800f19e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f186:	7bbb      	ldrb	r3, [r7, #14]
 800f188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f18c:	4613      	mov	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	4413      	add	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	4413      	add	r3, r2
 800f19c:	3304      	adds	r3, #4
 800f19e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2202      	movs	r2, #2
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fc6d 	bl	800fa8c <USBD_CtlSendData>
              break;
 800f1b2:	e06a      	b.n	800f28a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	da11      	bge.n	800f1e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
 800f1be:	f003 020f 	and.w	r2, r3, #15
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	440b      	add	r3, r1
 800f1ce:	3324      	adds	r3, #36	@ 0x24
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d117      	bne.n	800f206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f1d6:	6839      	ldr	r1, [r7, #0]
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fbda 	bl	800f992 <USBD_CtlError>
                  break;
 800f1de:	e054      	b.n	800f28a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f1e0:	7bbb      	ldrb	r3, [r7, #14]
 800f1e2:	f003 020f 	and.w	r2, r3, #15
 800f1e6:	6879      	ldr	r1, [r7, #4]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4413      	add	r3, r2
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	440b      	add	r3, r1
 800f1f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d104      	bne.n	800f206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f1fc:	6839      	ldr	r1, [r7, #0]
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fbc7 	bl	800f992 <USBD_CtlError>
                  break;
 800f204:	e041      	b.n	800f28a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	da0b      	bge.n	800f226 <USBD_StdEPReq+0x2b2>
 800f20e:	7bbb      	ldrb	r3, [r7, #14]
 800f210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f214:	4613      	mov	r3, r2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	4413      	add	r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	3310      	adds	r3, #16
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	4413      	add	r3, r2
 800f222:	3304      	adds	r3, #4
 800f224:	e00b      	b.n	800f23e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f226:	7bbb      	ldrb	r3, [r7, #14]
 800f228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f22c:	4613      	mov	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	4413      	add	r3, r2
 800f23c:	3304      	adds	r3, #4
 800f23e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f240:	7bbb      	ldrb	r3, [r7, #14]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d002      	beq.n	800f24c <USBD_StdEPReq+0x2d8>
 800f246:	7bbb      	ldrb	r3, [r7, #14]
 800f248:	2b80      	cmp	r3, #128	@ 0x80
 800f24a:	d103      	bne.n	800f254 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	e00e      	b.n	800f272 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f254:	7bbb      	ldrb	r3, [r7, #14]
 800f256:	4619      	mov	r1, r3
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f001 f971 	bl	8010540 <USBD_LL_IsStallEP>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d003      	beq.n	800f26c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	2201      	movs	r2, #1
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	e002      	b.n	800f272 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2202      	movs	r2, #2
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fc07 	bl	800fa8c <USBD_CtlSendData>
              break;
 800f27e:	e004      	b.n	800f28a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f280:	6839      	ldr	r1, [r7, #0]
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 fb85 	bl	800f992 <USBD_CtlError>
              break;
 800f288:	bf00      	nop
          }
          break;
 800f28a:	e004      	b.n	800f296 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fb7f 	bl	800f992 <USBD_CtlError>
          break;
 800f294:	bf00      	nop
      }
      break;
 800f296:	e005      	b.n	800f2a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fb79 	bl	800f992 <USBD_CtlError>
      break;
 800f2a0:	e000      	b.n	800f2a4 <USBD_StdEPReq+0x330>
      break;
 800f2a2:	bf00      	nop
  }

  return ret;
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
	...

0800f2b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	885b      	ldrh	r3, [r3, #2]
 800f2ca:	0a1b      	lsrs	r3, r3, #8
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	2b0e      	cmp	r3, #14
 800f2d2:	f200 8152 	bhi.w	800f57a <USBD_GetDescriptor+0x2ca>
 800f2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f2dc <USBD_GetDescriptor+0x2c>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f34d 	.word	0x0800f34d
 800f2e0:	0800f365 	.word	0x0800f365
 800f2e4:	0800f3a5 	.word	0x0800f3a5
 800f2e8:	0800f57b 	.word	0x0800f57b
 800f2ec:	0800f57b 	.word	0x0800f57b
 800f2f0:	0800f51b 	.word	0x0800f51b
 800f2f4:	0800f547 	.word	0x0800f547
 800f2f8:	0800f57b 	.word	0x0800f57b
 800f2fc:	0800f57b 	.word	0x0800f57b
 800f300:	0800f57b 	.word	0x0800f57b
 800f304:	0800f57b 	.word	0x0800f57b
 800f308:	0800f57b 	.word	0x0800f57b
 800f30c:	0800f57b 	.word	0x0800f57b
 800f310:	0800f57b 	.word	0x0800f57b
 800f314:	0800f319 	.word	0x0800f319
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f31e:	69db      	ldr	r3, [r3, #28]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00b      	beq.n	800f33c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f32a:	69db      	ldr	r3, [r3, #28]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	7c12      	ldrb	r2, [r2, #16]
 800f330:	f107 0108 	add.w	r1, r7, #8
 800f334:	4610      	mov	r0, r2
 800f336:	4798      	blx	r3
 800f338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f33a:	e126      	b.n	800f58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fb27 	bl	800f992 <USBD_CtlError>
        err++;
 800f344:	7afb      	ldrb	r3, [r7, #11]
 800f346:	3301      	adds	r3, #1
 800f348:	72fb      	strb	r3, [r7, #11]
      break;
 800f34a:	e11e      	b.n	800f58a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	7c12      	ldrb	r2, [r2, #16]
 800f358:	f107 0108 	add.w	r1, r7, #8
 800f35c:	4610      	mov	r0, r2
 800f35e:	4798      	blx	r3
 800f360:	60f8      	str	r0, [r7, #12]
      break;
 800f362:	e112      	b.n	800f58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	7c1b      	ldrb	r3, [r3, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10d      	bne.n	800f388 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f374:	f107 0208 	add.w	r2, r7, #8
 800f378:	4610      	mov	r0, r2
 800f37a:	4798      	blx	r3
 800f37c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	3301      	adds	r3, #1
 800f382:	2202      	movs	r2, #2
 800f384:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f386:	e100      	b.n	800f58a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f390:	f107 0208 	add.w	r2, r7, #8
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3301      	adds	r3, #1
 800f39e:	2202      	movs	r2, #2
 800f3a0:	701a      	strb	r2, [r3, #0]
      break;
 800f3a2:	e0f2      	b.n	800f58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	885b      	ldrh	r3, [r3, #2]
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	2b05      	cmp	r3, #5
 800f3ac:	f200 80ac 	bhi.w	800f508 <USBD_GetDescriptor+0x258>
 800f3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800f3b8 <USBD_GetDescriptor+0x108>)
 800f3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b6:	bf00      	nop
 800f3b8:	0800f3d1 	.word	0x0800f3d1
 800f3bc:	0800f405 	.word	0x0800f405
 800f3c0:	0800f439 	.word	0x0800f439
 800f3c4:	0800f46d 	.word	0x0800f46d
 800f3c8:	0800f4a1 	.word	0x0800f4a1
 800f3cc:	0800f4d5 	.word	0x0800f4d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	7c12      	ldrb	r2, [r2, #16]
 800f3e8:	f107 0108 	add.w	r1, r7, #8
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	4798      	blx	r3
 800f3f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3f2:	e091      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 facb 	bl	800f992 <USBD_CtlError>
            err++;
 800f3fc:	7afb      	ldrb	r3, [r7, #11]
 800f3fe:	3301      	adds	r3, #1
 800f400:	72fb      	strb	r3, [r7, #11]
          break;
 800f402:	e089      	b.n	800f518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00b      	beq.n	800f428 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	7c12      	ldrb	r2, [r2, #16]
 800f41c:	f107 0108 	add.w	r1, r7, #8
 800f420:	4610      	mov	r0, r2
 800f422:	4798      	blx	r3
 800f424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f426:	e077      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 fab1 	bl	800f992 <USBD_CtlError>
            err++;
 800f430:	7afb      	ldrb	r3, [r7, #11]
 800f432:	3301      	adds	r3, #1
 800f434:	72fb      	strb	r3, [r7, #11]
          break;
 800f436:	e06f      	b.n	800f518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00b      	beq.n	800f45c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	7c12      	ldrb	r2, [r2, #16]
 800f450:	f107 0108 	add.w	r1, r7, #8
 800f454:	4610      	mov	r0, r2
 800f456:	4798      	blx	r3
 800f458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f45a:	e05d      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 fa97 	bl	800f992 <USBD_CtlError>
            err++;
 800f464:	7afb      	ldrb	r3, [r7, #11]
 800f466:	3301      	adds	r3, #1
 800f468:	72fb      	strb	r3, [r7, #11]
          break;
 800f46a:	e055      	b.n	800f518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00b      	beq.n	800f490 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	7c12      	ldrb	r2, [r2, #16]
 800f484:	f107 0108 	add.w	r1, r7, #8
 800f488:	4610      	mov	r0, r2
 800f48a:	4798      	blx	r3
 800f48c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f48e:	e043      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f490:	6839      	ldr	r1, [r7, #0]
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fa7d 	bl	800f992 <USBD_CtlError>
            err++;
 800f498:	7afb      	ldrb	r3, [r7, #11]
 800f49a:	3301      	adds	r3, #1
 800f49c:	72fb      	strb	r3, [r7, #11]
          break;
 800f49e:	e03b      	b.n	800f518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00b      	beq.n	800f4c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4b2:	695b      	ldr	r3, [r3, #20]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	7c12      	ldrb	r2, [r2, #16]
 800f4b8:	f107 0108 	add.w	r1, r7, #8
 800f4bc:	4610      	mov	r0, r2
 800f4be:	4798      	blx	r3
 800f4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4c2:	e029      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 fa63 	bl	800f992 <USBD_CtlError>
            err++;
 800f4cc:	7afb      	ldrb	r3, [r7, #11]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4d2:	e021      	b.n	800f518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00b      	beq.n	800f4f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	7c12      	ldrb	r2, [r2, #16]
 800f4ec:	f107 0108 	add.w	r1, r7, #8
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	4798      	blx	r3
 800f4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4f6:	e00f      	b.n	800f518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fa49 	bl	800f992 <USBD_CtlError>
            err++;
 800f500:	7afb      	ldrb	r3, [r7, #11]
 800f502:	3301      	adds	r3, #1
 800f504:	72fb      	strb	r3, [r7, #11]
          break;
 800f506:	e007      	b.n	800f518 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 fa41 	bl	800f992 <USBD_CtlError>
          err++;
 800f510:	7afb      	ldrb	r3, [r7, #11]
 800f512:	3301      	adds	r3, #1
 800f514:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f516:	bf00      	nop
      }
      break;
 800f518:	e037      	b.n	800f58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	7c1b      	ldrb	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d109      	bne.n	800f536 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f52a:	f107 0208 	add.w	r2, r7, #8
 800f52e:	4610      	mov	r0, r2
 800f530:	4798      	blx	r3
 800f532:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f534:	e029      	b.n	800f58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 fa2a 	bl	800f992 <USBD_CtlError>
        err++;
 800f53e:	7afb      	ldrb	r3, [r7, #11]
 800f540:	3301      	adds	r3, #1
 800f542:	72fb      	strb	r3, [r7, #11]
      break;
 800f544:	e021      	b.n	800f58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	7c1b      	ldrb	r3, [r3, #16]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10d      	bne.n	800f56a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f556:	f107 0208 	add.w	r2, r7, #8
 800f55a:	4610      	mov	r0, r2
 800f55c:	4798      	blx	r3
 800f55e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	2207      	movs	r2, #7
 800f566:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f568:	e00f      	b.n	800f58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fa10 	bl	800f992 <USBD_CtlError>
        err++;
 800f572:	7afb      	ldrb	r3, [r7, #11]
 800f574:	3301      	adds	r3, #1
 800f576:	72fb      	strb	r3, [r7, #11]
      break;
 800f578:	e007      	b.n	800f58a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f57a:	6839      	ldr	r1, [r7, #0]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fa08 	bl	800f992 <USBD_CtlError>
      err++;
 800f582:	7afb      	ldrb	r3, [r7, #11]
 800f584:	3301      	adds	r3, #1
 800f586:	72fb      	strb	r3, [r7, #11]
      break;
 800f588:	bf00      	nop
  }

  if (err != 0U)
 800f58a:	7afb      	ldrb	r3, [r7, #11]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d11e      	bne.n	800f5ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	88db      	ldrh	r3, [r3, #6]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d016      	beq.n	800f5c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f598:	893b      	ldrh	r3, [r7, #8]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00e      	beq.n	800f5bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	88da      	ldrh	r2, [r3, #6]
 800f5a2:	893b      	ldrh	r3, [r7, #8]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	bf28      	it	cs
 800f5a8:	4613      	movcs	r3, r2
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f5ae:	893b      	ldrh	r3, [r7, #8]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	68f9      	ldr	r1, [r7, #12]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fa69 	bl	800fa8c <USBD_CtlSendData>
 800f5ba:	e009      	b.n	800f5d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f9e7 	bl	800f992 <USBD_CtlError>
 800f5c4:	e004      	b.n	800f5d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 faba 	bl	800fb40 <USBD_CtlSendStatus>
 800f5cc:	e000      	b.n	800f5d0 <USBD_GetDescriptor+0x320>
    return;
 800f5ce:	bf00      	nop
  }
}
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop

0800f5d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	889b      	ldrh	r3, [r3, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d131      	bne.n	800f64e <USBD_SetAddress+0x76>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	88db      	ldrh	r3, [r3, #6]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d12d      	bne.n	800f64e <USBD_SetAddress+0x76>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	885b      	ldrh	r3, [r3, #2]
 800f5f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f5f8:	d829      	bhi.n	800f64e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	885b      	ldrh	r3, [r3, #2]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b03      	cmp	r3, #3
 800f610:	d104      	bne.n	800f61c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f9bc 	bl	800f992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f61a:	e01d      	b.n	800f658 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7bfa      	ldrb	r2, [r7, #15]
 800f620:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f624:	7bfb      	ldrb	r3, [r7, #15]
 800f626:	4619      	mov	r1, r3
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 ffb5 	bl	8010598 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fa86 	bl	800fb40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d004      	beq.n	800f644 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2202      	movs	r2, #2
 800f63e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f642:	e009      	b.n	800f658 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2201      	movs	r2, #1
 800f648:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f64c:	e004      	b.n	800f658 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 f99e 	bl	800f992 <USBD_CtlError>
  }
}
 800f656:	bf00      	nop
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f66a:	2300      	movs	r3, #0
 800f66c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	885b      	ldrh	r3, [r3, #2]
 800f672:	b2da      	uxtb	r2, r3
 800f674:	4b4e      	ldr	r3, [pc, #312]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f676:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f678:	4b4d      	ldr	r3, [pc, #308]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d905      	bls.n	800f68c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f985 	bl	800f992 <USBD_CtlError>
    return USBD_FAIL;
 800f688:	2303      	movs	r3, #3
 800f68a:	e08c      	b.n	800f7a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f692:	b2db      	uxtb	r3, r3
 800f694:	2b02      	cmp	r3, #2
 800f696:	d002      	beq.n	800f69e <USBD_SetConfig+0x3e>
 800f698:	2b03      	cmp	r3, #3
 800f69a:	d029      	beq.n	800f6f0 <USBD_SetConfig+0x90>
 800f69c:	e075      	b.n	800f78a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f69e:	4b44      	ldr	r3, [pc, #272]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d020      	beq.n	800f6e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f6a6:	4b42      	ldr	r3, [pc, #264]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f6b0:	4b3f      	ldr	r3, [pc, #252]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7fe ffb9 	bl	800e62e <USBD_SetClassConfig>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d008      	beq.n	800f6d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 f962 	bl	800f992 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2202      	movs	r2, #2
 800f6d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f6d6:	e065      	b.n	800f7a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fa31 	bl	800fb40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2203      	movs	r2, #3
 800f6e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f6e6:	e05d      	b.n	800f7a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 fa29 	bl	800fb40 <USBD_CtlSendStatus>
      break;
 800f6ee:	e059      	b.n	800f7a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f6f0:	4b2f      	ldr	r3, [pc, #188]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d112      	bne.n	800f71e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f700:	4b2b      	ldr	r3, [pc, #172]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	461a      	mov	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f70a:	4b29      	ldr	r3, [pc, #164]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	4619      	mov	r1, r3
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7fe ffa8 	bl	800e666 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fa12 	bl	800fb40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f71c:	e042      	b.n	800f7a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f71e:	4b24      	ldr	r3, [pc, #144]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d02a      	beq.n	800f782 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	b2db      	uxtb	r3, r3
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fe ff96 	bl	800e666 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f73a:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f744:	4b1a      	ldr	r3, [pc, #104]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7fe ff6f 	bl	800e62e <USBD_SetClassConfig>
 800f750:	4603      	mov	r3, r0
 800f752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f754:	7bfb      	ldrb	r3, [r7, #15]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00f      	beq.n	800f77a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 f918 	bl	800f992 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b2db      	uxtb	r3, r3
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7fe ff7b 	bl	800e666 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2202      	movs	r2, #2
 800f774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f778:	e014      	b.n	800f7a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f9e0 	bl	800fb40 <USBD_CtlSendStatus>
      break;
 800f780:	e010      	b.n	800f7a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f9dc 	bl	800fb40 <USBD_CtlSendStatus>
      break;
 800f788:	e00c      	b.n	800f7a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 f900 	bl	800f992 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f792:	4b07      	ldr	r3, [pc, #28]	@ (800f7b0 <USBD_SetConfig+0x150>)
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	4619      	mov	r1, r3
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7fe ff64 	bl	800e666 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a2:	bf00      	nop
  }

  return ret;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	24000390 	.word	0x24000390

0800f7b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	88db      	ldrh	r3, [r3, #6]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d004      	beq.n	800f7d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f8e2 	bl	800f992 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f7ce:	e023      	b.n	800f818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	dc02      	bgt.n	800f7e2 <USBD_GetConfig+0x2e>
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	dc03      	bgt.n	800f7e8 <USBD_GetConfig+0x34>
 800f7e0:	e015      	b.n	800f80e <USBD_GetConfig+0x5a>
 800f7e2:	2b03      	cmp	r3, #3
 800f7e4:	d00b      	beq.n	800f7fe <USBD_GetConfig+0x4a>
 800f7e6:	e012      	b.n	800f80e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3308      	adds	r3, #8
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 f948 	bl	800fa8c <USBD_CtlSendData>
        break;
 800f7fc:	e00c      	b.n	800f818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	3304      	adds	r3, #4
 800f802:	2201      	movs	r2, #1
 800f804:	4619      	mov	r1, r3
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 f940 	bl	800fa8c <USBD_CtlSendData>
        break;
 800f80c:	e004      	b.n	800f818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f8be 	bl	800f992 <USBD_CtlError>
        break;
 800f816:	bf00      	nop
}
 800f818:	bf00      	nop
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f830:	b2db      	uxtb	r3, r3
 800f832:	3b01      	subs	r3, #1
 800f834:	2b02      	cmp	r3, #2
 800f836:	d81e      	bhi.n	800f876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	88db      	ldrh	r3, [r3, #6]
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d004      	beq.n	800f84a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f840:	6839      	ldr	r1, [r7, #0]
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f8a5 	bl	800f992 <USBD_CtlError>
        break;
 800f848:	e01a      	b.n	800f880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2201      	movs	r2, #1
 800f84e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f856:	2b00      	cmp	r3, #0
 800f858:	d005      	beq.n	800f866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	f043 0202 	orr.w	r2, r3, #2
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	330c      	adds	r3, #12
 800f86a:	2202      	movs	r2, #2
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 f90c 	bl	800fa8c <USBD_CtlSendData>
      break;
 800f874:	e004      	b.n	800f880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f88a 	bl	800f992 <USBD_CtlError>
      break;
 800f87e:	bf00      	nop
  }
}
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	885b      	ldrh	r3, [r3, #2]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d107      	bne.n	800f8aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f94c 	bl	800fb40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f8a8:	e013      	b.n	800f8d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	885b      	ldrh	r3, [r3, #2]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d10b      	bne.n	800f8ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	889b      	ldrh	r3, [r3, #4]
 800f8b6:	0a1b      	lsrs	r3, r3, #8
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f93c 	bl	800fb40 <USBD_CtlSendStatus>
}
 800f8c8:	e003      	b.n	800f8d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f860 	bl	800f992 <USBD_CtlError>
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b082      	sub	sp, #8
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
 800f8e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d80b      	bhi.n	800f90a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d10c      	bne.n	800f914 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f91c 	bl	800fb40 <USBD_CtlSendStatus>
      }
      break;
 800f908:	e004      	b.n	800f914 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f90a:	6839      	ldr	r1, [r7, #0]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f840 	bl	800f992 <USBD_CtlError>
      break;
 800f912:	e000      	b.n	800f916 <USBD_ClrFeature+0x3c>
      break;
 800f914:	bf00      	nop
  }
}
 800f916:	bf00      	nop
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	781a      	ldrb	r2, [r3, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	3301      	adds	r3, #1
 800f938:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3301      	adds	r3, #1
 800f946:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff fa16 	bl	800ed7a <SWAPBYTE>
 800f94e:	4603      	mov	r3, r0
 800f950:	461a      	mov	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3301      	adds	r3, #1
 800f95a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	3301      	adds	r3, #1
 800f960:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f7ff fa09 	bl	800ed7a <SWAPBYTE>
 800f968:	4603      	mov	r3, r0
 800f96a:	461a      	mov	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	3301      	adds	r3, #1
 800f974:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	3301      	adds	r3, #1
 800f97a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff f9fc 	bl	800ed7a <SWAPBYTE>
 800f982:	4603      	mov	r3, r0
 800f984:	461a      	mov	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	80da      	strh	r2, [r3, #6]
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b082      	sub	sp, #8
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f99c:	2180      	movs	r1, #128	@ 0x80
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fd90 	bl	80104c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 fd8c 	bl	80104c4 <USBD_LL_StallEP>
}
 800f9ac:	bf00      	nop
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b086      	sub	sp, #24
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d042      	beq.n	800fa50 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f9ce:	6938      	ldr	r0, [r7, #16]
 800f9d0:	f000 f842 	bl	800fa58 <USBD_GetLen>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9de:	d808      	bhi.n	800f9f2 <USBD_GetString+0x3e>
 800f9e0:	6938      	ldr	r0, [r7, #16]
 800f9e2:	f000 f839 	bl	800fa58 <USBD_GetLen>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	005b      	lsls	r3, r3, #1
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	e001      	b.n	800f9f6 <USBD_GetString+0x42>
 800f9f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	4413      	add	r3, r2
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	7812      	ldrb	r2, [r2, #0]
 800fa04:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa06:	7dfb      	ldrb	r3, [r7, #23]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	4413      	add	r3, r2
 800fa12:	2203      	movs	r2, #3
 800fa14:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa1c:	e013      	b.n	800fa46 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fa1e:	7dfb      	ldrb	r3, [r7, #23]
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	4413      	add	r3, r2
 800fa24:	693a      	ldr	r2, [r7, #16]
 800fa26:	7812      	ldrb	r2, [r2, #0]
 800fa28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	613b      	str	r3, [r7, #16]
    idx++;
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	3301      	adds	r3, #1
 800fa34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa36:	7dfb      	ldrb	r3, [r7, #23]
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa40:	7dfb      	ldrb	r3, [r7, #23]
 800fa42:	3301      	adds	r3, #1
 800fa44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1e7      	bne.n	800fa1e <USBD_GetString+0x6a>
 800fa4e:	e000      	b.n	800fa52 <USBD_GetString+0x9e>
    return;
 800fa50:	bf00      	nop
  }
}
 800fa52:	3718      	adds	r7, #24
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa60:	2300      	movs	r3, #0
 800fa62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa68:	e005      	b.n	800fa76 <USBD_GetLen+0x1e>
  {
    len++;
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	3301      	adds	r3, #1
 800fa74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1f5      	bne.n	800fa6a <USBD_GetLen+0x12>
  }

  return len;
 800fa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2202      	movs	r2, #2
 800fa9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	68ba      	ldr	r2, [r7, #8]
 800fab0:	2100      	movs	r1, #0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 fd8f 	bl	80105d6 <USBD_LL_Transmit>

  return USBD_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	60f8      	str	r0, [r7, #12]
 800faca:	60b9      	str	r1, [r7, #8]
 800facc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	2100      	movs	r1, #0
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f000 fd7e 	bl	80105d6 <USBD_LL_Transmit>

  return USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2203      	movs	r2, #3
 800faf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f000 fd82 	bl	8010618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	60f8      	str	r0, [r7, #12]
 800fb26:	60b9      	str	r1, [r7, #8]
 800fb28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	2100      	movs	r1, #0
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f000 fd71 	bl	8010618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2204      	movs	r2, #4
 800fb4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb50:	2300      	movs	r3, #0
 800fb52:	2200      	movs	r2, #0
 800fb54:	2100      	movs	r1, #0
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fd3d 	bl	80105d6 <USBD_LL_Transmit>

  return USBD_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2205      	movs	r2, #5
 800fb72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb76:	2300      	movs	r3, #0
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fd4b 	bl	8010618 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb90:	2200      	movs	r2, #0
 800fb92:	4913      	ldr	r1, [pc, #76]	@ (800fbe0 <MX_USB_DEVICE_Init+0x54>)
 800fb94:	4813      	ldr	r0, [pc, #76]	@ (800fbe4 <MX_USB_DEVICE_Init+0x58>)
 800fb96:	f7fe fccd 	bl	800e534 <USBD_Init>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fba0:	f7f1 f8cc 	bl	8000d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fba4:	4910      	ldr	r1, [pc, #64]	@ (800fbe8 <MX_USB_DEVICE_Init+0x5c>)
 800fba6:	480f      	ldr	r0, [pc, #60]	@ (800fbe4 <MX_USB_DEVICE_Init+0x58>)
 800fba8:	f7fe fcf4 	bl	800e594 <USBD_RegisterClass>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fbb2:	f7f1 f8c3 	bl	8000d3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fbb6:	490d      	ldr	r1, [pc, #52]	@ (800fbec <MX_USB_DEVICE_Init+0x60>)
 800fbb8:	480a      	ldr	r0, [pc, #40]	@ (800fbe4 <MX_USB_DEVICE_Init+0x58>)
 800fbba:	f7fe fbeb 	bl	800e394 <USBD_CDC_RegisterInterface>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fbc4:	f7f1 f8ba 	bl	8000d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fbc8:	4806      	ldr	r0, [pc, #24]	@ (800fbe4 <MX_USB_DEVICE_Init+0x58>)
 800fbca:	f7fe fd19 	bl	800e600 <USBD_Start>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fbd4:	f7f1 f8b2 	bl	8000d3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fbd8:	f7f7 fa62 	bl	80070a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fbdc:	bf00      	nop
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	240000b8 	.word	0x240000b8
 800fbe4:	24000394 	.word	0x24000394
 800fbe8:	2400001c 	.word	0x2400001c
 800fbec:	240000a4 	.word	0x240000a4

0800fbf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	4905      	ldr	r1, [pc, #20]	@ (800fc0c <CDC_Init_FS+0x1c>)
 800fbf8:	4805      	ldr	r0, [pc, #20]	@ (800fc10 <CDC_Init_FS+0x20>)
 800fbfa:	f7fe fbe5 	bl	800e3c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fbfe:	4905      	ldr	r1, [pc, #20]	@ (800fc14 <CDC_Init_FS+0x24>)
 800fc00:	4803      	ldr	r0, [pc, #12]	@ (800fc10 <CDC_Init_FS+0x20>)
 800fc02:	f7fe fc03 	bl	800e40c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	24000e70 	.word	0x24000e70
 800fc10:	24000394 	.word	0x24000394
 800fc14:	24000670 	.word	0x24000670

0800fc18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	4603      	mov	r3, r0
 800fc30:	6039      	str	r1, [r7, #0]
 800fc32:	71fb      	strb	r3, [r7, #7]
 800fc34:	4613      	mov	r3, r2
 800fc36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	2b23      	cmp	r3, #35	@ 0x23
 800fc3c:	f200 8098 	bhi.w	800fd70 <CDC_Control_FS+0x148>
 800fc40:	a201      	add	r2, pc, #4	@ (adr r2, 800fc48 <CDC_Control_FS+0x20>)
 800fc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc46:	bf00      	nop
 800fc48:	0800fd71 	.word	0x0800fd71
 800fc4c:	0800fd71 	.word	0x0800fd71
 800fc50:	0800fd71 	.word	0x0800fd71
 800fc54:	0800fd71 	.word	0x0800fd71
 800fc58:	0800fd71 	.word	0x0800fd71
 800fc5c:	0800fd71 	.word	0x0800fd71
 800fc60:	0800fd71 	.word	0x0800fd71
 800fc64:	0800fd71 	.word	0x0800fd71
 800fc68:	0800fd71 	.word	0x0800fd71
 800fc6c:	0800fd71 	.word	0x0800fd71
 800fc70:	0800fd71 	.word	0x0800fd71
 800fc74:	0800fd71 	.word	0x0800fd71
 800fc78:	0800fd71 	.word	0x0800fd71
 800fc7c:	0800fd71 	.word	0x0800fd71
 800fc80:	0800fd71 	.word	0x0800fd71
 800fc84:	0800fd71 	.word	0x0800fd71
 800fc88:	0800fd71 	.word	0x0800fd71
 800fc8c:	0800fd71 	.word	0x0800fd71
 800fc90:	0800fd71 	.word	0x0800fd71
 800fc94:	0800fd71 	.word	0x0800fd71
 800fc98:	0800fd71 	.word	0x0800fd71
 800fc9c:	0800fd71 	.word	0x0800fd71
 800fca0:	0800fd71 	.word	0x0800fd71
 800fca4:	0800fd71 	.word	0x0800fd71
 800fca8:	0800fd71 	.word	0x0800fd71
 800fcac:	0800fd71 	.word	0x0800fd71
 800fcb0:	0800fd71 	.word	0x0800fd71
 800fcb4:	0800fd71 	.word	0x0800fd71
 800fcb8:	0800fd71 	.word	0x0800fd71
 800fcbc:	0800fd71 	.word	0x0800fd71
 800fcc0:	0800fd71 	.word	0x0800fd71
 800fcc4:	0800fd71 	.word	0x0800fd71
 800fcc8:	0800fcd9 	.word	0x0800fcd9
 800fccc:	0800fd1d 	.word	0x0800fd1d
 800fcd0:	0800fd71 	.word	0x0800fd71
 800fcd4:	0800fd71 	.word	0x0800fd71
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	021b      	lsls	r3, r3, #8
 800fce6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	3302      	adds	r3, #2
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800fcf0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	3303      	adds	r3, #3
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	061b      	lsls	r3, r3, #24
 800fcfa:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	4b20      	ldr	r3, [pc, #128]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd00:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	791a      	ldrb	r2, [r3, #4]
 800fd06:	4b1e      	ldr	r3, [pc, #120]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd08:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	795a      	ldrb	r2, [r3, #5]
 800fd0e:	4b1c      	ldr	r3, [pc, #112]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd10:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	799a      	ldrb	r2, [r3, #6]
 800fd16:	4b1a      	ldr	r3, [pc, #104]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd18:	719a      	strb	r2, [r3, #6]

    break;
 800fd1a:	e02a      	b.n	800fd72 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800fd1c:	4b18      	ldr	r3, [pc, #96]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800fd26:	4b16      	ldr	r3, [pc, #88]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	0a1a      	lsrs	r2, r3, #8
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2d2      	uxtb	r2, r2
 800fd32:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800fd34:	4b12      	ldr	r3, [pc, #72]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	0c1a      	lsrs	r2, r3, #16
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	3302      	adds	r3, #2
 800fd3e:	b2d2      	uxtb	r2, r2
 800fd40:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800fd42:	4b0f      	ldr	r3, [pc, #60]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	0e1a      	lsrs	r2, r3, #24
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	3303      	adds	r3, #3
 800fd4c:	b2d2      	uxtb	r2, r2
 800fd4e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4a0a      	ldr	r2, [pc, #40]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd56:	7912      	ldrb	r2, [r2, #4]
 800fd58:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	3305      	adds	r3, #5
 800fd5e:	4a08      	ldr	r2, [pc, #32]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd60:	7952      	ldrb	r2, [r2, #5]
 800fd62:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	3306      	adds	r3, #6
 800fd68:	4a05      	ldr	r2, [pc, #20]	@ (800fd80 <CDC_Control_FS+0x158>)
 800fd6a:	7992      	ldrb	r2, [r2, #6]
 800fd6c:	701a      	strb	r2, [r3, #0]

    break;
 800fd6e:	e000      	b.n	800fd72 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd70:	bf00      	nop
  }

  return (USBD_OK);
 800fd72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	2400009c 	.word	0x2400009c

0800fd84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd8e:	6879      	ldr	r1, [r7, #4]
 800fd90:	480d      	ldr	r0, [pc, #52]	@ (800fdc8 <CDC_Receive_FS+0x44>)
 800fd92:	f7fe fb3b 	bl	800e40c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd96:	480c      	ldr	r0, [pc, #48]	@ (800fdc8 <CDC_Receive_FS+0x44>)
 800fd98:	f7fe fb96 	bl	800e4c8 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00d      	beq.n	800fdbe <CDC_Receive_FS+0x3a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d00a      	beq.n	800fdbe <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 800fdae:	89fb      	ldrh	r3, [r7, #14]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 800fdb4:	89fb      	ldrh	r3, [r7, #14]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f001 f9bf 	bl	801113c <USB_Receive>
	  }
  }
  return (USBD_OK);
 800fdbe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	24000394 	.word	0x24000394

0800fdcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fddc:	4b0d      	ldr	r3, [pc, #52]	@ (800fe14 <CDC_Transmit_FS+0x48>)
 800fdde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fde2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e00b      	b.n	800fe0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fdf2:	887b      	ldrh	r3, [r7, #2]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	6879      	ldr	r1, [r7, #4]
 800fdf8:	4806      	ldr	r0, [pc, #24]	@ (800fe14 <CDC_Transmit_FS+0x48>)
 800fdfa:	f7fe fae5 	bl	800e3c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fdfe:	4805      	ldr	r0, [pc, #20]	@ (800fe14 <CDC_Transmit_FS+0x48>)
 800fe00:	f7fe fb22 	bl	800e448 <USBD_CDC_TransmitPacket>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	24000394 	.word	0x24000394

0800fe18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	4613      	mov	r3, r2
 800fe24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	371c      	adds	r7, #28
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	460b      	mov	r3, r1
 800fe44:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 800fe46:	887b      	ldrh	r3, [r7, #2]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff ffbe 	bl	800fdcc <CDC_Transmit_FS>
 800fe50:	4603      	mov	r3, r0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	6039      	str	r1, [r7, #0]
 800fe66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2212      	movs	r2, #18
 800fe6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fe6e:	4b03      	ldr	r3, [pc, #12]	@ (800fe7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	240000d8 	.word	0x240000d8

0800fe80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	6039      	str	r1, [r7, #0]
 800fe8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2204      	movs	r2, #4
 800fe90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe92:	4b03      	ldr	r3, [pc, #12]	@ (800fea0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	240000ec 	.word	0x240000ec

0800fea4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	4603      	mov	r3, r0
 800feac:	6039      	str	r1, [r7, #0]
 800feae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800feb0:	79fb      	ldrb	r3, [r7, #7]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d105      	bne.n	800fec2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	4907      	ldr	r1, [pc, #28]	@ (800fed8 <USBD_FS_ProductStrDescriptor+0x34>)
 800feba:	4808      	ldr	r0, [pc, #32]	@ (800fedc <USBD_FS_ProductStrDescriptor+0x38>)
 800febc:	f7ff fd7a 	bl	800f9b4 <USBD_GetString>
 800fec0:	e004      	b.n	800fecc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fec2:	683a      	ldr	r2, [r7, #0]
 800fec4:	4904      	ldr	r1, [pc, #16]	@ (800fed8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fec6:	4805      	ldr	r0, [pc, #20]	@ (800fedc <USBD_FS_ProductStrDescriptor+0x38>)
 800fec8:	f7ff fd74 	bl	800f9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fecc:	4b02      	ldr	r3, [pc, #8]	@ (800fed8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	24001670 	.word	0x24001670
 800fedc:	08012524 	.word	0x08012524

0800fee0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	6039      	str	r1, [r7, #0]
 800feea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	4904      	ldr	r1, [pc, #16]	@ (800ff00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fef0:	4804      	ldr	r0, [pc, #16]	@ (800ff04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fef2:	f7ff fd5f 	bl	800f9b4 <USBD_GetString>
  return USBD_StrDesc;
 800fef6:	4b02      	ldr	r3, [pc, #8]	@ (800ff00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	24001670 	.word	0x24001670
 800ff04:	0801253c 	.word	0x0801253c

0800ff08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	4603      	mov	r3, r0
 800ff10:	6039      	str	r1, [r7, #0]
 800ff12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	221a      	movs	r2, #26
 800ff18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff1a:	f000 f843 	bl	800ffa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ff1e:	4b02      	ldr	r3, [pc, #8]	@ (800ff28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	240000f0 	.word	0x240000f0

0800ff2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff38:	79fb      	ldrb	r3, [r7, #7]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d105      	bne.n	800ff4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	4907      	ldr	r1, [pc, #28]	@ (800ff60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff42:	4808      	ldr	r0, [pc, #32]	@ (800ff64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff44:	f7ff fd36 	bl	800f9b4 <USBD_GetString>
 800ff48:	e004      	b.n	800ff54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	4904      	ldr	r1, [pc, #16]	@ (800ff60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff4e:	4805      	ldr	r0, [pc, #20]	@ (800ff64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff50:	f7ff fd30 	bl	800f9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff54:	4b02      	ldr	r3, [pc, #8]	@ (800ff60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	24001670 	.word	0x24001670
 800ff64:	08012550 	.word	0x08012550

0800ff68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	6039      	str	r1, [r7, #0]
 800ff72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d105      	bne.n	800ff86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff7a:	683a      	ldr	r2, [r7, #0]
 800ff7c:	4907      	ldr	r1, [pc, #28]	@ (800ff9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff7e:	4808      	ldr	r0, [pc, #32]	@ (800ffa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff80:	f7ff fd18 	bl	800f9b4 <USBD_GetString>
 800ff84:	e004      	b.n	800ff90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	4904      	ldr	r1, [pc, #16]	@ (800ff9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff8a:	4805      	ldr	r0, [pc, #20]	@ (800ffa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff8c:	f7ff fd12 	bl	800f9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff90:	4b02      	ldr	r3, [pc, #8]	@ (800ff9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	24001670 	.word	0x24001670
 800ffa0:	0801255c 	.word	0x0801255c

0800ffa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ffaa:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe8 <Get_SerialNum+0x44>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ffb0:	4b0e      	ldr	r3, [pc, #56]	@ (800ffec <Get_SerialNum+0x48>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ffb6:	4b0e      	ldr	r3, [pc, #56]	@ (800fff0 <Get_SerialNum+0x4c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d009      	beq.n	800ffde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ffca:	2208      	movs	r2, #8
 800ffcc:	4909      	ldr	r1, [pc, #36]	@ (800fff4 <Get_SerialNum+0x50>)
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f000 f814 	bl	800fffc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ffd4:	2204      	movs	r2, #4
 800ffd6:	4908      	ldr	r1, [pc, #32]	@ (800fff8 <Get_SerialNum+0x54>)
 800ffd8:	68b8      	ldr	r0, [r7, #8]
 800ffda:	f000 f80f 	bl	800fffc <IntToUnicode>
  }
}
 800ffde:	bf00      	nop
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	1ff1e800 	.word	0x1ff1e800
 800ffec:	1ff1e804 	.word	0x1ff1e804
 800fff0:	1ff1e808 	.word	0x1ff1e808
 800fff4:	240000f2 	.word	0x240000f2
 800fff8:	24000102 	.word	0x24000102

0800fffc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b087      	sub	sp, #28
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	4613      	mov	r3, r2
 8010008:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801000e:	2300      	movs	r3, #0
 8010010:	75fb      	strb	r3, [r7, #23]
 8010012:	e027      	b.n	8010064 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	0f1b      	lsrs	r3, r3, #28
 8010018:	2b09      	cmp	r3, #9
 801001a:	d80b      	bhi.n	8010034 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	0f1b      	lsrs	r3, r3, #28
 8010020:	b2da      	uxtb	r2, r3
 8010022:	7dfb      	ldrb	r3, [r7, #23]
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	4619      	mov	r1, r3
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	440b      	add	r3, r1
 801002c:	3230      	adds	r2, #48	@ 0x30
 801002e:	b2d2      	uxtb	r2, r2
 8010030:	701a      	strb	r2, [r3, #0]
 8010032:	e00a      	b.n	801004a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	0f1b      	lsrs	r3, r3, #28
 8010038:	b2da      	uxtb	r2, r3
 801003a:	7dfb      	ldrb	r3, [r7, #23]
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	4619      	mov	r1, r3
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	440b      	add	r3, r1
 8010044:	3237      	adds	r2, #55	@ 0x37
 8010046:	b2d2      	uxtb	r2, r2
 8010048:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	011b      	lsls	r3, r3, #4
 801004e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010050:	7dfb      	ldrb	r3, [r7, #23]
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	3301      	adds	r3, #1
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	4413      	add	r3, r2
 801005a:	2200      	movs	r2, #0
 801005c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801005e:	7dfb      	ldrb	r3, [r7, #23]
 8010060:	3301      	adds	r3, #1
 8010062:	75fb      	strb	r3, [r7, #23]
 8010064:	7dfa      	ldrb	r2, [r7, #23]
 8010066:	79fb      	ldrb	r3, [r7, #7]
 8010068:	429a      	cmp	r2, r3
 801006a:	d3d3      	bcc.n	8010014 <IntToUnicode+0x18>
  }
}
 801006c:	bf00      	nop
 801006e:	bf00      	nop
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
	...

0801007c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b0ba      	sub	sp, #232	@ 0xe8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010084:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	605a      	str	r2, [r3, #4]
 801008e:	609a      	str	r2, [r3, #8]
 8010090:	60da      	str	r2, [r3, #12]
 8010092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010094:	f107 0310 	add.w	r3, r7, #16
 8010098:	22c0      	movs	r2, #192	@ 0xc0
 801009a:	2100      	movs	r1, #0
 801009c:	4618      	mov	r0, r3
 801009e:	f001 f985 	bl	80113ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a33      	ldr	r2, [pc, #204]	@ (8010174 <HAL_PCD_MspInit+0xf8>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d15f      	bne.n	801016c <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80100ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80100b0:	f04f 0300 	mov.w	r3, #0
 80100b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80100b8:	2319      	movs	r3, #25
 80100ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80100bc:	23c0      	movs	r3, #192	@ 0xc0
 80100be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80100c0:	2302      	movs	r3, #2
 80100c2:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80100c4:	2304      	movs	r3, #4
 80100c6:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80100c8:	2302      	movs	r3, #2
 80100ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80100d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80100d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80100dc:	f107 0310 	add.w	r3, r7, #16
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f8 f8cf 	bl	8008284 <HAL_RCCEx_PeriphCLKConfig>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 80100ec:	f7f0 fe26 	bl	8000d3c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80100f0:	f7f6 ffd6 	bl	80070a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100f4:	4b20      	ldr	r3, [pc, #128]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 80100f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80100fa:	4a1f      	ldr	r2, [pc, #124]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 80100fc:	f043 0301 	orr.w	r3, r3, #1
 8010100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010104:	4b1c      	ldr	r3, [pc, #112]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 8010106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010112:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801011a:	2302      	movs	r3, #2
 801011c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010120:	2300      	movs	r3, #0
 8010122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010126:	2300      	movs	r3, #0
 8010128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801012c:	230a      	movs	r3, #10
 801012e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010132:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010136:	4619      	mov	r1, r3
 8010138:	4810      	ldr	r0, [pc, #64]	@ (801017c <HAL_PCD_MspInit+0x100>)
 801013a:	f7f5 fb0d 	bl	8005758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801013e:	4b0e      	ldr	r3, [pc, #56]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 8010140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010144:	4a0c      	ldr	r2, [pc, #48]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 8010146:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801014a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801014e:	4b0a      	ldr	r3, [pc, #40]	@ (8010178 <HAL_PCD_MspInit+0xfc>)
 8010150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010158:	60bb      	str	r3, [r7, #8]
 801015a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801015c:	2200      	movs	r2, #0
 801015e:	2100      	movs	r1, #0
 8010160:	2065      	movs	r0, #101	@ 0x65
 8010162:	f7f2 fe63 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010166:	2065      	movs	r0, #101	@ 0x65
 8010168:	f7f2 fe7a 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801016c:	bf00      	nop
 801016e:	37e8      	adds	r7, #232	@ 0xe8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	40080000 	.word	0x40080000
 8010178:	58024400 	.word	0x58024400
 801017c:	58020000 	.word	0x58020000

08010180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010194:	4619      	mov	r1, r3
 8010196:	4610      	mov	r0, r2
 8010198:	f7fe fa7f 	bl	800e69a <USBD_LL_SetupStage>
}
 801019c:	bf00      	nop
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80101b6:	78fa      	ldrb	r2, [r7, #3]
 80101b8:	6879      	ldr	r1, [r7, #4]
 80101ba:	4613      	mov	r3, r2
 80101bc:	00db      	lsls	r3, r3, #3
 80101be:	4413      	add	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	440b      	add	r3, r1
 80101c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	78fb      	ldrb	r3, [r7, #3]
 80101cc:	4619      	mov	r1, r3
 80101ce:	f7fe fab9 	bl	800e744 <USBD_LL_DataOutStage>
}
 80101d2:	bf00      	nop
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b082      	sub	sp, #8
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	460b      	mov	r3, r1
 80101e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	6879      	ldr	r1, [r7, #4]
 80101f0:	4613      	mov	r3, r2
 80101f2:	00db      	lsls	r3, r3, #3
 80101f4:	4413      	add	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	440b      	add	r3, r1
 80101fa:	3320      	adds	r3, #32
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	78fb      	ldrb	r3, [r7, #3]
 8010200:	4619      	mov	r1, r3
 8010202:	f7fe fb52 	bl	800e8aa <USBD_LL_DataInStage>
}
 8010206:	bf00      	nop
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b082      	sub	sp, #8
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801021c:	4618      	mov	r0, r3
 801021e:	f7fe fc8c 	bl	800eb3a <USBD_LL_SOF>
}
 8010222:	bf00      	nop
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010232:	2301      	movs	r3, #1
 8010234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	79db      	ldrb	r3, [r3, #7]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d102      	bne.n	8010244 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801023e:	2300      	movs	r3, #0
 8010240:	73fb      	strb	r3, [r7, #15]
 8010242:	e008      	b.n	8010256 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	79db      	ldrb	r3, [r3, #7]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d102      	bne.n	8010252 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801024c:	2301      	movs	r3, #1
 801024e:	73fb      	strb	r3, [r7, #15]
 8010250:	e001      	b.n	8010256 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010252:	f7f0 fd73 	bl	8000d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801025c:	7bfa      	ldrb	r2, [r7, #15]
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f7fe fc26 	bl	800eab2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801026c:	4618      	mov	r0, r3
 801026e:	f7fe fbce 	bl	800ea0e <USBD_LL_Reset>
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
	...

0801027c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801028a:	4618      	mov	r0, r3
 801028c:	f7fe fc21 	bl	800ead2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80102a2:	f043 0301 	orr.w	r3, r3, #1
 80102a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	7adb      	ldrb	r3, [r3, #11]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102b0:	4b04      	ldr	r3, [pc, #16]	@ (80102c4 <HAL_PCD_SuspendCallback+0x48>)
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	4a03      	ldr	r2, [pc, #12]	@ (80102c4 <HAL_PCD_SuspendCallback+0x48>)
 80102b6:	f043 0306 	orr.w	r3, r3, #6
 80102ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80102bc:	bf00      	nop
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	e000ed00 	.word	0xe000ed00

080102c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fe fc17 	bl	800eb0a <USBD_LL_Resume>
}
 80102dc:	bf00      	nop
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	460b      	mov	r3, r1
 80102ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102f6:	78fa      	ldrb	r2, [r7, #3]
 80102f8:	4611      	mov	r1, r2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fe fc6f 	bl	800ebde <USBD_LL_IsoOUTIncomplete>
}
 8010300:	bf00      	nop
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801031a:	78fa      	ldrb	r2, [r7, #3]
 801031c:	4611      	mov	r1, r2
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fc2b 	bl	800eb7a <USBD_LL_IsoINIncomplete>
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801033a:	4618      	mov	r0, r3
 801033c:	f7fe fc81 	bl	800ec42 <USBD_LL_DevConnected>
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010356:	4618      	mov	r0, r3
 8010358:	f7fe fc7e 	bl	800ec58 <USBD_LL_DevDisconnected>
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d13e      	bne.n	80103f2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010374:	4a21      	ldr	r2, [pc, #132]	@ (80103fc <USBD_LL_Init+0x98>)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a1f      	ldr	r2, [pc, #124]	@ (80103fc <USBD_LL_Init+0x98>)
 8010380:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010384:	4b1d      	ldr	r3, [pc, #116]	@ (80103fc <USBD_LL_Init+0x98>)
 8010386:	4a1e      	ldr	r2, [pc, #120]	@ (8010400 <USBD_LL_Init+0x9c>)
 8010388:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801038a:	4b1c      	ldr	r3, [pc, #112]	@ (80103fc <USBD_LL_Init+0x98>)
 801038c:	2209      	movs	r2, #9
 801038e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010390:	4b1a      	ldr	r3, [pc, #104]	@ (80103fc <USBD_LL_Init+0x98>)
 8010392:	2202      	movs	r2, #2
 8010394:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010396:	4b19      	ldr	r3, [pc, #100]	@ (80103fc <USBD_LL_Init+0x98>)
 8010398:	2200      	movs	r2, #0
 801039a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801039c:	4b17      	ldr	r3, [pc, #92]	@ (80103fc <USBD_LL_Init+0x98>)
 801039e:	2202      	movs	r2, #2
 80103a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103a2:	4b16      	ldr	r3, [pc, #88]	@ (80103fc <USBD_LL_Init+0x98>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80103a8:	4b14      	ldr	r3, [pc, #80]	@ (80103fc <USBD_LL_Init+0x98>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80103ae:	4b13      	ldr	r3, [pc, #76]	@ (80103fc <USBD_LL_Init+0x98>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80103b4:	4b11      	ldr	r3, [pc, #68]	@ (80103fc <USBD_LL_Init+0x98>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80103ba:	4b10      	ldr	r3, [pc, #64]	@ (80103fc <USBD_LL_Init+0x98>)
 80103bc:	2200      	movs	r2, #0
 80103be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80103c0:	4b0e      	ldr	r3, [pc, #56]	@ (80103fc <USBD_LL_Init+0x98>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80103c6:	480d      	ldr	r0, [pc, #52]	@ (80103fc <USBD_LL_Init+0x98>)
 80103c8:	f7f5 fb8f 	bl	8005aea <HAL_PCD_Init>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80103d2:	f7f0 fcb3 	bl	8000d3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80103d6:	2180      	movs	r1, #128	@ 0x80
 80103d8:	4808      	ldr	r0, [pc, #32]	@ (80103fc <USBD_LL_Init+0x98>)
 80103da:	f7f6 fde6 	bl	8006faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80103de:	2240      	movs	r2, #64	@ 0x40
 80103e0:	2100      	movs	r1, #0
 80103e2:	4806      	ldr	r0, [pc, #24]	@ (80103fc <USBD_LL_Init+0x98>)
 80103e4:	f7f6 fd9a 	bl	8006f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80103e8:	2280      	movs	r2, #128	@ 0x80
 80103ea:	2101      	movs	r1, #1
 80103ec:	4803      	ldr	r0, [pc, #12]	@ (80103fc <USBD_LL_Init+0x98>)
 80103ee:	f7f6 fd95 	bl	8006f1c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	24001870 	.word	0x24001870
 8010400:	40080000 	.word	0x40080000

08010404 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801040c:	2300      	movs	r3, #0
 801040e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801041a:	4618      	mov	r0, r3
 801041c:	f7f5 fc71 	bl	8005d02 <HAL_PCD_Start>
 8010420:	4603      	mov	r3, r0
 8010422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010424:	7bfb      	ldrb	r3, [r7, #15]
 8010426:	4618      	mov	r0, r3
 8010428:	f000 f942 	bl	80106b0 <USBD_Get_USB_Status>
 801042c:	4603      	mov	r3, r0
 801042e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010430:	7bbb      	ldrb	r3, [r7, #14]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b084      	sub	sp, #16
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	4608      	mov	r0, r1
 8010444:	4611      	mov	r1, r2
 8010446:	461a      	mov	r2, r3
 8010448:	4603      	mov	r3, r0
 801044a:	70fb      	strb	r3, [r7, #3]
 801044c:	460b      	mov	r3, r1
 801044e:	70bb      	strb	r3, [r7, #2]
 8010450:	4613      	mov	r3, r2
 8010452:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010462:	78bb      	ldrb	r3, [r7, #2]
 8010464:	883a      	ldrh	r2, [r7, #0]
 8010466:	78f9      	ldrb	r1, [r7, #3]
 8010468:	f7f6 f972 	bl	8006750 <HAL_PCD_EP_Open>
 801046c:	4603      	mov	r3, r0
 801046e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010470:	7bfb      	ldrb	r3, [r7, #15]
 8010472:	4618      	mov	r0, r3
 8010474:	f000 f91c 	bl	80106b0 <USBD_Get_USB_Status>
 8010478:	4603      	mov	r3, r0
 801047a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047c:	7bbb      	ldrb	r3, [r7, #14]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	460b      	mov	r3, r1
 8010490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010496:	2300      	movs	r3, #0
 8010498:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104a0:	78fa      	ldrb	r2, [r7, #3]
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7f6 f9bd 	bl	8006824 <HAL_PCD_EP_Close>
 80104aa:	4603      	mov	r3, r0
 80104ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ae:	7bfb      	ldrb	r3, [r7, #15]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f000 f8fd 	bl	80106b0 <USBD_Get_USB_Status>
 80104b6:	4603      	mov	r3, r0
 80104b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	460b      	mov	r3, r1
 80104ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104de:	78fa      	ldrb	r2, [r7, #3]
 80104e0:	4611      	mov	r1, r2
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f6 fa75 	bl	80069d2 <HAL_PCD_EP_SetStall>
 80104e8:	4603      	mov	r3, r0
 80104ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 f8de 	bl	80106b0 <USBD_Get_USB_Status>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b084      	sub	sp, #16
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	460b      	mov	r3, r1
 801050c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801051c:	78fa      	ldrb	r2, [r7, #3]
 801051e:	4611      	mov	r1, r2
 8010520:	4618      	mov	r0, r3
 8010522:	f7f6 fab9 	bl	8006a98 <HAL_PCD_EP_ClrStall>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	4618      	mov	r0, r3
 801052e:	f000 f8bf 	bl	80106b0 <USBD_Get_USB_Status>
 8010532:	4603      	mov	r3, r0
 8010534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010536:	7bbb      	ldrb	r3, [r7, #14]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010540:	b480      	push	{r7}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	460b      	mov	r3, r1
 801054a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010552:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010558:	2b00      	cmp	r3, #0
 801055a:	da0b      	bge.n	8010574 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801055c:	78fb      	ldrb	r3, [r7, #3]
 801055e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010562:	68f9      	ldr	r1, [r7, #12]
 8010564:	4613      	mov	r3, r2
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	4413      	add	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	440b      	add	r3, r1
 801056e:	3316      	adds	r3, #22
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	e00b      	b.n	801058c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010574:	78fb      	ldrb	r3, [r7, #3]
 8010576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801057a:	68f9      	ldr	r1, [r7, #12]
 801057c:	4613      	mov	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	4413      	add	r3, r2
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	440b      	add	r3, r1
 8010586:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801058a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801058c:	4618      	mov	r0, r3
 801058e:	3714      	adds	r7, #20
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105b2:	78fa      	ldrb	r2, [r7, #3]
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f6 f8a6 	bl	8006708 <HAL_PCD_SetAddress>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f874 	bl	80106b0 <USBD_Get_USB_Status>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b086      	sub	sp, #24
 80105da:	af00      	add	r7, sp, #0
 80105dc:	60f8      	str	r0, [r7, #12]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	603b      	str	r3, [r7, #0]
 80105e2:	460b      	mov	r3, r1
 80105e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80105f4:	7af9      	ldrb	r1, [r7, #11]
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	f7f6 f9b0 	bl	800695e <HAL_PCD_EP_Transmit>
 80105fe:	4603      	mov	r3, r0
 8010600:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010602:	7dfb      	ldrb	r3, [r7, #23]
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f853 	bl	80106b0 <USBD_Get_USB_Status>
 801060a:	4603      	mov	r3, r0
 801060c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801060e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	60f8      	str	r0, [r7, #12]
 8010620:	607a      	str	r2, [r7, #4]
 8010622:	603b      	str	r3, [r7, #0]
 8010624:	460b      	mov	r3, r1
 8010626:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801062c:	2300      	movs	r3, #0
 801062e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010636:	7af9      	ldrb	r1, [r7, #11]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	f7f6 f93c 	bl	80068b8 <HAL_PCD_EP_Receive>
 8010640:	4603      	mov	r3, r0
 8010642:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 f832 	bl	80106b0 <USBD_Get_USB_Status>
 801064c:	4603      	mov	r3, r0
 801064e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010650:	7dbb      	ldrb	r3, [r7, #22]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3718      	adds	r7, #24
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b082      	sub	sp, #8
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
 8010662:	460b      	mov	r3, r1
 8010664:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801066c:	78fa      	ldrb	r2, [r7, #3]
 801066e:	4611      	mov	r1, r2
 8010670:	4618      	mov	r0, r3
 8010672:	f7f6 f95c 	bl	800692e <HAL_PCD_EP_GetRxCount>
 8010676:	4603      	mov	r3, r0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010688:	4b03      	ldr	r3, [pc, #12]	@ (8010698 <USBD_static_malloc+0x18>)
}
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	24001d54 	.word	0x24001d54

0801069c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80106a4:	bf00      	nop
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	4603      	mov	r3, r0
 80106b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106be:	79fb      	ldrb	r3, [r7, #7]
 80106c0:	2b03      	cmp	r3, #3
 80106c2:	d817      	bhi.n	80106f4 <USBD_Get_USB_Status+0x44>
 80106c4:	a201      	add	r2, pc, #4	@ (adr r2, 80106cc <USBD_Get_USB_Status+0x1c>)
 80106c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ca:	bf00      	nop
 80106cc:	080106dd 	.word	0x080106dd
 80106d0:	080106e3 	.word	0x080106e3
 80106d4:	080106e9 	.word	0x080106e9
 80106d8:	080106ef 	.word	0x080106ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	73fb      	strb	r3, [r7, #15]
    break;
 80106e0:	e00b      	b.n	80106fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106e2:	2303      	movs	r3, #3
 80106e4:	73fb      	strb	r3, [r7, #15]
    break;
 80106e6:	e008      	b.n	80106fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106e8:	2301      	movs	r3, #1
 80106ea:	73fb      	strb	r3, [r7, #15]
    break;
 80106ec:	e005      	b.n	80106fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106ee:	2303      	movs	r3, #3
 80106f0:	73fb      	strb	r3, [r7, #15]
    break;
 80106f2:	e002      	b.n	80106fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80106f4:	2303      	movs	r3, #3
 80106f6:	73fb      	strb	r3, [r7, #15]
    break;
 80106f8:	bf00      	nop
  }
  return usb_status;
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3714      	adds	r7, #20
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 8010708:	b5b0      	push	{r4, r5, r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 801070e:	4b3e      	ldr	r3, [pc, #248]	@ (8010808 <do_dump+0x100>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	4a3e      	ldr	r2, [pc, #248]	@ (801080c <do_dump+0x104>)
 8010714:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 8010716:	4b3c      	ldr	r3, [pc, #240]	@ (8010808 <do_dump+0x100>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f023 030f 	bic.w	r3, r3, #15
 801071e:	4619      	mov	r1, r3
 8010720:	483b      	ldr	r0, [pc, #236]	@ (8010810 <do_dump+0x108>)
 8010722:	f000 fc97 	bl	8011054 <DebugPrint>
	strcpy(ascii_result,"................");
 8010726:	1d3b      	adds	r3, r7, #4
 8010728:	4a3a      	ldr	r2, [pc, #232]	@ (8010814 <do_dump+0x10c>)
 801072a:	461c      	mov	r4, r3
 801072c:	4615      	mov	r5, r2
 801072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 8010736:	2300      	movs	r3, #0
 8010738:	61fb      	str	r3, [r7, #28]
 801073a:	e005      	b.n	8010748 <do_dump+0x40>
 801073c:	4836      	ldr	r0, [pc, #216]	@ (8010818 <do_dump+0x110>)
 801073e:	f000 fc6f 	bl	8011020 <DebugSend>
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	3301      	adds	r3, #1
 8010746:	61fb      	str	r3, [r7, #28]
 8010748:	4b2f      	ldr	r3, [pc, #188]	@ (8010808 <do_dump+0x100>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 020f 	and.w	r2, r3, #15
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	429a      	cmp	r2, r3
 8010754:	d8f2      	bhi.n	801073c <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 8010756:	e049      	b.n	80107ec <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 8010758:	4b2b      	ldr	r3, [pc, #172]	@ (8010808 <do_dump+0x100>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	1c5a      	adds	r2, r3, #1
 801075e:	492a      	ldr	r1, [pc, #168]	@ (8010808 <do_dump+0x100>)
 8010760:	600a      	str	r2, [r1, #0]
 8010762:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 801076a:	7dfb      	ldrb	r3, [r7, #23]
 801076c:	4619      	mov	r1, r3
 801076e:	482b      	ldr	r0, [pc, #172]	@ (801081c <do_dump+0x114>)
 8010770:	f000 fc70 	bl	8011054 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 8010774:	7dfb      	ldrb	r3, [r7, #23]
 8010776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801077a:	3301      	adds	r3, #1
 801077c:	4a28      	ldr	r2, [pc, #160]	@ (8010820 <do_dump+0x118>)
 801077e:	4413      	add	r3, r2
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	f003 0320 	and.w	r3, r3, #32
 8010786:	2b00      	cmp	r3, #0
 8010788:	d104      	bne.n	8010794 <do_dump+0x8c>
 801078a:	1d3a      	adds	r2, r7, #4
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	4413      	add	r3, r2
 8010790:	7dfa      	ldrb	r2, [r7, #23]
 8010792:	701a      	strb	r2, [r3, #0]
		i1++;
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	3301      	adds	r3, #1
 8010798:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 801079a:	4b1b      	ldr	r3, [pc, #108]	@ (8010808 <do_dump+0x100>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f003 030f 	and.w	r3, r3, #15
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d122      	bne.n	80107ec <do_dump+0xe4>
		{
			DebugSend("  ");
 80107a6:	481f      	ldr	r0, [pc, #124]	@ (8010824 <do_dump+0x11c>)
 80107a8:	f000 fc3a 	bl	8011020 <DebugSend>
			DebugSend(ascii_result);
 80107ac:	1d3b      	adds	r3, r7, #4
 80107ae:	4618      	mov	r0, r3
 80107b0:	f000 fc36 	bl	8011020 <DebugSend>
			i1 = 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 80107b8:	1d3b      	adds	r3, r7, #4
 80107ba:	4a16      	ldr	r2, [pc, #88]	@ (8010814 <do_dump+0x10c>)
 80107bc:	461c      	mov	r4, r3
 80107be:	4615      	mov	r5, r2
 80107c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 80107c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010808 <do_dump+0x100>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d014      	beq.n	80107fa <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 80107d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010808 <do_dump+0x100>)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	4b14      	ldr	r3, [pc, #80]	@ (8010828 <do_dump+0x120>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d807      	bhi.n	80107ec <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 80107dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010808 <do_dump+0x100>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f023 030f 	bic.w	r3, r3, #15
 80107e4:	4619      	mov	r1, r3
 80107e6:	480a      	ldr	r0, [pc, #40]	@ (8010810 <do_dump+0x108>)
 80107e8:	f000 fc34 	bl	8011054 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 80107ec:	4b06      	ldr	r3, [pc, #24]	@ (8010808 <do_dump+0x100>)
 80107ee:	681a      	ldr	r2, [r3, #0]
 80107f0:	4b0d      	ldr	r3, [pc, #52]	@ (8010828 <do_dump+0x120>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d9af      	bls.n	8010758 <do_dump+0x50>
 80107f8:	e000      	b.n	80107fc <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 80107fa:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 80107fc:	4b02      	ldr	r3, [pc, #8]	@ (8010808 <do_dump+0x100>)
 80107fe:	681b      	ldr	r3, [r3, #0]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3720      	adds	r7, #32
 8010804:	46bd      	mov	sp, r7
 8010806:	bdb0      	pop	{r4, r5, r7, pc}
 8010808:	24001f74 	.word	0x24001f74
 801080c:	24001f78 	.word	0x24001f78
 8010810:	0801256c 	.word	0x0801256c
 8010814:	08012578 	.word	0x08012578
 8010818:	0801258c 	.word	0x0801258c
 801081c:	08012590 	.word	0x08012590
 8010820:	08012790 	.word	0x08012790
 8010824:	08012598 	.word	0x08012598
 8010828:	24001f7c 	.word	0x24001f7c

0801082c <debug_parse>:


void debug_parse(char *cmd_line)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b08e      	sub	sp, #56	@ 0x38
 8010830:	af02      	add	r7, sp, #8
 8010832:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 8010834:	e002      	b.n	801083c <debug_parse+0x10>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	3301      	adds	r3, #1
 801083a:	607b      	str	r3, [r7, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	2b20      	cmp	r3, #32
 8010842:	d0f8      	beq.n	8010836 <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	1c5a      	adds	r2, r3, #1
 8010848:	607a      	str	r2, [r7, #4]
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010854:	3301      	adds	r3, #1
 8010856:	4aac      	ldr	r2, [pc, #688]	@ (8010b08 <debug_parse+0x2dc>)
 8010858:	4413      	add	r3, r2
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	f003 0303 	and.w	r3, r3, #3
 8010860:	2b02      	cmp	r3, #2
 8010862:	d103      	bne.n	801086c <debug_parse+0x40>
 8010864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010868:	3b20      	subs	r3, #32
 801086a:	e001      	b.n	8010870 <debug_parse+0x44>
 801086c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010870:	3b3f      	subs	r3, #63	@ 0x3f
 8010872:	2b1b      	cmp	r3, #27
 8010874:	f200 82dc 	bhi.w	8010e30 <debug_parse+0x604>
 8010878:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <debug_parse+0x54>)
 801087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087e:	bf00      	nop
 8010880:	080108f1 	.word	0x080108f1
 8010884:	08010e31 	.word	0x08010e31
 8010888:	080108fd 	.word	0x080108fd
 801088c:	08010e0f 	.word	0x08010e0f
 8010890:	08010e0f 	.word	0x08010e0f
 8010894:	0801090d 	.word	0x0801090d
 8010898:	0801096d 	.word	0x0801096d
 801089c:	08010991 	.word	0x08010991
 80108a0:	08010e0f 	.word	0x08010e0f
 80108a4:	08010e0f 	.word	0x08010e0f
 80108a8:	080109bd 	.word	0x080109bd
 80108ac:	08010a03 	.word	0x08010a03
 80108b0:	08010e0f 	.word	0x08010e0f
 80108b4:	08010a3d 	.word	0x08010a3d
 80108b8:	08010a81 	.word	0x08010a81
 80108bc:	08010ad5 	.word	0x08010ad5
 80108c0:	08010b59 	.word	0x08010b59
 80108c4:	08010bad 	.word	0x08010bad
 80108c8:	08010e0f 	.word	0x08010e0f
 80108cc:	08010e0f 	.word	0x08010e0f
 80108d0:	08010e0f 	.word	0x08010e0f
 80108d4:	08010bbd 	.word	0x08010bbd
 80108d8:	08010bff 	.word	0x08010bff
 80108dc:	08010c8d 	.word	0x08010c8d
 80108e0:	08010cdd 	.word	0x08010cdd
 80108e4:	08010d75 	.word	0x08010d75
 80108e8:	08010d85 	.word	0x08010d85
 80108ec:	08010de9 	.word	0x08010de9
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 80108f0:	4a86      	ldr	r2, [pc, #536]	@ (8010b0c <debug_parse+0x2e0>)
 80108f2:	4987      	ldr	r1, [pc, #540]	@ (8010b10 <debug_parse+0x2e4>)
 80108f4:	4887      	ldr	r0, [pc, #540]	@ (8010b14 <debug_parse+0x2e8>)
 80108f6:	f000 fbad 	bl	8011054 <DebugPrint>
		break;
 80108fa:	e299      	b.n	8010e30 <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 80108fc:	f7f0 f80c 	bl	8000918 <CalcTemperature>
 8010900:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 8010902:	6a39      	ldr	r1, [r7, #32]
 8010904:	4884      	ldr	r0, [pc, #528]	@ (8010b18 <debug_parse+0x2ec>)
 8010906:	f000 fba5 	bl	8011054 <DebugPrint>
	}
		break;
 801090a:	e291      	b.n	8010e30 <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f107 010c 	add.w	r1, r7, #12
 8010916:	2210      	movs	r2, #16
 8010918:	4618      	mov	r0, r3
 801091a:	f000 fccd 	bl	80112b8 <strtoul>
 801091e:	4603      	mov	r3, r0
 8010920:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d019      	beq.n	801095c <debug_parse+0x130>
			_debug_dump_beg = temp2;
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	4a7c      	ldr	r2, [pc, #496]	@ (8010b1c <debug_parse+0x2f0>)
 801092c:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f107 010c 	add.w	r1, r7, #12
 8010934:	2210      	movs	r2, #16
 8010936:	4618      	mov	r0, r3
 8010938:	f000 fcbe 	bl	80112b8 <strtoul>
 801093c:	4603      	mov	r3, r0
 801093e:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 8010940:	697a      	ldr	r2, [r7, #20]
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	429a      	cmp	r2, r3
 8010946:	d903      	bls.n	8010950 <debug_parse+0x124>
				_debug_dump_end = temp3;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	4a75      	ldr	r2, [pc, #468]	@ (8010b20 <debug_parse+0x2f4>)
 801094c:	6013      	str	r3, [r2, #0]
 801094e:	e00a      	b.n	8010966 <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 8010950:	4b72      	ldr	r3, [pc, #456]	@ (8010b1c <debug_parse+0x2f0>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	337f      	adds	r3, #127	@ 0x7f
 8010956:	4a72      	ldr	r2, [pc, #456]	@ (8010b20 <debug_parse+0x2f4>)
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	e004      	b.n	8010966 <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 801095c:	4b6f      	ldr	r3, [pc, #444]	@ (8010b1c <debug_parse+0x2f0>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	337f      	adds	r3, #127	@ 0x7f
 8010962:	4a6f      	ldr	r2, [pc, #444]	@ (8010b20 <debug_parse+0x2f4>)
 8010964:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 8010966:	f7ff fecf 	bl	8010708 <do_dump>
		break;
 801096a:	e261      	b.n	8010e30 <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 801096c:	2300      	movs	r3, #0
 801096e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 8010972:	f107 031c 	add.w	r3, r7, #28
 8010976:	461a      	mov	r2, r3
 8010978:	496a      	ldr	r1, [pc, #424]	@ (8010b24 <debug_parse+0x2f8>)
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 fcc8 	bl	8011310 <siscanf>
 8010980:	4603      	mov	r3, r0
 8010982:	2b01      	cmp	r3, #1
 8010984:	f040 8245 	bne.w	8010e12 <debug_parse+0x5e6>
			tempbyte = temp1;
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 801098e:	e240      	b.n	8010e12 <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 8010990:	f107 0114 	add.w	r1, r7, #20
 8010994:	f107 0218 	add.w	r2, r7, #24
 8010998:	f107 0310 	add.w	r3, r7, #16
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	460b      	mov	r3, r1
 80109a0:	4961      	ldr	r1, [pc, #388]	@ (8010b28 <debug_parse+0x2fc>)
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fcb4 	bl	8011310 <siscanf>
 80109a8:	6278      	str	r0, [r7, #36]	@ 0x24
		switch (params) {
 80109aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ac:	2b03      	cmp	r3, #3
 80109ae:	d003      	beq.n	80109b8 <debug_parse+0x18c>
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 80109b0:	485e      	ldr	r0, [pc, #376]	@ (8010b2c <debug_parse+0x300>)
 80109b2:	f000 fb35 	bl	8011020 <DebugSend>
			}
			break;
 80109b6:	e000      	b.n	80109ba <debug_parse+0x18e>
			break;
 80109b8:	bf00      	nop
		}
		break;
 80109ba:	e239      	b.n	8010e30 <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 80109bc:	f107 031c 	add.w	r3, r7, #28
 80109c0:	461a      	mov	r2, r3
 80109c2:	4958      	ldr	r1, [pc, #352]	@ (8010b24 <debug_parse+0x2f8>)
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 fca3 	bl	8011310 <siscanf>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	f040 8222 	bne.w	8010e16 <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	461a      	mov	r2, r3
 80109d6:	4b56      	ldr	r3, [pc, #344]	@ (8010b30 <debug_parse+0x304>)
 80109d8:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 80109da:	4b55      	ldr	r3, [pc, #340]	@ (8010b30 <debug_parse+0x304>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 80109e4:	4b52      	ldr	r3, [pc, #328]	@ (8010b30 <debug_parse+0x304>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4619      	mov	r1, r3
 80109ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80109ee:	461a      	mov	r2, r3
 80109f0:	4850      	ldr	r0, [pc, #320]	@ (8010b34 <debug_parse+0x308>)
 80109f2:	f000 fb2f 	bl	8011054 <DebugPrint>
			debug_port += sizeof(tempbyte);
 80109f6:	4b4e      	ldr	r3, [pc, #312]	@ (8010b30 <debug_parse+0x304>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	3301      	adds	r3, #1
 80109fc:	4a4c      	ldr	r2, [pc, #304]	@ (8010b30 <debug_parse+0x304>)
 80109fe:	6013      	str	r3, [r2, #0]
		}
		break;
 8010a00:	e209      	b.n	8010e16 <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 8010a02:	f107 031c 	add.w	r3, r7, #28
 8010a06:	461a      	mov	r2, r3
 8010a08:	4946      	ldr	r1, [pc, #280]	@ (8010b24 <debug_parse+0x2f8>)
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fc80 	bl	8011310 <siscanf>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d105      	bne.n	8010a22 <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	f023 0301 	bic.w	r3, r3, #1
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b44      	ldr	r3, [pc, #272]	@ (8010b30 <debug_parse+0x304>)
 8010a20:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 8010a22:	4b43      	ldr	r3, [pc, #268]	@ (8010b30 <debug_parse+0x304>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 8010a2a:	4b41      	ldr	r3, [pc, #260]	@ (8010b30 <debug_parse+0x304>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010a32:	461a      	mov	r2, r3
 8010a34:	4840      	ldr	r0, [pc, #256]	@ (8010b38 <debug_parse+0x30c>)
 8010a36:	f000 fb0d 	bl	8011054 <DebugPrint>
		break;
 8010a3a:	e1f9      	b.n	8010e30 <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 8010a3c:	f7f7 fa0a 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 8010a40:	4603      	mov	r3, r0
 8010a42:	4a3e      	ldr	r2, [pc, #248]	@ (8010b3c <debug_parse+0x310>)
 8010a44:	fba2 2303 	umull	r2, r3, r2, r3
 8010a48:	0c9b      	lsrs	r3, r3, #18
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	483c      	ldr	r0, [pc, #240]	@ (8010b40 <debug_parse+0x314>)
 8010a4e:	f000 fb01 	bl	8011054 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 8010a52:	f7f7 fb79 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8010a56:	4603      	mov	r3, r0
 8010a58:	4a38      	ldr	r2, [pc, #224]	@ (8010b3c <debug_parse+0x310>)
 8010a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a5e:	0c9b      	lsrs	r3, r3, #18
 8010a60:	4619      	mov	r1, r3
 8010a62:	4838      	ldr	r0, [pc, #224]	@ (8010b44 <debug_parse+0x318>)
 8010a64:	f000 faf6 	bl	8011054 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 8010a68:	f7f7 fb9e 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	4a33      	ldr	r2, [pc, #204]	@ (8010b3c <debug_parse+0x310>)
 8010a70:	fba2 2303 	umull	r2, r3, r2, r3
 8010a74:	0c9b      	lsrs	r3, r3, #18
 8010a76:	4619      	mov	r1, r3
 8010a78:	4833      	ldr	r0, [pc, #204]	@ (8010b48 <debug_parse+0x31c>)
 8010a7a:	f000 faeb 	bl	8011054 <DebugPrint>
		break;
 8010a7e:	e1d7      	b.n	8010e30 <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 8010a80:	f107 0318 	add.w	r3, r7, #24
 8010a84:	f107 021c 	add.w	r2, r7, #28
 8010a88:	4930      	ldr	r1, [pc, #192]	@ (8010b4c <debug_parse+0x320>)
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fc40 	bl	8011310 <siscanf>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d117      	bne.n	8010ac6 <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	f023 0303 	bic.w	r3, r3, #3
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	4b24      	ldr	r3, [pc, #144]	@ (8010b30 <debug_parse+0x304>)
 8010aa0:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 8010aa2:	4b23      	ldr	r3, [pc, #140]	@ (8010b30 <debug_parse+0x304>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	69bb      	ldr	r3, [r7, #24]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4828      	ldr	r0, [pc, #160]	@ (8010b50 <debug_parse+0x324>)
 8010aae:	f000 fad1 	bl	8011054 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 8010ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8010b30 <debug_parse+0x304>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 8010aba:	4b1d      	ldr	r3, [pc, #116]	@ (8010b30 <debug_parse+0x304>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8010b30 <debug_parse+0x304>)
 8010ac2:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 8010ac4:	e1b4      	b.n	8010e30 <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 8010ac6:	4819      	ldr	r0, [pc, #100]	@ (8010b2c <debug_parse+0x300>)
 8010ac8:	f000 faaa 	bl	8011020 <DebugSend>
		break;
 8010acc:	e1b0      	b.n	8010e30 <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	607b      	str	r3, [r7, #4]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	2b20      	cmp	r3, #32
 8010ada:	d103      	bne.n	8010ae4 <debug_parse+0x2b8>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1f4      	bne.n	8010ace <debug_parse+0x2a2>
		DebugSend("\r\n");
 8010ae4:	481b      	ldr	r0, [pc, #108]	@ (8010b54 <debug_parse+0x328>)
 8010ae6:	f000 fa9b 	bl	8011020 <DebugSend>
		while (*cmd_line!=0) {
 8010aea:	e007      	b.n	8010afc <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 fa53 	bl	8010f9c <DebugPutChar>
			cmd_line++;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	3301      	adds	r3, #1
 8010afa:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1f3      	bne.n	8010aec <debug_parse+0x2c0>
		}
		break;
 8010b04:	e194      	b.n	8010e30 <debug_parse+0x604>
 8010b06:	bf00      	nop
 8010b08:	08012790 	.word	0x08012790
 8010b0c:	0801259c 	.word	0x0801259c
 8010b10:	080125a8 	.word	0x080125a8
 8010b14:	080125b4 	.word	0x080125b4
 8010b18:	080125d4 	.word	0x080125d4
 8010b1c:	24001f74 	.word	0x24001f74
 8010b20:	24001f7c 	.word	0x24001f7c
 8010b24:	080125e8 	.word	0x080125e8
 8010b28:	080125ec 	.word	0x080125ec
 8010b2c:	080125f8 	.word	0x080125f8
 8010b30:	2400010c 	.word	0x2400010c
 8010b34:	08012600 	.word	0x08012600
 8010b38:	08012610 	.word	0x08012610
 8010b3c:	431bde83 	.word	0x431bde83
 8010b40:	08012620 	.word	0x08012620
 8010b44:	08012648 	.word	0x08012648
 8010b48:	0801266c 	.word	0x0801266c
 8010b4c:	08012690 	.word	0x08012690
 8010b50:	08012698 	.word	0x08012698
 8010b54:	080126a8 	.word	0x080126a8
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 8010b58:	f107 0318 	add.w	r3, r7, #24
 8010b5c:	f107 021c 	add.w	r2, r7, #28
 8010b60:	49b5      	ldr	r1, [pc, #724]	@ (8010e38 <debug_parse+0x60c>)
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 fbd4 	bl	8011310 <siscanf>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	d11a      	bne.n	8010ba4 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	461a      	mov	r2, r3
 8010b72:	4bb2      	ldr	r3, [pc, #712]	@ (8010e3c <debug_parse+0x610>)
 8010b74:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 8010b7c:	4baf      	ldr	r3, [pc, #700]	@ (8010e3c <debug_parse+0x610>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4619      	mov	r1, r3
 8010b82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b86:	461a      	mov	r2, r3
 8010b88:	48ad      	ldr	r0, [pc, #692]	@ (8010e40 <debug_parse+0x614>)
 8010b8a:	f000 fa63 	bl	8011054 <DebugPrint>
			*debug_port = tempbyte;
 8010b8e:	4bab      	ldr	r3, [pc, #684]	@ (8010e3c <debug_parse+0x610>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8010b96:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 8010b98:	4ba8      	ldr	r3, [pc, #672]	@ (8010e3c <debug_parse+0x610>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	4aa7      	ldr	r2, [pc, #668]	@ (8010e3c <debug_parse+0x610>)
 8010ba0:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 8010ba2:	e145      	b.n	8010e30 <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 8010ba4:	48a7      	ldr	r0, [pc, #668]	@ (8010e44 <debug_parse+0x618>)
 8010ba6:	f000 fa3b 	bl	8011020 <DebugSend>
		break;
 8010baa:	e141      	b.n	8010e30 <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010bac:	f107 031c 	add.w	r3, r7, #28
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	49a5      	ldr	r1, [pc, #660]	@ (8010e48 <debug_parse+0x61c>)
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fbab 	bl	8011310 <siscanf>
		{
		}
		else
		{
		}
		break;
 8010bba:	e139      	b.n	8010e30 <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010bbc:	f107 031c 	add.w	r3, r7, #28
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	49a1      	ldr	r1, [pc, #644]	@ (8010e48 <debug_parse+0x61c>)
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fba3 	bl	8011310 <siscanf>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	f000 8124 	beq.w	8010e1a <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 8010bd2:	4b9e      	ldr	r3, [pc, #632]	@ (8010e4c <debug_parse+0x620>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bf0c      	ite	eq
 8010bda:	2301      	moveq	r3, #1
 8010bdc:	2300      	movne	r3, #0
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	461a      	mov	r2, r3
 8010be2:	4b9a      	ldr	r3, [pc, #616]	@ (8010e4c <debug_parse+0x620>)
 8010be4:	701a      	strb	r2, [r3, #0]
			if (bTest)
 8010be6:	4b99      	ldr	r3, [pc, #612]	@ (8010e4c <debug_parse+0x620>)
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 8010bee:	4898      	ldr	r0, [pc, #608]	@ (8010e50 <debug_parse+0x624>)
 8010bf0:	f000 fa16 	bl	8011020 <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 8010bf4:	e111      	b.n	8010e1a <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 8010bf6:	4897      	ldr	r0, [pc, #604]	@ (8010e54 <debug_parse+0x628>)
 8010bf8:	f000 fa12 	bl	8011020 <DebugSend>
		break;
 8010bfc:	e10d      	b.n	8010e1a <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 8010bfe:	f107 0318 	add.w	r3, r7, #24
 8010c02:	f107 021c 	add.w	r2, r7, #28
 8010c06:	4994      	ldr	r1, [pc, #592]	@ (8010e58 <debug_parse+0x62c>)
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fb81 	bl	8011310 <siscanf>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	f000 8104 	beq.w	8010e1e <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010c16:	f107 031c 	add.w	r3, r7, #28
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	498a      	ldr	r1, [pc, #552]	@ (8010e48 <debug_parse+0x61c>)
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fb76 	bl	8011310 <siscanf>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	f040 80f9 	bne.w	8010e1e <debug_parse+0x5f2>
		{
			switch (temp1){
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2b12      	cmp	r3, #18
 8010c30:	f200 80f5 	bhi.w	8010e1e <debug_parse+0x5f2>
 8010c34:	a201      	add	r2, pc, #4	@ (adr r2, 8010c3c <debug_parse+0x410>)
 8010c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3a:	bf00      	nop
 8010c3c:	08010c89 	.word	0x08010c89
 8010c40:	08010c89 	.word	0x08010c89
 8010c44:	08010c89 	.word	0x08010c89
 8010c48:	08010c89 	.word	0x08010c89
 8010c4c:	08010c89 	.word	0x08010c89
 8010c50:	08010c89 	.word	0x08010c89
 8010c54:	08010c89 	.word	0x08010c89
 8010c58:	08010c89 	.word	0x08010c89
 8010c5c:	08010c89 	.word	0x08010c89
 8010c60:	08010c89 	.word	0x08010c89
 8010c64:	08010c89 	.word	0x08010c89
 8010c68:	08010c89 	.word	0x08010c89
 8010c6c:	08010c89 	.word	0x08010c89
 8010c70:	08010c89 	.word	0x08010c89
 8010c74:	08010c89 	.word	0x08010c89
 8010c78:	08010c89 	.word	0x08010c89
 8010c7c:	08010c89 	.word	0x08010c89
 8010c80:	08010c89 	.word	0x08010c89
 8010c84:	08010c89 	.word	0x08010c89
			case 0:
				break;
 8010c88:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 8010c8a:	e0c8      	b.n	8010e1e <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010c8c:	f107 031c 	add.w	r3, r7, #28
 8010c90:	461a      	mov	r2, r3
 8010c92:	496d      	ldr	r1, [pc, #436]	@ (8010e48 <debug_parse+0x61c>)
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 fb3b 	bl	8011310 <siscanf>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	f040 80c0 	bne.w	8010e22 <debug_parse+0x5f6>
		{
			switch (temp1){
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	2b09      	cmp	r3, #9
 8010ca6:	f200 80bc 	bhi.w	8010e22 <debug_parse+0x5f6>
 8010caa:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb0 <debug_parse+0x484>)
 8010cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb0:	08010cd9 	.word	0x08010cd9
 8010cb4:	08010cd9 	.word	0x08010cd9
 8010cb8:	08010cd9 	.word	0x08010cd9
 8010cbc:	08010cd9 	.word	0x08010cd9
 8010cc0:	08010cd9 	.word	0x08010cd9
 8010cc4:	08010cd9 	.word	0x08010cd9
 8010cc8:	08010cd9 	.word	0x08010cd9
 8010ccc:	08010cd9 	.word	0x08010cd9
 8010cd0:	08010cd9 	.word	0x08010cd9
 8010cd4:	08010cd9 	.word	0x08010cd9
			case 0:	//V0
				break;
 8010cd8:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 8010cda:	e0a2      	b.n	8010e22 <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 8010cdc:	f107 0318 	add.w	r3, r7, #24
 8010ce0:	f107 021c 	add.w	r2, r7, #28
 8010ce4:	4954      	ldr	r1, [pc, #336]	@ (8010e38 <debug_parse+0x60c>)
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fb12 	bl	8011310 <siscanf>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	d119      	bne.n	8010d26 <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	f023 0301 	bic.w	r3, r3, #1
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	4b50      	ldr	r3, [pc, #320]	@ (8010e3c <debug_parse+0x610>)
 8010cfc:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 8010d02:	4b4e      	ldr	r3, [pc, #312]	@ (8010e3c <debug_parse+0x610>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4619      	mov	r1, r3
 8010d08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	4853      	ldr	r0, [pc, #332]	@ (8010e5c <debug_parse+0x630>)
 8010d0e:	f000 f9a1 	bl	8011054 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 8010d12:	4b4a      	ldr	r3, [pc, #296]	@ (8010e3c <debug_parse+0x610>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8010d18:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 8010d1a:	4b48      	ldr	r3, [pc, #288]	@ (8010e3c <debug_parse+0x610>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	3302      	adds	r3, #2
 8010d20:	4a46      	ldr	r2, [pc, #280]	@ (8010e3c <debug_parse+0x610>)
 8010d22:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 8010d24:	e07f      	b.n	8010e26 <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010d26:	f107 031c 	add.w	r3, r7, #28
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	4946      	ldr	r1, [pc, #280]	@ (8010e48 <debug_parse+0x61c>)
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 faee 	bl	8011310 <siscanf>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d175      	bne.n	8010e26 <debug_parse+0x5fa>
			switch (temp1){
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b09      	cmp	r3, #9
 8010d3e:	d872      	bhi.n	8010e26 <debug_parse+0x5fa>
 8010d40:	a201      	add	r2, pc, #4	@ (adr r2, 8010d48 <debug_parse+0x51c>)
 8010d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d46:	bf00      	nop
 8010d48:	08010d71 	.word	0x08010d71
 8010d4c:	08010d71 	.word	0x08010d71
 8010d50:	08010d71 	.word	0x08010d71
 8010d54:	08010d71 	.word	0x08010d71
 8010d58:	08010d71 	.word	0x08010d71
 8010d5c:	08010d71 	.word	0x08010d71
 8010d60:	08010d71 	.word	0x08010d71
 8010d64:	08010d71 	.word	0x08010d71
 8010d68:	08010d71 	.word	0x08010d71
 8010d6c:	08010d71 	.word	0x08010d71
			break;
 8010d70:	bf00      	nop
		break;
 8010d72:	e058      	b.n	8010e26 <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 8010d74:	f107 031c 	add.w	r3, r7, #28
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4933      	ldr	r1, [pc, #204]	@ (8010e48 <debug_parse+0x61c>)
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 fac7 	bl	8011310 <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 8010d82:	e055      	b.n	8010e30 <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 8010d84:	f107 0318 	add.w	r3, r7, #24
 8010d88:	f107 021c 	add.w	r2, r7, #28
 8010d8c:	4934      	ldr	r1, [pc, #208]	@ (8010e60 <debug_parse+0x634>)
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 fabe 	bl	8011310 <siscanf>
 8010d94:	4603      	mov	r3, r0
 8010d96:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	2b0f      	cmp	r3, #15
 8010d9c:	d845      	bhi.n	8010e2a <debug_parse+0x5fe>
 8010d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010da4 <debug_parse+0x578>)
 8010da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da4:	08010de5 	.word	0x08010de5
 8010da8:	08010de5 	.word	0x08010de5
 8010dac:	08010de5 	.word	0x08010de5
 8010db0:	08010de5 	.word	0x08010de5
 8010db4:	08010de5 	.word	0x08010de5
 8010db8:	08010de5 	.word	0x08010de5
 8010dbc:	08010de5 	.word	0x08010de5
 8010dc0:	08010de5 	.word	0x08010de5
 8010dc4:	08010de5 	.word	0x08010de5
 8010dc8:	08010de5 	.word	0x08010de5
 8010dcc:	08010de5 	.word	0x08010de5
 8010dd0:	08010de5 	.word	0x08010de5
 8010dd4:	08010de5 	.word	0x08010de5
 8010dd8:	08010de5 	.word	0x08010de5
 8010ddc:	08010de5 	.word	0x08010de5
 8010de0:	08010de5 	.word	0x08010de5
			case 0:	//Y0
				{
				}
				break;
 8010de4:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 8010de6:	e020      	b.n	8010e2a <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 8010de8:	f107 0318 	add.w	r3, r7, #24
 8010dec:	f107 021c 	add.w	r2, r7, #28
 8010df0:	491c      	ldr	r1, [pc, #112]	@ (8010e64 <debug_parse+0x638>)
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fa8c 	bl	8011310 <siscanf>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	d017      	beq.n	8010e2e <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 8010dfe:	f107 031c 	add.w	r3, r7, #28
 8010e02:	461a      	mov	r2, r3
 8010e04:	4918      	ldr	r1, [pc, #96]	@ (8010e68 <debug_parse+0x63c>)
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fa82 	bl	8011310 <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 8010e0c:	e00f      	b.n	8010e2e <debug_parse+0x602>
		break;
 8010e0e:	bf00      	nop
 8010e10:	e00e      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e12:	bf00      	nop
 8010e14:	e00c      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e16:	bf00      	nop
 8010e18:	e00a      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e1a:	bf00      	nop
 8010e1c:	e008      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e1e:	bf00      	nop
 8010e20:	e006      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e22:	bf00      	nop
 8010e24:	e004      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e26:	bf00      	nop
 8010e28:	e002      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e2a:	bf00      	nop
 8010e2c:	e000      	b.n	8010e30 <debug_parse+0x604>
		break;
 8010e2e:	bf00      	nop
	default:
		;
	}
}
 8010e30:	bf00      	nop
 8010e32:	3730      	adds	r7, #48	@ 0x30
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	080126ac 	.word	0x080126ac
 8010e3c:	2400010c 	.word	0x2400010c
 8010e40:	080126b4 	.word	0x080126b4
 8010e44:	080125f8 	.word	0x080125f8
 8010e48:	080126c4 	.word	0x080126c4
 8010e4c:	24001f80 	.word	0x24001f80
 8010e50:	080126c8 	.word	0x080126c8
 8010e54:	080126d4 	.word	0x080126d4
 8010e58:	080126e4 	.word	0x080126e4
 8010e5c:	080126ec 	.word	0x080126ec
 8010e60:	080126fc 	.word	0x080126fc
 8010e64:	08012704 	.word	0x08012704
 8010e68:	0801270c 	.word	0x0801270c

08010e6c <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	2b0d      	cmp	r3, #13
 8010e7a:	d003      	beq.n	8010e84 <debug_rcv+0x18>
 8010e7c:	4b21      	ldr	r3, [pc, #132]	@ (8010f04 <debug_rcv+0x98>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	2bff      	cmp	r3, #255	@ 0xff
 8010e82:	d112      	bne.n	8010eaa <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 8010e84:	4b1f      	ldr	r3, [pc, #124]	@ (8010f04 <debug_rcv+0x98>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a1f      	ldr	r2, [pc, #124]	@ (8010f08 <debug_rcv+0x9c>)
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 8010e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8010f04 <debug_rcv+0x98>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d002      	beq.n	8010e9c <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 8010e96:	481c      	ldr	r0, [pc, #112]	@ (8010f08 <debug_rcv+0x9c>)
 8010e98:	f7ff fcc8 	bl	801082c <debug_parse>
		}
		lineptr = 0;
 8010e9c:	4b19      	ldr	r3, [pc, #100]	@ (8010f04 <debug_rcv+0x98>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 8010ea2:	481a      	ldr	r0, [pc, #104]	@ (8010f0c <debug_rcv+0xa0>)
 8010ea4:	f000 f8bc 	bl	8011020 <DebugSend>
 8010ea8:	e027      	b.n	8010efa <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 8010eaa:	79fb      	ldrb	r3, [r7, #7]
 8010eac:	3301      	adds	r3, #1
 8010eae:	4a18      	ldr	r2, [pc, #96]	@ (8010f10 <debug_rcv+0xa4>)
 8010eb0:	4413      	add	r3, r2
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	f003 0320 	and.w	r3, r3, #32
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d010      	beq.n	8010ede <debug_rcv+0x72>
	{
		switch (ch)
 8010ebc:	79fb      	ldrb	r3, [r7, #7]
 8010ebe:	2b08      	cmp	r3, #8
 8010ec0:	d11b      	bne.n	8010efa <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 8010ec2:	4b10      	ldr	r3, [pc, #64]	@ (8010f04 <debug_rcv+0x98>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d016      	beq.n	8010ef8 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 f865 	bl	8010f9c <DebugPutChar>
				lineptr--;
 8010ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8010f04 <debug_rcv+0x98>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8010f04 <debug_rcv+0x98>)
 8010eda:	6013      	str	r3, [r2, #0]
			}
			break;
 8010edc:	e00c      	b.n	8010ef8 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 8010ede:	4b09      	ldr	r3, [pc, #36]	@ (8010f04 <debug_rcv+0x98>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	4907      	ldr	r1, [pc, #28]	@ (8010f04 <debug_rcv+0x98>)
 8010ee6:	600a      	str	r2, [r1, #0]
 8010ee8:	4907      	ldr	r1, [pc, #28]	@ (8010f08 <debug_rcv+0x9c>)
 8010eea:	79fa      	ldrb	r2, [r7, #7]
 8010eec:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 8010eee:	79fb      	ldrb	r3, [r7, #7]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 f853 	bl	8010f9c <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 8010ef6:	e000      	b.n	8010efa <debug_rcv+0x8e>
			break;
 8010ef8:	bf00      	nop
}
 8010efa:	bf00      	nop
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	2400308c 	.word	0x2400308c
 8010f08:	24003090 	.word	0x24003090
 8010f0c:	08012710 	.word	0x08012710
 8010f10:	08012790 	.word	0x08012790

08010f14 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
	if (!InDebug) {
 8010f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8010f8c <DebugTask+0x78>)
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d12d      	bne.n	8010f7e <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 8010f22:	4b1a      	ldr	r3, [pc, #104]	@ (8010f8c <DebugTask+0x78>)
 8010f24:	2201      	movs	r2, #1
 8010f26:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 8010f28:	4b19      	ldr	r3, [pc, #100]	@ (8010f90 <DebugTask+0x7c>)
 8010f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f2e:	4b19      	ldr	r3, [pc, #100]	@ (8010f94 <DebugTask+0x80>)
 8010f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d01f      	beq.n	8010f78 <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 8010f38:	4b16      	ldr	r3, [pc, #88]	@ (8010f94 <DebugTask+0x80>)
 8010f3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f3e:	b293      	uxth	r3, r2
 8010f40:	3301      	adds	r3, #1
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	b219      	sxth	r1, r3
 8010f46:	4b13      	ldr	r3, [pc, #76]	@ (8010f94 <DebugTask+0x80>)
 8010f48:	8019      	strh	r1, [r3, #0]
 8010f4a:	4b13      	ldr	r3, [pc, #76]	@ (8010f98 <DebugTask+0x84>)
 8010f4c:	5c9b      	ldrb	r3, [r3, r2]
 8010f4e:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 8010f50:	4b10      	ldr	r3, [pc, #64]	@ (8010f94 <DebugTask+0x80>)
 8010f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f56:	2bff      	cmp	r3, #255	@ 0xff
 8010f58:	dd02      	ble.n	8010f60 <DebugTask+0x4c>
 8010f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f94 <DebugTask+0x80>)
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 8010f60:	79fb      	ldrb	r3, [r7, #7]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff ff82 	bl	8010e6c <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 8010f68:	4b09      	ldr	r3, [pc, #36]	@ (8010f90 <DebugTask+0x7c>)
 8010f6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f6e:	4b09      	ldr	r3, [pc, #36]	@ (8010f94 <DebugTask+0x80>)
 8010f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d1df      	bne.n	8010f38 <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 8010f78:	4b04      	ldr	r3, [pc, #16]	@ (8010f8c <DebugTask+0x78>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 8010f7e:	f000 f881 	bl	8011084 <DoDebugSerial>
#endif
}
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	24003190 	.word	0x24003190
 8010f90:	24002084 	.word	0x24002084
 8010f94:	24002086 	.word	0x24002086
 8010f98:	24001f84 	.word	0x24001f84

08010f9c <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 8010fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8011014 <DebugPutChar+0x78>)
 8010fa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010fac:	b293      	uxth	r3, r2
 8010fae:	3301      	adds	r3, #1
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	b219      	sxth	r1, r3
 8010fb4:	4b17      	ldr	r3, [pc, #92]	@ (8011014 <DebugPutChar+0x78>)
 8010fb6:	8019      	strh	r1, [r3, #0]
 8010fb8:	4611      	mov	r1, r2
 8010fba:	4a17      	ldr	r2, [pc, #92]	@ (8011018 <DebugPutChar+0x7c>)
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 8010fc0:	4b14      	ldr	r3, [pc, #80]	@ (8011014 <DebugPutChar+0x78>)
 8010fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fca:	db02      	blt.n	8010fd2 <DebugPutChar+0x36>
 8010fcc:	4b11      	ldr	r3, [pc, #68]	@ (8011014 <DebugPutChar+0x78>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 8010fd2:	4b10      	ldr	r3, [pc, #64]	@ (8011014 <DebugPutChar+0x78>)
 8010fd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010fd8:	4b10      	ldr	r3, [pc, #64]	@ (801101c <DebugPutChar+0x80>)
 8010fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d111      	bne.n	8011006 <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 8010fe2:	4b0e      	ldr	r3, [pc, #56]	@ (801101c <DebugPutChar+0x80>)
 8010fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	3301      	adds	r3, #1
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	@ (801101c <DebugPutChar+0x80>)
 8010ff2:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 8010ff4:	4b09      	ldr	r3, [pc, #36]	@ (801101c <DebugPutChar+0x80>)
 8010ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ffe:	db02      	blt.n	8011006 <DebugPutChar+0x6a>
 8011000:	4b06      	ldr	r3, [pc, #24]	@ (801101c <DebugPutChar+0x80>)
 8011002:	2200      	movs	r2, #0
 8011004:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 8011006:	bf00      	nop
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	24002888 	.word	0x24002888
 8011018:	24002088 	.word	0x24002088
 801101c:	2400288a 	.word	0x2400288a

08011020 <DebugSend>:

void DebugSend(char *message)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
	char ch = *message;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 801102e:	e009      	b.n	8011044 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 8011030:	7bfb      	ldrb	r3, [r7, #15]
 8011032:	4618      	mov	r0, r3
 8011034:	f7ff ffb2 	bl	8010f9c <DebugPutChar>
		message++;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	3301      	adds	r3, #1
 801103c:	607b      	str	r3, [r7, #4]
		ch = *message;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1f2      	bne.n	8011030 <DebugSend+0x10>
	}
}
 801104a:	bf00      	nop
 801104c:	bf00      	nop
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 8011054:	b40f      	push	{r0, r1, r2, r3}
 8011056:	b580      	push	{r7, lr}
 8011058:	b096      	sub	sp, #88	@ 0x58
 801105a:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 801105c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011060:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 8011062:	1d3b      	adds	r3, r7, #4
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011068:	4618      	mov	r0, r3
 801106a:	f000 f995 	bl	8011398 <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 801106e:	1d3b      	adds	r3, r7, #4
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff ffd5 	bl	8011020 <DebugSend>
}
 8011076:	bf00      	nop
 8011078:	3758      	adds	r7, #88	@ 0x58
 801107a:	46bd      	mov	sp, r7
 801107c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011080:	b004      	add	sp, #16
 8011082:	4770      	bx	lr

08011084 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 801108a:	4b28      	ldr	r3, [pc, #160]	@ (801112c <DoDebugSerial+0xa8>)
 801108c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011090:	4b27      	ldr	r3, [pc, #156]	@ (8011130 <DoDebugSerial+0xac>)
 8011092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011096:	429a      	cmp	r2, r3
 8011098:	d043      	beq.n	8011122 <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 801109a:	4b24      	ldr	r3, [pc, #144]	@ (801112c <DoDebugSerial+0xa8>)
 801109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	4b23      	ldr	r3, [pc, #140]	@ (8011130 <DoDebugSerial+0xac>)
 80110a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 80110b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	da04      	bge.n	80110c2 <DoDebugSerial+0x3e>
 80110b8:	88fb      	ldrh	r3, [r7, #6]
 80110ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110be:	b29b      	uxth	r3, r3
 80110c0:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 80110c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110ca:	dd02      	ble.n	80110d2 <DoDebugSerial+0x4e>
 80110cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80110d0:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 80110d2:	2300      	movs	r3, #0
 80110d4:	80bb      	strh	r3, [r7, #4]
 80110d6:	e01a      	b.n	801110e <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 80110d8:	4b15      	ldr	r3, [pc, #84]	@ (8011130 <DoDebugSerial+0xac>)
 80110da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80110de:	b293      	uxth	r3, r2
 80110e0:	3301      	adds	r3, #1
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	b219      	sxth	r1, r3
 80110e6:	4b12      	ldr	r3, [pc, #72]	@ (8011130 <DoDebugSerial+0xac>)
 80110e8:	8019      	strh	r1, [r3, #0]
 80110ea:	4611      	mov	r1, r2
 80110ec:	88bb      	ldrh	r3, [r7, #4]
 80110ee:	4a11      	ldr	r2, [pc, #68]	@ (8011134 <DoDebugSerial+0xb0>)
 80110f0:	5c51      	ldrb	r1, [r2, r1]
 80110f2:	4a11      	ldr	r2, [pc, #68]	@ (8011138 <DoDebugSerial+0xb4>)
 80110f4:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 80110f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011130 <DoDebugSerial+0xac>)
 80110f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011100:	db02      	blt.n	8011108 <DoDebugSerial+0x84>
 8011102:	4b0b      	ldr	r3, [pc, #44]	@ (8011130 <DoDebugSerial+0xac>)
 8011104:	2200      	movs	r2, #0
 8011106:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 8011108:	88bb      	ldrh	r3, [r7, #4]
 801110a:	3301      	adds	r3, #1
 801110c:	80bb      	strh	r3, [r7, #4]
 801110e:	88ba      	ldrh	r2, [r7, #4]
 8011110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011114:	429a      	cmp	r2, r3
 8011116:	dbdf      	blt.n	80110d8 <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 8011118:	88fb      	ldrh	r3, [r7, #6]
 801111a:	4619      	mov	r1, r3
 801111c:	4806      	ldr	r0, [pc, #24]	@ (8011138 <DoDebugSerial+0xb4>)
 801111e:	f7fe fe8c 	bl	800fe3a <USB_Transmit>
	}
}
 8011122:	bf00      	nop
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	24002888 	.word	0x24002888
 8011130:	2400288a 	.word	0x2400288a
 8011134:	24002088 	.word	0x24002088
 8011138:	2400288c 	.word	0x2400288c

0801113c <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	460b      	mov	r3, r1
 8011146:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 8011148:	2300      	movs	r3, #0
 801114a:	81fb      	strh	r3, [r7, #14]
 801114c:	e033      	b.n	80111b6 <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 801114e:	89fb      	ldrh	r3, [r7, #14]
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	4413      	add	r3, r2
 8011154:	4a1d      	ldr	r2, [pc, #116]	@ (80111cc <USB_Receive+0x90>)
 8011156:	f9b2 1000 	ldrsh.w	r1, [r2]
 801115a:	b28a      	uxth	r2, r1
 801115c:	3201      	adds	r2, #1
 801115e:	b292      	uxth	r2, r2
 8011160:	b210      	sxth	r0, r2
 8011162:	4a1a      	ldr	r2, [pc, #104]	@ (80111cc <USB_Receive+0x90>)
 8011164:	8010      	strh	r0, [r2, #0]
 8011166:	460a      	mov	r2, r1
 8011168:	7819      	ldrb	r1, [r3, #0]
 801116a:	4b19      	ldr	r3, [pc, #100]	@ (80111d0 <USB_Receive+0x94>)
 801116c:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 801116e:	4b17      	ldr	r3, [pc, #92]	@ (80111cc <USB_Receive+0x90>)
 8011170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011174:	2bff      	cmp	r3, #255	@ 0xff
 8011176:	dd02      	ble.n	801117e <USB_Receive+0x42>
 8011178:	4b14      	ldr	r3, [pc, #80]	@ (80111cc <USB_Receive+0x90>)
 801117a:	2200      	movs	r2, #0
 801117c:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 801117e:	4b13      	ldr	r3, [pc, #76]	@ (80111cc <USB_Receive+0x90>)
 8011180:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011184:	4b13      	ldr	r3, [pc, #76]	@ (80111d4 <USB_Receive+0x98>)
 8011186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801118a:	429a      	cmp	r2, r3
 801118c:	d110      	bne.n	80111b0 <USB_Receive+0x74>
			dbg_rx_tail++;
 801118e:	4b11      	ldr	r3, [pc, #68]	@ (80111d4 <USB_Receive+0x98>)
 8011190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011194:	b29b      	uxth	r3, r3
 8011196:	3301      	adds	r3, #1
 8011198:	b29b      	uxth	r3, r3
 801119a:	b21a      	sxth	r2, r3
 801119c:	4b0d      	ldr	r3, [pc, #52]	@ (80111d4 <USB_Receive+0x98>)
 801119e:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 80111a0:	4b0c      	ldr	r3, [pc, #48]	@ (80111d4 <USB_Receive+0x98>)
 80111a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80111a6:	2bff      	cmp	r3, #255	@ 0xff
 80111a8:	dd02      	ble.n	80111b0 <USB_Receive+0x74>
 80111aa:	4b0a      	ldr	r3, [pc, #40]	@ (80111d4 <USB_Receive+0x98>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 80111b0:	89fb      	ldrh	r3, [r7, #14]
 80111b2:	3301      	adds	r3, #1
 80111b4:	81fb      	strh	r3, [r7, #14]
 80111b6:	89fa      	ldrh	r2, [r7, #14]
 80111b8:	887b      	ldrh	r3, [r7, #2]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d3c7      	bcc.n	801114e <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3714      	adds	r7, #20
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	24002084 	.word	0x24002084
 80111d0:	24001f84 	.word	0x24001f84
 80111d4:	24002086 	.word	0x24002086

080111d8 <_strtoul_l.isra.0>:
 80111d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111dc:	4e34      	ldr	r6, [pc, #208]	@ (80112b0 <_strtoul_l.isra.0+0xd8>)
 80111de:	4686      	mov	lr, r0
 80111e0:	460d      	mov	r5, r1
 80111e2:	4628      	mov	r0, r5
 80111e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111e8:	5d37      	ldrb	r7, [r6, r4]
 80111ea:	f017 0708 	ands.w	r7, r7, #8
 80111ee:	d1f8      	bne.n	80111e2 <_strtoul_l.isra.0+0xa>
 80111f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80111f2:	d110      	bne.n	8011216 <_strtoul_l.isra.0+0x3e>
 80111f4:	782c      	ldrb	r4, [r5, #0]
 80111f6:	2701      	movs	r7, #1
 80111f8:	1c85      	adds	r5, r0, #2
 80111fa:	f033 0010 	bics.w	r0, r3, #16
 80111fe:	d115      	bne.n	801122c <_strtoul_l.isra.0+0x54>
 8011200:	2c30      	cmp	r4, #48	@ 0x30
 8011202:	d10d      	bne.n	8011220 <_strtoul_l.isra.0+0x48>
 8011204:	7828      	ldrb	r0, [r5, #0]
 8011206:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801120a:	2858      	cmp	r0, #88	@ 0x58
 801120c:	d108      	bne.n	8011220 <_strtoul_l.isra.0+0x48>
 801120e:	786c      	ldrb	r4, [r5, #1]
 8011210:	3502      	adds	r5, #2
 8011212:	2310      	movs	r3, #16
 8011214:	e00a      	b.n	801122c <_strtoul_l.isra.0+0x54>
 8011216:	2c2b      	cmp	r4, #43	@ 0x2b
 8011218:	bf04      	itt	eq
 801121a:	782c      	ldrbeq	r4, [r5, #0]
 801121c:	1c85      	addeq	r5, r0, #2
 801121e:	e7ec      	b.n	80111fa <_strtoul_l.isra.0+0x22>
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1f6      	bne.n	8011212 <_strtoul_l.isra.0+0x3a>
 8011224:	2c30      	cmp	r4, #48	@ 0x30
 8011226:	bf14      	ite	ne
 8011228:	230a      	movne	r3, #10
 801122a:	2308      	moveq	r3, #8
 801122c:	f04f 38ff 	mov.w	r8, #4294967295
 8011230:	2600      	movs	r6, #0
 8011232:	fbb8 f8f3 	udiv	r8, r8, r3
 8011236:	fb03 f908 	mul.w	r9, r3, r8
 801123a:	ea6f 0909 	mvn.w	r9, r9
 801123e:	4630      	mov	r0, r6
 8011240:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011244:	f1bc 0f09 	cmp.w	ip, #9
 8011248:	d810      	bhi.n	801126c <_strtoul_l.isra.0+0x94>
 801124a:	4664      	mov	r4, ip
 801124c:	42a3      	cmp	r3, r4
 801124e:	dd1e      	ble.n	801128e <_strtoul_l.isra.0+0xb6>
 8011250:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011254:	d007      	beq.n	8011266 <_strtoul_l.isra.0+0x8e>
 8011256:	4580      	cmp	r8, r0
 8011258:	d316      	bcc.n	8011288 <_strtoul_l.isra.0+0xb0>
 801125a:	d101      	bne.n	8011260 <_strtoul_l.isra.0+0x88>
 801125c:	45a1      	cmp	r9, r4
 801125e:	db13      	blt.n	8011288 <_strtoul_l.isra.0+0xb0>
 8011260:	fb00 4003 	mla	r0, r0, r3, r4
 8011264:	2601      	movs	r6, #1
 8011266:	f815 4b01 	ldrb.w	r4, [r5], #1
 801126a:	e7e9      	b.n	8011240 <_strtoul_l.isra.0+0x68>
 801126c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011270:	f1bc 0f19 	cmp.w	ip, #25
 8011274:	d801      	bhi.n	801127a <_strtoul_l.isra.0+0xa2>
 8011276:	3c37      	subs	r4, #55	@ 0x37
 8011278:	e7e8      	b.n	801124c <_strtoul_l.isra.0+0x74>
 801127a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801127e:	f1bc 0f19 	cmp.w	ip, #25
 8011282:	d804      	bhi.n	801128e <_strtoul_l.isra.0+0xb6>
 8011284:	3c57      	subs	r4, #87	@ 0x57
 8011286:	e7e1      	b.n	801124c <_strtoul_l.isra.0+0x74>
 8011288:	f04f 36ff 	mov.w	r6, #4294967295
 801128c:	e7eb      	b.n	8011266 <_strtoul_l.isra.0+0x8e>
 801128e:	1c73      	adds	r3, r6, #1
 8011290:	d106      	bne.n	80112a0 <_strtoul_l.isra.0+0xc8>
 8011292:	2322      	movs	r3, #34	@ 0x22
 8011294:	f8ce 3000 	str.w	r3, [lr]
 8011298:	4630      	mov	r0, r6
 801129a:	b932      	cbnz	r2, 80112aa <_strtoul_l.isra.0+0xd2>
 801129c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112a0:	b107      	cbz	r7, 80112a4 <_strtoul_l.isra.0+0xcc>
 80112a2:	4240      	negs	r0, r0
 80112a4:	2a00      	cmp	r2, #0
 80112a6:	d0f9      	beq.n	801129c <_strtoul_l.isra.0+0xc4>
 80112a8:	b106      	cbz	r6, 80112ac <_strtoul_l.isra.0+0xd4>
 80112aa:	1e69      	subs	r1, r5, #1
 80112ac:	6011      	str	r1, [r2, #0]
 80112ae:	e7f5      	b.n	801129c <_strtoul_l.isra.0+0xc4>
 80112b0:	08012791 	.word	0x08012791

080112b4 <_strtoul_r>:
 80112b4:	f7ff bf90 	b.w	80111d8 <_strtoul_l.isra.0>

080112b8 <strtoul>:
 80112b8:	4613      	mov	r3, r2
 80112ba:	460a      	mov	r2, r1
 80112bc:	4601      	mov	r1, r0
 80112be:	4802      	ldr	r0, [pc, #8]	@ (80112c8 <strtoul+0x10>)
 80112c0:	6800      	ldr	r0, [r0, #0]
 80112c2:	f7ff bf89 	b.w	80111d8 <_strtoul_l.isra.0>
 80112c6:	bf00      	nop
 80112c8:	24000110 	.word	0x24000110

080112cc <siprintf>:
 80112cc:	b40e      	push	{r1, r2, r3}
 80112ce:	b510      	push	{r4, lr}
 80112d0:	b09d      	sub	sp, #116	@ 0x74
 80112d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80112d4:	9002      	str	r0, [sp, #8]
 80112d6:	9006      	str	r0, [sp, #24]
 80112d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80112dc:	480a      	ldr	r0, [pc, #40]	@ (8011308 <siprintf+0x3c>)
 80112de:	9107      	str	r1, [sp, #28]
 80112e0:	9104      	str	r1, [sp, #16]
 80112e2:	490a      	ldr	r1, [pc, #40]	@ (801130c <siprintf+0x40>)
 80112e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e8:	9105      	str	r1, [sp, #20]
 80112ea:	2400      	movs	r4, #0
 80112ec:	a902      	add	r1, sp, #8
 80112ee:	6800      	ldr	r0, [r0, #0]
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80112f4:	f000 f9e2 	bl	80116bc <_svfiprintf_r>
 80112f8:	9b02      	ldr	r3, [sp, #8]
 80112fa:	701c      	strb	r4, [r3, #0]
 80112fc:	b01d      	add	sp, #116	@ 0x74
 80112fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011302:	b003      	add	sp, #12
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	24000110 	.word	0x24000110
 801130c:	ffff0208 	.word	0xffff0208

08011310 <siscanf>:
 8011310:	b40e      	push	{r1, r2, r3}
 8011312:	b570      	push	{r4, r5, r6, lr}
 8011314:	b09d      	sub	sp, #116	@ 0x74
 8011316:	ac21      	add	r4, sp, #132	@ 0x84
 8011318:	2500      	movs	r5, #0
 801131a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801131e:	f854 6b04 	ldr.w	r6, [r4], #4
 8011322:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011326:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011328:	9002      	str	r0, [sp, #8]
 801132a:	9006      	str	r0, [sp, #24]
 801132c:	f7ee ffd8 	bl	80002e0 <strlen>
 8011330:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <siscanf+0x50>)
 8011332:	9003      	str	r0, [sp, #12]
 8011334:	9007      	str	r0, [sp, #28]
 8011336:	480b      	ldr	r0, [pc, #44]	@ (8011364 <siscanf+0x54>)
 8011338:	930b      	str	r3, [sp, #44]	@ 0x2c
 801133a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801133e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011342:	4632      	mov	r2, r6
 8011344:	4623      	mov	r3, r4
 8011346:	a902      	add	r1, sp, #8
 8011348:	6800      	ldr	r0, [r0, #0]
 801134a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801134c:	9514      	str	r5, [sp, #80]	@ 0x50
 801134e:	9401      	str	r4, [sp, #4]
 8011350:	f000 fb0a 	bl	8011968 <__ssvfiscanf_r>
 8011354:	b01d      	add	sp, #116	@ 0x74
 8011356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801135a:	b003      	add	sp, #12
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	08011369 	.word	0x08011369
 8011364:	24000110 	.word	0x24000110

08011368 <__seofread>:
 8011368:	2000      	movs	r0, #0
 801136a:	4770      	bx	lr

0801136c <_vsiprintf_r>:
 801136c:	b510      	push	{r4, lr}
 801136e:	b09a      	sub	sp, #104	@ 0x68
 8011370:	2400      	movs	r4, #0
 8011372:	9100      	str	r1, [sp, #0]
 8011374:	9104      	str	r1, [sp, #16]
 8011376:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801137a:	9105      	str	r1, [sp, #20]
 801137c:	9102      	str	r1, [sp, #8]
 801137e:	4905      	ldr	r1, [pc, #20]	@ (8011394 <_vsiprintf_r+0x28>)
 8011380:	9103      	str	r1, [sp, #12]
 8011382:	4669      	mov	r1, sp
 8011384:	9419      	str	r4, [sp, #100]	@ 0x64
 8011386:	f000 f999 	bl	80116bc <_svfiprintf_r>
 801138a:	9b00      	ldr	r3, [sp, #0]
 801138c:	701c      	strb	r4, [r3, #0]
 801138e:	b01a      	add	sp, #104	@ 0x68
 8011390:	bd10      	pop	{r4, pc}
 8011392:	bf00      	nop
 8011394:	ffff0208 	.word	0xffff0208

08011398 <vsiprintf>:
 8011398:	4613      	mov	r3, r2
 801139a:	460a      	mov	r2, r1
 801139c:	4601      	mov	r1, r0
 801139e:	4802      	ldr	r0, [pc, #8]	@ (80113a8 <vsiprintf+0x10>)
 80113a0:	6800      	ldr	r0, [r0, #0]
 80113a2:	f7ff bfe3 	b.w	801136c <_vsiprintf_r>
 80113a6:	bf00      	nop
 80113a8:	24000110 	.word	0x24000110

080113ac <memset>:
 80113ac:	4402      	add	r2, r0
 80113ae:	4603      	mov	r3, r0
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d100      	bne.n	80113b6 <memset+0xa>
 80113b4:	4770      	bx	lr
 80113b6:	f803 1b01 	strb.w	r1, [r3], #1
 80113ba:	e7f9      	b.n	80113b0 <memset+0x4>

080113bc <__errno>:
 80113bc:	4b01      	ldr	r3, [pc, #4]	@ (80113c4 <__errno+0x8>)
 80113be:	6818      	ldr	r0, [r3, #0]
 80113c0:	4770      	bx	lr
 80113c2:	bf00      	nop
 80113c4:	24000110 	.word	0x24000110

080113c8 <__libc_init_array>:
 80113c8:	b570      	push	{r4, r5, r6, lr}
 80113ca:	4d0d      	ldr	r5, [pc, #52]	@ (8011400 <__libc_init_array+0x38>)
 80113cc:	4c0d      	ldr	r4, [pc, #52]	@ (8011404 <__libc_init_array+0x3c>)
 80113ce:	1b64      	subs	r4, r4, r5
 80113d0:	10a4      	asrs	r4, r4, #2
 80113d2:	2600      	movs	r6, #0
 80113d4:	42a6      	cmp	r6, r4
 80113d6:	d109      	bne.n	80113ec <__libc_init_array+0x24>
 80113d8:	4d0b      	ldr	r5, [pc, #44]	@ (8011408 <__libc_init_array+0x40>)
 80113da:	4c0c      	ldr	r4, [pc, #48]	@ (801140c <__libc_init_array+0x44>)
 80113dc:	f001 f872 	bl	80124c4 <_init>
 80113e0:	1b64      	subs	r4, r4, r5
 80113e2:	10a4      	asrs	r4, r4, #2
 80113e4:	2600      	movs	r6, #0
 80113e6:	42a6      	cmp	r6, r4
 80113e8:	d105      	bne.n	80113f6 <__libc_init_array+0x2e>
 80113ea:	bd70      	pop	{r4, r5, r6, pc}
 80113ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80113f0:	4798      	blx	r3
 80113f2:	3601      	adds	r6, #1
 80113f4:	e7ee      	b.n	80113d4 <__libc_init_array+0xc>
 80113f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80113fa:	4798      	blx	r3
 80113fc:	3601      	adds	r6, #1
 80113fe:	e7f2      	b.n	80113e6 <__libc_init_array+0x1e>
 8011400:	080128e8 	.word	0x080128e8
 8011404:	080128e8 	.word	0x080128e8
 8011408:	080128e8 	.word	0x080128e8
 801140c:	080128ec 	.word	0x080128ec

08011410 <__retarget_lock_acquire_recursive>:
 8011410:	4770      	bx	lr

08011412 <__retarget_lock_release_recursive>:
 8011412:	4770      	bx	lr

08011414 <_free_r>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	4605      	mov	r5, r0
 8011418:	2900      	cmp	r1, #0
 801141a:	d041      	beq.n	80114a0 <_free_r+0x8c>
 801141c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011420:	1f0c      	subs	r4, r1, #4
 8011422:	2b00      	cmp	r3, #0
 8011424:	bfb8      	it	lt
 8011426:	18e4      	addlt	r4, r4, r3
 8011428:	f000 f8e0 	bl	80115ec <__malloc_lock>
 801142c:	4a1d      	ldr	r2, [pc, #116]	@ (80114a4 <_free_r+0x90>)
 801142e:	6813      	ldr	r3, [r2, #0]
 8011430:	b933      	cbnz	r3, 8011440 <_free_r+0x2c>
 8011432:	6063      	str	r3, [r4, #4]
 8011434:	6014      	str	r4, [r2, #0]
 8011436:	4628      	mov	r0, r5
 8011438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801143c:	f000 b8dc 	b.w	80115f8 <__malloc_unlock>
 8011440:	42a3      	cmp	r3, r4
 8011442:	d908      	bls.n	8011456 <_free_r+0x42>
 8011444:	6820      	ldr	r0, [r4, #0]
 8011446:	1821      	adds	r1, r4, r0
 8011448:	428b      	cmp	r3, r1
 801144a:	bf01      	itttt	eq
 801144c:	6819      	ldreq	r1, [r3, #0]
 801144e:	685b      	ldreq	r3, [r3, #4]
 8011450:	1809      	addeq	r1, r1, r0
 8011452:	6021      	streq	r1, [r4, #0]
 8011454:	e7ed      	b.n	8011432 <_free_r+0x1e>
 8011456:	461a      	mov	r2, r3
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	b10b      	cbz	r3, 8011460 <_free_r+0x4c>
 801145c:	42a3      	cmp	r3, r4
 801145e:	d9fa      	bls.n	8011456 <_free_r+0x42>
 8011460:	6811      	ldr	r1, [r2, #0]
 8011462:	1850      	adds	r0, r2, r1
 8011464:	42a0      	cmp	r0, r4
 8011466:	d10b      	bne.n	8011480 <_free_r+0x6c>
 8011468:	6820      	ldr	r0, [r4, #0]
 801146a:	4401      	add	r1, r0
 801146c:	1850      	adds	r0, r2, r1
 801146e:	4283      	cmp	r3, r0
 8011470:	6011      	str	r1, [r2, #0]
 8011472:	d1e0      	bne.n	8011436 <_free_r+0x22>
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	6053      	str	r3, [r2, #4]
 801147a:	4408      	add	r0, r1
 801147c:	6010      	str	r0, [r2, #0]
 801147e:	e7da      	b.n	8011436 <_free_r+0x22>
 8011480:	d902      	bls.n	8011488 <_free_r+0x74>
 8011482:	230c      	movs	r3, #12
 8011484:	602b      	str	r3, [r5, #0]
 8011486:	e7d6      	b.n	8011436 <_free_r+0x22>
 8011488:	6820      	ldr	r0, [r4, #0]
 801148a:	1821      	adds	r1, r4, r0
 801148c:	428b      	cmp	r3, r1
 801148e:	bf04      	itt	eq
 8011490:	6819      	ldreq	r1, [r3, #0]
 8011492:	685b      	ldreq	r3, [r3, #4]
 8011494:	6063      	str	r3, [r4, #4]
 8011496:	bf04      	itt	eq
 8011498:	1809      	addeq	r1, r1, r0
 801149a:	6021      	streq	r1, [r4, #0]
 801149c:	6054      	str	r4, [r2, #4]
 801149e:	e7ca      	b.n	8011436 <_free_r+0x22>
 80114a0:	bd38      	pop	{r3, r4, r5, pc}
 80114a2:	bf00      	nop
 80114a4:	240032d8 	.word	0x240032d8

080114a8 <sbrk_aligned>:
 80114a8:	b570      	push	{r4, r5, r6, lr}
 80114aa:	4e0f      	ldr	r6, [pc, #60]	@ (80114e8 <sbrk_aligned+0x40>)
 80114ac:	460c      	mov	r4, r1
 80114ae:	6831      	ldr	r1, [r6, #0]
 80114b0:	4605      	mov	r5, r0
 80114b2:	b911      	cbnz	r1, 80114ba <sbrk_aligned+0x12>
 80114b4:	f000 ff36 	bl	8012324 <_sbrk_r>
 80114b8:	6030      	str	r0, [r6, #0]
 80114ba:	4621      	mov	r1, r4
 80114bc:	4628      	mov	r0, r5
 80114be:	f000 ff31 	bl	8012324 <_sbrk_r>
 80114c2:	1c43      	adds	r3, r0, #1
 80114c4:	d103      	bne.n	80114ce <sbrk_aligned+0x26>
 80114c6:	f04f 34ff 	mov.w	r4, #4294967295
 80114ca:	4620      	mov	r0, r4
 80114cc:	bd70      	pop	{r4, r5, r6, pc}
 80114ce:	1cc4      	adds	r4, r0, #3
 80114d0:	f024 0403 	bic.w	r4, r4, #3
 80114d4:	42a0      	cmp	r0, r4
 80114d6:	d0f8      	beq.n	80114ca <sbrk_aligned+0x22>
 80114d8:	1a21      	subs	r1, r4, r0
 80114da:	4628      	mov	r0, r5
 80114dc:	f000 ff22 	bl	8012324 <_sbrk_r>
 80114e0:	3001      	adds	r0, #1
 80114e2:	d1f2      	bne.n	80114ca <sbrk_aligned+0x22>
 80114e4:	e7ef      	b.n	80114c6 <sbrk_aligned+0x1e>
 80114e6:	bf00      	nop
 80114e8:	240032d4 	.word	0x240032d4

080114ec <_malloc_r>:
 80114ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114f0:	1ccd      	adds	r5, r1, #3
 80114f2:	f025 0503 	bic.w	r5, r5, #3
 80114f6:	3508      	adds	r5, #8
 80114f8:	2d0c      	cmp	r5, #12
 80114fa:	bf38      	it	cc
 80114fc:	250c      	movcc	r5, #12
 80114fe:	2d00      	cmp	r5, #0
 8011500:	4606      	mov	r6, r0
 8011502:	db01      	blt.n	8011508 <_malloc_r+0x1c>
 8011504:	42a9      	cmp	r1, r5
 8011506:	d904      	bls.n	8011512 <_malloc_r+0x26>
 8011508:	230c      	movs	r3, #12
 801150a:	6033      	str	r3, [r6, #0]
 801150c:	2000      	movs	r0, #0
 801150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80115e8 <_malloc_r+0xfc>
 8011516:	f000 f869 	bl	80115ec <__malloc_lock>
 801151a:	f8d8 3000 	ldr.w	r3, [r8]
 801151e:	461c      	mov	r4, r3
 8011520:	bb44      	cbnz	r4, 8011574 <_malloc_r+0x88>
 8011522:	4629      	mov	r1, r5
 8011524:	4630      	mov	r0, r6
 8011526:	f7ff ffbf 	bl	80114a8 <sbrk_aligned>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	4604      	mov	r4, r0
 801152e:	d158      	bne.n	80115e2 <_malloc_r+0xf6>
 8011530:	f8d8 4000 	ldr.w	r4, [r8]
 8011534:	4627      	mov	r7, r4
 8011536:	2f00      	cmp	r7, #0
 8011538:	d143      	bne.n	80115c2 <_malloc_r+0xd6>
 801153a:	2c00      	cmp	r4, #0
 801153c:	d04b      	beq.n	80115d6 <_malloc_r+0xea>
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4639      	mov	r1, r7
 8011542:	4630      	mov	r0, r6
 8011544:	eb04 0903 	add.w	r9, r4, r3
 8011548:	f000 feec 	bl	8012324 <_sbrk_r>
 801154c:	4581      	cmp	r9, r0
 801154e:	d142      	bne.n	80115d6 <_malloc_r+0xea>
 8011550:	6821      	ldr	r1, [r4, #0]
 8011552:	1a6d      	subs	r5, r5, r1
 8011554:	4629      	mov	r1, r5
 8011556:	4630      	mov	r0, r6
 8011558:	f7ff ffa6 	bl	80114a8 <sbrk_aligned>
 801155c:	3001      	adds	r0, #1
 801155e:	d03a      	beq.n	80115d6 <_malloc_r+0xea>
 8011560:	6823      	ldr	r3, [r4, #0]
 8011562:	442b      	add	r3, r5
 8011564:	6023      	str	r3, [r4, #0]
 8011566:	f8d8 3000 	ldr.w	r3, [r8]
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	bb62      	cbnz	r2, 80115c8 <_malloc_r+0xdc>
 801156e:	f8c8 7000 	str.w	r7, [r8]
 8011572:	e00f      	b.n	8011594 <_malloc_r+0xa8>
 8011574:	6822      	ldr	r2, [r4, #0]
 8011576:	1b52      	subs	r2, r2, r5
 8011578:	d420      	bmi.n	80115bc <_malloc_r+0xd0>
 801157a:	2a0b      	cmp	r2, #11
 801157c:	d917      	bls.n	80115ae <_malloc_r+0xc2>
 801157e:	1961      	adds	r1, r4, r5
 8011580:	42a3      	cmp	r3, r4
 8011582:	6025      	str	r5, [r4, #0]
 8011584:	bf18      	it	ne
 8011586:	6059      	strne	r1, [r3, #4]
 8011588:	6863      	ldr	r3, [r4, #4]
 801158a:	bf08      	it	eq
 801158c:	f8c8 1000 	streq.w	r1, [r8]
 8011590:	5162      	str	r2, [r4, r5]
 8011592:	604b      	str	r3, [r1, #4]
 8011594:	4630      	mov	r0, r6
 8011596:	f000 f82f 	bl	80115f8 <__malloc_unlock>
 801159a:	f104 000b 	add.w	r0, r4, #11
 801159e:	1d23      	adds	r3, r4, #4
 80115a0:	f020 0007 	bic.w	r0, r0, #7
 80115a4:	1ac2      	subs	r2, r0, r3
 80115a6:	bf1c      	itt	ne
 80115a8:	1a1b      	subne	r3, r3, r0
 80115aa:	50a3      	strne	r3, [r4, r2]
 80115ac:	e7af      	b.n	801150e <_malloc_r+0x22>
 80115ae:	6862      	ldr	r2, [r4, #4]
 80115b0:	42a3      	cmp	r3, r4
 80115b2:	bf0c      	ite	eq
 80115b4:	f8c8 2000 	streq.w	r2, [r8]
 80115b8:	605a      	strne	r2, [r3, #4]
 80115ba:	e7eb      	b.n	8011594 <_malloc_r+0xa8>
 80115bc:	4623      	mov	r3, r4
 80115be:	6864      	ldr	r4, [r4, #4]
 80115c0:	e7ae      	b.n	8011520 <_malloc_r+0x34>
 80115c2:	463c      	mov	r4, r7
 80115c4:	687f      	ldr	r7, [r7, #4]
 80115c6:	e7b6      	b.n	8011536 <_malloc_r+0x4a>
 80115c8:	461a      	mov	r2, r3
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	42a3      	cmp	r3, r4
 80115ce:	d1fb      	bne.n	80115c8 <_malloc_r+0xdc>
 80115d0:	2300      	movs	r3, #0
 80115d2:	6053      	str	r3, [r2, #4]
 80115d4:	e7de      	b.n	8011594 <_malloc_r+0xa8>
 80115d6:	230c      	movs	r3, #12
 80115d8:	6033      	str	r3, [r6, #0]
 80115da:	4630      	mov	r0, r6
 80115dc:	f000 f80c 	bl	80115f8 <__malloc_unlock>
 80115e0:	e794      	b.n	801150c <_malloc_r+0x20>
 80115e2:	6005      	str	r5, [r0, #0]
 80115e4:	e7d6      	b.n	8011594 <_malloc_r+0xa8>
 80115e6:	bf00      	nop
 80115e8:	240032d8 	.word	0x240032d8

080115ec <__malloc_lock>:
 80115ec:	4801      	ldr	r0, [pc, #4]	@ (80115f4 <__malloc_lock+0x8>)
 80115ee:	f7ff bf0f 	b.w	8011410 <__retarget_lock_acquire_recursive>
 80115f2:	bf00      	nop
 80115f4:	240032d0 	.word	0x240032d0

080115f8 <__malloc_unlock>:
 80115f8:	4801      	ldr	r0, [pc, #4]	@ (8011600 <__malloc_unlock+0x8>)
 80115fa:	f7ff bf0a 	b.w	8011412 <__retarget_lock_release_recursive>
 80115fe:	bf00      	nop
 8011600:	240032d0 	.word	0x240032d0

08011604 <__ssputs_r>:
 8011604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011608:	688e      	ldr	r6, [r1, #8]
 801160a:	461f      	mov	r7, r3
 801160c:	42be      	cmp	r6, r7
 801160e:	680b      	ldr	r3, [r1, #0]
 8011610:	4682      	mov	sl, r0
 8011612:	460c      	mov	r4, r1
 8011614:	4690      	mov	r8, r2
 8011616:	d82d      	bhi.n	8011674 <__ssputs_r+0x70>
 8011618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801161c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011620:	d026      	beq.n	8011670 <__ssputs_r+0x6c>
 8011622:	6965      	ldr	r5, [r4, #20]
 8011624:	6909      	ldr	r1, [r1, #16]
 8011626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801162a:	eba3 0901 	sub.w	r9, r3, r1
 801162e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011632:	1c7b      	adds	r3, r7, #1
 8011634:	444b      	add	r3, r9
 8011636:	106d      	asrs	r5, r5, #1
 8011638:	429d      	cmp	r5, r3
 801163a:	bf38      	it	cc
 801163c:	461d      	movcc	r5, r3
 801163e:	0553      	lsls	r3, r2, #21
 8011640:	d527      	bpl.n	8011692 <__ssputs_r+0x8e>
 8011642:	4629      	mov	r1, r5
 8011644:	f7ff ff52 	bl	80114ec <_malloc_r>
 8011648:	4606      	mov	r6, r0
 801164a:	b360      	cbz	r0, 80116a6 <__ssputs_r+0xa2>
 801164c:	6921      	ldr	r1, [r4, #16]
 801164e:	464a      	mov	r2, r9
 8011650:	f000 fe78 	bl	8012344 <memcpy>
 8011654:	89a3      	ldrh	r3, [r4, #12]
 8011656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801165a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801165e:	81a3      	strh	r3, [r4, #12]
 8011660:	6126      	str	r6, [r4, #16]
 8011662:	6165      	str	r5, [r4, #20]
 8011664:	444e      	add	r6, r9
 8011666:	eba5 0509 	sub.w	r5, r5, r9
 801166a:	6026      	str	r6, [r4, #0]
 801166c:	60a5      	str	r5, [r4, #8]
 801166e:	463e      	mov	r6, r7
 8011670:	42be      	cmp	r6, r7
 8011672:	d900      	bls.n	8011676 <__ssputs_r+0x72>
 8011674:	463e      	mov	r6, r7
 8011676:	6820      	ldr	r0, [r4, #0]
 8011678:	4632      	mov	r2, r6
 801167a:	4641      	mov	r1, r8
 801167c:	f000 fe37 	bl	80122ee <memmove>
 8011680:	68a3      	ldr	r3, [r4, #8]
 8011682:	1b9b      	subs	r3, r3, r6
 8011684:	60a3      	str	r3, [r4, #8]
 8011686:	6823      	ldr	r3, [r4, #0]
 8011688:	4433      	add	r3, r6
 801168a:	6023      	str	r3, [r4, #0]
 801168c:	2000      	movs	r0, #0
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	462a      	mov	r2, r5
 8011694:	f000 fe64 	bl	8012360 <_realloc_r>
 8011698:	4606      	mov	r6, r0
 801169a:	2800      	cmp	r0, #0
 801169c:	d1e0      	bne.n	8011660 <__ssputs_r+0x5c>
 801169e:	6921      	ldr	r1, [r4, #16]
 80116a0:	4650      	mov	r0, sl
 80116a2:	f7ff feb7 	bl	8011414 <_free_r>
 80116a6:	230c      	movs	r3, #12
 80116a8:	f8ca 3000 	str.w	r3, [sl]
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	f04f 30ff 	mov.w	r0, #4294967295
 80116b8:	e7e9      	b.n	801168e <__ssputs_r+0x8a>
	...

080116bc <_svfiprintf_r>:
 80116bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c0:	4698      	mov	r8, r3
 80116c2:	898b      	ldrh	r3, [r1, #12]
 80116c4:	061b      	lsls	r3, r3, #24
 80116c6:	b09d      	sub	sp, #116	@ 0x74
 80116c8:	4607      	mov	r7, r0
 80116ca:	460d      	mov	r5, r1
 80116cc:	4614      	mov	r4, r2
 80116ce:	d510      	bpl.n	80116f2 <_svfiprintf_r+0x36>
 80116d0:	690b      	ldr	r3, [r1, #16]
 80116d2:	b973      	cbnz	r3, 80116f2 <_svfiprintf_r+0x36>
 80116d4:	2140      	movs	r1, #64	@ 0x40
 80116d6:	f7ff ff09 	bl	80114ec <_malloc_r>
 80116da:	6028      	str	r0, [r5, #0]
 80116dc:	6128      	str	r0, [r5, #16]
 80116de:	b930      	cbnz	r0, 80116ee <_svfiprintf_r+0x32>
 80116e0:	230c      	movs	r3, #12
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	f04f 30ff 	mov.w	r0, #4294967295
 80116e8:	b01d      	add	sp, #116	@ 0x74
 80116ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ee:	2340      	movs	r3, #64	@ 0x40
 80116f0:	616b      	str	r3, [r5, #20]
 80116f2:	2300      	movs	r3, #0
 80116f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80116f6:	2320      	movs	r3, #32
 80116f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80116fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011700:	2330      	movs	r3, #48	@ 0x30
 8011702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80118a0 <_svfiprintf_r+0x1e4>
 8011706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801170a:	f04f 0901 	mov.w	r9, #1
 801170e:	4623      	mov	r3, r4
 8011710:	469a      	mov	sl, r3
 8011712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011716:	b10a      	cbz	r2, 801171c <_svfiprintf_r+0x60>
 8011718:	2a25      	cmp	r2, #37	@ 0x25
 801171a:	d1f9      	bne.n	8011710 <_svfiprintf_r+0x54>
 801171c:	ebba 0b04 	subs.w	fp, sl, r4
 8011720:	d00b      	beq.n	801173a <_svfiprintf_r+0x7e>
 8011722:	465b      	mov	r3, fp
 8011724:	4622      	mov	r2, r4
 8011726:	4629      	mov	r1, r5
 8011728:	4638      	mov	r0, r7
 801172a:	f7ff ff6b 	bl	8011604 <__ssputs_r>
 801172e:	3001      	adds	r0, #1
 8011730:	f000 80a7 	beq.w	8011882 <_svfiprintf_r+0x1c6>
 8011734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011736:	445a      	add	r2, fp
 8011738:	9209      	str	r2, [sp, #36]	@ 0x24
 801173a:	f89a 3000 	ldrb.w	r3, [sl]
 801173e:	2b00      	cmp	r3, #0
 8011740:	f000 809f 	beq.w	8011882 <_svfiprintf_r+0x1c6>
 8011744:	2300      	movs	r3, #0
 8011746:	f04f 32ff 	mov.w	r2, #4294967295
 801174a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801174e:	f10a 0a01 	add.w	sl, sl, #1
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	9307      	str	r3, [sp, #28]
 8011756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801175a:	931a      	str	r3, [sp, #104]	@ 0x68
 801175c:	4654      	mov	r4, sl
 801175e:	2205      	movs	r2, #5
 8011760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011764:	484e      	ldr	r0, [pc, #312]	@ (80118a0 <_svfiprintf_r+0x1e4>)
 8011766:	f7ee fdc3 	bl	80002f0 <memchr>
 801176a:	9a04      	ldr	r2, [sp, #16]
 801176c:	b9d8      	cbnz	r0, 80117a6 <_svfiprintf_r+0xea>
 801176e:	06d0      	lsls	r0, r2, #27
 8011770:	bf44      	itt	mi
 8011772:	2320      	movmi	r3, #32
 8011774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011778:	0711      	lsls	r1, r2, #28
 801177a:	bf44      	itt	mi
 801177c:	232b      	movmi	r3, #43	@ 0x2b
 801177e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011782:	f89a 3000 	ldrb.w	r3, [sl]
 8011786:	2b2a      	cmp	r3, #42	@ 0x2a
 8011788:	d015      	beq.n	80117b6 <_svfiprintf_r+0xfa>
 801178a:	9a07      	ldr	r2, [sp, #28]
 801178c:	4654      	mov	r4, sl
 801178e:	2000      	movs	r0, #0
 8011790:	f04f 0c0a 	mov.w	ip, #10
 8011794:	4621      	mov	r1, r4
 8011796:	f811 3b01 	ldrb.w	r3, [r1], #1
 801179a:	3b30      	subs	r3, #48	@ 0x30
 801179c:	2b09      	cmp	r3, #9
 801179e:	d94b      	bls.n	8011838 <_svfiprintf_r+0x17c>
 80117a0:	b1b0      	cbz	r0, 80117d0 <_svfiprintf_r+0x114>
 80117a2:	9207      	str	r2, [sp, #28]
 80117a4:	e014      	b.n	80117d0 <_svfiprintf_r+0x114>
 80117a6:	eba0 0308 	sub.w	r3, r0, r8
 80117aa:	fa09 f303 	lsl.w	r3, r9, r3
 80117ae:	4313      	orrs	r3, r2
 80117b0:	9304      	str	r3, [sp, #16]
 80117b2:	46a2      	mov	sl, r4
 80117b4:	e7d2      	b.n	801175c <_svfiprintf_r+0xa0>
 80117b6:	9b03      	ldr	r3, [sp, #12]
 80117b8:	1d19      	adds	r1, r3, #4
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	9103      	str	r1, [sp, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bfbb      	ittet	lt
 80117c2:	425b      	neglt	r3, r3
 80117c4:	f042 0202 	orrlt.w	r2, r2, #2
 80117c8:	9307      	strge	r3, [sp, #28]
 80117ca:	9307      	strlt	r3, [sp, #28]
 80117cc:	bfb8      	it	lt
 80117ce:	9204      	strlt	r2, [sp, #16]
 80117d0:	7823      	ldrb	r3, [r4, #0]
 80117d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80117d4:	d10a      	bne.n	80117ec <_svfiprintf_r+0x130>
 80117d6:	7863      	ldrb	r3, [r4, #1]
 80117d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80117da:	d132      	bne.n	8011842 <_svfiprintf_r+0x186>
 80117dc:	9b03      	ldr	r3, [sp, #12]
 80117de:	1d1a      	adds	r2, r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	9203      	str	r2, [sp, #12]
 80117e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80117e8:	3402      	adds	r4, #2
 80117ea:	9305      	str	r3, [sp, #20]
 80117ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80118b0 <_svfiprintf_r+0x1f4>
 80117f0:	7821      	ldrb	r1, [r4, #0]
 80117f2:	2203      	movs	r2, #3
 80117f4:	4650      	mov	r0, sl
 80117f6:	f7ee fd7b 	bl	80002f0 <memchr>
 80117fa:	b138      	cbz	r0, 801180c <_svfiprintf_r+0x150>
 80117fc:	9b04      	ldr	r3, [sp, #16]
 80117fe:	eba0 000a 	sub.w	r0, r0, sl
 8011802:	2240      	movs	r2, #64	@ 0x40
 8011804:	4082      	lsls	r2, r0
 8011806:	4313      	orrs	r3, r2
 8011808:	3401      	adds	r4, #1
 801180a:	9304      	str	r3, [sp, #16]
 801180c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011810:	4824      	ldr	r0, [pc, #144]	@ (80118a4 <_svfiprintf_r+0x1e8>)
 8011812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011816:	2206      	movs	r2, #6
 8011818:	f7ee fd6a 	bl	80002f0 <memchr>
 801181c:	2800      	cmp	r0, #0
 801181e:	d036      	beq.n	801188e <_svfiprintf_r+0x1d2>
 8011820:	4b21      	ldr	r3, [pc, #132]	@ (80118a8 <_svfiprintf_r+0x1ec>)
 8011822:	bb1b      	cbnz	r3, 801186c <_svfiprintf_r+0x1b0>
 8011824:	9b03      	ldr	r3, [sp, #12]
 8011826:	3307      	adds	r3, #7
 8011828:	f023 0307 	bic.w	r3, r3, #7
 801182c:	3308      	adds	r3, #8
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011832:	4433      	add	r3, r6
 8011834:	9309      	str	r3, [sp, #36]	@ 0x24
 8011836:	e76a      	b.n	801170e <_svfiprintf_r+0x52>
 8011838:	fb0c 3202 	mla	r2, ip, r2, r3
 801183c:	460c      	mov	r4, r1
 801183e:	2001      	movs	r0, #1
 8011840:	e7a8      	b.n	8011794 <_svfiprintf_r+0xd8>
 8011842:	2300      	movs	r3, #0
 8011844:	3401      	adds	r4, #1
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	4619      	mov	r1, r3
 801184a:	f04f 0c0a 	mov.w	ip, #10
 801184e:	4620      	mov	r0, r4
 8011850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011854:	3a30      	subs	r2, #48	@ 0x30
 8011856:	2a09      	cmp	r2, #9
 8011858:	d903      	bls.n	8011862 <_svfiprintf_r+0x1a6>
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0c6      	beq.n	80117ec <_svfiprintf_r+0x130>
 801185e:	9105      	str	r1, [sp, #20]
 8011860:	e7c4      	b.n	80117ec <_svfiprintf_r+0x130>
 8011862:	fb0c 2101 	mla	r1, ip, r1, r2
 8011866:	4604      	mov	r4, r0
 8011868:	2301      	movs	r3, #1
 801186a:	e7f0      	b.n	801184e <_svfiprintf_r+0x192>
 801186c:	ab03      	add	r3, sp, #12
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	462a      	mov	r2, r5
 8011872:	4b0e      	ldr	r3, [pc, #56]	@ (80118ac <_svfiprintf_r+0x1f0>)
 8011874:	a904      	add	r1, sp, #16
 8011876:	4638      	mov	r0, r7
 8011878:	f3af 8000 	nop.w
 801187c:	1c42      	adds	r2, r0, #1
 801187e:	4606      	mov	r6, r0
 8011880:	d1d6      	bne.n	8011830 <_svfiprintf_r+0x174>
 8011882:	89ab      	ldrh	r3, [r5, #12]
 8011884:	065b      	lsls	r3, r3, #25
 8011886:	f53f af2d 	bmi.w	80116e4 <_svfiprintf_r+0x28>
 801188a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801188c:	e72c      	b.n	80116e8 <_svfiprintf_r+0x2c>
 801188e:	ab03      	add	r3, sp, #12
 8011890:	9300      	str	r3, [sp, #0]
 8011892:	462a      	mov	r2, r5
 8011894:	4b05      	ldr	r3, [pc, #20]	@ (80118ac <_svfiprintf_r+0x1f0>)
 8011896:	a904      	add	r1, sp, #16
 8011898:	4638      	mov	r0, r7
 801189a:	f000 fa49 	bl	8011d30 <_printf_i>
 801189e:	e7ed      	b.n	801187c <_svfiprintf_r+0x1c0>
 80118a0:	08012891 	.word	0x08012891
 80118a4:	0801289b 	.word	0x0801289b
 80118a8:	00000000 	.word	0x00000000
 80118ac:	08011605 	.word	0x08011605
 80118b0:	08012897 	.word	0x08012897

080118b4 <_sungetc_r>:
 80118b4:	b538      	push	{r3, r4, r5, lr}
 80118b6:	1c4b      	adds	r3, r1, #1
 80118b8:	4614      	mov	r4, r2
 80118ba:	d103      	bne.n	80118c4 <_sungetc_r+0x10>
 80118bc:	f04f 35ff 	mov.w	r5, #4294967295
 80118c0:	4628      	mov	r0, r5
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	8993      	ldrh	r3, [r2, #12]
 80118c6:	f023 0320 	bic.w	r3, r3, #32
 80118ca:	8193      	strh	r3, [r2, #12]
 80118cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118ce:	6852      	ldr	r2, [r2, #4]
 80118d0:	b2cd      	uxtb	r5, r1
 80118d2:	b18b      	cbz	r3, 80118f8 <_sungetc_r+0x44>
 80118d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80118d6:	4293      	cmp	r3, r2
 80118d8:	dd08      	ble.n	80118ec <_sungetc_r+0x38>
 80118da:	6823      	ldr	r3, [r4, #0]
 80118dc:	1e5a      	subs	r2, r3, #1
 80118de:	6022      	str	r2, [r4, #0]
 80118e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80118e4:	6863      	ldr	r3, [r4, #4]
 80118e6:	3301      	adds	r3, #1
 80118e8:	6063      	str	r3, [r4, #4]
 80118ea:	e7e9      	b.n	80118c0 <_sungetc_r+0xc>
 80118ec:	4621      	mov	r1, r4
 80118ee:	f000 fcc4 	bl	801227a <__submore>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d0f1      	beq.n	80118da <_sungetc_r+0x26>
 80118f6:	e7e1      	b.n	80118bc <_sungetc_r+0x8>
 80118f8:	6921      	ldr	r1, [r4, #16]
 80118fa:	6823      	ldr	r3, [r4, #0]
 80118fc:	b151      	cbz	r1, 8011914 <_sungetc_r+0x60>
 80118fe:	4299      	cmp	r1, r3
 8011900:	d208      	bcs.n	8011914 <_sungetc_r+0x60>
 8011902:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011906:	42a9      	cmp	r1, r5
 8011908:	d104      	bne.n	8011914 <_sungetc_r+0x60>
 801190a:	3b01      	subs	r3, #1
 801190c:	3201      	adds	r2, #1
 801190e:	6023      	str	r3, [r4, #0]
 8011910:	6062      	str	r2, [r4, #4]
 8011912:	e7d5      	b.n	80118c0 <_sungetc_r+0xc>
 8011914:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801191c:	6363      	str	r3, [r4, #52]	@ 0x34
 801191e:	2303      	movs	r3, #3
 8011920:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011922:	4623      	mov	r3, r4
 8011924:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	2301      	movs	r3, #1
 801192c:	e7dc      	b.n	80118e8 <_sungetc_r+0x34>

0801192e <__ssrefill_r>:
 801192e:	b510      	push	{r4, lr}
 8011930:	460c      	mov	r4, r1
 8011932:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011934:	b169      	cbz	r1, 8011952 <__ssrefill_r+0x24>
 8011936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801193a:	4299      	cmp	r1, r3
 801193c:	d001      	beq.n	8011942 <__ssrefill_r+0x14>
 801193e:	f7ff fd69 	bl	8011414 <_free_r>
 8011942:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011944:	6063      	str	r3, [r4, #4]
 8011946:	2000      	movs	r0, #0
 8011948:	6360      	str	r0, [r4, #52]	@ 0x34
 801194a:	b113      	cbz	r3, 8011952 <__ssrefill_r+0x24>
 801194c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801194e:	6023      	str	r3, [r4, #0]
 8011950:	bd10      	pop	{r4, pc}
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	2300      	movs	r3, #0
 8011958:	6063      	str	r3, [r4, #4]
 801195a:	89a3      	ldrh	r3, [r4, #12]
 801195c:	f043 0320 	orr.w	r3, r3, #32
 8011960:	81a3      	strh	r3, [r4, #12]
 8011962:	f04f 30ff 	mov.w	r0, #4294967295
 8011966:	e7f3      	b.n	8011950 <__ssrefill_r+0x22>

08011968 <__ssvfiscanf_r>:
 8011968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196c:	460c      	mov	r4, r1
 801196e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011972:	2100      	movs	r1, #0
 8011974:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011978:	49a6      	ldr	r1, [pc, #664]	@ (8011c14 <__ssvfiscanf_r+0x2ac>)
 801197a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801197c:	f10d 0804 	add.w	r8, sp, #4
 8011980:	49a5      	ldr	r1, [pc, #660]	@ (8011c18 <__ssvfiscanf_r+0x2b0>)
 8011982:	4fa6      	ldr	r7, [pc, #664]	@ (8011c1c <__ssvfiscanf_r+0x2b4>)
 8011984:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011988:	4606      	mov	r6, r0
 801198a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	f892 9000 	ldrb.w	r9, [r2]
 8011992:	f1b9 0f00 	cmp.w	r9, #0
 8011996:	f000 8158 	beq.w	8011c4a <__ssvfiscanf_r+0x2e2>
 801199a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801199e:	f013 0308 	ands.w	r3, r3, #8
 80119a2:	f102 0501 	add.w	r5, r2, #1
 80119a6:	d019      	beq.n	80119dc <__ssvfiscanf_r+0x74>
 80119a8:	6863      	ldr	r3, [r4, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dd0f      	ble.n	80119ce <__ssvfiscanf_r+0x66>
 80119ae:	6823      	ldr	r3, [r4, #0]
 80119b0:	781a      	ldrb	r2, [r3, #0]
 80119b2:	5cba      	ldrb	r2, [r7, r2]
 80119b4:	0712      	lsls	r2, r2, #28
 80119b6:	d401      	bmi.n	80119bc <__ssvfiscanf_r+0x54>
 80119b8:	462a      	mov	r2, r5
 80119ba:	e7e8      	b.n	801198e <__ssvfiscanf_r+0x26>
 80119bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80119be:	3201      	adds	r2, #1
 80119c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80119c2:	6862      	ldr	r2, [r4, #4]
 80119c4:	3301      	adds	r3, #1
 80119c6:	3a01      	subs	r2, #1
 80119c8:	6062      	str	r2, [r4, #4]
 80119ca:	6023      	str	r3, [r4, #0]
 80119cc:	e7ec      	b.n	80119a8 <__ssvfiscanf_r+0x40>
 80119ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80119d0:	4621      	mov	r1, r4
 80119d2:	4630      	mov	r0, r6
 80119d4:	4798      	blx	r3
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d0e9      	beq.n	80119ae <__ssvfiscanf_r+0x46>
 80119da:	e7ed      	b.n	80119b8 <__ssvfiscanf_r+0x50>
 80119dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80119e0:	f040 8085 	bne.w	8011aee <__ssvfiscanf_r+0x186>
 80119e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80119e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80119e8:	7853      	ldrb	r3, [r2, #1]
 80119ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80119ec:	bf02      	ittt	eq
 80119ee:	2310      	moveq	r3, #16
 80119f0:	1c95      	addeq	r5, r2, #2
 80119f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80119f4:	220a      	movs	r2, #10
 80119f6:	46aa      	mov	sl, r5
 80119f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80119fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011a00:	2b09      	cmp	r3, #9
 8011a02:	d91e      	bls.n	8011a42 <__ssvfiscanf_r+0xda>
 8011a04:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011c20 <__ssvfiscanf_r+0x2b8>
 8011a08:	2203      	movs	r2, #3
 8011a0a:	4658      	mov	r0, fp
 8011a0c:	f7ee fc70 	bl	80002f0 <memchr>
 8011a10:	b138      	cbz	r0, 8011a22 <__ssvfiscanf_r+0xba>
 8011a12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011a14:	eba0 000b 	sub.w	r0, r0, fp
 8011a18:	2301      	movs	r3, #1
 8011a1a:	4083      	lsls	r3, r0
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011a20:	4655      	mov	r5, sl
 8011a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011a26:	2b78      	cmp	r3, #120	@ 0x78
 8011a28:	d806      	bhi.n	8011a38 <__ssvfiscanf_r+0xd0>
 8011a2a:	2b57      	cmp	r3, #87	@ 0x57
 8011a2c:	d810      	bhi.n	8011a50 <__ssvfiscanf_r+0xe8>
 8011a2e:	2b25      	cmp	r3, #37	@ 0x25
 8011a30:	d05d      	beq.n	8011aee <__ssvfiscanf_r+0x186>
 8011a32:	d857      	bhi.n	8011ae4 <__ssvfiscanf_r+0x17c>
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d075      	beq.n	8011b24 <__ssvfiscanf_r+0x1bc>
 8011a38:	2303      	movs	r3, #3
 8011a3a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011a3c:	230a      	movs	r3, #10
 8011a3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011a40:	e088      	b.n	8011b54 <__ssvfiscanf_r+0x1ec>
 8011a42:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011a44:	fb02 1103 	mla	r1, r2, r3, r1
 8011a48:	3930      	subs	r1, #48	@ 0x30
 8011a4a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011a4c:	4655      	mov	r5, sl
 8011a4e:	e7d2      	b.n	80119f6 <__ssvfiscanf_r+0x8e>
 8011a50:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011a54:	2a20      	cmp	r2, #32
 8011a56:	d8ef      	bhi.n	8011a38 <__ssvfiscanf_r+0xd0>
 8011a58:	a101      	add	r1, pc, #4	@ (adr r1, 8011a60 <__ssvfiscanf_r+0xf8>)
 8011a5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011a5e:	bf00      	nop
 8011a60:	08011b33 	.word	0x08011b33
 8011a64:	08011a39 	.word	0x08011a39
 8011a68:	08011a39 	.word	0x08011a39
 8011a6c:	08011b8d 	.word	0x08011b8d
 8011a70:	08011a39 	.word	0x08011a39
 8011a74:	08011a39 	.word	0x08011a39
 8011a78:	08011a39 	.word	0x08011a39
 8011a7c:	08011a39 	.word	0x08011a39
 8011a80:	08011a39 	.word	0x08011a39
 8011a84:	08011a39 	.word	0x08011a39
 8011a88:	08011a39 	.word	0x08011a39
 8011a8c:	08011ba3 	.word	0x08011ba3
 8011a90:	08011b89 	.word	0x08011b89
 8011a94:	08011aeb 	.word	0x08011aeb
 8011a98:	08011aeb 	.word	0x08011aeb
 8011a9c:	08011aeb 	.word	0x08011aeb
 8011aa0:	08011a39 	.word	0x08011a39
 8011aa4:	08011b45 	.word	0x08011b45
 8011aa8:	08011a39 	.word	0x08011a39
 8011aac:	08011a39 	.word	0x08011a39
 8011ab0:	08011a39 	.word	0x08011a39
 8011ab4:	08011a39 	.word	0x08011a39
 8011ab8:	08011bb3 	.word	0x08011bb3
 8011abc:	08011b4d 	.word	0x08011b4d
 8011ac0:	08011b2b 	.word	0x08011b2b
 8011ac4:	08011a39 	.word	0x08011a39
 8011ac8:	08011a39 	.word	0x08011a39
 8011acc:	08011baf 	.word	0x08011baf
 8011ad0:	08011a39 	.word	0x08011a39
 8011ad4:	08011b89 	.word	0x08011b89
 8011ad8:	08011a39 	.word	0x08011a39
 8011adc:	08011a39 	.word	0x08011a39
 8011ae0:	08011b33 	.word	0x08011b33
 8011ae4:	3b45      	subs	r3, #69	@ 0x45
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	d8a6      	bhi.n	8011a38 <__ssvfiscanf_r+0xd0>
 8011aea:	2305      	movs	r3, #5
 8011aec:	e031      	b.n	8011b52 <__ssvfiscanf_r+0x1ea>
 8011aee:	6863      	ldr	r3, [r4, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dd0d      	ble.n	8011b10 <__ssvfiscanf_r+0x1a8>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	781a      	ldrb	r2, [r3, #0]
 8011af8:	454a      	cmp	r2, r9
 8011afa:	f040 80a6 	bne.w	8011c4a <__ssvfiscanf_r+0x2e2>
 8011afe:	3301      	adds	r3, #1
 8011b00:	6862      	ldr	r2, [r4, #4]
 8011b02:	6023      	str	r3, [r4, #0]
 8011b04:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011b06:	3a01      	subs	r2, #1
 8011b08:	3301      	adds	r3, #1
 8011b0a:	6062      	str	r2, [r4, #4]
 8011b0c:	9345      	str	r3, [sp, #276]	@ 0x114
 8011b0e:	e753      	b.n	80119b8 <__ssvfiscanf_r+0x50>
 8011b10:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011b12:	4621      	mov	r1, r4
 8011b14:	4630      	mov	r0, r6
 8011b16:	4798      	blx	r3
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d0eb      	beq.n	8011af4 <__ssvfiscanf_r+0x18c>
 8011b1c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	f040 808b 	bne.w	8011c3a <__ssvfiscanf_r+0x2d2>
 8011b24:	f04f 30ff 	mov.w	r0, #4294967295
 8011b28:	e08b      	b.n	8011c42 <__ssvfiscanf_r+0x2da>
 8011b2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b2c:	f042 0220 	orr.w	r2, r2, #32
 8011b30:	9241      	str	r2, [sp, #260]	@ 0x104
 8011b32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b38:	9241      	str	r2, [sp, #260]	@ 0x104
 8011b3a:	2210      	movs	r2, #16
 8011b3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8011b3e:	9242      	str	r2, [sp, #264]	@ 0x108
 8011b40:	d902      	bls.n	8011b48 <__ssvfiscanf_r+0x1e0>
 8011b42:	e005      	b.n	8011b50 <__ssvfiscanf_r+0x1e8>
 8011b44:	2300      	movs	r3, #0
 8011b46:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b48:	2303      	movs	r3, #3
 8011b4a:	e002      	b.n	8011b52 <__ssvfiscanf_r+0x1ea>
 8011b4c:	2308      	movs	r3, #8
 8011b4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b50:	2304      	movs	r3, #4
 8011b52:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b54:	6863      	ldr	r3, [r4, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dd39      	ble.n	8011bce <__ssvfiscanf_r+0x266>
 8011b5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b5c:	0659      	lsls	r1, r3, #25
 8011b5e:	d404      	bmi.n	8011b6a <__ssvfiscanf_r+0x202>
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	781a      	ldrb	r2, [r3, #0]
 8011b64:	5cba      	ldrb	r2, [r7, r2]
 8011b66:	0712      	lsls	r2, r2, #28
 8011b68:	d438      	bmi.n	8011bdc <__ssvfiscanf_r+0x274>
 8011b6a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	dc47      	bgt.n	8011c00 <__ssvfiscanf_r+0x298>
 8011b70:	466b      	mov	r3, sp
 8011b72:	4622      	mov	r2, r4
 8011b74:	a941      	add	r1, sp, #260	@ 0x104
 8011b76:	4630      	mov	r0, r6
 8011b78:	f000 f9f8 	bl	8011f6c <_scanf_chars>
 8011b7c:	2801      	cmp	r0, #1
 8011b7e:	d064      	beq.n	8011c4a <__ssvfiscanf_r+0x2e2>
 8011b80:	2802      	cmp	r0, #2
 8011b82:	f47f af19 	bne.w	80119b8 <__ssvfiscanf_r+0x50>
 8011b86:	e7c9      	b.n	8011b1c <__ssvfiscanf_r+0x1b4>
 8011b88:	220a      	movs	r2, #10
 8011b8a:	e7d7      	b.n	8011b3c <__ssvfiscanf_r+0x1d4>
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	4640      	mov	r0, r8
 8011b90:	f000 fb3a 	bl	8012208 <__sccl>
 8011b94:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b9a:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e7d7      	b.n	8011b52 <__ssvfiscanf_r+0x1ea>
 8011ba2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ba8:	9341      	str	r3, [sp, #260]	@ 0x104
 8011baa:	2300      	movs	r3, #0
 8011bac:	e7d1      	b.n	8011b52 <__ssvfiscanf_r+0x1ea>
 8011bae:	2302      	movs	r3, #2
 8011bb0:	e7cf      	b.n	8011b52 <__ssvfiscanf_r+0x1ea>
 8011bb2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011bb4:	06c3      	lsls	r3, r0, #27
 8011bb6:	f53f aeff 	bmi.w	80119b8 <__ssvfiscanf_r+0x50>
 8011bba:	9b00      	ldr	r3, [sp, #0]
 8011bbc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011bbe:	1d19      	adds	r1, r3, #4
 8011bc0:	9100      	str	r1, [sp, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	07c0      	lsls	r0, r0, #31
 8011bc6:	bf4c      	ite	mi
 8011bc8:	801a      	strhmi	r2, [r3, #0]
 8011bca:	601a      	strpl	r2, [r3, #0]
 8011bcc:	e6f4      	b.n	80119b8 <__ssvfiscanf_r+0x50>
 8011bce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011bd0:	4621      	mov	r1, r4
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	4798      	blx	r3
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d0bf      	beq.n	8011b5a <__ssvfiscanf_r+0x1f2>
 8011bda:	e79f      	b.n	8011b1c <__ssvfiscanf_r+0x1b4>
 8011bdc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011bde:	3201      	adds	r2, #1
 8011be0:	9245      	str	r2, [sp, #276]	@ 0x114
 8011be2:	6862      	ldr	r2, [r4, #4]
 8011be4:	3a01      	subs	r2, #1
 8011be6:	2a00      	cmp	r2, #0
 8011be8:	6062      	str	r2, [r4, #4]
 8011bea:	dd02      	ble.n	8011bf2 <__ssvfiscanf_r+0x28a>
 8011bec:	3301      	adds	r3, #1
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	e7b6      	b.n	8011b60 <__ssvfiscanf_r+0x1f8>
 8011bf2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	4798      	blx	r3
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d0b0      	beq.n	8011b60 <__ssvfiscanf_r+0x1f8>
 8011bfe:	e78d      	b.n	8011b1c <__ssvfiscanf_r+0x1b4>
 8011c00:	2b04      	cmp	r3, #4
 8011c02:	dc0f      	bgt.n	8011c24 <__ssvfiscanf_r+0x2bc>
 8011c04:	466b      	mov	r3, sp
 8011c06:	4622      	mov	r2, r4
 8011c08:	a941      	add	r1, sp, #260	@ 0x104
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f000 fa08 	bl	8012020 <_scanf_i>
 8011c10:	e7b4      	b.n	8011b7c <__ssvfiscanf_r+0x214>
 8011c12:	bf00      	nop
 8011c14:	080118b5 	.word	0x080118b5
 8011c18:	0801192f 	.word	0x0801192f
 8011c1c:	08012791 	.word	0x08012791
 8011c20:	08012897 	.word	0x08012897
 8011c24:	4b0a      	ldr	r3, [pc, #40]	@ (8011c50 <__ssvfiscanf_r+0x2e8>)
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	f43f aec6 	beq.w	80119b8 <__ssvfiscanf_r+0x50>
 8011c2c:	466b      	mov	r3, sp
 8011c2e:	4622      	mov	r2, r4
 8011c30:	a941      	add	r1, sp, #260	@ 0x104
 8011c32:	4630      	mov	r0, r6
 8011c34:	f3af 8000 	nop.w
 8011c38:	e7a0      	b.n	8011b7c <__ssvfiscanf_r+0x214>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	065b      	lsls	r3, r3, #25
 8011c3e:	f53f af71 	bmi.w	8011b24 <__ssvfiscanf_r+0x1bc>
 8011c42:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c4c:	e7f9      	b.n	8011c42 <__ssvfiscanf_r+0x2da>
 8011c4e:	bf00      	nop
 8011c50:	00000000 	.word	0x00000000

08011c54 <_printf_common>:
 8011c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c58:	4616      	mov	r6, r2
 8011c5a:	4698      	mov	r8, r3
 8011c5c:	688a      	ldr	r2, [r1, #8]
 8011c5e:	690b      	ldr	r3, [r1, #16]
 8011c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c64:	4293      	cmp	r3, r2
 8011c66:	bfb8      	it	lt
 8011c68:	4613      	movlt	r3, r2
 8011c6a:	6033      	str	r3, [r6, #0]
 8011c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c70:	4607      	mov	r7, r0
 8011c72:	460c      	mov	r4, r1
 8011c74:	b10a      	cbz	r2, 8011c7a <_printf_common+0x26>
 8011c76:	3301      	adds	r3, #1
 8011c78:	6033      	str	r3, [r6, #0]
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	0699      	lsls	r1, r3, #26
 8011c7e:	bf42      	ittt	mi
 8011c80:	6833      	ldrmi	r3, [r6, #0]
 8011c82:	3302      	addmi	r3, #2
 8011c84:	6033      	strmi	r3, [r6, #0]
 8011c86:	6825      	ldr	r5, [r4, #0]
 8011c88:	f015 0506 	ands.w	r5, r5, #6
 8011c8c:	d106      	bne.n	8011c9c <_printf_common+0x48>
 8011c8e:	f104 0a19 	add.w	sl, r4, #25
 8011c92:	68e3      	ldr	r3, [r4, #12]
 8011c94:	6832      	ldr	r2, [r6, #0]
 8011c96:	1a9b      	subs	r3, r3, r2
 8011c98:	42ab      	cmp	r3, r5
 8011c9a:	dc26      	bgt.n	8011cea <_printf_common+0x96>
 8011c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ca0:	6822      	ldr	r2, [r4, #0]
 8011ca2:	3b00      	subs	r3, #0
 8011ca4:	bf18      	it	ne
 8011ca6:	2301      	movne	r3, #1
 8011ca8:	0692      	lsls	r2, r2, #26
 8011caa:	d42b      	bmi.n	8011d04 <_printf_common+0xb0>
 8011cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011cb0:	4641      	mov	r1, r8
 8011cb2:	4638      	mov	r0, r7
 8011cb4:	47c8      	blx	r9
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	d01e      	beq.n	8011cf8 <_printf_common+0xa4>
 8011cba:	6823      	ldr	r3, [r4, #0]
 8011cbc:	6922      	ldr	r2, [r4, #16]
 8011cbe:	f003 0306 	and.w	r3, r3, #6
 8011cc2:	2b04      	cmp	r3, #4
 8011cc4:	bf02      	ittt	eq
 8011cc6:	68e5      	ldreq	r5, [r4, #12]
 8011cc8:	6833      	ldreq	r3, [r6, #0]
 8011cca:	1aed      	subeq	r5, r5, r3
 8011ccc:	68a3      	ldr	r3, [r4, #8]
 8011cce:	bf0c      	ite	eq
 8011cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cd4:	2500      	movne	r5, #0
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	bfc4      	itt	gt
 8011cda:	1a9b      	subgt	r3, r3, r2
 8011cdc:	18ed      	addgt	r5, r5, r3
 8011cde:	2600      	movs	r6, #0
 8011ce0:	341a      	adds	r4, #26
 8011ce2:	42b5      	cmp	r5, r6
 8011ce4:	d11a      	bne.n	8011d1c <_printf_common+0xc8>
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	e008      	b.n	8011cfc <_printf_common+0xa8>
 8011cea:	2301      	movs	r3, #1
 8011cec:	4652      	mov	r2, sl
 8011cee:	4641      	mov	r1, r8
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	47c8      	blx	r9
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d103      	bne.n	8011d00 <_printf_common+0xac>
 8011cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d00:	3501      	adds	r5, #1
 8011d02:	e7c6      	b.n	8011c92 <_printf_common+0x3e>
 8011d04:	18e1      	adds	r1, r4, r3
 8011d06:	1c5a      	adds	r2, r3, #1
 8011d08:	2030      	movs	r0, #48	@ 0x30
 8011d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011d0e:	4422      	add	r2, r4
 8011d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011d18:	3302      	adds	r3, #2
 8011d1a:	e7c7      	b.n	8011cac <_printf_common+0x58>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	4622      	mov	r2, r4
 8011d20:	4641      	mov	r1, r8
 8011d22:	4638      	mov	r0, r7
 8011d24:	47c8      	blx	r9
 8011d26:	3001      	adds	r0, #1
 8011d28:	d0e6      	beq.n	8011cf8 <_printf_common+0xa4>
 8011d2a:	3601      	adds	r6, #1
 8011d2c:	e7d9      	b.n	8011ce2 <_printf_common+0x8e>
	...

08011d30 <_printf_i>:
 8011d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d34:	7e0f      	ldrb	r7, [r1, #24]
 8011d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d38:	2f78      	cmp	r7, #120	@ 0x78
 8011d3a:	4691      	mov	r9, r2
 8011d3c:	4680      	mov	r8, r0
 8011d3e:	460c      	mov	r4, r1
 8011d40:	469a      	mov	sl, r3
 8011d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d46:	d807      	bhi.n	8011d58 <_printf_i+0x28>
 8011d48:	2f62      	cmp	r7, #98	@ 0x62
 8011d4a:	d80a      	bhi.n	8011d62 <_printf_i+0x32>
 8011d4c:	2f00      	cmp	r7, #0
 8011d4e:	f000 80d1 	beq.w	8011ef4 <_printf_i+0x1c4>
 8011d52:	2f58      	cmp	r7, #88	@ 0x58
 8011d54:	f000 80b8 	beq.w	8011ec8 <_printf_i+0x198>
 8011d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d60:	e03a      	b.n	8011dd8 <_printf_i+0xa8>
 8011d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d66:	2b15      	cmp	r3, #21
 8011d68:	d8f6      	bhi.n	8011d58 <_printf_i+0x28>
 8011d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8011d70 <_printf_i+0x40>)
 8011d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d70:	08011dc9 	.word	0x08011dc9
 8011d74:	08011ddd 	.word	0x08011ddd
 8011d78:	08011d59 	.word	0x08011d59
 8011d7c:	08011d59 	.word	0x08011d59
 8011d80:	08011d59 	.word	0x08011d59
 8011d84:	08011d59 	.word	0x08011d59
 8011d88:	08011ddd 	.word	0x08011ddd
 8011d8c:	08011d59 	.word	0x08011d59
 8011d90:	08011d59 	.word	0x08011d59
 8011d94:	08011d59 	.word	0x08011d59
 8011d98:	08011d59 	.word	0x08011d59
 8011d9c:	08011edb 	.word	0x08011edb
 8011da0:	08011e07 	.word	0x08011e07
 8011da4:	08011e95 	.word	0x08011e95
 8011da8:	08011d59 	.word	0x08011d59
 8011dac:	08011d59 	.word	0x08011d59
 8011db0:	08011efd 	.word	0x08011efd
 8011db4:	08011d59 	.word	0x08011d59
 8011db8:	08011e07 	.word	0x08011e07
 8011dbc:	08011d59 	.word	0x08011d59
 8011dc0:	08011d59 	.word	0x08011d59
 8011dc4:	08011e9d 	.word	0x08011e9d
 8011dc8:	6833      	ldr	r3, [r6, #0]
 8011dca:	1d1a      	adds	r2, r3, #4
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	6032      	str	r2, [r6, #0]
 8011dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e09c      	b.n	8011f16 <_printf_i+0x1e6>
 8011ddc:	6833      	ldr	r3, [r6, #0]
 8011dde:	6820      	ldr	r0, [r4, #0]
 8011de0:	1d19      	adds	r1, r3, #4
 8011de2:	6031      	str	r1, [r6, #0]
 8011de4:	0606      	lsls	r6, r0, #24
 8011de6:	d501      	bpl.n	8011dec <_printf_i+0xbc>
 8011de8:	681d      	ldr	r5, [r3, #0]
 8011dea:	e003      	b.n	8011df4 <_printf_i+0xc4>
 8011dec:	0645      	lsls	r5, r0, #25
 8011dee:	d5fb      	bpl.n	8011de8 <_printf_i+0xb8>
 8011df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011df4:	2d00      	cmp	r5, #0
 8011df6:	da03      	bge.n	8011e00 <_printf_i+0xd0>
 8011df8:	232d      	movs	r3, #45	@ 0x2d
 8011dfa:	426d      	negs	r5, r5
 8011dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e00:	4858      	ldr	r0, [pc, #352]	@ (8011f64 <_printf_i+0x234>)
 8011e02:	230a      	movs	r3, #10
 8011e04:	e011      	b.n	8011e2a <_printf_i+0xfa>
 8011e06:	6821      	ldr	r1, [r4, #0]
 8011e08:	6833      	ldr	r3, [r6, #0]
 8011e0a:	0608      	lsls	r0, r1, #24
 8011e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e10:	d402      	bmi.n	8011e18 <_printf_i+0xe8>
 8011e12:	0649      	lsls	r1, r1, #25
 8011e14:	bf48      	it	mi
 8011e16:	b2ad      	uxthmi	r5, r5
 8011e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8011e1a:	4852      	ldr	r0, [pc, #328]	@ (8011f64 <_printf_i+0x234>)
 8011e1c:	6033      	str	r3, [r6, #0]
 8011e1e:	bf14      	ite	ne
 8011e20:	230a      	movne	r3, #10
 8011e22:	2308      	moveq	r3, #8
 8011e24:	2100      	movs	r1, #0
 8011e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e2a:	6866      	ldr	r6, [r4, #4]
 8011e2c:	60a6      	str	r6, [r4, #8]
 8011e2e:	2e00      	cmp	r6, #0
 8011e30:	db05      	blt.n	8011e3e <_printf_i+0x10e>
 8011e32:	6821      	ldr	r1, [r4, #0]
 8011e34:	432e      	orrs	r6, r5
 8011e36:	f021 0104 	bic.w	r1, r1, #4
 8011e3a:	6021      	str	r1, [r4, #0]
 8011e3c:	d04b      	beq.n	8011ed6 <_printf_i+0x1a6>
 8011e3e:	4616      	mov	r6, r2
 8011e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e44:	fb03 5711 	mls	r7, r3, r1, r5
 8011e48:	5dc7      	ldrb	r7, [r0, r7]
 8011e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e4e:	462f      	mov	r7, r5
 8011e50:	42bb      	cmp	r3, r7
 8011e52:	460d      	mov	r5, r1
 8011e54:	d9f4      	bls.n	8011e40 <_printf_i+0x110>
 8011e56:	2b08      	cmp	r3, #8
 8011e58:	d10b      	bne.n	8011e72 <_printf_i+0x142>
 8011e5a:	6823      	ldr	r3, [r4, #0]
 8011e5c:	07df      	lsls	r7, r3, #31
 8011e5e:	d508      	bpl.n	8011e72 <_printf_i+0x142>
 8011e60:	6923      	ldr	r3, [r4, #16]
 8011e62:	6861      	ldr	r1, [r4, #4]
 8011e64:	4299      	cmp	r1, r3
 8011e66:	bfde      	ittt	le
 8011e68:	2330      	movle	r3, #48	@ 0x30
 8011e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e72:	1b92      	subs	r2, r2, r6
 8011e74:	6122      	str	r2, [r4, #16]
 8011e76:	f8cd a000 	str.w	sl, [sp]
 8011e7a:	464b      	mov	r3, r9
 8011e7c:	aa03      	add	r2, sp, #12
 8011e7e:	4621      	mov	r1, r4
 8011e80:	4640      	mov	r0, r8
 8011e82:	f7ff fee7 	bl	8011c54 <_printf_common>
 8011e86:	3001      	adds	r0, #1
 8011e88:	d14a      	bne.n	8011f20 <_printf_i+0x1f0>
 8011e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8e:	b004      	add	sp, #16
 8011e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e94:	6823      	ldr	r3, [r4, #0]
 8011e96:	f043 0320 	orr.w	r3, r3, #32
 8011e9a:	6023      	str	r3, [r4, #0]
 8011e9c:	4832      	ldr	r0, [pc, #200]	@ (8011f68 <_printf_i+0x238>)
 8011e9e:	2778      	movs	r7, #120	@ 0x78
 8011ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	6831      	ldr	r1, [r6, #0]
 8011ea8:	061f      	lsls	r7, r3, #24
 8011eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8011eae:	d402      	bmi.n	8011eb6 <_printf_i+0x186>
 8011eb0:	065f      	lsls	r7, r3, #25
 8011eb2:	bf48      	it	mi
 8011eb4:	b2ad      	uxthmi	r5, r5
 8011eb6:	6031      	str	r1, [r6, #0]
 8011eb8:	07d9      	lsls	r1, r3, #31
 8011eba:	bf44      	itt	mi
 8011ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8011ec0:	6023      	strmi	r3, [r4, #0]
 8011ec2:	b11d      	cbz	r5, 8011ecc <_printf_i+0x19c>
 8011ec4:	2310      	movs	r3, #16
 8011ec6:	e7ad      	b.n	8011e24 <_printf_i+0xf4>
 8011ec8:	4826      	ldr	r0, [pc, #152]	@ (8011f64 <_printf_i+0x234>)
 8011eca:	e7e9      	b.n	8011ea0 <_printf_i+0x170>
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	f023 0320 	bic.w	r3, r3, #32
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	e7f6      	b.n	8011ec4 <_printf_i+0x194>
 8011ed6:	4616      	mov	r6, r2
 8011ed8:	e7bd      	b.n	8011e56 <_printf_i+0x126>
 8011eda:	6833      	ldr	r3, [r6, #0]
 8011edc:	6825      	ldr	r5, [r4, #0]
 8011ede:	6961      	ldr	r1, [r4, #20]
 8011ee0:	1d18      	adds	r0, r3, #4
 8011ee2:	6030      	str	r0, [r6, #0]
 8011ee4:	062e      	lsls	r6, r5, #24
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	d501      	bpl.n	8011eee <_printf_i+0x1be>
 8011eea:	6019      	str	r1, [r3, #0]
 8011eec:	e002      	b.n	8011ef4 <_printf_i+0x1c4>
 8011eee:	0668      	lsls	r0, r5, #25
 8011ef0:	d5fb      	bpl.n	8011eea <_printf_i+0x1ba>
 8011ef2:	8019      	strh	r1, [r3, #0]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	6123      	str	r3, [r4, #16]
 8011ef8:	4616      	mov	r6, r2
 8011efa:	e7bc      	b.n	8011e76 <_printf_i+0x146>
 8011efc:	6833      	ldr	r3, [r6, #0]
 8011efe:	1d1a      	adds	r2, r3, #4
 8011f00:	6032      	str	r2, [r6, #0]
 8011f02:	681e      	ldr	r6, [r3, #0]
 8011f04:	6862      	ldr	r2, [r4, #4]
 8011f06:	2100      	movs	r1, #0
 8011f08:	4630      	mov	r0, r6
 8011f0a:	f7ee f9f1 	bl	80002f0 <memchr>
 8011f0e:	b108      	cbz	r0, 8011f14 <_printf_i+0x1e4>
 8011f10:	1b80      	subs	r0, r0, r6
 8011f12:	6060      	str	r0, [r4, #4]
 8011f14:	6863      	ldr	r3, [r4, #4]
 8011f16:	6123      	str	r3, [r4, #16]
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f1e:	e7aa      	b.n	8011e76 <_printf_i+0x146>
 8011f20:	6923      	ldr	r3, [r4, #16]
 8011f22:	4632      	mov	r2, r6
 8011f24:	4649      	mov	r1, r9
 8011f26:	4640      	mov	r0, r8
 8011f28:	47d0      	blx	sl
 8011f2a:	3001      	adds	r0, #1
 8011f2c:	d0ad      	beq.n	8011e8a <_printf_i+0x15a>
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	079b      	lsls	r3, r3, #30
 8011f32:	d413      	bmi.n	8011f5c <_printf_i+0x22c>
 8011f34:	68e0      	ldr	r0, [r4, #12]
 8011f36:	9b03      	ldr	r3, [sp, #12]
 8011f38:	4298      	cmp	r0, r3
 8011f3a:	bfb8      	it	lt
 8011f3c:	4618      	movlt	r0, r3
 8011f3e:	e7a6      	b.n	8011e8e <_printf_i+0x15e>
 8011f40:	2301      	movs	r3, #1
 8011f42:	4632      	mov	r2, r6
 8011f44:	4649      	mov	r1, r9
 8011f46:	4640      	mov	r0, r8
 8011f48:	47d0      	blx	sl
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	d09d      	beq.n	8011e8a <_printf_i+0x15a>
 8011f4e:	3501      	adds	r5, #1
 8011f50:	68e3      	ldr	r3, [r4, #12]
 8011f52:	9903      	ldr	r1, [sp, #12]
 8011f54:	1a5b      	subs	r3, r3, r1
 8011f56:	42ab      	cmp	r3, r5
 8011f58:	dcf2      	bgt.n	8011f40 <_printf_i+0x210>
 8011f5a:	e7eb      	b.n	8011f34 <_printf_i+0x204>
 8011f5c:	2500      	movs	r5, #0
 8011f5e:	f104 0619 	add.w	r6, r4, #25
 8011f62:	e7f5      	b.n	8011f50 <_printf_i+0x220>
 8011f64:	080128a2 	.word	0x080128a2
 8011f68:	080128b3 	.word	0x080128b3

08011f6c <_scanf_chars>:
 8011f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f70:	4615      	mov	r5, r2
 8011f72:	688a      	ldr	r2, [r1, #8]
 8011f74:	4680      	mov	r8, r0
 8011f76:	460c      	mov	r4, r1
 8011f78:	b932      	cbnz	r2, 8011f88 <_scanf_chars+0x1c>
 8011f7a:	698a      	ldr	r2, [r1, #24]
 8011f7c:	2a00      	cmp	r2, #0
 8011f7e:	bf14      	ite	ne
 8011f80:	f04f 32ff 	movne.w	r2, #4294967295
 8011f84:	2201      	moveq	r2, #1
 8011f86:	608a      	str	r2, [r1, #8]
 8011f88:	6822      	ldr	r2, [r4, #0]
 8011f8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801201c <_scanf_chars+0xb0>
 8011f8e:	06d1      	lsls	r1, r2, #27
 8011f90:	bf5f      	itttt	pl
 8011f92:	681a      	ldrpl	r2, [r3, #0]
 8011f94:	1d11      	addpl	r1, r2, #4
 8011f96:	6019      	strpl	r1, [r3, #0]
 8011f98:	6816      	ldrpl	r6, [r2, #0]
 8011f9a:	2700      	movs	r7, #0
 8011f9c:	69a0      	ldr	r0, [r4, #24]
 8011f9e:	b188      	cbz	r0, 8011fc4 <_scanf_chars+0x58>
 8011fa0:	2801      	cmp	r0, #1
 8011fa2:	d107      	bne.n	8011fb4 <_scanf_chars+0x48>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	781a      	ldrb	r2, [r3, #0]
 8011fa8:	6963      	ldr	r3, [r4, #20]
 8011faa:	5c9b      	ldrb	r3, [r3, r2]
 8011fac:	b953      	cbnz	r3, 8011fc4 <_scanf_chars+0x58>
 8011fae:	2f00      	cmp	r7, #0
 8011fb0:	d031      	beq.n	8012016 <_scanf_chars+0xaa>
 8011fb2:	e022      	b.n	8011ffa <_scanf_chars+0x8e>
 8011fb4:	2802      	cmp	r0, #2
 8011fb6:	d120      	bne.n	8011ffa <_scanf_chars+0x8e>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011fc0:	071b      	lsls	r3, r3, #28
 8011fc2:	d41a      	bmi.n	8011ffa <_scanf_chars+0x8e>
 8011fc4:	6823      	ldr	r3, [r4, #0]
 8011fc6:	06da      	lsls	r2, r3, #27
 8011fc8:	bf5e      	ittt	pl
 8011fca:	682b      	ldrpl	r3, [r5, #0]
 8011fcc:	781b      	ldrbpl	r3, [r3, #0]
 8011fce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011fd2:	682a      	ldr	r2, [r5, #0]
 8011fd4:	686b      	ldr	r3, [r5, #4]
 8011fd6:	3201      	adds	r2, #1
 8011fd8:	602a      	str	r2, [r5, #0]
 8011fda:	68a2      	ldr	r2, [r4, #8]
 8011fdc:	3b01      	subs	r3, #1
 8011fde:	3a01      	subs	r2, #1
 8011fe0:	606b      	str	r3, [r5, #4]
 8011fe2:	3701      	adds	r7, #1
 8011fe4:	60a2      	str	r2, [r4, #8]
 8011fe6:	b142      	cbz	r2, 8011ffa <_scanf_chars+0x8e>
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dcd7      	bgt.n	8011f9c <_scanf_chars+0x30>
 8011fec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	4798      	blx	r3
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d0d0      	beq.n	8011f9c <_scanf_chars+0x30>
 8011ffa:	6823      	ldr	r3, [r4, #0]
 8011ffc:	f013 0310 	ands.w	r3, r3, #16
 8012000:	d105      	bne.n	801200e <_scanf_chars+0xa2>
 8012002:	68e2      	ldr	r2, [r4, #12]
 8012004:	3201      	adds	r2, #1
 8012006:	60e2      	str	r2, [r4, #12]
 8012008:	69a2      	ldr	r2, [r4, #24]
 801200a:	b102      	cbz	r2, 801200e <_scanf_chars+0xa2>
 801200c:	7033      	strb	r3, [r6, #0]
 801200e:	6923      	ldr	r3, [r4, #16]
 8012010:	443b      	add	r3, r7
 8012012:	6123      	str	r3, [r4, #16]
 8012014:	2000      	movs	r0, #0
 8012016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801201a:	bf00      	nop
 801201c:	08012791 	.word	0x08012791

08012020 <_scanf_i>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	4698      	mov	r8, r3
 8012026:	4b74      	ldr	r3, [pc, #464]	@ (80121f8 <_scanf_i+0x1d8>)
 8012028:	460c      	mov	r4, r1
 801202a:	4682      	mov	sl, r0
 801202c:	4616      	mov	r6, r2
 801202e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012032:	b087      	sub	sp, #28
 8012034:	ab03      	add	r3, sp, #12
 8012036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801203a:	4b70      	ldr	r3, [pc, #448]	@ (80121fc <_scanf_i+0x1dc>)
 801203c:	69a1      	ldr	r1, [r4, #24]
 801203e:	4a70      	ldr	r2, [pc, #448]	@ (8012200 <_scanf_i+0x1e0>)
 8012040:	2903      	cmp	r1, #3
 8012042:	bf08      	it	eq
 8012044:	461a      	moveq	r2, r3
 8012046:	68a3      	ldr	r3, [r4, #8]
 8012048:	9201      	str	r2, [sp, #4]
 801204a:	1e5a      	subs	r2, r3, #1
 801204c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012050:	bf88      	it	hi
 8012052:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012056:	4627      	mov	r7, r4
 8012058:	bf82      	ittt	hi
 801205a:	eb03 0905 	addhi.w	r9, r3, r5
 801205e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012062:	60a3      	strhi	r3, [r4, #8]
 8012064:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012068:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801206c:	bf98      	it	ls
 801206e:	f04f 0900 	movls.w	r9, #0
 8012072:	6023      	str	r3, [r4, #0]
 8012074:	463d      	mov	r5, r7
 8012076:	f04f 0b00 	mov.w	fp, #0
 801207a:	6831      	ldr	r1, [r6, #0]
 801207c:	ab03      	add	r3, sp, #12
 801207e:	7809      	ldrb	r1, [r1, #0]
 8012080:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012084:	2202      	movs	r2, #2
 8012086:	f7ee f933 	bl	80002f0 <memchr>
 801208a:	b328      	cbz	r0, 80120d8 <_scanf_i+0xb8>
 801208c:	f1bb 0f01 	cmp.w	fp, #1
 8012090:	d159      	bne.n	8012146 <_scanf_i+0x126>
 8012092:	6862      	ldr	r2, [r4, #4]
 8012094:	b92a      	cbnz	r2, 80120a2 <_scanf_i+0x82>
 8012096:	6822      	ldr	r2, [r4, #0]
 8012098:	2108      	movs	r1, #8
 801209a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801209e:	6061      	str	r1, [r4, #4]
 80120a0:	6022      	str	r2, [r4, #0]
 80120a2:	6822      	ldr	r2, [r4, #0]
 80120a4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80120a8:	6022      	str	r2, [r4, #0]
 80120aa:	68a2      	ldr	r2, [r4, #8]
 80120ac:	1e51      	subs	r1, r2, #1
 80120ae:	60a1      	str	r1, [r4, #8]
 80120b0:	b192      	cbz	r2, 80120d8 <_scanf_i+0xb8>
 80120b2:	6832      	ldr	r2, [r6, #0]
 80120b4:	1c51      	adds	r1, r2, #1
 80120b6:	6031      	str	r1, [r6, #0]
 80120b8:	7812      	ldrb	r2, [r2, #0]
 80120ba:	f805 2b01 	strb.w	r2, [r5], #1
 80120be:	6872      	ldr	r2, [r6, #4]
 80120c0:	3a01      	subs	r2, #1
 80120c2:	2a00      	cmp	r2, #0
 80120c4:	6072      	str	r2, [r6, #4]
 80120c6:	dc07      	bgt.n	80120d8 <_scanf_i+0xb8>
 80120c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80120cc:	4631      	mov	r1, r6
 80120ce:	4650      	mov	r0, sl
 80120d0:	4790      	blx	r2
 80120d2:	2800      	cmp	r0, #0
 80120d4:	f040 8085 	bne.w	80121e2 <_scanf_i+0x1c2>
 80120d8:	f10b 0b01 	add.w	fp, fp, #1
 80120dc:	f1bb 0f03 	cmp.w	fp, #3
 80120e0:	d1cb      	bne.n	801207a <_scanf_i+0x5a>
 80120e2:	6863      	ldr	r3, [r4, #4]
 80120e4:	b90b      	cbnz	r3, 80120ea <_scanf_i+0xca>
 80120e6:	230a      	movs	r3, #10
 80120e8:	6063      	str	r3, [r4, #4]
 80120ea:	6863      	ldr	r3, [r4, #4]
 80120ec:	4945      	ldr	r1, [pc, #276]	@ (8012204 <_scanf_i+0x1e4>)
 80120ee:	6960      	ldr	r0, [r4, #20]
 80120f0:	1ac9      	subs	r1, r1, r3
 80120f2:	f000 f889 	bl	8012208 <__sccl>
 80120f6:	f04f 0b00 	mov.w	fp, #0
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	6822      	ldr	r2, [r4, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d03d      	beq.n	801217e <_scanf_i+0x15e>
 8012102:	6831      	ldr	r1, [r6, #0]
 8012104:	6960      	ldr	r0, [r4, #20]
 8012106:	f891 c000 	ldrb.w	ip, [r1]
 801210a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801210e:	2800      	cmp	r0, #0
 8012110:	d035      	beq.n	801217e <_scanf_i+0x15e>
 8012112:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012116:	d124      	bne.n	8012162 <_scanf_i+0x142>
 8012118:	0510      	lsls	r0, r2, #20
 801211a:	d522      	bpl.n	8012162 <_scanf_i+0x142>
 801211c:	f10b 0b01 	add.w	fp, fp, #1
 8012120:	f1b9 0f00 	cmp.w	r9, #0
 8012124:	d003      	beq.n	801212e <_scanf_i+0x10e>
 8012126:	3301      	adds	r3, #1
 8012128:	f109 39ff 	add.w	r9, r9, #4294967295
 801212c:	60a3      	str	r3, [r4, #8]
 801212e:	6873      	ldr	r3, [r6, #4]
 8012130:	3b01      	subs	r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	6073      	str	r3, [r6, #4]
 8012136:	dd1b      	ble.n	8012170 <_scanf_i+0x150>
 8012138:	6833      	ldr	r3, [r6, #0]
 801213a:	3301      	adds	r3, #1
 801213c:	6033      	str	r3, [r6, #0]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	3b01      	subs	r3, #1
 8012142:	60a3      	str	r3, [r4, #8]
 8012144:	e7d9      	b.n	80120fa <_scanf_i+0xda>
 8012146:	f1bb 0f02 	cmp.w	fp, #2
 801214a:	d1ae      	bne.n	80120aa <_scanf_i+0x8a>
 801214c:	6822      	ldr	r2, [r4, #0]
 801214e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012152:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012156:	d1c4      	bne.n	80120e2 <_scanf_i+0xc2>
 8012158:	2110      	movs	r1, #16
 801215a:	6061      	str	r1, [r4, #4]
 801215c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012160:	e7a2      	b.n	80120a8 <_scanf_i+0x88>
 8012162:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012166:	6022      	str	r2, [r4, #0]
 8012168:	780b      	ldrb	r3, [r1, #0]
 801216a:	f805 3b01 	strb.w	r3, [r5], #1
 801216e:	e7de      	b.n	801212e <_scanf_i+0x10e>
 8012170:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012174:	4631      	mov	r1, r6
 8012176:	4650      	mov	r0, sl
 8012178:	4798      	blx	r3
 801217a:	2800      	cmp	r0, #0
 801217c:	d0df      	beq.n	801213e <_scanf_i+0x11e>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	05d9      	lsls	r1, r3, #23
 8012182:	d50d      	bpl.n	80121a0 <_scanf_i+0x180>
 8012184:	42bd      	cmp	r5, r7
 8012186:	d909      	bls.n	801219c <_scanf_i+0x17c>
 8012188:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801218c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012190:	4632      	mov	r2, r6
 8012192:	4650      	mov	r0, sl
 8012194:	4798      	blx	r3
 8012196:	f105 39ff 	add.w	r9, r5, #4294967295
 801219a:	464d      	mov	r5, r9
 801219c:	42bd      	cmp	r5, r7
 801219e:	d028      	beq.n	80121f2 <_scanf_i+0x1d2>
 80121a0:	6822      	ldr	r2, [r4, #0]
 80121a2:	f012 0210 	ands.w	r2, r2, #16
 80121a6:	d113      	bne.n	80121d0 <_scanf_i+0x1b0>
 80121a8:	702a      	strb	r2, [r5, #0]
 80121aa:	6863      	ldr	r3, [r4, #4]
 80121ac:	9e01      	ldr	r6, [sp, #4]
 80121ae:	4639      	mov	r1, r7
 80121b0:	4650      	mov	r0, sl
 80121b2:	47b0      	blx	r6
 80121b4:	f8d8 3000 	ldr.w	r3, [r8]
 80121b8:	6821      	ldr	r1, [r4, #0]
 80121ba:	1d1a      	adds	r2, r3, #4
 80121bc:	f8c8 2000 	str.w	r2, [r8]
 80121c0:	f011 0f20 	tst.w	r1, #32
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	d00f      	beq.n	80121e8 <_scanf_i+0x1c8>
 80121c8:	6018      	str	r0, [r3, #0]
 80121ca:	68e3      	ldr	r3, [r4, #12]
 80121cc:	3301      	adds	r3, #1
 80121ce:	60e3      	str	r3, [r4, #12]
 80121d0:	6923      	ldr	r3, [r4, #16]
 80121d2:	1bed      	subs	r5, r5, r7
 80121d4:	445d      	add	r5, fp
 80121d6:	442b      	add	r3, r5
 80121d8:	6123      	str	r3, [r4, #16]
 80121da:	2000      	movs	r0, #0
 80121dc:	b007      	add	sp, #28
 80121de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e2:	f04f 0b00 	mov.w	fp, #0
 80121e6:	e7ca      	b.n	801217e <_scanf_i+0x15e>
 80121e8:	07ca      	lsls	r2, r1, #31
 80121ea:	bf4c      	ite	mi
 80121ec:	8018      	strhmi	r0, [r3, #0]
 80121ee:	6018      	strpl	r0, [r3, #0]
 80121f0:	e7eb      	b.n	80121ca <_scanf_i+0x1aa>
 80121f2:	2001      	movs	r0, #1
 80121f4:	e7f2      	b.n	80121dc <_scanf_i+0x1bc>
 80121f6:	bf00      	nop
 80121f8:	08012744 	.word	0x08012744
 80121fc:	080124b1 	.word	0x080124b1
 8012200:	080112b5 	.word	0x080112b5
 8012204:	080128d4 	.word	0x080128d4

08012208 <__sccl>:
 8012208:	b570      	push	{r4, r5, r6, lr}
 801220a:	780b      	ldrb	r3, [r1, #0]
 801220c:	4604      	mov	r4, r0
 801220e:	2b5e      	cmp	r3, #94	@ 0x5e
 8012210:	bf0b      	itete	eq
 8012212:	784b      	ldrbeq	r3, [r1, #1]
 8012214:	1c4a      	addne	r2, r1, #1
 8012216:	1c8a      	addeq	r2, r1, #2
 8012218:	2100      	movne	r1, #0
 801221a:	bf08      	it	eq
 801221c:	2101      	moveq	r1, #1
 801221e:	3801      	subs	r0, #1
 8012220:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012224:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012228:	42a8      	cmp	r0, r5
 801222a:	d1fb      	bne.n	8012224 <__sccl+0x1c>
 801222c:	b90b      	cbnz	r3, 8012232 <__sccl+0x2a>
 801222e:	1e50      	subs	r0, r2, #1
 8012230:	bd70      	pop	{r4, r5, r6, pc}
 8012232:	f081 0101 	eor.w	r1, r1, #1
 8012236:	54e1      	strb	r1, [r4, r3]
 8012238:	4610      	mov	r0, r2
 801223a:	4602      	mov	r2, r0
 801223c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012240:	2d2d      	cmp	r5, #45	@ 0x2d
 8012242:	d005      	beq.n	8012250 <__sccl+0x48>
 8012244:	2d5d      	cmp	r5, #93	@ 0x5d
 8012246:	d016      	beq.n	8012276 <__sccl+0x6e>
 8012248:	2d00      	cmp	r5, #0
 801224a:	d0f1      	beq.n	8012230 <__sccl+0x28>
 801224c:	462b      	mov	r3, r5
 801224e:	e7f2      	b.n	8012236 <__sccl+0x2e>
 8012250:	7846      	ldrb	r6, [r0, #1]
 8012252:	2e5d      	cmp	r6, #93	@ 0x5d
 8012254:	d0fa      	beq.n	801224c <__sccl+0x44>
 8012256:	42b3      	cmp	r3, r6
 8012258:	dcf8      	bgt.n	801224c <__sccl+0x44>
 801225a:	3002      	adds	r0, #2
 801225c:	461a      	mov	r2, r3
 801225e:	3201      	adds	r2, #1
 8012260:	4296      	cmp	r6, r2
 8012262:	54a1      	strb	r1, [r4, r2]
 8012264:	dcfb      	bgt.n	801225e <__sccl+0x56>
 8012266:	1af2      	subs	r2, r6, r3
 8012268:	3a01      	subs	r2, #1
 801226a:	1c5d      	adds	r5, r3, #1
 801226c:	42b3      	cmp	r3, r6
 801226e:	bfa8      	it	ge
 8012270:	2200      	movge	r2, #0
 8012272:	18ab      	adds	r3, r5, r2
 8012274:	e7e1      	b.n	801223a <__sccl+0x32>
 8012276:	4610      	mov	r0, r2
 8012278:	e7da      	b.n	8012230 <__sccl+0x28>

0801227a <__submore>:
 801227a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801227e:	460c      	mov	r4, r1
 8012280:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012286:	4299      	cmp	r1, r3
 8012288:	d11d      	bne.n	80122c6 <__submore+0x4c>
 801228a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801228e:	f7ff f92d 	bl	80114ec <_malloc_r>
 8012292:	b918      	cbnz	r0, 801229c <__submore+0x22>
 8012294:	f04f 30ff 	mov.w	r0, #4294967295
 8012298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801229c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80122a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80122a2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80122a6:	6360      	str	r0, [r4, #52]	@ 0x34
 80122a8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80122ac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80122b0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80122b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80122b8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80122bc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80122c0:	6020      	str	r0, [r4, #0]
 80122c2:	2000      	movs	r0, #0
 80122c4:	e7e8      	b.n	8012298 <__submore+0x1e>
 80122c6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80122c8:	0077      	lsls	r7, r6, #1
 80122ca:	463a      	mov	r2, r7
 80122cc:	f000 f848 	bl	8012360 <_realloc_r>
 80122d0:	4605      	mov	r5, r0
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d0de      	beq.n	8012294 <__submore+0x1a>
 80122d6:	eb00 0806 	add.w	r8, r0, r6
 80122da:	4601      	mov	r1, r0
 80122dc:	4632      	mov	r2, r6
 80122de:	4640      	mov	r0, r8
 80122e0:	f000 f830 	bl	8012344 <memcpy>
 80122e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80122e8:	f8c4 8000 	str.w	r8, [r4]
 80122ec:	e7e9      	b.n	80122c2 <__submore+0x48>

080122ee <memmove>:
 80122ee:	4288      	cmp	r0, r1
 80122f0:	b510      	push	{r4, lr}
 80122f2:	eb01 0402 	add.w	r4, r1, r2
 80122f6:	d902      	bls.n	80122fe <memmove+0x10>
 80122f8:	4284      	cmp	r4, r0
 80122fa:	4623      	mov	r3, r4
 80122fc:	d807      	bhi.n	801230e <memmove+0x20>
 80122fe:	1e43      	subs	r3, r0, #1
 8012300:	42a1      	cmp	r1, r4
 8012302:	d008      	beq.n	8012316 <memmove+0x28>
 8012304:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012308:	f803 2f01 	strb.w	r2, [r3, #1]!
 801230c:	e7f8      	b.n	8012300 <memmove+0x12>
 801230e:	4402      	add	r2, r0
 8012310:	4601      	mov	r1, r0
 8012312:	428a      	cmp	r2, r1
 8012314:	d100      	bne.n	8012318 <memmove+0x2a>
 8012316:	bd10      	pop	{r4, pc}
 8012318:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801231c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012320:	e7f7      	b.n	8012312 <memmove+0x24>
	...

08012324 <_sbrk_r>:
 8012324:	b538      	push	{r3, r4, r5, lr}
 8012326:	4d06      	ldr	r5, [pc, #24]	@ (8012340 <_sbrk_r+0x1c>)
 8012328:	2300      	movs	r3, #0
 801232a:	4604      	mov	r4, r0
 801232c:	4608      	mov	r0, r1
 801232e:	602b      	str	r3, [r5, #0]
 8012330:	f7ee feca 	bl	80010c8 <_sbrk>
 8012334:	1c43      	adds	r3, r0, #1
 8012336:	d102      	bne.n	801233e <_sbrk_r+0x1a>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b103      	cbz	r3, 801233e <_sbrk_r+0x1a>
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	bd38      	pop	{r3, r4, r5, pc}
 8012340:	240032cc 	.word	0x240032cc

08012344 <memcpy>:
 8012344:	440a      	add	r2, r1
 8012346:	4291      	cmp	r1, r2
 8012348:	f100 33ff 	add.w	r3, r0, #4294967295
 801234c:	d100      	bne.n	8012350 <memcpy+0xc>
 801234e:	4770      	bx	lr
 8012350:	b510      	push	{r4, lr}
 8012352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012356:	f803 4f01 	strb.w	r4, [r3, #1]!
 801235a:	4291      	cmp	r1, r2
 801235c:	d1f9      	bne.n	8012352 <memcpy+0xe>
 801235e:	bd10      	pop	{r4, pc}

08012360 <_realloc_r>:
 8012360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012364:	4607      	mov	r7, r0
 8012366:	4614      	mov	r4, r2
 8012368:	460d      	mov	r5, r1
 801236a:	b921      	cbnz	r1, 8012376 <_realloc_r+0x16>
 801236c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012370:	4611      	mov	r1, r2
 8012372:	f7ff b8bb 	b.w	80114ec <_malloc_r>
 8012376:	b92a      	cbnz	r2, 8012384 <_realloc_r+0x24>
 8012378:	f7ff f84c 	bl	8011414 <_free_r>
 801237c:	4625      	mov	r5, r4
 801237e:	4628      	mov	r0, r5
 8012380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012384:	f000 f896 	bl	80124b4 <_malloc_usable_size_r>
 8012388:	4284      	cmp	r4, r0
 801238a:	4606      	mov	r6, r0
 801238c:	d802      	bhi.n	8012394 <_realloc_r+0x34>
 801238e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012392:	d8f4      	bhi.n	801237e <_realloc_r+0x1e>
 8012394:	4621      	mov	r1, r4
 8012396:	4638      	mov	r0, r7
 8012398:	f7ff f8a8 	bl	80114ec <_malloc_r>
 801239c:	4680      	mov	r8, r0
 801239e:	b908      	cbnz	r0, 80123a4 <_realloc_r+0x44>
 80123a0:	4645      	mov	r5, r8
 80123a2:	e7ec      	b.n	801237e <_realloc_r+0x1e>
 80123a4:	42b4      	cmp	r4, r6
 80123a6:	4622      	mov	r2, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	bf28      	it	cs
 80123ac:	4632      	movcs	r2, r6
 80123ae:	f7ff ffc9 	bl	8012344 <memcpy>
 80123b2:	4629      	mov	r1, r5
 80123b4:	4638      	mov	r0, r7
 80123b6:	f7ff f82d 	bl	8011414 <_free_r>
 80123ba:	e7f1      	b.n	80123a0 <_realloc_r+0x40>

080123bc <_strtol_l.isra.0>:
 80123bc:	2b24      	cmp	r3, #36	@ 0x24
 80123be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123c2:	4686      	mov	lr, r0
 80123c4:	4690      	mov	r8, r2
 80123c6:	d801      	bhi.n	80123cc <_strtol_l.isra.0+0x10>
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d106      	bne.n	80123da <_strtol_l.isra.0+0x1e>
 80123cc:	f7fe fff6 	bl	80113bc <__errno>
 80123d0:	2316      	movs	r3, #22
 80123d2:	6003      	str	r3, [r0, #0]
 80123d4:	2000      	movs	r0, #0
 80123d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123da:	4834      	ldr	r0, [pc, #208]	@ (80124ac <_strtol_l.isra.0+0xf0>)
 80123dc:	460d      	mov	r5, r1
 80123de:	462a      	mov	r2, r5
 80123e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123e4:	5d06      	ldrb	r6, [r0, r4]
 80123e6:	f016 0608 	ands.w	r6, r6, #8
 80123ea:	d1f8      	bne.n	80123de <_strtol_l.isra.0+0x22>
 80123ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80123ee:	d110      	bne.n	8012412 <_strtol_l.isra.0+0x56>
 80123f0:	782c      	ldrb	r4, [r5, #0]
 80123f2:	2601      	movs	r6, #1
 80123f4:	1c95      	adds	r5, r2, #2
 80123f6:	f033 0210 	bics.w	r2, r3, #16
 80123fa:	d115      	bne.n	8012428 <_strtol_l.isra.0+0x6c>
 80123fc:	2c30      	cmp	r4, #48	@ 0x30
 80123fe:	d10d      	bne.n	801241c <_strtol_l.isra.0+0x60>
 8012400:	782a      	ldrb	r2, [r5, #0]
 8012402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012406:	2a58      	cmp	r2, #88	@ 0x58
 8012408:	d108      	bne.n	801241c <_strtol_l.isra.0+0x60>
 801240a:	786c      	ldrb	r4, [r5, #1]
 801240c:	3502      	adds	r5, #2
 801240e:	2310      	movs	r3, #16
 8012410:	e00a      	b.n	8012428 <_strtol_l.isra.0+0x6c>
 8012412:	2c2b      	cmp	r4, #43	@ 0x2b
 8012414:	bf04      	itt	eq
 8012416:	782c      	ldrbeq	r4, [r5, #0]
 8012418:	1c95      	addeq	r5, r2, #2
 801241a:	e7ec      	b.n	80123f6 <_strtol_l.isra.0+0x3a>
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1f6      	bne.n	801240e <_strtol_l.isra.0+0x52>
 8012420:	2c30      	cmp	r4, #48	@ 0x30
 8012422:	bf14      	ite	ne
 8012424:	230a      	movne	r3, #10
 8012426:	2308      	moveq	r3, #8
 8012428:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801242c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012430:	2200      	movs	r2, #0
 8012432:	fbbc f9f3 	udiv	r9, ip, r3
 8012436:	4610      	mov	r0, r2
 8012438:	fb03 ca19 	mls	sl, r3, r9, ip
 801243c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012440:	2f09      	cmp	r7, #9
 8012442:	d80f      	bhi.n	8012464 <_strtol_l.isra.0+0xa8>
 8012444:	463c      	mov	r4, r7
 8012446:	42a3      	cmp	r3, r4
 8012448:	dd1b      	ble.n	8012482 <_strtol_l.isra.0+0xc6>
 801244a:	1c57      	adds	r7, r2, #1
 801244c:	d007      	beq.n	801245e <_strtol_l.isra.0+0xa2>
 801244e:	4581      	cmp	r9, r0
 8012450:	d314      	bcc.n	801247c <_strtol_l.isra.0+0xc0>
 8012452:	d101      	bne.n	8012458 <_strtol_l.isra.0+0x9c>
 8012454:	45a2      	cmp	sl, r4
 8012456:	db11      	blt.n	801247c <_strtol_l.isra.0+0xc0>
 8012458:	fb00 4003 	mla	r0, r0, r3, r4
 801245c:	2201      	movs	r2, #1
 801245e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012462:	e7eb      	b.n	801243c <_strtol_l.isra.0+0x80>
 8012464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012468:	2f19      	cmp	r7, #25
 801246a:	d801      	bhi.n	8012470 <_strtol_l.isra.0+0xb4>
 801246c:	3c37      	subs	r4, #55	@ 0x37
 801246e:	e7ea      	b.n	8012446 <_strtol_l.isra.0+0x8a>
 8012470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012474:	2f19      	cmp	r7, #25
 8012476:	d804      	bhi.n	8012482 <_strtol_l.isra.0+0xc6>
 8012478:	3c57      	subs	r4, #87	@ 0x57
 801247a:	e7e4      	b.n	8012446 <_strtol_l.isra.0+0x8a>
 801247c:	f04f 32ff 	mov.w	r2, #4294967295
 8012480:	e7ed      	b.n	801245e <_strtol_l.isra.0+0xa2>
 8012482:	1c53      	adds	r3, r2, #1
 8012484:	d108      	bne.n	8012498 <_strtol_l.isra.0+0xdc>
 8012486:	2322      	movs	r3, #34	@ 0x22
 8012488:	f8ce 3000 	str.w	r3, [lr]
 801248c:	4660      	mov	r0, ip
 801248e:	f1b8 0f00 	cmp.w	r8, #0
 8012492:	d0a0      	beq.n	80123d6 <_strtol_l.isra.0+0x1a>
 8012494:	1e69      	subs	r1, r5, #1
 8012496:	e006      	b.n	80124a6 <_strtol_l.isra.0+0xea>
 8012498:	b106      	cbz	r6, 801249c <_strtol_l.isra.0+0xe0>
 801249a:	4240      	negs	r0, r0
 801249c:	f1b8 0f00 	cmp.w	r8, #0
 80124a0:	d099      	beq.n	80123d6 <_strtol_l.isra.0+0x1a>
 80124a2:	2a00      	cmp	r2, #0
 80124a4:	d1f6      	bne.n	8012494 <_strtol_l.isra.0+0xd8>
 80124a6:	f8c8 1000 	str.w	r1, [r8]
 80124aa:	e794      	b.n	80123d6 <_strtol_l.isra.0+0x1a>
 80124ac:	08012791 	.word	0x08012791

080124b0 <_strtol_r>:
 80124b0:	f7ff bf84 	b.w	80123bc <_strtol_l.isra.0>

080124b4 <_malloc_usable_size_r>:
 80124b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124b8:	1f18      	subs	r0, r3, #4
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	bfbc      	itt	lt
 80124be:	580b      	ldrlt	r3, [r1, r0]
 80124c0:	18c0      	addlt	r0, r0, r3
 80124c2:	4770      	bx	lr

080124c4 <_init>:
 80124c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c6:	bf00      	nop
 80124c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ca:	bc08      	pop	{r3}
 80124cc:	469e      	mov	lr, r3
 80124ce:	4770      	bx	lr

080124d0 <_fini>:
 80124d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d2:	bf00      	nop
 80124d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124d6:	bc08      	pop	{r3}
 80124d8:	469e      	mov	lr, r3
 80124da:	4770      	bx	lr
